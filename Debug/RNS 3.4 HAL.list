
RNS 3.4 HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc4  0801c7b8  0801c7b8  0002c7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d37c  0801d37c  00030450  2**0
                  CONTENTS
  4 .ARM          00000008  0801d37c  0801d37c  0002d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d384  0801d384  00030450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d384  0801d384  0002d384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d388  0801d388  0002d388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000450  20000000  0801d38c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007cf8  20000450  0801d7dc  00030450  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008148  0801d7dc  00038148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030450  2**0
                  CONTENTS, READONLY
 12 .debug_info   00056a5a  00000000  00000000  00030480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007941  00000000  00000000  00086eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  0008e820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e08  00000000  00000000  000908f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4b3  00000000  00000000  000926f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f042  00000000  00000000  000bebab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5006  00000000  00000000  000edbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a118  00000000  00000000  001d2c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000450 	.word	0x20000450
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c7a0 	.word	0x0801c7a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000454 	.word	0x20000454
 80001cc:	0801c7a0 	.word	0x0801c7a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <ABT>:

void ABT(ABT_t *filt)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	float pos_residual;
	float pos_predict;
	float vel_predict;

	/* Predict position and velocity using previous sample values */
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 6a00 	vldr	s13, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	edd3 7a00 	vldr	s15, [r3]
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edd3 7a00 	vldr	s15, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b54      	ldr	r3, [pc, #336]	; (800121c <ABT+0x1a4>)
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4690      	mov	r8, r2
 80010d4:	4699      	mov	r9, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4640      	mov	r0, r8
 80010e8:	4649      	mov	r1, r9
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8c9 	bl	800028c <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
	pos_predict = *(filt->pos_output) + filt->sample_time *
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd71 	bl	8000be8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	617b      	str	r3, [r7, #20]
	vel_predict = *(filt->vel_output) + filt->sample_time * (*(filt->acc_output));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Calculate residue */
	pos_residual = *filt->input - pos_predict;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update estimate with weighted input (a - b - g) */
	*(filt->pos_output) = pos_predict + filt->alpha * pos_residual;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a01 	vldr	s14, [r3, #4]
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	edc3 7a00 	vstr	s15, [r3]
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 6a02 	vldr	s13, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																* pos_residual;
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	edd7 7a04 	vldr	s15, [r7, #16]
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	edc3 7a00 	vstr	s15, [r3]
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <ABT+0x1a4>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4690      	mov	r8, r2
 80011b0:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff fb3b 	bl	800084c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69dc      	ldr	r4, [r3, #28]
 8001208:	f7ff fcee 	bl	8000be8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	6023      	str	r3, [r4, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	3fe00000 	.word	0x3fe00000

08001220 <DMA2_Stream0_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream0_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <DMA2_Stream0_IRQHandler+0x1c>)
 8001226:	f00d f819 	bl	800e25c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc2);
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <DMA2_Stream0_IRQHandler+0x20>)
 800122c:	f00d f816 	bl	800e25c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc3);
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <DMA2_Stream0_IRQHandler+0x24>)
 8001232:	f00d f813 	bl	800e25c <HAL_DMA_IRQHandler>

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20005618 	.word	0x20005618
 8001240:	20005678 	.word	0x20005678
 8001244:	20005528 	.word	0x20005528

08001248 <DMA2_Stream1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <DMA2_Stream1_IRQHandler+0x1c>)
 800124e:	f00d f805 	bl	800e25c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc2);
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <DMA2_Stream1_IRQHandler+0x20>)
 8001254:	f00d f802 	bl	800e25c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc3);
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <DMA2_Stream1_IRQHandler+0x24>)
 800125a:	f00c ffff 	bl	800e25c <HAL_DMA_IRQHandler>

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20005618 	.word	0x20005618
 8001268:	20005678 	.word	0x20005678
 800126c:	20005528 	.word	0x20005528

08001270 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001270:	b408      	push	{r3}
 8001272:	b580      	push	{r7, lr}
 8001274:	b089      	sub	sp, #36	; 0x24
 8001276:	af02      	add	r7, sp, #8
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	621a      	str	r2, [r3, #32]
	bdc->Channel = Channel;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
	bdc->Dirpintype =  Dirpintype;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001290:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001296:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d12e      	bne.n	80012fe <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	1d1a      	adds	r2, r3, #4
 80012a4:	617a      	str	r2, [r7, #20]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	1d1a      	adds	r2, r3, #4
 80012b0:	617a      	str	r2, [r7, #20]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1d1a      	adds	r2, r3, #4
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	1d1a      	adds	r2, r3, #4
 80012ca:	617a      	str	r2, [r7, #20]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6858      	ldr	r0, [r3, #4]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8919      	ldrh	r1, [r3, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	2201      	movs	r2, #1
 80012e4:	f000 f98a 	bl	80015fc <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	68d8      	ldr	r0, [r3, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8a19      	ldrh	r1, [r3, #16]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2302      	movs	r3, #2
 80012f6:	2201      	movs	r2, #1
 80012f8:	f000 f980 	bl	80015fc <GPIOPinsInit>
 80012fc:	e017      	b.n	800132e <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d113      	bne.n	800132e <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1d1a      	adds	r2, r3, #4
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	617a      	str	r2, [r7, #20]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1d1a      	adds	r2, r3, #4
 8001324:	617a      	str	r2, [r7, #20]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <BDCInit+0xd2>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001340:	e018      	b.n	8001374 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b04      	cmp	r3, #4
 8001348:	d105      	bne.n	8001356 <BDCInit+0xe6>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001354:	e00e      	b.n	8001374 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2b08      	cmp	r3, #8
 800135c:	d105      	bne.n	800136a <BDCInit+0xfa>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001368:	e004      	b.n	8001374 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800137e:	b001      	add	sp, #4
 8001380:	4770      	bx	lr

08001382 <SwapBDC>:


void SwapBDC(BDC_t*bdc,int8_t swap){
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]

	bdc->swap=swap;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	769a      	strb	r2, [r3, #26]

}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

	bdc->buffer= pwm*bdc->swap;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80013b0:	461a      	mov	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	fb03 f202 	mul.w	r2, r3, r2
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	61da      	str	r2, [r3, #28]

	if(bdc->buffer >= 0){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db59      	blt.n	8001478 <WriteBDC+0xd8>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), bdc->buffer);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d106      	bne.n	80013da <WriteBDC+0x3a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
 80013d8:	e01e      	b.n	8001418 <WriteBDC+0x78>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d107      	bne.n	80013f2 <WriteBDC+0x52>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69d9      	ldr	r1, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	460b      	mov	r3, r1
 80013ee:	6393      	str	r3, [r2, #56]	; 0x38
 80013f0:	e012      	b.n	8001418 <WriteBDC+0x78>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d107      	bne.n	800140a <WriteBDC+0x6a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69d9      	ldr	r1, [r3, #28]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001408:	e006      	b.n	8001418 <WriteBDC+0x78>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69d9      	ldr	r1, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	460b      	mov	r3, r1
 8001416:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d110      	bne.n	8001442 <WriteBDC+0xa2>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6858      	ldr	r0, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	891b      	ldrh	r3, [r3, #8]
 8001428:	2201      	movs	r2, #1
 800142a:	4619      	mov	r1, r3
 800142c:	f00d fa62 	bl	800e8f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68d8      	ldr	r0, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	8a1b      	ldrh	r3, [r3, #16]
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	f00d fa5a 	bl	800e8f4 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001440:	e07b      	b.n	800153a <WriteBDC+0x19a>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d177      	bne.n	800153a <WriteBDC+0x19a>
			bdc->shiftreg->Byte |= bdc->dir1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1a      	ldrb	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	430a      	orrs	r2, r1
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7e5b      	ldrb	r3, [r3, #25]
 8001468:	43db      	mvns	r3, r3
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	400a      	ands	r2, r1
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
}
 8001476:	e060      	b.n	800153a <WriteBDC+0x19a>
	}else if (bdc->buffer < 0){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da5c      	bge.n	800153a <WriteBDC+0x19a>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), bdc->buffer*(-1));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <WriteBDC+0xf8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	425a      	negs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
 8001496:	e021      	b.n	80014dc <WriteBDC+0x13c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	2b04      	cmp	r3, #4
 800149e:	d108      	bne.n	80014b2 <WriteBDC+0x112>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4259      	negs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	460b      	mov	r3, r1
 80014ae:	6393      	str	r3, [r2, #56]	; 0x38
 80014b0:	e014      	b.n	80014dc <WriteBDC+0x13c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d108      	bne.n	80014cc <WriteBDC+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4259      	negs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	460b      	mov	r3, r1
 80014c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014ca:	e007      	b.n	80014dc <WriteBDC+0x13c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	4259      	negs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	460b      	mov	r3, r1
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d110      	bne.n	8001506 <WriteBDC+0x166>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6858      	ldr	r0, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	891b      	ldrh	r3, [r3, #8]
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f00d fa00 	bl	800e8f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68d8      	ldr	r0, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	8a1b      	ldrh	r3, [r3, #16]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f00d f9f8 	bl	800e8f4 <HAL_GPIO_WritePin>
}
 8001504:	e019      	b.n	800153a <WriteBDC+0x19a>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d115      	bne.n	800153a <WriteBDC+0x19a>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	7819      	ldrb	r1, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	400a      	ands	r2, r1
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	7819      	ldrb	r1, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e5a      	ldrb	r2, [r3, #25]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	430a      	orrs	r2, r1
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <StopBDC>:
 * Function Return		: None
 * Function Example		: StopBDC(&BDC1);
 */

void StopBDC(BDC_t* bdc)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
//	*(bdc-> speed) = 0;
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <StopBDC+0x1c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
 800155c:	e018      	b.n	8001590 <StopBDC+0x4e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b04      	cmp	r3, #4
 8001564:	d105      	bne.n	8001572 <StopBDC+0x30>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	6393      	str	r3, [r2, #56]	; 0x38
 8001570:	e00e      	b.n	8001590 <StopBDC+0x4e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2b08      	cmp	r3, #8
 8001578:	d105      	bne.n	8001586 <StopBDC+0x44>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001584:	e004      	b.n	8001590 <StopBDC+0x4e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	6413      	str	r3, [r2, #64]	; 0x40

	if(bdc->Dirpintype == GPIO){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d110      	bne.n	80015ba <StopBDC+0x78>

		HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6858      	ldr	r0, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	891b      	ldrh	r3, [r3, #8]
 80015a0:	2200      	movs	r2, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	f00d f9a6 	bl	800e8f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68d8      	ldr	r0, [r3, #12]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	8a1b      	ldrh	r3, [r3, #16]
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	f00d f99e 	bl	800e8f4 <HAL_GPIO_WritePin>
	}else if(bdc->Dirpintype == SHIFTREG){

		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
	}
}
 80015b8:	e01b      	b.n	80015f2 <StopBDC+0xb0>
	}else if(bdc->Dirpintype == SHIFTREG){
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d117      	bne.n	80015f2 <StopBDC+0xb0>
		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	7819      	ldrb	r1, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	400a      	ands	r2, r1
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	7819      	ldrb	r1, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e5b      	ldrb	r3, [r3, #25]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	400a      	ands	r2, r1
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b092      	sub	sp, #72	; 0x48
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	460b      	mov	r3, r1
 800160a:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <GPIOPinsInit+0x1cc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	f000 80af 	beq.w	8001784 <GPIOPinsInit+0x188>
 8001626:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <GPIOPinsInit+0x1cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	f200 80ba 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800162e:	4a67      	ldr	r2, [pc, #412]	; (80017cc <GPIOPinsInit+0x1d0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	f000 8098 	beq.w	8001766 <GPIOPinsInit+0x16a>
 8001636:	4a65      	ldr	r2, [pc, #404]	; (80017cc <GPIOPinsInit+0x1d0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	f200 80b2 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800163e:	4a64      	ldr	r2, [pc, #400]	; (80017d0 <GPIOPinsInit+0x1d4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f000 8081 	beq.w	8001748 <GPIOPinsInit+0x14c>
 8001646:	4a62      	ldr	r2, [pc, #392]	; (80017d0 <GPIOPinsInit+0x1d4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	f200 80aa 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800164e:	4a61      	ldr	r2, [pc, #388]	; (80017d4 <GPIOPinsInit+0x1d8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d06a      	beq.n	800172a <GPIOPinsInit+0x12e>
 8001654:	4a5f      	ldr	r2, [pc, #380]	; (80017d4 <GPIOPinsInit+0x1d8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	f200 80a3 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800165c:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <GPIOPinsInit+0x1dc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d054      	beq.n	800170c <GPIOPinsInit+0x110>
 8001662:	4a5d      	ldr	r2, [pc, #372]	; (80017d8 <GPIOPinsInit+0x1dc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	f200 809c 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800166a:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <GPIOPinsInit+0x1e0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d03e      	beq.n	80016ee <GPIOPinsInit+0xf2>
 8001670:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <GPIOPinsInit+0x1e0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	f200 8095 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 8001678:	4a59      	ldr	r2, [pc, #356]	; (80017e0 <GPIOPinsInit+0x1e4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d028      	beq.n	80016d0 <GPIOPinsInit+0xd4>
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <GPIOPinsInit+0x1e4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	f200 808e 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 8001686:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <GPIOPinsInit+0x1e8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d003      	beq.n	8001694 <GPIOPinsInit+0x98>
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <GPIOPinsInit+0x1ec>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00f      	beq.n	80016b2 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001692:	e086      	b.n	80017a2 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <GPIOPinsInit+0x1f0>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a53      	ldr	r2, [pc, #332]	; (80017ec <GPIOPinsInit+0x1f0>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80016b0:	e078      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80016ce:	e069      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80016ec:	e05a      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800170a:	e04b      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a35      	ldr	r2, [pc, #212]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <GPIOPinsInit+0x1f0>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	6a3b      	ldr	r3, [r7, #32]
	break;
 8001728:	e03c      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <GPIOPinsInit+0x1f0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
	break;
 8001746:	e02d      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <GPIOPinsInit+0x1f0>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <GPIOPinsInit+0x1f0>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
	break;
 8001764:	e01e      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <GPIOPinsInit+0x1f0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
	break;
 8001782:	e00f      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <GPIOPinsInit+0x1f0>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <GPIOPinsInit+0x1f0>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
	break;
 80017a0:	e000      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	default: break;
 80017a2:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80017a4:	897b      	ldrh	r3, [r7, #10]
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80017ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b8:	4619      	mov	r1, r3
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f00c fee6 	bl	800e58c <HAL_GPIO_Init>

}
 80017c0:	bf00      	nop
 80017c2:	3748      	adds	r7, #72	; 0x48
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40022000 	.word	0x40022000
 80017cc:	40021c00 	.word	0x40021c00
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40023800 	.word	0x40023800

080017f0 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a52      	ldr	r2, [pc, #328]	; (8001960 <PWMTimeBaseInit+0x170>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d103      	bne.n	8001824 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a51      	ldr	r2, [pc, #324]	; (8001964 <PWMTimeBaseInit+0x174>)
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e057      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a50      	ldr	r2, [pc, #320]	; (8001968 <PWMTimeBaseInit+0x178>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d104      	bne.n	8001836 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e04e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4a4c      	ldr	r2, [pc, #304]	; (800196c <PWMTimeBaseInit+0x17c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d103      	bne.n	8001846 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <PWMTimeBaseInit+0x180>)
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e046      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <PWMTimeBaseInit+0x184>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d103      	bne.n	8001856 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <PWMTimeBaseInit+0x188>)
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e03e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <PWMTimeBaseInit+0x18c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d103      	bne.n	8001866 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <PWMTimeBaseInit+0x190>)
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e036      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <PWMTimeBaseInit+0x194>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d103      	bne.n	8001876 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <PWMTimeBaseInit+0x198>)
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e02e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4a44      	ldr	r2, [pc, #272]	; (800198c <PWMTimeBaseInit+0x19c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d103      	bne.n	8001886 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a43      	ldr	r2, [pc, #268]	; (8001990 <PWMTimeBaseInit+0x1a0>)
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e026      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a42      	ldr	r2, [pc, #264]	; (8001994 <PWMTimeBaseInit+0x1a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d103      	bne.n	8001896 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4a41      	ldr	r2, [pc, #260]	; (8001998 <PWMTimeBaseInit+0x1a8>)
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e01e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a40      	ldr	r2, [pc, #256]	; (800199c <PWMTimeBaseInit+0x1ac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d103      	bne.n	80018a6 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <PWMTimeBaseInit+0x1b0>)
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e016      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <PWMTimeBaseInit+0x1b4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d103      	bne.n	80018b6 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <PWMTimeBaseInit+0x1b8>)
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e00e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <PWMTimeBaseInit+0x1bc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d103      	bne.n	80018c6 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <PWMTimeBaseInit+0x1c0>)
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e006      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <PWMTimeBaseInit+0x1c4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d102      	bne.n	80018d4 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a39      	ldr	r2, [pc, #228]	; (80019b8 <PWMTimeBaseInit+0x1c8>)
 80018d2:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f00f fa92 	bl	8010e20 <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001902:	f002 fe8b 	bl	800461c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4619      	mov	r1, r3
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f00f fdf8 	bl	8011508 <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 800191e:	f002 fe7d 	bl	800461c <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f00f faef 	bl	8010f06 <HAL_TIM_PWM_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 800192e:	f002 fe75 	bl	800461c <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f010 f9dd 	bl	8011d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 800194c:	f002 fe66 	bl	800461c <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f00f fa90 	bl	8010e76 <HAL_TIM_Base_Start>

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000511c 	.word	0x2000511c
 8001964:	40010000 	.word	0x40010000
 8001968:	20005280 	.word	0x20005280
 800196c:	20004f34 	.word	0x20004f34
 8001970:	40000400 	.word	0x40000400
 8001974:	20004e30 	.word	0x20004e30
 8001978:	40000800 	.word	0x40000800
 800197c:	20004ef4 	.word	0x20004ef4
 8001980:	40000c00 	.word	0x40000c00
 8001984:	20004df0 	.word	0x20004df0
 8001988:	40010400 	.word	0x40010400
 800198c:	2000515c 	.word	0x2000515c
 8001990:	40014000 	.word	0x40014000
 8001994:	20004eb0 	.word	0x20004eb0
 8001998:	40014400 	.word	0x40014400
 800199c:	20005038 	.word	0x20005038
 80019a0:	40014800 	.word	0x40014800
 80019a4:	200053a0 	.word	0x200053a0
 80019a8:	40001800 	.word	0x40001800
 80019ac:	20004fb8 	.word	0x20004fb8
 80019b0:	40001c00 	.word	0x40001c00
 80019b4:	20005360 	.word	0x20005360
 80019b8:	40002000 	.word	0x40002000

080019bc <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09a      	sub	sp, #104	; 0x68
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019ee:	2370      	movs	r3, #112	; 0x70
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019f6:	2302      	movs	r3, #2
 80019f8:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80019fa:	2308      	movs	r3, #8
 80019fc:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001a0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f00f fcb2 	bl	801137c <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001a1e:	f002 fdfd 	bl	800461c <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a95      	ldr	r2, [pc, #596]	; (8001c7c <PWMChannelConfig+0x2c0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f000 80af 	beq.w	8001b8a <PWMChannelConfig+0x1ce>
 8001a2c:	4a93      	ldr	r2, [pc, #588]	; (8001c7c <PWMChannelConfig+0x2c0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	f200 80ba 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a34:	4a92      	ldr	r2, [pc, #584]	; (8001c80 <PWMChannelConfig+0x2c4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f000 8098 	beq.w	8001b6c <PWMChannelConfig+0x1b0>
 8001a3c:	4a90      	ldr	r2, [pc, #576]	; (8001c80 <PWMChannelConfig+0x2c4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	f200 80b2 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a44:	4a8f      	ldr	r2, [pc, #572]	; (8001c84 <PWMChannelConfig+0x2c8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f000 8081 	beq.w	8001b4e <PWMChannelConfig+0x192>
 8001a4c:	4a8d      	ldr	r2, [pc, #564]	; (8001c84 <PWMChannelConfig+0x2c8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f200 80aa 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a54:	4a8c      	ldr	r2, [pc, #560]	; (8001c88 <PWMChannelConfig+0x2cc>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d06a      	beq.n	8001b30 <PWMChannelConfig+0x174>
 8001a5a:	4a8b      	ldr	r2, [pc, #556]	; (8001c88 <PWMChannelConfig+0x2cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f200 80a3 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a62:	4a8a      	ldr	r2, [pc, #552]	; (8001c8c <PWMChannelConfig+0x2d0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d054      	beq.n	8001b12 <PWMChannelConfig+0x156>
 8001a68:	4a88      	ldr	r2, [pc, #544]	; (8001c8c <PWMChannelConfig+0x2d0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f200 809c 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a70:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <PWMChannelConfig+0x2d4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d03e      	beq.n	8001af4 <PWMChannelConfig+0x138>
 8001a76:	4a86      	ldr	r2, [pc, #536]	; (8001c90 <PWMChannelConfig+0x2d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f200 8095 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a7e:	4a85      	ldr	r2, [pc, #532]	; (8001c94 <PWMChannelConfig+0x2d8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d028      	beq.n	8001ad6 <PWMChannelConfig+0x11a>
 8001a84:	4a83      	ldr	r2, [pc, #524]	; (8001c94 <PWMChannelConfig+0x2d8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f200 808e 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a8c:	4a82      	ldr	r2, [pc, #520]	; (8001c98 <PWMChannelConfig+0x2dc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d003      	beq.n	8001a9a <PWMChannelConfig+0xde>
 8001a92:	4a82      	ldr	r2, [pc, #520]	; (8001c9c <PWMChannelConfig+0x2e0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00f      	beq.n	8001ab8 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 8001a98:	e086      	b.n	8001ba8 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9e:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 8001ab6:	e078      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
 8001abc:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 8001ad4:	e069      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	4b71      	ldr	r3, [pc, #452]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a70      	ldr	r2, [pc, #448]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b6e      	ldr	r3, [pc, #440]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 8001af2:	e05a      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a68      	ldr	r2, [pc, #416]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001b10:	e04b      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001b2e:	e03c      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a59      	ldr	r2, [pc, #356]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001b4c:	e02d      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
		break;
 8001b6a:	e01e      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]
		break;
 8001b88:	e00f      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a43      	ldr	r2, [pc, #268]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
		break;
 8001ba6:	e000      	b.n	8001baa <PWMChannelConfig+0x1ee>
		default: break;
 8001ba8:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <PWMChannelConfig+0x2e8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d102      	bne.n	8001bc8 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bc6:	e04b      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a37      	ldr	r2, [pc, #220]	; (8001ca8 <PWMChannelConfig+0x2ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d102      	bne.n	8001bd6 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bd4:	e044      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a34      	ldr	r2, [pc, #208]	; (8001cac <PWMChannelConfig+0x2f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d102      	bne.n	8001be4 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bde:	2302      	movs	r3, #2
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be2:	e03d      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <PWMChannelConfig+0x2f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf0:	e036      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <PWMChannelConfig+0x2f8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d102      	bne.n	8001c00 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bfe:	e02f      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <PWMChannelConfig+0x2fc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c0c:	e028      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <PWMChannelConfig+0x300>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d102      	bne.n	8001c1c <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c16:	2303      	movs	r3, #3
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c1a:	e021      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <PWMChannelConfig+0x304>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c24:	2303      	movs	r3, #3
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c28:	e01a      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <PWMChannelConfig+0x308>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c32:	2303      	movs	r3, #3
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c36:	e013      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <PWMChannelConfig+0x30c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c40:	2309      	movs	r3, #9
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c44:	e00c      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <PWMChannelConfig+0x310>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d102      	bne.n	8001c54 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001c4e:	2309      	movs	r3, #9
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c52:	e005      	b.n	8001c60 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <PWMChannelConfig+0x314>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f00c fc90 	bl	800e58c <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f00f f974 	bl	8010f5c <HAL_TIM_PWM_Start>

}
 8001c74:	bf00      	nop
 8001c76:	3768      	adds	r7, #104	; 0x68
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40021400 	.word	0x40021400
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	2000511c 	.word	0x2000511c
 8001ca8:	20005280 	.word	0x20005280
 8001cac:	20004f34 	.word	0x20004f34
 8001cb0:	20004e30 	.word	0x20004e30
 8001cb4:	20004ef4 	.word	0x20004ef4
 8001cb8:	20004df0 	.word	0x20004df0
 8001cbc:	2000515c 	.word	0x2000515c
 8001cc0:	20004eb0 	.word	0x20004eb0
 8001cc4:	20005038 	.word	0x20005038
 8001cc8:	200053a0 	.word	0x200053a0
 8001ccc:	20004fb8 	.word	0x20004fb8
 8001cd0:	20005360 	.word	0x20005360

08001cd4 <QEIInit>:
 * 						  						subpriority, then the one comes first in the program will be executed first.
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx, uint16_t preemptionpriority,uint16_t subpriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08e      	sub	sp, #56	; 0x38
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	803b      	strh	r3, [r7, #0]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2224      	movs	r2, #36	; 0x24
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f014 fa15 	bl	801611c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a53      	ldr	r2, [pc, #332]	; (8001e4c <QEIInit+0x178>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d106      	bne.n	8001d12 <QEIInit+0x3e>
		htimx->Instance = TIM1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <QEIInit+0x17c>)
 8001d08:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001d0a:	2319      	movs	r3, #25
 8001d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d10:	e036      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim2)	{
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <QEIInit+0x180>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d107      	bne.n	8001d2a <QEIInit+0x56>
		htimx->Instance = TIM2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d20:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001d22:	231c      	movs	r3, #28
 8001d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d28:	e02a      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim3)	{
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <QEIInit+0x184>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d106      	bne.n	8001d40 <QEIInit+0x6c>
		htimx->Instance = TIM3;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <QEIInit+0x188>)
 8001d36:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001d38:	231d      	movs	r3, #29
 8001d3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d3e:	e01f      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim4)	{
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <QEIInit+0x18c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d106      	bne.n	8001d56 <QEIInit+0x82>
		htimx->Instance = TIM4;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <QEIInit+0x190>)
 8001d4c:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001d4e:	231e      	movs	r3, #30
 8001d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d54:	e014      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim5)	{
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a43      	ldr	r2, [pc, #268]	; (8001e68 <QEIInit+0x194>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d106      	bne.n	8001d6c <QEIInit+0x98>
		htimx->Instance = TIM5;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <QEIInit+0x198>)
 8001d62:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001d64:	2332      	movs	r3, #50	; 0x32
 8001d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d6a:	e009      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim8)	{
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <QEIInit+0x19c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d105      	bne.n	8001d80 <QEIInit+0xac>
		htimx->Instance = TIM8;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3f      	ldr	r2, [pc, #252]	; (8001e74 <QEIInit+0x1a0>)
 8001d78:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001d7a:	232c      	movs	r3, #44	; 0x2c
 8001d7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d92:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da6:	2303      	movs	r3, #3
 8001da8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f00f f901 	bl	8010fd8 <HAL_TIM_Encoder_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <QEIInit+0x10c>
	{
		Error_Handler();
 8001ddc:	f002 fc1e 	bl	800461c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f00f ff86 	bl	8011d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <QEIInit+0x12a>
	{
		Error_Handler();
 8001dfa:	f002 fc0f 	bl	800461c <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0201 	mvn.w	r2, #1
 8001e06:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]

	HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 8001e18:	8879      	ldrh	r1, [r7, #2]
 8001e1a:	883a      	ldrh	r2, [r7, #0]
 8001e1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00c f9c1 	bl	800e1a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(nvic);
 8001e26:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00c f9e6 	bl	800e1fc <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(nvic);
 8001e30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00c f9d3 	bl	800e1e0 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001e3a:	213c      	movs	r1, #60	; 0x3c
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f00f f95d 	bl	80110fc <HAL_TIM_Encoder_Start>
}
 8001e42:	bf00      	nop
 8001e44:	3738      	adds	r7, #56	; 0x38
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000511c 	.word	0x2000511c
 8001e50:	40010000 	.word	0x40010000
 8001e54:	20005280 	.word	0x20005280
 8001e58:	20004f34 	.word	0x20004f34
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	20004e30 	.word	0x20004e30
 8001e64:	40000800 	.word	0x40000800
 8001e68:	20004ef4 	.word	0x20004ef4
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	20004df0 	.word	0x20004df0
 8001e74:	40010400 	.word	0x40010400

08001e78 <QEIWrite>:
 * Function Return		: None
 * Function Example		: QEIWrite(QEI1, 10000);
 */

void QEIWrite(QEI_TypeDef QEIx, int32_t value)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d840      	bhi.n	8001f0e <QEIWrite+0x96>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <QEIWrite+0x1c>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ebd 	.word	0x08001ebd
 8001e9c:	08001ecf 	.word	0x08001ecf
 8001ea0:	08001edf 	.word	0x08001edf
 8001ea4:	08001eef 	.word	0x08001eef
 8001ea8:	08001eff 	.word	0x08001eff

	case QEI1:	BIOS_QEI1.count = value;
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <QEIWrite+0xa4>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6013      	str	r3, [r2, #0]
	TIM1->CNT = BIOS_QEI1.poscnt;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <QEIWrite+0xa4>)
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <QEIWrite+0xa8>)
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001eba:	e028      	b.n	8001f0e <QEIWrite+0x96>

	case QEI2:	BIOS_QEI2.count = value;
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <QEIWrite+0xac>)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6013      	str	r3, [r2, #0]
	TIM2->CNT = BIOS_QEI2.poscnt;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <QEIWrite+0xac>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001ecc:	e01f      	b.n	8001f0e <QEIWrite+0x96>

	case QEI3:  BIOS_QEI3.count = value;
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <QEIWrite+0xb0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6013      	str	r3, [r2, #0]
	TIM3->CNT = BIOS_QEI3.poscnt;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <QEIWrite+0xb0>)
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <QEIWrite+0xb4>)
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001edc:	e017      	b.n	8001f0e <QEIWrite+0x96>

	case QEI4:  BIOS_QEI4.count = value;
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <QEIWrite+0xb8>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6013      	str	r3, [r2, #0]
	TIM4->CNT = BIOS_QEI4.poscnt;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <QEIWrite+0xb8>)
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <QEIWrite+0xbc>)
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001eec:	e00f      	b.n	8001f0e <QEIWrite+0x96>

	case QEI5:	BIOS_QEI5.count = value;
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <QEIWrite+0xc0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6013      	str	r3, [r2, #0]
	TIM5->CNT = BIOS_QEI5.poscnt;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <QEIWrite+0xc0>)
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <QEIWrite+0xc4>)
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001efc:	e007      	b.n	8001f0e <QEIWrite+0x96>

	case QEI6:	BIOS_QEI6.count = value;
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <QEIWrite+0xc8>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6013      	str	r3, [r2, #0]
	TIM8->CNT = BIOS_QEI6.poscnt;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <QEIWrite+0xc8>)
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <QEIWrite+0xcc>)
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001f0c:	bf00      	nop

	}

}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	200056dc 	.word	0x200056dc
 8001f20:	40010000 	.word	0x40010000
 8001f24:	200056e0 	.word	0x200056e0
 8001f28:	200056d8 	.word	0x200056d8
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	20005700 	.word	0x20005700
 8001f34:	40000800 	.word	0x40000800
 8001f38:	200056fc 	.word	0x200056fc
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	20005704 	.word	0x20005704
 8001f44:	40010400 	.word	0x40010400

08001f48 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d839      	bhi.n	8001fce <QEIReset+0x86>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <QEIReset+0x18>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f79 	.word	0x08001f79
 8001f64:	08001f87 	.word	0x08001f87
 8001f68:	08001f97 	.word	0x08001f97
 8001f6c:	08001fa5 	.word	0x08001fa5
 8001f70:	08001fb3 	.word	0x08001fb3
 8001f74:	08001fc1 	.word	0x08001fc1

	case QEI1:	TIM1->CNT = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <QEIReset+0x94>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <QEIReset+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
	break;
 8001f84:	e023      	b.n	8001fce <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <QEIReset+0x9c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
	break;
 8001f94:	e01b      	b.n	8001fce <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <QEIReset+0xa0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <QEIReset+0xa4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
	break;
 8001fa2:	e014      	b.n	8001fce <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <QEIReset+0xa8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <QEIReset+0xac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
	break;
 8001fb0:	e00d      	b.n	8001fce <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <QEIReset+0xb0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <QEIReset+0xb4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
	break;
 8001fbe:	e006      	b.n	8001fce <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <QEIReset+0xb8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <QEIReset+0xbc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
	break;
 8001fcc:	bf00      	nop

	}
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	200056dc 	.word	0x200056dc
 8001fe4:	200056e0 	.word	0x200056e0
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	200056d8 	.word	0x200056d8
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	20005700 	.word	0x20005700
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	200056fc 	.word	0x200056fc
 8002000:	40010400 	.word	0x40010400
 8002004:	20005704 	.word	0x20005704

08002008 <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	3b01      	subs	r3, #1
 800201c:	2b05      	cmp	r3, #5
 800201e:	f200 80f6 	bhi.w	800220e <QEISwap+0x206>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <QEISwap+0x20>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002041 	.word	0x08002041
 800202c:	0800208f 	.word	0x0800208f
 8002030:	080020dd 	.word	0x080020dd
 8002034:	0800212b 	.word	0x0800212b
 8002038:	08002177 	.word	0x08002177
 800203c:	080021c3 	.word	0x080021c3

	case QEI1:	if(swap == QEI_No_Swap){
 8002040:	79bb      	ldrb	r3, [r7, #6]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <QEISwap+0x5c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002046:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <QEISwap+0x228>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	4b78      	ldr	r3, [pc, #480]	; (8002230 <QEISwap+0x228>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 020a 	bic.w	r2, r2, #10
 8002054:	621a      	str	r2, [r3, #32]
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <QEISwap+0x228>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <QEISwap+0x228>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a12      	ldr	r2, [r2, #32]
 8002060:	621a      	str	r2, [r3, #32]
	default: break;

	}

	}
}
 8002062:	e0df      	b.n	8002224 <QEISwap+0x21c>
	else if(swap == QEI_Swap){
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	2b01      	cmp	r3, #1
 8002068:	f040 80dc 	bne.w	8002224 <QEISwap+0x21c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 800206c:	4b70      	ldr	r3, [pc, #448]	; (8002230 <QEISwap+0x228>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <QEISwap+0x228>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 020a 	bic.w	r2, r2, #10
 800207a:	621a      	str	r2, [r3, #32]
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <QEISwap+0x228>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <QEISwap+0x228>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0202 	orr.w	r2, r2, #2
 800208a:	621a      	str	r2, [r3, #32]
		break;
 800208c:	e0ca      	b.n	8002224 <QEISwap+0x21c>
	case QEI2:	if(swap == QEI_No_Swap){
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10e      	bne.n	80020b2 <QEISwap+0xaa>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002094:	4b67      	ldr	r3, [pc, #412]	; (8002234 <QEISwap+0x22c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <QEISwap+0x22c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020a 	bic.w	r2, r2, #10
 80020a2:	621a      	str	r2, [r3, #32]
 80020a4:	4b63      	ldr	r3, [pc, #396]	; (8002234 <QEISwap+0x22c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b62      	ldr	r3, [pc, #392]	; (8002234 <QEISwap+0x22c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a12      	ldr	r2, [r2, #32]
 80020ae:	621a      	str	r2, [r3, #32]
	break;
 80020b0:	e0af      	b.n	8002212 <QEISwap+0x20a>
	else if(swap == QEI_Swap){
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 80ac 	bne.w	8002212 <QEISwap+0x20a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <QEISwap+0x22c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <QEISwap+0x22c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 020a 	bic.w	r2, r2, #10
 80020c8:	621a      	str	r2, [r3, #32]
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <QEISwap+0x22c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <QEISwap+0x22c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0202 	orr.w	r2, r2, #2
 80020d8:	621a      	str	r2, [r3, #32]
	break;
 80020da:	e09a      	b.n	8002212 <QEISwap+0x20a>
	case QEI3:	if(swap == QEI_No_Swap){
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <QEISwap+0xf8>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 80020e2:	4b55      	ldr	r3, [pc, #340]	; (8002238 <QEISwap+0x230>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <QEISwap+0x230>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020a 	bic.w	r2, r2, #10
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	4b51      	ldr	r3, [pc, #324]	; (8002238 <QEISwap+0x230>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <QEISwap+0x230>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a12      	ldr	r2, [r2, #32]
 80020fc:	621a      	str	r2, [r3, #32]
	break;
 80020fe:	e08a      	b.n	8002216 <QEISwap+0x20e>
	else if(swap == QEI_Swap){
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 8087 	bne.w	8002216 <QEISwap+0x20e>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <QEISwap+0x230>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <QEISwap+0x230>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020a 	bic.w	r2, r2, #10
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	4b47      	ldr	r3, [pc, #284]	; (8002238 <QEISwap+0x230>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <QEISwap+0x230>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0202 	orr.w	r2, r2, #2
 8002126:	621a      	str	r2, [r3, #32]
	break;
 8002128:	e075      	b.n	8002216 <QEISwap+0x20e>
	case QEI4:	if(swap == QEI_No_Swap){
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <QEISwap+0x146>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <QEISwap+0x234>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <QEISwap+0x234>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 020a 	bic.w	r2, r2, #10
 800213e:	621a      	str	r2, [r3, #32]
 8002140:	4b3e      	ldr	r3, [pc, #248]	; (800223c <QEISwap+0x234>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <QEISwap+0x234>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a12      	ldr	r2, [r2, #32]
 800214a:	621a      	str	r2, [r3, #32]
	break;
 800214c:	e065      	b.n	800221a <QEISwap+0x212>
	else if(swap == QEI_Swap){
 800214e:	79bb      	ldrb	r3, [r7, #6]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d162      	bne.n	800221a <QEISwap+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <QEISwap+0x234>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <QEISwap+0x234>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020a 	bic.w	r2, r2, #10
 8002162:	621a      	str	r2, [r3, #32]
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <QEISwap+0x234>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <QEISwap+0x234>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0202 	orr.w	r2, r2, #2
 8002172:	621a      	str	r2, [r3, #32]
	break;
 8002174:	e051      	b.n	800221a <QEISwap+0x212>
	case QEI5:	if(swap == QEI_No_Swap){
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10e      	bne.n	800219a <QEISwap+0x192>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <QEISwap+0x238>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <QEISwap+0x238>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 020a 	bic.w	r2, r2, #10
 800218a:	621a      	str	r2, [r3, #32]
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <QEISwap+0x238>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <QEISwap+0x238>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a12      	ldr	r2, [r2, #32]
 8002196:	621a      	str	r2, [r3, #32]
	break;
 8002198:	e041      	b.n	800221e <QEISwap+0x216>
	else if(swap == QEI_Swap){
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d13e      	bne.n	800221e <QEISwap+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <QEISwap+0x238>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <QEISwap+0x238>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020a 	bic.w	r2, r2, #10
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <QEISwap+0x238>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <QEISwap+0x238>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0202 	orr.w	r2, r2, #2
 80021be:	621a      	str	r2, [r3, #32]
	break;
 80021c0:	e02d      	b.n	800221e <QEISwap+0x216>
	case QEI6:	if(swap == QEI_No_Swap){
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10e      	bne.n	80021e6 <QEISwap+0x1de>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <QEISwap+0x23c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <QEISwap+0x23c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 020a 	bic.w	r2, r2, #10
 80021d6:	621a      	str	r2, [r3, #32]
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <QEISwap+0x23c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <QEISwap+0x23c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a12      	ldr	r2, [r2, #32]
 80021e2:	621a      	str	r2, [r3, #32]
	break;
 80021e4:	e01d      	b.n	8002222 <QEISwap+0x21a>
	else if(swap == QEI_Swap){
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11a      	bne.n	8002222 <QEISwap+0x21a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <QEISwap+0x23c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <QEISwap+0x23c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020a 	bic.w	r2, r2, #10
 80021fa:	621a      	str	r2, [r3, #32]
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <QEISwap+0x23c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <QEISwap+0x23c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0202 	orr.w	r2, r2, #2
 800220a:	621a      	str	r2, [r3, #32]
	break;
 800220c:	e009      	b.n	8002222 <QEISwap+0x21a>
	default: break;
 800220e:	bf00      	nop
 8002210:	e008      	b.n	8002224 <QEISwap+0x21c>
	break;
 8002212:	bf00      	nop
 8002214:	e006      	b.n	8002224 <QEISwap+0x21c>
	break;
 8002216:	bf00      	nop
 8002218:	e004      	b.n	8002224 <QEISwap+0x21c>
	break;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <QEISwap+0x21c>
	break;
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <QEISwap+0x21c>
	break;
 8002222:	bf00      	nop
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	2000511c 	.word	0x2000511c
 8002234:	20005280 	.word	0x20005280
 8002238:	20004f34 	.word	0x20004f34
 800223c:	20004e30 	.word	0x20004e30
 8002240:	20004ef4 	.word	0x20004ef4
 8002244:	20004df0 	.word	0x20004df0

08002248 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	461a      	mov	r2, r3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 800225e:	e002      	b.n	8002266 <QEIDelay+0x1e>
	{
		currentvalues++;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	3301      	adds	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d3f8      	bcc.n	8002260 <QEIDelay+0x18>
	}
	currentvalues = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	3b01      	subs	r3, #1
 800228e:	2b05      	cmp	r3, #5
 8002290:	d845      	bhi.n	800231e <QEIRead+0x9e>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <QEIRead+0x18>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022c3 	.word	0x080022c3
 80022a0:	080022d7 	.word	0x080022d7
 80022a4:	080022e9 	.word	0x080022e9
 80022a8:	080022fb 	.word	0x080022fb
 80022ac:	0800230d 	.word	0x0800230d

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <QEIRead+0xb0>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <QEIRead+0xb4>)
 80022b8:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <QEIRead+0xb4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
	break;
 80022c0:	e02e      	b.n	8002320 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 80022c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <QEIRead+0xb8>)
 80022cc:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <QEIRead+0xb8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
	break;
 80022d4:	e024      	b.n	8002320 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <QEIRead+0xbc>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <QEIRead+0xc0>)
 80022de:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <QEIRead+0xc0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
	break;
 80022e6:	e01b      	b.n	8002320 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <QEIRead+0xc4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <QEIRead+0xc8>)
 80022f0:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <QEIRead+0xc8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]
	break;
 80022f8:	e012      	b.n	8002320 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <QEIRead+0xcc>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <QEIRead+0xd0>)
 8002302:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <QEIRead+0xd0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
	break;
 800230a:	e009      	b.n	8002320 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <QEIRead+0xd4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <QEIRead+0xd8>)
 8002314:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <QEIRead+0xd8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
	break;
 800231c:	e000      	b.n	8002320 <QEIRead+0xa0>

	default: break;
 800231e:	bf00      	nop
	}

	return value;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	200056dc 	.word	0x200056dc
 8002338:	200056e0 	.word	0x200056e0
 800233c:	40000400 	.word	0x40000400
 8002340:	200056d8 	.word	0x200056d8
 8002344:	40000800 	.word	0x40000800
 8002348:	20005700 	.word	0x20005700
 800234c:	40000c00 	.word	0x40000c00
 8002350:	200056fc 	.word	0x200056fc
 8002354:	40010400 	.word	0x40010400
 8002358:	20005704 	.word	0x20005704

0800235c <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	460b      	mov	r3, r1
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	4613      	mov	r3, r2
 800236e:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	7afa      	ldrb	r2, [r7, #11]
 8002374:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8bba      	ldrh	r2, [r7, #28]
 800238c:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002398:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8899      	ldrh	r1, [r3, #4]
 80023a2:	2301      	movs	r3, #1
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2302      	movs	r3, #2
 80023a8:	2201      	movs	r2, #1
 80023aa:	f7ff f927 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6898      	ldr	r0, [r3, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8999      	ldrh	r1, [r3, #12]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2302      	movs	r3, #2
 80023bc:	2201      	movs	r2, #1
 80023be:	f7ff f91d 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6918      	ldr	r0, [r3, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8a99      	ldrh	r1, [r3, #20]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2302      	movs	r3, #2
 80023d0:	2201      	movs	r2, #1
 80023d2:	f7ff f913 	bl	80015fc <GPIOPinsInit>

}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7d9b      	ldrb	r3, [r3, #22]
 80023ea:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	889b      	ldrh	r3, [r3, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	f00c fa7c 	bl	800e8f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6898      	ldr	r0, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	899b      	ldrh	r3, [r3, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	f00c fa74 	bl	800e8f4 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 800240c:	7bba      	ldrb	r2, [r7, #14]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3206      	adds	r2, #6
 8002412:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002416:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8002418:	2308      	movs	r3, #8
 800241a:	737b      	strb	r3, [r7, #13]
 800241c:	e02a      	b.n	8002474 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da08      	bge.n	8002438 <SHIFTREGShift+0x5a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6918      	ldr	r0, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8a9b      	ldrh	r3, [r3, #20]
 800242e:	2201      	movs	r2, #1
 8002430:	4619      	mov	r1, r3
 8002432:	f00c fa5f 	bl	800e8f4 <HAL_GPIO_WritePin>
 8002436:	e007      	b.n	8002448 <SHIFTREGShift+0x6a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6918      	ldr	r0, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8a9b      	ldrh	r3, [r3, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	f00c fa56 	bl	800e8f4 <HAL_GPIO_WritePin>
			out <<= 1;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	4619      	mov	r1, r3
 800245a:	f00c fa4b 	bl	800e8f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	4619      	mov	r1, r3
 800246a:	f00c fa43 	bl	800e8f4 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 800246e:	7b7b      	ldrb	r3, [r7, #13]
 8002470:	3b01      	subs	r3, #1
 8002472:	737b      	strb	r3, [r7, #13]
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1d1      	bne.n	800241e <SHIFTREGShift+0x40>
		}
	}while(i--);
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	73ba      	strb	r2, [r7, #14]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1c3      	bne.n	800240c <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6898      	ldr	r0, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	899b      	ldrh	r3, [r3, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	4619      	mov	r1, r3
 8002490:	f00c fa30 	bl	800e8f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6898      	ldr	r0, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	899b      	ldrh	r3, [r3, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	4619      	mov	r1, r3
 80024a0:	f00c fa28 	bl	800e8f4 <HAL_GPIO_WritePin>

}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_MspInit+0x54>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a11      	ldr	r2, [pc, #68]	; (8002500 <HAL_MspInit+0x54>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_MspInit+0x54>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_MspInit+0x54>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_MspInit+0x54>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_MspInit+0x54>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	210f      	movs	r1, #15
 80024ee:	f06f 0001 	mvn.w	r0, #1
 80024f2:	f00b fe59 	bl	800e1a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a42      	ldr	r2, [pc, #264]	; (800262c <HAL_CAN_MspInit+0x128>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d135      	bne.n	8002592 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002526:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a40      	ldr	r2, [pc, #256]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 800252e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10d      	bne.n	8002554 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <HAL_CAN_MspInit+0x130>)
 8002542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002546:	6413      	str	r3, [r2, #64]	; 0x40
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a35      	ldr	r2, [pc, #212]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_CAN_MspInit+0x130>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002570:	2303      	movs	r3, #3
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002580:	2309      	movs	r3, #9
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	482b      	ldr	r0, [pc, #172]	; (8002638 <HAL_CAN_MspInit+0x134>)
 800258c:	f00b fffe 	bl	800e58c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002590:	e048      	b.n	8002624 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_CAN_MspInit+0x138>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d143      	bne.n	8002624 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 80025c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10d      	bne.n	80025e6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002602:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002614:	2309      	movs	r3, #9
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4619      	mov	r1, r3
 800261e:	4808      	ldr	r0, [pc, #32]	; (8002640 <HAL_CAN_MspInit+0x13c>)
 8002620:	f00b ffb4 	bl	800e58c <HAL_GPIO_Init>
}
 8002624:	bf00      	nop
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40006400 	.word	0x40006400
 8002630:	2000046c 	.word	0x2000046c
 8002634:	40023800 	.word	0x40023800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40006800 	.word	0x40006800
 8002640:	40020400 	.word	0x40020400

08002644 <HAL_TIM_PWM_MspInit>:

}


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002644:	b480      	push	{r7}
 8002646:	b091      	sub	sp, #68	; 0x44
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8d      	ldr	r2, [pc, #564]	; (8002888 <HAL_TIM_PWM_MspInit+0x244>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265a:	4b8c      	ldr	r3, [pc, #560]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a8b      	ldr	r2, [pc, #556]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b89      	ldr	r3, [pc, #548]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8002672:	e102      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267c:	d10e      	bne.n	800269c <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
 8002682:	4b82      	ldr	r3, [pc, #520]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a81      	ldr	r2, [pc, #516]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800269a:	e0ee      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7b      	ldr	r2, [pc, #492]	; (8002890 <HAL_TIM_PWM_MspInit+0x24c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
 80026aa:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026c2:	e0da      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a72      	ldr	r2, [pc, #456]	; (8002894 <HAL_TIM_PWM_MspInit+0x250>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b6b      	ldr	r3, [pc, #428]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026ea:	e0c6      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a69      	ldr	r2, [pc, #420]	; (8002898 <HAL_TIM_PWM_MspInit+0x254>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002712:	e0b2      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a60      	ldr	r2, [pc, #384]	; (800289c <HAL_TIM_PWM_MspInit+0x258>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10e      	bne.n	800273c <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a59      	ldr	r2, [pc, #356]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b57      	ldr	r3, [pc, #348]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800273a:	e09e      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a57      	ldr	r2, [pc, #348]	; (80028a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a4f      	ldr	r2, [pc, #316]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002750:	f043 0320 	orr.w	r3, r3, #32
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002762:	e08a      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_TIM_PWM_MspInit+0x260>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10e      	bne.n	800278c <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a45      	ldr	r2, [pc, #276]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	6a3b      	ldr	r3, [r7, #32]
}
 800278a:	e076      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_TIM_PWM_MspInit+0x264>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
}
 80027b2:	e062      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <HAL_TIM_PWM_MspInit+0x268>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
}
 80027da:	e04e      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a33      	ldr	r2, [pc, #204]	; (80028b0 <HAL_TIM_PWM_MspInit+0x26c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
}
 8002802:	e03a      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_TIM_PWM_MspInit+0x270>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10e      	bne.n	800282c <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
}
 800282a:	e026      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_TIM_PWM_MspInit+0x274>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	e012      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_TIM_PWM_MspInit+0x278>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10d      	bne.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
}
 800287a:	bf00      	nop
 800287c:	3744      	adds	r7, #68	; 0x44
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40023800 	.word	0x40023800
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40001000 	.word	0x40001000
 80028a0:	40001400 	.word	0x40001400
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	40001800 	.word	0x40001800
 80028b8:	40001c00 	.word	0x40001c00
 80028bc:	40002000 	.word	0x40002000

080028c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b091      	sub	sp, #68	; 0x44
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a8d      	ldr	r2, [pc, #564]	; (8002b04 <HAL_TIM_Base_MspInit+0x244>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d6:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a8b      	ldr	r2, [pc, #556]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80028ee:	e102      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a81      	ldr	r2, [pc, #516]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b7f      	ldr	r3, [pc, #508]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002916:	e0ee      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <HAL_TIM_Base_MspInit+0x24c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	4b78      	ldr	r3, [pc, #480]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800293e:	e0da      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_TIM_Base_MspInit+0x250>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a6d      	ldr	r2, [pc, #436]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b6b      	ldr	r3, [pc, #428]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002966:	e0c6      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a69      	ldr	r2, [pc, #420]	; (8002b14 <HAL_TIM_Base_MspInit+0x254>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a63      	ldr	r2, [pc, #396]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800298e:	e0b2      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a60      	ldr	r2, [pc, #384]	; (8002b18 <HAL_TIM_Base_MspInit+0x258>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029b6:	e09e      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_TIM_Base_MspInit+0x25c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029de:	e08a      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_TIM_Base_MspInit+0x260>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
}
 8002a06:	e076      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_TIM_Base_MspInit+0x264>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	4b3c      	ldr	r3, [pc, #240]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
}
 8002a2e:	e062      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_TIM_Base_MspInit+0x268>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	69bb      	ldr	r3, [r7, #24]
}
 8002a56:	e04e      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	; (8002b2c <HAL_TIM_Base_MspInit+0x26c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
}
 8002a7e:	e03a      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <HAL_TIM_Base_MspInit+0x270>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
}
 8002aa6:	e026      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_TIM_Base_MspInit+0x274>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	e012      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_Base_MspInit+0x278>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10d      	bne.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
}
 8002af6:	bf00      	nop
 8002af8:	3744      	adds	r7, #68	; 0x44
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40001000 	.word	0x40001000
 8002b1c:	40001400 	.word	0x40001400
 8002b20:	40010400 	.word	0x40010400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	40001800 	.word	0x40001800
 8002b34:	40001c00 	.word	0x40001c00
 8002b38:	40002000 	.word	0x40002000

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b094      	sub	sp, #80	; 0x50
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a8c      	ldr	r2, [pc, #560]	; (8002d8c <HAL_UART_MspInit+0x250>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12d      	bne.n	8002bba <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4878      	ldr	r0, [pc, #480]	; (8002d94 <HAL_UART_MspInit+0x258>)
 8002bb4:	f00b fcea 	bl	800e58c <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002bb8:	e12b      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_UART_MspInit+0x25c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d12c      	bne.n	8002c1e <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc8:	4b71      	ldr	r3, [pc, #452]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	4a70      	ldr	r2, [pc, #448]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd4:	4b6e      	ldr	r3, [pc, #440]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be4:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf0:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bfc:	2360      	movs	r3, #96	; 0x60
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c0c:	2307      	movs	r3, #7
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c14:	4619      	mov	r1, r3
 8002c16:	4861      	ldr	r0, [pc, #388]	; (8002d9c <HAL_UART_MspInit+0x260>)
 8002c18:	f00b fcb8 	bl	800e58c <HAL_GPIO_Init>
}
 8002c1c:	e0f9      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	; (8002da0 <HAL_UART_MspInit+0x264>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d12d      	bne.n	8002c84 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2c:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c36:	6413      	str	r3, [r2, #64]	; 0x40
 8002c38:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c72:	2307      	movs	r3, #7
 8002c74:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4847      	ldr	r0, [pc, #284]	; (8002d9c <HAL_UART_MspInit+0x260>)
 8002c7e:	f00b fc85 	bl	800e58c <HAL_GPIO_Init>
}
 8002c82:	e0c6      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a46      	ldr	r2, [pc, #280]	; (8002da4 <HAL_UART_MspInit+0x268>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12d      	bne.n	8002cea <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a37      	ldr	r2, [pc, #220]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cd8:	2308      	movs	r3, #8
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4831      	ldr	r0, [pc, #196]	; (8002da8 <HAL_UART_MspInit+0x26c>)
 8002ce4:	f00b fc52 	bl	800e58c <HAL_GPIO_Init>
}
 8002ce8:	e093      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <HAL_UART_MspInit+0x270>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d15d      	bne.n	8002db0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	6413      	str	r3, [r2, #64]	; 0x40
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d36:	f043 0308 	orr.w	r3, r3, #8
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d62:	4619      	mov	r1, r3
 8002d64:	4810      	ldr	r0, [pc, #64]	; (8002da8 <HAL_UART_MspInit+0x26c>)
 8002d66:	f00b fc11 	bl	800e58c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d82:	4619      	mov	r1, r3
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <HAL_UART_MspInit+0x260>)
 8002d86:	f00b fc01 	bl	800e58c <HAL_GPIO_Init>
}
 8002d8a:	e042      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40004400 	.word	0x40004400
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40004c00 	.word	0x40004c00
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <HAL_UART_MspInit+0x2e0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d12b      	bne.n	8002e12 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002dc4:	f043 0320 	orr.w	r3, r3, #32
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002df2:	23c0      	movs	r3, #192	; 0xc0
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e02:	2308      	movs	r3, #8
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <HAL_UART_MspInit+0x2e8>)
 8002e0e:	f00b fbbd 	bl	800e58c <HAL_GPIO_Init>
}
 8002e12:	bf00      	nop
 8002e14:	3750      	adds	r7, #80	; 0x50
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40011400 	.word	0x40011400
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020800 	.word	0x40020800

08002e28 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b094      	sub	sp, #80	; 0x50
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a8c      	ldr	r2, [pc, #560]	; (8003078 <HAL_TIM_Encoder_MspInit+0x250>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12d      	bne.n	8002ea6 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6a:	4b84      	ldr	r3, [pc, #528]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a83      	ldr	r2, [pc, #524]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002e82:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e94:	2301      	movs	r3, #1
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4878      	ldr	r0, [pc, #480]	; (8003080 <HAL_TIM_Encoder_MspInit+0x258>)
 8002ea0:	f00b fb74 	bl	800e58c <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002ea4:	e12b      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d14b      	bne.n	8002f48 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb4:	4b71      	ldr	r3, [pc, #452]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a70      	ldr	r2, [pc, #448]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec0:	4b6e      	ldr	r3, [pc, #440]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a69      	ldr	r2, [pc, #420]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eec:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4a62      	ldr	r2, [pc, #392]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f16:	2301      	movs	r3, #1
 8002f18:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4858      	ldr	r0, [pc, #352]	; (8003084 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002f22:	f00b fb33 	bl	800e58c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f26:	2308      	movs	r3, #8
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f36:	2301      	movs	r3, #1
 8002f38:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4851      	ldr	r0, [pc, #324]	; (8003088 <HAL_TIM_Encoder_MspInit+0x260>)
 8002f42:	f00b fb23 	bl	800e58c <HAL_GPIO_Init>
}
 8002f46:	e0da      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	; (800308c <HAL_TIM_Encoder_MspInit+0x264>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12c      	bne.n	8002fac <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a48      	ldr	r2, [pc, #288]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f8a:	23c0      	movs	r3, #192	; 0xc0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4837      	ldr	r0, [pc, #220]	; (8003084 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002fa6:	f00b faf1 	bl	800e58c <HAL_GPIO_Init>
}
 8002faa:	e0a8      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a37      	ldr	r2, [pc, #220]	; (8003090 <HAL_TIM_Encoder_MspInit+0x268>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d12d      	bne.n	8003012 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002fee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003000:	2302      	movs	r3, #2
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003008:	4619      	mov	r1, r3
 800300a:	4822      	ldr	r0, [pc, #136]	; (8003094 <HAL_TIM_Encoder_MspInit+0x26c>)
 800300c:	f00b fabe 	bl	800e58c <HAL_GPIO_Init>
}
 8003010:	e075      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_TIM_Encoder_MspInit+0x270>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d13f      	bne.n	800309c <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a0e      	ldr	r2, [pc, #56]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003054:	2303      	movs	r3, #3
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003064:	2302      	movs	r3, #2
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800306c:	4619      	mov	r1, r3
 800306e:	4805      	ldr	r0, [pc, #20]	; (8003084 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003070:	f00b fa8c 	bl	800e58c <HAL_GPIO_Init>
}
 8003074:	e043      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40023800 	.word	0x40023800
 8003080:	40021000 	.word	0x40021000
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d12b      	bne.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030ee:	2303      	movs	r3, #3
 80030f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030f6:	4619      	mov	r1, r3
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <HAL_TIM_Encoder_MspInit+0x2e8>)
 80030fa:	f00b fa47 	bl	800e58c <HAL_GPIO_Init>
}
 80030fe:	bf00      	nop
 8003100:	3750      	adds	r7, #80	; 0x50
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40010400 	.word	0x40010400
 800310c:	40023800 	.word	0x40023800
 8003110:	40020800 	.word	0x40020800

08003114 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b094      	sub	sp, #80	; 0x50
 8003118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800311a:	f107 0320 	add.w	r3, r7, #32
 800311e:	2230      	movs	r2, #48	; 0x30
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f012 fffa 	bl	801611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <SystemClock_Config+0xd0>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <SystemClock_Config+0xd0>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6413      	str	r3, [r2, #64]	; 0x40
 8003148:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <SystemClock_Config+0xd0>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <SystemClock_Config+0xd4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <SystemClock_Config+0xd4>)
 800315e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <SystemClock_Config+0xd4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003170:	2301      	movs	r3, #1
 8003172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317a:	2302      	movs	r3, #2
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800317e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003184:	2308      	movs	r3, #8
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003188:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800318e:	2302      	movs	r3, #2
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003192:	2304      	movs	r3, #4
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003196:	f107 0320 	add.w	r3, r7, #32
 800319a:	4618      	mov	r0, r3
 800319c:	f00d f878 	bl	8010290 <HAL_RCC_OscConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80031a6:	f001 fa39 	bl	800461c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031aa:	230f      	movs	r3, #15
 80031ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ae:	2302      	movs	r3, #2
 80031b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	2105      	movs	r1, #5
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00d fad1 	bl	8010770 <HAL_RCC_ClockConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80031d4:	f001 fa22 	bl	800461c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80031d8:	f00d fbb0 	bl	801093c <HAL_RCC_EnableCSS>
}
 80031dc:	bf00      	nop
 80031de:	3750      	adds	r7, #80	; 0x50
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40007000 	.word	0x40007000

080031ec <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84, 2, 0);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84, 2, 1); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler,uint16_t preemptionpriority,uint16_t subpriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
  int nvic = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]

  if(htimx == &htim1){
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a62      	ldr	r2, [pc, #392]	; (80033a0 <TIMxInit+0x1b4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d105      	bne.n	8003228 <TIMxInit+0x3c>
  		htimx->Instance = TIM1;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <TIMxInit+0x1b8>)
 8003220:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_UP_TIM10_IRQn;
 8003222:	2319      	movs	r3, #25
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e081      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim2)	{
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <TIMxInit+0x1bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d106      	bne.n	800323e <TIMxInit+0x52>
  		htimx->Instance = TIM2;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003236:	601a      	str	r2, [r3, #0]
  		nvic = TIM2_IRQn;
 8003238:	231c      	movs	r3, #28
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e076      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim3)	{
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a5a      	ldr	r2, [pc, #360]	; (80033ac <TIMxInit+0x1c0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d105      	bne.n	8003252 <TIMxInit+0x66>
  		htimx->Instance = TIM3;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a59      	ldr	r2, [pc, #356]	; (80033b0 <TIMxInit+0x1c4>)
 800324a:	601a      	str	r2, [r3, #0]
  		nvic = TIM3_IRQn;
 800324c:	231d      	movs	r3, #29
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	e06c      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim4)	{
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <TIMxInit+0x1c8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d105      	bne.n	8003266 <TIMxInit+0x7a>
  		htimx->Instance = TIM4;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <TIMxInit+0x1cc>)
 800325e:	601a      	str	r2, [r3, #0]
  		nvic = TIM4_IRQn;
 8003260:	231e      	movs	r3, #30
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	e062      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim5)	{
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a54      	ldr	r2, [pc, #336]	; (80033bc <TIMxInit+0x1d0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d105      	bne.n	800327a <TIMxInit+0x8e>
  		htimx->Instance = TIM5;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a53      	ldr	r2, [pc, #332]	; (80033c0 <TIMxInit+0x1d4>)
 8003272:	601a      	str	r2, [r3, #0]
  		nvic = TIM5_IRQn;
 8003274:	2332      	movs	r3, #50	; 0x32
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e058      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim6)	{
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <TIMxInit+0x1d8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d105      	bne.n	800328e <TIMxInit+0xa2>
  		htimx->Instance = TIM6;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <TIMxInit+0x1dc>)
 8003286:	601a      	str	r2, [r3, #0]
  		nvic = TIM6_DAC_IRQn;
 8003288:	2336      	movs	r3, #54	; 0x36
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	e04e      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim7)	{
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a4e      	ldr	r2, [pc, #312]	; (80033cc <TIMxInit+0x1e0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d105      	bne.n	80032a2 <TIMxInit+0xb6>
  		htimx->Instance = TIM7;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <TIMxInit+0x1e4>)
 800329a:	601a      	str	r2, [r3, #0]
  		nvic = TIM7_IRQn;
 800329c:	2337      	movs	r3, #55	; 0x37
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e044      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim8)	{
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <TIMxInit+0x1e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d105      	bne.n	80032b6 <TIMxInit+0xca>
  		htimx->Instance = TIM8;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <TIMxInit+0x1ec>)
 80032ae:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_CC_IRQn;
 80032b0:	232e      	movs	r3, #46	; 0x2e
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e03a      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim9)	{
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <TIMxInit+0x1f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d105      	bne.n	80032ca <TIMxInit+0xde>
  		htimx->Instance = TIM9;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <TIMxInit+0x1f4>)
 80032c2:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_BRK_TIM9_IRQn;
 80032c4:	2318      	movs	r3, #24
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	e030      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim10)	{
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a45      	ldr	r2, [pc, #276]	; (80033e4 <TIMxInit+0x1f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d105      	bne.n	80032de <TIMxInit+0xf2>
  		htimx->Instance = TIM10;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a44      	ldr	r2, [pc, #272]	; (80033e8 <TIMxInit+0x1fc>)
 80032d6:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_UP_TIM10_IRQn;
 80032d8:	2319      	movs	r3, #25
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e026      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim11)	{
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a42      	ldr	r2, [pc, #264]	; (80033ec <TIMxInit+0x200>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d105      	bne.n	80032f2 <TIMxInit+0x106>
  		htimx->Instance = TIM11;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a41      	ldr	r2, [pc, #260]	; (80033f0 <TIMxInit+0x204>)
 80032ea:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_TRG_COM_TIM11_IRQn;
 80032ec:	231a      	movs	r3, #26
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e01c      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim12)	{
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a3f      	ldr	r2, [pc, #252]	; (80033f4 <TIMxInit+0x208>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d105      	bne.n	8003306 <TIMxInit+0x11a>
  		htimx->Instance = TIM12;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a3e      	ldr	r2, [pc, #248]	; (80033f8 <TIMxInit+0x20c>)
 80032fe:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_BRK_TIM12_IRQn;
 8003300:	232b      	movs	r3, #43	; 0x2b
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e012      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim13)	{
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <TIMxInit+0x210>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d105      	bne.n	800331a <TIMxInit+0x12e>
  		htimx->Instance = TIM13;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <TIMxInit+0x214>)
 8003312:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_UP_TIM13_IRQn;
 8003314:	232c      	movs	r3, #44	; 0x2c
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	e008      	b.n	800332c <TIMxInit+0x140>
  		}
  	else if(htimx == &htim14)	{
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a39      	ldr	r2, [pc, #228]	; (8003404 <TIMxInit+0x218>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d104      	bne.n	800332c <TIMxInit+0x140>
  		htimx->Instance = TIM14;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a38      	ldr	r2, [pc, #224]	; (8003408 <TIMxInit+0x21c>)
 8003326:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8003328:	232d      	movs	r3, #45	; 0x2d
 800332a:	61fb      	str	r3, [r7, #28]
  		}


  htimx->Init.Prescaler = prescaler;
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
  htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  htimx->Init.Period = period;
 8003338:	897a      	ldrh	r2, [r7, #10]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	60da      	str	r2, [r3, #12]
  htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f00d fd6b 	bl	8010e20 <HAL_TIM_Base_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <TIMxInit+0x168>
  {
    Error_Handler();
 8003350:	f001 f964 	bl	800461c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f00e fccc 	bl	8011d00 <HAL_TIMEx_MasterConfigSynchronization>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <TIMxInit+0x186>
  {
    Error_Handler();
 800336e:	f001 f955 	bl	800461c <Error_Handler>
  }


  HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	b25b      	sxtb	r3, r3
 8003376:	88f9      	ldrh	r1, [r7, #6]
 8003378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800337a:	4618      	mov	r0, r3
 800337c:	f00a ff14 	bl	800e1a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nvic);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	b25b      	sxtb	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	f00a ff2b 	bl	800e1e0 <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start(htimx);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f00d fd73 	bl	8010e76 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(htimx);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f00d fd94 	bl	8010ebe <HAL_TIM_Base_Start_IT>

}
 8003396:	bf00      	nop
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	2000511c 	.word	0x2000511c
 80033a4:	40010000 	.word	0x40010000
 80033a8:	20005280 	.word	0x20005280
 80033ac:	20004f34 	.word	0x20004f34
 80033b0:	40000400 	.word	0x40000400
 80033b4:	20004e30 	.word	0x20004e30
 80033b8:	40000800 	.word	0x40000800
 80033bc:	20004ef4 	.word	0x20004ef4
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	200050dc 	.word	0x200050dc
 80033c8:	40001000 	.word	0x40001000
 80033cc:	20005440 	.word	0x20005440
 80033d0:	40001400 	.word	0x40001400
 80033d4:	20004df0 	.word	0x20004df0
 80033d8:	40010400 	.word	0x40010400
 80033dc:	2000515c 	.word	0x2000515c
 80033e0:	40014000 	.word	0x40014000
 80033e4:	20004eb0 	.word	0x20004eb0
 80033e8:	40014400 	.word	0x40014400
 80033ec:	20005038 	.word	0x20005038
 80033f0:	40014800 	.word	0x40014800
 80033f4:	200053a0 	.word	0x200053a0
 80033f8:	40001800 	.word	0x40001800
 80033fc:	20004fb8 	.word	0x20004fb8
 8003400:	40001c00 	.word	0x40001c00
 8003404:	20005360 	.word	0x20005360
 8003408:	40002000 	.word	0x40002000

0800340c <UARTInit>:
 * 						  						 subpriority, then the one comes first in the program will be executed first.
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	460b      	mov	r3, r1
 800341c:	71fb      	strb	r3, [r7, #7]
 800341e:	4613      	mov	r3, r2
 8003420:	80bb      	strh	r3, [r7, #4]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <UARTInit+0x10c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d107      	bne.n	800343a <UARTInit+0x2e>
		huartx->Instance = USART1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <UARTInit+0x110>)
 800342e:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003430:	2325      	movs	r3, #37	; 0x25
 8003432:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <UARTInit+0x114>)
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e036      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart2){
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a39      	ldr	r2, [pc, #228]	; (8003524 <UARTInit+0x118>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d107      	bne.n	8003452 <UARTInit+0x46>
		huartx->Instance = USART2;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a38      	ldr	r2, [pc, #224]	; (8003528 <UARTInit+0x11c>)
 8003446:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003448:	2326      	movs	r3, #38	; 0x26
 800344a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <UARTInit+0x120>)
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e02a      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart3){
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a36      	ldr	r2, [pc, #216]	; (8003530 <UARTInit+0x124>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d107      	bne.n	800346a <UARTInit+0x5e>
		huartx->Instance = USART3;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a35      	ldr	r2, [pc, #212]	; (8003534 <UARTInit+0x128>)
 800345e:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003460:	2327      	movs	r3, #39	; 0x27
 8003462:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <UARTInit+0x12c>)
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e01e      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart4){
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a33      	ldr	r2, [pc, #204]	; (800353c <UARTInit+0x130>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d107      	bne.n	8003482 <UARTInit+0x76>
		huartx->Instance = UART4;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a32      	ldr	r2, [pc, #200]	; (8003540 <UARTInit+0x134>)
 8003476:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003478:	2334      	movs	r3, #52	; 0x34
 800347a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <UARTInit+0x138>)
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e012      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart5){
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <UARTInit+0x13c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d107      	bne.n	800349a <UARTInit+0x8e>
		huartx->Instance = UART5;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a2f      	ldr	r2, [pc, #188]	; (800354c <UARTInit+0x140>)
 800348e:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003490:	2335      	movs	r3, #53	; 0x35
 8003492:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <UARTInit+0x144>)
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e006      	b.n	80034a8 <UARTInit+0x9c>
	}else{
		huartx->Instance = USART6;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <UARTInit+0x148>)
 800349e:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 80034a0:	2347      	movs	r3, #71	; 0x47
 80034a2:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <UARTInit+0x14c>)
 80034a6:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	220c      	movs	r2, #12
 80034c4:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f00e fca4 	bl	8011e20 <HAL_UART_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <UARTInit+0xd6>
	{
		Error_Handler();
 80034de:	f001 f89d 	bl	800461c <Error_Handler>
	}

	HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 80034e2:	88b9      	ldrh	r1, [r7, #4]
 80034e4:	8c3a      	ldrh	r2, [r7, #32]
 80034e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00a fe5c 	bl	800e1a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(nvic);
 80034f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f00a fe73 	bl	800e1e0 <HAL_NVIC_EnableIRQ>

	if(rxstate == ENABLE){
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <UARTInit+0x104>
		__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0220 	orr.w	r2, r2, #32
 800350e:	60da      	str	r2, [r3, #12]
//		HAL_UART_Receive_IT(huartx,rcv_data,1);
	}
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20004ff8 	.word	0x20004ff8
 800351c:	40011000 	.word	0x40011000
 8003520:	20004dec 	.word	0x20004dec
 8003524:	200052c0 	.word	0x200052c0
 8003528:	40004400 	.word	0x40004400
 800352c:	200050d8 	.word	0x200050d8
 8003530:	20004e70 	.word	0x20004e70
 8003534:	40004800 	.word	0x40004800
 8003538:	20004f75 	.word	0x20004f75
 800353c:	200051e0 	.word	0x200051e0
 8003540:	40004c00 	.word	0x40004c00
 8003544:	200051dc 	.word	0x200051dc
 8003548:	20004f78 	.word	0x20004f78
 800354c:	40005000 	.word	0x40005000
 8003550:	20004ef0 	.word	0x20004ef0
 8003554:	40011400 	.word	0x40011400
 8003558:	20004f74 	.word	0x20004f74

0800355c <USART1_IRQHandler>:
//}




void  USART1_IRQHandler(void){
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <USART1_IRQHandler+0x10>)
 8003562:	f00e fcab 	bl	8011ebc <HAL_UART_IRQHandler>
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20004ff8 	.word	0x20004ff8

08003570 <USART3_IRQHandler>:
//void  USART2_IRQHandler(void){
//
//	HAL_UART_IRQHandler(&huart2);
//}

void  USART3_IRQHandler(void){
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <USART3_IRQHandler+0x10>)
 8003576:	f00e fca1 	bl	8011ebc <HAL_UART_IRQHandler>
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20004e70 	.word	0x20004e70

08003584 <UART4_IRQHandler>:

void  UART4_IRQHandler(void){
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <UART4_IRQHandler+0x10>)
 800358a:	f00e fc97 	bl	8011ebc <HAL_UART_IRQHandler>
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200051e0 	.word	0x200051e0

08003598 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <UART5_IRQHandler+0x10>)
 800359e:	f00e fc8d 	bl	8011ebc <HAL_UART_IRQHandler>
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20004f78 	.word	0x20004f78

080035ac <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 80035b0:	4802      	ldr	r0, [pc, #8]	; (80035bc <USART6_IRQHandler+0x10>)
 80035b2:	f00e fc83 	bl	8011ebc <HAL_UART_IRQHandler>
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000519c 	.word	0x2000519c

080035c0 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber,uint8_t N_PPriority,uint8_t N_SPriority){
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	; 0x38
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	2228      	movs	r2, #40	; 0x28
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f012 fd9d 	bl	801611c <memset>

	if(hcanx == &hcan1){
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a4f      	ldr	r2, [pc, #316]	; (8003724 <CANxInit+0x164>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d103      	bne.n	80035f2 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a4e      	ldr	r2, [pc, #312]	; (8003728 <CANxInit+0x168>)
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e002      	b.n	80035f8 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a4d      	ldr	r2, [pc, #308]	; (800372c <CANxInit+0x16c>)
 80035f6:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 80035f8:	897a      	ldrh	r2, [r7, #10]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
	hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003610:	611a      	str	r2, [r3, #16]
	hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003618:	615a      	str	r2, [r3, #20]
	hcanx->Init.TimeTriggeredMode = DISABLE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f009 fe4e 	bl	800d2e0 <HAL_CAN_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <CANxInit+0x8e>
	{
		Error_Handler();
 800364a:	f000 ffe7 	bl	800461c <Error_Handler>
	}


	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8003652:	893b      	ldrh	r3, [r7, #8]
 8003654:	015b      	lsls	r3, r3, #5
 8003656:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 800365c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003660:	015b      	lsls	r3, r3, #5
 8003662:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8003668:	2301      	movs	r3, #1
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterActivation=ENABLE;
 800366c:	2301      	movs	r3, #1
 800366e:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003670:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003674:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003676:	f107 0310 	add.w	r3, r7, #16
 800367a:	4619      	mov	r1, r3
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f009 ff2b 	bl	800d4d8 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <CANxInit+0x164>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d122      	bne.n	80036d0 <CANxInit+0x110>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10f      	bne.n	80036b0 <CANxInit+0xf0>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, N_PPriority, N_SPriority);
 8003690:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003694:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003698:	4619      	mov	r1, r3
 800369a:	2014      	movs	r0, #20
 800369c:	f00a fd84 	bl	800e1a8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80036a0:	2014      	movs	r0, #20
 80036a2:	f00a fd9d 	bl	800e1e0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 80036a6:	2102      	movs	r1, #2
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f00a fa5b 	bl	800db64 <HAL_CAN_ActivateNotification>
 80036ae:	e031      	b.n	8003714 <CANxInit+0x154>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, N_PPriority, N_SPriority);
 80036b0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80036b4:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80036b8:	4619      	mov	r1, r3
 80036ba:	2015      	movs	r0, #21
 80036bc:	f00a fd74 	bl	800e1a8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80036c0:	2015      	movs	r0, #21
 80036c2:	f00a fd8d 	bl	800e1e0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 80036c6:	2110      	movs	r1, #16
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f00a fa4b 	bl	800db64 <HAL_CAN_ActivateNotification>
 80036ce:	e021      	b.n	8003714 <CANxInit+0x154>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <CANxInit+0x136>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, N_PPriority, N_SPriority);
 80036d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80036da:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80036de:	4619      	mov	r1, r3
 80036e0:	2040      	movs	r0, #64	; 0x40
 80036e2:	f00a fd61 	bl	800e1a8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80036e6:	2040      	movs	r0, #64	; 0x40
 80036e8:	f00a fd7a 	bl	800e1e0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 80036ec:	2102      	movs	r1, #2
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f00a fa38 	bl	800db64 <HAL_CAN_ActivateNotification>
 80036f4:	e00e      	b.n	8003714 <CANxInit+0x154>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, N_PPriority, N_SPriority);
 80036f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80036fa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80036fe:	4619      	mov	r1, r3
 8003700:	2041      	movs	r0, #65	; 0x41
 8003702:	f00a fd51 	bl	800e1a8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003706:	2041      	movs	r0, #65	; 0x41
 8003708:	f00a fd6a 	bl	800e1e0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 800370c:	2110      	movs	r1, #16
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f00a fa28 	bl	800db64 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f009 ffbf 	bl	800d698 <HAL_CAN_Start>

}
 800371a:	bf00      	nop
 800371c:	3738      	adds	r7, #56	; 0x38
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20005774 	.word	0x20005774
 8003728:	40006400 	.word	0x40006400
 800372c:	40006800 	.word	0x40006800

08003730 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b090      	sub	sp, #64	; 0x40
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 800373e:	bf00      	nop
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f00a f8c8 	bl	800d8d6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f9      	beq.n	8003740 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003750:	2300      	movs	r3, #0
 8003752:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003760:	2300      	movs	r3, #0
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003764:	2300      	movs	r3, #0
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 800376e:	e01f      	b.n	80037b0 <CAN_TxMsg+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003776:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003778:	1c51      	adds	r1, r2, #1
 800377a:	8779      	strh	r1, [r7, #58]	; 0x3a
 800377c:	4611      	mov	r1, r2
 800377e:	781a      	ldrb	r2, [r3, #0]
 8003780:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003784:	440b      	add	r3, r1
 8003786:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 800378a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800378c:	2b08      	cmp	r3, #8
 800378e:	d10f      	bne.n	80037b0 <CAN_TxMsg+0x80>
			TxMessage.DLC=8;
 8003790:	2308      	movs	r3, #8
 8003792:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003794:	f107 031c 	add.w	r3, r7, #28
 8003798:	f107 0214 	add.w	r2, r7, #20
 800379c:	f107 0120 	add.w	r1, r7, #32
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f009 ffbd 	bl	800d720 <HAL_CAN_AddTxMessage>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <CAN_TxMsg+0x80>
				Error_Handler();
 80037ac:	f000 ff36 	bl	800461c <Error_Handler>
	while(datalen--)
 80037b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	873a      	strh	r2, [r7, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1da      	bne.n	8003770 <CAN_TxMsg+0x40>
			}
		}
	}
	if(i>0){
 80037ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00f      	beq.n	80037e0 <CAN_TxMsg+0xb0>
		TxMessage.DLC = i;
 80037c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	f107 0214 	add.w	r2, r7, #20
 80037cc:	f107 0120 	add.w	r1, r7, #32
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f009 ffa5 	bl	800d720 <HAL_CAN_AddTxMessage>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <CAN_TxMsg+0xb0>
			Error_Handler();
 80037dc:	f000 ff1e 	bl	800461c <Error_Handler>
		}

	}

	return(canMailbox);
 80037e0:	69fb      	ldr	r3, [r7, #28]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3740      	adds	r7, #64	; 0x40
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <FuzzyPIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void FuzzyPIDSourceInit(float *in, float *out, FuzzyPID_t *fpid)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
	fpid->input = in;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]
	fpid->output = out;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	605a      	str	r2, [r3, #4]
	fpid->isfirst = 1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	66da      	str	r2, [r3, #108]	; 0x6c
	fpid->outp = 0.0;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	671a      	str	r2, [r3, #112]	; 0x70

}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <FuzzyPIDGainInit>:

void FuzzyPIDGainInit(float ku, float err_max, float errc_max, float errs_max,
					  float kp_base, float ki_base, float kd_base,
					  float kp_param, float ki_param, float kd_param, FuzzyPID_t *fpid)
{
 800381c:	b480      	push	{r7}
 800381e:	b08d      	sub	sp, #52	; 0x34
 8003820:	af00      	add	r7, sp, #0
 8003822:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8003826:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800382a:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800382e:	edc7 1a08 	vstr	s3, [r7, #32]
 8003832:	ed87 2a07 	vstr	s4, [r7, #28]
 8003836:	edc7 2a06 	vstr	s5, [r7, #24]
 800383a:	ed87 3a05 	vstr	s6, [r7, #20]
 800383e:	edc7 3a04 	vstr	s7, [r7, #16]
 8003842:	ed87 4a03 	vstr	s8, [r7, #12]
 8003846:	edc7 4a02 	vstr	s9, [r7, #8]
 800384a:	6078      	str	r0, [r7, #4]
	fpid->K[U_MAX]  = ku;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
	fpid->K[E_MAX]  = err_max;	fpid->K[E_MIN] = -err_max;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
 8003858:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800385c:	eef1 7a67 	vneg.f32	s15, s15
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	fpid->K[EC_MAX] = errc_max;	fpid->K[EC_MIN] = -errc_max;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
 800386c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003870:	eef1 7a67 	vneg.f32	s15, s15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	fpid->K[ES_MAX] = err_max;	fpid->K[ES_MIN] = -errs_max;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
 8003880:	edd7 7a08 	vldr	s15, [r7, #32]
 8003884:	eef1 7a67 	vneg.f32	s15, s15
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	fpid->K[KP_B]   = kp_base;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
	fpid->K[KI_B]   = ki_base;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58
	fpid->K[KD_B]   = kd_base;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	65da      	str	r2, [r3, #92]	; 0x5c
	fpid->K[KP_P]   = kp_param;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	661a      	str	r2, [r3, #96]	; 0x60
	fpid->K[KI_P]   = ki_param;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	665a      	str	r2, [r3, #100]	; 0x64
	fpid->K[KD_P]   = kd_param;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038b2:	bf00      	nop
 80038b4:	3734      	adds	r7, #52	; 0x34
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <FuzzyPIDGainSet>:

void FuzzyPIDGainSet(unsigned char parameter, float value, FuzzyPID_t *fpid)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80038ca:	6079      	str	r1, [r7, #4]
 80038cc:	73fb      	strb	r3, [r7, #15]
	fpid->K[parameter] = value;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	330e      	adds	r3, #14
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	601a      	str	r2, [r3, #0]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <FuzzyPID>:

void FuzzyPID(FuzzyPID_t *fpid)
{
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	6018      	str	r0, [r3, #0]
//	static int isfirst = 1;
//	static float outp = 0.0;
	int Kp_Rules[7][7] =   {{PB,PB,PM,PM,PS,ZO,ZO},
 80038f4:	4ab0      	ldr	r2, [pc, #704]	; (8003bb8 <FuzzyPID+0x2d0>)
 80038f6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80038fa:	4611      	mov	r1, r2
 80038fc:	22c4      	movs	r2, #196	; 0xc4
 80038fe:	4618      	mov	r0, r3
 8003900:	f012 fbfe 	bl	8016100 <memcpy>
							{PM,PM,PS,ZO,NS,NM,NM},
							{PS,PS,ZO,NS,NS,NM,NM},
							{PS,ZO,NS,NM,NM,NM,NB},
							{ZO,ZO,NM,NM,NM,NB,NB}};

	int Ki_Rules[7][7] =   {{NB,NB,NB,NB,NM,ZO,ZO},		//refer to document
 8003904:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003908:	4aac      	ldr	r2, [pc, #688]	; (8003bbc <FuzzyPID+0x2d4>)
 800390a:	4618      	mov	r0, r3
 800390c:	4611      	mov	r1, r2
 800390e:	23c4      	movs	r3, #196	; 0xc4
 8003910:	461a      	mov	r2, r3
 8003912:	f012 fbf5 	bl	8016100 <memcpy>
							{NM,NM,NS,ZO,PS,PM,PM},
							{NS,NS,ZO,PM,PM,PM,PM},
							{ZO,ZO,PS,PS,PM,PB,PB},
							{ZO,ZO,PS,PM,PM,PB,PB}};

	int Kd_Rules[7][7] =   {{PS,NS,NB,NB,NB,NM,PS},
 8003916:	f107 030c 	add.w	r3, r7, #12
 800391a:	4aa9      	ldr	r2, [pc, #676]	; (8003bc0 <FuzzyPID+0x2d8>)
 800391c:	4618      	mov	r0, r3
 800391e:	4611      	mov	r1, r2
 8003920:	23c4      	movs	r3, #196	; 0xc4
 8003922:	461a      	mov	r2, r3
 8003924:	f012 fbec 	bl	8016100 <memcpy>
							{ZO,NS,NS,NS,NS,NS,ZO},
							{ZO,ZO,ZO,ZO,ZO,ZO,ZO},
							{PB,NS,PS,PS,PS,PS,PB},
							{PB,PM,PM,PM,PS,PS,PB}};

	fpid->err	= *fpid->input;
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	609a      	str	r2, [r3, #8]
	fpid->errc 	= fpid->err - fpid->prev_err;
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	ed93 7a02 	vldr	s14, [r3, #8]
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	edd3 7a03 	vldr	s15, [r3, #12]
 8003946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	edc3 7a04 	vstr	s15, [r3, #16]
	fpid->prev_err = fpid->err;
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60da      	str	r2, [r3, #12]

	if (fpid->isfirst){
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <FuzzyPID+0x98>
		fpid->errs = 0;
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	615a      	str	r2, [r3, #20]
		*fpid->output = 0;
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e23d      	b.n	8003dfc <FuzzyPID+0x514>
	} else{
		fpid->errs 	+= fpid->err;
 8003980:	1d3b      	adds	r3, r7, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	ed93 7a05 	vldr	s14, [r3, #20]
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	edc3 7a05 	vstr	s15, [r3, #20]

		if(fabs(fpid->err) > fpid->K[E_MAX])
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80039a4:	eeb0 7ae7 	vabs.f32	s14, s15
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80039b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b8:	dd15      	ble.n	80039e6 <FuzzyPID+0xfe>
			(fpid->err > 0)   ? (fpid->err = fpid->K[E_MAX])   : (fpid->err = fpid->K[E_MIN]);
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	edd3 7a02 	vldr	s15, [r3, #8]
 80039c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	dd06      	ble.n	80039da <FuzzyPID+0xf2>
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	e005      	b.n	80039e6 <FuzzyPID+0xfe>
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	609a      	str	r2, [r3, #8]
		if(fabs(fpid->errc) > fpid->K[EC_MAX])
 80039e6:	1d3b      	adds	r3, r7, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ee:	eeb0 7ae7 	vabs.f32	s14, s15
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80039fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	dd15      	ble.n	8003a30 <FuzzyPID+0x148>
			(fpid->errc > 0)  ? (fpid->errc = fpid->K[EC_MAX]) : (fpid->errc = fpid->K[EC_MIN]);
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	dd06      	ble.n	8003a24 <FuzzyPID+0x13c>
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	611a      	str	r2, [r3, #16]
 8003a22:	e005      	b.n	8003a30 <FuzzyPID+0x148>
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]
		if(fabs(fpid->errs) > fpid->K[ES_MAX])
 8003a30:	1d3b      	adds	r3, r7, #4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a38:	eeb0 7ae7 	vabs.f32	s14, s15
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	dd15      	ble.n	8003a7a <FuzzyPID+0x192>
			(fpid->errs > 0)  ? (fpid->errs = fpid->K[ES_MAX]) : (fpid->errs = fpid->K[ES_MIN]);
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	dd06      	ble.n	8003a6e <FuzzyPID+0x186>
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	615a      	str	r2, [r3, #20]
 8003a6c:	e005      	b.n	8003a7a <FuzzyPID+0x192>
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	615a      	str	r2, [r3, #20]

		(fpid->err > 0)	 ? (fpid->errCal  = (int)(fpid->err * 3.0  / fpid->K[E_MAX] + 0.5f))  : (fpid->errCal  = (int)(fpid->err * 3.0  / fpid->K[E_MAX] - 0.5f));
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8a:	dd2e      	ble.n	8003aea <FuzzyPID+0x202>
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc fd58 	bl	8000548 <__aeabi_f2d>
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <FuzzyPID+0x2dc>)
 8003a9e:	f7fc fdab 	bl	80005f8 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	461d      	mov	r5, r3
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fc fd49 	bl	8000548 <__aeabi_f2d>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4620      	mov	r0, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7fc fec5 	bl	800084c <__aeabi_ddiv>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <FuzzyPID+0x2e0>)
 8003ad0:	f7fc fbdc 	bl	800028c <__adddf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fd f83c 	bl	8000b58 <__aeabi_d2iz>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	619a      	str	r2, [r3, #24]
 8003ae8:	e02d      	b.n	8003b46 <FuzzyPID+0x25e>
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fc fd29 	bl	8000548 <__aeabi_f2d>
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <FuzzyPID+0x2dc>)
 8003afc:	f7fc fd7c 	bl	80005f8 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fc fd1a 	bl	8000548 <__aeabi_f2d>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f7fc fe96 	bl	800084c <__aeabi_ddiv>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <FuzzyPID+0x2e0>)
 8003b2e:	f7fc fbab 	bl	8000288 <__aeabi_dsub>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f7fd f80d 	bl	8000b58 <__aeabi_d2iz>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	1d3b      	adds	r3, r7, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	619a      	str	r2, [r3, #24]
		(fpid->errc > 0) ? (fpid->errcCal = (int)(fpid->errc * 3.0 / fpid->K[EC_MAX] + 0.5f)) : (fpid->errcCal = (int)(fpid->errc * 3.0 / fpid->K[EC_MAX] - 0.5f));
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	dd39      	ble.n	8003bcc <FuzzyPID+0x2e4>
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fc fcf2 	bl	8000548 <__aeabi_f2d>
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <FuzzyPID+0x2dc>)
 8003b6a:	f7fc fd45 	bl	80005f8 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fce3 	bl	8000548 <__aeabi_f2d>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc fe5f 	bl	800084c <__aeabi_ddiv>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <FuzzyPID+0x2e0>)
 8003b9c:	f7fc fb76 	bl	800028c <__adddf3>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f7fc ffd6 	bl	8000b58 <__aeabi_d2iz>
 8003bac:	4602      	mov	r2, r0
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	61da      	str	r2, [r3, #28]
 8003bb4:	e038      	b.n	8003c28 <FuzzyPID+0x340>
 8003bb6:	bf00      	nop
 8003bb8:	0801c7b8 	.word	0x0801c7b8
 8003bbc:	0801c87c 	.word	0x0801c87c
 8003bc0:	0801c940 	.word	0x0801c940
 8003bc4:	40080000 	.word	0x40080000
 8003bc8:	3fe00000 	.word	0x3fe00000
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fcb8 	bl	8000548 <__aeabi_f2d>
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <FuzzyPID+0x528>)
 8003bde:	f7fc fd0b 	bl	80005f8 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	461d      	mov	r5, r3
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fca9 	bl	8000548 <__aeabi_f2d>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7fc fe25 	bl	800084c <__aeabi_ddiv>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	4b81      	ldr	r3, [pc, #516]	; (8003e14 <FuzzyPID+0x52c>)
 8003c10:	f7fc fb3a 	bl	8000288 <__aeabi_dsub>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f7fc ff9c 	bl	8000b58 <__aeabi_d2iz>
 8003c20:	4602      	mov	r2, r0
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	61da      	str	r2, [r3, #28]

		fpid->set_Kp = Kp_Rules[fpid->errCal + 3][fpid->errcCal + 3];
 8003c28:	1d3b      	adds	r3, r7, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	1cda      	adds	r2, r3, #3
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	1cd9      	adds	r1, r3, #3
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	440b      	add	r3, r1
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8003c46:	4413      	add	r3, r2
 8003c48:	f853 2cc4 	ldr.w	r2, [r3, #-196]
 8003c4c:	1d3b      	adds	r3, r7, #4
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	621a      	str	r2, [r3, #32]
		fpid->set_Ki = Ki_Rules[fpid->errCal + 3][fpid->errcCal + 3];
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	1cda      	adds	r2, r3, #3
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	1cd8      	adds	r0, r3, #3
 8003c62:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	4403      	add	r3, r0
 8003c6e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
		fpid->set_Kd = Kd_Rules[fpid->errCal + 3][fpid->errcCal + 3];
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	1cda      	adds	r2, r3, #3
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	1cd8      	adds	r0, r3, #3
 8003c88:	f107 010c 	add.w	r1, r7, #12
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	4403      	add	r3, r0
 8003c94:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28

		fpid->Kp = fpid->K[KP_B] + fpid->set_Kp * fpid->K[KP_P];
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	ee07 3a90 	vmov	s15, r3
 8003cb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003cb4:	1d3b      	adds	r3, r7, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		fpid->Ki = fpid->K[KI_B] + fpid->set_Ki * fpid->K[KI_P];
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		fpid->Kd = fpid->K[KD_B] + fpid->set_Kd * fpid->K[KD_P];
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

		fpid->outp = (((fpid->err * fpid->Kp) + (fpid->errs * fpid->Ki) + (fpid->errc * fpid->Kd)) / fpid->K[E_MAX]);
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	edd3 6a05 	vldr	s13, [r3, #20]
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	edd3 6a04 	vldr	s13, [r3, #16]
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d68:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003d6c:	1d3b      	adds	r3, r7, #4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8003d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

		fpid->outp = fpid->outp * fpid->K[U_MAX];
 8003d80:	1d3b      	adds	r3, r7, #4
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

		if (fabs(fpid->outp) > fpid->K[U_MAX])
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003da4:	eeb0 7ae7 	vabs.f32	s14, s15
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	dd19      	ble.n	8003dee <FuzzyPID+0x506>
			(fpid->outp > 0) ? (fpid->outp = fpid->K[U_MAX]) : (fpid->outp = -fpid->K[U_MAX]);
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	dd06      	ble.n	8003dda <FuzzyPID+0x4f2>
 8003dcc:	1d3b      	adds	r3, r7, #4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	671a      	str	r2, [r3, #112]	; 0x70
 8003dd8:	e009      	b.n	8003dee <FuzzyPID+0x506>
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003de2:	eef1 7a67 	vneg.f32	s15, s15
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		*fpid->output = fpid->outp;
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	1d3a      	adds	r2, r7, #4
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003dfa:	601a      	str	r2, [r3, #0]
	}
	fpid->isfirst = 0;
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003e04:	bf00      	nop
 8003e06:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40080000 	.word	0x40080000
 8003e14:	3fe00000 	.word	0x3fe00000

08003e18 <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c1);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <I2C1_EV_IRQHandler+0x10>)
 8003e1e:	f00a fd82 	bl	800e926 <HAL_I2C_EV_IRQHandler>

}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20005a9c 	.word	0x20005a9c

08003e2c <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <I2C2_EV_IRQHandler+0x10>)
 8003e32:	f00a fd78 	bl	800e926 <HAL_I2C_EV_IRQHandler>


}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20005af0 	.word	0x20005af0

08003e40 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <I2C2_ER_IRQHandler+0x10>)
 8003e46:	f00a fedb 	bl	800ec00 <HAL_I2C_ER_IRQHandler>


}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20005af0 	.word	0x20005af0

08003e54 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <I2C3_EV_IRQHandler+0x10>)
 8003e5a:	f00a fd64 	bl	800e926 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20005944 	.word	0x20005944

08003e68 <I2C3_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C3.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_ER_IRQHandler(void){
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c3);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <I2C3_ER_IRQHandler+0x10>)
 8003e6e:	f00a fec7 	bl	800ec00 <HAL_I2C_ER_IRQHandler>

}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20005944 	.word	0x20005944

08003e7c <LSA_read>:
	lsa->S7_pin 	= S7GPIOPin;
	lsa->S8_GPIOx 	= S8GPIOx;
	lsa->S8_pin 	= S8GPIOPin;

}
void LSA_read(LSA_t* lsa){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	lsa->LSA_bits.bit0 = lsa->S1 = HAL_GPIO_ReadPin(lsa->S1_GPIOx, lsa->S1_pin);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8b1b      	ldrh	r3, [r3, #24]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f00a fd18 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	b2d9      	uxtb	r1, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003eb0:	f361 0300 	bfi	r3, r1, #0, #1
 8003eb4:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit1 = lsa->S2 = HAL_GPIO_ReadPin(lsa->S2_GPIOx, lsa->S2_pin);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8c1b      	ldrh	r3, [r3, #32]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f00a fcfe 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	b2d9      	uxtb	r1, r3
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003ee4:	f361 0341 	bfi	r3, r1, #1, #1
 8003ee8:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit2 = lsa->S3 = HAL_GPIO_ReadPin(lsa->S3_GPIOx, lsa->S3_pin);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f00a fce4 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	b2d9      	uxtb	r1, r3
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003f18:	f361 0382 	bfi	r3, r1, #2, #1
 8003f1c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit3 = lsa->S4 = HAL_GPIO_ReadPin(lsa->S4_GPIOx, lsa->S4_pin);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f00a fcca 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	b2d9      	uxtb	r1, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003f4c:	f361 03c3 	bfi	r3, r1, #3, #1
 8003f50:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit4 = lsa->S5 = HAL_GPIO_ReadPin(lsa->S5_GPIOx, lsa->S5_pin);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f00a fcb0 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	b2d9      	uxtb	r1, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003f80:	f361 1304 	bfi	r3, r1, #4, #1
 8003f84:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit5 = lsa->S6 = HAL_GPIO_ReadPin(lsa->S6_GPIOx, lsa->S6_pin);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f00a fc95 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	b2d9      	uxtb	r1, r3
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003fb6:	f361 1345 	bfi	r3, r1, #5, #1
 8003fba:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit6 = lsa->S7 = HAL_GPIO_ReadPin(lsa->S7_GPIOx, lsa->S7_pin);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f00a fc7a 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	b2d9      	uxtb	r1, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8003fec:	f361 1386 	bfi	r3, r1, #6, #1
 8003ff0:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit7 = lsa->S8 = HAL_GPIO_ReadPin(lsa->S8_GPIOx, lsa->S8_pin);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f00a fc5f 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	b2d9      	uxtb	r1, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8004022:	f361 13c7 	bfi	r3, r1, #7, #1
 8004026:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_T = lsa->S1 + lsa->S2 + lsa->S3 + lsa->S4 +lsa->S5 +lsa->S6 + lsa->S7 + lsa->S8;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004036:	4413      	add	r3, r2
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004040:	4413      	add	r3, r2
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800404a:	4413      	add	r3, r2
 800404c:	b2da      	uxtb	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004054:	4413      	add	r3, r2
 8004056:	b2da      	uxtb	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800405e:	4413      	add	r3, r2
 8004060:	b2da      	uxtb	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004068:	4413      	add	r3, r2
 800406a:	b2da      	uxtb	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004072:	4413      	add	r3, r2
 8004074:	b2da      	uxtb	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <LSAErr_Handler>:
void LSAErr_Handler(LSA_t* lsa){
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	lsa->S1 = HAL_GPIO_ReadPin(lsa->S1_GPIOx, lsa->S1_pin);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8b1b      	ldrh	r3, [r3, #24]
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f00a fc14 	bl	800e8c4 <HAL_GPIO_ReadPin>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	lsa->S2 = HAL_GPIO_ReadPin(lsa->S2_GPIOx, lsa->S2_pin);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8c1b      	ldrh	r3, [r3, #32]
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f00a fc07 	bl	800e8c4 <HAL_GPIO_ReadPin>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	lsa->S3 = HAL_GPIO_ReadPin(lsa->S3_GPIOx, lsa->S3_pin);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f00a fbfa 	bl	800e8c4 <HAL_GPIO_ReadPin>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	lsa->S4 = HAL_GPIO_ReadPin(lsa->S4_GPIOx, lsa->S4_pin);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f00a fbed 	bl	800e8c4 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	lsa->S5 = HAL_GPIO_ReadPin(lsa->S5_GPIOx, lsa->S5_pin);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f00a fbe0 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	lsa->S6 = HAL_GPIO_ReadPin(lsa->S6_GPIOx, lsa->S6_pin);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f00a fbd2 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	lsa->S7 = HAL_GPIO_ReadPin(lsa->S7_GPIOx, lsa->S7_pin);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f00a fbc4 	bl	800e8c4 <HAL_GPIO_ReadPin>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	lsa->S8 = HAL_GPIO_ReadPin(lsa->S8_GPIOx, lsa->S8_pin);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f00a fbb6 	bl	800e8c4 <HAL_GPIO_ReadPin>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	lsa->LSA_T = lsa->S1 + lsa->S2 + lsa->S3 + lsa->S4 +lsa->S5 +lsa->S6 + lsa->S7 + lsa->S8;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800416e:	4413      	add	r3, r2
 8004170:	b2da      	uxtb	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004178:	4413      	add	r3, r2
 800417a:	b2da      	uxtb	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004182:	4413      	add	r3, r2
 8004184:	b2da      	uxtb	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800418c:	4413      	add	r3, r2
 800418e:	b2da      	uxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8004196:	4413      	add	r3, r2
 8004198:	b2da      	uxtb	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041a0:	4413      	add	r3, r2
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041aa:	4413      	add	r3, r2
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	if(lsa->LSA_T > 0){
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80ca 	beq.w	8004354 <LSAErr_Handler+0x2d0>

		lsa->PosErr = (lsa->S1 * 1.0 + lsa->S2 * 2.0 + lsa->S3 * 3.0 + lsa->S4 * 4.0 + lsa->S5 * 5.0 +
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f9ac 	bl	8000524 <__aeabi_i2d>
 80041cc:	4604      	mov	r4, r0
 80041ce:	460d      	mov	r5, r1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fc f9a4 	bl	8000524 <__aeabi_i2d>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	f7fc f854 	bl	800028c <__adddf3>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fc f84e 	bl	800028c <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc f990 	bl	8000524 <__aeabi_i2d>
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <LSAErr_Handler+0x2f0>)
 800420a:	f7fc f9f5 	bl	80005f8 <__aeabi_dmul>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fc f839 	bl	800028c <__adddf3>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4614      	mov	r4, r2
 8004220:	461d      	mov	r5, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc f97b 	bl	8000524 <__aeabi_i2d>
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	4b51      	ldr	r3, [pc, #324]	; (8004378 <LSAErr_Handler+0x2f4>)
 8004234:	f7fc f9e0 	bl	80005f8 <__aeabi_dmul>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc f824 	bl	800028c <__adddf3>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4614      	mov	r4, r2
 800424a:	461d      	mov	r5, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc f966 	bl	8000524 <__aeabi_i2d>
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	4b47      	ldr	r3, [pc, #284]	; (800437c <LSAErr_Handler+0x2f8>)
 800425e:	f7fc f9cb 	bl	80005f8 <__aeabi_dmul>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fc f80f 	bl	800028c <__adddf3>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4614      	mov	r4, r2
 8004274:	461d      	mov	r5, r3
				lsa->S6 * 6.0 + lsa->S7 * 7.0 + lsa->S8 * 8.0 )/(lsa->LSA_T) - 4.5;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc f951 	bl	8000524 <__aeabi_i2d>
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	4b3e      	ldr	r3, [pc, #248]	; (8004380 <LSAErr_Handler+0x2fc>)
 8004288:	f7fc f9b6 	bl	80005f8 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
		lsa->PosErr = (lsa->S1 * 1.0 + lsa->S2 * 2.0 + lsa->S3 * 3.0 + lsa->S4 * 4.0 + lsa->S5 * 5.0 +
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f7fb fffa 	bl	800028c <__adddf3>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4614      	mov	r4, r2
 800429e:	461d      	mov	r5, r3
				lsa->S6 * 6.0 + lsa->S7 * 7.0 + lsa->S8 * 8.0 )/(lsa->LSA_T) - 4.5;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc f93c 	bl	8000524 <__aeabi_i2d>
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	4b34      	ldr	r3, [pc, #208]	; (8004384 <LSAErr_Handler+0x300>)
 80042b2:	f7fc f9a1 	bl	80005f8 <__aeabi_dmul>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4620      	mov	r0, r4
 80042bc:	4629      	mov	r1, r5
 80042be:	f7fb ffe5 	bl	800028c <__adddf3>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4614      	mov	r4, r2
 80042c8:	461d      	mov	r5, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc f927 	bl	8000524 <__aeabi_i2d>
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <LSAErr_Handler+0x304>)
 80042dc:	f7fc f98c 	bl	80005f8 <__aeabi_dmul>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4620      	mov	r0, r4
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7fb ffd0 	bl	800028c <__adddf3>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4614      	mov	r4, r2
 80042f2:	461d      	mov	r5, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc f912 	bl	8000524 <__aeabi_i2d>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	f7fc faa0 	bl	800084c <__aeabi_ddiv>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <LSAErr_Handler+0x308>)
 800431a:	f7fb ffb5 	bl	8000288 <__aeabi_dsub>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	f7fc fc5f 	bl	8000be8 <__aeabi_d2f>
 800432a:	4602      	mov	r2, r0
		lsa->PosErr = (lsa->S1 * 1.0 + lsa->S2 * 2.0 + lsa->S3 * 3.0 + lsa->S4 * 4.0 + lsa->S5 * 5.0 +
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
		(lsa->PosErr < 0.0)? (lsa->PosMemory = 0) : (lsa->PosMemory = 1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	d504      	bpl.n	800434a <LSAErr_Handler+0x2c6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	}else

		(lsa->PosMemory == 0)? (lsa->PosErr = -5) : (lsa->PosErr = 5);

}
 8004348:	e010      	b.n	800436c <LSAErr_Handler+0x2e8>
		(lsa->PosErr < 0.0)? (lsa->PosMemory = 0) : (lsa->PosMemory = 1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8004352:	e00b      	b.n	800436c <LSAErr_Handler+0x2e8>
		(lsa->PosMemory == 0)? (lsa->PosErr = -5) : (lsa->PosErr = 5);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <LSAErr_Handler+0x2e2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <LSAErr_Handler+0x30c>)
 8004362:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004364:	e002      	b.n	800436c <LSAErr_Handler+0x2e8>
		(lsa->PosMemory == 0)? (lsa->PosErr = -5) : (lsa->PosErr = 5);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <LSAErr_Handler+0x310>)
 800436a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bdb0      	pop	{r4, r5, r7, pc}
 8004374:	40080000 	.word	0x40080000
 8004378:	40100000 	.word	0x40100000
 800437c:	40140000 	.word	0x40140000
 8004380:	40180000 	.word	0x40180000
 8004384:	401c0000 	.word	0x401c0000
 8004388:	40200000 	.word	0x40200000
 800438c:	40120000 	.word	0x40120000
 8004390:	c0a00000 	.word	0xc0a00000
 8004394:	40a00000 	.word	0x40a00000

08004398 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b0a0      	sub	sp, #128	; 0x80
 800439c:	af00      	add	r7, sp, #0

	Initialize();
 800439e:	f005 feaf 	bl	800a100 <Initialize>

	const osThreadAttr_t RNSConfig_Task_attributes = {
 80043a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f011 feb6 	bl	801611c <memset>
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <main+0xd0>)
 80043b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b8:	673b      	str	r3, [r7, #112]	; 0x70
 80043ba:	2328      	movs	r3, #40	; 0x28
 80043bc:	677b      	str	r3, [r7, #116]	; 0x74
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityHigh,
	};


	const osThreadAttr_t Calculation_Task_attributes = {
 80043be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043c2:	2224      	movs	r2, #36	; 0x24
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f011 fea8 	bl	801611c <memset>
 80043cc:	4b27      	ldr	r3, [pc, #156]	; (800446c <main+0xd4>)
 80043ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d6:	2318      	movs	r3, #24
 80043d8:	653b      	str	r3, [r7, #80]	; 0x50
			.stack_size = 1024 *  4,
			.priority = (osPriority_t) osPriorityNormal,
	};


	const osThreadAttr_t STTChecker_Task_attributes = {
 80043da:	f107 0314 	add.w	r3, r7, #20
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f011 fe9a 	bl	801611c <memset>
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <main+0xd8>)
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f2:	2318      	movs	r3, #24
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "STTChecker_Task",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osSemaphoreAttr_t CalcSemaphore_attributes = {
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <main+0xdc>)
 8004404:	607b      	str	r3, [r7, #4]
			.name = "InitSemaphore"
	};


	osKernelInitialize();
 8004406:	f00e fb79 	bl	8012afc <osKernelInitialize>

	RNSConfig_Task_Handle = osThreadNew(RNSConfig, NULL, &RNSConfig_Task_attributes);
 800440a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800440e:	461a      	mov	r2, r3
 8004410:	2100      	movs	r1, #0
 8004412:	4819      	ldr	r0, [pc, #100]	; (8004478 <main+0xe0>)
 8004414:	f00e fbbc 	bl	8012b90 <osThreadNew>
 8004418:	4603      	mov	r3, r0
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <main+0xe4>)
 800441c:	6013      	str	r3, [r2, #0]
	Calculation_Task_Handle = osThreadNew(Calculation, NULL, &Calculation_Task_attributes);
 800441e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004422:	461a      	mov	r2, r3
 8004424:	2100      	movs	r1, #0
 8004426:	4816      	ldr	r0, [pc, #88]	; (8004480 <main+0xe8>)
 8004428:	f00e fbb2 	bl	8012b90 <osThreadNew>
 800442c:	4603      	mov	r3, r0
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <main+0xec>)
 8004430:	6013      	str	r3, [r2, #0]
	STTChecker_Task_Handle = osThreadNew(STTChecker, NULL, &STTChecker_Task_attributes);
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	461a      	mov	r2, r3
 8004438:	2100      	movs	r1, #0
 800443a:	4813      	ldr	r0, [pc, #76]	; (8004488 <main+0xf0>)
 800443c:	f00e fba8 	bl	8012b90 <osThreadNew>
 8004440:	4603      	mov	r3, r0
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <main+0xf4>)
 8004444:	6013      	str	r3, [r2, #0]


	CalcSemaphore = osSemaphoreNew(1, 0, &CalcSemaphore_attributes);
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	461a      	mov	r2, r3
 800444a:	2100      	movs	r1, #0
 800444c:	2001      	movs	r0, #1
 800444e:	f00e fc52 	bl	8012cf6 <osSemaphoreNew>
 8004452:	4603      	mov	r3, r0
 8004454:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <main+0xf8>)
 8004456:	6013      	str	r3, [r2, #0]


	osKernelStart();
 8004458:	f00e fb74 	bl	8012b44 <osKernelStart>
 800445c:	2300      	movs	r3, #0


}
 800445e:	4618      	mov	r0, r3
 8004460:	3780      	adds	r7, #128	; 0x80
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	0801ca04 	.word	0x0801ca04
 800446c:	0801ca14 	.word	0x0801ca14
 8004470:	0801ca28 	.word	0x0801ca28
 8004474:	0801ca38 	.word	0x0801ca38
 8004478:	080044b5 	.word	0x080044b5
 800447c:	20007af8 	.word	0x20007af8
 8004480:	08004589 	.word	0x08004589
 8004484:	2000673c 	.word	0x2000673c
 8004488:	080045e5 	.word	0x080045e5
 800448c:	20007f18 	.word	0x20007f18
 8004490:	20007f50 	.word	0x20007f50

08004494 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	osSemaphoreRelease(CalcSemaphore);
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <TIM6_DAC_IRQHandler+0x18>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f00e fd05 	bl	8012eac <osSemaphoreRelease>
	HAL_TIM_IRQHandler(&htim6);
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <TIM6_DAC_IRQHandler+0x1c>)
 80044a4:	f00c fe62 	bl	801116c <HAL_TIM_IRQHandler>
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20007f50 	.word	0x20007f50
 80044b0:	200050dc 	.word	0x200050dc

080044b4 <RNSConfig>:

void RNSConfig(void *argument){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	6078      	str	r0, [r7, #4]

	while(1){

		main_board_1_data_receive.common_instruction = RNS_PENDING;
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <RNSConfig+0xa0>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
		main_board_1_data_receive.common_buffer[0].data = 0;
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <RNSConfig+0xa0>)
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	605a      	str	r2, [r3, #4]
		main_board_1_data_receive.common_buffer[1].data = 0;
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <RNSConfig+0xa0>)
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	609a      	str	r2, [r3, #8]
		main_board_1_data_receive.common_buffer[2].data = 0;
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <RNSConfig+0xa0>)
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	60da      	str	r2, [r3, #12]
		main_board_1_data_receive.common_buffer[3].data = 0;
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <RNSConfig+0xa0>)
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]


		fFPtd=fFKcd=fBPtd=fBKcd=xPtd=yPtd=1.0;
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <RNSConfig+0xa4>)
 80044e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <RNSConfig+0xa4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <RNSConfig+0xa8>)
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <RNSConfig+0xa8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <RNSConfig+0xac>)
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <RNSConfig+0xac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <RNSConfig+0xb0>)
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <RNSConfig+0xb0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a18      	ldr	r2, [pc, #96]	; (8004568 <RNSConfig+0xb4>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <RNSConfig+0xb4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a17      	ldr	r2, [pc, #92]	; (800456c <RNSConfig+0xb8>)
 8004510:	6013      	str	r3, [r2, #0]
		feedback_ins = 0;
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <RNSConfig+0xbc>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
		sys.flag = 0;
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <RNSConfig+0xc0>)
 800451a:	2200      	movs	r2, #0
 800451c:	801a      	strh	r2, [r3, #0]
		fyaw=180.0;
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <RNSConfig+0xc4>)
 8004520:	4a16      	ldr	r2, [pc, #88]	; (800457c <RNSConfig+0xc8>)
 8004522:	601a      	str	r2, [r3, #0]

		SYSSystemInit();
 8004524:	f007 fa06 	bl	800b934 <SYSSystemInit>
		STTStateInit();
 8004528:	f006 fbcc 	bl	800acc4 <STTStateInit>
		APPStop();
 800452c:	f005 fbba 	bl	8009ca4 <APPStop>
		APPResetPos();
 8004530:	f003 fe98 	bl	8008264 <APPResetPos>

		TIMxInit(&htim6, 5000, 84, 6, 0);
 8004534:	2300      	movs	r3, #0
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2306      	movs	r3, #6
 800453a:	2254      	movs	r2, #84	; 0x54
 800453c:	f241 3188 	movw	r1, #5000	; 0x1388
 8004540:	480f      	ldr	r0, [pc, #60]	; (8004580 <RNSConfig+0xcc>)
 8004542:	f7fe fe53 	bl	80031ec <TIMxInit>

		osThreadSuspend(RNSConfig_Task_Handle);
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <RNSConfig+0xd0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f00e fbb2 	bl	8012cb4 <osThreadSuspend>
		main_board_1_data_receive.common_instruction = RNS_PENDING;
 8004550:	e7b4      	b.n	80044bc <RNSConfig+0x8>
 8004552:	bf00      	nop
 8004554:	20007f64 	.word	0x20007f64
 8004558:	20006ee0 	.word	0x20006ee0
 800455c:	20006630 	.word	0x20006630
 8004560:	20007f1c 	.word	0x20007f1c
 8004564:	20006750 	.word	0x20006750
 8004568:	200079f4 	.word	0x200079f4
 800456c:	20006ee4 	.word	0x20006ee4
 8004570:	20006758 	.word	0x20006758
 8004574:	20006dac 	.word	0x20006dac
 8004578:	20007af4 	.word	0x20007af4
 800457c:	43340000 	.word	0x43340000
 8004580:	200050dc 	.word	0x200050dc
 8004584:	20007af8 	.word	0x20007af8

08004588 <Calculation>:
	}
}


void Calculation(void *argument){
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	int led=0;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
	while(1){
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <Calculation+0x54>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f04f 31ff 	mov.w	r1, #4294967295
 800459c:	4618      	mov	r0, r3
 800459e:	f00e fc33 	bl	8012e08 <osSemaphoreAcquire>
		SYSSystem5ms();
 80045a2:	f007 fd6d 	bl	800c080 <SYSSystem5ms>
		SYSSystemAct();
 80045a6:	f008 fb73 	bl	800cc90 <SYSSystemAct>
		if (++led==4){
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d1ee      	bne.n	8004594 <Calculation+0xc>
//			if(APPPrintstatus()){
//				APPPrinting(&uartbuff);
//				UARTPrintString_IT(&huart5,uartbuf);
//			}

			LED1=!LED1;
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <Calculation+0x58>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <Calculation+0x58>)
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2d9      	uxtb	r1, r3
 80045cc:	7813      	ldrb	r3, [r2, #0]
 80045ce:	f361 1345 	bfi	r3, r1, #5, #1
 80045d2:	7013      	strb	r3, [r2, #0]
			led=0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 80045d8:	e7dc      	b.n	8004594 <Calculation+0xc>
 80045da:	bf00      	nop
 80045dc:	20007f50 	.word	0x20007f50
 80045e0:	40020014 	.word	0x40020014

080045e4 <STTChecker>:
	}

}


void STTChecker(void *argument){
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

	while(1){
		STTEventChecker();
 80045ec:	f006 fb76 	bl	800acdc <STTEventChecker>
		button();
 80045f0:	f005 febe 	bl	800a370 <button>
		if(state != RNS_S_PENDING){
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <STTChecker+0x30>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <STTChecker+0x24>
			LED2=0;
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <STTChecker+0x34>)
 80045fe:	7813      	ldrb	r3, [r2, #0]
 8004600:	f36f 1345 	bfc	r3, #5, #1
 8004604:	7013      	strb	r3, [r2, #0]
 8004606:	e7f1      	b.n	80045ec <STTChecker+0x8>
		} else {
			LED2=1;
 8004608:	4a03      	ldr	r2, [pc, #12]	; (8004618 <STTChecker+0x34>)
 800460a:	7813      	ldrb	r3, [r2, #0]
 800460c:	f043 0320 	orr.w	r3, r3, #32
 8004610:	7013      	strb	r3, [r2, #0]
		STTEventChecker();
 8004612:	e7eb      	b.n	80045ec <STTChecker+0x8>
 8004614:	20006e5c 	.word	0x20006e5c
 8004618:	40020814 	.word	0x40020814

0800461c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 */
void Error_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0


}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b08a      	sub	sp, #40	; 0x28
 8004652:	af00      	add	r7, sp, #0
 8004654:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004658:	edc7 0a08 	vstr	s1, [r7, #32]
 800465c:	ed87 1a07 	vstr	s2, [r7, #28]
 8004660:	edc7 1a06 	vstr	s3, [r7, #24]
 8004664:	ed87 2a05 	vstr	s4, [r7, #20]
 8004668:	edc7 2a04 	vstr	s5, [r7, #16]
 800466c:	ed87 3a03 	vstr	s6, [r7, #12]
 8004670:	edc7 3a02 	vstr	s7, [r7, #8]
 8004674:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a3a      	ldr	r2, [r7, #32]
 8004680:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f81b 	bl	80046e2 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80046ac:	bf00      	nop
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80046c0:	6079      	str	r1, [r7, #4]
 80046c2:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	3302      	adds	r3, #2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	3304      	adds	r3, #4
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f804 	bl	80046e2 <PIDCoeffCalc>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 80046e2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	edd3 7a08 	vldr	s15, [r3, #32]
 80046f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fa:	d013      	beq.n	8004724 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	edd3 7a08 	vldr	s15, [r3, #32]
 8004708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
 8004722:	e007      	b.n	8004734 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	edd3 7a07 	vldr	s15, [r3, #28]
 800473a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	d108      	bne.n	8004756 <PIDCoeffCalc+0x74>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800474a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	f000 80ef 	beq.w	8004934 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	ed93 7a03 	vldr	s14, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	ee17 0a90 	vmov	r0, s15
 800476a:	f7fb feed 	bl	8000548 <__aeabi_f2d>
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004776:	f7fb fd87 	bl	8000288 <__aeabi_dsub>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4614      	mov	r4, r2
 8004780:	461d      	mov	r5, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	ed93 7a03 	vldr	s14, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800478e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004792:	ee17 0a90 	vmov	r0, s15
 8004796:	f7fb fed7 	bl	8000548 <__aeabi_f2d>
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047a2:	f7fb fd73 	bl	800028c <__adddf3>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7fc f84d 	bl	800084c <__aeabi_ddiv>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	f7fc fa15 	bl	8000be8 <__aeabi_d2f>
 80047be:	4603      	mov	r3, r0
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef1 7a67 	vneg.f32	s15, s15
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fb feb8 	bl	8000548 <__aeabi_f2d>
 80047d8:	4604      	mov	r4, r0
 80047da:	460d      	mov	r5, r1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fb feb1 	bl	8000548 <__aeabi_f2d>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	f7fb fd4f 	bl	800028c <__adddf3>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4690      	mov	r8, r2
 80047f4:	4699      	mov	r9, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fea4 	bl	8000548 <__aeabi_f2d>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4640      	mov	r0, r8
 8004806:	4649      	mov	r1, r9
 8004808:	f7fb fef6 	bl	80005f8 <__aeabi_dmul>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4690      	mov	r8, r2
 8004812:	4699      	mov	r9, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004824:	ee17 0a90 	vmov	r0, s15
 8004828:	f7fb fe8e 	bl	8000548 <__aeabi_f2d>
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004834:	f7fb fd2a 	bl	800028c <__adddf3>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4640      	mov	r0, r8
 800483e:	4649      	mov	r1, r9
 8004840:	f7fc f804 	bl	800084c <__aeabi_ddiv>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4620      	mov	r0, r4
 800484a:	4629      	mov	r1, r5
 800484c:	f7fb fd1e 	bl	800028c <__adddf3>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	f7fc f9c6 	bl	8000be8 <__aeabi_d2f>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	edd3 7a03 	vldr	s15, [r3, #12]
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	ee17 0a90 	vmov	r0, s15
 8004876:	f7fb fe67 	bl	8000548 <__aeabi_f2d>
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004882:	f7fb fd01 	bl	8000288 <__aeabi_dsub>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4614      	mov	r4, r2
 800488c:	461d      	mov	r5, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fe58 	bl	8000548 <__aeabi_f2d>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
 80048a0:	f7fb feaa 	bl	80005f8 <__aeabi_dmul>
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fb fe49 	bl	8000548 <__aeabi_f2d>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	f7fb fce7 	bl	800028c <__adddf3>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fb fe3c 	bl	8000548 <__aeabi_f2d>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4640      	mov	r0, r8
 80048d6:	4649      	mov	r1, r9
 80048d8:	f7fb fe8e 	bl	80005f8 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4620      	mov	r0, r4
 80048e2:	4629      	mov	r1, r5
 80048e4:	f7fb fcd0 	bl	8000288 <__aeabi_dsub>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	ee17 0a90 	vmov	r0, s15
 8004904:	f7fb fe20 	bl	8000548 <__aeabi_f2d>
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004910:	f7fb fcbc 	bl	800028c <__adddf3>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fb ff96 	bl	800084c <__aeabi_ddiv>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f7fc f95e 	bl	8000be8 <__aeabi_d2f>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	63da      	str	r2, [r3, #60]	; 0x3c
 8004932:	e00c      	b.n	800494e <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004958 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80049aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80049c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	d033      	beq.n	8004a36 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80049e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 80049f0:	e003      	b.n	80049fa <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a10:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a24:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a44:	d107      	bne.n	8004a56 <PID+0xc2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d02c      	beq.n	8004ab0 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	dd0f      	ble.n	8004aea <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	ed93 7a04 	vldr	s14, [r3, #16]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	7813      	ldrb	r3, [r2, #0]
 8004ae2:	f36f 0300 	bfc	r3, #0, #1
 8004ae6:	7013      	strb	r3, [r2, #0]
 8004ae8:	e02b      	b.n	8004b42 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	edd3 7a04 	vldr	s15, [r3, #16]
 8004af0:	eef1 7a67 	vneg.f32	s15, s15
 8004af4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	d511      	bpl.n	8004b26 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	ed93 7a04 	vldr	s14, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	eef1 7a67 	vneg.f32	s15, s15
 8004b16:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	7813      	ldrb	r3, [r2, #0]
 8004b1e:	f36f 0300 	bfc	r3, #0, #1
 8004b22:	7013      	strb	r3, [r2, #0]
 8004b24:	e00d      	b.n	8004b42 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b34:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	7813      	ldrb	r3, [r2, #0]
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <PPInit>:
#include "PP.h"

void PPInit  (uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]

	pp->base_shape=base;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
	pp->qeix = qeix;
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 8004b88:	f043 0302 	orr.w	r3, r3, #2
 8004b8c:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f503 702b 	add.w	r0, r3, #684	; 0x2ac
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7ff fd41 	bl	800462a <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8004bb4:	ed9f 3a42 	vldr	s6, [pc, #264]	; 8004cc0 <PPInit+0x168>
 8004bb8:	eddf 2a42 	vldr	s5, [pc, #264]	; 8004cc4 <PPInit+0x16c>
 8004bbc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8004bc0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004bc4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004bc8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004bcc:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004cc8 <PPInit+0x170>
 8004bd0:	f7ff fd3d 	bl	800464e <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff febc 	bl	8004958 <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7ff fd19 	bl	800462a <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004bfe:	4618      	mov	r0, r3
 8004c00:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8004c04:	ed9f 3a2e 	vldr	s6, [pc, #184]	; 8004cc0 <PPInit+0x168>
 8004c08:	eddf 2a2e 	vldr	s5, [pc, #184]	; 8004cc4 <PPInit+0x16c>
 8004c0c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8004c10:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004c14:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004c18:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004c1c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8004cc8 <PPInit+0x170>
 8004c20:	f7ff fd15 	bl	800464e <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fe94 	bl	8004958 <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004c42:	461a      	mov	r2, r3
 8004c44:	f7ff fcf1 	bl	800462a <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004c4e:	4618      	mov	r0, r3
 8004c50:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8004c54:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8004ccc <PPInit+0x174>
 8004c58:	eddf 2a1c 	vldr	s5, [pc, #112]	; 8004ccc <PPInit+0x174>
 8004c5c:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8004c60:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8004c64:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8004cd0 <PPInit+0x178>
 8004c68:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004c6c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8004cc8 <PPInit+0x170>
 8004c70:	f7ff fced 	bl	800464e <PIDGainInit>
	PIDDelayInit(&(pp->z));
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fe6c 	bl	8004958 <PIDDelayInit>

	pp->tol_xy=0.20;
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <PPInit+0x17c>)
 8004c84:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	pp->tol_z=2.0;
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c8e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8

	pp->tol_xy_crv= 0.6;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <PPInit+0x180>)
 8004c96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->f_tol_xy=0.06;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <PPInit+0x184>)
 8004c9e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	pp->f_tol_z=1.0;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ca8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

	pp->yaw_offset=*(pp->yaw);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	3ecccccd 	.word	0x3ecccccd
 8004cc4:	00000000 	.word	0x00000000
 8004cc8:	3ba3d70a 	.word	0x3ba3d70a
 8004ccc:	3e4ccccd 	.word	0x3e4ccccd
 8004cd0:	3d088889 	.word	0x3d088889
 8004cd4:	3e4ccccd 	.word	0x3e4ccccd
 8004cd8:	3f19999a 	.word	0x3f19999a
 8004cdc:	3d75c28f 	.word	0x3d75c28f

08004ce0 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp){
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004cea:	edc7 0a02 	vstr	s1, [r7, #8]
 8004cee:	ed87 1a01 	vstr	s2, [r7, #4]
 8004cf2:	6038      	str	r0, [r7, #0]

	pp->kp[0]=kp;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	pp->ki[0]=ki;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->kd[0]=kd;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

	PIDGainSet(KP,kp,&(pp->x));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004d12:	4619      	mov	r1, r3
 8004d14:	ed97 0a03 	vldr	s0, [r7, #12]
 8004d18:	2004      	movs	r0, #4
 8004d1a:	f7ff fccb 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004d24:	4619      	mov	r1, r3
 8004d26:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d2a:	2005      	movs	r0, #5
 8004d2c:	f7ff fcc2 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8004d36:	4619      	mov	r1, r3
 8004d38:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d3c:	2006      	movs	r0, #6
 8004d3e:	f7ff fcb9 	bl	80046b4 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d48:	4619      	mov	r1, r3
 8004d4a:	ed97 0a03 	vldr	s0, [r7, #12]
 8004d4e:	2004      	movs	r0, #4
 8004d50:	f7ff fcb0 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d60:	2005      	movs	r0, #5
 8004d62:	f7ff fca7 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d72:	2006      	movs	r0, #6
 8004d74:	f7ff fc9e 	bl	80046b4 <PIDGainSet>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	ed87 0a05 	vstr	s0, [r7, #20]
 8004d8a:	edc7 0a04 	vstr	s1, [r7, #16]
 8004d8e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004d92:	edc7 1a02 	vstr	s3, [r7, #8]
 8004d96:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	ed97 0a05 	vldr	s0, [r7, #20]
 8004da4:	2004      	movs	r0, #4
 8004da6:	f7ff fc85 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004db0:	4619      	mov	r1, r3
 8004db2:	ed97 0a04 	vldr	s0, [r7, #16]
 8004db6:	2005      	movs	r0, #5
 8004db8:	f7ff fc7c 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	ed97 0a03 	vldr	s0, [r7, #12]
 8004dc8:	2006      	movs	r0, #6
 8004dca:	f7ff fc73 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	ed97 0a02 	vldr	s0, [r7, #8]
 8004dda:	2003      	movs	r0, #3
 8004ddc:	f7ff fc6a 	bl	80046b4 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	601a      	str	r2, [r3, #0]

}
 8004dea:	bf00      	nop
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <PP_PIDEndSet>:
void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp){
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	ed87 0a03 	vstr	s0, [r7, #12]
 8004dfc:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e00:	ed87 1a01 	vstr	s2, [r7, #4]
 8004e04:	6038      	str	r0, [r7, #0]

	pp->kp[1]=kp;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[1]=ki;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[1]=kd;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
}
 8004e1e:	bf00      	nop
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp){
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	ed2d 8b02 	vpush	{d8}
 8004e30:	b086      	sub	sp, #24
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]

	int i;
	for(i=0;i<no_point;i++){
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e103      	b.n	8005048 <PP_start+0x21e>
		pp->target_vel[i] = point[i][0];
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3372      	adds	r3, #114	; 0x72
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1];
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3318      	adds	r3, #24
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	601a      	str	r2, [r3, #0]
		pp->target_y[i] = point[i][2];
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3328      	adds	r3, #40	; 0x28
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	601a      	str	r2, [r3, #0]
		pp->target_accurate[i] = point[i][5];
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3346      	adds	r3, #70	; 0x46
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11f      	bne.n	8004f22 <PP_start+0xf8>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ef2:	eeb0 7ae7 	vabs.f32	s14, s15
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004f02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f06:	eef0 7ae7 	vabs.f32	s15, s15
 8004f0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f0e:	eeb0 0a66 	vmov.f32	s0, s13
 8004f12:	f016 f95d 	bl	801b1d0 <atanf>
 8004f16:	eef0 7a40 	vmov.f32	s15, s0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	edc3 7a64 	vstr	s15, [r3, #400]	; 0x190
 8004f20:	e03e      	b.n	8004fa0 <PP_start+0x176>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3b1c      	subs	r3, #28
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4e:	eeb0 7ae7 	vabs.f32	s14, s15
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	edd3 6a01 	vldr	s13, [r3, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	3b1c      	subs	r3, #28
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f7e:	eef0 7ae7 	vabs.f32	s15, s15
 8004f82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f86:	eeb0 0a66 	vmov.f32	s0, s13
 8004f8a:	f016 f921 	bl	801b1d0 <atanf>
 8004f8e:	eef0 7a40 	vmov.f32	s15, s0
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3364      	adds	r3, #100	; 0x64
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3336      	adds	r3, #54	; 0x36
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	ed93 8a04 	vldr	s16, [r3, #16]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	3364      	adds	r3, #100	; 0x64
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	edd3 7a00 	vldr	s15, [r3]
 8004fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe6:	f016 f9c7 	bl	801b378 <cosf>
 8004fea:	eef0 7a40 	vmov.f32	s15, s0
 8004fee:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3384      	adds	r3, #132	; 0x84
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	ed93 8a04 	vldr	s16, [r3, #16]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3364      	adds	r3, #100	; 0x64
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	edd3 7a00 	vldr	s15, [r3]
 8005022:	eeb0 0a67 	vmov.f32	s0, s15
 8005026:	f016 f9ef 	bl	801b408 <sinf>
 800502a:	eef0 7a40 	vmov.f32	s15, s0
 800502e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3392      	adds	r3, #146	; 0x92
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++){
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	3301      	adds	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	f6ff aef7 	blt.w	8004e40 <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	if(fabs(pp->real_x - pp->target_x[0])){
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800506a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	d017      	beq.n	80050a4 <PP_start+0x27a>
		PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8005080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005084:	eef0 7ae7 	vabs.f32	s15, s15
 8005088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800508c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005096:	4619      	mov	r1, r3
 8005098:	eeb0 0a47 	vmov.f32	s0, s14
 800509c:	2002      	movs	r0, #2
 800509e:	f7ff fb09 	bl	80046b4 <PIDGainSet>
 80050a2:	e008      	b.n	80050b6 <PP_start+0x28c>
	} else {
		PIDGainSet(KE,1.0,&(pp->x));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80050aa:	4619      	mov	r1, r3
 80050ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80050b0:	2002      	movs	r0, #2
 80050b2:	f7ff faff 	bl	80046b4 <PIDGainSet>
	}
	if(fabs(pp->real_y - pp->target_y[0])){
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80050c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80050ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ce:	d017      	beq.n	8005100 <PP_start+0x2d6>
		PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80050dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050e0:	eef0 7ae7 	vabs.f32	s15, s15
 80050e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80050f2:	4619      	mov	r1, r3
 80050f4:	eeb0 0a47 	vmov.f32	s0, s14
 80050f8:	2002      	movs	r0, #2
 80050fa:	f7ff fadb 	bl	80046b4 <PIDGainSet>
 80050fe:	e008      	b.n	8005112 <PP_start+0x2e8>
	} else {
		PIDGainSet(KE,1.0,&(pp->y));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005106:	4619      	mov	r1, r3
 8005108:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800510c:	2002      	movs	r0, #2
 800510e:	f7ff fad1 	bl	80046b4 <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	edd3 7a84 	vldr	s15, [r3, #528]	; 0x210
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800511e:	4619      	mov	r1, r3
 8005120:	eeb0 0a67 	vmov.f32	s0, s15
 8005124:	2003      	movs	r0, #3
 8005126:	f7ff fac5 	bl	80046b4 <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	edd3 7a93 	vldr	s15, [r3, #588]	; 0x24c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005136:	4619      	mov	r1, r3
 8005138:	eeb0 0a67 	vmov.f32	s0, s15
 800513c:	2003      	movs	r0, #3
 800513e:	f7ff fab9 	bl	80046b4 <PIDGainSet>

	pp->point_count=0;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	pp->crnt_crv_pt=0;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	pp->pp_crv_calc=0;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_start=1;
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
	pp->final_f=0;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 800516e:	f36f 0382 	bfc	r3, #2, #1
 8005172:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
	pp->rotate=0;
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 800517c:	f36f 03c3 	bfc	r3, #3, #1
 8005180:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
	//	sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",point[0][0],point[0][1],
	//			point[0][2],point[0][3],point[0][4],
	//			point[0][5],point[0][6]);
	//						UARTPrintString(UART5,uartbuff);

}
 8005184:	bf00      	nop
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	ecbd 8b02 	vpop	{d8}
 800518e:	bd80      	pop	{r7, pc}

08005190 <PP_stop>:

void PP_stop (PathPlan_t *pp){
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	pp->pp_start=0;
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 800519e:	f36f 0300 	bfc	r3, #0, #1
 80051a2:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
	PIDDelayInit(&(pp->x));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fbd3 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff fbcd 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fbc7 	bl	8004958 <PIDDelayInit>

}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <PP_reset>:

void PP_reset (PathPlan_t *pp){
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
	pp->pos_y = 0.0;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_x = 0.0;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->prev_y = 0.0;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_real_x = 0.0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	635a      	str	r2, [r3, #52]	; 0x34
	pp->prev_real_y = 0.0;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
	pp->del_pos_x = 0.0;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_y = 0.0;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	64da      	str	r2, [r3, #76]	; 0x4c
	//	pp->yaw_constant = 0.0;
	//	pp->yaw_offset = *(pp->yaw);
	//	pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
	pp->real_y=0.0;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
	PIDDelayInit(&(pp->x));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fb91 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fb8b 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fb85 	bl	8004958 <PIDDelayInit>
	//	pp->real_z=0.0;
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp){
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005260:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	61da      	str	r2, [r3, #28]
	pp->yaw_constant=0;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	60da      	str	r2, [r3, #12]

}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp){
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]

	pp->pp_no_crv_pts = z;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c

}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	0000      	movs	r0, r0
	...

080052a8 <PathPlan>:

void PathPlan (PathPlan_t *pp){
 80052a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80052ac:	ed2d 8b02 	vpush	{d8}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]

	if(pp->point_start){
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8150 	beq.w	8005568 <PathPlan+0x2c0>
		pp->pos_x=*(pp->qeix);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28
		pp->pos_y=*(pp->qeiy);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38

		if(*(pp->yaw) < 50.0){
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	edd3 7a00 	vldr	s15, [r3]
 80052e4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005320 <PathPlan+0x78>
 80052e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f0:	d518      	bpl.n	8005324 <PathPlan+0x7c>
			if(pp->prev_yaw > 330.0){
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80052f8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800531c <PathPlan+0x74>
 80052fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005304:	dd2d      	ble.n	8005362 <PathPlan+0xba>
				pp->yaw_constant++;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800530c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800531a:	e022      	b.n	8005362 <PathPlan+0xba>
 800531c:	43a50000 	.word	0x43a50000
 8005320:	42480000 	.word	0x42480000
			}
		}else if(*(pp->yaw) > 330.0){
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	edd3 7a00 	vldr	s15, [r3]
 800532c:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800531c <PathPlan+0x74>
 8005330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005338:	dd13      	ble.n	8005362 <PathPlan+0xba>
			if(pp->prev_yaw < 50.0){
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005340:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8005320 <PathPlan+0x78>
 8005344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	d509      	bpl.n	8005362 <PathPlan+0xba>
				pp->yaw_constant--;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fb f8e8 	bl	8000548 <__aeabi_f2d>
 8005378:	4604      	mov	r4, r0
 800537a:	460d      	mov	r5, r1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	4618      	mov	r0, r3
 8005382:	f7fb f8e1 	bl	8000548 <__aeabi_f2d>
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	4b75      	ldr	r3, [pc, #468]	; (8005560 <PathPlan+0x2b8>)
 800538c:	f7fb f934 	bl	80005f8 <__aeabi_dmul>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	461d      	mov	r5, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fb f8cd 	bl	8000548 <__aeabi_f2d>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fa ff67 	bl	8000288 <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4614      	mov	r4, r2
 80053c0:	461d      	mov	r5, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb f8be 	bl	8000548 <__aeabi_f2d>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa ff5a 	bl	800028c <__adddf3>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	f7fb fc02 	bl	8000be8 <__aeabi_d2f>
 80053e4:	4602      	mov	r2, r0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * 3.141593;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fb f8aa 	bl	8000548 <__aeabi_f2d>
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <PathPlan+0x2bc>)
 80053fa:	f7fb fa27 	bl	800084c <__aeabi_ddiv>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4610      	mov	r0, r2
 8005404:	4619      	mov	r1, r3
 8005406:	a354      	add	r3, pc, #336	; (adr r3, 8005558 <PathPlan+0x2b0>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fb f8f4 	bl	80005f8 <__aeabi_dmul>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	f7fb fbe6 	bl	8000be8 <__aeabi_d2f>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	619a      	str	r2, [r3, #24]

		pp->del_pos_x = pp->pos_x - pp->prev_x;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800542e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		pp->del_pos_y = pp->pos_y - pp->prev_y;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800545a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	edd3 7a06 	vldr	s15, [r3, #24]
 8005464:	eeb0 0a67 	vmov.f32	s0, s15
 8005468:	f015 ff86 	bl	801b378 <cosf>
 800546c:	eef0 7a40 	vmov.f32	s15, s0
 8005470:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005480:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	edd3 7a06 	vldr	s15, [r3, #24]
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	f015 ffbb 	bl	801b408 <sinf>
 8005492:	eef0 7a40 	vmov.f32	s15, s0
 8005496:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 800549a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054b4:	eeb1 8a67 	vneg.f32	s16, s15
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80054be:	eeb0 0a67 	vmov.f32	s0, s15
 80054c2:	f015 ffa1 	bl	801b408 <sinf>
 80054c6:	eef0 7a40 	vmov.f32	s15, s0
 80054ca:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80054da:	ee77 8a67 	vsub.f32	s17, s14, s15
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80054e4:	eeb0 0a67 	vmov.f32	s0, s15
 80054e8:	f015 ff46 	bl	801b378 <cosf>
 80054ec:	eef0 7a40 	vmov.f32	s15, s0
 80054f0:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80054f4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		pp->real_x = pp->real_x + pp->del_pos_x;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800550a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		pp->real_y = pp->real_y + pp->del_pos_y;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		pp->prev_x = pp->pos_x;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->prev_y = pp->pos_y;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c

		pp->prev_real_x = pp->real_x;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
		pp->prev_real_y = pp->real_y;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
		pp->prev_real_z= pp->real_z;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	615a      	str	r2, [r3, #20]
 8005552:	e009      	b.n	8005568 <PathPlan+0x2c0>
 8005554:	f3af 8000 	nop.w
 8005558:	82c2bd7f 	.word	0x82c2bd7f
 800555c:	400921fb 	.word	0x400921fb
 8005560:	40768000 	.word	0x40768000
 8005564:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	f002 8634 	beq.w	80081e2 <PathPlan+0x2f3a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	f002 862b 	beq.w	80081e2 <PathPlan+0x2f3a>

		if(pp->pp_crv_radius[pp->point_count]){
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	edd3 7a00 	vldr	s15, [r3]
 80055a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80055a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a8:	f001 839a 	beq.w	8006ce0 <PathPlan+0x1a38>


			if(!pp->pp_crv_calc){
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 820d 	bne.w	80059d2 <PathPlan+0x72a>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	3318      	adds	r3, #24
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	3304      	adds	r3, #4
 80055c8:	ed93 7a00 	vldr	s14, [r3]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80055da:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	edd3 8a00 	vldr	s17, [r3]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	3328      	adds	r3, #40	; 0x28
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	ed93 7a00 	vldr	s14, [r3]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800560a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	3318      	adds	r3, #24
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	3304      	adds	r3, #4
 800561e:	ed93 7a00 	vldr	s14, [r3]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562c:	eef0 0a67 	vmov.f32	s1, s15
 8005630:	eeb0 0a66 	vmov.f32	s0, s13
 8005634:	f015 ff2a 	bl	801b48c <atan2f>
 8005638:	eef0 7a40 	vmov.f32	s15, s0
 800563c:	eeb0 0a67 	vmov.f32	s0, s15
 8005640:	f015 fee2 	bl	801b408 <sinf>
 8005644:	eef0 7a40 	vmov.f32	s15, s0
 8005648:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800564c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005656:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	3328      	adds	r3, #40	; 0x28
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	ed93 7a00 	vldr	s14, [r3]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005676:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800567a:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	edd3 8a00 	vldr	s17, [r3]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	3328      	adds	r3, #40	; 0x28
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	ed93 7a00 	vldr	s14, [r3]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80056aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	3318      	adds	r3, #24
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	3304      	adds	r3, #4
 80056be:	ed93 7a00 	vldr	s14, [r3]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80056c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056cc:	eef0 0a67 	vmov.f32	s1, s15
 80056d0:	eeb0 0a66 	vmov.f32	s0, s13
 80056d4:	f015 feda 	bl	801b48c <atan2f>
 80056d8:	eef0 7a40 	vmov.f32	s15, s0
 80056dc:	eeb0 0a67 	vmov.f32	s0, s15
 80056e0:	f015 fe4a 	bl	801b378 <cosf>
 80056e4:	eef0 7a40 	vmov.f32	s15, s0
 80056e8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80056ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80056f6:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	3336      	adds	r3, #54	; 0x36
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	3304      	adds	r3, #4
 800570a:	edd3 6a00 	vldr	s13, [r3]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	f503 739b 	add.w	r3, r3, #310	; 0x136
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	3304      	adds	r3, #4
 8005732:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800574c:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8005750:	2300      	movs	r3, #0
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	e132      	b.n	80059bc <PathPlan+0x714>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8005756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800575a:	edd7 7a03 	vldr	s15, [r7, #12]
 800575e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005762:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005766:	eeb0 0a67 	vmov.f32	s0, s15
 800576a:	f015 fe91 	bl	801b490 <powf>
 800576e:	eeb0 7a40 	vmov.f32	s14, s0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	ee17 0a90 	vmov	r0, s15
 8005780:	f7fa fee2 	bl	8000548 <__aeabi_f2d>
 8005784:	4604      	mov	r4, r0
 8005786:	460d      	mov	r5, r1
 8005788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005794:	ee17 0a90 	vmov	r0, s15
 8005798:	f7fa fed6 	bl	8000548 <__aeabi_f2d>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	f7fa fd74 	bl	800028c <__adddf3>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4690      	mov	r8, r2
 80057aa:	4699      	mov	r9, r3
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7fa fecb 	bl	8000548 <__aeabi_f2d>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4640      	mov	r0, r8
 80057b8:	4649      	mov	r1, r9
 80057ba:	f7fa ff1d 	bl	80005f8 <__aeabi_dmul>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4690      	mov	r8, r2
 80057c4:	4699      	mov	r9, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa feba 	bl	8000548 <__aeabi_f2d>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f7fa fd50 	bl	800028c <__adddf3>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80057f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80057fc:	f015 fe48 	bl	801b490 <powf>
 8005800:	eeb0 7a40 	vmov.f32	s14, s0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	3318      	adds	r3, #24
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	3304      	adds	r3, #4
 8005814:	edd3 7a00 	vldr	s15, [r3]
 8005818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581c:	ee17 0a90 	vmov	r0, s15
 8005820:	f7fa fe92 	bl	8000548 <__aeabi_f2d>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4620      	mov	r0, r4
 800582a:	4629      	mov	r1, r5
 800582c:	f7fa fd2e 	bl	800028c <__adddf3>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	f7fb f9d6 	bl	8000be8 <__aeabi_d2f>
 800583c:	4601      	mov	r1, r0
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	3304      	adds	r3, #4
 800584c:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 800584e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005852:	edd7 7a03 	vldr	s15, [r7, #12]
 8005856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800585a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800585e:	eeb0 0a67 	vmov.f32	s0, s15
 8005862:	f015 fe15 	bl	801b490 <powf>
 8005866:	eeb0 7a40 	vmov.f32	s14, s0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005874:	ee17 0a90 	vmov	r0, s15
 8005878:	f7fa fe66 	bl	8000548 <__aeabi_f2d>
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005884:	edd7 7a03 	vldr	s15, [r7, #12]
 8005888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800588c:	ee17 0a90 	vmov	r0, s15
 8005890:	f7fa fe5a 	bl	8000548 <__aeabi_f2d>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	f7fa fcf8 	bl	800028c <__adddf3>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4690      	mov	r8, r2
 80058a2:	4699      	mov	r9, r3
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7fa fe4f 	bl	8000548 <__aeabi_f2d>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4640      	mov	r0, r8
 80058b0:	4649      	mov	r1, r9
 80058b2:	f7fa fea1 	bl	80005f8 <__aeabi_dmul>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fa fe3e 	bl	8000548 <__aeabi_f2d>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fe90 	bl	80005f8 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4620      	mov	r0, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	f7fa fcd4 	bl	800028c <__adddf3>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	461d      	mov	r5, r3
 80058ec:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80058f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80058f4:	f015 fdcc 	bl	801b490 <powf>
 80058f8:	eeb0 7a40 	vmov.f32	s14, s0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	3328      	adds	r3, #40	; 0x28
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	edd3 7a00 	vldr	s15, [r3]
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	ee17 0a90 	vmov	r0, s15
 8005916:	f7fa fe17 	bl	8000548 <__aeabi_f2d>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fa fcb3 	bl	800028c <__adddf3>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	f7fb f95b 	bl	8000be8 <__aeabi_d2f>
 8005932:	4601      	mov	r1, r0
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f503 7391 	add.w	r3, r3, #290	; 0x122
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	3304      	adds	r3, #4
 8005942:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	3304      	adds	r3, #4
 8005956:	ed93 7a00 	vldr	s14, [r3]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	f503 739b 	add.w	r3, r3, #310	; 0x136
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	3304      	adds	r3, #4
 800596c:	edd3 6a00 	vldr	s13, [r3]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800597a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	3304      	adds	r3, #4
 8005990:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80059ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b2:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	f6ff aec6 	blt.w	8005756 <PathPlan+0x4ae>
				}
//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	3304      	adds	r3, #4
 80059e4:	ed93 7a00 	vldr	s14, [r3]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80059ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	3304      	adds	r3, #4
 8005a0a:	ed93 7a00 	vldr	s14, [r3]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	ed93 7a00 	vldr	s14, [r3]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8005a50:	3b01      	subs	r3, #1
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d14a      	bne.n	8005aec <PathPlan+0x844>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8005a5c:	eef0 7ae7 	vabs.f32	s15, s15
 8005a60:	ee17 0a90 	vmov	r0, s15
 8005a64:	f7fa fd70 	bl	8000548 <__aeabi_f2d>
 8005a68:	4604      	mov	r4, r0
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8005a72:	eef0 7ae7 	vabs.f32	s15, s15
 8005a76:	ee17 0a90 	vmov	r0, s15
 8005a7a:	f7fa fd65 	bl	8000548 <__aeabi_f2d>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4620      	mov	r0, r4
 8005a84:	4629      	mov	r1, r5
 8005a86:	f7fa fc01 	bl	800028c <__adddf3>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a9a:	f7fa fed7 	bl	800084c <__aeabi_ddiv>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4614      	mov	r4, r2
 8005aa4:	461d      	mov	r5, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fa fd4b 	bl	8000548 <__aeabi_f2d>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fb f80f 	bl	8000adc <__aeabi_dcmplt>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d013      	beq.n	8005aec <PathPlan+0x844>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8005aca:	eeb0 7ae7 	vabs.f32	s14, s15
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005adc:	d506      	bpl.n	8005aec <PathPlan+0x844>
				pp->pp_lck = 1.0;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8005ae4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e005      	b.n	8005af8 <PathPlan+0x850>
			else
				pp->pp_lck = 0.0;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005afe:	edd3 7a00 	vldr	s15, [r3]
 8005b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005b10:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005b1a:	edd3 7a00 	vldr	s15, [r3]
 8005b1e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8005dc0 <PathPlan+0xb18>
 8005b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2a:	d811      	bhi.n	8005b50 <PathPlan+0x8a8>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005b32:	ed93 7a00 	vldr	s14, [r3]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8005b3c:	edd3 7a00 	vldr	s15, [r3]
 8005b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005b4a:	edc3 7a00 	vstr	s15, [r3]
 8005b4e:	e034      	b.n	8005bba <PathPlan+0x912>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005b56:	edd3 6a00 	vldr	s13, [r3]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005b60:	ed93 7a00 	vldr	s14, [r3]
 8005b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005b6e:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fce4 	bl	8000548 <__aeabi_f2d>
 8005b80:	a38d      	add	r3, pc, #564	; (adr r3, 8005db8 <PathPlan+0xb10>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa ffbd 	bl	8000b04 <__aeabi_dcmpge>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <PathPlan+0x8f2>
					pp->pp_lck_enb = 1;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8005b98:	e003      	b.n	8005ba2 <PathPlan+0x8fa>
				else
					pp->pp_lck_enb = 0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
				pp->pp_lck_count = 0.0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8005bc0:	eef0 7ae7 	vabs.f32	s15, s15
 8005bc4:	ee17 0a90 	vmov	r0, s15
 8005bc8:	f7fa fcbe 	bl	8000548 <__aeabi_f2d>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8005bd6:	eef0 7ae7 	vabs.f32	s15, s15
 8005bda:	ee17 0a90 	vmov	r0, s15
 8005bde:	f7fa fcb3 	bl	8000548 <__aeabi_f2d>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fb4f 	bl	800028c <__adddf3>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bfe:	f7fa fe25 	bl	800084c <__aeabi_ddiv>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4614      	mov	r4, r2
 8005c08:	461d      	mov	r5, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fa fc99 	bl	8000548 <__aeabi_f2d>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7fa ff5d 	bl	8000adc <__aeabi_dcmplt>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8467 	beq.w	80064f8 <PathPlan+0x1250>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8005c36:	3b01      	subs	r3, #1
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	f280 813a 	bge.w	8005eb2 <PathPlan+0xc0a>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8005c44:	edd3 7a00 	vldr	s15, [r3]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	eeb0 0a67 	vmov.f32	s0, s15
 8005c54:	2004      	movs	r0, #4
 8005c56:	f7fe fd2d 	bl	80046b4 <PIDGainSet>
					pp->crnt_crv_pt++;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	3304      	adds	r3, #4
 8005c7a:	ed93 7a00 	vldr	s14, [r3]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	ed93 7a00 	vldr	s14, [r3]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	ed93 7a00 	vldr	s14, [r3]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4

					if(pp->target_x[pp->point_count]-pp->real_x){
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	3318      	adds	r3, #24
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3304      	adds	r3, #4
 8005cea:	ed93 7a00 	vldr	s14, [r3]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	d01e      	beq.n	8005d40 <PathPlan+0xa98>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	3318      	adds	r3, #24
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	ed93 7a00 	vldr	s14, [r3]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d20:	eef0 7ae7 	vabs.f32	s15, s15
 8005d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005d32:	4619      	mov	r1, r3
 8005d34:	eeb0 0a47 	vmov.f32	s0, s14
 8005d38:	2002      	movs	r0, #2
 8005d3a:	f7fe fcbb 	bl	80046b4 <PIDGainSet>
 8005d3e:	e008      	b.n	8005d52 <PathPlan+0xaaa>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005d46:	4619      	mov	r1, r3
 8005d48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005d4c:	2002      	movs	r0, #2
 8005d4e:	f7fe fcb1 	bl	80046b4 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	3328      	adds	r3, #40	; 0x28
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	ed93 7a00 	vldr	s14, [r3]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	d025      	beq.n	8005dc4 <PathPlan+0xb1c>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	3328      	adds	r3, #40	; 0x28
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	ed93 7a00 	vldr	s14, [r3]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d94:	eef0 7ae7 	vabs.f32	s15, s15
 8005d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005da6:	4619      	mov	r1, r3
 8005da8:	eeb0 0a47 	vmov.f32	s0, s14
 8005dac:	2002      	movs	r0, #2
 8005dae:	f7fe fc81 	bl	80046b4 <PIDGainSet>
 8005db2:	e010      	b.n	8005dd6 <PathPlan+0xb2e>
 8005db4:	f3af 8000 	nop.w
 8005db8:	66666666 	.word	0x66666666
 8005dbc:	3fee6666 	.word	0x3fee6666
 8005dc0:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005dca:	4619      	mov	r1, r3
 8005dcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005dd0:	2002      	movs	r0, #2
 8005dd2:	f7fe fc6f 	bl	80046b4 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005de2:	4619      	mov	r1, r3
 8005de4:	eeb0 0a67 	vmov.f32	s0, s15
 8005de8:	2004      	movs	r0, #4
 8005dea:	f7fe fc63 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8005e00:	2004      	movs	r0, #4
 8005e02:	f7fe fc57 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005e12:	4619      	mov	r1, r3
 8005e14:	eeb0 0a67 	vmov.f32	s0, s15
 8005e18:	2005      	movs	r0, #5
 8005e1a:	f7fe fc4b 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e30:	2005      	movs	r0, #5
 8005e32:	f7fe fc3f 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005e42:	4619      	mov	r1, r3
 8005e44:	eeb0 0a67 	vmov.f32	s0, s15
 8005e48:	2006      	movs	r0, #6
 8005e4a:	f7fe fc33 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e60:	2006      	movs	r0, #6
 8005e62:	f7fe fc27 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	3384      	adds	r3, #132	; 0x84
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	edd3 7a00 	vldr	s15, [r3]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005e7e:	4619      	mov	r1, r3
 8005e80:	eeb0 0a67 	vmov.f32	s0, s15
 8005e84:	2003      	movs	r0, #3
 8005e86:	f7fe fc15 	bl	80046b4 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	3392      	adds	r3, #146	; 0x92
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	3304      	adds	r3, #4
 8005e9a:	edd3 7a00 	vldr	s15, [r3]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eaa:	2003      	movs	r0, #3
 8005eac:	f7fe fc02 	bl	80046b4 <PIDGainSet>
 8005eb0:	e322      	b.n	80064f8 <PathPlan+0x1250>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	f040 8251 	bne.w	8006368 <PathPlan+0x10c0>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	f280 8247 	bge.w	8006368 <PathPlan+0x10c0>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8005ee0:	eef0 7ae7 	vabs.f32	s15, s15
 8005ee4:	ee17 0a90 	vmov	r0, s15
 8005ee8:	f7fa fb2e 	bl	8000548 <__aeabi_f2d>
 8005eec:	4604      	mov	r4, r0
 8005eee:	460d      	mov	r5, r1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8005ef6:	eef0 7ae7 	vabs.f32	s15, s15
 8005efa:	ee17 0a90 	vmov	r0, s15
 8005efe:	f7fa fb23 	bl	8000548 <__aeabi_f2d>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa f9bf 	bl	800028c <__adddf3>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4610      	mov	r0, r2
 8005f14:	4619      	mov	r1, r3
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f1e:	f7fa fc95 	bl	800084c <__aeabi_ddiv>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4614      	mov	r4, r2
 8005f28:	461d      	mov	r5, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fa fb09 	bl	8000548 <__aeabi_f2d>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7fa fdcd 	bl	8000adc <__aeabi_dcmplt>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 82d6 	beq.w	80064f6 <PathPlan+0x124e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8005f50:	eeb0 7ae7 	vabs.f32	s14, s15
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8005f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f62:	d400      	bmi.n	8005f66 <PathPlan+0xcbe>
 8005f64:	e2c7      	b.n	80064f6 <PathPlan+0x124e>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	3346      	adds	r3, #70	; 0x46
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	edd3 7a00 	vldr	s15, [r3]
 8005f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f7c:	eef4 7a47 	vcmp.f32	s15, s14
 8005f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f84:	f040 80fd 	bne.w	8006182 <PathPlan+0xeda>
							if(pp->pp_lck_enb == 1){
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	f040 82b1 	bne.w	80064f6 <PathPlan+0x124e>

								pp->point_count++;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
								if(pp->target_x[pp->point_count]-pp->real_x){
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	3318      	adds	r3, #24
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	ed93 7a00 	vldr	s14, [r3]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc8:	d01e      	beq.n	8006008 <PathPlan+0xd60>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3304      	adds	r3, #4
 8005fda:	ed93 7a00 	vldr	s14, [r3]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fe8:	eef0 7ae7 	vabs.f32	s15, s15
 8005fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8006000:	2002      	movs	r0, #2
 8006002:	f7fe fb57 	bl	80046b4 <PIDGainSet>
 8006006:	e008      	b.n	800601a <PathPlan+0xd72>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800600e:	4619      	mov	r1, r3
 8006010:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006014:	2002      	movs	r0, #2
 8006016:	f7fe fb4d 	bl	80046b4 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	3328      	adds	r3, #40	; 0x28
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	ed93 7a00 	vldr	s14, [r3]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006036:	eef5 7a40 	vcmp.f32	s15, #0.0
 800603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603e:	d01d      	beq.n	800607c <PathPlan+0xdd4>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	3328      	adds	r3, #40	; 0x28
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	ed93 7a00 	vldr	s14, [r3]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800605c:	eef0 7ae7 	vabs.f32	s15, s15
 8006060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800606e:	4619      	mov	r1, r3
 8006070:	eeb0 0a47 	vmov.f32	s0, s14
 8006074:	2002      	movs	r0, #2
 8006076:	f7fe fb1d 	bl	80046b4 <PIDGainSet>
 800607a:	e008      	b.n	800608e <PathPlan+0xde6>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006082:	4619      	mov	r1, r3
 8006084:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006088:	2002      	movs	r0, #2
 800608a:	f7fe fb13 	bl	80046b4 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800609a:	4619      	mov	r1, r3
 800609c:	eeb0 0a67 	vmov.f32	s0, s15
 80060a0:	2004      	movs	r0, #4
 80060a2:	f7fe fb07 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80060b2:	4619      	mov	r1, r3
 80060b4:	eeb0 0a67 	vmov.f32	s0, s15
 80060b8:	2004      	movs	r0, #4
 80060ba:	f7fe fafb 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80060ca:	4619      	mov	r1, r3
 80060cc:	eeb0 0a67 	vmov.f32	s0, s15
 80060d0:	2005      	movs	r0, #5
 80060d2:	f7fe faef 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80060e2:	4619      	mov	r1, r3
 80060e4:	eeb0 0a67 	vmov.f32	s0, s15
 80060e8:	2005      	movs	r0, #5
 80060ea:	f7fe fae3 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80060fa:	4619      	mov	r1, r3
 80060fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006100:	2006      	movs	r0, #6
 8006102:	f7fe fad7 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006112:	4619      	mov	r1, r3
 8006114:	eeb0 0a67 	vmov.f32	s0, s15
 8006118:	2006      	movs	r0, #6
 800611a:	f7fe facb 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	3384      	adds	r3, #132	; 0x84
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	edd3 7a00 	vldr	s15, [r3]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8006136:	4619      	mov	r1, r3
 8006138:	eeb0 0a67 	vmov.f32	s0, s15
 800613c:	2003      	movs	r0, #3
 800613e:	f7fe fab9 	bl	80046b4 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	3392      	adds	r3, #146	; 0x92
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	3304      	adds	r3, #4
 8006152:	edd3 7a00 	vldr	s15, [r3]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800615c:	4619      	mov	r1, r3
 800615e:	eeb0 0a67 	vmov.f32	s0, s15
 8006162:	2003      	movs	r0, #3
 8006164:	f7fe faa6 	bl	80046b4 <PIDGainSet>
								pp->crnt_crv_pt=0;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
								pp->pp_crv_calc = 0;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524

								pp->pp_lck_enb = 0;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006180:	e1b9      	b.n	80064f6 <PathPlan+0x124e>

							}
						}else{
							pp->point_count++;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	3318      	adds	r3, #24
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	3304      	adds	r3, #4
 80061a0:	ed93 7a00 	vldr	s14, [r3]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80061aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d01e      	beq.n	80061f6 <PathPlan+0xf4e>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	3318      	adds	r3, #24
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	3304      	adds	r3, #4
 80061c8:	ed93 7a00 	vldr	s14, [r3]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80061d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061d6:	eef0 7ae7 	vabs.f32	s15, s15
 80061da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80061e8:	4619      	mov	r1, r3
 80061ea:	eeb0 0a47 	vmov.f32	s0, s14
 80061ee:	2002      	movs	r0, #2
 80061f0:	f7fe fa60 	bl	80046b4 <PIDGainSet>
 80061f4:	e008      	b.n	8006208 <PathPlan+0xf60>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80061fc:	4619      	mov	r1, r3
 80061fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006202:	2002      	movs	r0, #2
 8006204:	f7fe fa56 	bl	80046b4 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	3328      	adds	r3, #40	; 0x28
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	ed93 7a00 	vldr	s14, [r3]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006224:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800622c:	d01d      	beq.n	800626a <PathPlan+0xfc2>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	3328      	adds	r3, #40	; 0x28
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	ed93 7a00 	vldr	s14, [r3]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800624a:	eef0 7ae7 	vabs.f32	s15, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800625c:	4619      	mov	r1, r3
 800625e:	eeb0 0a47 	vmov.f32	s0, s14
 8006262:	2002      	movs	r0, #2
 8006264:	f7fe fa26 	bl	80046b4 <PIDGainSet>
 8006268:	e008      	b.n	800627c <PathPlan+0xfd4>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006270:	4619      	mov	r1, r3
 8006272:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006276:	2002      	movs	r0, #2
 8006278:	f7fe fa1c 	bl	80046b4 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8006288:	4619      	mov	r1, r3
 800628a:	eeb0 0a67 	vmov.f32	s0, s15
 800628e:	2004      	movs	r0, #4
 8006290:	f7fe fa10 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80062a0:	4619      	mov	r1, r3
 80062a2:	eeb0 0a67 	vmov.f32	s0, s15
 80062a6:	2004      	movs	r0, #4
 80062a8:	f7fe fa04 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80062b8:	4619      	mov	r1, r3
 80062ba:	eeb0 0a67 	vmov.f32	s0, s15
 80062be:	2005      	movs	r0, #5
 80062c0:	f7fe f9f8 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80062d0:	4619      	mov	r1, r3
 80062d2:	eeb0 0a67 	vmov.f32	s0, s15
 80062d6:	2005      	movs	r0, #5
 80062d8:	f7fe f9ec 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80062e8:	4619      	mov	r1, r3
 80062ea:	eeb0 0a67 	vmov.f32	s0, s15
 80062ee:	2006      	movs	r0, #6
 80062f0:	f7fe f9e0 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006300:	4619      	mov	r1, r3
 8006302:	eeb0 0a67 	vmov.f32	s0, s15
 8006306:	2006      	movs	r0, #6
 8006308:	f7fe f9d4 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	3384      	adds	r3, #132	; 0x84
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	edd3 7a00 	vldr	s15, [r3]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8006324:	4619      	mov	r1, r3
 8006326:	eeb0 0a67 	vmov.f32	s0, s15
 800632a:	2003      	movs	r0, #3
 800632c:	f7fe f9c2 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	3392      	adds	r3, #146	; 0x92
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	3304      	adds	r3, #4
 8006340:	edd3 7a00 	vldr	s15, [r3]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800634a:	4619      	mov	r1, r3
 800634c:	eeb0 0a67 	vmov.f32	s0, s15
 8006350:	2003      	movs	r0, #3
 8006352:	f7fe f9af 	bl	80046b4 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
							pp->pp_crv_calc = 0;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006366:	e0c6      	b.n	80064f6 <PathPlan+0x124e>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8006374:	3b01      	subs	r3, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	f040 80be 	bne.w	80064f8 <PathPlan+0x1250>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006388:	3b01      	subs	r3, #1
 800638a:	429a      	cmp	r2, r3
 800638c:	f040 80b4 	bne.w	80064f8 <PathPlan+0x1250>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006396:	eeb0 7ae7 	vabs.f32	s14, s15
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80063a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063a8:	f140 80a6 	bpl.w	80064f8 <PathPlan+0x1250>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80063b2:	eeb0 7ae7 	vabs.f32	s14, s15
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 80063bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c4:	f140 8098 	bpl.w	80064f8 <PathPlan+0x1250>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80063ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80063dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e4:	f200 8088 	bhi.w	80064f8 <PathPlan+0x1250>

						if(pp->target_accurate[pp->point_count] == 1.0){
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	3346      	adds	r3, #70	; 0x46
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	edd3 7a00 	vldr	s15, [r3]
 80063fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063fe:	eef4 7a47 	vcmp.f32	s15, s14
 8006402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006406:	d13f      	bne.n	8006488 <PathPlan+0x11e0>
							if(pp->pp_lck_enb == 1){
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800640e:	2b01      	cmp	r3, #1
 8006410:	d172      	bne.n	80064f8 <PathPlan+0x1250>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8006418:	edd3 7a00 	vldr	s15, [r3]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8006422:	4619      	mov	r1, r3
 8006424:	eeb0 0a67 	vmov.f32	s0, s15
 8006428:	2004      	movs	r0, #4
 800642a:	f7fe f943 	bl	80046b4 <PIDGainSet>
								APPStop();
 800642e:	f003 fc39 	bl	8009ca4 <APPStop>
								LED4 = 1;
 8006432:	4a81      	ldr	r2, [pc, #516]	; (8006638 <PathPlan+0x1390>)
 8006434:	7853      	ldrb	r3, [r2, #1]
 8006436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643a:	7053      	strb	r3, [r2, #1]
								PIDDelayInit(&(pp->x));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fa88 	bl	8004958 <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fa82 	bl	8004958 <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe fa7c 	bl	8004958 <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
								pp->pp_crv_calc = 0;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_start=0;
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 8006476:	f36f 0300 	bfc	r3, #0, #1
 800647a:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
								pp->pp_lck_enb = 0;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8006486:	e037      	b.n	80064f8 <PathPlan+0x1250>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 800648e:	edd3 7a00 	vldr	s15, [r3]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8006498:	4619      	mov	r1, r3
 800649a:	eeb0 0a67 	vmov.f32	s0, s15
 800649e:	2004      	movs	r0, #4
 80064a0:	f7fe f908 	bl	80046b4 <PIDGainSet>
							APPStop();
 80064a4:	f003 fbfe 	bl	8009ca4 <APPStop>
							LED4 = 1;
 80064a8:	4a63      	ldr	r2, [pc, #396]	; (8006638 <PathPlan+0x1390>)
 80064aa:	7853      	ldrb	r3, [r2, #1]
 80064ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b0:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe fa4d 	bl	8004958 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe fa47 	bl	8004958 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe fa41 	bl	8004958 <PIDDelayInit>
							pp->crnt_crv_pt=0;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
							pp->pp_crv_calc = 0;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_start=0;
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 80064ec:	f36f 0300 	bfc	r3, #0, #1
 80064f0:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
 80064f4:	e000      	b.n	80064f8 <PathPlan+0x1250>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80064f6:	bf00      	nop

				}
			}


			if(pp->pp_start){
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	f001 866c 	beq.w	80081e2 <PathPlan+0x2f3a>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	3304      	adds	r3, #4
 800651c:	ed93 7a00 	vldr	s14, [r3]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	f503 7391 	add.w	r3, r3, #290	; 0x122
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	3304      	adds	r3, #4
 8006542:	ed93 7a00 	vldr	s14, [r3]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800654c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

				pp->rotate=0;
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 800655c:	f36f 03c3 	bfc	r3, #3, #1
 8006560:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800656a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800656e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006572:	d107      	bne.n	8006584 <PathPlan+0x12dc>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800657a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800657e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006582:	d021      	beq.n	80065c8 <PathPlan+0x1320>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800658a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800658e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006592:	d107      	bne.n	80065a4 <PathPlan+0x12fc>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800659a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800659e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a2:	d011      	beq.n	80065c8 <PathPlan+0x1320>
					pp->heading = atan2f(pp->dy, pp->dx);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80065b0:	eef0 0a47 	vmov.f32	s1, s14
 80065b4:	eeb0 0a67 	vmov.f32	s0, s15
 80065b8:	f014 ff68 	bl	801b48c <atan2f>
 80065bc:	eef0 7a40 	vmov.f32	s15, s0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 80065c6:	e048      	b.n	800665a <PathPlan+0x13b2>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80065ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d6:	d007      	beq.n	80065e8 <PathPlan+0x1340>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80065de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e6:	d10b      	bne.n	8006600 <PathPlan+0x1358>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80065ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f6:	d503      	bpl.n	8006600 <PathPlan+0x1358>
						pp->heading = 1.5708;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a10      	ldr	r2, [pc, #64]	; (800663c <PathPlan+0x1394>)
 80065fc:	659a      	str	r2, [r3, #88]	; 0x58
 80065fe:	e02c      	b.n	800665a <PathPlan+0x13b2>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006606:	eef5 7a40 	vcmp.f32	s15, #0.0
 800660a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660e:	d007      	beq.n	8006620 <PathPlan+0x1378>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661e:	d111      	bne.n	8006644 <PathPlan+0x139c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800662a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662e:	dd09      	ble.n	8006644 <PathPlan+0x139c>
						pp->heading = -1.5708;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a03      	ldr	r2, [pc, #12]	; (8006640 <PathPlan+0x1398>)
 8006634:	659a      	str	r2, [r3, #88]	; 0x58
 8006636:	e010      	b.n	800665a <PathPlan+0x13b2>
 8006638:	40021014 	.word	0x40021014
 800663c:	3fc90ff9 	.word	0x3fc90ff9
 8006640:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	659a      	str	r2, [r3, #88]	; 0x58
						pp->rotate = 1;
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 8006652:	f043 0308 	orr.w	r3, r3, #8
 8006656:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	3372      	adds	r3, #114	; 0x72
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	3304      	adds	r3, #4
 800666a:	ed93 8a00 	vldr	s16, [r3]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006674:	eeb0 0a67 	vmov.f32	s0, s15
 8006678:	f014 fe7e 	bl	801b378 <cosf>
 800667c:	eef0 7a40 	vmov.f32	s15, s0
 8006680:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	3372      	adds	r3, #114	; 0x72
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	3304      	adds	r3, #4
 800669a:	ed93 8a00 	vldr	s16, [r3]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80066a4:	eeb0 0a67 	vmov.f32	s0, s15
 80066a8:	f014 feae 	bl	801b408 <sinf>
 80066ac:	eef0 7a40 	vmov.f32	s15, s0
 80066b0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

				if(pp->rotate){
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <PathPlan+0x1432>
					pp->vx = pp->vy = 0.0;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	661a      	str	r2, [r3, #96]	; 0x60
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	65da      	str	r2, [r3, #92]	; 0x5c
				}

				PID(&(pp->x));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe f957 	bl	8004994 <PID>
				PID(&(pp->y));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe f951 	bl	8004994 <PID>
				PID(&(pp->z));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe f94b 	bl	8004994 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	ed93 8aae 	vldr	s16, [r3, #696]	; 0x2b8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	edd3 7a06 	vldr	s15, [r3, #24]
 800670a:	eeb0 0a67 	vmov.f32	s0, s15
 800670e:	f014 fe33 	bl	801b378 <cosf>
 8006712:	eef0 7a40 	vmov.f32	s15, s0
 8006716:	ee28 8a27 	vmul.f32	s16, s16, s15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	edd3 8aaf 	vldr	s17, [r3, #700]	; 0x2bc
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	edd3 7a06 	vldr	s15, [r3, #24]
 8006726:	eeb0 0a67 	vmov.f32	s0, s15
 800672a:	f014 fe6d 	bl	801b408 <sinf>
 800672e:	eef0 7a40 	vmov.f32	s15, s0
 8006732:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006736:	ee78 7a67 	vsub.f32	s15, s16, s15
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	ed93 8aae 	vldr	s16, [r3, #696]	; 0x2b8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	edd3 7a06 	vldr	s15, [r3, #24]
 800674c:	eeb0 0a67 	vmov.f32	s0, s15
 8006750:	f014 fe5a 	bl	801b408 <sinf>
 8006754:	eef0 7a40 	vmov.f32	s15, s0
 8006758:	ee28 8a27 	vmul.f32	s16, s16, s15
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	edd3 8aaf 	vldr	s17, [r3, #700]	; 0x2bc
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	edd3 7a06 	vldr	s15, [r3, #24]
 8006768:	eeb0 0a67 	vmov.f32	s0, s15
 800676c:	f014 fe04 	bl	801b378 <cosf>
 8006770:	eef0 7a40 	vmov.f32	s15, s0
 8006774:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006778:	ee78 7a27 	vadd.f32	s15, s16, s15
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	ed93 8a17 	vldr	s16, [r3, #92]	; 0x5c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	edd3 7a06 	vldr	s15, [r3, #24]
 800678e:	eeb0 0a67 	vmov.f32	s0, s15
 8006792:	f014 fdf1 	bl	801b378 <cosf>
 8006796:	eef0 7a40 	vmov.f32	s15, s0
 800679a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80067aa:	eeb0 0a67 	vmov.f32	s0, s15
 80067ae:	f014 fe2b 	bl	801b408 <sinf>
 80067b2:	eef0 7a40 	vmov.f32	s15, s0
 80067b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80067ba:	ee78 7a67 	vsub.f32	s15, s16, s15
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	ed93 8a17 	vldr	s16, [r3, #92]	; 0x5c
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80067d0:	eeb0 0a67 	vmov.f32	s0, s15
 80067d4:	f014 fe18 	bl	801b408 <sinf>
 80067d8:	eef0 7a40 	vmov.f32	s15, s0
 80067dc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80067ec:	eeb0 0a67 	vmov.f32	s0, s15
 80067f0:	f014 fdc2 	bl	801b378 <cosf>
 80067f4:	eef0 7a40 	vmov.f32	s15, s0
 80067f8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80067fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0

				if(pp->base_shape== fwd_omni){
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800680c:	2b02      	cmp	r3, #2
 800680e:	f040 8161 	bne.w	8006ad4 <PathPlan+0x182c>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800681e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006822:	ee17 0a90 	vmov	r0, s15
 8006826:	f7f9 fe8f 	bl	8000548 <__aeabi_f2d>
 800682a:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f7f9 fee1 	bl	80005f8 <__aeabi_dmul>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4614      	mov	r4, r2
 800683c:	461d      	mov	r5, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006844:	4618      	mov	r0, r3
 8006846:	f7f9 fe7f 	bl	8000548 <__aeabi_f2d>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7f9 fd19 	bl	8000288 <__aeabi_dsub>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	f7fa f9c3 	bl	8000be8 <__aeabi_d2f>
 8006862:	4602      	mov	r2, r0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800687a:	ee17 0a90 	vmov	r0, s15
 800687e:	f7f9 fe63 	bl	8000548 <__aeabi_f2d>
 8006882:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4614      	mov	r4, r2
 8006894:	461d      	mov	r5, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800689c:	4618      	mov	r0, r3
 800689e:	f7f9 fe53 	bl	8000548 <__aeabi_f2d>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7f9 fcef 	bl	800028c <__adddf3>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4610      	mov	r0, r2
 80068b4:	4619      	mov	r1, r3
 80068b6:	f7fa f997 	bl	8000be8 <__aeabi_d2f>
 80068ba:	4602      	mov	r2, r0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80068ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d2:	ee17 0a90 	vmov	r0, s15
 80068d6:	f7f9 fe37 	bl	8000548 <__aeabi_f2d>
 80068da:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f7f9 fe89 	bl	80005f8 <__aeabi_dmul>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4614      	mov	r4, r2
 80068ec:	461d      	mov	r5, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7f9 fe27 	bl	8000548 <__aeabi_f2d>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	f7f9 fcc3 	bl	800028c <__adddf3>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	f7fa f96b 	bl	8000be8 <__aeabi_d2f>
 8006912:	4602      	mov	r2, r0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800692a:	ee17 0a90 	vmov	r0, s15
 800692e:	f7f9 fe0b 	bl	8000548 <__aeabi_f2d>
 8006932:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f7f9 fe5d 	bl	80005f8 <__aeabi_dmul>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4614      	mov	r4, r2
 8006944:	461d      	mov	r5, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694c:	4618      	mov	r0, r3
 800694e:	f7f9 fdfb 	bl	8000548 <__aeabi_f2d>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7f9 fc95 	bl	8000288 <__aeabi_dsub>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7fa f93f 	bl	8000be8 <__aeabi_d2f>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 800697e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006982:	ee17 0a90 	vmov	r0, s15
 8006986:	f7f9 fddf 	bl	8000548 <__aeabi_f2d>
 800698a:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f7f9 fe31 	bl	80005f8 <__aeabi_dmul>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4614      	mov	r4, r2
 800699c:	461d      	mov	r5, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7f9 fdcf 	bl	8000548 <__aeabi_f2d>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	f7f9 fc6b 	bl	800028c <__adddf3>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4610      	mov	r0, r2
 80069bc:	4619      	mov	r1, r3
 80069be:	f7fa f913 	bl	8000be8 <__aeabi_d2f>
 80069c2:	4602      	mov	r2, r0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80069d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069da:	ee17 0a90 	vmov	r0, s15
 80069de:	f7f9 fdb3 	bl	8000548 <__aeabi_f2d>
 80069e2:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4614      	mov	r4, r2
 80069f4:	461d      	mov	r5, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7f9 fda3 	bl	8000548 <__aeabi_f2d>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7f9 fc3f 	bl	800028c <__adddf3>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	f7fa f8e7 	bl	8000be8 <__aeabi_d2f>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8006a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a32:	ee17 0a90 	vmov	r0, s15
 8006a36:	f7f9 fd87 	bl	8000548 <__aeabi_f2d>
 8006a3a:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 fdd9 	bl	80005f8 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	461d      	mov	r5, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7f9 fd77 	bl	8000548 <__aeabi_f2d>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7f9 fc13 	bl	800028c <__adddf3>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f7fa f8bb 	bl	8000be8 <__aeabi_d2f>
 8006a72:	4602      	mov	r2, r0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8006a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a8a:	ee17 0a90 	vmov	r0, s15
 8006a8e:	f7f9 fd5b 	bl	8000548 <__aeabi_f2d>
 8006a92:	a3f4      	add	r3, pc, #976	; (adr r3, 8006e64 <PathPlan+0x1bbc>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fdae 	bl	80005f8 <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4614      	mov	r4, r2
 8006aa2:	461d      	mov	r5, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7f9 fd4c 	bl	8000548 <__aeabi_f2d>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	f7f9 fbe8 	bl	800028c <__adddf3>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f7fa f890 	bl	8000be8 <__aeabi_d2f>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
				}

			}
		}
	}
}
 8006ad0:	f001 bb87 	b.w	80081e2 <PathPlan+0x2f3a>
				} else if(pp->base_shape==tri_omni){
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	f041 8381 	bne.w	80081e2 <PathPlan+0x2f3a>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7f9 fd2e 	bl	8000548 <__aeabi_f2d>
 8006aec:	a3d8      	add	r3, pc, #864	; (adr r3, 8006e50 <PathPlan+0x1ba8>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4614      	mov	r4, r2
 8006afc:	461d      	mov	r5, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7f9 fd1f 	bl	8000548 <__aeabi_f2d>
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	4bd2      	ldr	r3, [pc, #840]	; (8006e58 <PathPlan+0x1bb0>)
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 fbb4 	bl	8000288 <__aeabi_dsub>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	461d      	mov	r5, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7f9 fd0a 	bl	8000548 <__aeabi_f2d>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7f9 fba6 	bl	800028c <__adddf3>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	f7fa f84e 	bl	8000be8 <__aeabi_d2f>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7f9 fcf4 	bl	8000548 <__aeabi_f2d>
 8006b60:	a3bb      	add	r3, pc, #748	; (adr r3, 8006e50 <PathPlan+0x1ba8>)
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f7f9 fd47 	bl	80005f8 <__aeabi_dmul>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4614      	mov	r4, r2
 8006b70:	461d      	mov	r5, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7f9 fce5 	bl	8000548 <__aeabi_f2d>
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	4bb5      	ldr	r3, [pc, #724]	; (8006e58 <PathPlan+0x1bb0>)
 8006b84:	f7f9 fd38 	bl	80005f8 <__aeabi_dmul>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	4629      	mov	r1, r5
 8006b90:	f7f9 fb7c 	bl	800028c <__adddf3>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4614      	mov	r4, r2
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7f9 fcd0 	bl	8000548 <__aeabi_f2d>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fb6a 	bl	8000288 <__aeabi_dsub>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f7fa f814 	bl	8000be8 <__aeabi_d2f>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	ed93 7ab1 	vldr	s14, [r3, #708]	; 0x2c4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7f9 fcaf 	bl	8000548 <__aeabi_f2d>
 8006bea:	a399      	add	r3, pc, #612	; (adr r3, 8006e50 <PathPlan+0x1ba8>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fd02 	bl	80005f8 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fca0 	bl	8000548 <__aeabi_f2d>
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	4b92      	ldr	r3, [pc, #584]	; (8006e58 <PathPlan+0x1bb0>)
 8006c0e:	f7f9 fcf3 	bl	80005f8 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 fb35 	bl	8000288 <__aeabi_dsub>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4614      	mov	r4, r2
 8006c24:	461d      	mov	r5, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7f9 fc8b 	bl	8000548 <__aeabi_f2d>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	f7f9 fb27 	bl	800028c <__adddf3>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4610      	mov	r0, r2
 8006c44:	4619      	mov	r1, r3
 8006c46:	f7f9 ffcf 	bl	8000be8 <__aeabi_d2f>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7f9 fc75 	bl	8000548 <__aeabi_f2d>
 8006c5e:	a37c      	add	r3, pc, #496	; (adr r3, 8006e50 <PathPlan+0x1ba8>)
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	f7f9 fcc8 	bl	80005f8 <__aeabi_dmul>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	461d      	mov	r5, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7f9 fc66 	bl	8000548 <__aeabi_f2d>
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	4b75      	ldr	r3, [pc, #468]	; (8006e58 <PathPlan+0x1bb0>)
 8006c82:	f7f9 fcb9 	bl	80005f8 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f7f9 fafd 	bl	800028c <__adddf3>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4614      	mov	r4, r2
 8006c98:	461d      	mov	r5, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7f9 fc51 	bl	8000548 <__aeabi_f2d>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 faed 	bl	800028c <__adddf3>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7f9 ff95 	bl	8000be8 <__aeabi_d2f>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8006cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	edc3 7abb 	vstr	s15, [r3, #748]	; 0x2ec
}
 8006cdc:	f001 ba81 	b.w	80081e2 <PathPlan+0x2f3a>
			LED5=0;
 8006ce0:	4a5e      	ldr	r2, [pc, #376]	; (8006e5c <PathPlan+0x1bb4>)
 8006ce2:	7853      	ldrb	r3, [r2, #1]
 8006ce4:	f36f 0382 	bfc	r3, #2, #1
 8006ce8:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	3318      	adds	r3, #24
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	ed93 7a00 	vldr	s14, [r3]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	3328      	adds	r3, #40	; 0x28
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	ed93 7a00 	vldr	s14, [r3]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	3336      	adds	r3, #54	; 0x36
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	ed93 7a00 	vldr	s14, [r3]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006d5a:	eef0 7ae7 	vabs.f32	s15, s15
 8006d5e:	ee17 0a90 	vmov	r0, s15
 8006d62:	f7f9 fbf1 	bl	8000548 <__aeabi_f2d>
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006d70:	eef0 7ae7 	vabs.f32	s15, s15
 8006d74:	ee17 0a90 	vmov	r0, s15
 8006d78:	f7f9 fbe6 	bl	8000548 <__aeabi_f2d>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4620      	mov	r0, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	f7f9 fa82 	bl	800028c <__adddf3>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d98:	f7f9 fd58 	bl	800084c <__aeabi_ddiv>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4614      	mov	r4, r2
 8006da2:	461d      	mov	r5, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7f9 fbcc 	bl	8000548 <__aeabi_f2d>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fe90 	bl	8000adc <__aeabi_dcmplt>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d013      	beq.n	8006dea <PathPlan+0x1b42>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006dc8:	eeb0 7ae7 	vabs.f32	s14, s15
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8006dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dda:	d506      	bpl.n	8006dea <PathPlan+0x1b42>
				pp->pp_lck = 1.0;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8006de2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e005      	b.n	8006df6 <PathPlan+0x1b4e>
				pp->pp_lck = 0.0;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006dfc:	edd3 7a00 	vldr	s15, [r3]
 8006e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006e0e:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006e18:	edd3 7a00 	vldr	s15, [r3]
 8006e1c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006e60 <PathPlan+0x1bb8>
 8006e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	d820      	bhi.n	8006e6c <PathPlan+0x1bc4>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006e30:	ed93 7a00 	vldr	s14, [r3]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8006e3a:	edd3 7a00 	vldr	s15, [r3]
 8006e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006e48:	edc3 7a00 	vstr	s15, [r3]
 8006e4c:	e044      	b.n	8006ed8 <PathPlan+0x1c30>
 8006e4e:	bf00      	nop
 8006e50:	a1cac083 	.word	0xa1cac083
 8006e54:	3febb645 	.word	0x3febb645
 8006e58:	3fe00000 	.word	0x3fe00000
 8006e5c:	40020c14 	.word	0x40020c14
 8006e60:	42700000 	.word	0x42700000
 8006e64:	dbf8b9bb 	.word	0xdbf8b9bb
 8006e68:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006e72:	edd3 6a00 	vldr	s13, [r3]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006e7c:	ed93 7a00 	vldr	s14, [r3]
 8006e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006e8a:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7f9 fb56 	bl	8000548 <__aeabi_f2d>
 8006e9c:	f60f 43a0 	addw	r3, pc, #3232	; 0xca0
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f7f9 fe2e 	bl	8000b04 <__aeabi_dcmpge>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <PathPlan+0x1c10>
					pp->pp_lck_enb = 1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8006eb6:	e003      	b.n	8006ec0 <PathPlan+0x1c18>
					pp->pp_lck_enb = 0;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
				pp->pp_lck_count = 0.0;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006ede:	eef0 7ae7 	vabs.f32	s15, s15
 8006ee2:	ee17 0a90 	vmov	r0, s15
 8006ee6:	f7f9 fb2f 	bl	8000548 <__aeabi_f2d>
 8006eea:	4604      	mov	r4, r0
 8006eec:	460d      	mov	r5, r1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006ef4:	eef0 7ae7 	vabs.f32	s15, s15
 8006ef8:	ee17 0a90 	vmov	r0, s15
 8006efc:	f7f9 fb24 	bl	8000548 <__aeabi_f2d>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f7f9 f9c0 	bl	800028c <__adddf3>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4610      	mov	r0, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f1c:	f7f9 fc96 	bl	800084c <__aeabi_ddiv>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7f9 fb0a 	bl	8000548 <__aeabi_f2d>
 8006f34:	4602      	mov	r2, r0
 8006f36:	460b      	mov	r3, r1
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 fdce 	bl	8000adc <__aeabi_dcmplt>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 855c 	beq.w	8007a00 <PathPlan+0x2758>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006f4e:	eeb0 7ae7 	vabs.f32	s14, s15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 8006f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f60:	f140 854e 	bpl.w	8007a00 <PathPlan+0x2758>
				if(pp->point_count < (pp->target_point - 2)){
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f70:	3b02      	subs	r3, #2
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f280 825c 	bge.w	8007430 <PathPlan+0x2188>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	3346      	adds	r3, #70	; 0x46
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	edd3 7a00 	vldr	s15, [r3]
 8006f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f8e:	eef4 7a47 	vcmp.f32	s15, s14
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	f040 812b 	bne.w	80071f0 <PathPlan+0x1f48>
						if(pp->pp_lck_enb == 1){
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	f040 852d 	bne.w	8007a00 <PathPlan+0x2758>
							pp->point_count++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	3318      	adds	r3, #24
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	ed93 7a00 	vldr	s14, [r3]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	3328      	adds	r3, #40	; 0x28
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	ed93 7a00 	vldr	s14, [r3]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	3336      	adds	r3, #54	; 0x36
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	3304      	adds	r3, #4
 800700a:	ed93 7a00 	vldr	s14, [r3]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	edd3 7a04 	vldr	s15, [r3, #16]
 8007014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							if(pp->target_x[pp->point_count]-pp->real_x){
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	3318      	adds	r3, #24
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	3304      	adds	r3, #4
 800702e:	ed93 7a00 	vldr	s14, [r3]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800703c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007044:	d01e      	beq.n	8007084 <PathPlan+0x1ddc>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	3318      	adds	r3, #24
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	3304      	adds	r3, #4
 8007056:	ed93 7a00 	vldr	s14, [r3]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007064:	eef0 7ae7 	vabs.f32	s15, s15
 8007068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007076:	4619      	mov	r1, r3
 8007078:	eeb0 0a47 	vmov.f32	s0, s14
 800707c:	2002      	movs	r0, #2
 800707e:	f7fd fb19 	bl	80046b4 <PIDGainSet>
 8007082:	e008      	b.n	8007096 <PathPlan+0x1dee>
								PIDGainSet(KE,1.0,&(pp->x));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800708a:	4619      	mov	r1, r3
 800708c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007090:	2002      	movs	r0, #2
 8007092:	f7fd fb0f 	bl	80046b4 <PIDGainSet>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	3328      	adds	r3, #40	; 0x28
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	ed93 7a00 	vldr	s14, [r3]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80070ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ba:	d01d      	beq.n	80070f8 <PathPlan+0x1e50>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	3328      	adds	r3, #40	; 0x28
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	ed93 7a00 	vldr	s14, [r3]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80070d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070d8:	eef0 7ae7 	vabs.f32	s15, s15
 80070dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80070ea:	4619      	mov	r1, r3
 80070ec:	eeb0 0a47 	vmov.f32	s0, s14
 80070f0:	2002      	movs	r0, #2
 80070f2:	f7fd fadf 	bl	80046b4 <PIDGainSet>
 80070f6:	e008      	b.n	800710a <PathPlan+0x1e62>
								PIDGainSet(KE,1.0,&(pp->y));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80070fe:	4619      	mov	r1, r3
 8007100:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007104:	2002      	movs	r0, #2
 8007106:	f7fd fad5 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007116:	4619      	mov	r1, r3
 8007118:	eeb0 0a67 	vmov.f32	s0, s15
 800711c:	2004      	movs	r0, #4
 800711e:	f7fd fac9 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800712e:	4619      	mov	r1, r3
 8007130:	eeb0 0a67 	vmov.f32	s0, s15
 8007134:	2004      	movs	r0, #4
 8007136:	f7fd fabd 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007146:	4619      	mov	r1, r3
 8007148:	eeb0 0a67 	vmov.f32	s0, s15
 800714c:	2005      	movs	r0, #5
 800714e:	f7fd fab1 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800715e:	4619      	mov	r1, r3
 8007160:	eeb0 0a67 	vmov.f32	s0, s15
 8007164:	2005      	movs	r0, #5
 8007166:	f7fd faa5 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007176:	4619      	mov	r1, r3
 8007178:	eeb0 0a67 	vmov.f32	s0, s15
 800717c:	2006      	movs	r0, #6
 800717e:	f7fd fa99 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800718e:	4619      	mov	r1, r3
 8007190:	eeb0 0a67 	vmov.f32	s0, s15
 8007194:	2006      	movs	r0, #6
 8007196:	f7fd fa8d 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	3384      	adds	r3, #132	; 0x84
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	edd3 7a00 	vldr	s15, [r3]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80071b2:	4619      	mov	r1, r3
 80071b4:	eeb0 0a67 	vmov.f32	s0, s15
 80071b8:	2003      	movs	r0, #3
 80071ba:	f7fd fa7b 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	3392      	adds	r3, #146	; 0x92
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	3304      	adds	r3, #4
 80071ce:	edd3 7a00 	vldr	s15, [r3]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80071d8:	4619      	mov	r1, r3
 80071da:	eeb0 0a67 	vmov.f32	s0, s15
 80071de:	2003      	movs	r0, #3
 80071e0:	f7fd fa68 	bl	80046b4 <PIDGainSet>
							pp->pp_lck_enb = 0;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 80071ec:	f000 bc08 	b.w	8007a00 <PathPlan+0x2758>
						pp->point_count++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	3318      	adds	r3, #24
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	ed93 7a00 	vldr	s14, [r3]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	3328      	adds	r3, #40	; 0x28
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	ed93 7a00 	vldr	s14, [r3]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800723a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	3336      	adds	r3, #54	; 0x36
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	3304      	adds	r3, #4
 8007254:	ed93 7a00 	vldr	s14, [r3]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	edd3 7a04 	vldr	s15, [r3, #16]
 800725e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	3318      	adds	r3, #24
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	ed93 7a00 	vldr	s14, [r3]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007286:	eef5 7a40 	vcmp.f32	s15, #0.0
 800728a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728e:	d01e      	beq.n	80072ce <PathPlan+0x2026>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	3318      	adds	r3, #24
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	3304      	adds	r3, #4
 80072a0:	ed93 7a00 	vldr	s14, [r3]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80072aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072ae:	eef0 7ae7 	vabs.f32	s15, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80072c0:	4619      	mov	r1, r3
 80072c2:	eeb0 0a47 	vmov.f32	s0, s14
 80072c6:	2002      	movs	r0, #2
 80072c8:	f7fd f9f4 	bl	80046b4 <PIDGainSet>
 80072cc:	e008      	b.n	80072e0 <PathPlan+0x2038>
							PIDGainSet(KE,1.0,&(pp->x));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80072d4:	4619      	mov	r1, r3
 80072d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072da:	2002      	movs	r0, #2
 80072dc:	f7fd f9ea 	bl	80046b4 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	3328      	adds	r3, #40	; 0x28
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	ed93 7a00 	vldr	s14, [r3]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80072f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007304:	d01d      	beq.n	8007342 <PathPlan+0x209a>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	3328      	adds	r3, #40	; 0x28
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	ed93 7a00 	vldr	s14, [r3]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800731e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007322:	eef0 7ae7 	vabs.f32	s15, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007334:	4619      	mov	r1, r3
 8007336:	eeb0 0a47 	vmov.f32	s0, s14
 800733a:	2002      	movs	r0, #2
 800733c:	f7fd f9ba 	bl	80046b4 <PIDGainSet>
 8007340:	e008      	b.n	8007354 <PathPlan+0x20ac>
							PIDGainSet(KE,1.0,&(pp->y));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007348:	4619      	mov	r1, r3
 800734a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800734e:	2002      	movs	r0, #2
 8007350:	f7fd f9b0 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KP,pp->kp[0],&(pp->x));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007360:	4619      	mov	r1, r3
 8007362:	eeb0 0a67 	vmov.f32	s0, s15
 8007366:	2004      	movs	r0, #4
 8007368:	f7fd f9a4 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KP,pp->kp[0],&(pp->y));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007378:	4619      	mov	r1, r3
 800737a:	eeb0 0a67 	vmov.f32	s0, s15
 800737e:	2004      	movs	r0, #4
 8007380:	f7fd f998 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KI,pp->ki[0],&(pp->x));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007390:	4619      	mov	r1, r3
 8007392:	eeb0 0a67 	vmov.f32	s0, s15
 8007396:	2005      	movs	r0, #5
 8007398:	f7fd f98c 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KI,pp->ki[0],&(pp->y));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	edd3 7aa4 	vldr	s15, [r3, #656]	; 0x290
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80073a8:	4619      	mov	r1, r3
 80073aa:	eeb0 0a67 	vmov.f32	s0, s15
 80073ae:	2005      	movs	r0, #5
 80073b0:	f7fd f980 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KD,pp->kd[0],&(pp->x));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80073c0:	4619      	mov	r1, r3
 80073c2:	eeb0 0a67 	vmov.f32	s0, s15
 80073c6:	2006      	movs	r0, #6
 80073c8:	f7fd f974 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KD,pp->kd[0],&(pp->y));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	edd3 7aa6 	vldr	s15, [r3, #664]	; 0x298
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80073d8:	4619      	mov	r1, r3
 80073da:	eeb0 0a67 	vmov.f32	s0, s15
 80073de:	2006      	movs	r0, #6
 80073e0:	f7fd f968 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	3384      	adds	r3, #132	; 0x84
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	edd3 7a00 	vldr	s15, [r3]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80073fc:	4619      	mov	r1, r3
 80073fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007402:	2003      	movs	r0, #3
 8007404:	f7fd f956 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	3392      	adds	r3, #146	; 0x92
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	3304      	adds	r3, #4
 8007418:	edd3 7a00 	vldr	s15, [r3]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007422:	4619      	mov	r1, r3
 8007424:	eeb0 0a67 	vmov.f32	s0, s15
 8007428:	2003      	movs	r0, #3
 800742a:	f7fd f943 	bl	80046b4 <PIDGainSet>
 800742e:	e2e7      	b.n	8007a00 <PathPlan+0x2758>
				} else if(pp->point_count == (pp->target_point - 2)){
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800743c:	3b02      	subs	r3, #2
 800743e:	429a      	cmp	r2, r3
 8007440:	f040 825b 	bne.w	80078fa <PathPlan+0x2652>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	3346      	adds	r3, #70	; 0x46
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	edd3 7a00 	vldr	s15, [r3]
 8007456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800745a:	eef4 7a47 	vcmp.f32	s15, s14
 800745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007462:	f040 812a 	bne.w	80076ba <PathPlan+0x2412>
						if(pp->pp_lck_enb == 1){
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800746c:	2b01      	cmp	r3, #1
 800746e:	f040 82c7 	bne.w	8007a00 <PathPlan+0x2758>
							pp->point_count++;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	3318      	adds	r3, #24
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	3304      	adds	r3, #4
 8007490:	ed93 7a00 	vldr	s14, [r3]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800749a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	3328      	adds	r3, #40	; 0x28
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	ed93 7a00 	vldr	s14, [r3]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80074bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	3336      	adds	r3, #54	; 0x36
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	3304      	adds	r3, #4
 80074d6:	ed93 7a00 	vldr	s14, [r3]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80074e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							if(pp->target_x[pp->point_count]-pp->real_x){
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	3318      	adds	r3, #24
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	3304      	adds	r3, #4
 80074fa:	ed93 7a00 	vldr	s14, [r3]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007508:	eef5 7a40 	vcmp.f32	s15, #0.0
 800750c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007510:	d01e      	beq.n	8007550 <PathPlan+0x22a8>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	3318      	adds	r3, #24
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	3304      	adds	r3, #4
 8007522:	ed93 7a00 	vldr	s14, [r3]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800752c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007530:	eef0 7ae7 	vabs.f32	s15, s15
 8007534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007542:	4619      	mov	r1, r3
 8007544:	eeb0 0a47 	vmov.f32	s0, s14
 8007548:	2002      	movs	r0, #2
 800754a:	f7fd f8b3 	bl	80046b4 <PIDGainSet>
 800754e:	e008      	b.n	8007562 <PathPlan+0x22ba>
								PIDGainSet(KE,1.0,&pp->x);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007556:	4619      	mov	r1, r3
 8007558:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800755c:	2002      	movs	r0, #2
 800755e:	f7fd f8a9 	bl	80046b4 <PIDGainSet>
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	3328      	adds	r3, #40	; 0x28
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	ed93 7a00 	vldr	s14, [r3]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800757a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800757e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007586:	d01d      	beq.n	80075c4 <PathPlan+0x231c>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	3328      	adds	r3, #40	; 0x28
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	ed93 7a00 	vldr	s14, [r3]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80075a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075a4:	eef0 7ae7 	vabs.f32	s15, s15
 80075a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80075b6:	4619      	mov	r1, r3
 80075b8:	eeb0 0a47 	vmov.f32	s0, s14
 80075bc:	2002      	movs	r0, #2
 80075be:	f7fd f879 	bl	80046b4 <PIDGainSet>
 80075c2:	e008      	b.n	80075d6 <PathPlan+0x232e>
								PIDGainSet(KE,1.0,&(pp->y));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80075ca:	4619      	mov	r1, r3
 80075cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80075d0:	2002      	movs	r0, #2
 80075d2:	f7fd f86f 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KP,pp->kp[1],&(pp->x));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80075e2:	4619      	mov	r1, r3
 80075e4:	eeb0 0a67 	vmov.f32	s0, s15
 80075e8:	2004      	movs	r0, #4
 80075ea:	f7fd f863 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KP,pp->kp[1],&(pp->y));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80075fa:	4619      	mov	r1, r3
 80075fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007600:	2004      	movs	r0, #4
 8007602:	f7fd f857 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KI,pp->ki[1],&(pp->x));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007612:	4619      	mov	r1, r3
 8007614:	eeb0 0a67 	vmov.f32	s0, s15
 8007618:	2005      	movs	r0, #5
 800761a:	f7fd f84b 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KI,pp->ki[1],&(pp->y));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800762a:	4619      	mov	r1, r3
 800762c:	eeb0 0a67 	vmov.f32	s0, s15
 8007630:	2005      	movs	r0, #5
 8007632:	f7fd f83f 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KD,pp->kd[1],&(pp->x));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007642:	4619      	mov	r1, r3
 8007644:	eeb0 0a67 	vmov.f32	s0, s15
 8007648:	2006      	movs	r0, #6
 800764a:	f7fd f833 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KD,pp->kd[1],&(pp->y));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800765a:	4619      	mov	r1, r3
 800765c:	eeb0 0a67 	vmov.f32	s0, s15
 8007660:	2006      	movs	r0, #6
 8007662:	f7fd f827 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	3384      	adds	r3, #132	; 0x84
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	edd3 7a00 	vldr	s15, [r3]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800767e:	4619      	mov	r1, r3
 8007680:	eeb0 0a67 	vmov.f32	s0, s15
 8007684:	2003      	movs	r0, #3
 8007686:	f7fd f815 	bl	80046b4 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	3392      	adds	r3, #146	; 0x92
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	3304      	adds	r3, #4
 800769a:	edd3 7a00 	vldr	s15, [r3]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80076a4:	4619      	mov	r1, r3
 80076a6:	eeb0 0a67 	vmov.f32	s0, s15
 80076aa:	2003      	movs	r0, #3
 80076ac:	f7fd f802 	bl	80046b4 <PIDGainSet>
							pp->pp_lck_enb = 0;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 80076b8:	e1a2      	b.n	8007a00 <PathPlan+0x2758>
						pp->point_count++;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	3318      	adds	r3, #24
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	3304      	adds	r3, #4
 80076d8:	ed93 7a00 	vldr	s14, [r3]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80076e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	edc3 7aab 	vstr	s15, [r3, #684]	; 0x2ac
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	3328      	adds	r3, #40	; 0x28
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	ed93 7a00 	vldr	s14, [r3]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	3336      	adds	r3, #54	; 0x36
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	3304      	adds	r3, #4
 800771e:	ed93 7a00 	vldr	s14, [r3]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	edd3 7a04 	vldr	s15, [r3, #16]
 8007728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	3318      	adds	r3, #24
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	3304      	adds	r3, #4
 8007742:	ed93 7a00 	vldr	s14, [r3]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800774c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007750:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007758:	d01e      	beq.n	8007798 <PathPlan+0x24f0>
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	3318      	adds	r3, #24
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	3304      	adds	r3, #4
 800776a:	ed93 7a00 	vldr	s14, [r3]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007778:	eef0 7ae7 	vabs.f32	s15, s15
 800777c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800778a:	4619      	mov	r1, r3
 800778c:	eeb0 0a47 	vmov.f32	s0, s14
 8007790:	2002      	movs	r0, #2
 8007792:	f7fc ff8f 	bl	80046b4 <PIDGainSet>
 8007796:	e008      	b.n	80077aa <PathPlan+0x2502>
							PIDGainSet(KE,1.0,&pp->x);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800779e:	4619      	mov	r1, r3
 80077a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80077a4:	2002      	movs	r0, #2
 80077a6:	f7fc ff85 	bl	80046b4 <PIDGainSet>
						if(pp->target_y[pp->point_count]-pp->real_y){
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	3328      	adds	r3, #40	; 0x28
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	ed93 7a00 	vldr	s14, [r3]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80077c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80077ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ce:	d01d      	beq.n	800780c <PathPlan+0x2564>
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	3328      	adds	r3, #40	; 0x28
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	ed93 7a00 	vldr	s14, [r3]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80077e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077ec:	eef0 7ae7 	vabs.f32	s15, s15
 80077f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80077fe:	4619      	mov	r1, r3
 8007800:	eeb0 0a47 	vmov.f32	s0, s14
 8007804:	2002      	movs	r0, #2
 8007806:	f7fc ff55 	bl	80046b4 <PIDGainSet>
 800780a:	e008      	b.n	800781e <PathPlan+0x2576>
							PIDGainSet(KE,1.0,&(pp->y));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007812:	4619      	mov	r1, r3
 8007814:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007818:	2002      	movs	r0, #2
 800781a:	f7fc ff4b 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KP,pp->kp[1],&(pp->x));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800782a:	4619      	mov	r1, r3
 800782c:	eeb0 0a67 	vmov.f32	s0, s15
 8007830:	2004      	movs	r0, #4
 8007832:	f7fc ff3f 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KP,pp->kp[1],&(pp->y));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007842:	4619      	mov	r1, r3
 8007844:	eeb0 0a67 	vmov.f32	s0, s15
 8007848:	2004      	movs	r0, #4
 800784a:	f7fc ff33 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KI,pp->ki[1],&(pp->x));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800785a:	4619      	mov	r1, r3
 800785c:	eeb0 0a67 	vmov.f32	s0, s15
 8007860:	2005      	movs	r0, #5
 8007862:	f7fc ff27 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KI,pp->ki[1],&(pp->y));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007872:	4619      	mov	r1, r3
 8007874:	eeb0 0a67 	vmov.f32	s0, s15
 8007878:	2005      	movs	r0, #5
 800787a:	f7fc ff1b 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KD,pp->kd[1],&(pp->x));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800788a:	4619      	mov	r1, r3
 800788c:	eeb0 0a67 	vmov.f32	s0, s15
 8007890:	2006      	movs	r0, #6
 8007892:	f7fc ff0f 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KD,pp->kd[1],&(pp->y));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80078a2:	4619      	mov	r1, r3
 80078a4:	eeb0 0a67 	vmov.f32	s0, s15
 80078a8:	2006      	movs	r0, #6
 80078aa:	f7fc ff03 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	3384      	adds	r3, #132	; 0x84
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	edd3 7a00 	vldr	s15, [r3]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80078c6:	4619      	mov	r1, r3
 80078c8:	eeb0 0a67 	vmov.f32	s0, s15
 80078cc:	2003      	movs	r0, #3
 80078ce:	f7fc fef1 	bl	80046b4 <PIDGainSet>
						PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	3392      	adds	r3, #146	; 0x92
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	edd3 7a00 	vldr	s15, [r3]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80078ec:	4619      	mov	r1, r3
 80078ee:	eeb0 0a67 	vmov.f32	s0, s15
 80078f2:	2003      	movs	r0, #3
 80078f4:	f7fc fede 	bl	80046b4 <PIDGainSet>
 80078f8:	e082      	b.n	8007a00 <PathPlan+0x2758>
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8007900:	eeb0 7ae7 	vabs.f32	s14, s15
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 800790a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	d575      	bpl.n	8007a00 <PathPlan+0x2758>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 800791a:	eeb0 7ae7 	vabs.f32	s14, s15
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792c:	d568      	bpl.n	8007a00 <PathPlan+0x2758>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8007942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794a:	d859      	bhi.n	8007a00 <PathPlan+0x2758>
					if(pp->target_accurate[pp->point_count] == 1.0){
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	3346      	adds	r3, #70	; 0x46
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	edd3 7a00 	vldr	s15, [r3]
 800795e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007962:	eef4 7a47 	vcmp.f32	s15, s14
 8007966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796a:	d129      	bne.n	80079c0 <PathPlan+0x2718>
						if(pp->pp_lck_enb == 1){
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8007972:	2b01      	cmp	r3, #1
 8007974:	d144      	bne.n	8007a00 <PathPlan+0x2758>
							APPStop();
 8007976:	f002 f995 	bl	8009ca4 <APPStop>
							LED4 = 1;
 800797a:	4a73      	ldr	r2, [pc, #460]	; (8007b48 <PathPlan+0x28a0>)
 800797c:	7853      	ldrb	r3, [r2, #1]
 800797e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007982:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 800798a:	4618      	mov	r0, r3
 800798c:	f7fc ffe4 	bl	8004958 <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007996:	4618      	mov	r0, r3
 8007998:	f7fc ffde 	bl	8004958 <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fc ffd8 	bl	8004958 <PIDDelayInit>
							pp->pp_start=0;
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 80079ae:	f36f 0300 	bfc	r3, #0, #1
 80079b2:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
							pp->pp_lck_enb = 0;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 80079be:	e01f      	b.n	8007a00 <PathPlan+0x2758>
						APPStop();
 80079c0:	f002 f970 	bl	8009ca4 <APPStop>
						LED4 = 1;
 80079c4:	4a60      	ldr	r2, [pc, #384]	; (8007b48 <PathPlan+0x28a0>)
 80079c6:	7853      	ldrb	r3, [r2, #1]
 80079c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079cc:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fc ffbf 	bl	8004958 <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fc ffb9 	bl	8004958 <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fc ffb3 	bl	8004958 <PIDDelayInit>
						pp->pp_start=0;
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 80079f8:	f36f 0300 	bfc	r3, #0, #1
 80079fc:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
			if(pp->pp_start){
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 83e8 	beq.w	80081e2 <PathPlan+0x2f3a>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	3318      	adds	r3, #24
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	3304      	adds	r3, #4
 8007a22:	ed93 7a00 	vldr	s14, [r3]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	3328      	adds	r3, #40	; 0x28
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	ed93 7a00 	vldr	s14, [r3]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->rotate=0;
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 8007a5e:	f36f 03c3 	bfc	r3, #3, #1
 8007a62:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007a6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a74:	d107      	bne.n	8007a86 <PathPlan+0x27de>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007a7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a84:	d021      	beq.n	8007aca <PathPlan+0x2822>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a94:	d107      	bne.n	8007aa6 <PathPlan+0x27fe>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	d011      	beq.n	8007aca <PathPlan+0x2822>
					pp->heading = atan2f(pp->dy, pp->dx);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007ab2:	eef0 0a47 	vmov.f32	s1, s14
 8007ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8007aba:	f013 fce7 	bl	801b48c <atan2f>
 8007abe:	eef0 7a40 	vmov.f32	s15, s0
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8007ac8:	e04f      	b.n	8007b6a <PathPlan+0x28c2>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007ad0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	d007      	beq.n	8007aea <PathPlan+0x2842>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007ae0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae8:	d10b      	bne.n	8007b02 <PathPlan+0x285a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	d503      	bpl.n	8007b02 <PathPlan+0x285a>
						pp->heading = 1.5708;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <PathPlan+0x28a4>)
 8007afe:	659a      	str	r2, [r3, #88]	; 0x58
 8007b00:	e033      	b.n	8007b6a <PathPlan+0x28c2>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007b08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b10:	d007      	beq.n	8007b22 <PathPlan+0x287a>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007b18:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	d118      	bne.n	8007b54 <PathPlan+0x28ac>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b30:	dd10      	ble.n	8007b54 <PathPlan+0x28ac>
						pp->heading = -1.5708;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a06      	ldr	r2, [pc, #24]	; (8007b50 <PathPlan+0x28a8>)
 8007b36:	659a      	str	r2, [r3, #88]	; 0x58
 8007b38:	e017      	b.n	8007b6a <PathPlan+0x28c2>
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w
 8007b40:	66666666 	.word	0x66666666
 8007b44:	3fee6666 	.word	0x3fee6666
 8007b48:	40021014 	.word	0x40021014
 8007b4c:	3fc90ff9 	.word	0x3fc90ff9
 8007b50:	bfc90ff9 	.word	0xbfc90ff9
						pp->heading = 0.0;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f04f 0200 	mov.w	r2, #0
 8007b5a:	659a      	str	r2, [r3, #88]	; 0x58
						pp->rotate = 1;
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	f892 3530 	ldrb.w	r3, [r2, #1328]	; 0x530
 8007b62:	f043 0308 	orr.w	r3, r3, #8
 8007b66:	f882 3530 	strb.w	r3, [r2, #1328]	; 0x530
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	3372      	adds	r3, #114	; 0x72
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	3304      	adds	r3, #4
 8007b7a:	ed93 8a00 	vldr	s16, [r3]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007b84:	eeb0 0a67 	vmov.f32	s0, s15
 8007b88:	f013 fbf6 	bl	801b378 <cosf>
 8007b8c:	eef0 7a40 	vmov.f32	s15, s0
 8007b90:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	3372      	adds	r3, #114	; 0x72
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3304      	adds	r3, #4
 8007baa:	ed93 8a00 	vldr	s16, [r3]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb8:	f013 fc26 	bl	801b408 <sinf>
 8007bbc:	eef0 7a40 	vmov.f32	s15, s0
 8007bc0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				if(pp->rotate){
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <PathPlan+0x2942>
					pp->vx = pp->vy = 0.0;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f04f 0200 	mov.w	r2, #0
 8007be0:	661a      	str	r2, [r3, #96]	; 0x60
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	65da      	str	r2, [r3, #92]	; 0x5c
				PID(&(pp->x));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fc fecf 	bl	8004994 <PID>
				PID(&(pp->y));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fc fec9 	bl	8004994 <PID>
				PID(&(pp->z));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 736d 	add.w	r3, r3, #948	; 0x3b4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fc fec3 	bl	8004994 <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	ed93 8aae 	vldr	s16, [r3, #696]	; 0x2b8
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c1e:	f013 fbab 	bl	801b378 <cosf>
 8007c22:	eef0 7a40 	vmov.f32	s15, s0
 8007c26:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	edd3 8aaf 	vldr	s17, [r3, #700]	; 0x2bc
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c36:	eeb0 0a67 	vmov.f32	s0, s15
 8007c3a:	f013 fbe5 	bl	801b408 <sinf>
 8007c3e:	eef0 7a40 	vmov.f32	s15, s0
 8007c42:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007c46:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	ed93 8aae 	vldr	s16, [r3, #696]	; 0x2b8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c60:	f013 fbd2 	bl	801b408 <sinf>
 8007c64:	eef0 7a40 	vmov.f32	s15, s0
 8007c68:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	edd3 8aaf 	vldr	s17, [r3, #700]	; 0x2bc
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c78:	eeb0 0a67 	vmov.f32	s0, s15
 8007c7c:	f013 fb7c 	bl	801b378 <cosf>
 8007c80:	eef0 7a40 	vmov.f32	s15, s0
 8007c84:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007c88:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	ed93 8a17 	vldr	s16, [r3, #92]	; 0x5c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007ca2:	f013 fb69 	bl	801b378 <cosf>
 8007ca6:	eef0 7a40 	vmov.f32	s15, s0
 8007caa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cba:	eeb0 0a67 	vmov.f32	s0, s15
 8007cbe:	f013 fba3 	bl	801b408 <sinf>
 8007cc2:	eef0 7a40 	vmov.f32	s15, s0
 8007cc6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007cca:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	ed93 8a17 	vldr	s16, [r3, #92]	; 0x5c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ce4:	f013 fb90 	bl	801b408 <sinf>
 8007ce8:	eef0 7a40 	vmov.f32	s15, s0
 8007cec:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8007d00:	f013 fb3a 	bl	801b378 <cosf>
 8007d04:	eef0 7a40 	vmov.f32	s15, s0
 8007d08:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007d0c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				if(pp->base_shape== fwd_omni){
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	f040 815c 	bne.w	8007fda <PathPlan+0x2d32>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d32:	ee17 0a90 	vmov	r0, s15
 8007d36:	f7f8 fc07 	bl	8000548 <__aeabi_f2d>
 8007d3a:	f20f 43c0 	addw	r3, pc, #1216	; 0x4c0
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f7f8 fc59 	bl	80005f8 <__aeabi_dmul>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	461d      	mov	r5, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7f8 fbf7 	bl	8000548 <__aeabi_f2d>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f8 fa91 	bl	8000288 <__aeabi_dsub>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	f7f8 ff3b 	bl	8000be8 <__aeabi_d2f>
 8007d72:	4602      	mov	r2, r0
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d8a:	ee17 0a90 	vmov	r0, s15
 8007d8e:	f7f8 fbdb 	bl	8000548 <__aeabi_f2d>
 8007d92:	f20f 4368 	addw	r3, pc, #1128	; 0x468
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fc2d 	bl	80005f8 <__aeabi_dmul>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4614      	mov	r4, r2
 8007da4:	461d      	mov	r5, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7f8 fbcb 	bl	8000548 <__aeabi_f2d>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fa67 	bl	800028c <__adddf3>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f7f8 ff0f 	bl	8000be8 <__aeabi_d2f>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007de2:	ee17 0a90 	vmov	r0, s15
 8007de6:	f7f8 fbaf 	bl	8000548 <__aeabi_f2d>
 8007dea:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fc01 	bl	80005f8 <__aeabi_dmul>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4614      	mov	r4, r2
 8007dfc:	461d      	mov	r5, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7f8 fb9f 	bl	8000548 <__aeabi_f2d>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fa3b 	bl	800028c <__adddf3>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f7f8 fee3 	bl	8000be8 <__aeabi_d2f>
 8007e22:	4602      	mov	r2, r0
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e3a:	ee17 0a90 	vmov	r0, s15
 8007e3e:	f7f8 fb83 	bl	8000548 <__aeabi_f2d>
 8007e42:	a3ee      	add	r3, pc, #952	; (adr r3, 80081fc <PathPlan+0x2f54>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	461d      	mov	r5, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7f8 fb74 	bl	8000548 <__aeabi_f2d>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fa0e 	bl	8000288 <__aeabi_dsub>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4610      	mov	r0, r2
 8007e72:	4619      	mov	r1, r3
 8007e74:	f7f8 feb8 	bl	8000be8 <__aeabi_d2f>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8007e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e90:	ee17 0a90 	vmov	r0, s15
 8007e94:	f7f8 fb58 	bl	8000548 <__aeabi_f2d>
 8007e98:	a3d8      	add	r3, pc, #864	; (adr r3, 80081fc <PathPlan+0x2f54>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f7f8 fbab 	bl	80005f8 <__aeabi_dmul>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4614      	mov	r4, r2
 8007ea8:	461d      	mov	r5, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7f8 fb49 	bl	8000548 <__aeabi_f2d>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f7f8 f9e5 	bl	800028c <__adddf3>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f7f8 fe8d 	bl	8000be8 <__aeabi_d2f>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8007ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ee6:	ee17 0a90 	vmov	r0, s15
 8007eea:	f7f8 fb2d 	bl	8000548 <__aeabi_f2d>
 8007eee:	a3c3      	add	r3, pc, #780	; (adr r3, 80081fc <PathPlan+0x2f54>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4614      	mov	r4, r2
 8007efe:	461d      	mov	r5, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7f8 fb1e 	bl	8000548 <__aeabi_f2d>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 f9ba 	bl	800028c <__adddf3>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4619      	mov	r1, r3
 8007f20:	f7f8 fe62 	bl	8000be8 <__aeabi_d2f>
 8007f24:	4602      	mov	r2, r0
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8007f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f3c:	ee17 0a90 	vmov	r0, s15
 8007f40:	f7f8 fb02 	bl	8000548 <__aeabi_f2d>
 8007f44:	a3ad      	add	r3, pc, #692	; (adr r3, 80081fc <PathPlan+0x2f54>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 fb55 	bl	80005f8 <__aeabi_dmul>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4614      	mov	r4, r2
 8007f54:	461d      	mov	r5, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7f8 faf3 	bl	8000548 <__aeabi_f2d>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 f98f 	bl	800028c <__adddf3>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4610      	mov	r0, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	f7f8 fe37 	bl	8000be8 <__aeabi_d2f>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8007f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f92:	ee17 0a90 	vmov	r0, s15
 8007f96:	f7f8 fad7 	bl	8000548 <__aeabi_f2d>
 8007f9a:	a398      	add	r3, pc, #608	; (adr r3, 80081fc <PathPlan+0x2f54>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4614      	mov	r4, r2
 8007faa:	461d      	mov	r5, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f8 fac8 	bl	8000548 <__aeabi_f2d>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 f964 	bl	800028c <__adddf3>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4619      	mov	r1, r3
 8007fcc:	f7f8 fe0c 	bl	8000be8 <__aeabi_d2f>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
}
 8007fd8:	e103      	b.n	80081e2 <PathPlan+0x2f3a>
				} else if(pp->base_shape==tri_omni){
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	f040 80fe 	bne.w	80081e2 <PathPlan+0x2f3a>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f8 faab 	bl	8000548 <__aeabi_f2d>
 8007ff2:	a37f      	add	r3, pc, #508	; (adr r3, 80081f0 <PathPlan+0x2f48>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4614      	mov	r4, r2
 8008002:	461d      	mov	r5, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800800a:	4618      	mov	r0, r3
 800800c:	f7f8 fa9c 	bl	8000548 <__aeabi_f2d>
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	4b78      	ldr	r3, [pc, #480]	; (80081f8 <PathPlan+0x2f50>)
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 f931 	bl	8000288 <__aeabi_dsub>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4614      	mov	r4, r2
 800802c:	461d      	mov	r5, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008034:	4618      	mov	r0, r3
 8008036:	f7f8 fa87 	bl	8000548 <__aeabi_f2d>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4620      	mov	r0, r4
 8008040:	4629      	mov	r1, r5
 8008042:	f7f8 f923 	bl	800028c <__adddf3>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	f7f8 fdcb 	bl	8000be8 <__aeabi_d2f>
 8008052:	4602      	mov	r2, r0
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008060:	4618      	mov	r0, r3
 8008062:	f7f8 fa71 	bl	8000548 <__aeabi_f2d>
 8008066:	a362      	add	r3, pc, #392	; (adr r3, 80081f0 <PathPlan+0x2f48>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f7f8 fac4 	bl	80005f8 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4614      	mov	r4, r2
 8008076:	461d      	mov	r5, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800807e:	4618      	mov	r0, r3
 8008080:	f7f8 fa62 	bl	8000548 <__aeabi_f2d>
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <PathPlan+0x2f50>)
 800808a:	f7f8 fab5 	bl	80005f8 <__aeabi_dmul>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 f8f9 	bl	800028c <__adddf3>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4614      	mov	r4, r2
 80080a0:	461d      	mov	r5, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f8 fa4d 	bl	8000548 <__aeabi_f2d>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4620      	mov	r0, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 f8e7 	bl	8000288 <__aeabi_dsub>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4610      	mov	r0, r2
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7f8 fd91 	bl	8000be8 <__aeabi_d2f>
 80080c6:	4602      	mov	r2, r0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	ed93 7ab1 	vldr	s14, [r3, #708]	; 0x2c4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80080da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f8 fa2c 	bl	8000548 <__aeabi_f2d>
 80080f0:	a33f      	add	r3, pc, #252	; (adr r3, 80081f0 <PathPlan+0x2f48>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fa7f 	bl	80005f8 <__aeabi_dmul>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4614      	mov	r4, r2
 8008100:	461d      	mov	r5, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008108:	4618      	mov	r0, r3
 800810a:	f7f8 fa1d 	bl	8000548 <__aeabi_f2d>
 800810e:	f04f 0200 	mov.w	r2, #0
 8008112:	4b39      	ldr	r3, [pc, #228]	; (80081f8 <PathPlan+0x2f50>)
 8008114:	f7f8 fa70 	bl	80005f8 <__aeabi_dmul>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 f8b2 	bl	8000288 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4614      	mov	r4, r2
 800812a:	461d      	mov	r5, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008132:	4618      	mov	r0, r3
 8008134:	f7f8 fa08 	bl	8000548 <__aeabi_f2d>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 f8a4 	bl	800028c <__adddf3>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
 800814c:	f7f8 fd4c 	bl	8000be8 <__aeabi_d2f>
 8008150:	4602      	mov	r2, r0
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800815e:	4618      	mov	r0, r3
 8008160:	f7f8 f9f2 	bl	8000548 <__aeabi_f2d>
 8008164:	a322      	add	r3, pc, #136	; (adr r3, 80081f0 <PathPlan+0x2f48>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 fa45 	bl	80005f8 <__aeabi_dmul>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4614      	mov	r4, r2
 8008174:	461d      	mov	r5, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800817c:	4618      	mov	r0, r3
 800817e:	f7f8 f9e3 	bl	8000548 <__aeabi_f2d>
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <PathPlan+0x2f50>)
 8008188:	f7f8 fa36 	bl	80005f8 <__aeabi_dmul>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 f87a 	bl	800028c <__adddf3>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4614      	mov	r4, r2
 800819e:	461d      	mov	r5, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f8 f9ce 	bl	8000548 <__aeabi_f2d>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 f86a 	bl	800028c <__adddf3>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4610      	mov	r0, r2
 80081be:	4619      	mov	r1, r3
 80081c0:	f7f8 fd12 	bl	8000be8 <__aeabi_d2f>
 80081c4:	4602      	mov	r2, r0
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 80081d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	edc3 7abb 	vstr	s15, [r3, #748]	; 0x2ec
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	ecbd 8b02 	vpop	{d8}
 80081ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80081f0:	a1cac083 	.word	0xa1cac083
 80081f4:	3febb645 	.word	0x3febb645
 80081f8:	3fe00000 	.word	0x3fe00000
 80081fc:	dbf8b9bb 	.word	0xdbf8b9bb
 8008200:	3fe6a09e 	.word	0x3fe6a09e

08008204 <PP_setXY>:

void PP_setXY (int x,int y,PathPlan_t *pp){
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]

	QEIWrite(QEI2,x);
 8008210:	68f9      	ldr	r1, [r7, #12]
 8008212:	2002      	movs	r0, #2
 8008214:	f7f9 fe30 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI5,y);
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	2005      	movs	r0, #5
 800821c:	f7f9 fe2c 	bl	8001e78 <QEIWrite>
	//pp->real_y=0.0;

	//	pp->prev_real_x=0.0;
	//	pp->prev_real_y=0.0;

}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0

    HAL_SPI_IRQHandler(&hspi1);
 800822c:	4802      	ldr	r0, [pc, #8]	; (8008238 <SPI1_IRQHandler+0x10>)
 800822e:	f008 fcd9 	bl	8010be4 <HAL_SPI_IRQHandler>

}
 8008232:	bf00      	nop
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	2000809c 	.word	0x2000809c

0800823c <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0

    HAL_SPI_IRQHandler(&hspi2);
 8008240:	4802      	ldr	r0, [pc, #8]	; (800824c <SPI2_IRQHandler+0x10>)
 8008242:	f008 fccf 	bl	8010be4 <HAL_SPI_IRQHandler>

}
 8008246:	bf00      	nop
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20007f88 	.word	0x20007f88

08008250 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0

    HAL_SPI_IRQHandler(&hspi3);
 8008254:	4802      	ldr	r0, [pc, #8]	; (8008260 <SPI3_IRQHandler+0x10>)
 8008256:	f008 fcc5 	bl	8010be4 <HAL_SPI_IRQHandler>

}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20007fe0 	.word	0x20007fe0

08008264 <APPResetPos>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

void APPResetPos(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
	sys.flag = 0;
 8008268:	4b30      	ldr	r3, [pc, #192]	; (800832c <APPResetPos+0xc8>)
 800826a:	2200      	movs	r2, #0
 800826c:	801a      	strh	r2, [r3, #0]

	QEIReset(QEI1);
 800826e:	2001      	movs	r0, #1
 8008270:	f7f9 fe6a 	bl	8001f48 <QEIReset>
	QEIReset(QEI2);
 8008274:	2002      	movs	r0, #2
 8008276:	f7f9 fe67 	bl	8001f48 <QEIReset>
	QEIReset(QEI3);
 800827a:	2003      	movs	r0, #3
 800827c:	f7f9 fe64 	bl	8001f48 <QEIReset>
	QEIReset(QEI4);
 8008280:	2004      	movs	r0, #4
 8008282:	f7f9 fe61 	bl	8001f48 <QEIReset>
	QEIReset(QEI5);
 8008286:	2005      	movs	r0, #5
 8008288:	f7f9 fe5e 	bl	8001f48 <QEIReset>
	QEIReset(QEI6);
 800828c:	2006      	movs	r0, #6
 800828e:	f7f9 fe5b 	bl	8001f48 <QEIReset>

	QEIWrite(QEI1, MIN_POSCNT);
 8008292:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008296:	2001      	movs	r0, #1
 8008298:	f7f9 fdee 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI2, MIN_POSCNT);
 800829c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80082a0:	2002      	movs	r0, #2
 80082a2:	f7f9 fde9 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI3, MIN_POSCNT);
 80082a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80082aa:	2003      	movs	r0, #3
 80082ac:	f7f9 fde4 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI4, MIN_POSCNT);
 80082b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80082b4:	2004      	movs	r0, #4
 80082b6:	f7f9 fddf 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI5, MIN_POSCNT);
 80082ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80082be:	2005      	movs	r0, #5
 80082c0:	f7f9 fdda 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI6, MIN_POSCNT);
 80082c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80082c8:	2006      	movs	r0, #6
 80082ca:	f7f9 fdd5 	bl	8001e78 <QEIWrite>

	fFLeftPosData = 0.0;
 80082ce:	4b18      	ldr	r3, [pc, #96]	; (8008330 <APPResetPos+0xcc>)
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
	fFRightPosData = 0.0;
 80082d6:	4b17      	ldr	r3, [pc, #92]	; (8008334 <APPResetPos+0xd0>)
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]

	fBLeftPosData = 0.0;
 80082de:	4b16      	ldr	r3, [pc, #88]	; (8008338 <APPResetPos+0xd4>)
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
	fBRightPosData = 0.0;
 80082e6:	4b15      	ldr	r3, [pc, #84]	; (800833c <APPResetPos+0xd8>)
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

	fXEncData = 0.0;
 80082ee:	4b14      	ldr	r3, [pc, #80]	; (8008340 <APPResetPos+0xdc>)
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
	fYEncData = 0.0;
 80082f6:	4b13      	ldr	r3, [pc, #76]	; (8008344 <APPResetPos+0xe0>)
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]

	ABTEstimateInit(&fleft_pos_data);
 80082fe:	4812      	ldr	r0, [pc, #72]	; (8008348 <APPResetPos+0xe4>)
 8008300:	f7f8 fea1 	bl	8001046 <ABTEstimateInit>
	ABTEstimateInit(&fright_pos_data);
 8008304:	4811      	ldr	r0, [pc, #68]	; (800834c <APPResetPos+0xe8>)
 8008306:	f7f8 fe9e 	bl	8001046 <ABTEstimateInit>

	ABTEstimateInit(&bleft_pos_data);
 800830a:	4811      	ldr	r0, [pc, #68]	; (8008350 <APPResetPos+0xec>)
 800830c:	f7f8 fe9b 	bl	8001046 <ABTEstimateInit>
	ABTEstimateInit(&bright_pos_data);
 8008310:	4810      	ldr	r0, [pc, #64]	; (8008354 <APPResetPos+0xf0>)
 8008312:	f7f8 fe98 	bl	8001046 <ABTEstimateInit>

	ABTEstimateInit(&x_data);
 8008316:	4810      	ldr	r0, [pc, #64]	; (8008358 <APPResetPos+0xf4>)
 8008318:	f7f8 fe95 	bl	8001046 <ABTEstimateInit>
	ABTEstimateInit(&y_data);
 800831c:	480f      	ldr	r0, [pc, #60]	; (800835c <APPResetPos+0xf8>)
 800831e:	f7f8 fe92 	bl	8001046 <ABTEstimateInit>

	junction_count = 0;
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <APPResetPos+0xfc>)
 8008324:	2200      	movs	r2, #0
 8008326:	801a      	strh	r2, [r3, #0]

}
 8008328:	bf00      	nop
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20006dac 	.word	0x20006dac
 8008330:	200077d8 	.word	0x200077d8
 8008334:	20006da8 	.word	0x20006da8
 8008338:	20006dbc 	.word	0x20006dbc
 800833c:	20007f5c 	.word	0x20007f5c
 8008340:	200066c0 	.word	0x200066c0
 8008344:	20007f0c 	.word	0x20007f0c
 8008348:	200078d4 	.word	0x200078d4
 800834c:	20007d78 	.word	0x20007d78
 8008350:	200076ec 	.word	0x200076ec
 8008354:	20007bfc 	.word	0x20007bfc
 8008358:	20007eec 	.word	0x20007eec
 800835c:	20006e68 	.word	0x20006e68
 8008360:	20006628 	.word	0x20006628

08008364 <APPSet>:

void APPSet(param_t *par)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]

	switch (par->parameter){
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	3b14      	subs	r3, #20
 8008372:	2b3f      	cmp	r3, #63	; 0x3f
 8008374:	f201 81e6 	bhi.w	8009744 <APPSet+0x13e0>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <APPSet+0x1c>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	080090b9 	.word	0x080090b9
 8008384:	08009745 	.word	0x08009745
 8008388:	080084bb 	.word	0x080084bb
 800838c:	080084b1 	.word	0x080084b1
 8008390:	08009745 	.word	0x08009745
 8008394:	080085af 	.word	0x080085af
 8008398:	080084f5 	.word	0x080084f5
 800839c:	08008501 	.word	0x08008501
 80083a0:	0800850d 	.word	0x0800850d
 80083a4:	08008521 	.word	0x08008521
 80083a8:	08009745 	.word	0x08009745
 80083ac:	08008fe3 	.word	0x08008fe3
 80083b0:	08008ff5 	.word	0x08008ff5
 80083b4:	08008481 	.word	0x08008481
 80083b8:	08008539 	.word	0x08008539
 80083bc:	08009745 	.word	0x08009745
 80083c0:	080095f9 	.word	0x080095f9
 80083c4:	0800870f 	.word	0x0800870f
 80083c8:	080087f7 	.word	0x080087f7
 80083cc:	080087a9 	.word	0x080087a9
 80083d0:	08008845 	.word	0x08008845
 80083d4:	08009505 	.word	0x08009505
 80083d8:	08009551 	.word	0x08009551
 80083dc:	08008893 	.word	0x08008893
 80083e0:	080089db 	.word	0x080089db
 80083e4:	08008937 	.word	0x08008937
 80083e8:	08008ae3 	.word	0x08008ae3
 80083ec:	080088e5 	.word	0x080088e5
 80083f0:	08008a91 	.word	0x08008a91
 80083f4:	08008989 	.word	0x08008989
 80083f8:	08008b35 	.word	0x08008b35
 80083fc:	0800915f 	.word	0x0800915f
 8008400:	080091af 	.word	0x080091af
 8008404:	080090bf 	.word	0x080090bf
 8008408:	0800910f 	.word	0x0800910f
 800840c:	080091ff 	.word	0x080091ff
 8008410:	0800924f 	.word	0x0800924f
 8008414:	0800929f 	.word	0x0800929f
 8008418:	08009319 	.word	0x08009319
 800841c:	08009745 	.word	0x08009745
 8008420:	08009745 	.word	0x08009745
 8008424:	08008bf3 	.word	0x08008bf3
 8008428:	08008d03 	.word	0x08008d03
 800842c:	08008e33 	.word	0x08008e33
 8008430:	08008f43 	.word	0x08008f43
 8008434:	08008c45 	.word	0x08008c45
 8008438:	08008d75 	.word	0x08008d75
 800843c:	08008e85 	.word	0x08008e85
 8008440:	08008f93 	.word	0x08008f93
 8008444:	08008583 	.word	0x08008583
 8008448:	0800868d 	.word	0x0800868d
 800844c:	080086b5 	.word	0x080086b5
 8008450:	08009745 	.word	0x08009745
 8008454:	08009031 	.word	0x08009031
 8008458:	08008b87 	.word	0x08008b87
 800845c:	08008c97 	.word	0x08008c97
 8008460:	08008dc7 	.word	0x08008dc7
 8008464:	08008ed7 	.word	0x08008ed7
 8008468:	08009369 	.word	0x08009369
 800846c:	080086dd 	.word	0x080086dd
 8008470:	08009745 	.word	0x08009745
 8008474:	08009745 	.word	0x08009745
 8008478:	08009745 	.word	0x08009745
 800847c:	080085c5 	.word	0x080085c5

	case RNS_Printing:
		data = (uint8_t)par->param_buffer[0].data;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	edd3 7a01 	vldr	s15, [r3, #4]
 8008486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848a:	edc7 7a00 	vstr	s15, [r7]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	b2da      	uxtb	r2, r3
 8008492:	4bb2      	ldr	r3, [pc, #712]	; (800875c <APPSet+0x3f8>)
 8008494:	701a      	strb	r2, [r3, #0]
		status = par->param_buffer[1].data;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	edd3 7a02 	vldr	s15, [r3, #8]
 800849c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a0:	edc7 7a00 	vstr	s15, [r7]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	4bad      	ldr	r3, [pc, #692]	; (8008760 <APPSet+0x3fc>)
 80084aa:	701a      	strb	r2, [r3, #0]
		break;
 80084ac:	f001 b953 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PP_Reset:
		PP_reset(&pp);
 80084b0:	48ac      	ldr	r0, [pc, #688]	; (8008764 <APPSet+0x400>)
 80084b2:	f7fc fe8e 	bl	80051d2 <PP_reset>
		break;
 80084b6:	f001 b94e 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPInit:
		if (dev_cfg.base_type == tri_omni){
 80084ba:	4bab      	ldr	r3, [pc, #684]	; (8008768 <APPSet+0x404>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d109      	bne.n	80084d6 <APPSet+0x172>
			PPInit(tri_omni,&fXPos,&fYPos,&fyaw,&pp);
 80084c2:	4ba8      	ldr	r3, [pc, #672]	; (8008764 <APPSet+0x400>)
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	4ba9      	ldr	r3, [pc, #676]	; (800876c <APPSet+0x408>)
 80084c8:	4aa9      	ldr	r2, [pc, #676]	; (8008770 <APPSet+0x40c>)
 80084ca:	49aa      	ldr	r1, [pc, #680]	; (8008774 <APPSet+0x410>)
 80084cc:	2001      	movs	r0, #1
 80084ce:	f7fc fb43 	bl	8004b58 <PPInit>
		} else if(dev_cfg.base_type == fwd_omni) {
			PPInit(fwd_omni,&fXPos,&fYPos,&fyaw,&pp);
		}
		break;
 80084d2:	f001 b939 	b.w	8009748 <APPSet+0x13e4>
		} else if(dev_cfg.base_type == fwd_omni) {
 80084d6:	4ba4      	ldr	r3, [pc, #656]	; (8008768 <APPSet+0x404>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	f041 8134 	bne.w	8009748 <APPSet+0x13e4>
			PPInit(fwd_omni,&fXPos,&fYPos,&fyaw,&pp);
 80084e0:	4ba0      	ldr	r3, [pc, #640]	; (8008764 <APPSet+0x400>)
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	4ba1      	ldr	r3, [pc, #644]	; (800876c <APPSet+0x408>)
 80084e6:	4aa2      	ldr	r2, [pc, #648]	; (8008770 <APPSet+0x40c>)
 80084e8:	49a2      	ldr	r1, [pc, #648]	; (8008774 <APPSet+0x410>)
 80084ea:	2002      	movs	r0, #2
 80084ec:	f7fc fb34 	bl	8004b58 <PPInit>
		break;
 80084f0:	f001 b92a 	b.w	8009748 <APPSet+0x13e4>

	case RNS_PPSetX:
		pp.real_x=par->param_buffer[0].data;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	4a9a      	ldr	r2, [pc, #616]	; (8008764 <APPSet+0x400>)
 80084fa:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80084fc:	f001 b92b 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPSetY:
		pp.real_y=par->param_buffer[0].data;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	4a97      	ldr	r2, [pc, #604]	; (8008764 <APPSet+0x400>)
 8008506:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8008508:	f001 b925 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPSetZ:
		PP_SetZ(par->param_buffer[0].data,&pp);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008512:	4894      	ldr	r0, [pc, #592]	; (8008764 <APPSet+0x400>)
 8008514:	eeb0 0a67 	vmov.f32	s0, s15
 8008518:	f7fc fe9d 	bl	8005256 <PP_SetZ>
		break;
 800851c:	f001 b91b 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPSetCRV_PTS:
		PP_SetCrv_Points(par->param_buffer[0].data,&pp);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	edd3 7a01 	vldr	s15, [r3, #4]
 8008526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800852a:	498e      	ldr	r1, [pc, #568]	; (8008764 <APPSet+0x400>)
 800852c:	ee17 0a90 	vmov	r0, s15
 8008530:	f7fc fea9 	bl	8005286 <PP_SetCrv_Points>
			break;
 8008534:	f001 b90f 	b.w	8009756 <APPSet+0x13f2>

	case RNS_SET_PP_XY:
		PP_setXY((int)(par->param_buffer[0].data/xPtd),(int)(par->param_buffer[1].data/yPtd),&pp);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	edd3 6a01 	vldr	s13, [r3, #4]
 800853e:	4b8e      	ldr	r3, [pc, #568]	; (8008778 <APPSet+0x414>)
 8008540:	ed93 7a00 	vldr	s14, [r3]
 8008544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008548:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	edd3 6a02 	vldr	s13, [r3, #8]
 8008552:	4b8a      	ldr	r3, [pc, #552]	; (800877c <APPSet+0x418>)
 8008554:	ed93 7a00 	vldr	s14, [r3]
 8008558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800855c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008560:	4a80      	ldr	r2, [pc, #512]	; (8008764 <APPSet+0x400>)
 8008562:	ee17 1a90 	vmov	r1, s15
 8008566:	ee16 0a10 	vmov	r0, s12
 800856a:	f7ff fe4b 	bl	8008204 <PP_setXY>
		pp.real_x=par->param_buffer[0].data;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	4a7c      	ldr	r2, [pc, #496]	; (8008764 <APPSet+0x400>)
 8008574:	6313      	str	r3, [r2, #48]	; 0x30
		pp.real_y=par->param_buffer[1].data;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4a7a      	ldr	r2, [pc, #488]	; (8008764 <APPSet+0x400>)
 800857c:	6413      	str	r3, [r2, #64]	; 0x40

		break;
 800857e:	f001 b8ea 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPSetXYZerror:
		pp.tol_xy=par->param_buffer[0].data;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4a77      	ldr	r2, [pc, #476]	; (8008764 <APPSet+0x400>)
 8008588:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
		pp.tol_z=par->param_buffer[1].data;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4a74      	ldr	r2, [pc, #464]	; (8008764 <APPSet+0x400>)
 8008592:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
		pp.f_tol_xy=par->param_buffer[2].data;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	4a72      	ldr	r2, [pc, #456]	; (8008764 <APPSet+0x400>)
 800859c:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
		pp.f_tol_z=par->param_buffer[3].data;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	4a6f      	ldr	r2, [pc, #444]	; (8008764 <APPSet+0x400>)
 80085a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
		break;
 80085aa:	f001 b8d4 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPSend_num_Point:
		NumPoint = (int)par->param_buffer[0].data;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80085b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085b8:	ee17 2a90 	vmov	r2, s15
 80085bc:	4b70      	ldr	r3, [pc, #448]	; (8008780 <APPSet+0x41c>)
 80085be:	601a      	str	r2, [r3, #0]
		break;
 80085c0:	f001 b8c9 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPSendPoint:

		rcvPoint[s][0].data = (float)par->param_buffer[0].data;
 80085c4:	4b6f      	ldr	r3, [pc, #444]	; (8008784 <APPSet+0x420>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6859      	ldr	r1, [r3, #4]
 80085cc:	486e      	ldr	r0, [pc, #440]	; (8008788 <APPSet+0x424>)
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4403      	add	r3, r0
 80085d8:	6019      	str	r1, [r3, #0]
		rcvPoint[s][1].data = (float)par->param_buffer[1].data;
 80085da:	4b6a      	ldr	r3, [pc, #424]	; (8008784 <APPSet+0x420>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6899      	ldr	r1, [r3, #8]
 80085e2:	4869      	ldr	r0, [pc, #420]	; (8008788 <APPSet+0x424>)
 80085e4:	4613      	mov	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4403      	add	r3, r0
 80085ee:	3304      	adds	r3, #4
 80085f0:	6019      	str	r1, [r3, #0]
		rcvPoint[s][2].data = (float)par->param_buffer[2].data;
 80085f2:	4b64      	ldr	r3, [pc, #400]	; (8008784 <APPSet+0x420>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68d9      	ldr	r1, [r3, #12]
 80085fa:	4863      	ldr	r0, [pc, #396]	; (8008788 <APPSet+0x424>)
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4403      	add	r3, r0
 8008606:	3308      	adds	r3, #8
 8008608:	6019      	str	r1, [r3, #0]
		rcvPoint[s][3].data = (float)par->param_buffer[3].data;
 800860a:	4b5e      	ldr	r3, [pc, #376]	; (8008784 <APPSet+0x420>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6919      	ldr	r1, [r3, #16]
 8008612:	485d      	ldr	r0, [pc, #372]	; (8008788 <APPSet+0x424>)
 8008614:	4613      	mov	r3, r2
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4403      	add	r3, r0
 800861e:	330c      	adds	r3, #12
 8008620:	6019      	str	r1, [r3, #0]
		rcvPoint[s][4].data = (float)par->param_buffer[4].data;
 8008622:	4b58      	ldr	r3, [pc, #352]	; (8008784 <APPSet+0x420>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6959      	ldr	r1, [r3, #20]
 800862a:	4857      	ldr	r0, [pc, #348]	; (8008788 <APPSet+0x424>)
 800862c:	4613      	mov	r3, r2
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4403      	add	r3, r0
 8008636:	3310      	adds	r3, #16
 8008638:	6019      	str	r1, [r3, #0]
		rcvPoint[s][5].data = (float)par->param_buffer[5].data;
 800863a:	4b52      	ldr	r3, [pc, #328]	; (8008784 <APPSet+0x420>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6999      	ldr	r1, [r3, #24]
 8008642:	4851      	ldr	r0, [pc, #324]	; (8008788 <APPSet+0x424>)
 8008644:	4613      	mov	r3, r2
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	1a9b      	subs	r3, r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4403      	add	r3, r0
 800864e:	3314      	adds	r3, #20
 8008650:	6019      	str	r1, [r3, #0]
		rcvPoint[s][6].data = (float)par->param_buffer[6].data;//added
 8008652:	4b4c      	ldr	r3, [pc, #304]	; (8008784 <APPSet+0x420>)
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69d9      	ldr	r1, [r3, #28]
 800865a:	484b      	ldr	r0, [pc, #300]	; (8008788 <APPSet+0x424>)
 800865c:	4613      	mov	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	1a9b      	subs	r3, r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4403      	add	r3, r0
 8008666:	3318      	adds	r3, #24
 8008668:	6019      	str	r1, [r3, #0]
		s++;
 800866a:	4b46      	ldr	r3, [pc, #280]	; (8008784 <APPSet+0x420>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	4a44      	ldr	r2, [pc, #272]	; (8008784 <APPSet+0x420>)
 8008672:	6013      	str	r3, [r2, #0]



		if (s == NumPoint)
 8008674:	4b43      	ldr	r3, [pc, #268]	; (8008784 <APPSet+0x420>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	4b41      	ldr	r3, [pc, #260]	; (8008780 <APPSet+0x41c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	f041 8065 	bne.w	800974c <APPSet+0x13e8>
			s = 0;
 8008682:	4b40      	ldr	r3, [pc, #256]	; (8008784 <APPSet+0x420>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

		break;
 8008688:	f001 b860 	b.w	800974c <APPSet+0x13e8>

	case RNS_PPPathPID:
		PP_PIDPathSet(par->param_buffer[0].data,par->param_buffer[1].data,par->param_buffer[2].data,&pp);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	ed93 7a02 	vldr	s14, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	edd3 6a03 	vldr	s13, [r3, #12]
 800869e:	4831      	ldr	r0, [pc, #196]	; (8008764 <APPSet+0x400>)
 80086a0:	eeb0 1a66 	vmov.f32	s2, s13
 80086a4:	eef0 0a47 	vmov.f32	s1, s14
 80086a8:	eeb0 0a67 	vmov.f32	s0, s15
 80086ac:	f7fc fb18 	bl	8004ce0 <PP_PIDPathSet>
		break;
 80086b0:	f001 b851 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPEndPID:
		PP_PIDEndSet(par->param_buffer[0].data,par->param_buffer[1].data,par->param_buffer[2].data,&pp);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80086c6:	4827      	ldr	r0, [pc, #156]	; (8008764 <APPSet+0x400>)
 80086c8:	eeb0 1a66 	vmov.f32	s2, s13
 80086cc:	eef0 0a47 	vmov.f32	s1, s14
 80086d0:	eeb0 0a67 	vmov.f32	s0, s15
 80086d4:	f7fc fb8d 	bl	8004df2 <PP_PIDEndSet>
		break;
 80086d8:	f001 b83d 	b.w	8009756 <APPSet+0x13f2>

	case RNS_PPZPID:
		PP_PIDZSet(par->param_buffer[0].data,par->param_buffer[1].data,par->param_buffer[2].data,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	edd3 7a01 	vldr	s15, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	ed93 6a04 	vldr	s12, [r3, #16]
 80086f4:	481b      	ldr	r0, [pc, #108]	; (8008764 <APPSet+0x400>)
 80086f6:	eef0 1a46 	vmov.f32	s3, s12
 80086fa:	eeb0 1a66 	vmov.f32	s2, s13
 80086fe:	eef0 0a47 	vmov.f32	s1, s14
 8008702:	eeb0 0a67 	vmov.f32	s0, s15
 8008706:	f7fc fb3b 	bl	8004d80 <PP_PIDZSet>
																					par->param_buffer[3].data,&pp);
		break;
 800870a:	f001 b824 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_LEFT_ABT :
		fFLeftPosGain[0] = par->param_buffer[0].data;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	4a1e      	ldr	r2, [pc, #120]	; (800878c <APPSet+0x428>)
 8008714:	6013      	str	r3, [r2, #0]
		fFLeftPosGain[1] = par->param_buffer[1].data;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4a1c      	ldr	r2, [pc, #112]	; (800878c <APPSet+0x428>)
 800871c:	6053      	str	r3, [r2, #4]
		fFLeftPosGain[2] = par->param_buffer[2].data;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	4a1a      	ldr	r2, [pc, #104]	; (800878c <APPSet+0x428>)
 8008724:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fFLeftPosGain[0], fFLeftPosGain[1], fFLeftPosGain[2],
 8008726:	4b19      	ldr	r3, [pc, #100]	; (800878c <APPSet+0x428>)
 8008728:	edd3 7a00 	vldr	s15, [r3]
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <APPSet+0x428>)
 800872e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <APPSet+0x428>)
 8008734:	edd3 6a02 	vldr	s13, [r3, #8]
 8008738:	4b15      	ldr	r3, [pc, #84]	; (8008790 <APPSet+0x42c>)
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	4b15      	ldr	r3, [pc, #84]	; (8008794 <APPSet+0x430>)
 800873e:	4a16      	ldr	r2, [pc, #88]	; (8008798 <APPSet+0x434>)
 8008740:	4916      	ldr	r1, [pc, #88]	; (800879c <APPSet+0x438>)
 8008742:	4817      	ldr	r0, [pc, #92]	; (80087a0 <APPSet+0x43c>)
 8008744:	eef0 1a66 	vmov.f32	s3, s13
 8008748:	eeb0 1a47 	vmov.f32	s2, s14
 800874c:	eef0 0a67 	vmov.f32	s1, s15
 8008750:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80087a4 <APPSet+0x440>
 8008754:	f7f8 fc4a 	bl	8000fec <ABTInit>
				&fFLeftPosData, &fFLeftPos, &fFLeftVel, &fFLeftAcc, &fleft_pos_data);
		break;
 8008758:	f000 bffd 	b.w	8009756 <APPSet+0x13f2>
 800875c:	20007a58 	.word	0x20007a58
 8008760:	20007f4c 	.word	0x20007f4c
 8008764:	20006868 	.word	0x20006868
 8008768:	20007b1c 	.word	0x20007b1c
 800876c:	20007af4 	.word	0x20007af4
 8008770:	20007a5c 	.word	0x20007a5c
 8008774:	20007bf8 	.word	0x20007bf8
 8008778:	20006630 	.word	0x20006630
 800877c:	20006ee0 	.word	0x20006ee0
 8008780:	20007b80 	.word	0x20007b80
 8008784:	20007c28 	.word	0x20007c28
 8008788:	20006efc 	.word	0x20006efc
 800878c:	20000000 	.word	0x20000000
 8008790:	200078d4 	.word	0x200078d4
 8008794:	20006638 	.word	0x20006638
 8008798:	20007ee8 	.word	0x20007ee8
 800879c:	20007f14 	.word	0x20007f14
 80087a0:	200077d8 	.word	0x200077d8
 80087a4:	3ba3d70a 	.word	0x3ba3d70a

	case RNS_B_LEFT_ABT :
		fBLeftPosGain[0] = par->param_buffer[0].data;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4a9f      	ldr	r2, [pc, #636]	; (8008a2c <APPSet+0x6c8>)
 80087ae:	6013      	str	r3, [r2, #0]
		fBLeftPosGain[1] = par->param_buffer[1].data;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	4a9d      	ldr	r2, [pc, #628]	; (8008a2c <APPSet+0x6c8>)
 80087b6:	6053      	str	r3, [r2, #4]
		fBLeftPosGain[2] = par->param_buffer[2].data;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a9b      	ldr	r2, [pc, #620]	; (8008a2c <APPSet+0x6c8>)
 80087be:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fBLeftPosGain[0], fBLeftPosGain[1], fBLeftPosGain[2],
 80087c0:	4b9a      	ldr	r3, [pc, #616]	; (8008a2c <APPSet+0x6c8>)
 80087c2:	edd3 7a00 	vldr	s15, [r3]
 80087c6:	4b99      	ldr	r3, [pc, #612]	; (8008a2c <APPSet+0x6c8>)
 80087c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80087cc:	4b97      	ldr	r3, [pc, #604]	; (8008a2c <APPSet+0x6c8>)
 80087ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80087d2:	4b97      	ldr	r3, [pc, #604]	; (8008a30 <APPSet+0x6cc>)
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	4b97      	ldr	r3, [pc, #604]	; (8008a34 <APPSet+0x6d0>)
 80087d8:	4a97      	ldr	r2, [pc, #604]	; (8008a38 <APPSet+0x6d4>)
 80087da:	4998      	ldr	r1, [pc, #608]	; (8008a3c <APPSet+0x6d8>)
 80087dc:	4898      	ldr	r0, [pc, #608]	; (8008a40 <APPSet+0x6dc>)
 80087de:	eef0 1a66 	vmov.f32	s3, s13
 80087e2:	eeb0 1a47 	vmov.f32	s2, s14
 80087e6:	eef0 0a67 	vmov.f32	s1, s15
 80087ea:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8008a44 <APPSet+0x6e0>
 80087ee:	f7f8 fbfd 	bl	8000fec <ABTInit>
				&fBLeftPosData, &fBLeftPos, &fBLeftVel, &fBLeftAcc, &bleft_pos_data);
		break;
 80087f2:	f000 bfb0 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_RIGHT_ABT :
		fFRightPosGain[0] = par->param_buffer[0].data;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4a93      	ldr	r2, [pc, #588]	; (8008a48 <APPSet+0x6e4>)
 80087fc:	6013      	str	r3, [r2, #0]
		fFRightPosGain[1] = par->param_buffer[1].data;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	4a91      	ldr	r2, [pc, #580]	; (8008a48 <APPSet+0x6e4>)
 8008804:	6053      	str	r3, [r2, #4]
		fFRightPosGain[2] = par->param_buffer[2].data;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	4a8f      	ldr	r2, [pc, #572]	; (8008a48 <APPSet+0x6e4>)
 800880c:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fFRightPosGain[0], fFRightPosGain[1], fFRightPosGain[2],
 800880e:	4b8e      	ldr	r3, [pc, #568]	; (8008a48 <APPSet+0x6e4>)
 8008810:	edd3 7a00 	vldr	s15, [r3]
 8008814:	4b8c      	ldr	r3, [pc, #560]	; (8008a48 <APPSet+0x6e4>)
 8008816:	ed93 7a01 	vldr	s14, [r3, #4]
 800881a:	4b8b      	ldr	r3, [pc, #556]	; (8008a48 <APPSet+0x6e4>)
 800881c:	edd3 6a02 	vldr	s13, [r3, #8]
 8008820:	4b8a      	ldr	r3, [pc, #552]	; (8008a4c <APPSet+0x6e8>)
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	4b8a      	ldr	r3, [pc, #552]	; (8008a50 <APPSet+0x6ec>)
 8008826:	4a8b      	ldr	r2, [pc, #556]	; (8008a54 <APPSet+0x6f0>)
 8008828:	498b      	ldr	r1, [pc, #556]	; (8008a58 <APPSet+0x6f4>)
 800882a:	488c      	ldr	r0, [pc, #560]	; (8008a5c <APPSet+0x6f8>)
 800882c:	eef0 1a66 	vmov.f32	s3, s13
 8008830:	eeb0 1a47 	vmov.f32	s2, s14
 8008834:	eef0 0a67 	vmov.f32	s1, s15
 8008838:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8008a44 <APPSet+0x6e0>
 800883c:	f7f8 fbd6 	bl	8000fec <ABTInit>
				&fFRightPosData, &fFRightPos, &fFRightVel, &fFRightAcc, &fright_pos_data);
		break;
 8008840:	f000 bf89 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_RIGHT_ABT :
		fBRightPosGain[0] = par->param_buffer[0].data;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4a85      	ldr	r2, [pc, #532]	; (8008a60 <APPSet+0x6fc>)
 800884a:	6013      	str	r3, [r2, #0]
		fBRightPosGain[1] = par->param_buffer[1].data;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4a83      	ldr	r2, [pc, #524]	; (8008a60 <APPSet+0x6fc>)
 8008852:	6053      	str	r3, [r2, #4]
		fBRightPosGain[2] = par->param_buffer[2].data;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4a81      	ldr	r2, [pc, #516]	; (8008a60 <APPSet+0x6fc>)
 800885a:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fBRightPosGain[0], fBRightPosGain[1], fBRightPosGain[2],
 800885c:	4b80      	ldr	r3, [pc, #512]	; (8008a60 <APPSet+0x6fc>)
 800885e:	edd3 7a00 	vldr	s15, [r3]
 8008862:	4b7f      	ldr	r3, [pc, #508]	; (8008a60 <APPSet+0x6fc>)
 8008864:	ed93 7a01 	vldr	s14, [r3, #4]
 8008868:	4b7d      	ldr	r3, [pc, #500]	; (8008a60 <APPSet+0x6fc>)
 800886a:	edd3 6a02 	vldr	s13, [r3, #8]
 800886e:	4b7d      	ldr	r3, [pc, #500]	; (8008a64 <APPSet+0x700>)
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4b7d      	ldr	r3, [pc, #500]	; (8008a68 <APPSet+0x704>)
 8008874:	4a7d      	ldr	r2, [pc, #500]	; (8008a6c <APPSet+0x708>)
 8008876:	497e      	ldr	r1, [pc, #504]	; (8008a70 <APPSet+0x70c>)
 8008878:	487e      	ldr	r0, [pc, #504]	; (8008a74 <APPSet+0x710>)
 800887a:	eef0 1a66 	vmov.f32	s3, s13
 800887e:	eeb0 1a47 	vmov.f32	s2, s14
 8008882:	eef0 0a67 	vmov.f32	s1, s15
 8008886:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8008a44 <APPSet+0x6e0>
 800888a:	f7f8 fbaf 	bl	8000fec <ABTInit>
				&fBRightPosData, &fBRightPos, &fBRightVel, &fBRightAcc, &bright_pos_data);
		break;
 800888e:	f000 bf62 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_LEFT_VEL_SATEU :
		fFLeftVG[0] = par->param_buffer[0].data;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	4a78      	ldr	r2, [pc, #480]	; (8008a78 <APPSet+0x714>)
 8008898:	6013      	str	r3, [r2, #0]
		fFLeftVG[1] = par->param_buffer[1].data;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	4a76      	ldr	r2, [pc, #472]	; (8008a78 <APPSet+0x714>)
 80088a0:	6053      	str	r3, [r2, #4]
		fFLeftVG[2] = par->param_buffer[2].data;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	4a74      	ldr	r2, [pc, #464]	; (8008a78 <APPSet+0x714>)
 80088a8:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fFLeftVG[0], &fleft_vel);
 80088aa:	4b73      	ldr	r3, [pc, #460]	; (8008a78 <APPSet+0x714>)
 80088ac:	edd3 7a00 	vldr	s15, [r3]
 80088b0:	4972      	ldr	r1, [pc, #456]	; (8008a7c <APPSet+0x718>)
 80088b2:	eeb0 0a67 	vmov.f32	s0, s15
 80088b6:	2001      	movs	r0, #1
 80088b8:	f7fb fefc 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fFLeftVG[1], &fleft_vel);
 80088bc:	4b6e      	ldr	r3, [pc, #440]	; (8008a78 <APPSet+0x714>)
 80088be:	edd3 7a01 	vldr	s15, [r3, #4]
 80088c2:	496e      	ldr	r1, [pc, #440]	; (8008a7c <APPSet+0x718>)
 80088c4:	eeb0 0a67 	vmov.f32	s0, s15
 80088c8:	2002      	movs	r0, #2
 80088ca:	f7fb fef3 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fFLeftVG[2], &fleft_vel);
 80088ce:	4b6a      	ldr	r3, [pc, #424]	; (8008a78 <APPSet+0x714>)
 80088d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80088d4:	4969      	ldr	r1, [pc, #420]	; (8008a7c <APPSet+0x718>)
 80088d6:	eeb0 0a67 	vmov.f32	s0, s15
 80088da:	2003      	movs	r0, #3
 80088dc:	f7fb feea 	bl	80046b4 <PIDGainSet>
		break;
 80088e0:	f000 bf39 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_LEFT_VEL_PID :
		fFLeftVG[3] = par->param_buffer[0].data;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	4a63      	ldr	r2, [pc, #396]	; (8008a78 <APPSet+0x714>)
 80088ea:	60d3      	str	r3, [r2, #12]
		fFLeftVG[4] = par->param_buffer[1].data;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	4a61      	ldr	r2, [pc, #388]	; (8008a78 <APPSet+0x714>)
 80088f2:	6113      	str	r3, [r2, #16]
		fFLeftVG[5] = par->param_buffer[2].data;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	4a5f      	ldr	r2, [pc, #380]	; (8008a78 <APPSet+0x714>)
 80088fa:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fFLeftVG[3], &fleft_vel);
 80088fc:	4b5e      	ldr	r3, [pc, #376]	; (8008a78 <APPSet+0x714>)
 80088fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8008902:	495e      	ldr	r1, [pc, #376]	; (8008a7c <APPSet+0x718>)
 8008904:	eeb0 0a67 	vmov.f32	s0, s15
 8008908:	2004      	movs	r0, #4
 800890a:	f7fb fed3 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fFLeftVG[4], &fleft_vel);
 800890e:	4b5a      	ldr	r3, [pc, #360]	; (8008a78 <APPSet+0x714>)
 8008910:	edd3 7a04 	vldr	s15, [r3, #16]
 8008914:	4959      	ldr	r1, [pc, #356]	; (8008a7c <APPSet+0x718>)
 8008916:	eeb0 0a67 	vmov.f32	s0, s15
 800891a:	2005      	movs	r0, #5
 800891c:	f7fb feca 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fFLeftVG[5], &fleft_vel);
 8008920:	4b55      	ldr	r3, [pc, #340]	; (8008a78 <APPSet+0x714>)
 8008922:	edd3 7a05 	vldr	s15, [r3, #20]
 8008926:	4955      	ldr	r1, [pc, #340]	; (8008a7c <APPSet+0x718>)
 8008928:	eeb0 0a67 	vmov.f32	s0, s15
 800892c:	2006      	movs	r0, #6
 800892e:	f7fb fec1 	bl	80046b4 <PIDGainSet>
		break;
 8008932:	f000 bf10 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_LEFT_VEL_SATEU :
		fBLeftVG[0] = par->param_buffer[0].data;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4a51      	ldr	r2, [pc, #324]	; (8008a80 <APPSet+0x71c>)
 800893c:	6013      	str	r3, [r2, #0]
		fBLeftVG[1] = par->param_buffer[1].data;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	4a4f      	ldr	r2, [pc, #316]	; (8008a80 <APPSet+0x71c>)
 8008944:	6053      	str	r3, [r2, #4]
		fBLeftVG[2] = par->param_buffer[2].data;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	4a4d      	ldr	r2, [pc, #308]	; (8008a80 <APPSet+0x71c>)
 800894c:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fBLeftVG[0], &bleft_vel);
 800894e:	4b4c      	ldr	r3, [pc, #304]	; (8008a80 <APPSet+0x71c>)
 8008950:	edd3 7a00 	vldr	s15, [r3]
 8008954:	494b      	ldr	r1, [pc, #300]	; (8008a84 <APPSet+0x720>)
 8008956:	eeb0 0a67 	vmov.f32	s0, s15
 800895a:	2001      	movs	r0, #1
 800895c:	f7fb feaa 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fBLeftVG[1], &bleft_vel);
 8008960:	4b47      	ldr	r3, [pc, #284]	; (8008a80 <APPSet+0x71c>)
 8008962:	edd3 7a01 	vldr	s15, [r3, #4]
 8008966:	4947      	ldr	r1, [pc, #284]	; (8008a84 <APPSet+0x720>)
 8008968:	eeb0 0a67 	vmov.f32	s0, s15
 800896c:	2002      	movs	r0, #2
 800896e:	f7fb fea1 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fBLeftVG[2], &bleft_vel);
 8008972:	4b43      	ldr	r3, [pc, #268]	; (8008a80 <APPSet+0x71c>)
 8008974:	edd3 7a02 	vldr	s15, [r3, #8]
 8008978:	4942      	ldr	r1, [pc, #264]	; (8008a84 <APPSet+0x720>)
 800897a:	eeb0 0a67 	vmov.f32	s0, s15
 800897e:	2003      	movs	r0, #3
 8008980:	f7fb fe98 	bl	80046b4 <PIDGainSet>
		break;
 8008984:	f000 bee7 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_LEFT_VEL_PID :
		fBLeftVG[3] = par->param_buffer[0].data;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4a3c      	ldr	r2, [pc, #240]	; (8008a80 <APPSet+0x71c>)
 800898e:	60d3      	str	r3, [r2, #12]
		fBLeftVG[4] = par->param_buffer[1].data;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	4a3a      	ldr	r2, [pc, #232]	; (8008a80 <APPSet+0x71c>)
 8008996:	6113      	str	r3, [r2, #16]
		fBLeftVG[5] = par->param_buffer[2].data;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4a38      	ldr	r2, [pc, #224]	; (8008a80 <APPSet+0x71c>)
 800899e:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fBLeftVG[3], &bleft_vel);
 80089a0:	4b37      	ldr	r3, [pc, #220]	; (8008a80 <APPSet+0x71c>)
 80089a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80089a6:	4937      	ldr	r1, [pc, #220]	; (8008a84 <APPSet+0x720>)
 80089a8:	eeb0 0a67 	vmov.f32	s0, s15
 80089ac:	2004      	movs	r0, #4
 80089ae:	f7fb fe81 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fBLeftVG[4], &bleft_vel);
 80089b2:	4b33      	ldr	r3, [pc, #204]	; (8008a80 <APPSet+0x71c>)
 80089b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80089b8:	4932      	ldr	r1, [pc, #200]	; (8008a84 <APPSet+0x720>)
 80089ba:	eeb0 0a67 	vmov.f32	s0, s15
 80089be:	2005      	movs	r0, #5
 80089c0:	f7fb fe78 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fBLeftVG[5], &bleft_vel);
 80089c4:	4b2e      	ldr	r3, [pc, #184]	; (8008a80 <APPSet+0x71c>)
 80089c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80089ca:	492e      	ldr	r1, [pc, #184]	; (8008a84 <APPSet+0x720>)
 80089cc:	eeb0 0a67 	vmov.f32	s0, s15
 80089d0:	2006      	movs	r0, #6
 80089d2:	f7fb fe6f 	bl	80046b4 <PIDGainSet>
		break;
 80089d6:	f000 bebe 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_RIGHT_VEL_SATEU :
		fFRightVG[0] = par->param_buffer[0].data;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	4a2a      	ldr	r2, [pc, #168]	; (8008a88 <APPSet+0x724>)
 80089e0:	6013      	str	r3, [r2, #0]
		fFRightVG[1] = par->param_buffer[1].data;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	4a28      	ldr	r2, [pc, #160]	; (8008a88 <APPSet+0x724>)
 80089e8:	6053      	str	r3, [r2, #4]
		fFRightVG[2] = par->param_buffer[2].data;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	4a26      	ldr	r2, [pc, #152]	; (8008a88 <APPSet+0x724>)
 80089f0:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fFRightVG[0], &fright_vel);
 80089f2:	4b25      	ldr	r3, [pc, #148]	; (8008a88 <APPSet+0x724>)
 80089f4:	edd3 7a00 	vldr	s15, [r3]
 80089f8:	4924      	ldr	r1, [pc, #144]	; (8008a8c <APPSet+0x728>)
 80089fa:	eeb0 0a67 	vmov.f32	s0, s15
 80089fe:	2001      	movs	r0, #1
 8008a00:	f7fb fe58 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fFRightVG[1], &fright_vel);
 8008a04:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <APPSet+0x724>)
 8008a06:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a0a:	4920      	ldr	r1, [pc, #128]	; (8008a8c <APPSet+0x728>)
 8008a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a10:	2002      	movs	r0, #2
 8008a12:	f7fb fe4f 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fFRightVG[2], &fright_vel);
 8008a16:	4b1c      	ldr	r3, [pc, #112]	; (8008a88 <APPSet+0x724>)
 8008a18:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a1c:	491b      	ldr	r1, [pc, #108]	; (8008a8c <APPSet+0x728>)
 8008a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a22:	2003      	movs	r0, #3
 8008a24:	f7fb fe46 	bl	80046b4 <PIDGainSet>
		break;
 8008a28:	f000 be95 	b.w	8009756 <APPSet+0x13f2>
 8008a2c:	20000018 	.word	0x20000018
 8008a30:	200076ec 	.word	0x200076ec
 8008a34:	20006e1c 	.word	0x20006e1c
 8008a38:	20006e18 	.word	0x20006e18
 8008a3c:	20007f20 	.word	0x20007f20
 8008a40:	20006dbc 	.word	0x20006dbc
 8008a44:	3ba3d70a 	.word	0x3ba3d70a
 8008a48:	2000000c 	.word	0x2000000c
 8008a4c:	20007d78 	.word	0x20007d78
 8008a50:	20007ed8 	.word	0x20007ed8
 8008a54:	20006ef8 	.word	0x20006ef8
 8008a58:	20006ef0 	.word	0x20006ef0
 8008a5c:	20006da8 	.word	0x20006da8
 8008a60:	20000024 	.word	0x20000024
 8008a64:	20007bfc 	.word	0x20007bfc
 8008a68:	20007b24 	.word	0x20007b24
 8008a6c:	200073f4 	.word	0x200073f4
 8008a70:	20006db4 	.word	0x20006db4
 8008a74:	20007f5c 	.word	0x20007f5c
 8008a78:	200000e8 	.word	0x200000e8
 8008a7c:	20006e8c 	.word	0x20006e8c
 8008a80:	20000120 	.word	0x20000120
 8008a84:	200066e8 	.word	0x200066e8
 8008a88:	20000104 	.word	0x20000104
 8008a8c:	20006dc0 	.word	0x20006dc0

	case RNS_F_RIGHT_VEL_PID :
		fFRightVG[3] = par->param_buffer[0].data;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4aaf      	ldr	r2, [pc, #700]	; (8008d54 <APPSet+0x9f0>)
 8008a96:	60d3      	str	r3, [r2, #12]
		fFRightVG[4] = par->param_buffer[1].data;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	4aad      	ldr	r2, [pc, #692]	; (8008d54 <APPSet+0x9f0>)
 8008a9e:	6113      	str	r3, [r2, #16]
		fFRightVG[5] = par->param_buffer[2].data;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	4aab      	ldr	r2, [pc, #684]	; (8008d54 <APPSet+0x9f0>)
 8008aa6:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fFRightVG[3], &fright_vel);
 8008aa8:	4baa      	ldr	r3, [pc, #680]	; (8008d54 <APPSet+0x9f0>)
 8008aaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8008aae:	49aa      	ldr	r1, [pc, #680]	; (8008d58 <APPSet+0x9f4>)
 8008ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab4:	2004      	movs	r0, #4
 8008ab6:	f7fb fdfd 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fFRightVG[4], &fright_vel);
 8008aba:	4ba6      	ldr	r3, [pc, #664]	; (8008d54 <APPSet+0x9f0>)
 8008abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ac0:	49a5      	ldr	r1, [pc, #660]	; (8008d58 <APPSet+0x9f4>)
 8008ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac6:	2005      	movs	r0, #5
 8008ac8:	f7fb fdf4 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fFRightVG[5], &fright_vel);
 8008acc:	4ba1      	ldr	r3, [pc, #644]	; (8008d54 <APPSet+0x9f0>)
 8008ace:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ad2:	49a1      	ldr	r1, [pc, #644]	; (8008d58 <APPSet+0x9f4>)
 8008ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ad8:	2006      	movs	r0, #6
 8008ada:	f7fb fdeb 	bl	80046b4 <PIDGainSet>
		break;
 8008ade:	f000 be3a 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_RIGHT_VEL_SATEU :
		fBRightVG[0] = par->param_buffer[0].data;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	4a9d      	ldr	r2, [pc, #628]	; (8008d5c <APPSet+0x9f8>)
 8008ae8:	6013      	str	r3, [r2, #0]
		fBRightVG[1] = par->param_buffer[1].data;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	4a9b      	ldr	r2, [pc, #620]	; (8008d5c <APPSet+0x9f8>)
 8008af0:	6053      	str	r3, [r2, #4]
		fBRightVG[2] = par->param_buffer[2].data;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	4a99      	ldr	r2, [pc, #612]	; (8008d5c <APPSet+0x9f8>)
 8008af8:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fBRightVG[0], &bright_vel);
 8008afa:	4b98      	ldr	r3, [pc, #608]	; (8008d5c <APPSet+0x9f8>)
 8008afc:	edd3 7a00 	vldr	s15, [r3]
 8008b00:	4997      	ldr	r1, [pc, #604]	; (8008d60 <APPSet+0x9fc>)
 8008b02:	eeb0 0a67 	vmov.f32	s0, s15
 8008b06:	2001      	movs	r0, #1
 8008b08:	f7fb fdd4 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fBRightVG[1], &bright_vel);
 8008b0c:	4b93      	ldr	r3, [pc, #588]	; (8008d5c <APPSet+0x9f8>)
 8008b0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b12:	4993      	ldr	r1, [pc, #588]	; (8008d60 <APPSet+0x9fc>)
 8008b14:	eeb0 0a67 	vmov.f32	s0, s15
 8008b18:	2002      	movs	r0, #2
 8008b1a:	f7fb fdcb 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fBRightVG[2], &bright_vel);
 8008b1e:	4b8f      	ldr	r3, [pc, #572]	; (8008d5c <APPSet+0x9f8>)
 8008b20:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b24:	498e      	ldr	r1, [pc, #568]	; (8008d60 <APPSet+0x9fc>)
 8008b26:	eeb0 0a67 	vmov.f32	s0, s15
 8008b2a:	2003      	movs	r0, #3
 8008b2c:	f7fb fdc2 	bl	80046b4 <PIDGainSet>
		break;
 8008b30:	f000 be11 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_RIGHT_VEL_PID :
		fBRightVG[3] = par->param_buffer[0].data;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4a88      	ldr	r2, [pc, #544]	; (8008d5c <APPSet+0x9f8>)
 8008b3a:	60d3      	str	r3, [r2, #12]
		fBRightVG[4] = par->param_buffer[1].data;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	4a86      	ldr	r2, [pc, #536]	; (8008d5c <APPSet+0x9f8>)
 8008b42:	6113      	str	r3, [r2, #16]
		fBRightVG[5] = par->param_buffer[2].data;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4a84      	ldr	r2, [pc, #528]	; (8008d5c <APPSet+0x9f8>)
 8008b4a:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fBRightVG[3], &bright_vel);
 8008b4c:	4b83      	ldr	r3, [pc, #524]	; (8008d5c <APPSet+0x9f8>)
 8008b4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008b52:	4983      	ldr	r1, [pc, #524]	; (8008d60 <APPSet+0x9fc>)
 8008b54:	eeb0 0a67 	vmov.f32	s0, s15
 8008b58:	2004      	movs	r0, #4
 8008b5a:	f7fb fdab 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fBRightVG[4], &bright_vel);
 8008b5e:	4b7f      	ldr	r3, [pc, #508]	; (8008d5c <APPSet+0x9f8>)
 8008b60:	edd3 7a04 	vldr	s15, [r3, #16]
 8008b64:	497e      	ldr	r1, [pc, #504]	; (8008d60 <APPSet+0x9fc>)
 8008b66:	eeb0 0a67 	vmov.f32	s0, s15
 8008b6a:	2005      	movs	r0, #5
 8008b6c:	f7fb fda2 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fBRightVG[5], &bright_vel);
 8008b70:	4b7a      	ldr	r3, [pc, #488]	; (8008d5c <APPSet+0x9f8>)
 8008b72:	edd3 7a05 	vldr	s15, [r3, #20]
 8008b76:	497a      	ldr	r1, [pc, #488]	; (8008d60 <APPSet+0x9fc>)
 8008b78:	eeb0 0a67 	vmov.f32	s0, s15
 8008b7c:	2006      	movs	r0, #6
 8008b7e:	f7fb fd99 	bl	80046b4 <PIDGainSet>
		break;
 8008b82:	f000 bde8 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_LEFT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzFLeftVG[0] = par->param_buffer[0].data;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4a76      	ldr	r2, [pc, #472]	; (8008d64 <APPSet+0xa00>)
 8008b8c:	6013      	str	r3, [r2, #0]
		fFuzFLeftVG[1] = par->param_buffer[1].data;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	4a74      	ldr	r2, [pc, #464]	; (8008d64 <APPSet+0xa00>)
 8008b94:	6053      	str	r3, [r2, #4]
		fFuzFLeftVG[2] = par->param_buffer[2].data;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	4a72      	ldr	r2, [pc, #456]	; (8008d64 <APPSet+0xa00>)
 8008b9c:	6093      	str	r3, [r2, #8]
		fFuzFLeftVG[3] = par->param_buffer[3].data;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	4a70      	ldr	r2, [pc, #448]	; (8008d64 <APPSet+0xa00>)
 8008ba4:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzFLeftVG[0], &fuz_fleft_vel);
 8008ba6:	4b6f      	ldr	r3, [pc, #444]	; (8008d64 <APPSet+0xa00>)
 8008ba8:	edd3 7a00 	vldr	s15, [r3]
 8008bac:	496e      	ldr	r1, [pc, #440]	; (8008d68 <APPSet+0xa04>)
 8008bae:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f7fa fe83 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzFLeftVG[1], &fuz_fleft_vel);
 8008bb8:	4b6a      	ldr	r3, [pc, #424]	; (8008d64 <APPSet+0xa00>)
 8008bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8008bbe:	496a      	ldr	r1, [pc, #424]	; (8008d68 <APPSet+0xa04>)
 8008bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	f7fa fe7a 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzFLeftVG[2], &fuz_fleft_vel);
 8008bca:	4b66      	ldr	r3, [pc, #408]	; (8008d64 <APPSet+0xa00>)
 8008bcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008bd0:	4965      	ldr	r1, [pc, #404]	; (8008d68 <APPSet+0xa04>)
 8008bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bd6:	2002      	movs	r0, #2
 8008bd8:	f7fa fe71 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzFLeftVG[3], &fuz_fleft_vel);
 8008bdc:	4b61      	ldr	r3, [pc, #388]	; (8008d64 <APPSet+0xa00>)
 8008bde:	edd3 7a03 	vldr	s15, [r3, #12]
 8008be2:	4961      	ldr	r1, [pc, #388]	; (8008d68 <APPSet+0xa04>)
 8008be4:	eeb0 0a67 	vmov.f32	s0, s15
 8008be8:	2003      	movs	r0, #3
 8008bea:	f7fa fe68 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008bee:	f000 bdb2 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_LEFT_VEL_FUZZY_PID_BASE :
		fFuzFLeftVG[4] = par->param_buffer[0].data;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	4a5b      	ldr	r2, [pc, #364]	; (8008d64 <APPSet+0xa00>)
 8008bf8:	6113      	str	r3, [r2, #16]
		fFuzFLeftVG[5] = par->param_buffer[1].data;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	4a59      	ldr	r2, [pc, #356]	; (8008d64 <APPSet+0xa00>)
 8008c00:	6153      	str	r3, [r2, #20]
		fFuzFLeftVG[6] = par->param_buffer[2].data;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	4a57      	ldr	r2, [pc, #348]	; (8008d64 <APPSet+0xa00>)
 8008c08:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzFLeftVG[4], &fuz_fleft_vel);
 8008c0a:	4b56      	ldr	r3, [pc, #344]	; (8008d64 <APPSet+0xa00>)
 8008c0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c10:	4955      	ldr	r1, [pc, #340]	; (8008d68 <APPSet+0xa04>)
 8008c12:	eeb0 0a67 	vmov.f32	s0, s15
 8008c16:	2007      	movs	r0, #7
 8008c18:	f7fa fe51 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzFLeftVG[5], &fuz_fleft_vel);
 8008c1c:	4b51      	ldr	r3, [pc, #324]	; (8008d64 <APPSet+0xa00>)
 8008c1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008c22:	4951      	ldr	r1, [pc, #324]	; (8008d68 <APPSet+0xa04>)
 8008c24:	eeb0 0a67 	vmov.f32	s0, s15
 8008c28:	2008      	movs	r0, #8
 8008c2a:	f7fa fe48 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzFLeftVG[6], &fuz_fleft_vel);
 8008c2e:	4b4d      	ldr	r3, [pc, #308]	; (8008d64 <APPSet+0xa00>)
 8008c30:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c34:	494c      	ldr	r1, [pc, #304]	; (8008d68 <APPSet+0xa04>)
 8008c36:	eeb0 0a67 	vmov.f32	s0, s15
 8008c3a:	2009      	movs	r0, #9
 8008c3c:	f7fa fe3f 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008c40:	f000 bd89 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_LEFT_VEL_FUZZY_PID_PARAM :
		fFuzFLeftVG[7] = par->param_buffer[0].data;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4a46      	ldr	r2, [pc, #280]	; (8008d64 <APPSet+0xa00>)
 8008c4a:	61d3      	str	r3, [r2, #28]
		fFuzFLeftVG[8] = par->param_buffer[1].data;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	4a44      	ldr	r2, [pc, #272]	; (8008d64 <APPSet+0xa00>)
 8008c52:	6213      	str	r3, [r2, #32]
		fFuzFLeftVG[9] = par->param_buffer[2].data;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	4a42      	ldr	r2, [pc, #264]	; (8008d64 <APPSet+0xa00>)
 8008c5a:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzFLeftVG[7], &fuz_fleft_vel);
 8008c5c:	4b41      	ldr	r3, [pc, #260]	; (8008d64 <APPSet+0xa00>)
 8008c5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c62:	4941      	ldr	r1, [pc, #260]	; (8008d68 <APPSet+0xa04>)
 8008c64:	eeb0 0a67 	vmov.f32	s0, s15
 8008c68:	200a      	movs	r0, #10
 8008c6a:	f7fa fe28 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzFLeftVG[8], &fuz_fleft_vel);
 8008c6e:	4b3d      	ldr	r3, [pc, #244]	; (8008d64 <APPSet+0xa00>)
 8008c70:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c74:	493c      	ldr	r1, [pc, #240]	; (8008d68 <APPSet+0xa04>)
 8008c76:	eeb0 0a67 	vmov.f32	s0, s15
 8008c7a:	200b      	movs	r0, #11
 8008c7c:	f7fa fe1f 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzFLeftVG[9], &fuz_fleft_vel);
 8008c80:	4b38      	ldr	r3, [pc, #224]	; (8008d64 <APPSet+0xa00>)
 8008c82:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008c86:	4938      	ldr	r1, [pc, #224]	; (8008d68 <APPSet+0xa04>)
 8008c88:	eeb0 0a67 	vmov.f32	s0, s15
 8008c8c:	200c      	movs	r0, #12
 8008c8e:	f7fa fe16 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008c92:	f000 bd60 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_RIGHT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzFRightVG[0] = par->param_buffer[0].data;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	4a34      	ldr	r2, [pc, #208]	; (8008d6c <APPSet+0xa08>)
 8008c9c:	6013      	str	r3, [r2, #0]
		fFuzFRightVG[1] = par->param_buffer[1].data;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	4a32      	ldr	r2, [pc, #200]	; (8008d6c <APPSet+0xa08>)
 8008ca4:	6053      	str	r3, [r2, #4]
		fFuzFRightVG[2] = par->param_buffer[2].data;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	4a30      	ldr	r2, [pc, #192]	; (8008d6c <APPSet+0xa08>)
 8008cac:	6093      	str	r3, [r2, #8]
		fFuzFRightVG[3] = par->param_buffer[3].data;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	4a2e      	ldr	r2, [pc, #184]	; (8008d6c <APPSet+0xa08>)
 8008cb4:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzFRightVG[0], &fuz_fright_vel);
 8008cb6:	4b2d      	ldr	r3, [pc, #180]	; (8008d6c <APPSet+0xa08>)
 8008cb8:	edd3 7a00 	vldr	s15, [r3]
 8008cbc:	492c      	ldr	r1, [pc, #176]	; (8008d70 <APPSet+0xa0c>)
 8008cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	f7fa fdfb 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzFRightVG[1], &fuz_fright_vel);
 8008cc8:	4b28      	ldr	r3, [pc, #160]	; (8008d6c <APPSet+0xa08>)
 8008cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cce:	4928      	ldr	r1, [pc, #160]	; (8008d70 <APPSet+0xa0c>)
 8008cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd4:	2001      	movs	r0, #1
 8008cd6:	f7fa fdf2 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzFRightVG[2], &fuz_fright_vel);
 8008cda:	4b24      	ldr	r3, [pc, #144]	; (8008d6c <APPSet+0xa08>)
 8008cdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ce0:	4923      	ldr	r1, [pc, #140]	; (8008d70 <APPSet+0xa0c>)
 8008ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ce6:	2002      	movs	r0, #2
 8008ce8:	f7fa fde9 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzFRightVG[3], &fuz_fright_vel);
 8008cec:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <APPSet+0xa08>)
 8008cee:	edd3 7a03 	vldr	s15, [r3, #12]
 8008cf2:	491f      	ldr	r1, [pc, #124]	; (8008d70 <APPSet+0xa0c>)
 8008cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8008cf8:	2003      	movs	r0, #3
 8008cfa:	f7fa fde0 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008cfe:	f000 bd2a 	b.w	8009756 <APPSet+0x13f2>

	case RNS_F_RIGHT_VEL_FUZZY_PID_BASE :
		fFuzFRightVG[4] = par->param_buffer[0].data;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <APPSet+0xa08>)
 8008d08:	6113      	str	r3, [r2, #16]
		fFuzFRightVG[5] = par->param_buffer[1].data;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	4a17      	ldr	r2, [pc, #92]	; (8008d6c <APPSet+0xa08>)
 8008d10:	6153      	str	r3, [r2, #20]
		fFuzFRightVG[6] = par->param_buffer[2].data;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	4a15      	ldr	r2, [pc, #84]	; (8008d6c <APPSet+0xa08>)
 8008d18:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzFRightVG[4], &fuz_fright_vel);
 8008d1a:	4b14      	ldr	r3, [pc, #80]	; (8008d6c <APPSet+0xa08>)
 8008d1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008d20:	4913      	ldr	r1, [pc, #76]	; (8008d70 <APPSet+0xa0c>)
 8008d22:	eeb0 0a67 	vmov.f32	s0, s15
 8008d26:	2007      	movs	r0, #7
 8008d28:	f7fa fdc9 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzFRightVG[5], &fuz_fright_vel);
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <APPSet+0xa08>)
 8008d2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d32:	490f      	ldr	r1, [pc, #60]	; (8008d70 <APPSet+0xa0c>)
 8008d34:	eeb0 0a67 	vmov.f32	s0, s15
 8008d38:	2008      	movs	r0, #8
 8008d3a:	f7fa fdc0 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzFRightVG[6], &fuz_fright_vel);
 8008d3e:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <APPSet+0xa08>)
 8008d40:	edd3 7a06 	vldr	s15, [r3, #24]
 8008d44:	490a      	ldr	r1, [pc, #40]	; (8008d70 <APPSet+0xa0c>)
 8008d46:	eeb0 0a67 	vmov.f32	s0, s15
 8008d4a:	2009      	movs	r0, #9
 8008d4c:	f7fa fdb7 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008d50:	f000 bd01 	b.w	8009756 <APPSet+0x13f2>
 8008d54:	20000104 	.word	0x20000104
 8008d58:	20006dc0 	.word	0x20006dc0
 8008d5c:	2000013c 	.word	0x2000013c
 8008d60:	20007dac 	.word	0x20007dac
 8008d64:	20000048 	.word	0x20000048
 8008d68:	20007a80 	.word	0x20007a80
 8008d6c:	20000070 	.word	0x20000070
 8008d70:	2000794c 	.word	0x2000794c

	case RNS_F_RIGHT_VEL_FUZZY_PID_PARAM :
		fFuzFRightVG[7] = par->param_buffer[0].data;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	4aa3      	ldr	r2, [pc, #652]	; (8009008 <APPSet+0xca4>)
 8008d7a:	61d3      	str	r3, [r2, #28]
		fFuzFRightVG[8] = par->param_buffer[1].data;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4aa1      	ldr	r2, [pc, #644]	; (8009008 <APPSet+0xca4>)
 8008d82:	6213      	str	r3, [r2, #32]
		fFuzFRightVG[9] = par->param_buffer[2].data;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	4a9f      	ldr	r2, [pc, #636]	; (8009008 <APPSet+0xca4>)
 8008d8a:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzFRightVG[7], &fuz_fright_vel);
 8008d8c:	4b9e      	ldr	r3, [pc, #632]	; (8009008 <APPSet+0xca4>)
 8008d8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008d92:	499e      	ldr	r1, [pc, #632]	; (800900c <APPSet+0xca8>)
 8008d94:	eeb0 0a67 	vmov.f32	s0, s15
 8008d98:	200a      	movs	r0, #10
 8008d9a:	f7fa fd90 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzFRightVG[8], &fuz_fright_vel);
 8008d9e:	4b9a      	ldr	r3, [pc, #616]	; (8009008 <APPSet+0xca4>)
 8008da0:	edd3 7a08 	vldr	s15, [r3, #32]
 8008da4:	4999      	ldr	r1, [pc, #612]	; (800900c <APPSet+0xca8>)
 8008da6:	eeb0 0a67 	vmov.f32	s0, s15
 8008daa:	200b      	movs	r0, #11
 8008dac:	f7fa fd87 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzFRightVG[9], &fuz_fright_vel);
 8008db0:	4b95      	ldr	r3, [pc, #596]	; (8009008 <APPSet+0xca4>)
 8008db2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008db6:	4995      	ldr	r1, [pc, #596]	; (800900c <APPSet+0xca8>)
 8008db8:	eeb0 0a67 	vmov.f32	s0, s15
 8008dbc:	200c      	movs	r0, #12
 8008dbe:	f7fa fd7e 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008dc2:	f000 bcc8 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_LEFT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzBLeftVG[0] = par->param_buffer[0].data;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	4a91      	ldr	r2, [pc, #580]	; (8009010 <APPSet+0xcac>)
 8008dcc:	6013      	str	r3, [r2, #0]
		fFuzBLeftVG[1] = par->param_buffer[1].data;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	4a8f      	ldr	r2, [pc, #572]	; (8009010 <APPSet+0xcac>)
 8008dd4:	6053      	str	r3, [r2, #4]
		fFuzBLeftVG[2] = par->param_buffer[2].data;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	4a8d      	ldr	r2, [pc, #564]	; (8009010 <APPSet+0xcac>)
 8008ddc:	6093      	str	r3, [r2, #8]
		fFuzBLeftVG[3] = par->param_buffer[3].data;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	4a8b      	ldr	r2, [pc, #556]	; (8009010 <APPSet+0xcac>)
 8008de4:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzBLeftVG[0], &fuz_bleft_vel);
 8008de6:	4b8a      	ldr	r3, [pc, #552]	; (8009010 <APPSet+0xcac>)
 8008de8:	edd3 7a00 	vldr	s15, [r3]
 8008dec:	4989      	ldr	r1, [pc, #548]	; (8009014 <APPSet+0xcb0>)
 8008dee:	eeb0 0a67 	vmov.f32	s0, s15
 8008df2:	2000      	movs	r0, #0
 8008df4:	f7fa fd63 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzBLeftVG[1], &fuz_bleft_vel);
 8008df8:	4b85      	ldr	r3, [pc, #532]	; (8009010 <APPSet+0xcac>)
 8008dfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8008dfe:	4985      	ldr	r1, [pc, #532]	; (8009014 <APPSet+0xcb0>)
 8008e00:	eeb0 0a67 	vmov.f32	s0, s15
 8008e04:	2001      	movs	r0, #1
 8008e06:	f7fa fd5a 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzBLeftVG[2], &fuz_bleft_vel);
 8008e0a:	4b81      	ldr	r3, [pc, #516]	; (8009010 <APPSet+0xcac>)
 8008e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e10:	4980      	ldr	r1, [pc, #512]	; (8009014 <APPSet+0xcb0>)
 8008e12:	eeb0 0a67 	vmov.f32	s0, s15
 8008e16:	2002      	movs	r0, #2
 8008e18:	f7fa fd51 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzBLeftVG[3], &fuz_bleft_vel);
 8008e1c:	4b7c      	ldr	r3, [pc, #496]	; (8009010 <APPSet+0xcac>)
 8008e1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e22:	497c      	ldr	r1, [pc, #496]	; (8009014 <APPSet+0xcb0>)
 8008e24:	eeb0 0a67 	vmov.f32	s0, s15
 8008e28:	2003      	movs	r0, #3
 8008e2a:	f7fa fd48 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008e2e:	f000 bc92 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_LEFT_VEL_FUZZY_PID_BASE :
		fFuzBLeftVG[4] = par->param_buffer[0].data;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	4a76      	ldr	r2, [pc, #472]	; (8009010 <APPSet+0xcac>)
 8008e38:	6113      	str	r3, [r2, #16]
		fFuzBLeftVG[5] = par->param_buffer[1].data;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	4a74      	ldr	r2, [pc, #464]	; (8009010 <APPSet+0xcac>)
 8008e40:	6153      	str	r3, [r2, #20]
		fFuzBLeftVG[6] = par->param_buffer[2].data;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	4a72      	ldr	r2, [pc, #456]	; (8009010 <APPSet+0xcac>)
 8008e48:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzBLeftVG[4], &fuz_bleft_vel);
 8008e4a:	4b71      	ldr	r3, [pc, #452]	; (8009010 <APPSet+0xcac>)
 8008e4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008e50:	4970      	ldr	r1, [pc, #448]	; (8009014 <APPSet+0xcb0>)
 8008e52:	eeb0 0a67 	vmov.f32	s0, s15
 8008e56:	2007      	movs	r0, #7
 8008e58:	f7fa fd31 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzBLeftVG[5], &fuz_bleft_vel);
 8008e5c:	4b6c      	ldr	r3, [pc, #432]	; (8009010 <APPSet+0xcac>)
 8008e5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008e62:	496c      	ldr	r1, [pc, #432]	; (8009014 <APPSet+0xcb0>)
 8008e64:	eeb0 0a67 	vmov.f32	s0, s15
 8008e68:	2008      	movs	r0, #8
 8008e6a:	f7fa fd28 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzBLeftVG[6], &fuz_bleft_vel);
 8008e6e:	4b68      	ldr	r3, [pc, #416]	; (8009010 <APPSet+0xcac>)
 8008e70:	edd3 7a06 	vldr	s15, [r3, #24]
 8008e74:	4967      	ldr	r1, [pc, #412]	; (8009014 <APPSet+0xcb0>)
 8008e76:	eeb0 0a67 	vmov.f32	s0, s15
 8008e7a:	2009      	movs	r0, #9
 8008e7c:	f7fa fd1f 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008e80:	f000 bc69 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_LEFT_VEL_FUZZY_PID_PARAM :
		fFuzBLeftVG[7] = par->param_buffer[0].data;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	4a61      	ldr	r2, [pc, #388]	; (8009010 <APPSet+0xcac>)
 8008e8a:	61d3      	str	r3, [r2, #28]
		fFuzBLeftVG[8] = par->param_buffer[1].data;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	4a5f      	ldr	r2, [pc, #380]	; (8009010 <APPSet+0xcac>)
 8008e92:	6213      	str	r3, [r2, #32]
		fFuzBLeftVG[9] = par->param_buffer[2].data;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4a5d      	ldr	r2, [pc, #372]	; (8009010 <APPSet+0xcac>)
 8008e9a:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzBLeftVG[7], &fuz_bleft_vel);
 8008e9c:	4b5c      	ldr	r3, [pc, #368]	; (8009010 <APPSet+0xcac>)
 8008e9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008ea2:	495c      	ldr	r1, [pc, #368]	; (8009014 <APPSet+0xcb0>)
 8008ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ea8:	200a      	movs	r0, #10
 8008eaa:	f7fa fd08 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzBLeftVG[8], &fuz_bleft_vel);
 8008eae:	4b58      	ldr	r3, [pc, #352]	; (8009010 <APPSet+0xcac>)
 8008eb0:	edd3 7a08 	vldr	s15, [r3, #32]
 8008eb4:	4957      	ldr	r1, [pc, #348]	; (8009014 <APPSet+0xcb0>)
 8008eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8008eba:	200b      	movs	r0, #11
 8008ebc:	f7fa fcff 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzBLeftVG[9], &fuz_bleft_vel);
 8008ec0:	4b53      	ldr	r3, [pc, #332]	; (8009010 <APPSet+0xcac>)
 8008ec2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008ec6:	4953      	ldr	r1, [pc, #332]	; (8009014 <APPSet+0xcb0>)
 8008ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8008ecc:	200c      	movs	r0, #12
 8008ece:	f7fa fcf6 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008ed2:	f000 bc40 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_RIGHT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzBRightVG[0] = par->param_buffer[0].data;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	4a4f      	ldr	r2, [pc, #316]	; (8009018 <APPSet+0xcb4>)
 8008edc:	6013      	str	r3, [r2, #0]
		fFuzBRightVG[1] = par->param_buffer[1].data;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	4a4d      	ldr	r2, [pc, #308]	; (8009018 <APPSet+0xcb4>)
 8008ee4:	6053      	str	r3, [r2, #4]
		fFuzBRightVG[2] = par->param_buffer[2].data;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	4a4b      	ldr	r2, [pc, #300]	; (8009018 <APPSet+0xcb4>)
 8008eec:	6093      	str	r3, [r2, #8]
		fFuzBRightVG[3] = par->param_buffer[3].data;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	4a49      	ldr	r2, [pc, #292]	; (8009018 <APPSet+0xcb4>)
 8008ef4:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzBRightVG[0], &fuz_bright_vel);
 8008ef6:	4b48      	ldr	r3, [pc, #288]	; (8009018 <APPSet+0xcb4>)
 8008ef8:	edd3 7a00 	vldr	s15, [r3]
 8008efc:	4947      	ldr	r1, [pc, #284]	; (800901c <APPSet+0xcb8>)
 8008efe:	eeb0 0a67 	vmov.f32	s0, s15
 8008f02:	2000      	movs	r0, #0
 8008f04:	f7fa fcdb 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzBRightVG[1], &fuz_bright_vel);
 8008f08:	4b43      	ldr	r3, [pc, #268]	; (8009018 <APPSet+0xcb4>)
 8008f0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f0e:	4943      	ldr	r1, [pc, #268]	; (800901c <APPSet+0xcb8>)
 8008f10:	eeb0 0a67 	vmov.f32	s0, s15
 8008f14:	2001      	movs	r0, #1
 8008f16:	f7fa fcd2 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzBRightVG[2], &fuz_bright_vel);
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	; (8009018 <APPSet+0xcb4>)
 8008f1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008f20:	493e      	ldr	r1, [pc, #248]	; (800901c <APPSet+0xcb8>)
 8008f22:	eeb0 0a67 	vmov.f32	s0, s15
 8008f26:	2002      	movs	r0, #2
 8008f28:	f7fa fcc9 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzBRightVG[3], &fuz_bright_vel);
 8008f2c:	4b3a      	ldr	r3, [pc, #232]	; (8009018 <APPSet+0xcb4>)
 8008f2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f32:	493a      	ldr	r1, [pc, #232]	; (800901c <APPSet+0xcb8>)
 8008f34:	eeb0 0a67 	vmov.f32	s0, s15
 8008f38:	2003      	movs	r0, #3
 8008f3a:	f7fa fcc0 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008f3e:	f000 bc0a 	b.w	8009756 <APPSet+0x13f2>

	case RNS_B_RIGHT_VEL_FUZZY_PID_BASE :
		fFuzBRightVG[4] = par->param_buffer[0].data;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4a34      	ldr	r2, [pc, #208]	; (8009018 <APPSet+0xcb4>)
 8008f48:	6113      	str	r3, [r2, #16]
		fFuzBRightVG[5] = par->param_buffer[1].data;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	4a32      	ldr	r2, [pc, #200]	; (8009018 <APPSet+0xcb4>)
 8008f50:	6153      	str	r3, [r2, #20]
		fFuzBRightVG[6] = par->param_buffer[2].data;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4a30      	ldr	r2, [pc, #192]	; (8009018 <APPSet+0xcb4>)
 8008f58:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzBRightVG[4], &fuz_bright_vel);
 8008f5a:	4b2f      	ldr	r3, [pc, #188]	; (8009018 <APPSet+0xcb4>)
 8008f5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f60:	492e      	ldr	r1, [pc, #184]	; (800901c <APPSet+0xcb8>)
 8008f62:	eeb0 0a67 	vmov.f32	s0, s15
 8008f66:	2007      	movs	r0, #7
 8008f68:	f7fa fca9 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzBRightVG[5], &fuz_bright_vel);
 8008f6c:	4b2a      	ldr	r3, [pc, #168]	; (8009018 <APPSet+0xcb4>)
 8008f6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008f72:	492a      	ldr	r1, [pc, #168]	; (800901c <APPSet+0xcb8>)
 8008f74:	eeb0 0a67 	vmov.f32	s0, s15
 8008f78:	2008      	movs	r0, #8
 8008f7a:	f7fa fca0 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzBRightVG[6], &fuz_bright_vel);
 8008f7e:	4b26      	ldr	r3, [pc, #152]	; (8009018 <APPSet+0xcb4>)
 8008f80:	edd3 7a06 	vldr	s15, [r3, #24]
 8008f84:	4925      	ldr	r1, [pc, #148]	; (800901c <APPSet+0xcb8>)
 8008f86:	eeb0 0a67 	vmov.f32	s0, s15
 8008f8a:	2009      	movs	r0, #9
 8008f8c:	f7fa fc97 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008f90:	e3e1      	b.n	8009756 <APPSet+0x13f2>

	case RNS_B_RIGHT_VEL_FUZZY_PID_PARAM :
		fFuzBRightVG[7] = par->param_buffer[0].data;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	4a20      	ldr	r2, [pc, #128]	; (8009018 <APPSet+0xcb4>)
 8008f98:	61d3      	str	r3, [r2, #28]
		fFuzBRightVG[8] = par->param_buffer[1].data;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	4a1e      	ldr	r2, [pc, #120]	; (8009018 <APPSet+0xcb4>)
 8008fa0:	6213      	str	r3, [r2, #32]
		fFuzBRightVG[9] = par->param_buffer[2].data;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	4a1c      	ldr	r2, [pc, #112]	; (8009018 <APPSet+0xcb4>)
 8008fa8:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzBRightVG[7], &fuz_bright_vel);
 8008faa:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <APPSet+0xcb4>)
 8008fac:	edd3 7a07 	vldr	s15, [r3, #28]
 8008fb0:	491a      	ldr	r1, [pc, #104]	; (800901c <APPSet+0xcb8>)
 8008fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8008fb6:	200a      	movs	r0, #10
 8008fb8:	f7fa fc81 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzBRightVG[8], &fuz_bright_vel);
 8008fbc:	4b16      	ldr	r3, [pc, #88]	; (8009018 <APPSet+0xcb4>)
 8008fbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8008fc2:	4916      	ldr	r1, [pc, #88]	; (800901c <APPSet+0xcb8>)
 8008fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc8:	200b      	movs	r0, #11
 8008fca:	f7fa fc78 	bl	80038be <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzBRightVG[9], &fuz_bright_vel);
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <APPSet+0xcb4>)
 8008fd0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008fd4:	4911      	ldr	r1, [pc, #68]	; (800901c <APPSet+0xcb8>)
 8008fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008fda:	200c      	movs	r0, #12
 8008fdc:	f7fa fc6f 	bl	80038be <FuzzyPIDGainSet>
		break;
 8008fe0:	e3b9      	b.n	8009756 <APPSet+0x13f2>

	case RNS_F_KCD_PTD :
		fFKcd = par->param_buffer[0].data;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <APPSet+0xcbc>)
 8008fe8:	6013      	str	r3, [r2, #0]
		fFPtd = par->param_buffer[1].data;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	4a0d      	ldr	r2, [pc, #52]	; (8009024 <APPSet+0xcc0>)
 8008ff0:	6013      	str	r3, [r2, #0]

		break;
 8008ff2:	e3b0      	b.n	8009756 <APPSet+0x13f2>

	case RNS_B_KCD_PTD :
		fBKcd = par->param_buffer[0].data;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	4a0b      	ldr	r2, [pc, #44]	; (8009028 <APPSet+0xcc4>)
 8008ffa:	6013      	str	r3, [r2, #0]
		fBPtd = par->param_buffer[1].data;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	4a0a      	ldr	r2, [pc, #40]	; (800902c <APPSet+0xcc8>)
 8009002:	6013      	str	r3, [r2, #0]
		break;
 8009004:	e3a7      	b.n	8009756 <APPSet+0x13f2>
 8009006:	bf00      	nop
 8009008:	20000070 	.word	0x20000070
 800900c:	2000794c 	.word	0x2000794c
 8009010:	20000098 	.word	0x20000098
 8009014:	20007c34 	.word	0x20007c34
 8009018:	200000c0 	.word	0x200000c0
 800901c:	20007e60 	.word	0x20007e60
 8009020:	200079f4 	.word	0x200079f4
 8009024:	20006ee4 	.word	0x20006ee4
 8009028:	20007f1c 	.word	0x20007f1c
 800902c:	20006750 	.word	0x20006750

	case RNS_X_Y_ENC_CONFIG :
		xPtd = par->param_buffer[0].data;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4aae      	ldr	r2, [pc, #696]	; (80092f0 <APPSet+0xf8c>)
 8009036:	6013      	str	r3, [r2, #0]
		yPtd = par->param_buffer[2].data;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	4aad      	ldr	r2, [pc, #692]	; (80092f4 <APPSet+0xf90>)
 800903e:	6013      	str	r3, [r2, #0]

		if(par->param_buffer[1].data == 1.0)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	edd3 7a02 	vldr	s15, [r3, #8]
 8009046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800904a:	eef4 7a47 	vcmp.f32	s15, s14
 800904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009052:	d104      	bne.n	800905e <APPSet+0xcfa>
			QEISwap(QEI2,QEI_No_Swap);
 8009054:	2100      	movs	r1, #0
 8009056:	2002      	movs	r0, #2
 8009058:	f7f8 ffd6 	bl	8002008 <QEISwap>
 800905c:	e00d      	b.n	800907a <APPSet+0xd16>
		else if(par->param_buffer[1].data == 2.0)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	edd3 7a02 	vldr	s15, [r3, #8]
 8009064:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009068:	eef4 7a47 	vcmp.f32	s15, s14
 800906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009070:	d103      	bne.n	800907a <APPSet+0xd16>
			QEISwap(QEI2,QEI_Swap);
 8009072:	2101      	movs	r1, #1
 8009074:	2002      	movs	r0, #2
 8009076:	f7f8 ffc7 	bl	8002008 <QEISwap>

		if(par->param_buffer[3].data == 1.0)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009084:	eef4 7a47 	vcmp.f32	s15, s14
 8009088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908c:	d104      	bne.n	8009098 <APPSet+0xd34>
			QEISwap(QEI5,QEI_No_Swap);
 800908e:	2100      	movs	r1, #0
 8009090:	2005      	movs	r0, #5
 8009092:	f7f8 ffb9 	bl	8002008 <QEISwap>
		else if(par->param_buffer[3].data == 2.0)
			QEISwap(QEI5,QEI_Swap);

		break;
 8009096:	e35b      	b.n	8009750 <APPSet+0x13ec>
		else if(par->param_buffer[3].data == 2.0)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	edd3 7a04 	vldr	s15, [r3, #16]
 800909e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090a2:	eef4 7a47 	vcmp.f32	s15, s14
 80090a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090aa:	f040 8351 	bne.w	8009750 <APPSet+0x13ec>
			QEISwap(QEI5,QEI_Swap);
 80090ae:	2101      	movs	r1, #1
 80090b0:	2005      	movs	r0, #5
 80090b2:	f7f8 ffa9 	bl	8002008 <QEISwap>
		break;
 80090b6:	e34b      	b.n	8009750 <APPSet+0x13ec>

	case RNS_RESET_POS:
		APPResetPos();
 80090b8:	f7ff f8d4 	bl	8008264 <APPResetPos>
		break;
 80090bc:	e34b      	b.n	8009756 <APPSet+0x13f2>

	case RNS_LF_DIST_SATEU:
		fLFDistG[0] = par->param_buffer[0].data;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4a8d      	ldr	r2, [pc, #564]	; (80092f8 <APPSet+0xf94>)
 80090c4:	6013      	str	r3, [r2, #0]
		fLFDistG[1] = par->param_buffer[1].data;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	4a8b      	ldr	r2, [pc, #556]	; (80092f8 <APPSet+0xf94>)
 80090cc:	6053      	str	r3, [r2, #4]
		fLFDistG[2] = par->param_buffer[2].data;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4a89      	ldr	r2, [pc, #548]	; (80092f8 <APPSet+0xf94>)
 80090d4:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fLFDistG[0], &lf_dist);
 80090d6:	4b88      	ldr	r3, [pc, #544]	; (80092f8 <APPSet+0xf94>)
 80090d8:	edd3 7a00 	vldr	s15, [r3]
 80090dc:	4987      	ldr	r1, [pc, #540]	; (80092fc <APPSet+0xf98>)
 80090de:	eeb0 0a67 	vmov.f32	s0, s15
 80090e2:	2001      	movs	r0, #1
 80090e4:	f7fb fae6 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fLFDistG[1], &lf_dist);
 80090e8:	4b83      	ldr	r3, [pc, #524]	; (80092f8 <APPSet+0xf94>)
 80090ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80090ee:	4983      	ldr	r1, [pc, #524]	; (80092fc <APPSet+0xf98>)
 80090f0:	eeb0 0a67 	vmov.f32	s0, s15
 80090f4:	2002      	movs	r0, #2
 80090f6:	f7fb fadd 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fLFDistG[2], &lf_dist);
 80090fa:	4b7f      	ldr	r3, [pc, #508]	; (80092f8 <APPSet+0xf94>)
 80090fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8009100:	497e      	ldr	r1, [pc, #504]	; (80092fc <APPSet+0xf98>)
 8009102:	eeb0 0a67 	vmov.f32	s0, s15
 8009106:	2003      	movs	r0, #3
 8009108:	f7fb fad4 	bl	80046b4 <PIDGainSet>
		break;
 800910c:	e323      	b.n	8009756 <APPSet+0x13f2>

	case RNS_LF_DIST_PID:
		fLFDistG[3] = par->param_buffer[0].data;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	4a79      	ldr	r2, [pc, #484]	; (80092f8 <APPSet+0xf94>)
 8009114:	60d3      	str	r3, [r2, #12]
		fLFDistG[4] = par->param_buffer[1].data;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	4a77      	ldr	r2, [pc, #476]	; (80092f8 <APPSet+0xf94>)
 800911c:	6113      	str	r3, [r2, #16]
		fLFDistG[5] = par->param_buffer[2].data;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	4a75      	ldr	r2, [pc, #468]	; (80092f8 <APPSet+0xf94>)
 8009124:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fLFDistG[3], &lf_dist);
 8009126:	4b74      	ldr	r3, [pc, #464]	; (80092f8 <APPSet+0xf94>)
 8009128:	edd3 7a03 	vldr	s15, [r3, #12]
 800912c:	4973      	ldr	r1, [pc, #460]	; (80092fc <APPSet+0xf98>)
 800912e:	eeb0 0a67 	vmov.f32	s0, s15
 8009132:	2004      	movs	r0, #4
 8009134:	f7fb fabe 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fLFDistG[4], &lf_dist);
 8009138:	4b6f      	ldr	r3, [pc, #444]	; (80092f8 <APPSet+0xf94>)
 800913a:	edd3 7a04 	vldr	s15, [r3, #16]
 800913e:	496f      	ldr	r1, [pc, #444]	; (80092fc <APPSet+0xf98>)
 8009140:	eeb0 0a67 	vmov.f32	s0, s15
 8009144:	2005      	movs	r0, #5
 8009146:	f7fb fab5 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fLFDistG[5], &lf_dist);
 800914a:	4b6b      	ldr	r3, [pc, #428]	; (80092f8 <APPSet+0xf94>)
 800914c:	edd3 7a05 	vldr	s15, [r3, #20]
 8009150:	496a      	ldr	r1, [pc, #424]	; (80092fc <APPSet+0xf98>)
 8009152:	eeb0 0a67 	vmov.f32	s0, s15
 8009156:	2006      	movs	r0, #6
 8009158:	f7fb faac 	bl	80046b4 <PIDGainSet>
		break;
 800915c:	e2fb      	b.n	8009756 <APPSet+0x13f2>

	case RNS_ROTATE_SATEU:
		fAngleG[0] = par->param_buffer[0].data;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	4a67      	ldr	r2, [pc, #412]	; (8009300 <APPSet+0xf9c>)
 8009164:	6013      	str	r3, [r2, #0]
		fAngleG[1] = par->param_buffer[1].data;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	4a65      	ldr	r2, [pc, #404]	; (8009300 <APPSet+0xf9c>)
 800916c:	6053      	str	r3, [r2, #4]
		fAngleG[2] = par->param_buffer[2].data;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	4a63      	ldr	r2, [pc, #396]	; (8009300 <APPSet+0xf9c>)
 8009174:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fAngleG[0], &imu_rotate);
 8009176:	4b62      	ldr	r3, [pc, #392]	; (8009300 <APPSet+0xf9c>)
 8009178:	edd3 7a00 	vldr	s15, [r3]
 800917c:	4961      	ldr	r1, [pc, #388]	; (8009304 <APPSet+0xfa0>)
 800917e:	eeb0 0a67 	vmov.f32	s0, s15
 8009182:	2001      	movs	r0, #1
 8009184:	f7fb fa96 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fAngleG[1], &imu_rotate);
 8009188:	4b5d      	ldr	r3, [pc, #372]	; (8009300 <APPSet+0xf9c>)
 800918a:	edd3 7a01 	vldr	s15, [r3, #4]
 800918e:	495d      	ldr	r1, [pc, #372]	; (8009304 <APPSet+0xfa0>)
 8009190:	eeb0 0a67 	vmov.f32	s0, s15
 8009194:	2002      	movs	r0, #2
 8009196:	f7fb fa8d 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fAngleG[2], &imu_rotate);
 800919a:	4b59      	ldr	r3, [pc, #356]	; (8009300 <APPSet+0xf9c>)
 800919c:	edd3 7a02 	vldr	s15, [r3, #8]
 80091a0:	4958      	ldr	r1, [pc, #352]	; (8009304 <APPSet+0xfa0>)
 80091a2:	eeb0 0a67 	vmov.f32	s0, s15
 80091a6:	2003      	movs	r0, #3
 80091a8:	f7fb fa84 	bl	80046b4 <PIDGainSet>
		break;
 80091ac:	e2d3      	b.n	8009756 <APPSet+0x13f2>

	case RNS_ROTATE_PID:
		fAngleG[3] = par->param_buffer[0].data;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	4a53      	ldr	r2, [pc, #332]	; (8009300 <APPSet+0xf9c>)
 80091b4:	60d3      	str	r3, [r2, #12]
		fAngleG[4] = par->param_buffer[1].data;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	4a51      	ldr	r2, [pc, #324]	; (8009300 <APPSet+0xf9c>)
 80091bc:	6113      	str	r3, [r2, #16]
		fAngleG[5] = par->param_buffer[2].data;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4a4f      	ldr	r2, [pc, #316]	; (8009300 <APPSet+0xf9c>)
 80091c4:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fAngleG[3], &imu_rotate);
 80091c6:	4b4e      	ldr	r3, [pc, #312]	; (8009300 <APPSet+0xf9c>)
 80091c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80091cc:	494d      	ldr	r1, [pc, #308]	; (8009304 <APPSet+0xfa0>)
 80091ce:	eeb0 0a67 	vmov.f32	s0, s15
 80091d2:	2004      	movs	r0, #4
 80091d4:	f7fb fa6e 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fAngleG[4], &imu_rotate);
 80091d8:	4b49      	ldr	r3, [pc, #292]	; (8009300 <APPSet+0xf9c>)
 80091da:	edd3 7a04 	vldr	s15, [r3, #16]
 80091de:	4949      	ldr	r1, [pc, #292]	; (8009304 <APPSet+0xfa0>)
 80091e0:	eeb0 0a67 	vmov.f32	s0, s15
 80091e4:	2005      	movs	r0, #5
 80091e6:	f7fb fa65 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fAngleG[5], &imu_rotate);
 80091ea:	4b45      	ldr	r3, [pc, #276]	; (8009300 <APPSet+0xf9c>)
 80091ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80091f0:	4944      	ldr	r1, [pc, #272]	; (8009304 <APPSet+0xfa0>)
 80091f2:	eeb0 0a67 	vmov.f32	s0, s15
 80091f6:	2006      	movs	r0, #6
 80091f8:	f7fb fa5c 	bl	80046b4 <PIDGainSet>
		break;
 80091fc:	e2ab      	b.n	8009756 <APPSet+0x13f2>

	case RNS_LF_ROTATE_SATEU:
		fRotateG[0] = par->param_buffer[0].data;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	4a41      	ldr	r2, [pc, #260]	; (8009308 <APPSet+0xfa4>)
 8009204:	6013      	str	r3, [r2, #0]
		fRotateG[1] = par->param_buffer[1].data;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	4a3f      	ldr	r2, [pc, #252]	; (8009308 <APPSet+0xfa4>)
 800920c:	6053      	str	r3, [r2, #4]
		fRotateG[2] = par->param_buffer[2].data;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	4a3d      	ldr	r2, [pc, #244]	; (8009308 <APPSet+0xfa4>)
 8009214:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fRotateG[0], &lf_rotate);
 8009216:	4b3c      	ldr	r3, [pc, #240]	; (8009308 <APPSet+0xfa4>)
 8009218:	edd3 7a00 	vldr	s15, [r3]
 800921c:	493b      	ldr	r1, [pc, #236]	; (800930c <APPSet+0xfa8>)
 800921e:	eeb0 0a67 	vmov.f32	s0, s15
 8009222:	2001      	movs	r0, #1
 8009224:	f7fb fa46 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fRotateG[1], &lf_rotate);
 8009228:	4b37      	ldr	r3, [pc, #220]	; (8009308 <APPSet+0xfa4>)
 800922a:	edd3 7a01 	vldr	s15, [r3, #4]
 800922e:	4937      	ldr	r1, [pc, #220]	; (800930c <APPSet+0xfa8>)
 8009230:	eeb0 0a67 	vmov.f32	s0, s15
 8009234:	2002      	movs	r0, #2
 8009236:	f7fb fa3d 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fRotateG[2], &lf_rotate);
 800923a:	4b33      	ldr	r3, [pc, #204]	; (8009308 <APPSet+0xfa4>)
 800923c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009240:	4932      	ldr	r1, [pc, #200]	; (800930c <APPSet+0xfa8>)
 8009242:	eeb0 0a67 	vmov.f32	s0, s15
 8009246:	2003      	movs	r0, #3
 8009248:	f7fb fa34 	bl	80046b4 <PIDGainSet>
		break;
 800924c:	e283      	b.n	8009756 <APPSet+0x13f2>

	case RNS_LF_ROTATE_PID:
		fRotateG[3] = par->param_buffer[0].data;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4a2d      	ldr	r2, [pc, #180]	; (8009308 <APPSet+0xfa4>)
 8009254:	60d3      	str	r3, [r2, #12]
		fRotateG[4] = par->param_buffer[1].data;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	4a2b      	ldr	r2, [pc, #172]	; (8009308 <APPSet+0xfa4>)
 800925c:	6113      	str	r3, [r2, #16]
		fRotateG[5] = par->param_buffer[2].data;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	4a29      	ldr	r2, [pc, #164]	; (8009308 <APPSet+0xfa4>)
 8009264:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fRotateG[3], &lf_rotate);
 8009266:	4b28      	ldr	r3, [pc, #160]	; (8009308 <APPSet+0xfa4>)
 8009268:	edd3 7a03 	vldr	s15, [r3, #12]
 800926c:	4927      	ldr	r1, [pc, #156]	; (800930c <APPSet+0xfa8>)
 800926e:	eeb0 0a67 	vmov.f32	s0, s15
 8009272:	2004      	movs	r0, #4
 8009274:	f7fb fa1e 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fRotateG[4], &lf_rotate);
 8009278:	4b23      	ldr	r3, [pc, #140]	; (8009308 <APPSet+0xfa4>)
 800927a:	edd3 7a04 	vldr	s15, [r3, #16]
 800927e:	4923      	ldr	r1, [pc, #140]	; (800930c <APPSet+0xfa8>)
 8009280:	eeb0 0a67 	vmov.f32	s0, s15
 8009284:	2005      	movs	r0, #5
 8009286:	f7fb fa15 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fRotateG[5], &lf_rotate);
 800928a:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <APPSet+0xfa4>)
 800928c:	edd3 7a05 	vldr	s15, [r3, #20]
 8009290:	491e      	ldr	r1, [pc, #120]	; (800930c <APPSet+0xfa8>)
 8009292:	eeb0 0a67 	vmov.f32	s0, s15
 8009296:	2006      	movs	r0, #6
 8009298:	f7fb fa0c 	bl	80046b4 <PIDGainSet>
		break;
 800929c:	e25b      	b.n	8009756 <APPSet+0x13f2>

	case RNS_LF_FWD_SATEU:
		fFwdG[0] = par->param_buffer[0].data;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4a1b      	ldr	r2, [pc, #108]	; (8009310 <APPSet+0xfac>)
 80092a4:	6013      	str	r3, [r2, #0]
		fFwdG[1] = par->param_buffer[1].data;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	4a19      	ldr	r2, [pc, #100]	; (8009310 <APPSet+0xfac>)
 80092ac:	6053      	str	r3, [r2, #4]
		fFwdG[2] = par->param_buffer[2].data;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	4a17      	ldr	r2, [pc, #92]	; (8009310 <APPSet+0xfac>)
 80092b4:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fFwdG[0], &lf_fwd);
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <APPSet+0xfac>)
 80092b8:	edd3 7a00 	vldr	s15, [r3]
 80092bc:	4915      	ldr	r1, [pc, #84]	; (8009314 <APPSet+0xfb0>)
 80092be:	eeb0 0a67 	vmov.f32	s0, s15
 80092c2:	2001      	movs	r0, #1
 80092c4:	f7fb f9f6 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KE, fFwdG[1], &lf_fwd);
 80092c8:	4b11      	ldr	r3, [pc, #68]	; (8009310 <APPSet+0xfac>)
 80092ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80092ce:	4911      	ldr	r1, [pc, #68]	; (8009314 <APPSet+0xfb0>)
 80092d0:	eeb0 0a67 	vmov.f32	s0, s15
 80092d4:	2002      	movs	r0, #2
 80092d6:	f7fb f9ed 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU, fFwdG[2], &lf_fwd);
 80092da:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <APPSet+0xfac>)
 80092dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80092e0:	490c      	ldr	r1, [pc, #48]	; (8009314 <APPSet+0xfb0>)
 80092e2:	eeb0 0a67 	vmov.f32	s0, s15
 80092e6:	2003      	movs	r0, #3
 80092e8:	f7fb f9e4 	bl	80046b4 <PIDGainSet>
		break;
 80092ec:	e233      	b.n	8009756 <APPSet+0x13f2>
 80092ee:	bf00      	nop
 80092f0:	20006630 	.word	0x20006630
 80092f4:	20006ee0 	.word	0x20006ee0
 80092f8:	20000158 	.word	0x20000158
 80092fc:	20007e0c 	.word	0x20007e0c
 8009300:	200001ac 	.word	0x200001ac
 8009304:	2000663c 	.word	0x2000663c
 8009308:	20000174 	.word	0x20000174
 800930c:	200079f8 	.word	0x200079f8
 8009310:	20000190 	.word	0x20000190
 8009314:	20007b2c 	.word	0x20007b2c

	case RNS_LF_FWD_PID:
		fFwdG[3] = par->param_buffer[0].data;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	4a9f      	ldr	r2, [pc, #636]	; (800959c <APPSet+0x1238>)
 800931e:	60d3      	str	r3, [r2, #12]
		fFwdG[4] = par->param_buffer[1].data;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	4a9d      	ldr	r2, [pc, #628]	; (800959c <APPSet+0x1238>)
 8009326:	6113      	str	r3, [r2, #16]
		fFwdG[5] = par->param_buffer[2].data;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	4a9b      	ldr	r2, [pc, #620]	; (800959c <APPSet+0x1238>)
 800932e:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fFwdG[3], &lf_fwd);
 8009330:	4b9a      	ldr	r3, [pc, #616]	; (800959c <APPSet+0x1238>)
 8009332:	edd3 7a03 	vldr	s15, [r3, #12]
 8009336:	499a      	ldr	r1, [pc, #616]	; (80095a0 <APPSet+0x123c>)
 8009338:	eeb0 0a67 	vmov.f32	s0, s15
 800933c:	2004      	movs	r0, #4
 800933e:	f7fb f9b9 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KI, fFwdG[4], &lf_fwd);
 8009342:	4b96      	ldr	r3, [pc, #600]	; (800959c <APPSet+0x1238>)
 8009344:	edd3 7a04 	vldr	s15, [r3, #16]
 8009348:	4995      	ldr	r1, [pc, #596]	; (80095a0 <APPSet+0x123c>)
 800934a:	eeb0 0a67 	vmov.f32	s0, s15
 800934e:	2005      	movs	r0, #5
 8009350:	f7fb f9b0 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KD, fFwdG[5], &lf_fwd);
 8009354:	4b91      	ldr	r3, [pc, #580]	; (800959c <APPSet+0x1238>)
 8009356:	edd3 7a05 	vldr	s15, [r3, #20]
 800935a:	4991      	ldr	r1, [pc, #580]	; (80095a0 <APPSet+0x123c>)
 800935c:	eeb0 0a67 	vmov.f32	s0, s15
 8009360:	2006      	movs	r0, #6
 8009362:	f7fb f9a7 	bl	80046b4 <PIDGainSet>
		break;
 8009366:	e1f6      	b.n	8009756 <APPSet+0x13f2>

	case RNS_LF_LSA_POS :

		if((int)par->param_buffer[0].data == AT_FRONT)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	edd3 7a01 	vldr	s15, [r3, #4]
 800936e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009372:	ee17 3a90 	vmov	r3, s15
 8009376:	2b0a      	cmp	r3, #10
 8009378:	d103      	bne.n	8009382 <APPSet+0x101e>
			 LSA_FRONT = &LSA_A;
 800937a:	4b8a      	ldr	r3, [pc, #552]	; (80095a4 <APPSet+0x1240>)
 800937c:	4a8a      	ldr	r2, [pc, #552]	; (80095a8 <APPSet+0x1244>)
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	e025      	b.n	80093ce <APPSet+0x106a>
		else if((int)par->param_buffer[0].data == AT_BACK)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	edd3 7a01 	vldr	s15, [r3, #4]
 8009388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800938c:	ee17 3a90 	vmov	r3, s15
 8009390:	2b0b      	cmp	r3, #11
 8009392:	d103      	bne.n	800939c <APPSet+0x1038>
			 LSA_BACK = &LSA_A;
 8009394:	4b85      	ldr	r3, [pc, #532]	; (80095ac <APPSet+0x1248>)
 8009396:	4a84      	ldr	r2, [pc, #528]	; (80095a8 <APPSet+0x1244>)
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e018      	b.n	80093ce <APPSet+0x106a>
		else if((int)par->param_buffer[0].data == AT_LEFT)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	edd3 7a01 	vldr	s15, [r3, #4]
 80093a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093a6:	ee17 3a90 	vmov	r3, s15
 80093aa:	2b0c      	cmp	r3, #12
 80093ac:	d103      	bne.n	80093b6 <APPSet+0x1052>
			 LSA_LEFT = &LSA_A;
 80093ae:	4b80      	ldr	r3, [pc, #512]	; (80095b0 <APPSet+0x124c>)
 80093b0:	4a7d      	ldr	r2, [pc, #500]	; (80095a8 <APPSet+0x1244>)
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e00b      	b.n	80093ce <APPSet+0x106a>
		else if((int)par->param_buffer[0].data == AT_RIGHT)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80093bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093c0:	ee17 3a90 	vmov	r3, s15
 80093c4:	2b0d      	cmp	r3, #13
 80093c6:	d102      	bne.n	80093ce <APPSet+0x106a>
			 LSA_RIGHT = &LSA_A;
 80093c8:	4b7a      	ldr	r3, [pc, #488]	; (80095b4 <APPSet+0x1250>)
 80093ca:	4a77      	ldr	r2, [pc, #476]	; (80095a8 <APPSet+0x1244>)
 80093cc:	601a      	str	r2, [r3, #0]

		if((int)par->param_buffer[1].data == AT_FRONT)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80093d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093d8:	ee17 3a90 	vmov	r3, s15
 80093dc:	2b0a      	cmp	r3, #10
 80093de:	d103      	bne.n	80093e8 <APPSet+0x1084>
			LSA_FRONT = &LSA_B;
 80093e0:	4b70      	ldr	r3, [pc, #448]	; (80095a4 <APPSet+0x1240>)
 80093e2:	4a75      	ldr	r2, [pc, #468]	; (80095b8 <APPSet+0x1254>)
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e025      	b.n	8009434 <APPSet+0x10d0>
		else if((int)par->param_buffer[1].data == AT_BACK)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80093ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093f2:	ee17 3a90 	vmov	r3, s15
 80093f6:	2b0b      	cmp	r3, #11
 80093f8:	d103      	bne.n	8009402 <APPSet+0x109e>
			LSA_BACK = &LSA_B;
 80093fa:	4b6c      	ldr	r3, [pc, #432]	; (80095ac <APPSet+0x1248>)
 80093fc:	4a6e      	ldr	r2, [pc, #440]	; (80095b8 <APPSet+0x1254>)
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	e018      	b.n	8009434 <APPSet+0x10d0>
		else if((int)par->param_buffer[1].data == AT_LEFT)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	edd3 7a02 	vldr	s15, [r3, #8]
 8009408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800940c:	ee17 3a90 	vmov	r3, s15
 8009410:	2b0c      	cmp	r3, #12
 8009412:	d103      	bne.n	800941c <APPSet+0x10b8>
			LSA_LEFT = &LSA_B ;
 8009414:	4b66      	ldr	r3, [pc, #408]	; (80095b0 <APPSet+0x124c>)
 8009416:	4a68      	ldr	r2, [pc, #416]	; (80095b8 <APPSet+0x1254>)
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e00b      	b.n	8009434 <APPSet+0x10d0>
		else if((int)par->param_buffer[1].data == AT_RIGHT)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009426:	ee17 3a90 	vmov	r3, s15
 800942a:	2b0d      	cmp	r3, #13
 800942c:	d102      	bne.n	8009434 <APPSet+0x10d0>
			LSA_RIGHT = &LSA_B;
 800942e:	4b61      	ldr	r3, [pc, #388]	; (80095b4 <APPSet+0x1250>)
 8009430:	4a61      	ldr	r2, [pc, #388]	; (80095b8 <APPSet+0x1254>)
 8009432:	601a      	str	r2, [r3, #0]

		if((int)par->param_buffer[2].data == AT_FRONT)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	edd3 7a03 	vldr	s15, [r3, #12]
 800943a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800943e:	ee17 3a90 	vmov	r3, s15
 8009442:	2b0a      	cmp	r3, #10
 8009444:	d103      	bne.n	800944e <APPSet+0x10ea>
			LSA_FRONT = &LSA_C;
 8009446:	4b57      	ldr	r3, [pc, #348]	; (80095a4 <APPSet+0x1240>)
 8009448:	4a5c      	ldr	r2, [pc, #368]	; (80095bc <APPSet+0x1258>)
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	e025      	b.n	800949a <APPSet+0x1136>
		else if((int)par->param_buffer[2].data == AT_BACK)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	edd3 7a03 	vldr	s15, [r3, #12]
 8009454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009458:	ee17 3a90 	vmov	r3, s15
 800945c:	2b0b      	cmp	r3, #11
 800945e:	d103      	bne.n	8009468 <APPSet+0x1104>
			LSA_BACK = &LSA_C;
 8009460:	4b52      	ldr	r3, [pc, #328]	; (80095ac <APPSet+0x1248>)
 8009462:	4a56      	ldr	r2, [pc, #344]	; (80095bc <APPSet+0x1258>)
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	e018      	b.n	800949a <APPSet+0x1136>
		else if((int)par->param_buffer[2].data == AT_LEFT)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	edd3 7a03 	vldr	s15, [r3, #12]
 800946e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009472:	ee17 3a90 	vmov	r3, s15
 8009476:	2b0c      	cmp	r3, #12
 8009478:	d103      	bne.n	8009482 <APPSet+0x111e>
			LSA_LEFT = &LSA_C;
 800947a:	4b4d      	ldr	r3, [pc, #308]	; (80095b0 <APPSet+0x124c>)
 800947c:	4a4f      	ldr	r2, [pc, #316]	; (80095bc <APPSet+0x1258>)
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	e00b      	b.n	800949a <APPSet+0x1136>
		else if((int)par->param_buffer[2].data == AT_RIGHT)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	edd3 7a03 	vldr	s15, [r3, #12]
 8009488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800948c:	ee17 3a90 	vmov	r3, s15
 8009490:	2b0d      	cmp	r3, #13
 8009492:	d102      	bne.n	800949a <APPSet+0x1136>
			LSA_RIGHT = &LSA_C;
 8009494:	4b47      	ldr	r3, [pc, #284]	; (80095b4 <APPSet+0x1250>)
 8009496:	4a49      	ldr	r2, [pc, #292]	; (80095bc <APPSet+0x1258>)
 8009498:	601a      	str	r2, [r3, #0]

		if((int)par->param_buffer[3].data == AT_FRONT)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	edd3 7a04 	vldr	s15, [r3, #16]
 80094a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094a4:	ee17 3a90 	vmov	r3, s15
 80094a8:	2b0a      	cmp	r3, #10
 80094aa:	d103      	bne.n	80094b4 <APPSet+0x1150>
			LSA_FRONT = &LSA_D;
 80094ac:	4b3d      	ldr	r3, [pc, #244]	; (80095a4 <APPSet+0x1240>)
 80094ae:	4a44      	ldr	r2, [pc, #272]	; (80095c0 <APPSet+0x125c>)
 80094b0:	601a      	str	r2, [r3, #0]
		else if((int)par->param_buffer[3].data == AT_LEFT)
			LSA_LEFT = &LSA_D;
		else if((int)par->param_buffer[3].data == AT_RIGHT)
			LSA_RIGHT = &LSA_D;

		break;
 80094b2:	e14f      	b.n	8009754 <APPSet+0x13f0>
		else if((int)par->param_buffer[3].data == AT_BACK)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80094ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094be:	ee17 3a90 	vmov	r3, s15
 80094c2:	2b0b      	cmp	r3, #11
 80094c4:	d103      	bne.n	80094ce <APPSet+0x116a>
			LSA_BACK = &LSA_D ;
 80094c6:	4b39      	ldr	r3, [pc, #228]	; (80095ac <APPSet+0x1248>)
 80094c8:	4a3d      	ldr	r2, [pc, #244]	; (80095c0 <APPSet+0x125c>)
 80094ca:	601a      	str	r2, [r3, #0]
		break;
 80094cc:	e142      	b.n	8009754 <APPSet+0x13f0>
		else if((int)par->param_buffer[3].data == AT_LEFT)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80094d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094d8:	ee17 3a90 	vmov	r3, s15
 80094dc:	2b0c      	cmp	r3, #12
 80094de:	d103      	bne.n	80094e8 <APPSet+0x1184>
			LSA_LEFT = &LSA_D;
 80094e0:	4b33      	ldr	r3, [pc, #204]	; (80095b0 <APPSet+0x124c>)
 80094e2:	4a37      	ldr	r2, [pc, #220]	; (80095c0 <APPSet+0x125c>)
 80094e4:	601a      	str	r2, [r3, #0]
		break;
 80094e6:	e135      	b.n	8009754 <APPSet+0x13f0>
		else if((int)par->param_buffer[3].data == AT_RIGHT)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80094ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094f2:	ee17 3a90 	vmov	r3, s15
 80094f6:	2b0d      	cmp	r3, #13
 80094f8:	f040 812c 	bne.w	8009754 <APPSet+0x13f0>
			LSA_RIGHT = &LSA_D;
 80094fc:	4b2d      	ldr	r3, [pc, #180]	; (80095b4 <APPSet+0x1250>)
 80094fe:	4a30      	ldr	r2, [pc, #192]	; (80095c0 <APPSet+0x125c>)
 8009500:	601a      	str	r2, [r3, #0]
		break;
 8009502:	e127      	b.n	8009754 <APPSet+0x13f0>

	case RNS_X_ABT:
		fXPosGain[0] = par->param_buffer[0].data;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4a2e      	ldr	r2, [pc, #184]	; (80095c4 <APPSet+0x1260>)
 800950a:	6013      	str	r3, [r2, #0]
		fXPosGain[1] = par->param_buffer[1].data;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	4a2c      	ldr	r2, [pc, #176]	; (80095c4 <APPSet+0x1260>)
 8009512:	6053      	str	r3, [r2, #4]
		fXPosGain[2] = par->param_buffer[2].data;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	4a2a      	ldr	r2, [pc, #168]	; (80095c4 <APPSet+0x1260>)
 800951a:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 800951c:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <APPSet+0x1260>)
 800951e:	edd3 7a00 	vldr	s15, [r3]
 8009522:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <APPSet+0x1260>)
 8009524:	ed93 7a01 	vldr	s14, [r3, #4]
 8009528:	4b26      	ldr	r3, [pc, #152]	; (80095c4 <APPSet+0x1260>)
 800952a:	edd3 6a02 	vldr	s13, [r3, #8]
 800952e:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <APPSet+0x1264>)
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4b26      	ldr	r3, [pc, #152]	; (80095cc <APPSet+0x1268>)
 8009534:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <APPSet+0x126c>)
 8009536:	4927      	ldr	r1, [pc, #156]	; (80095d4 <APPSet+0x1270>)
 8009538:	4827      	ldr	r0, [pc, #156]	; (80095d8 <APPSet+0x1274>)
 800953a:	eef0 1a66 	vmov.f32	s3, s13
 800953e:	eeb0 1a47 	vmov.f32	s2, s14
 8009542:	eef0 0a67 	vmov.f32	s1, s15
 8009546:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80095dc <APPSet+0x1278>
 800954a:	f7f7 fd4f 	bl	8000fec <ABTInit>
		break;
 800954e:	e102      	b.n	8009756 <APPSet+0x13f2>

	case RNS_Y_ABT:
		fYPosGain[0] = par->param_buffer[0].data;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <APPSet+0x127c>)
 8009556:	6013      	str	r3, [r2, #0]
		fYPosGain[1] = par->param_buffer[1].data;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	4a20      	ldr	r2, [pc, #128]	; (80095e0 <APPSet+0x127c>)
 800955e:	6053      	str	r3, [r2, #4]
		fYPosGain[2] = par->param_buffer[2].data;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <APPSet+0x127c>)
 8009566:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 8009568:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <APPSet+0x127c>)
 800956a:	edd3 7a00 	vldr	s15, [r3]
 800956e:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <APPSet+0x127c>)
 8009570:	ed93 7a01 	vldr	s14, [r3, #4]
 8009574:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <APPSet+0x127c>)
 8009576:	edd3 6a02 	vldr	s13, [r3, #8]
 800957a:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <APPSet+0x1280>)
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	4b1a      	ldr	r3, [pc, #104]	; (80095e8 <APPSet+0x1284>)
 8009580:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <APPSet+0x1288>)
 8009582:	491b      	ldr	r1, [pc, #108]	; (80095f0 <APPSet+0x128c>)
 8009584:	481b      	ldr	r0, [pc, #108]	; (80095f4 <APPSet+0x1290>)
 8009586:	eef0 1a66 	vmov.f32	s3, s13
 800958a:	eeb0 1a47 	vmov.f32	s2, s14
 800958e:	eef0 0a67 	vmov.f32	s1, s15
 8009592:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80095dc <APPSet+0x1278>
 8009596:	f7f7 fd29 	bl	8000fec <ABTInit>
		break;
 800959a:	e0dc      	b.n	8009756 <APPSet+0x13f2>
 800959c:	20000190 	.word	0x20000190
 80095a0:	20007b2c 	.word	0x20007b2c
 80095a4:	20006e20 	.word	0x20006e20
 80095a8:	2000738c 	.word	0x2000738c
 80095ac:	200079f0 	.word	0x200079f0
 80095b0:	200073f8 	.word	0x200073f8
 80095b4:	20007a74 	.word	0x20007a74
 80095b8:	2000767c 	.word	0x2000767c
 80095bc:	200077dc 	.word	0x200077dc
 80095c0:	20007b90 	.word	0x20007b90
 80095c4:	20000030 	.word	0x20000030
 80095c8:	20007eec 	.word	0x20007eec
 80095cc:	20006690 	.word	0x20006690
 80095d0:	20007a68 	.word	0x20007a68
 80095d4:	20007bf8 	.word	0x20007bf8
 80095d8:	200066c0 	.word	0x200066c0
 80095dc:	3ba3d70a 	.word	0x3ba3d70a
 80095e0:	2000003c 	.word	0x2000003c
 80095e4:	20006e68 	.word	0x20006e68
 80095e8:	20006da0 	.word	0x20006da0
 80095ec:	20006830 	.word	0x20006830
 80095f0:	20007a5c 	.word	0x20007a5c
 80095f4:	20007f0c 	.word	0x20007f0c

	case RNS_DEVICE_CONFIG :
		dev_cfg.motor_enc_dir = (uint8_t) par->param_buffer[0].data;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80095fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009602:	edc7 7a00 	vstr	s15, [r7]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b55      	ldr	r3, [pc, #340]	; (8009760 <APPSet+0x13fc>)
 800960c:	711a      	strb	r2, [r3, #4]
		dev_cfg.base_type = (unsigned char) par->param_buffer[1].data;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	edd3 7a02 	vldr	s15, [r3, #8]
 8009614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009618:	edc7 7a00 	vstr	s15, [r7]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	b2da      	uxtb	r2, r3
 8009620:	4b4f      	ldr	r3, [pc, #316]	; (8009760 <APPSet+0x13fc>)
 8009622:	701a      	strb	r2, [r3, #0]
		dev_cfg.PID_type = (unsigned char) par->param_buffer[2].data;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	edd3 7a03 	vldr	s15, [r3, #12]
 800962a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800962e:	edc7 7a00 	vstr	s15, [r7]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	b2da      	uxtb	r2, r3
 8009636:	4b4a      	ldr	r3, [pc, #296]	; (8009760 <APPSet+0x13fc>)
 8009638:	709a      	strb	r2, [r3, #2]

		if (dev_cfg.motor1_enc == 0){
 800963a:	4b49      	ldr	r3, [pc, #292]	; (8009760 <APPSet+0x13fc>)
 800963c:	791b      	ldrb	r3, [r3, #4]
 800963e:	f003 0310 	and.w	r3, r3, #16
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <APPSet+0x12ee>
			QEISwap(QEI6,QEI_No_Swap);
 8009648:	2100      	movs	r1, #0
 800964a:	2006      	movs	r0, #6
 800964c:	f7f8 fcdc 	bl	8002008 <QEISwap>
 8009650:	e003      	b.n	800965a <APPSet+0x12f6>
		}else
			QEISwap(QEI6,QEI_Swap);
 8009652:	2101      	movs	r1, #1
 8009654:	2006      	movs	r0, #6
 8009656:	f7f8 fcd7 	bl	8002008 <QEISwap>

		if (dev_cfg.motor2_enc == 0)
 800965a:	4b41      	ldr	r3, [pc, #260]	; (8009760 <APPSet+0x13fc>)
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <APPSet+0x130e>
			QEISwap(QEI4,QEI_No_Swap);
 8009668:	2100      	movs	r1, #0
 800966a:	2004      	movs	r0, #4
 800966c:	f7f8 fccc 	bl	8002008 <QEISwap>
 8009670:	e003      	b.n	800967a <APPSet+0x1316>
		else
			QEISwap(QEI4,QEI_Swap);
 8009672:	2101      	movs	r1, #1
 8009674:	2004      	movs	r0, #4
 8009676:	f7f8 fcc7 	bl	8002008 <QEISwap>

		if (dev_cfg.motor3_enc == 0)
 800967a:	4b39      	ldr	r3, [pc, #228]	; (8009760 <APPSet+0x13fc>)
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <APPSet+0x132e>
			QEISwap(QEI1,QEI_No_Swap);
 8009688:	2100      	movs	r1, #0
 800968a:	2001      	movs	r0, #1
 800968c:	f7f8 fcbc 	bl	8002008 <QEISwap>
 8009690:	e003      	b.n	800969a <APPSet+0x1336>
		else
			QEISwap(QEI1,QEI_Swap);
 8009692:	2101      	movs	r1, #1
 8009694:	2001      	movs	r0, #1
 8009696:	f7f8 fcb7 	bl	8002008 <QEISwap>

		if (dev_cfg.motor4_enc == 0)
 800969a:	4b31      	ldr	r3, [pc, #196]	; (8009760 <APPSet+0x13fc>)
 800969c:	791b      	ldrb	r3, [r3, #4]
 800969e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <APPSet+0x134e>
			QEISwap(QEI3,QEI_No_Swap);
 80096a8:	2100      	movs	r1, #0
 80096aa:	2003      	movs	r0, #3
 80096ac:	f7f8 fcac 	bl	8002008 <QEISwap>
 80096b0:	e003      	b.n	80096ba <APPSet+0x1356>
		else
			QEISwap(QEI3,QEI_Swap);
 80096b2:	2101      	movs	r1, #1
 80096b4:	2003      	movs	r0, #3
 80096b6:	f7f8 fca7 	bl	8002008 <QEISwap>

		if(dev_cfg.motor1_dir == 1)
 80096ba:	4b29      	ldr	r3, [pc, #164]	; (8009760 <APPSet+0x13fc>)
 80096bc:	791b      	ldrb	r3, [r3, #4]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <APPSet+0x136e>
			SwapBDC(&BDC1,1);
 80096c8:	2101      	movs	r1, #1
 80096ca:	4826      	ldr	r0, [pc, #152]	; (8009764 <APPSet+0x1400>)
 80096cc:	f7f7 fe59 	bl	8001382 <SwapBDC>
 80096d0:	e004      	b.n	80096dc <APPSet+0x1378>
		else
			SwapBDC(&BDC1,-1);
 80096d2:	f04f 31ff 	mov.w	r1, #4294967295
 80096d6:	4823      	ldr	r0, [pc, #140]	; (8009764 <APPSet+0x1400>)
 80096d8:	f7f7 fe53 	bl	8001382 <SwapBDC>

		if(dev_cfg.motor2_dir == 1)
 80096dc:	4b20      	ldr	r3, [pc, #128]	; (8009760 <APPSet+0x13fc>)
 80096de:	791b      	ldrb	r3, [r3, #4]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <APPSet+0x1390>
			SwapBDC(&BDC2,1);
 80096ea:	2101      	movs	r1, #1
 80096ec:	481e      	ldr	r0, [pc, #120]	; (8009768 <APPSet+0x1404>)
 80096ee:	f7f7 fe48 	bl	8001382 <SwapBDC>
 80096f2:	e004      	b.n	80096fe <APPSet+0x139a>
		else
			SwapBDC(&BDC2,-1);
 80096f4:	f04f 31ff 	mov.w	r1, #4294967295
 80096f8:	481b      	ldr	r0, [pc, #108]	; (8009768 <APPSet+0x1404>)
 80096fa:	f7f7 fe42 	bl	8001382 <SwapBDC>
		if(dev_cfg.motor3_dir == 1)
 80096fe:	4b18      	ldr	r3, [pc, #96]	; (8009760 <APPSet+0x13fc>)
 8009700:	791b      	ldrb	r3, [r3, #4]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <APPSet+0x13b2>
			SwapBDC(&BDC3,1);
 800970c:	2101      	movs	r1, #1
 800970e:	4817      	ldr	r0, [pc, #92]	; (800976c <APPSet+0x1408>)
 8009710:	f7f7 fe37 	bl	8001382 <SwapBDC>
 8009714:	e004      	b.n	8009720 <APPSet+0x13bc>
		else
			SwapBDC(&BDC3,-1);
 8009716:	f04f 31ff 	mov.w	r1, #4294967295
 800971a:	4814      	ldr	r0, [pc, #80]	; (800976c <APPSet+0x1408>)
 800971c:	f7f7 fe31 	bl	8001382 <SwapBDC>

		if(dev_cfg.motor4_dir == 1)
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <APPSet+0x13fc>)
 8009722:	791b      	ldrb	r3, [r3, #4]
 8009724:	f003 0308 	and.w	r3, r3, #8
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <APPSet+0x13d4>
			SwapBDC(&BDC4,1);
 800972e:	2101      	movs	r1, #1
 8009730:	480f      	ldr	r0, [pc, #60]	; (8009770 <APPSet+0x140c>)
 8009732:	f7f7 fe26 	bl	8001382 <SwapBDC>
		else
			SwapBDC(&BDC4,-1);

		break;
 8009736:	e00e      	b.n	8009756 <APPSet+0x13f2>
			SwapBDC(&BDC4,-1);
 8009738:	f04f 31ff 	mov.w	r1, #4294967295
 800973c:	480c      	ldr	r0, [pc, #48]	; (8009770 <APPSet+0x140c>)
 800973e:	f7f7 fe20 	bl	8001382 <SwapBDC>
		break;
 8009742:	e008      	b.n	8009756 <APPSet+0x13f2>

	default:
		break;
 8009744:	bf00      	nop
 8009746:	e006      	b.n	8009756 <APPSet+0x13f2>
		break;
 8009748:	bf00      	nop
 800974a:	e004      	b.n	8009756 <APPSet+0x13f2>
		break;
 800974c:	bf00      	nop
 800974e:	e002      	b.n	8009756 <APPSet+0x13f2>
		break;
 8009750:	bf00      	nop
 8009752:	e000      	b.n	8009756 <APPSet+0x13f2>
		break;
 8009754:	bf00      	nop
	}
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20007b1c 	.word	0x20007b1c
 8009764:	20007f24 	.word	0x20007f24
 8009768:	20006e34 	.word	0x20006e34
 800976c:	2000683c 	.word	0x2000683c
 8009770:	200079c0 	.word	0x200079c0

08009774 <APPApply>:

void APPApply(ins_t *pins)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
	switch (pins->instruction){
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	3b05      	subs	r3, #5
 8009782:	2b0c      	cmp	r3, #12
 8009784:	f200 815c 	bhi.w	8009a40 <APPApply+0x2cc>
 8009788:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <APPApply+0x1c>)
 800978a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978e:	bf00      	nop
 8009790:	080097e7 	.word	0x080097e7
 8009794:	08009809 	.word	0x08009809
 8009798:	08009813 	.word	0x08009813
 800979c:	0800981d 	.word	0x0800981d
 80097a0:	08009827 	.word	0x08009827
 80097a4:	08009831 	.word	0x08009831
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	08009a41 	.word	0x08009a41
 80097b0:	08009877 	.word	0x08009877
 80097b4:	08009981 	.word	0x08009981
 80097b8:	08009a41 	.word	0x08009a41
 80097bc:	08009a31 	.word	0x08009a31
 80097c0:	08009853 	.word	0x08009853

	case RNS_CONTROLLER:
		joy_x = main_board_1_data_receive.common_buffer[0].byte1;
 80097c4:	4ba1      	ldr	r3, [pc, #644]	; (8009a4c <APPApply+0x2d8>)
 80097c6:	791a      	ldrb	r2, [r3, #4]
 80097c8:	4ba1      	ldr	r3, [pc, #644]	; (8009a50 <APPApply+0x2dc>)
 80097ca:	701a      	strb	r2, [r3, #0]
		joy_y = main_board_1_data_receive.common_buffer[0].byte2;
 80097cc:	4b9f      	ldr	r3, [pc, #636]	; (8009a4c <APPApply+0x2d8>)
 80097ce:	795a      	ldrb	r2, [r3, #5]
 80097d0:	4ba0      	ldr	r3, [pc, #640]	; (8009a54 <APPApply+0x2e0>)
 80097d2:	701a      	strb	r2, [r3, #0]
		an_L2 = main_board_1_data_receive.common_buffer[0].byte3;
 80097d4:	4b9d      	ldr	r3, [pc, #628]	; (8009a4c <APPApply+0x2d8>)
 80097d6:	799a      	ldrb	r2, [r3, #6]
 80097d8:	4b9f      	ldr	r3, [pc, #636]	; (8009a58 <APPApply+0x2e4>)
 80097da:	701a      	strb	r2, [r3, #0]
		an_R2 = main_board_1_data_receive.common_buffer[0].byte4;
 80097dc:	4b9b      	ldr	r3, [pc, #620]	; (8009a4c <APPApply+0x2d8>)
 80097de:	79da      	ldrb	r2, [r3, #7]
 80097e0:	4b9e      	ldr	r3, [pc, #632]	; (8009a5c <APPApply+0x2e8>)
 80097e2:	701a      	strb	r2, [r3, #0]
		break;
 80097e4:	e12d      	b.n	8009a42 <APPApply+0x2ce>


	case RNS_VELOCITY:
		fFLeftVelR 	= pins->ins_buffer[0].data;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	4a9d      	ldr	r2, [pc, #628]	; (8009a60 <APPApply+0x2ec>)
 80097ec:	6013      	str	r3, [r2, #0]
		fFRightVelR = pins->ins_buffer[1].data;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	4a9c      	ldr	r2, [pc, #624]	; (8009a64 <APPApply+0x2f0>)
 80097f4:	6013      	str	r3, [r2, #0]
		fBLeftVelR 	= pins->ins_buffer[2].data;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	4a9b      	ldr	r2, [pc, #620]	; (8009a68 <APPApply+0x2f4>)
 80097fc:	6013      	str	r3, [r2, #0]
		fBRightVelR = pins->ins_buffer[3].data;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	4a9a      	ldr	r2, [pc, #616]	; (8009a6c <APPApply+0x2f8>)
 8009804:	6013      	str	r3, [r2, #0]
		break;
 8009806:	e11c      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_VELOCITY1:
		fFLeftVelR 	= pins->ins_buffer[0].data;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4a94      	ldr	r2, [pc, #592]	; (8009a60 <APPApply+0x2ec>)
 800980e:	6013      	str	r3, [r2, #0]
		break;
 8009810:	e117      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_VELOCITY2:
		fFRightVelR = pins->ins_buffer[0].data;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	4a93      	ldr	r2, [pc, #588]	; (8009a64 <APPApply+0x2f0>)
 8009818:	6013      	str	r3, [r2, #0]
		break;
 800981a:	e112      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_VELOCITY3:
		fBLeftVelR 	= pins->ins_buffer[0].data;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	4a91      	ldr	r2, [pc, #580]	; (8009a68 <APPApply+0x2f4>)
 8009822:	6013      	str	r3, [r2, #0]
		break;
 8009824:	e10d      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_VELOCITY4:
		fBRightVelR = pins->ins_buffer[0].data;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	4a90      	ldr	r2, [pc, #576]	; (8009a6c <APPApply+0x2f8>)
 800982c:	6013      	str	r3, [r2, #0]
		break;
 800982e:	e108      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_PDC:
		fFLeftVelU 	= pins->ins_buffer[0].data;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	4a8e      	ldr	r2, [pc, #568]	; (8009a70 <APPApply+0x2fc>)
 8009836:	6013      	str	r3, [r2, #0]
		fFRightVelU = pins->ins_buffer[1].data;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	4a8d      	ldr	r2, [pc, #564]	; (8009a74 <APPApply+0x300>)
 800983e:	6013      	str	r3, [r2, #0]
		fBLeftVelU 	= pins->ins_buffer[2].data;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	4a8c      	ldr	r2, [pc, #560]	; (8009a78 <APPApply+0x304>)
 8009846:	6013      	str	r3, [r2, #0]
		fBRightVelU = pins->ins_buffer[3].data;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	4a8b      	ldr	r2, [pc, #556]	; (8009a7c <APPApply+0x308>)
 800984e:	6013      	str	r3, [r2, #0]
		break;
 8009850:	e0f7      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_ROTATE:
		AngleTargetDeg = (int)fyaw + (int)pins->ins_buffer[0].data; //+ve:clkwise,-ve:anti-clkwise,max:+-180
 8009852:	4b8b      	ldr	r3, [pc, #556]	; (8009a80 <APPApply+0x30c>)
 8009854:	edd3 7a00 	vldr	s15, [r3]
 8009858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800985c:	ee17 2a90 	vmov	r2, s15
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	edd3 7a01 	vldr	s15, [r3, #4]
 8009866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800986a:	ee17 3a90 	vmov	r3, s15
 800986e:	4413      	add	r3, r2
 8009870:	4a84      	ldr	r2, [pc, #528]	; (8009a84 <APPApply+0x310>)
 8009872:	6013      	str	r3, [r2, #0]
		break;
 8009874:	e0e5      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_LF_DIST:
		Dir = (int)pins->ins_buffer[0].data;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	edd3 7a01 	vldr	s15, [r3, #4]
 800987c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009880:	ee17 2a90 	vmov	r2, s15
 8009884:	4b80      	ldr	r3, [pc, #512]	; (8009a88 <APPApply+0x314>)
 8009886:	601a      	str	r2, [r3, #0]
		LF_vel = pins->ins_buffer[1].data;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	4a7f      	ldr	r2, [pc, #508]	; (8009a8c <APPApply+0x318>)
 800988e:	6013      	str	r3, [r2, #0]
		LF_dist = pins->ins_buffer[2].data;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	4a7e      	ldr	r2, [pc, #504]	; (8009a90 <APPApply+0x31c>)
 8009896:	6013      	str	r3, [r2, #0]

		if (Dir == DIR_LEFT )
 8009898:	4b7b      	ldr	r3, [pc, #492]	; (8009a88 <APPApply+0x314>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b10      	cmp	r3, #16
 800989e:	d10b      	bne.n	80098b8 <APPApply+0x144>
			LFtargetDist = fXEncData - LF_dist;
 80098a0:	4b7c      	ldr	r3, [pc, #496]	; (8009a94 <APPApply+0x320>)
 80098a2:	ed93 7a00 	vldr	s14, [r3]
 80098a6:	4b7a      	ldr	r3, [pc, #488]	; (8009a90 <APPApply+0x31c>)
 80098a8:	edd3 7a00 	vldr	s15, [r3]
 80098ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098b0:	4b79      	ldr	r3, [pc, #484]	; (8009a98 <APPApply+0x324>)
 80098b2:	edc3 7a00 	vstr	s15, [r3]
 80098b6:	e02e      	b.n	8009916 <APPApply+0x1a2>
		else if ( Dir == DIR_RIGHT)
 80098b8:	4b73      	ldr	r3, [pc, #460]	; (8009a88 <APPApply+0x314>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b11      	cmp	r3, #17
 80098be:	d10b      	bne.n	80098d8 <APPApply+0x164>
			LFtargetDist = fXEncData + LF_dist;
 80098c0:	4b74      	ldr	r3, [pc, #464]	; (8009a94 <APPApply+0x320>)
 80098c2:	ed93 7a00 	vldr	s14, [r3]
 80098c6:	4b72      	ldr	r3, [pc, #456]	; (8009a90 <APPApply+0x31c>)
 80098c8:	edd3 7a00 	vldr	s15, [r3]
 80098cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098d0:	4b71      	ldr	r3, [pc, #452]	; (8009a98 <APPApply+0x324>)
 80098d2:	edc3 7a00 	vstr	s15, [r3]
 80098d6:	e01e      	b.n	8009916 <APPApply+0x1a2>
		else if (Dir == DIR_FRONT)
 80098d8:	4b6b      	ldr	r3, [pc, #428]	; (8009a88 <APPApply+0x314>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b0e      	cmp	r3, #14
 80098de:	d10b      	bne.n	80098f8 <APPApply+0x184>
			LFtargetDist = fYEncData + LF_dist;
 80098e0:	4b6e      	ldr	r3, [pc, #440]	; (8009a9c <APPApply+0x328>)
 80098e2:	ed93 7a00 	vldr	s14, [r3]
 80098e6:	4b6a      	ldr	r3, [pc, #424]	; (8009a90 <APPApply+0x31c>)
 80098e8:	edd3 7a00 	vldr	s15, [r3]
 80098ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098f0:	4b69      	ldr	r3, [pc, #420]	; (8009a98 <APPApply+0x324>)
 80098f2:	edc3 7a00 	vstr	s15, [r3]
 80098f6:	e00e      	b.n	8009916 <APPApply+0x1a2>
		else if (Dir == DIR_BACK)
 80098f8:	4b63      	ldr	r3, [pc, #396]	; (8009a88 <APPApply+0x314>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b0f      	cmp	r3, #15
 80098fe:	d10a      	bne.n	8009916 <APPApply+0x1a2>
			LFtargetDist = fYEncData - LF_dist;
 8009900:	4b66      	ldr	r3, [pc, #408]	; (8009a9c <APPApply+0x328>)
 8009902:	ed93 7a00 	vldr	s14, [r3]
 8009906:	4b62      	ldr	r3, [pc, #392]	; (8009a90 <APPApply+0x31c>)
 8009908:	edd3 7a00 	vldr	s15, [r3]
 800990c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009910:	4b61      	ldr	r3, [pc, #388]	; (8009a98 <APPApply+0x324>)
 8009912:	edc3 7a00 	vstr	s15, [r3]

		if (Dir == DIR_LEFT || Dir == DIR_BACK)
 8009916:	4b5c      	ldr	r3, [pc, #368]	; (8009a88 <APPApply+0x314>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b10      	cmp	r3, #16
 800991c:	d003      	beq.n	8009926 <APPApply+0x1b2>
 800991e:	4b5a      	ldr	r3, [pc, #360]	; (8009a88 <APPApply+0x314>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b0f      	cmp	r3, #15
 8009924:	d10d      	bne.n	8009942 <APPApply+0x1ce>
			PIDGainSet(KE,-1/LF_dist,&lf_dist);
 8009926:	4b5a      	ldr	r3, [pc, #360]	; (8009a90 <APPApply+0x31c>)
 8009928:	edd3 7a00 	vldr	s15, [r3]
 800992c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8009930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009934:	495a      	ldr	r1, [pc, #360]	; (8009aa0 <APPApply+0x32c>)
 8009936:	eeb0 0a47 	vmov.f32	s0, s14
 800993a:	2002      	movs	r0, #2
 800993c:	f7fa feba 	bl	80046b4 <PIDGainSet>
 8009940:	e014      	b.n	800996c <APPApply+0x1f8>
		else if(Dir == DIR_RIGHT || Dir == DIR_FRONT)
 8009942:	4b51      	ldr	r3, [pc, #324]	; (8009a88 <APPApply+0x314>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b11      	cmp	r3, #17
 8009948:	d003      	beq.n	8009952 <APPApply+0x1de>
 800994a:	4b4f      	ldr	r3, [pc, #316]	; (8009a88 <APPApply+0x314>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b0e      	cmp	r3, #14
 8009950:	d10c      	bne.n	800996c <APPApply+0x1f8>
			PIDGainSet(KE,1/LF_dist,&lf_dist);
 8009952:	4b4f      	ldr	r3, [pc, #316]	; (8009a90 <APPApply+0x31c>)
 8009954:	edd3 7a00 	vldr	s15, [r3]
 8009958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800995c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009960:	494f      	ldr	r1, [pc, #316]	; (8009aa0 <APPApply+0x32c>)
 8009962:	eeb0 0a47 	vmov.f32	s0, s14
 8009966:	2002      	movs	r0, #2
 8009968:	f7fa fea4 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU,LF_vel,&lf_dist);
 800996c:	4b47      	ldr	r3, [pc, #284]	; (8009a8c <APPApply+0x318>)
 800996e:	edd3 7a00 	vldr	s15, [r3]
 8009972:	494b      	ldr	r1, [pc, #300]	; (8009aa0 <APPApply+0x32c>)
 8009974:	eeb0 0a67 	vmov.f32	s0, s15
 8009978:	2003      	movs	r0, #3
 800997a:	f7fa fe9b 	bl	80046b4 <PIDGainSet>
		break;
 800997e:	e060      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_LF_JUNC:
		Dir = (int)pins->ins_buffer[0].data;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	edd3 7a01 	vldr	s15, [r3, #4]
 8009986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800998a:	ee17 2a90 	vmov	r2, s15
 800998e:	4b3e      	ldr	r3, [pc, #248]	; (8009a88 <APPApply+0x314>)
 8009990:	601a      	str	r2, [r3, #0]
		LF_vel = pins->ins_buffer[1].data;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	4a3d      	ldr	r2, [pc, #244]	; (8009a8c <APPApply+0x318>)
 8009998:	6013      	str	r3, [r2, #0]
		LF_dist = pins->ins_buffer[2].data;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	4a3c      	ldr	r2, [pc, #240]	; (8009a90 <APPApply+0x31c>)
 80099a0:	6013      	str	r3, [r2, #0]
		LF_junc = pins->ins_buffer[3].data;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	4a3f      	ldr	r2, [pc, #252]	; (8009aa4 <APPApply+0x330>)
 80099a8:	6013      	str	r3, [r2, #0]
		LFtargetJunc = junction_count + (int)LF_junc;
 80099aa:	4b3e      	ldr	r3, [pc, #248]	; (8009aa4 <APPApply+0x330>)
 80099ac:	edd3 7a00 	vldr	s15, [r3]
 80099b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099b4:	ee17 3a90 	vmov	r3, s15
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	4b3b      	ldr	r3, [pc, #236]	; (8009aa8 <APPApply+0x334>)
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	4413      	add	r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	4b3a      	ldr	r3, [pc, #232]	; (8009aac <APPApply+0x338>)
 80099c4:	801a      	strh	r2, [r3, #0]

		if (Dir == DIR_LEFT || Dir == DIR_BACK)
 80099c6:	4b30      	ldr	r3, [pc, #192]	; (8009a88 <APPApply+0x314>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b10      	cmp	r3, #16
 80099cc:	d003      	beq.n	80099d6 <APPApply+0x262>
 80099ce:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <APPApply+0x314>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d10d      	bne.n	80099f2 <APPApply+0x27e>
			PIDGainSet(KE,-1/LF_dist,&lf_dist);
 80099d6:	4b2e      	ldr	r3, [pc, #184]	; (8009a90 <APPApply+0x31c>)
 80099d8:	edd3 7a00 	vldr	s15, [r3]
 80099dc:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80099e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e4:	492e      	ldr	r1, [pc, #184]	; (8009aa0 <APPApply+0x32c>)
 80099e6:	eeb0 0a47 	vmov.f32	s0, s14
 80099ea:	2002      	movs	r0, #2
 80099ec:	f7fa fe62 	bl	80046b4 <PIDGainSet>
 80099f0:	e014      	b.n	8009a1c <APPApply+0x2a8>
		else if(Dir == DIR_RIGHT || Dir == DIR_FRONT)
 80099f2:	4b25      	ldr	r3, [pc, #148]	; (8009a88 <APPApply+0x314>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b11      	cmp	r3, #17
 80099f8:	d003      	beq.n	8009a02 <APPApply+0x28e>
 80099fa:	4b23      	ldr	r3, [pc, #140]	; (8009a88 <APPApply+0x314>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b0e      	cmp	r3, #14
 8009a00:	d10c      	bne.n	8009a1c <APPApply+0x2a8>
			PIDGainSet(KE,1/LF_dist,&lf_dist);
 8009a02:	4b23      	ldr	r3, [pc, #140]	; (8009a90 <APPApply+0x31c>)
 8009a04:	edd3 7a00 	vldr	s15, [r3]
 8009a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a10:	4923      	ldr	r1, [pc, #140]	; (8009aa0 <APPApply+0x32c>)
 8009a12:	eeb0 0a47 	vmov.f32	s0, s14
 8009a16:	2002      	movs	r0, #2
 8009a18:	f7fa fe4c 	bl	80046b4 <PIDGainSet>
		PIDGainSet(KU,LF_vel,&lf_dist);
 8009a1c:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <APPApply+0x318>)
 8009a1e:	edd3 7a00 	vldr	s15, [r3]
 8009a22:	491f      	ldr	r1, [pc, #124]	; (8009aa0 <APPApply+0x32c>)
 8009a24:	eeb0 0a67 	vmov.f32	s0, s15
 8009a28:	2003      	movs	r0, #3
 8009a2a:	f7fa fe43 	bl	80046b4 <PIDGainSet>
		break;
 8009a2e:	e008      	b.n	8009a42 <APPApply+0x2ce>

	case RNS_PPStart:
		PP_start(rcvPoint,NumPoint,&pp);
 8009a30:	4b1f      	ldr	r3, [pc, #124]	; (8009ab0 <APPApply+0x33c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1f      	ldr	r2, [pc, #124]	; (8009ab4 <APPApply+0x340>)
 8009a36:	4619      	mov	r1, r3
 8009a38:	481f      	ldr	r0, [pc, #124]	; (8009ab8 <APPApply+0x344>)
 8009a3a:	f7fb f9f6 	bl	8004e2a <PP_start>
		break;
 8009a3e:	e000      	b.n	8009a42 <APPApply+0x2ce>

	default:
		break;
 8009a40:	bf00      	nop
	}
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20007f64 	.word	0x20007f64
 8009a50:	20007c30 	.word	0x20007c30
 8009a54:	20006ee8 	.word	0x20006ee8
 8009a58:	20006634 	.word	0x20006634
 8009a5c:	20006834 	.word	0x20006834
 8009a60:	2000682c 	.word	0x2000682c
 8009a64:	20007b8c 	.word	0x20007b8c
 8009a68:	20007f60 	.word	0x20007f60
 8009a6c:	20007b18 	.word	0x20007b18
 8009a70:	20006e88 	.word	0x20006e88
 8009a74:	200066a0 	.word	0x200066a0
 8009a78:	2000675c 	.word	0x2000675c
 8009a7c:	2000662c 	.word	0x2000662c
 8009a80:	20007af4 	.word	0x20007af4
 8009a84:	20007a50 	.word	0x20007a50
 8009a88:	200079ec 	.word	0x200079ec
 8009a8c:	20007d70 	.word	0x20007d70
 8009a90:	200076e4 	.word	0x200076e4
 8009a94:	200066c0 	.word	0x200066c0
 8009a98:	20007c20 	.word	0x20007c20
 8009a9c:	20007f0c 	.word	0x20007f0c
 8009aa0:	20007e0c 	.word	0x20007e0c
 8009aa4:	20007e08 	.word	0x20007e08
 8009aa8:	20006628 	.word	0x20006628
 8009aac:	20007f58 	.word	0x20007f58
 8009ab0:	20007b80 	.word	0x20007b80
 8009ab4:	20006868 	.word	0x20006868
 8009ab8:	20006efc 	.word	0x20006efc

08009abc <APPStart>:

void APPStart(ins_t *pins)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]

	switch (pins->instruction){
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	3b05      	subs	r3, #5
 8009aca:	2b0c      	cmp	r3, #12
 8009acc:	f200 80df 	bhi.w	8009c8e <APPStart+0x1d2>
 8009ad0:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <APPStart+0x1c>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009b23 	.word	0x08009b23
 8009adc:	08009b2f 	.word	0x08009b2f
 8009ae0:	08009b3b 	.word	0x08009b3b
 8009ae4:	08009b47 	.word	0x08009b47
 8009ae8:	08009b53 	.word	0x08009b53
 8009aec:	08009c8f 	.word	0x08009c8f
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009c8f 	.word	0x08009c8f
 8009af8:	08009b5f 	.word	0x08009b5f
 8009afc:	08009bd7 	.word	0x08009bd7
 8009b00:	08009c8f 	.word	0x08009c8f
 8009b04:	08009c6f 	.word	0x08009c6f
 8009b08:	08009c4f 	.word	0x08009c4f

	case RNS_CONTROLLER:
		sys.controller = 1;
 8009b0c:	4a63      	ldr	r2, [pc, #396]	; (8009c9c <APPStart+0x1e0>)
 8009b0e:	7853      	ldrb	r3, [r2, #1]
 8009b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b14:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 8009b16:	4a61      	ldr	r2, [pc, #388]	; (8009c9c <APPStart+0x1e0>)
 8009b18:	7813      	ldrb	r3, [r2, #0]
 8009b1a:	f043 0304 	orr.w	r3, r3, #4
 8009b1e:	7013      	strb	r3, [r2, #0]
		break;
 8009b20:	e0b6      	b.n	8009c90 <APPStart+0x1d4>

	case RNS_VELOCITY:
		sys.vel_flag = 1;
 8009b22:	4a5e      	ldr	r2, [pc, #376]	; (8009c9c <APPStart+0x1e0>)
 8009b24:	7813      	ldrb	r3, [r2, #0]
 8009b26:	f043 0304 	orr.w	r3, r3, #4
 8009b2a:	7013      	strb	r3, [r2, #0]
		break;
 8009b2c:	e0b0      	b.n	8009c90 <APPStart+0x1d4>

	case RNS_VELOCITY1:
			sys.vel_flag = 1;
 8009b2e:	4a5b      	ldr	r2, [pc, #364]	; (8009c9c <APPStart+0x1e0>)
 8009b30:	7813      	ldrb	r3, [r2, #0]
 8009b32:	f043 0304 	orr.w	r3, r3, #4
 8009b36:	7013      	strb	r3, [r2, #0]
			break;
 8009b38:	e0aa      	b.n	8009c90 <APPStart+0x1d4>
	case RNS_VELOCITY2:
			sys.vel_flag = 1;
 8009b3a:	4a58      	ldr	r2, [pc, #352]	; (8009c9c <APPStart+0x1e0>)
 8009b3c:	7813      	ldrb	r3, [r2, #0]
 8009b3e:	f043 0304 	orr.w	r3, r3, #4
 8009b42:	7013      	strb	r3, [r2, #0]
			break;
 8009b44:	e0a4      	b.n	8009c90 <APPStart+0x1d4>
	case RNS_VELOCITY3:
			sys.vel_flag = 1;
 8009b46:	4a55      	ldr	r2, [pc, #340]	; (8009c9c <APPStart+0x1e0>)
 8009b48:	7813      	ldrb	r3, [r2, #0]
 8009b4a:	f043 0304 	orr.w	r3, r3, #4
 8009b4e:	7013      	strb	r3, [r2, #0]
			break;
 8009b50:	e09e      	b.n	8009c90 <APPStart+0x1d4>
	case RNS_VELOCITY4:
			sys.vel_flag = 1;
 8009b52:	4a52      	ldr	r2, [pc, #328]	; (8009c9c <APPStart+0x1e0>)
 8009b54:	7813      	ldrb	r3, [r2, #0]
 8009b56:	f043 0304 	orr.w	r3, r3, #4
 8009b5a:	7013      	strb	r3, [r2, #0]
			break;
 8009b5c:	e098      	b.n	8009c90 <APPStart+0x1d4>
	case RNS_PDC:
		break;

	case RNS_LF_DIST:

		if(Dir == DIR_FRONT){
 8009b5e:	4b50      	ldr	r3, [pc, #320]	; (8009ca0 <APPStart+0x1e4>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b0e      	cmp	r3, #14
 8009b64:	d105      	bne.n	8009b72 <APPStart+0xb6>
			sys.lf_front = 1;
 8009b66:	4a4d      	ldr	r2, [pc, #308]	; (8009c9c <APPStart+0x1e0>)
 8009b68:	7813      	ldrb	r3, [r2, #0]
 8009b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b6e:	7013      	strb	r3, [r2, #0]
 8009b70:	e01c      	b.n	8009bac <APPStart+0xf0>
		}else if(Dir == DIR_BACK){
 8009b72:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <APPStart+0x1e4>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d105      	bne.n	8009b86 <APPStart+0xca>
			sys.lf_back = 1;
 8009b7a:	4a48      	ldr	r2, [pc, #288]	; (8009c9c <APPStart+0x1e0>)
 8009b7c:	7853      	ldrb	r3, [r2, #1]
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	7053      	strb	r3, [r2, #1]
 8009b84:	e012      	b.n	8009bac <APPStart+0xf0>
		}else if(Dir == DIR_LEFT){
 8009b86:	4b46      	ldr	r3, [pc, #280]	; (8009ca0 <APPStart+0x1e4>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d105      	bne.n	8009b9a <APPStart+0xde>
			sys.lf_left = 1;
 8009b8e:	4a43      	ldr	r2, [pc, #268]	; (8009c9c <APPStart+0x1e0>)
 8009b90:	7853      	ldrb	r3, [r2, #1]
 8009b92:	f043 0302 	orr.w	r3, r3, #2
 8009b96:	7053      	strb	r3, [r2, #1]
 8009b98:	e008      	b.n	8009bac <APPStart+0xf0>
		}else if(Dir == DIR_RIGHT){
 8009b9a:	4b41      	ldr	r3, [pc, #260]	; (8009ca0 <APPStart+0x1e4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2b11      	cmp	r3, #17
 8009ba0:	d104      	bne.n	8009bac <APPStart+0xf0>
			sys.lf_right = 1;
 8009ba2:	4a3e      	ldr	r2, [pc, #248]	; (8009c9c <APPStart+0x1e0>)
 8009ba4:	7853      	ldrb	r3, [r2, #1]
 8009ba6:	f043 0304 	orr.w	r3, r3, #4
 8009baa:	7053      	strb	r3, [r2, #1]
		}

		sys.lf_flag= 1;
 8009bac:	4a3b      	ldr	r2, [pc, #236]	; (8009c9c <APPStart+0x1e0>)
 8009bae:	7813      	ldrb	r3, [r2, #0]
 8009bb0:	f043 0308 	orr.w	r3, r3, #8
 8009bb4:	7013      	strb	r3, [r2, #0]
		sys.dist_flag = 1;
 8009bb6:	4a39      	ldr	r2, [pc, #228]	; (8009c9c <APPStart+0x1e0>)
 8009bb8:	7813      	ldrb	r3, [r2, #0]
 8009bba:	f043 0320 	orr.w	r3, r3, #32
 8009bbe:	7013      	strb	r3, [r2, #0]
		sys.vel_flag = 1;
 8009bc0:	4a36      	ldr	r2, [pc, #216]	; (8009c9c <APPStart+0x1e0>)
 8009bc2:	7813      	ldrb	r3, [r2, #0]
 8009bc4:	f043 0304 	orr.w	r3, r3, #4
 8009bc8:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 8009bca:	4a34      	ldr	r2, [pc, #208]	; (8009c9c <APPStart+0x1e0>)
 8009bcc:	7813      	ldrb	r3, [r2, #0]
 8009bce:	f043 0302 	orr.w	r3, r3, #2
 8009bd2:	7013      	strb	r3, [r2, #0]

		break;
 8009bd4:	e05c      	b.n	8009c90 <APPStart+0x1d4>

	case RNS_LF_JUNC:

		if(Dir == DIR_FRONT){
 8009bd6:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <APPStart+0x1e4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b0e      	cmp	r3, #14
 8009bdc:	d105      	bne.n	8009bea <APPStart+0x12e>
			sys.lf_front = 1;
 8009bde:	4a2f      	ldr	r2, [pc, #188]	; (8009c9c <APPStart+0x1e0>)
 8009be0:	7813      	ldrb	r3, [r2, #0]
 8009be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be6:	7013      	strb	r3, [r2, #0]
 8009be8:	e01c      	b.n	8009c24 <APPStart+0x168>
		}else if(Dir == DIR_BACK){
 8009bea:	4b2d      	ldr	r3, [pc, #180]	; (8009ca0 <APPStart+0x1e4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b0f      	cmp	r3, #15
 8009bf0:	d105      	bne.n	8009bfe <APPStart+0x142>
			sys.lf_back = 1;
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	; (8009c9c <APPStart+0x1e0>)
 8009bf4:	7853      	ldrb	r3, [r2, #1]
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	7053      	strb	r3, [r2, #1]
 8009bfc:	e012      	b.n	8009c24 <APPStart+0x168>
		}else if(Dir == DIR_LEFT){
 8009bfe:	4b28      	ldr	r3, [pc, #160]	; (8009ca0 <APPStart+0x1e4>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b10      	cmp	r3, #16
 8009c04:	d105      	bne.n	8009c12 <APPStart+0x156>
			sys.lf_left = 1;
 8009c06:	4a25      	ldr	r2, [pc, #148]	; (8009c9c <APPStart+0x1e0>)
 8009c08:	7853      	ldrb	r3, [r2, #1]
 8009c0a:	f043 0302 	orr.w	r3, r3, #2
 8009c0e:	7053      	strb	r3, [r2, #1]
 8009c10:	e008      	b.n	8009c24 <APPStart+0x168>
		}else if(Dir == DIR_RIGHT){
 8009c12:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <APPStart+0x1e4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b11      	cmp	r3, #17
 8009c18:	d104      	bne.n	8009c24 <APPStart+0x168>
			sys.lf_right = 1;
 8009c1a:	4a20      	ldr	r2, [pc, #128]	; (8009c9c <APPStart+0x1e0>)
 8009c1c:	7853      	ldrb	r3, [r2, #1]
 8009c1e:	f043 0304 	orr.w	r3, r3, #4
 8009c22:	7053      	strb	r3, [r2, #1]
		}
		sys.lf_flag= 1;
 8009c24:	4a1d      	ldr	r2, [pc, #116]	; (8009c9c <APPStart+0x1e0>)
 8009c26:	7813      	ldrb	r3, [r2, #0]
 8009c28:	f043 0308 	orr.w	r3, r3, #8
 8009c2c:	7013      	strb	r3, [r2, #0]
		sys.lf_junc = 1;
 8009c2e:	4a1b      	ldr	r2, [pc, #108]	; (8009c9c <APPStart+0x1e0>)
 8009c30:	7813      	ldrb	r3, [r2, #0]
 8009c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c36:	7013      	strb	r3, [r2, #0]
		sys.vel_flag = 1;
 8009c38:	4a18      	ldr	r2, [pc, #96]	; (8009c9c <APPStart+0x1e0>)
 8009c3a:	7813      	ldrb	r3, [r2, #0]
 8009c3c:	f043 0304 	orr.w	r3, r3, #4
 8009c40:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 8009c42:	4a16      	ldr	r2, [pc, #88]	; (8009c9c <APPStart+0x1e0>)
 8009c44:	7813      	ldrb	r3, [r2, #0]
 8009c46:	f043 0302 	orr.w	r3, r3, #2
 8009c4a:	7013      	strb	r3, [r2, #0]
		break;
 8009c4c:	e020      	b.n	8009c90 <APPStart+0x1d4>

	case RNS_ROTATE:
		sys.rotate = 1;
 8009c4e:	4a13      	ldr	r2, [pc, #76]	; (8009c9c <APPStart+0x1e0>)
 8009c50:	7853      	ldrb	r3, [r2, #1]
 8009c52:	f043 0308 	orr.w	r3, r3, #8
 8009c56:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 8009c58:	4a10      	ldr	r2, [pc, #64]	; (8009c9c <APPStart+0x1e0>)
 8009c5a:	7813      	ldrb	r3, [r2, #0]
 8009c5c:	f043 0304 	orr.w	r3, r3, #4
 8009c60:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 8009c62:	4a0e      	ldr	r2, [pc, #56]	; (8009c9c <APPStart+0x1e0>)
 8009c64:	7813      	ldrb	r3, [r2, #0]
 8009c66:	f043 0302 	orr.w	r3, r3, #2
 8009c6a:	7013      	strb	r3, [r2, #0]
		break;
 8009c6c:	e010      	b.n	8009c90 <APPStart+0x1d4>

	case RNS_PPStart:
		sys.odnstart_flag = 1;
 8009c6e:	4a0b      	ldr	r2, [pc, #44]	; (8009c9c <APPStart+0x1e0>)
 8009c70:	7853      	ldrb	r3, [r2, #1]
 8009c72:	f043 0310 	orr.w	r3, r3, #16
 8009c76:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 8009c78:	4a08      	ldr	r2, [pc, #32]	; (8009c9c <APPStart+0x1e0>)
 8009c7a:	7813      	ldrb	r3, [r2, #0]
 8009c7c:	f043 0304 	orr.w	r3, r3, #4
 8009c80:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 8009c82:	4a06      	ldr	r2, [pc, #24]	; (8009c9c <APPStart+0x1e0>)
 8009c84:	7813      	ldrb	r3, [r2, #0]
 8009c86:	f043 0302 	orr.w	r3, r3, #2
 8009c8a:	7013      	strb	r3, [r2, #0]
		break;
 8009c8c:	e000      	b.n	8009c90 <APPStart+0x1d4>

	default:
		break;
 8009c8e:	bf00      	nop
	}
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20006dac 	.word	0x20006dac
 8009ca0:	200079ec 	.word	0x200079ec

08009ca4 <APPStop>:

void APPStop(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
	sys.flag = 0;	/* Reset system flag */
 8009ca8:	4b34      	ldr	r3, [pc, #208]	; (8009d7c <APPStop+0xd8>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	801a      	strh	r2, [r3, #0]

	PIDDelayInit(&fleft_vel);
 8009cae:	4834      	ldr	r0, [pc, #208]	; (8009d80 <APPStop+0xdc>)
 8009cb0:	f7fa fe52 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&fright_vel);
 8009cb4:	4833      	ldr	r0, [pc, #204]	; (8009d84 <APPStop+0xe0>)
 8009cb6:	f7fa fe4f 	bl	8004958 <PIDDelayInit>

	PIDDelayInit(&bleft_vel);
 8009cba:	4833      	ldr	r0, [pc, #204]	; (8009d88 <APPStop+0xe4>)
 8009cbc:	f7fa fe4c 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&bright_vel);
 8009cc0:	4832      	ldr	r0, [pc, #200]	; (8009d8c <APPStop+0xe8>)
 8009cc2:	f7fa fe49 	bl	8004958 <PIDDelayInit>

	fFLeftVelR = 0.0;
 8009cc6:	4b32      	ldr	r3, [pc, #200]	; (8009d90 <APPStop+0xec>)
 8009cc8:	f04f 0200 	mov.w	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
	fFLeftVelU = 0.0;
 8009cce:	4b31      	ldr	r3, [pc, #196]	; (8009d94 <APPStop+0xf0>)
 8009cd0:	f04f 0200 	mov.w	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]

	fFRightVelR = 0.0;
 8009cd6:	4b30      	ldr	r3, [pc, #192]	; (8009d98 <APPStop+0xf4>)
 8009cd8:	f04f 0200 	mov.w	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
	fFRightVelU = 0.0;
 8009cde:	4b2f      	ldr	r3, [pc, #188]	; (8009d9c <APPStop+0xf8>)
 8009ce0:	f04f 0200 	mov.w	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]

	fBLeftVelR = 0.0;
 8009ce6:	4b2e      	ldr	r3, [pc, #184]	; (8009da0 <APPStop+0xfc>)
 8009ce8:	f04f 0200 	mov.w	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
	fBLeftVelU = 0.0;
 8009cee:	4b2d      	ldr	r3, [pc, #180]	; (8009da4 <APPStop+0x100>)
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]

	fBRightVelR = 0.0;
 8009cf6:	4b2c      	ldr	r3, [pc, #176]	; (8009da8 <APPStop+0x104>)
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
	fBRightVelU = 0.0;
 8009cfe:	4b2b      	ldr	r3, [pc, #172]	; (8009dac <APPStop+0x108>)
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&lf_dist);
 8009d06:	482a      	ldr	r0, [pc, #168]	; (8009db0 <APPStop+0x10c>)
 8009d08:	f7fa fe26 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&lf_rotate);
 8009d0c:	4829      	ldr	r0, [pc, #164]	; (8009db4 <APPStop+0x110>)
 8009d0e:	f7fa fe23 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&lf_fwd);
 8009d12:	4829      	ldr	r0, [pc, #164]	; (8009db8 <APPStop+0x114>)
 8009d14:	f7fa fe20 	bl	8004958 <PIDDelayInit>
	PIDDelayInit(&imu_rotate);
 8009d18:	4828      	ldr	r0, [pc, #160]	; (8009dbc <APPStop+0x118>)
 8009d1a:	f7fa fe1d 	bl	8004958 <PIDDelayInit>

	fLFDistErr = 0;
 8009d1e:	4b28      	ldr	r3, [pc, #160]	; (8009dc0 <APPStop+0x11c>)
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
	fLFDistU = 0;
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <APPStop+0x120>)
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]

	fRotateErr = 0;
 8009d2e:	4b26      	ldr	r3, [pc, #152]	; (8009dc8 <APPStop+0x124>)
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	fRotateU = 0;
 8009d36:	4b25      	ldr	r3, [pc, #148]	; (8009dcc <APPStop+0x128>)
 8009d38:	f04f 0200 	mov.w	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]

	fFwdErr = 0;
 8009d3e:	4b24      	ldr	r3, [pc, #144]	; (8009dd0 <APPStop+0x12c>)
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
	fFwdU = 0;
 8009d46:	4b23      	ldr	r3, [pc, #140]	; (8009dd4 <APPStop+0x130>)
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	601a      	str	r2, [r3, #0]

	fAngleErr = 0;
 8009d4e:	4b22      	ldr	r3, [pc, #136]	; (8009dd8 <APPStop+0x134>)
 8009d50:	f04f 0200 	mov.w	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
	fAngleU = 0;
 8009d56:	4b21      	ldr	r3, [pc, #132]	; (8009ddc <APPStop+0x138>)
 8009d58:	f04f 0200 	mov.w	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]

	StopBDC(&BDC1);
 8009d5e:	4820      	ldr	r0, [pc, #128]	; (8009de0 <APPStop+0x13c>)
 8009d60:	f7f7 fbef 	bl	8001542 <StopBDC>
	StopBDC(&BDC2);
 8009d64:	481f      	ldr	r0, [pc, #124]	; (8009de4 <APPStop+0x140>)
 8009d66:	f7f7 fbec 	bl	8001542 <StopBDC>
	StopBDC(&BDC3);
 8009d6a:	481f      	ldr	r0, [pc, #124]	; (8009de8 <APPStop+0x144>)
 8009d6c:	f7f7 fbe9 	bl	8001542 <StopBDC>
	StopBDC(&BDC4);
 8009d70:	481e      	ldr	r0, [pc, #120]	; (8009dec <APPStop+0x148>)
 8009d72:	f7f7 fbe6 	bl	8001542 <StopBDC>

}
 8009d76:	bf00      	nop
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20006dac 	.word	0x20006dac
 8009d80:	20006e8c 	.word	0x20006e8c
 8009d84:	20006dc0 	.word	0x20006dc0
 8009d88:	200066e8 	.word	0x200066e8
 8009d8c:	20007dac 	.word	0x20007dac
 8009d90:	2000682c 	.word	0x2000682c
 8009d94:	20006e88 	.word	0x20006e88
 8009d98:	20007b8c 	.word	0x20007b8c
 8009d9c:	200066a0 	.word	0x200066a0
 8009da0:	20007f60 	.word	0x20007f60
 8009da4:	2000675c 	.word	0x2000675c
 8009da8:	20007b18 	.word	0x20007b18
 8009dac:	2000662c 	.word	0x2000662c
 8009db0:	20007e0c 	.word	0x20007e0c
 8009db4:	200079f8 	.word	0x200079f8
 8009db8:	20007b2c 	.word	0x20007b2c
 8009dbc:	2000663c 	.word	0x2000663c
 8009dc0:	20007384 	.word	0x20007384
 8009dc4:	200078c8 	.word	0x200078c8
 8009dc8:	20006d9c 	.word	0x20006d9c
 8009dcc:	20007a4c 	.word	0x20007a4c
 8009dd0:	20006864 	.word	0x20006864
 8009dd4:	20007f10 	.word	0x20007f10
 8009dd8:	20007a7c 	.word	0x20007a7c
 8009ddc:	20006748 	.word	0x20006748
 8009de0:	20007f24 	.word	0x20007f24
 8009de4:	20006e34 	.word	0x20006e34
 8009de8:	2000683c 	.word	0x2000683c
 8009dec:	200079c0 	.word	0x200079c0

08009df0 <APPBusy>:

unsigned char APPBusy(ins_t *pins)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
	switch (pins->instruction){
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b11      	cmp	r3, #17
 8009dfe:	d009      	beq.n	8009e14 <APPBusy+0x24>
 8009e00:	2b11      	cmp	r3, #17
 8009e02:	dc14      	bgt.n	8009e2e <APPBusy+0x3e>
 8009e04:	2b0e      	cmp	r3, #14
 8009e06:	dc02      	bgt.n	8009e0e <APPBusy+0x1e>
 8009e08:	2b0d      	cmp	r3, #13
 8009e0a:	da03      	bge.n	8009e14 <APPBusy+0x24>

		return pp.pp_start;
		break;

	default:
		break;
 8009e0c:	e00f      	b.n	8009e2e <APPBusy+0x3e>
	switch (pins->instruction){
 8009e0e:	2b10      	cmp	r3, #16
 8009e10:	d006      	beq.n	8009e20 <APPBusy+0x30>
		break;
 8009e12:	e00c      	b.n	8009e2e <APPBusy+0x3e>
		return sys.busy_flag;
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <APPBusy+0x50>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	e008      	b.n	8009e32 <APPBusy+0x42>
		return pp.pp_start;
 8009e20:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <APPBusy+0x54>)
 8009e22:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 8009e26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	e001      	b.n	8009e32 <APPBusy+0x42>
		break;
 8009e2e:	bf00      	nop
	}

	return 0;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20006dac 	.word	0x20006dac
 8009e44:	20006868 	.word	0x20006868

08009e48 <APPEnquire>:

void APPEnquire(enq_t *penq)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	switch (penq->enquiry){
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	3b56      	subs	r3, #86	; 0x56
 8009e56:	2b0a      	cmp	r3, #10
 8009e58:	f200 811d 	bhi.w	800a096 <APPEnquire+0x24e>
 8009e5c:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <APPEnquire+0x1c>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009e91 	.word	0x08009e91
 8009e68:	08009eb3 	.word	0x08009eb3
 8009e6c:	08009ed5 	.word	0x08009ed5
 8009e70:	08009ef7 	.word	0x08009ef7
 8009e74:	08009f09 	.word	0x08009f09
 8009e78:	08009f2f 	.word	0x08009f2f
 8009e7c:	08009fb3 	.word	0x08009fb3
 8009e80:	0800a035 	.word	0x0800a035
 8009e84:	0800a049 	.word	0x0800a049
 8009e88:	0800a053 	.word	0x0800a053
 8009e8c:	0800a06d 	.word	0x0800a06d

	case RNS_POS_BOTH :
		penq->enq_buffer[0].data = fFLeftPos;
 8009e90:	4b83      	ldr	r3, [pc, #524]	; (800a0a0 <APPEnquire+0x258>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fFRightPos;
 8009e98:	4b82      	ldr	r3, [pc, #520]	; (800a0a4 <APPEnquire+0x25c>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fBLeftPos;
 8009ea0:	4b81      	ldr	r3, [pc, #516]	; (800a0a8 <APPEnquire+0x260>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = fBRightPos;
 8009ea8:	4b80      	ldr	r3, [pc, #512]	; (800a0ac <APPEnquire+0x264>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	611a      	str	r2, [r3, #16]
		break;
 8009eb0:	e0f1      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_VEL_BOTH :
		penq->enq_buffer[0].data = fFLeftVel;
 8009eb2:	4b7f      	ldr	r3, [pc, #508]	; (800a0b0 <APPEnquire+0x268>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fFRightVel;
 8009eba:	4b7e      	ldr	r3, [pc, #504]	; (800a0b4 <APPEnquire+0x26c>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fBLeftVel;
 8009ec2:	4b7d      	ldr	r3, [pc, #500]	; (800a0b8 <APPEnquire+0x270>)
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = fBRightVel;
 8009eca:	4b7c      	ldr	r3, [pc, #496]	; (800a0bc <APPEnquire+0x274>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	611a      	str	r2, [r3, #16]
		break;
 8009ed2:	e0e0      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_PDC_BOTH :
		penq->enq_buffer[0].data = fFLeftVelU;
 8009ed4:	4b7a      	ldr	r3, [pc, #488]	; (800a0c0 <APPEnquire+0x278>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fFRightVelU;
 8009edc:	4b79      	ldr	r3, [pc, #484]	; (800a0c4 <APPEnquire+0x27c>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fBLeftVelU;
 8009ee4:	4b78      	ldr	r3, [pc, #480]	; (800a0c8 <APPEnquire+0x280>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = fBRightVelU;
 8009eec:	4b77      	ldr	r3, [pc, #476]	; (800a0cc <APPEnquire+0x284>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	611a      	str	r2, [r3, #16]
		break;
 8009ef4:	e0cf      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_X_Y_POS:
		penq->enq_buffer[0].data = fXPos;
 8009ef6:	4b76      	ldr	r3, [pc, #472]	; (800a0d0 <APPEnquire+0x288>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fYPos;
 8009efe:	4b75      	ldr	r3, [pc, #468]	; (800a0d4 <APPEnquire+0x28c>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	609a      	str	r2, [r3, #8]
		break;
 8009f06:	e0c6      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_X_Y_RAW:
		penq->enq_buffer[0].data = (float)BIOS_QEI2.count;
 8009f08:	4b73      	ldr	r3, [pc, #460]	; (800a0d8 <APPEnquire+0x290>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	ee07 3a90 	vmov	s15, r3
 8009f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	edc3 7a01 	vstr	s15, [r3, #4]
		penq->enq_buffer[1].data = (float)BIOS_QEI5.count;
 8009f1a:	4b70      	ldr	r3, [pc, #448]	; (800a0dc <APPEnquire+0x294>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8009f2c:	e0b3      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_X_Y_IMU_LSA:
		LSA_read(LSA_FRONT);
 8009f2e:	4b6c      	ldr	r3, [pc, #432]	; (800a0e0 <APPEnquire+0x298>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f9 ffa2 	bl	8003e7c <LSA_read>
		LsaData.lsa_F = LSA_FRONT->LSA_bits.Byte;
 8009f38:	4b69      	ldr	r3, [pc, #420]	; (800a0e0 <APPEnquire+0x298>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8009f40:	4b68      	ldr	r3, [pc, #416]	; (800a0e4 <APPEnquire+0x29c>)
 8009f42:	701a      	strb	r2, [r3, #0]
		LSA_read(LSA_BACK);
 8009f44:	4b68      	ldr	r3, [pc, #416]	; (800a0e8 <APPEnquire+0x2a0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f9 ff97 	bl	8003e7c <LSA_read>
		LsaData.lsa_B = LSA_BACK->LSA_bits.Byte;
 8009f4e:	4b66      	ldr	r3, [pc, #408]	; (800a0e8 <APPEnquire+0x2a0>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8009f56:	4b63      	ldr	r3, [pc, #396]	; (800a0e4 <APPEnquire+0x29c>)
 8009f58:	705a      	strb	r2, [r3, #1]
		LSA_read(LSA_LEFT);
 8009f5a:	4b64      	ldr	r3, [pc, #400]	; (800a0ec <APPEnquire+0x2a4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7f9 ff8c 	bl	8003e7c <LSA_read>
		LsaData.lsa_L = LSA_LEFT->LSA_bits.Byte;
 8009f64:	4b61      	ldr	r3, [pc, #388]	; (800a0ec <APPEnquire+0x2a4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8009f6c:	4b5d      	ldr	r3, [pc, #372]	; (800a0e4 <APPEnquire+0x29c>)
 8009f6e:	709a      	strb	r2, [r3, #2]
		LSA_read(LSA_RIGHT);
 8009f70:	4b5f      	ldr	r3, [pc, #380]	; (800a0f0 <APPEnquire+0x2a8>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f9 ff81 	bl	8003e7c <LSA_read>
		LsaData.lsa_R = LSA_RIGHT->LSA_bits.Byte;
 8009f7a:	4b5d      	ldr	r3, [pc, #372]	; (800a0f0 <APPEnquire+0x2a8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8009f82:	4b58      	ldr	r3, [pc, #352]	; (800a0e4 <APPEnquire+0x29c>)
 8009f84:	70da      	strb	r2, [r3, #3]
		penq->enq_buffer[0].data = fyaw;
 8009f86:	4b5b      	ldr	r3, [pc, #364]	; (800a0f4 <APPEnquire+0x2ac>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fXPos;
 8009f8e:	4b50      	ldr	r3, [pc, #320]	; (800a0d0 <APPEnquire+0x288>)
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fYPos;
 8009f96:	4b4f      	ldr	r3, [pc, #316]	; (800a0d4 <APPEnquire+0x28c>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = LsaData.LSA_ALL;
 8009f9e:	4b51      	ldr	r3, [pc, #324]	; (800a0e4 <APPEnquire+0x29c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8009fb0:	e071      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_LSA_ALL:
		LSA_read(LSA_FRONT);
 8009fb2:	4b4b      	ldr	r3, [pc, #300]	; (800a0e0 <APPEnquire+0x298>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f9 ff60 	bl	8003e7c <LSA_read>
		LSA_read(LSA_BACK);
 8009fbc:	4b4a      	ldr	r3, [pc, #296]	; (800a0e8 <APPEnquire+0x2a0>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7f9 ff5b 	bl	8003e7c <LSA_read>
		LSA_read(LSA_LEFT);
 8009fc6:	4b49      	ldr	r3, [pc, #292]	; (800a0ec <APPEnquire+0x2a4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f9 ff56 	bl	8003e7c <LSA_read>
		LSA_read(LSA_RIGHT);
 8009fd0:	4b47      	ldr	r3, [pc, #284]	; (800a0f0 <APPEnquire+0x2a8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7f9 ff51 	bl	8003e7c <LSA_read>
		penq->enq_buffer[0].data = (float)LSA_FRONT->LSA_bits.Byte;
 8009fda:	4b41      	ldr	r3, [pc, #260]	; (800a0e0 <APPEnquire+0x298>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	edc3 7a01 	vstr	s15, [r3, #4]
		penq->enq_buffer[1].data = (float)LSA_BACK->LSA_bits.Byte;
 8009ff0:	4b3d      	ldr	r3, [pc, #244]	; (800a0e8 <APPEnquire+0x2a0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	edc3 7a02 	vstr	s15, [r3, #8]
		penq->enq_buffer[2].data = (float)LSA_LEFT->LSA_bits.Byte;
 800a006:	4b39      	ldr	r3, [pc, #228]	; (800a0ec <APPEnquire+0x2a4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	edc3 7a03 	vstr	s15, [r3, #12]
		penq->enq_buffer[2].data = (float)LSA_RIGHT->LSA_bits.Byte;
 800a01c:	4b34      	ldr	r3, [pc, #208]	; (800a0f0 <APPEnquire+0x2a8>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a024:	ee07 3a90 	vmov	s15, r3
 800a028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 800a032:	e030      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_LF_JUNCTION:
		penq->enq_buffer[0].data = (float)junction_count;
 800a034:	4b30      	ldr	r3, [pc, #192]	; (800a0f8 <APPEnquire+0x2b0>)
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	ee07 3a90 	vmov	s15, r3
 800a03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 800a046:	e026      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_ANGLE:
		penq->enq_buffer[0].data = fyaw;
 800a048:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <APPEnquire+0x2ac>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
	break;
 800a050:	e021      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_COORDINATE_X_Y_Z:
		penq->enq_buffer[0].data = pp.real_x;	//PathPlan.point3_p1.p.x;
 800a052:	4b2a      	ldr	r3, [pc, #168]	; (800a0fc <APPEnquire+0x2b4>)
 800a054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = pp.real_y;	//PathPlan.point3_p1.p.y;
 800a05a:	4b28      	ldr	r3, [pc, #160]	; (800a0fc <APPEnquire+0x2b4>)
 800a05c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = pp.real_z;	//PathPlan.point3_p1.p.z;
 800a062:	4b26      	ldr	r3, [pc, #152]	; (800a0fc <APPEnquire+0x2b4>)
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	60da      	str	r2, [r3, #12]
		break;
 800a06a:	e014      	b.n	800a096 <APPEnquire+0x24e>

	case RNS_PathPlan_VELOCITY:
		penq->enq_buffer[0].data = pp.v2;
 800a06c:	4b23      	ldr	r3, [pc, #140]	; (800a0fc <APPEnquire+0x2b4>)
 800a06e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = pp.v1;
 800a076:	4b21      	ldr	r3, [pc, #132]	; (800a0fc <APPEnquire+0x2b4>)
 800a078:	f8d3 22e4 	ldr.w	r2, [r3, #740]	; 0x2e4
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = pp.v3;
 800a080:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <APPEnquire+0x2b4>)
 800a082:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = pp.v4;
 800a08a:	4b1c      	ldr	r3, [pc, #112]	; (800a0fc <APPEnquire+0x2b4>)
 800a08c:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	611a      	str	r2, [r3, #16]
		break;
 800a094:	bf00      	nop

	}

}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20007f14 	.word	0x20007f14
 800a0a4:	20006ef0 	.word	0x20006ef0
 800a0a8:	20007f20 	.word	0x20007f20
 800a0ac:	20006db4 	.word	0x20006db4
 800a0b0:	20007ee8 	.word	0x20007ee8
 800a0b4:	20006ef8 	.word	0x20006ef8
 800a0b8:	20006e18 	.word	0x20006e18
 800a0bc:	200073f4 	.word	0x200073f4
 800a0c0:	20006e88 	.word	0x20006e88
 800a0c4:	200066a0 	.word	0x200066a0
 800a0c8:	2000675c 	.word	0x2000675c
 800a0cc:	2000662c 	.word	0x2000662c
 800a0d0:	20007bf8 	.word	0x20007bf8
 800a0d4:	20007a5c 	.word	0x20007a5c
 800a0d8:	200056e0 	.word	0x200056e0
 800a0dc:	200056fc 	.word	0x200056fc
 800a0e0:	20006e20 	.word	0x20006e20
 800a0e4:	20007ed4 	.word	0x20007ed4
 800a0e8:	200079f0 	.word	0x200079f0
 800a0ec:	200073f8 	.word	0x200073f8
 800a0f0:	20007a74 	.word	0x20007a74
 800a0f4:	20007af4 	.word	0x20007af4
 800a0f8:	20006628 	.word	0x20006628
 800a0fc:	20006868 	.word	0x20006868

0800a100 <Initialize>:
#include "include.h"

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a106:	f003 f8a9 	bl	800d25c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800a10a:	f7f9 f803 	bl	8003114 <SystemClock_Config>

	/* Initialize all configured peripherals */

	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a10e:	2301      	movs	r3, #1
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	2302      	movs	r3, #2
 800a114:	2201      	movs	r2, #1
 800a116:	2120      	movs	r1, #32
 800a118:	487b      	ldr	r0, [pc, #492]	; (800a308 <Initialize+0x208>)
 800a11a:	f7f7 fa6f 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a11e:	2301      	movs	r3, #1
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	2302      	movs	r3, #2
 800a124:	2201      	movs	r2, #1
 800a126:	2120      	movs	r1, #32
 800a128:	4878      	ldr	r0, [pc, #480]	; (800a30c <Initialize+0x20c>)
 800a12a:	f7f7 fa67 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a12e:	2301      	movs	r3, #1
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	2302      	movs	r3, #2
 800a134:	2201      	movs	r2, #1
 800a136:	2180      	movs	r1, #128	; 0x80
 800a138:	4875      	ldr	r0, [pc, #468]	; (800a310 <Initialize+0x210>)
 800a13a:	f7f7 fa5f 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED4_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a13e:	2301      	movs	r3, #1
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	2302      	movs	r3, #2
 800a144:	2201      	movs	r2, #1
 800a146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a14a:	4871      	ldr	r0, [pc, #452]	; (800a310 <Initialize+0x210>)
 800a14c:	f7f7 fa56 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED5_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a150:	2301      	movs	r3, #1
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	2302      	movs	r3, #2
 800a156:	2201      	movs	r2, #1
 800a158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a15c:	486d      	ldr	r0, [pc, #436]	; (800a314 <Initialize+0x214>)
 800a15e:	f7f7 fa4d 	bl	80015fc <GPIOPinsInit>

	GPIOPinsInit (BUTTON1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a162:	2301      	movs	r3, #1
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	2302      	movs	r3, #2
 800a168:	2200      	movs	r2, #0
 800a16a:	2110      	movs	r1, #16
 800a16c:	4867      	ldr	r0, [pc, #412]	; (800a30c <Initialize+0x20c>)
 800a16e:	f7f7 fa45 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (BUTTON2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a172:	2301      	movs	r3, #1
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	2302      	movs	r3, #2
 800a178:	2200      	movs	r2, #0
 800a17a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a17e:	4864      	ldr	r0, [pc, #400]	; (800a310 <Initialize+0x210>)
 800a180:	f7f7 fa3c 	bl	80015fc <GPIOPinsInit>

	LED1 = 1;
 800a184:	4a64      	ldr	r2, [pc, #400]	; (800a318 <Initialize+0x218>)
 800a186:	7813      	ldrb	r3, [r2, #0]
 800a188:	f043 0320 	orr.w	r3, r3, #32
 800a18c:	7013      	strb	r3, [r2, #0]
	LED2 = 1;
 800a18e:	4a63      	ldr	r2, [pc, #396]	; (800a31c <Initialize+0x21c>)
 800a190:	7813      	ldrb	r3, [r2, #0]
 800a192:	f043 0320 	orr.w	r3, r3, #32
 800a196:	7013      	strb	r3, [r2, #0]
	LED3 = 1;
 800a198:	4a61      	ldr	r2, [pc, #388]	; (800a320 <Initialize+0x220>)
 800a19a:	7813      	ldrb	r3, [r2, #0]
 800a19c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a0:	7013      	strb	r3, [r2, #0]
	LED4 = 1;
 800a1a2:	4a5f      	ldr	r2, [pc, #380]	; (800a320 <Initialize+0x220>)
 800a1a4:	7853      	ldrb	r3, [r2, #1]
 800a1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1aa:	7053      	strb	r3, [r2, #1]
	LED5 = 1;
 800a1ac:	4a5d      	ldr	r2, [pc, #372]	; (800a324 <Initialize+0x224>)
 800a1ae:	7853      	ldrb	r3, [r2, #1]
 800a1b0:	f043 0304 	orr.w	r3, r3, #4
 800a1b4:	7053      	strb	r3, [r2, #1]

	SHIFTREGInit (&SR, NO_CASCADE, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800a1b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	4b53      	ldr	r3, [pc, #332]	; (800a30c <Initialize+0x20c>)
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	4b50      	ldr	r3, [pc, #320]	; (800a308 <Initialize+0x208>)
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1ce:	4a4e      	ldr	r2, [pc, #312]	; (800a308 <Initialize+0x208>)
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4855      	ldr	r0, [pc, #340]	; (800a328 <Initialize+0x228>)
 800a1d4:	f7f8 f8c2 	bl	800235c <SHIFTREGInit>

	QEIInit(&htim1,6,2);
 800a1d8:	2202      	movs	r2, #2
 800a1da:	2106      	movs	r1, #6
 800a1dc:	4853      	ldr	r0, [pc, #332]	; (800a32c <Initialize+0x22c>)
 800a1de:	f7f7 fd79 	bl	8001cd4 <QEIInit>
	QEIInit(&htim2,7,0);
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2107      	movs	r1, #7
 800a1e6:	4852      	ldr	r0, [pc, #328]	; (800a330 <Initialize+0x230>)
 800a1e8:	f7f7 fd74 	bl	8001cd4 <QEIInit>
	QEIInit(&htim3,6,3);
 800a1ec:	2203      	movs	r2, #3
 800a1ee:	2106      	movs	r1, #6
 800a1f0:	4850      	ldr	r0, [pc, #320]	; (800a334 <Initialize+0x234>)
 800a1f2:	f7f7 fd6f 	bl	8001cd4 <QEIInit>
	QEIInit(&htim4,6,1);
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	2106      	movs	r1, #6
 800a1fa:	484f      	ldr	r0, [pc, #316]	; (800a338 <Initialize+0x238>)
 800a1fc:	f7f7 fd6a 	bl	8001cd4 <QEIInit>
	QEIInit(&htim5,7,1);
 800a200:	2201      	movs	r2, #1
 800a202:	2107      	movs	r1, #7
 800a204:	484d      	ldr	r0, [pc, #308]	; (800a33c <Initialize+0x23c>)
 800a206:	f7f7 fd65 	bl	8001cd4 <QEIInit>
	QEIInit(&htim8,6,0);
 800a20a:	2200      	movs	r2, #0
 800a20c:	2106      	movs	r1, #6
 800a20e:	484c      	ldr	r0, [pc, #304]	; (800a340 <Initialize+0x240>)
 800a210:	f7f7 fd60 	bl	8001cd4 <QEIInit>

	CANxInit(&hcan1,3,CAN_FILTER_FIFO0,0,0,13,5,0);
 800a214:	2300      	movs	r3, #0
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	2305      	movs	r3, #5
 800a21a:	9302      	str	r3, [sp, #8]
 800a21c:	230d      	movs	r3, #13
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	2300      	movs	r3, #0
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	2103      	movs	r1, #3
 800a22a:	4846      	ldr	r0, [pc, #280]	; (800a344 <Initialize+0x244>)
 800a22c:	f7f9 f9c8 	bl	80035c0 <CANxInit>
	//	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,27,5,2);

	UARTInit(&huart2, 115200, ENABLE, 5,0);
 800a230:	2300      	movs	r3, #0
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	2305      	movs	r3, #5
 800a236:	2201      	movs	r2, #1
 800a238:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a23c:	4842      	ldr	r0, [pc, #264]	; (800a348 <Initialize+0x248>)
 800a23e:	f7f9 f8e5 	bl	800340c <UARTInit>
	UARTInit(&huart5, 115200, DISABLE,5,0);
 800a242:	2300      	movs	r3, #0
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	2305      	movs	r3, #5
 800a248:	2200      	movs	r2, #0
 800a24a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a24e:	483f      	ldr	r0, [pc, #252]	; (800a34c <Initialize+0x24c>)
 800a250:	f7f9 f8dc 	bl	800340c <UARTInit>

	PWMTimeBaseInit(&htim9, 20000, 4);
 800a254:	2204      	movs	r2, #4
 800a256:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a25a:	483d      	ldr	r0, [pc, #244]	; (800a350 <Initialize+0x250>)
 800a25c:	f7f7 fac8 	bl	80017f0 <PWMTimeBaseInit>
	PWMTimeBaseInit(&htim12, 20000, 2);
 800a260:	2202      	movs	r2, #2
 800a262:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a266:	483b      	ldr	r0, [pc, #236]	; (800a354 <Initialize+0x254>)
 800a268:	f7f7 fac2 	bl	80017f0 <PWMTimeBaseInit>

	PWMChannelConfig(&htim9, TIM_CHANNEL_1, PWM_TIM9_CH1_PIN);
 800a26c:	2304      	movs	r3, #4
 800a26e:	4a26      	ldr	r2, [pc, #152]	; (800a308 <Initialize+0x208>)
 800a270:	2100      	movs	r1, #0
 800a272:	4837      	ldr	r0, [pc, #220]	; (800a350 <Initialize+0x250>)
 800a274:	f7f7 fba2 	bl	80019bc <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, PWM_TIM9_CH2_PIN);
 800a278:	2308      	movs	r3, #8
 800a27a:	4a23      	ldr	r2, [pc, #140]	; (800a308 <Initialize+0x208>)
 800a27c:	2104      	movs	r1, #4
 800a27e:	4834      	ldr	r0, [pc, #208]	; (800a350 <Initialize+0x250>)
 800a280:	f7f7 fb9c 	bl	80019bc <PWMChannelConfig>
	PWMChannelConfig(&htim12, TIM_CHANNEL_1, PWM_TIM12_CH1_PIN);
 800a284:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a288:	4a33      	ldr	r2, [pc, #204]	; (800a358 <Initialize+0x258>)
 800a28a:	2100      	movs	r1, #0
 800a28c:	4831      	ldr	r0, [pc, #196]	; (800a354 <Initialize+0x254>)
 800a28e:	f7f7 fb95 	bl	80019bc <PWMChannelConfig>
	PWMChannelConfig(&htim12, TIM_CHANNEL_2, PWM_TIM12_CH2_PIN);
 800a292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a296:	4a30      	ldr	r2, [pc, #192]	; (800a358 <Initialize+0x258>)
 800a298:	2104      	movs	r1, #4
 800a29a:	482e      	ldr	r0, [pc, #184]	; (800a354 <Initialize+0x254>)
 800a29c:	f7f7 fb8e 	bl	80019bc <PWMChannelConfig>

	BDCInit(&BDC1, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit5);
 800a2a0:	2320      	movs	r3, #32
 800a2a2:	9302      	str	r3, [sp, #8]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	4b2c      	ldr	r3, [pc, #176]	; (800a35c <Initialize+0x25c>)
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	4927      	ldr	r1, [pc, #156]	; (800a350 <Initialize+0x250>)
 800a2b2:	482b      	ldr	r0, [pc, #172]	; (800a360 <Initialize+0x260>)
 800a2b4:	f7f6 ffdc 	bl	8001270 <BDCInit>
	BDCInit(&BDC2, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a2b8:	2380      	movs	r3, #128	; 0x80
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	4b26      	ldr	r3, [pc, #152]	; (800a35c <Initialize+0x25c>)
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2204      	movs	r2, #4
 800a2c8:	4921      	ldr	r1, [pc, #132]	; (800a350 <Initialize+0x250>)
 800a2ca:	4826      	ldr	r0, [pc, #152]	; (800a364 <Initialize+0x264>)
 800a2cc:	f7f6 ffd0 	bl	8001270 <BDCInit>
	BDCInit(&BDC3, &htim12, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit4, Bit3);
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	4b20      	ldr	r3, [pc, #128]	; (800a35c <Initialize+0x25c>)
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	2200      	movs	r2, #0
 800a2e0:	491c      	ldr	r1, [pc, #112]	; (800a354 <Initialize+0x254>)
 800a2e2:	4821      	ldr	r0, [pc, #132]	; (800a368 <Initialize+0x268>)
 800a2e4:	f7f6 ffc4 	bl	8001270 <BDCInit>
	BDCInit(&BDC4, &htim12, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit1, Bit2);
 800a2e8:	2304      	movs	r3, #4
 800a2ea:	9302      	str	r3, [sp, #8]
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	4b1a      	ldr	r3, [pc, #104]	; (800a35c <Initialize+0x25c>)
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	2204      	movs	r2, #4
 800a2f8:	4916      	ldr	r1, [pc, #88]	; (800a354 <Initialize+0x254>)
 800a2fa:	481c      	ldr	r0, [pc, #112]	; (800a36c <Initialize+0x26c>)
 800a2fc:	f7f6 ffb8 	bl	8001270 <BDCInit>
	//	LSAInit(&LSA_A, S1_A_PIN, S2_A_PIN, S3_A_PIN, S4_A_PIN, S5_A_PIN, S6_A_PIN, S7_A_PIN, S8_A_PIN);
	//	LSAInit(&LSA_B, S1_B_PIN, S2_B_PIN, S3_B_PIN, S4_B_PIN, S5_B_PIN, S6_B_PIN, S7_B_PIN, S8_B_PIN);
	//	LSAInit(&LSA_C, S1_C_PIN, S2_C_PIN, S3_C_PIN, S4_C_PIN, S5_C_PIN, S6_C_PIN, S7_C_PIN, S8_C_PIN);
	//	LSAInit(&LSA_D, S1_D_PIN, S2_D_PIN, S3_D_PIN, S4_D_PIN, S5_D_PIN, S6_D_PIN, S7_D_PIN, S8_D_PIN);

}
 800a300:	bf00      	nop
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	40020000 	.word	0x40020000
 800a30c:	40020800 	.word	0x40020800
 800a310:	40021000 	.word	0x40021000
 800a314:	40020c00 	.word	0x40020c00
 800a318:	40020014 	.word	0x40020014
 800a31c:	40020814 	.word	0x40020814
 800a320:	40021014 	.word	0x40021014
 800a324:	40020c14 	.word	0x40020c14
 800a328:	200078f4 	.word	0x200078f4
 800a32c:	2000511c 	.word	0x2000511c
 800a330:	20005280 	.word	0x20005280
 800a334:	20004f34 	.word	0x20004f34
 800a338:	20004e30 	.word	0x20004e30
 800a33c:	20004ef4 	.word	0x20004ef4
 800a340:	20004df0 	.word	0x20004df0
 800a344:	20005774 	.word	0x20005774
 800a348:	200052c0 	.word	0x200052c0
 800a34c:	20004f78 	.word	0x20004f78
 800a350:	2000515c 	.word	0x2000515c
 800a354:	200053a0 	.word	0x200053a0
 800a358:	40020400 	.word	0x40020400
 800a35c:	2000790c 	.word	0x2000790c
 800a360:	20007f24 	.word	0x20007f24
 800a364:	20006e34 	.word	0x20006e34
 800a368:	2000683c 	.word	0x2000683c
 800a36c:	200079c0 	.word	0x200079c0

0800a370 <button>:


void button (void){
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0

	if (BUTTON1 == 0){
 800a374:	4b63      	ldr	r3, [pc, #396]	; (800a504 <button+0x194>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d11d      	bne.n	800a3be <button+0x4e>
		LED2=0;
 800a382:	4a61      	ldr	r2, [pc, #388]	; (800a508 <button+0x198>)
 800a384:	7813      	ldrb	r3, [r2, #0]
 800a386:	f36f 1345 	bfc	r3, #5, #1
 800a38a:	7013      	strb	r3, [r2, #0]
		mmode++;
 800a38c:	4b5f      	ldr	r3, [pc, #380]	; (800a50c <button+0x19c>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	b2da      	uxtb	r2, r3
 800a394:	4b5d      	ldr	r3, [pc, #372]	; (800a50c <button+0x19c>)
 800a396:	701a      	strb	r2, [r3, #0]
		while(BUTTON1 == 0) {
 800a398:	e004      	b.n	800a3a4 <button+0x34>
			LED2=0;
 800a39a:	4a5b      	ldr	r2, [pc, #364]	; (800a508 <button+0x198>)
 800a39c:	7813      	ldrb	r3, [r2, #0]
 800a39e:	f36f 1345 	bfc	r3, #5, #1
 800a3a2:	7013      	strb	r3, [r2, #0]
		while(BUTTON1 == 0) {
 800a3a4:	4b57      	ldr	r3, [pc, #348]	; (800a504 <button+0x194>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	f003 0310 	and.w	r3, r3, #16
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f3      	beq.n	800a39a <button+0x2a>
		}
		LED2=1;
 800a3b2:	4a55      	ldr	r2, [pc, #340]	; (800a508 <button+0x198>)
 800a3b4:	7813      	ldrb	r3, [r2, #0]
 800a3b6:	f043 0320 	orr.w	r3, r3, #32
 800a3ba:	7013      	strb	r3, [r2, #0]
		default:
			mmode = 0;
			break;
		}
	}
}
 800a3bc:	e09f      	b.n	800a4fe <button+0x18e>
	} else if (BUTTON2 == 0) {
 800a3be:	4b54      	ldr	r3, [pc, #336]	; (800a510 <button+0x1a0>)
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f040 8097 	bne.w	800a4fc <button+0x18c>
		while(BUTTON2 == 0){
 800a3ce:	e004      	b.n	800a3da <button+0x6a>
			LED2=0;
 800a3d0:	4a4d      	ldr	r2, [pc, #308]	; (800a508 <button+0x198>)
 800a3d2:	7813      	ldrb	r3, [r2, #0]
 800a3d4:	f36f 1345 	bfc	r3, #5, #1
 800a3d8:	7013      	strb	r3, [r2, #0]
		while(BUTTON2 == 0){
 800a3da:	4b4d      	ldr	r3, [pc, #308]	; (800a510 <button+0x1a0>)
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	f003 0304 	and.w	r3, r3, #4
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0f3      	beq.n	800a3d0 <button+0x60>
		LED2=1 ;
 800a3e8:	4a47      	ldr	r2, [pc, #284]	; (800a508 <button+0x198>)
 800a3ea:	7813      	ldrb	r3, [r2, #0]
 800a3ec:	f043 0320 	orr.w	r3, r3, #32
 800a3f0:	7013      	strb	r3, [r2, #0]
		switch(mmode){
 800a3f2:	4b46      	ldr	r3, [pc, #280]	; (800a50c <button+0x19c>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d87c      	bhi.n	800a4f4 <button+0x184>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <button+0x90>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a415 	.word	0x0800a415
 800a404:	0800a421 	.word	0x0800a421
 800a408:	0800a461 	.word	0x0800a461
 800a40c:	0800a4ab 	.word	0x0800a4ab
 800a410:	0800a4c5 	.word	0x0800a4c5
			LED2=1;
 800a414:	4a3c      	ldr	r2, [pc, #240]	; (800a508 <button+0x198>)
 800a416:	7813      	ldrb	r3, [r2, #0]
 800a418:	f043 0320 	orr.w	r3, r3, #32
 800a41c:	7013      	strb	r3, [r2, #0]
			break;
 800a41e:	e06e      	b.n	800a4fe <button+0x18e>
			ins.instruction = RNS_PDC;
 800a420:	4b3c      	ldr	r3, [pc, #240]	; (800a514 <button+0x1a4>)
 800a422:	220a      	movs	r2, #10
 800a424:	701a      	strb	r2, [r3, #0]
			ins.ins_buffer[0].data = 4000;
 800a426:	4b3b      	ldr	r3, [pc, #236]	; (800a514 <button+0x1a4>)
 800a428:	4a3b      	ldr	r2, [pc, #236]	; (800a518 <button+0x1a8>)
 800a42a:	605a      	str	r2, [r3, #4]
			ins.ins_buffer[1].data = 4000;
 800a42c:	4b39      	ldr	r3, [pc, #228]	; (800a514 <button+0x1a4>)
 800a42e:	4a3a      	ldr	r2, [pc, #232]	; (800a518 <button+0x1a8>)
 800a430:	609a      	str	r2, [r3, #8]
			ins.ins_buffer[2].data = 4000;
 800a432:	4b38      	ldr	r3, [pc, #224]	; (800a514 <button+0x1a4>)
 800a434:	4a38      	ldr	r2, [pc, #224]	; (800a518 <button+0x1a8>)
 800a436:	60da      	str	r2, [r3, #12]
			ins.ins_buffer[3].data = 4000;
 800a438:	4b36      	ldr	r3, [pc, #216]	; (800a514 <button+0x1a4>)
 800a43a:	4a37      	ldr	r2, [pc, #220]	; (800a518 <button+0x1a8>)
 800a43c:	611a      	str	r2, [r3, #16]
			APPApply(&ins);
 800a43e:	4835      	ldr	r0, [pc, #212]	; (800a514 <button+0x1a4>)
 800a440:	f7ff f998 	bl	8009774 <APPApply>
			APPStart(&ins);
 800a444:	4833      	ldr	r0, [pc, #204]	; (800a514 <button+0x1a4>)
 800a446:	f7ff fb39 	bl	8009abc <APPStart>
			sys.activate=1;
 800a44a:	4a34      	ldr	r2, [pc, #208]	; (800a51c <button+0x1ac>)
 800a44c:	7813      	ldrb	r3, [r2, #0]
 800a44e:	f043 0301 	orr.w	r3, r3, #1
 800a452:	7013      	strb	r3, [r2, #0]
			LED3=0;
 800a454:	4a32      	ldr	r2, [pc, #200]	; (800a520 <button+0x1b0>)
 800a456:	7813      	ldrb	r3, [r2, #0]
 800a458:	f36f 13c7 	bfc	r3, #7, #1
 800a45c:	7013      	strb	r3, [r2, #0]
			break;
 800a45e:	e04e      	b.n	800a4fe <button+0x18e>
			ins.instruction = RNS_PDC;
 800a460:	4b2c      	ldr	r3, [pc, #176]	; (800a514 <button+0x1a4>)
 800a462:	220a      	movs	r2, #10
 800a464:	701a      	strb	r2, [r3, #0]
			ins.ins_buffer[0].data =-4000;
 800a466:	4b2b      	ldr	r3, [pc, #172]	; (800a514 <button+0x1a4>)
 800a468:	4a2e      	ldr	r2, [pc, #184]	; (800a524 <button+0x1b4>)
 800a46a:	605a      	str	r2, [r3, #4]
			ins.ins_buffer[1].data =-4000;
 800a46c:	4b29      	ldr	r3, [pc, #164]	; (800a514 <button+0x1a4>)
 800a46e:	4a2d      	ldr	r2, [pc, #180]	; (800a524 <button+0x1b4>)
 800a470:	609a      	str	r2, [r3, #8]
			ins.ins_buffer[2].data =-4000;
 800a472:	4b28      	ldr	r3, [pc, #160]	; (800a514 <button+0x1a4>)
 800a474:	4a2b      	ldr	r2, [pc, #172]	; (800a524 <button+0x1b4>)
 800a476:	60da      	str	r2, [r3, #12]
			ins.ins_buffer[3].data =-4000;
 800a478:	4b26      	ldr	r3, [pc, #152]	; (800a514 <button+0x1a4>)
 800a47a:	4a2a      	ldr	r2, [pc, #168]	; (800a524 <button+0x1b4>)
 800a47c:	611a      	str	r2, [r3, #16]
			APPApply(&ins);
 800a47e:	4825      	ldr	r0, [pc, #148]	; (800a514 <button+0x1a4>)
 800a480:	f7ff f978 	bl	8009774 <APPApply>
			APPStart(&ins);
 800a484:	4823      	ldr	r0, [pc, #140]	; (800a514 <button+0x1a4>)
 800a486:	f7ff fb19 	bl	8009abc <APPStart>
			sys.activate=1;
 800a48a:	4a24      	ldr	r2, [pc, #144]	; (800a51c <button+0x1ac>)
 800a48c:	7813      	ldrb	r3, [r2, #0]
 800a48e:	f043 0301 	orr.w	r3, r3, #1
 800a492:	7013      	strb	r3, [r2, #0]
			LED3=1;
 800a494:	4a22      	ldr	r2, [pc, #136]	; (800a520 <button+0x1b0>)
 800a496:	7813      	ldrb	r3, [r2, #0]
 800a498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49c:	7013      	strb	r3, [r2, #0]
			LED4=0;
 800a49e:	4a20      	ldr	r2, [pc, #128]	; (800a520 <button+0x1b0>)
 800a4a0:	7853      	ldrb	r3, [r2, #1]
 800a4a2:	f36f 1386 	bfc	r3, #6, #1
 800a4a6:	7053      	strb	r3, [r2, #1]
			break;
 800a4a8:	e029      	b.n	800a4fe <button+0x18e>
			APPStop();
 800a4aa:	f7ff fbfb 	bl	8009ca4 <APPStop>
			LED4=1;
 800a4ae:	4a1c      	ldr	r2, [pc, #112]	; (800a520 <button+0x1b0>)
 800a4b0:	7853      	ldrb	r3, [r2, #1]
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	7053      	strb	r3, [r2, #1]
			break;
 800a4b8:	e021      	b.n	800a4fe <button+0x18e>
				LED5=0;
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <button+0x1b8>)
 800a4bc:	7853      	ldrb	r3, [r2, #1]
 800a4be:	f36f 0382 	bfc	r3, #2, #1
 800a4c2:	7053      	strb	r3, [r2, #1]
			while(BUTTON2 == 1){
 800a4c4:	4b12      	ldr	r3, [pc, #72]	; (800a510 <button+0x1a0>)
 800a4c6:	785b      	ldrb	r3, [r3, #1]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1f3      	bne.n	800a4ba <button+0x14a>
			while(BUTTON2 == 0);
 800a4d2:	bf00      	nop
 800a4d4:	4b0e      	ldr	r3, [pc, #56]	; (800a510 <button+0x1a0>)
 800a4d6:	785b      	ldrb	r3, [r3, #1]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f8      	beq.n	800a4d4 <button+0x164>
			mmode = 0;
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <button+0x19c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
			LED5=1;
 800a4e8:	4a0f      	ldr	r2, [pc, #60]	; (800a528 <button+0x1b8>)
 800a4ea:	7853      	ldrb	r3, [r2, #1]
 800a4ec:	f043 0304 	orr.w	r3, r3, #4
 800a4f0:	7053      	strb	r3, [r2, #1]
			break;
 800a4f2:	e004      	b.n	800a4fe <button+0x18e>
			mmode = 0;
 800a4f4:	4b05      	ldr	r3, [pc, #20]	; (800a50c <button+0x19c>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
			break;
 800a4fa:	e000      	b.n	800a4fe <button+0x18e>
	}
 800a4fc:	bf00      	nop
}
 800a4fe:	bf00      	nop
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40020810 	.word	0x40020810
 800a508:	40020814 	.word	0x40020814
 800a50c:	20006da4 	.word	0x20006da4
 800a510:	40021010 	.word	0x40021010
 800a514:	200066ac 	.word	0x200066ac
 800a518:	457a0000 	.word	0x457a0000
 800a51c:	20006dac 	.word	0x20006dac
 800a520:	40021014 	.word	0x40021014
 800a524:	c57a0000 	.word	0xc57a0000
 800a528:	40020c14 	.word	0x40020c14

0800a52c <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler()
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 800a530:	4802      	ldr	r0, [pc, #8]	; (800a53c <CAN1_RX0_IRQHandler+0x10>)
 800a532:	f003 fb3d 	bl	800dbb0 <HAL_CAN_IRQHandler>

}
 800a536:	bf00      	nop
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20005774 	.word	0x20005774

0800a540 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800a544:	4802      	ldr	r0, [pc, #8]	; (800a550 <CAN2_RX1_IRQHandler+0x10>)
 800a546:	f003 fb33 	bl	800dbb0 <HAL_CAN_IRQHandler>

}
 800a54a:	bf00      	nop
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	2000574c 	.word	0x2000574c

0800a554 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];

	if(hcan == &hcan1){
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a6b      	ldr	r2, [pc, #428]	; (800a70c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	f040 80cf 	bne.w	800a704 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800a566:	f107 0308 	add.w	r3, r7, #8
 800a56a:	4a69      	ldr	r2, [pc, #420]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f003 f9e6 	bl	800d940 <HAL_CAN_GetRxMessage>
		switch (CAN1RxMessage.StdId) {
 800a574:	4b66      	ldr	r3, [pc, #408]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3b17      	subs	r3, #23
 800a57a:	2b06      	cmp	r3, #6
 800a57c:	d86d      	bhi.n	800a65a <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
 800a57e:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800a580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a584:	0800a5a1 	.word	0x0800a5a1
 800a588:	0800a5b9 	.word	0x0800a5b9
 800a58c:	0800a5cb 	.word	0x0800a5cb
 800a590:	0800a5e3 	.word	0x0800a5e3
 800a594:	0800a5fb 	.word	0x0800a5fb
 800a598:	0800a65b 	.word	0x0800a65b
 800a59c:	0800a61d 	.word	0x0800a61d

		case mainboard_TO_RNS:
			memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800a5a0:	4b5b      	ldr	r3, [pc, #364]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a5a2:	691a      	ldr	r2, [r3, #16]
 800a5a4:	f107 0308 	add.w	r3, r7, #8
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	485a      	ldr	r0, [pc, #360]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a5ac:	f00b fda8 	bl	8016100 <memcpy>
			rcv_buf_flag = 0;
 800a5b0:	4b59      	ldr	r3, [pc, #356]	; (800a718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
			break;
 800a5b6:	e051      	b.n	800a65c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf1:
			memcpy(&rcv_buf[0], &aData, CAN1RxMessage.DLC);
 800a5b8:	4b55      	ldr	r3, [pc, #340]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	f107 0308 	add.w	r3, r7, #8
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4856      	ldr	r0, [pc, #344]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a5c4:	f00b fd9c 	bl	8016100 <memcpy>
			break;
 800a5c8:	e048      	b.n	800a65c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf2:
			memcpy(&rcv_buf[2], &aData, CAN1RxMessage.DLC);
 800a5ca:	4b51      	ldr	r3, [pc, #324]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a5cc:	691a      	ldr	r2, [r3, #16]
 800a5ce:	f107 0308 	add.w	r3, r7, #8
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4852      	ldr	r0, [pc, #328]	; (800a720 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800a5d6:	f00b fd93 	bl	8016100 <memcpy>
			rcv_buf_flag = 1;
 800a5da:	4b4f      	ldr	r3, [pc, #316]	; (800a718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	701a      	strb	r2, [r3, #0]
			break;
 800a5e0:	e03c      	b.n	800a65c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf3 :
			memcpy(&rcv_buf[4], &aData, CAN1RxMessage.DLC);
 800a5e2:	4b4b      	ldr	r3, [pc, #300]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	f107 0308 	add.w	r3, r7, #8
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	484d      	ldr	r0, [pc, #308]	; (800a724 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800a5ee:	f00b fd87 	bl	8016100 <memcpy>
			rcv_buf_flag=2;
 800a5f2:	4b49      	ldr	r3, [pc, #292]	; (800a718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	701a      	strb	r2, [r3, #0]
			break;
 800a5f8:	e030      	b.n	800a65c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf4 :
			memcpy(&rcv_buf[6], &aData, CAN1RxMessage.DLC);
 800a5fa:	4b45      	ldr	r3, [pc, #276]	; (800a710 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	f107 0308 	add.w	r3, r7, #8
 800a602:	4619      	mov	r1, r3
 800a604:	4848      	ldr	r0, [pc, #288]	; (800a728 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800a606:	f00b fd7b 	bl	8016100 <memcpy>
			rcv_buf_flag=3;
 800a60a:	4b43      	ldr	r3, [pc, #268]	; (800a718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800a60c:	2203      	movs	r2, #3
 800a60e:	701a      	strb	r2, [r3, #0]
			LED4=0;
 800a610:	4a46      	ldr	r2, [pc, #280]	; (800a72c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800a612:	7853      	ldrb	r3, [r2, #1]
 800a614:	f36f 1386 	bfc	r3, #6, #1
 800a618:	7053      	strb	r3, [r2, #1]
			break;
 800a61a:	e01f      	b.n	800a65c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case CONT_data:
			main_board_1_data_receive.common_instruction = RNS_CONTROLLER;
 800a61c:	4b44      	ldr	r3, [pc, #272]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a61e:	220b      	movs	r2, #11
 800a620:	701a      	strb	r2, [r3, #0]
			main_board_1_data_receive.common_buffer[0].byte1 = aData[0];
 800a622:	7a3a      	ldrb	r2, [r7, #8]
 800a624:	4b42      	ldr	r3, [pc, #264]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a626:	711a      	strb	r2, [r3, #4]
			main_board_1_data_receive.common_buffer[0].byte2 = aData[1];
 800a628:	7a7a      	ldrb	r2, [r7, #9]
 800a62a:	4b41      	ldr	r3, [pc, #260]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a62c:	715a      	strb	r2, [r3, #5]
			main_board_1_data_receive.common_buffer[0].byte3 = aData[2];
 800a62e:	7aba      	ldrb	r2, [r7, #10]
 800a630:	4b3f      	ldr	r3, [pc, #252]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a632:	719a      	strb	r2, [r3, #6]
			main_board_1_data_receive.common_buffer[0].byte4 = aData[3];
 800a634:	7afa      	ldrb	r2, [r7, #11]
 800a636:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a638:	71da      	strb	r2, [r3, #7]
			main_board_1_data_receive.common_buffer[1].data = 0;
 800a63a:	4b3d      	ldr	r3, [pc, #244]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a63c:	f04f 0200 	mov.w	r2, #0
 800a640:	609a      	str	r2, [r3, #8]
			main_board_1_data_receive.common_buffer[2].data = 0;
 800a642:	4b3b      	ldr	r3, [pc, #236]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a644:	f04f 0200 	mov.w	r2, #0
 800a648:	60da      	str	r2, [r3, #12]
			main_board_1_data_receive.common_buffer[3].data = 0;
 800a64a:	4b39      	ldr	r3, [pc, #228]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a64c:	f04f 0200 	mov.w	r2, #0
 800a650:	611a      	str	r2, [r3, #16]
			insData_receive[0]=19;
 800a652:	4b30      	ldr	r3, [pc, #192]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a654:	2213      	movs	r2, #19
 800a656:	701a      	strb	r2, [r3, #0]

			break;
 800a658:	e000      	b.n	800a65c <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		default:
			break;
 800a65a:	bf00      	nop
		}

		if (insData_receive[0] == 1) {
 800a65c:	4b2d      	ldr	r3, [pc, #180]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d103      	bne.n	800a66c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
			main_board_1_data_receive.common_instruction = insData_receive[1];
 800a664:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a666:	785a      	ldrb	r2, [r3, #1]
 800a668:	4b31      	ldr	r3, [pc, #196]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a66a:	701a      	strb	r2, [r3, #0]
		}

		if (insData_receive[0] == 17) {
 800a66c:	4b29      	ldr	r3, [pc, #164]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	2b11      	cmp	r3, #17
 800a672:	d143      	bne.n	800a6fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
			if (rcv_buf_flag == 1 && (insData_receive[1] < RNS_PARAM_5 || insData_receive[1]>RNS_INS_PARAM)) {
 800a674:	4b28      	ldr	r3, [pc, #160]	; (800a718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d11b      	bne.n	800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 800a67c:	4b25      	ldr	r3, [pc, #148]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	2b4f      	cmp	r3, #79	; 0x4f
 800a682:	d903      	bls.n	800a68c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 800a684:	4b23      	ldr	r3, [pc, #140]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a686:	785b      	ldrb	r3, [r3, #1]
 800a688:	2b55      	cmp	r3, #85	; 0x55
 800a68a:	d913      	bls.n	800a6b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800a68c:	4b21      	ldr	r3, [pc, #132]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a68e:	785a      	ldrb	r2, [r3, #1]
 800a690:	4b27      	ldr	r3, [pc, #156]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a692:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800a694:	4b21      	ldr	r3, [pc, #132]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a25      	ldr	r2, [pc, #148]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a69a:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800a69c:	4b1f      	ldr	r3, [pc, #124]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	4a23      	ldr	r2, [pc, #140]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6a2:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	4a21      	ldr	r2, [pc, #132]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6aa:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800a6ac:	4b1b      	ldr	r3, [pc, #108]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	4a1f      	ldr	r2, [pc, #124]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6b2:	6113      	str	r3, [r2, #16]
			}
			if(rcv_buf_flag == 3){
 800a6b4:	4b18      	ldr	r3, [pc, #96]	; (800a718 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d11f      	bne.n	800a6fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800a6bc:	4b15      	ldr	r3, [pc, #84]	; (800a714 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800a6be:	785a      	ldrb	r2, [r3, #1]
 800a6c0:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6c2:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800a6c4:	4b15      	ldr	r3, [pc, #84]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a19      	ldr	r2, [pc, #100]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6ca:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800a6cc:	4b13      	ldr	r3, [pc, #76]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4a17      	ldr	r2, [pc, #92]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6d2:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800a6d4:	4b11      	ldr	r3, [pc, #68]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	4a15      	ldr	r2, [pc, #84]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6da:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4a13      	ldr	r2, [pc, #76]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6e2:	6113      	str	r3, [r2, #16]
				main_board_1_data_receive.common_buffer[4].data = rcv_buf[4].data;
 800a6e4:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	4a11      	ldr	r2, [pc, #68]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6ea:	6153      	str	r3, [r2, #20]
				main_board_1_data_receive.common_buffer[5].data = rcv_buf[5].data;
 800a6ec:	4b0b      	ldr	r3, [pc, #44]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	4a0f      	ldr	r2, [pc, #60]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6f2:	6193      	str	r3, [r2, #24]
				main_board_1_data_receive.common_buffer[6].data = rcv_buf[6].data;
 800a6f4:	4b09      	ldr	r3, [pc, #36]	; (800a71c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	4a0d      	ldr	r2, [pc, #52]	; (800a730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800a6fa:	61d3      	str	r3, [r2, #28]
			}
		}
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a6fc:	2110      	movs	r1, #16
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f003 fa30 	bl	800db64 <HAL_CAN_ActivateNotification>
	}
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20005774 	.word	0x20005774
 800a710:	2000579c 	.word	0x2000579c
 800a714:	20006744 	.word	0x20006744
 800a718:	20007a78 	.word	0x20007a78
 800a71c:	20007360 	.word	0x20007360
 800a720:	20007368 	.word	0x20007368
 800a724:	20007370 	.word	0x20007370
 800a728:	20007378 	.word	0x20007378
 800a72c:	40021014 	.word	0x40021014
 800a730:	20007f64 	.word	0x20007f64

0800a734 <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];

	if(hcan == &hcan2){
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a6d      	ldr	r2, [pc, #436]	; (800a8f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800a740:	4293      	cmp	r3, r2
 800a742:	f040 80d3 	bne.w	800a8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	4a6b      	ldr	r2, [pc, #428]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a74c:	2101      	movs	r1, #1
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f003 f8f6 	bl	800d940 <HAL_CAN_GetRxMessage>
		switch(CAN2RxMessage.StdId){
 800a754:	4b68      	ldr	r3, [pc, #416]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3b17      	subs	r3, #23
 800a75a:	2b06      	cmp	r3, #6
 800a75c:	d86d      	bhi.n	800a83a <HAL_CAN_RxFifo1MsgPendingCallback+0x106>
 800a75e:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800a760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a764:	0800a781 	.word	0x0800a781
 800a768:	0800a799 	.word	0x0800a799
 800a76c:	0800a7ab 	.word	0x0800a7ab
 800a770:	0800a7c3 	.word	0x0800a7c3
 800a774:	0800a7db 	.word	0x0800a7db
 800a778:	0800a83b 	.word	0x0800a83b
 800a77c:	0800a7fd 	.word	0x0800a7fd

		case mainboard_TO_RNS:
			memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800a780:	4b5d      	ldr	r3, [pc, #372]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	f107 0308 	add.w	r3, r7, #8
 800a788:	4619      	mov	r1, r3
 800a78a:	485c      	ldr	r0, [pc, #368]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a78c:	f00b fcb8 	bl	8016100 <memcpy>
			rcv_buf_flag2 = 0;
 800a790:	4b5b      	ldr	r3, [pc, #364]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
			break;
 800a796:	e051      	b.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf1:
			memcpy(&rcv_buf[0], &aData, CAN2RxMessage.DLC);
 800a798:	4b57      	ldr	r3, [pc, #348]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	f107 0308 	add.w	r3, r7, #8
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4858      	ldr	r0, [pc, #352]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a7a4:	f00b fcac 	bl	8016100 <memcpy>
			break;
 800a7a8:	e048      	b.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf2:
			memcpy(&rcv_buf[2], &aData, CAN2RxMessage.DLC);
 800a7aa:	4b53      	ldr	r3, [pc, #332]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a7ac:	691a      	ldr	r2, [r3, #16]
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4854      	ldr	r0, [pc, #336]	; (800a908 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800a7b6:	f00b fca3 	bl	8016100 <memcpy>
			rcv_buf_flag2=1;
 800a7ba:	4b51      	ldr	r3, [pc, #324]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800a7bc:	2201      	movs	r2, #1
 800a7be:	701a      	strb	r2, [r3, #0]
			break;
 800a7c0:	e03c      	b.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf3 :
			memcpy(&rcv_buf[4], &aData, CAN2RxMessage.DLC);
 800a7c2:	4b4d      	ldr	r3, [pc, #308]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a7c4:	691a      	ldr	r2, [r3, #16]
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	484f      	ldr	r0, [pc, #316]	; (800a90c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800a7ce:	f00b fc97 	bl	8016100 <memcpy>
			rcv_buf_flag2=2;
 800a7d2:	4b4b      	ldr	r3, [pc, #300]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	701a      	strb	r2, [r3, #0]
			break;
 800a7d8:	e030      	b.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf4 :
			memcpy(&rcv_buf[6], &aData, CAN2RxMessage.DLC);
 800a7da:	4b47      	ldr	r3, [pc, #284]	; (800a8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800a7dc:	691a      	ldr	r2, [r3, #16]
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	484a      	ldr	r0, [pc, #296]	; (800a910 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800a7e6:	f00b fc8b 	bl	8016100 <memcpy>
			rcv_buf_flag2=3;
 800a7ea:	4b45      	ldr	r3, [pc, #276]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800a7ec:	2203      	movs	r2, #3
 800a7ee:	701a      	strb	r2, [r3, #0]
			LED4=0;
 800a7f0:	4a48      	ldr	r2, [pc, #288]	; (800a914 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800a7f2:	7853      	ldrb	r3, [r2, #1]
 800a7f4:	f36f 1386 	bfc	r3, #6, #1
 800a7f8:	7053      	strb	r3, [r2, #1]
			break;
 800a7fa:	e01f      	b.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case CONT_data:
			main_board_1_data_receive.common_instruction = RNS_CONTROLLER;
 800a7fc:	4b46      	ldr	r3, [pc, #280]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a7fe:	220b      	movs	r2, #11
 800a800:	701a      	strb	r2, [r3, #0]
			main_board_1_data_receive.common_buffer[0].byte1 = aData[0];
 800a802:	7a3a      	ldrb	r2, [r7, #8]
 800a804:	4b44      	ldr	r3, [pc, #272]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a806:	711a      	strb	r2, [r3, #4]
			main_board_1_data_receive.common_buffer[0].byte2 = aData[1];
 800a808:	7a7a      	ldrb	r2, [r7, #9]
 800a80a:	4b43      	ldr	r3, [pc, #268]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a80c:	715a      	strb	r2, [r3, #5]
			main_board_1_data_receive.common_buffer[0].byte3 = aData[2];
 800a80e:	7aba      	ldrb	r2, [r7, #10]
 800a810:	4b41      	ldr	r3, [pc, #260]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a812:	719a      	strb	r2, [r3, #6]
			main_board_1_data_receive.common_buffer[0].byte4 = aData[3];
 800a814:	7afa      	ldrb	r2, [r7, #11]
 800a816:	4b40      	ldr	r3, [pc, #256]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a818:	71da      	strb	r2, [r3, #7]
			main_board_1_data_receive.common_buffer[1].data = 0;
 800a81a:	4b3f      	ldr	r3, [pc, #252]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	609a      	str	r2, [r3, #8]
			main_board_1_data_receive.common_buffer[2].data = 0;
 800a822:	4b3d      	ldr	r3, [pc, #244]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a824:	f04f 0200 	mov.w	r2, #0
 800a828:	60da      	str	r2, [r3, #12]
			main_board_1_data_receive.common_buffer[3].data = 0;
 800a82a:	4b3b      	ldr	r3, [pc, #236]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a82c:	f04f 0200 	mov.w	r2, #0
 800a830:	611a      	str	r2, [r3, #16]
			insData_receive[0]=19;
 800a832:	4b32      	ldr	r3, [pc, #200]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a834:	2213      	movs	r2, #19
 800a836:	701a      	strb	r2, [r3, #0]
			break;
 800a838:	e000      	b.n	800a83c <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		default:
			break;
 800a83a:	bf00      	nop

		}

		if (insData_receive[0] == 1) {
 800a83c:	4b2f      	ldr	r3, [pc, #188]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d103      	bne.n	800a84c <HAL_CAN_RxFifo1MsgPendingCallback+0x118>
			main_board_1_data_receive.common_instruction = insData_receive[1];
 800a844:	4b2d      	ldr	r3, [pc, #180]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a846:	785a      	ldrb	r2, [r3, #1]
 800a848:	4b33      	ldr	r3, [pc, #204]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a84a:	701a      	strb	r2, [r3, #0]

		}

		if (insData_receive[0] == 17) {
 800a84c:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b11      	cmp	r3, #17
 800a852:	d147      	bne.n	800a8e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>
			if (rcv_buf_flag2 == 1 && (insData_receive[1] < RNS_PARAM_5 || insData_receive[1]>RNS_INS_PARAM)) {
 800a854:	4b2a      	ldr	r3, [pc, #168]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d11b      	bne.n	800a894 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
 800a85c:	4b27      	ldr	r3, [pc, #156]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b4f      	cmp	r3, #79	; 0x4f
 800a862:	d903      	bls.n	800a86c <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
 800a864:	4b25      	ldr	r3, [pc, #148]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a866:	785b      	ldrb	r3, [r3, #1]
 800a868:	2b55      	cmp	r3, #85	; 0x55
 800a86a:	d913      	bls.n	800a894 <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800a86c:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a86e:	785a      	ldrb	r2, [r3, #1]
 800a870:	4b29      	ldr	r3, [pc, #164]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a872:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800a874:	4b23      	ldr	r3, [pc, #140]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a27      	ldr	r2, [pc, #156]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a87a:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800a87c:	4b21      	ldr	r3, [pc, #132]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	4a25      	ldr	r2, [pc, #148]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a882:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800a884:	4b1f      	ldr	r3, [pc, #124]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	4a23      	ldr	r2, [pc, #140]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a88a:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800a88c:	4b1d      	ldr	r3, [pc, #116]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	4a21      	ldr	r2, [pc, #132]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a892:	6113      	str	r3, [r2, #16]
			}
			if(rcv_buf_flag2==3){
 800a894:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d123      	bne.n	800a8e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800a89c:	4b17      	ldr	r3, [pc, #92]	; (800a8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800a89e:	785a      	ldrb	r2, [r3, #1]
 800a8a0:	4b1d      	ldr	r3, [pc, #116]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8a2:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800a8a4:	4b17      	ldr	r3, [pc, #92]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a1b      	ldr	r2, [pc, #108]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8aa:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800a8ac:	4b15      	ldr	r3, [pc, #84]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4a19      	ldr	r2, [pc, #100]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8b2:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800a8b4:	4b13      	ldr	r3, [pc, #76]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	4a17      	ldr	r2, [pc, #92]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8ba:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800a8bc:	4b11      	ldr	r3, [pc, #68]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	4a15      	ldr	r2, [pc, #84]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8c2:	6113      	str	r3, [r2, #16]
				main_board_1_data_receive.common_buffer[4].data = rcv_buf[4].data;
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	4a13      	ldr	r2, [pc, #76]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8ca:	6153      	str	r3, [r2, #20]
				main_board_1_data_receive.common_buffer[5].data = rcv_buf[5].data;
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	4a11      	ldr	r2, [pc, #68]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8d2:	6193      	str	r3, [r2, #24]
				main_board_1_data_receive.common_buffer[6].data = rcv_buf[6].data;
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	4a0f      	ldr	r2, [pc, #60]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8da:	61d3      	str	r3, [r2, #28]
				main_board_1_data_receive.common_buffer[7].data = rcv_buf[7].data;
 800a8dc:	4b09      	ldr	r3, [pc, #36]	; (800a904 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	4a0d      	ldr	r2, [pc, #52]	; (800a918 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800a8e2:	6213      	str	r3, [r2, #32]
			}
		}

		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800a8e4:	2110      	movs	r1, #16
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f003 f93c 	bl	800db64 <HAL_CAN_ActivateNotification>
	}

}
 800a8ec:	bf00      	nop
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	2000574c 	.word	0x2000574c
 800a8f8:	20005708 	.word	0x20005708
 800a8fc:	20006744 	.word	0x20006744
 800a900:	20007b88 	.word	0x20007b88
 800a904:	20007360 	.word	0x20007360
 800a908:	20007368 	.word	0x20007368
 800a90c:	20007370 	.word	0x20007370
 800a910:	20007378 	.word	0x20007378
 800a914:	40021014 	.word	0x40021014
 800a918:	20007f64 	.word	0x20007f64

0800a91c <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0

}
 800a920:	bf00      	nop
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800a92a:	b480      	push	{r7}
 800a92c:	af00      	add	r7, sp, #0

}
 800a92e:	bf00      	nop
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0

	while(1){
 800a93c:	e7fe      	b.n	800a93c <MemManage_Handler+0x4>

0800a93e <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800a93e:	b480      	push	{r7}
 800a940:	af00      	add	r7, sp, #0

}
 800a942:	bf00      	nop
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0

}
 800a950:	bf00      	nop
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800a95a:	b480      	push	{r7}
 800a95c:	af00      	add	r7, sp, #0

}
 800a95e:	bf00      	nop
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <TIM1_UP_TIM10_IRQHandler>:
//{
//
//}


void TIM1_UP_TIM10_IRQHandler(void){
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0

	if (TIM1 -> CR1 == 129)
 800a96c:	4b11      	ldr	r3, [pc, #68]	; (800a9b4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b81      	cmp	r3, #129	; 0x81
 800a972:	d109      	bne.n	800a988 <TIM1_UP_TIM10_IRQHandler+0x20>
		BIOS_QEI1.signbit += 1;
 800a974:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800a976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3301      	adds	r3, #1
 800a97e:	b29b      	uxth	r3, r3
 800a980:	b21a      	sxth	r2, r3
 800a982:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800a984:	805a      	strh	r2, [r3, #2]
 800a986:	e00c      	b.n	800a9a2 <TIM1_UP_TIM10_IRQHandler+0x3a>
	else if (TIM1 ->CR1 == 145)
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b91      	cmp	r3, #145	; 0x91
 800a98e:	d108      	bne.n	800a9a2 <TIM1_UP_TIM10_IRQHandler+0x3a>
		BIOS_QEI1.signbit -= 1;
 800a990:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800a992:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	b21a      	sxth	r2, r3
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800a9a0:	805a      	strh	r2, [r3, #2]

	TIM1 -> SR = 0;
 800a9a2:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800a9a8:	20c8      	movs	r0, #200	; 0xc8
 800a9aa:	f7f7 fc4d 	bl	8002248 <QEIDelay>
}
 800a9ae:	bf00      	nop
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40010000 	.word	0x40010000
 800a9b8:	200056dc 	.word	0x200056dc

0800a9bc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0

	if (TIM2 -> CR1 == 129)
 800a9c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b81      	cmp	r3, #129	; 0x81
 800a9c8:	d109      	bne.n	800a9de <TIM2_IRQHandler+0x22>
		BIOS_QEI2.signbit += 1;
 800a9ca:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <TIM2_IRQHandler+0x50>)
 800a9cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	b21a      	sxth	r2, r3
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	; (800aa0c <TIM2_IRQHandler+0x50>)
 800a9da:	805a      	strh	r2, [r3, #2]
 800a9dc:	e00d      	b.n	800a9fa <TIM2_IRQHandler+0x3e>
	else if (TIM2 ->CR1 == 145)
 800a9de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b91      	cmp	r3, #145	; 0x91
 800a9e6:	d108      	bne.n	800a9fa <TIM2_IRQHandler+0x3e>
		BIOS_QEI2.signbit -= 1;
 800a9e8:	4b08      	ldr	r3, [pc, #32]	; (800aa0c <TIM2_IRQHandler+0x50>)
 800a9ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	b21a      	sxth	r2, r3
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <TIM2_IRQHandler+0x50>)
 800a9f8:	805a      	strh	r2, [r3, #2]
	TIM2 -> SR = 0;
 800a9fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9fe:	2200      	movs	r2, #0
 800aa00:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800aa02:	2064      	movs	r0, #100	; 0x64
 800aa04:	f7f7 fc20 	bl	8002248 <QEIDelay>
}
 800aa08:	bf00      	nop
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	200056e0 	.word	0x200056e0

0800aa10 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0

	if (TIM3 -> CR1 == 129)
 800aa14:	4b11      	ldr	r3, [pc, #68]	; (800aa5c <TIM3_IRQHandler+0x4c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b81      	cmp	r3, #129	; 0x81
 800aa1a:	d109      	bne.n	800aa30 <TIM3_IRQHandler+0x20>
		BIOS_QEI3.signbit += 1;
 800aa1c:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <TIM3_IRQHandler+0x50>)
 800aa1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	3301      	adds	r3, #1
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	b21a      	sxth	r2, r3
 800aa2a:	4b0d      	ldr	r3, [pc, #52]	; (800aa60 <TIM3_IRQHandler+0x50>)
 800aa2c:	805a      	strh	r2, [r3, #2]
 800aa2e:	e00c      	b.n	800aa4a <TIM3_IRQHandler+0x3a>
	else if (TIM3 ->CR1 == 145)
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <TIM3_IRQHandler+0x4c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b91      	cmp	r3, #145	; 0x91
 800aa36:	d108      	bne.n	800aa4a <TIM3_IRQHandler+0x3a>
		BIOS_QEI3.signbit -= 1;
 800aa38:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <TIM3_IRQHandler+0x50>)
 800aa3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	b21a      	sxth	r2, r3
 800aa46:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <TIM3_IRQHandler+0x50>)
 800aa48:	805a      	strh	r2, [r3, #2]

	TIM3 -> SR = 0;
 800aa4a:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <TIM3_IRQHandler+0x4c>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800aa50:	2064      	movs	r0, #100	; 0x64
 800aa52:	f7f7 fbf9 	bl	8002248 <QEIDelay>
}
 800aa56:	bf00      	nop
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	40000400 	.word	0x40000400
 800aa60:	200056d8 	.word	0x200056d8

0800aa64 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
	if (TIM4 -> CR1 == 129)
 800aa68:	4b11      	ldr	r3, [pc, #68]	; (800aab0 <TIM4_IRQHandler+0x4c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b81      	cmp	r3, #129	; 0x81
 800aa6e:	d109      	bne.n	800aa84 <TIM4_IRQHandler+0x20>
		BIOS_QEI4.signbit += 1;
 800aa70:	4b10      	ldr	r3, [pc, #64]	; (800aab4 <TIM4_IRQHandler+0x50>)
 800aa72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	3301      	adds	r3, #1
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	b21a      	sxth	r2, r3
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <TIM4_IRQHandler+0x50>)
 800aa80:	805a      	strh	r2, [r3, #2]
 800aa82:	e00c      	b.n	800aa9e <TIM4_IRQHandler+0x3a>
	else if (TIM4 ->CR1 == 145)
 800aa84:	4b0a      	ldr	r3, [pc, #40]	; (800aab0 <TIM4_IRQHandler+0x4c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b91      	cmp	r3, #145	; 0x91
 800aa8a:	d108      	bne.n	800aa9e <TIM4_IRQHandler+0x3a>
		BIOS_QEI4.signbit -= 1;
 800aa8c:	4b09      	ldr	r3, [pc, #36]	; (800aab4 <TIM4_IRQHandler+0x50>)
 800aa8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	3b01      	subs	r3, #1
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	b21a      	sxth	r2, r3
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <TIM4_IRQHandler+0x50>)
 800aa9c:	805a      	strh	r2, [r3, #2]

	TIM4 -> SR = 0;
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <TIM4_IRQHandler+0x4c>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800aaa4:	2064      	movs	r0, #100	; 0x64
 800aaa6:	f7f7 fbcf 	bl	8002248 <QEIDelay>
}
 800aaaa:	bf00      	nop
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	40000800 	.word	0x40000800
 800aab4:	20005700 	.word	0x20005700

0800aab8 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800aab8:	b580      	push	{r7, lr}
 800aaba:	af00      	add	r7, sp, #0


	if (TIM5 -> CR1 == 129)
 800aabc:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <TIM5_IRQHandler+0x4c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b81      	cmp	r3, #129	; 0x81
 800aac2:	d109      	bne.n	800aad8 <TIM5_IRQHandler+0x20>
		BIOS_QEI5.signbit += 1;
 800aac4:	4b10      	ldr	r3, [pc, #64]	; (800ab08 <TIM5_IRQHandler+0x50>)
 800aac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	3301      	adds	r3, #1
 800aace:	b29b      	uxth	r3, r3
 800aad0:	b21a      	sxth	r2, r3
 800aad2:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <TIM5_IRQHandler+0x50>)
 800aad4:	805a      	strh	r2, [r3, #2]
 800aad6:	e00c      	b.n	800aaf2 <TIM5_IRQHandler+0x3a>
	else if (TIM5 ->CR1 == 145)
 800aad8:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <TIM5_IRQHandler+0x4c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b91      	cmp	r3, #145	; 0x91
 800aade:	d108      	bne.n	800aaf2 <TIM5_IRQHandler+0x3a>
		BIOS_QEI5.signbit -= 1;
 800aae0:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <TIM5_IRQHandler+0x50>)
 800aae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	b21a      	sxth	r2, r3
 800aaee:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <TIM5_IRQHandler+0x50>)
 800aaf0:	805a      	strh	r2, [r3, #2]

	TIM5 -> SR = 0;
 800aaf2:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <TIM5_IRQHandler+0x4c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800aaf8:	2064      	movs	r0, #100	; 0x64
 800aafa:	f7f7 fba5 	bl	8002248 <QEIDelay>
}
 800aafe:	bf00      	nop
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	40000c00 	.word	0x40000c00
 800ab08:	200056fc 	.word	0x200056fc

0800ab0c <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void){
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0


	if (TIM8 -> CR1 == 129)
 800ab10:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b81      	cmp	r3, #129	; 0x81
 800ab16:	d109      	bne.n	800ab2c <TIM8_UP_TIM13_IRQHandler+0x20>
		BIOS_QEI6.signbit += 1;
 800ab18:	4b10      	ldr	r3, [pc, #64]	; (800ab5c <TIM8_UP_TIM13_IRQHandler+0x50>)
 800ab1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	3301      	adds	r3, #1
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	b21a      	sxth	r2, r3
 800ab26:	4b0d      	ldr	r3, [pc, #52]	; (800ab5c <TIM8_UP_TIM13_IRQHandler+0x50>)
 800ab28:	805a      	strh	r2, [r3, #2]
 800ab2a:	e00c      	b.n	800ab46 <TIM8_UP_TIM13_IRQHandler+0x3a>
	else if (TIM8 ->CR1 == 145)
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b91      	cmp	r3, #145	; 0x91
 800ab32:	d108      	bne.n	800ab46 <TIM8_UP_TIM13_IRQHandler+0x3a>
		BIOS_QEI6.signbit -= 1;
 800ab34:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <TIM8_UP_TIM13_IRQHandler+0x50>)
 800ab36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	b21a      	sxth	r2, r3
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <TIM8_UP_TIM13_IRQHandler+0x50>)
 800ab44:	805a      	strh	r2, [r3, #2]

	TIM8 -> SR = 0;
 800ab46:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800ab4c:	20c8      	movs	r0, #200	; 0xc8
 800ab4e:	f7f7 fb7b 	bl	8002248 <QEIDelay>
}
 800ab52:	bf00      	nop
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	40010400 	.word	0x40010400
 800ab5c:	20005704 	.word	0x20005704

0800ab60 <TIM7_IRQHandler>:

//
void TIM7_IRQHandler(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800ab64:	4802      	ldr	r0, [pc, #8]	; (800ab70 <TIM7_IRQHandler+0x10>)
 800ab66:	f006 fb01 	bl	801116c <HAL_TIM_IRQHandler>
}
 800ab6a:	bf00      	nop
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20005440 	.word	0x20005440

0800ab74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a05      	ldr	r2, [pc, #20]	; (800ab98 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d104      	bne.n	800ab90 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_IncTick();
 800ab86:	f002 fb8b 	bl	800d2a0 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800ab8a:	4804      	ldr	r0, [pc, #16]	; (800ab9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800ab8c:	f7f7 fc27 	bl	80023de <SHIFTREGShift>

	}
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	40001400 	.word	0x40001400
 800ab9c:	200078f4 	.word	0x200078f4

0800aba0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af02      	add	r7, sp, #8
	rcvdata = (uint16_t)(huart2.Instance->DR & (uint16_t)0x01FF);
 800aba6:	4b3a      	ldr	r3, [pc, #232]	; (800ac90 <USART2_IRQHandler+0xf0>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	b2da      	uxtb	r2, r3
 800abae:	4b39      	ldr	r3, [pc, #228]	; (800ac94 <USART2_IRQHandler+0xf4>)
 800abb0:	701a      	strb	r2, [r3, #0]
	if(rcvdata == '\n'){
 800abb2:	4b38      	ldr	r3, [pc, #224]	; (800ac94 <USART2_IRQHandler+0xf4>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	2b0a      	cmp	r3, #10
 800abb8:	d151      	bne.n	800ac5e <USART2_IRQHandler+0xbe>
		for(int i = u2rx_count; i < 25; i++)
 800abba:	4b37      	ldr	r3, [pc, #220]	; (800ac98 <USART2_IRQHandler+0xf8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]
 800abc0:	e007      	b.n	800abd2 <USART2_IRQHandler+0x32>
			c[i] = '\0';
 800abc2:	4a36      	ldr	r2, [pc, #216]	; (800ac9c <USART2_IRQHandler+0xfc>)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4413      	add	r3, r2
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]
		for(int i = u2rx_count; i < 25; i++)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	3301      	adds	r3, #1
 800abd0:	607b      	str	r3, [r7, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b18      	cmp	r3, #24
 800abd6:	ddf4      	ble.n	800abc2 <USART2_IRQHandler+0x22>
		u2rx_count = 0;
 800abd8:	4b2f      	ldr	r3, [pc, #188]	; (800ac98 <USART2_IRQHandler+0xf8>)
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
		sscanf(c, "%u%d%u", &header, &yaw, &lastbyte);
 800abde:	4b30      	ldr	r3, [pc, #192]	; (800aca0 <USART2_IRQHandler+0x100>)
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	4b30      	ldr	r3, [pc, #192]	; (800aca4 <USART2_IRQHandler+0x104>)
 800abe4:	4a30      	ldr	r2, [pc, #192]	; (800aca8 <USART2_IRQHandler+0x108>)
 800abe6:	4931      	ldr	r1, [pc, #196]	; (800acac <USART2_IRQHandler+0x10c>)
 800abe8:	482c      	ldr	r0, [pc, #176]	; (800ac9c <USART2_IRQHandler+0xfc>)
 800abea:	f00c f93f 	bl	8016e6c <siscanf>
		checksum = header + yaw + lastbyte;
 800abee:	4b2e      	ldr	r3, [pc, #184]	; (800aca8 <USART2_IRQHandler+0x108>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a2c      	ldr	r2, [pc, #176]	; (800aca4 <USART2_IRQHandler+0x104>)
 800abf4:	6812      	ldr	r2, [r2, #0]
 800abf6:	441a      	add	r2, r3
 800abf8:	4b29      	ldr	r3, [pc, #164]	; (800aca0 <USART2_IRQHandler+0x100>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	4a2c      	ldr	r2, [pc, #176]	; (800acb0 <USART2_IRQHandler+0x110>)
 800ac00:	6013      	str	r3, [r2, #0]
		if(!(checksum & 0xFF)){
 800ac02:	4b2b      	ldr	r3, [pc, #172]	; (800acb0 <USART2_IRQHandler+0x110>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d139      	bne.n	800ac80 <USART2_IRQHandler+0xe0>
			fyaw = yaw/100.0+180.0;
 800ac0c:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <USART2_IRQHandler+0x104>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7f5 fc87 	bl	8000524 <__aeabi_i2d>
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	4b26      	ldr	r3, [pc, #152]	; (800acb4 <USART2_IRQHandler+0x114>)
 800ac1c:	f7f5 fe16 	bl	800084c <__aeabi_ddiv>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4610      	mov	r0, r2
 800ac26:	4619      	mov	r1, r3
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	4b22      	ldr	r3, [pc, #136]	; (800acb8 <USART2_IRQHandler+0x118>)
 800ac2e:	f7f5 fb2d 	bl	800028c <__adddf3>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4610      	mov	r0, r2
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f7f5 ffd5 	bl	8000be8 <__aeabi_d2f>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4a1e      	ldr	r2, [pc, #120]	; (800acbc <USART2_IRQHandler+0x11c>)
 800ac42:	6013      	str	r3, [r2, #0]
			LED3=!LED3;
 800ac44:	4b1e      	ldr	r3, [pc, #120]	; (800acc0 <USART2_IRQHandler+0x120>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	4a1d      	ldr	r2, [pc, #116]	; (800acc0 <USART2_IRQHandler+0x120>)
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	09db      	lsrs	r3, r3, #7
 800ac52:	b2d9      	uxtb	r1, r3
 800ac54:	7813      	ldrb	r3, [r2, #0]
 800ac56:	f361 13c7 	bfi	r3, r1, #7, #1
 800ac5a:	7013      	strb	r3, [r2, #0]
 800ac5c:	e010      	b.n	800ac80 <USART2_IRQHandler+0xe0>
		}
	}else if(u2rx_count > 25){
 800ac5e:	4b0e      	ldr	r3, [pc, #56]	; (800ac98 <USART2_IRQHandler+0xf8>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b19      	cmp	r3, #25
 800ac64:	d903      	bls.n	800ac6e <USART2_IRQHandler+0xce>
		u2rx_count = 0;
 800ac66:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <USART2_IRQHandler+0xf8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	e008      	b.n	800ac80 <USART2_IRQHandler+0xe0>
	}else{
		c[u2rx_count++] = rcvdata;
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <USART2_IRQHandler+0xf8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	4908      	ldr	r1, [pc, #32]	; (800ac98 <USART2_IRQHandler+0xf8>)
 800ac76:	600a      	str	r2, [r1, #0]
 800ac78:	4a06      	ldr	r2, [pc, #24]	; (800ac94 <USART2_IRQHandler+0xf4>)
 800ac7a:	7811      	ldrb	r1, [r2, #0]
 800ac7c:	4a07      	ldr	r2, [pc, #28]	; (800ac9c <USART2_IRQHandler+0xfc>)
 800ac7e:	54d1      	strb	r1, [r2, r3]
	}

	HAL_UART_IRQHandler(&huart2);
 800ac80:	4803      	ldr	r0, [pc, #12]	; (800ac90 <USART2_IRQHandler+0xf0>)
 800ac82:	f007 f91b 	bl	8011ebc <HAL_UART_IRQHandler>
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	200052c0 	.word	0x200052c0
 800ac94:	200079e8 	.word	0x200079e8
 800ac98:	20007924 	.word	0x20007924
 800ac9c:	20007928 	.word	0x20007928
 800aca0:	20007edc 	.word	0x20007edc
 800aca4:	20007da4 	.word	0x20007da4
 800aca8:	20007d74 	.word	0x20007d74
 800acac:	0801ca48 	.word	0x0801ca48
 800acb0:	20007ee4 	.word	0x20007ee4
 800acb4:	40590000 	.word	0x40590000
 800acb8:	40668000 	.word	0x40668000
 800acbc:	20007af4 	.word	0x20007af4
 800acc0:	40021014 	.word	0x40021014

0800acc4 <STTStateInit>:


/*********************************************/

void STTStateInit(void)
{
 800acc4:	b480      	push	{r7}
 800acc6:	af00      	add	r7, sp, #0
	state = RNS_S_PENDING;
 800acc8:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <STTStateInit+0x14>)
 800acca:	2200      	movs	r2, #0
 800accc:	701a      	strb	r2, [r3, #0]
}
 800acce:	bf00      	nop
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	20006e5c 	.word	0x20006e5c

0800acdc <STTEventChecker>:

void STTEventChecker(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
	if (main_board_1_data_receive.common_instruction != RNS_PENDING){
 800ace0:	4b4f      	ldr	r3, [pc, #316]	; (800ae20 <STTEventChecker+0x144>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d05c      	beq.n	800ada2 <STTEventChecker+0xc6>

		sys.activate = 0;
 800ace8:	4a4e      	ldr	r2, [pc, #312]	; (800ae24 <STTEventChecker+0x148>)
 800acea:	7813      	ldrb	r3, [r2, #0]
 800acec:	f36f 0300 	bfc	r3, #0, #1
 800acf0:	7013      	strb	r3, [r2, #0]

		if (main_board_1_data_receive.common_instruction < RNS_INS_RESET)
 800acf2:	4b4b      	ldr	r3, [pc, #300]	; (800ae20 <STTEventChecker+0x144>)
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	2b03      	cmp	r3, #3
 800acf8:	d803      	bhi.n	800ad02 <STTEventChecker+0x26>
			event = RNS_E_STOP;
 800acfa:	4b4b      	ldr	r3, [pc, #300]	; (800ae28 <STTEventChecker+0x14c>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	701a      	strb	r2, [r3, #0]
 800ad00:	e02e      	b.n	800ad60 <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_VELOCITY)
 800ad02:	4b47      	ldr	r3, [pc, #284]	; (800ae20 <STTEventChecker+0x144>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b0b      	cmp	r3, #11
 800ad08:	d803      	bhi.n	800ad12 <STTEventChecker+0x36>
			event = RNS_E_VELOCITY;
 800ad0a:	4b47      	ldr	r3, [pc, #284]	; (800ae28 <STTEventChecker+0x14c>)
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	e026      	b.n	800ad60 <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_LINE_FOLLOW)
 800ad12:	4b43      	ldr	r3, [pc, #268]	; (800ae20 <STTEventChecker+0x144>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b0e      	cmp	r3, #14
 800ad18:	d803      	bhi.n	800ad22 <STTEventChecker+0x46>
			event = RNS_E_LINE_FOLLOW;
 800ad1a:	4b43      	ldr	r3, [pc, #268]	; (800ae28 <STTEventChecker+0x14c>)
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	e01e      	b.n	800ad60 <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_PATH_PLAN)
 800ad22:	4b3f      	ldr	r3, [pc, #252]	; (800ae20 <STTEventChecker+0x144>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b11      	cmp	r3, #17
 800ad28:	d803      	bhi.n	800ad32 <STTEventChecker+0x56>
			event = RNS_E_PATH_PLAN;
 800ad2a:	4b3f      	ldr	r3, [pc, #252]	; (800ae28 <STTEventChecker+0x14c>)
 800ad2c:	2203      	movs	r2, #3
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	e016      	b.n	800ad60 <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_PARAM)
 800ad32:	4b3b      	ldr	r3, [pc, #236]	; (800ae20 <STTEventChecker+0x144>)
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b54      	cmp	r3, #84	; 0x54
 800ad38:	d803      	bhi.n	800ad42 <STTEventChecker+0x66>
			event = RNS_E_PARAM;
 800ad3a:	4b3b      	ldr	r3, [pc, #236]	; (800ae28 <STTEventChecker+0x14c>)
 800ad3c:	2205      	movs	r2, #5
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e00e      	b.n	800ad60 <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_ENQ)
 800ad42:	4b37      	ldr	r3, [pc, #220]	; (800ae20 <STTEventChecker+0x144>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b61      	cmp	r3, #97	; 0x61
 800ad48:	d803      	bhi.n	800ad52 <STTEventChecker+0x76>
			event = RNS_E_ENQ;
 800ad4a:	4b37      	ldr	r3, [pc, #220]	; (800ae28 <STTEventChecker+0x14c>)
 800ad4c:	2206      	movs	r2, #6
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e006      	b.n	800ad60 <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_USER)
 800ad52:	4b33      	ldr	r3, [pc, #204]	; (800ae20 <STTEventChecker+0x144>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b62      	cmp	r3, #98	; 0x62
 800ad58:	d802      	bhi.n	800ad60 <STTEventChecker+0x84>
			event = RNS_E_USER;
 800ad5a:	4b33      	ldr	r3, [pc, #204]	; (800ae28 <STTEventChecker+0x14c>)
 800ad5c:	2204      	movs	r2, #4
 800ad5e:	701a      	strb	r2, [r3, #0]

		if(transition[state][event] != 0)
 800ad60:	4b32      	ldr	r3, [pc, #200]	; (800ae2c <STTEventChecker+0x150>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	4618      	mov	r0, r3
 800ad66:	4b30      	ldr	r3, [pc, #192]	; (800ae28 <STTEventChecker+0x14c>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4a30      	ldr	r2, [pc, #192]	; (800ae30 <STTEventChecker+0x154>)
 800ad6e:	00c3      	lsls	r3, r0, #3
 800ad70:	440b      	add	r3, r1
 800ad72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00b      	beq.n	800ad92 <STTEventChecker+0xb6>
			(transition[state][event])();
 800ad7a:	4b2c      	ldr	r3, [pc, #176]	; (800ae2c <STTEventChecker+0x150>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	4b29      	ldr	r3, [pc, #164]	; (800ae28 <STTEventChecker+0x14c>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	4619      	mov	r1, r3
 800ad86:	4a2a      	ldr	r2, [pc, #168]	; (800ae30 <STTEventChecker+0x154>)
 800ad88:	00c3      	lsls	r3, r0, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad90:	4798      	blx	r3

		sys.activate = 1;
 800ad92:	4a24      	ldr	r2, [pc, #144]	; (800ae24 <STTEventChecker+0x148>)
 800ad94:	7813      	ldrb	r3, [r2, #0]
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	7013      	strb	r3, [r2, #0]
		main_board_1_data_receive.common_instruction = RNS_PENDING;
 800ad9c:	4b20      	ldr	r3, [pc, #128]	; (800ae20 <STTEventChecker+0x144>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]

	}

	if (state == RNS_S_LINE_FOLLOW || state == RNS_S_PATH_PLAN ){
 800ada2:	4b22      	ldr	r3, [pc, #136]	; (800ae2c <STTEventChecker+0x150>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d003      	beq.n	800adb2 <STTEventChecker+0xd6>
 800adaa:	4b20      	ldr	r3, [pc, #128]	; (800ae2c <STTEventChecker+0x150>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d117      	bne.n	800ade2 <STTEventChecker+0x106>
		if (!APPBusy(&ins)){
 800adb2:	4820      	ldr	r0, [pc, #128]	; (800ae34 <STTEventChecker+0x158>)
 800adb4:	f7ff f81c 	bl	8009df0 <APPBusy>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d111      	bne.n	800ade2 <STTEventChecker+0x106>
			event = RNS_E_FINISH;
 800adbe:	4b1a      	ldr	r3, [pc, #104]	; (800ae28 <STTEventChecker+0x14c>)
 800adc0:	2207      	movs	r2, #7
 800adc2:	701a      	strb	r2, [r3, #0]
			(*transition[state][event])();
 800adc4:	4b19      	ldr	r3, [pc, #100]	; (800ae2c <STTEventChecker+0x150>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	4b17      	ldr	r3, [pc, #92]	; (800ae28 <STTEventChecker+0x14c>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	4619      	mov	r1, r3
 800add0:	4a17      	ldr	r2, [pc, #92]	; (800ae30 <STTEventChecker+0x154>)
 800add2:	00c3      	lsls	r3, r0, #3
 800add4:	440b      	add	r3, r1
 800add6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adda:	4798      	blx	r3
			main_board_1_data_receive.common_instruction = RNS_PENDING;
 800addc:	4b10      	ldr	r3, [pc, #64]	; (800ae20 <STTEventChecker+0x144>)
 800adde:	2200      	movs	r2, #0
 800ade0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (state == RNS_S_USER){
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <STTEventChecker+0x150>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b04      	cmp	r3, #4
 800ade8:	d118      	bne.n	800ae1c <STTEventChecker+0x140>
		if (UF.user == 0){
 800adea:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <STTEventChecker+0x15c>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d111      	bne.n	800ae1c <STTEventChecker+0x140>
			event = RNS_E_FINISH;
 800adf8:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <STTEventChecker+0x14c>)
 800adfa:	2207      	movs	r2, #7
 800adfc:	701a      	strb	r2, [r3, #0]
			(*transition[state][event])();
 800adfe:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <STTEventChecker+0x150>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	4b08      	ldr	r3, [pc, #32]	; (800ae28 <STTEventChecker+0x14c>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <STTEventChecker+0x154>)
 800ae0c:	00c3      	lsls	r3, r0, #3
 800ae0e:	440b      	add	r3, r1
 800ae10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae14:	4798      	blx	r3
			main_board_1_data_receive.common_instruction = RNS_PENDING;
 800ae16:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <STTEventChecker+0x144>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800ae1c:	bf00      	nop
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20007f64 	.word	0x20007f64
 800ae24:	20006dac 	.word	0x20006dac
 800ae28:	20007a70 	.word	0x20007a70
 800ae2c:	20006e5c 	.word	0x20006e5c
 800ae30:	200001c8 	.word	0x200001c8
 800ae34:	200066ac 	.word	0x200066ac
 800ae38:	20006e2c 	.word	0x20006e2c

0800ae3c <STTStop>:

void STTStop(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
	APPStop();
 800ae40:	f7fe ff30 	bl	8009ca4 <APPStop>
	state = RNS_S_PENDING;
 800ae44:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <STTStop+0x2c>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800ae4a:	4b08      	ldr	r3, [pc, #32]	; (800ae6c <STTStop+0x30>)
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800ae50:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <STTStop+0x30>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800ae56:	2302      	movs	r3, #2
 800ae58:	4a04      	ldr	r2, [pc, #16]	; (800ae6c <STTStop+0x30>)
 800ae5a:	2114      	movs	r1, #20
 800ae5c:	4804      	ldr	r0, [pc, #16]	; (800ae70 <STTStop+0x34>)
 800ae5e:	f7f8 fc67 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800ae62:	bf00      	nop
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20006e5c 	.word	0x20006e5c
 800ae6c:	20006694 	.word	0x20006694
 800ae70:	20005774 	.word	0x20005774

0800ae74 <STTPendingStateVelocity>:

void STTPendingStateVelocity(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800ae78:	4b15      	ldr	r3, [pc, #84]	; (800aed0 <STTPendingStateVelocity+0x5c>)
 800ae7a:	781a      	ldrb	r2, [r3, #0]
 800ae7c:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800ae7e:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800ae80:	4b13      	ldr	r3, [pc, #76]	; (800aed0 <STTPendingStateVelocity+0x5c>)
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	4a13      	ldr	r2, [pc, #76]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800ae86:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <STTPendingStateVelocity+0x5c>)
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	4a11      	ldr	r2, [pc, #68]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800ae8e:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800ae90:	4b0f      	ldr	r3, [pc, #60]	; (800aed0 <STTPendingStateVelocity+0x5c>)
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	4a0f      	ldr	r2, [pc, #60]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800ae96:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800ae98:	4b0d      	ldr	r3, [pc, #52]	; (800aed0 <STTPendingStateVelocity+0x5c>)
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	4a0d      	ldr	r2, [pc, #52]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800ae9e:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800aea0:	480c      	ldr	r0, [pc, #48]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800aea2:	f7fe fc67 	bl	8009774 <APPApply>
	APPStart(&ins);
 800aea6:	480b      	ldr	r0, [pc, #44]	; (800aed4 <STTPendingStateVelocity+0x60>)
 800aea8:	f7fe fe08 	bl	8009abc <APPStart>
	state = RNS_S_VELOCITY;
 800aeac:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <STTPendingStateVelocity+0x64>)
 800aeae:	2201      	movs	r2, #1
 800aeb0:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800aeb2:	4b0a      	ldr	r3, [pc, #40]	; (800aedc <STTPendingStateVelocity+0x68>)
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800aeb8:	4b08      	ldr	r3, [pc, #32]	; (800aedc <STTPendingStateVelocity+0x68>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800aebe:	2302      	movs	r3, #2
 800aec0:	4a06      	ldr	r2, [pc, #24]	; (800aedc <STTPendingStateVelocity+0x68>)
 800aec2:	2114      	movs	r1, #20
 800aec4:	4806      	ldr	r0, [pc, #24]	; (800aee0 <STTPendingStateVelocity+0x6c>)
 800aec6:	f7f8 fc33 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif



}
 800aeca:	bf00      	nop
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20007f64 	.word	0x20007f64
 800aed4:	200066ac 	.word	0x200066ac
 800aed8:	20006e5c 	.word	0x20006e5c
 800aedc:	20006694 	.word	0x20006694
 800aee0:	20005774 	.word	0x20005774

0800aee4 <STTPendingStateLineFollow>:

void STTPendingStateLineFollow(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800aee8:	4b15      	ldr	r3, [pc, #84]	; (800af40 <STTPendingStateLineFollow+0x5c>)
 800aeea:	781a      	ldrb	r2, [r3, #0]
 800aeec:	4b15      	ldr	r3, [pc, #84]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800aeee:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800aef0:	4b13      	ldr	r3, [pc, #76]	; (800af40 <STTPendingStateLineFollow+0x5c>)
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	4a13      	ldr	r2, [pc, #76]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800aef6:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800aef8:	4b11      	ldr	r3, [pc, #68]	; (800af40 <STTPendingStateLineFollow+0x5c>)
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	4a11      	ldr	r2, [pc, #68]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800aefe:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <STTPendingStateLineFollow+0x5c>)
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4a0f      	ldr	r2, [pc, #60]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800af06:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800af08:	4b0d      	ldr	r3, [pc, #52]	; (800af40 <STTPendingStateLineFollow+0x5c>)
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	4a0d      	ldr	r2, [pc, #52]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800af0e:	6113      	str	r3, [r2, #16]


	APPApply(&ins);
 800af10:	480c      	ldr	r0, [pc, #48]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800af12:	f7fe fc2f 	bl	8009774 <APPApply>
	APPStart(&ins);
 800af16:	480b      	ldr	r0, [pc, #44]	; (800af44 <STTPendingStateLineFollow+0x60>)
 800af18:	f7fe fdd0 	bl	8009abc <APPStart>
	state = RNS_S_LINE_FOLLOW;
 800af1c:	4b0a      	ldr	r3, [pc, #40]	; (800af48 <STTPendingStateLineFollow+0x64>)
 800af1e:	2202      	movs	r2, #2
 800af20:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800af22:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <STTPendingStateLineFollow+0x68>)
 800af24:	2201      	movs	r2, #1
 800af26:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800af28:	4b08      	ldr	r3, [pc, #32]	; (800af4c <STTPendingStateLineFollow+0x68>)
 800af2a:	2201      	movs	r2, #1
 800af2c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800af2e:	2302      	movs	r3, #2
 800af30:	4a06      	ldr	r2, [pc, #24]	; (800af4c <STTPendingStateLineFollow+0x68>)
 800af32:	2114      	movs	r1, #20
 800af34:	4806      	ldr	r0, [pc, #24]	; (800af50 <STTPendingStateLineFollow+0x6c>)
 800af36:	f7f8 fbfb 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800af3a:	bf00      	nop
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20007f64 	.word	0x20007f64
 800af44:	200066ac 	.word	0x200066ac
 800af48:	20006e5c 	.word	0x20006e5c
 800af4c:	20006694 	.word	0x20006694
 800af50:	20005774 	.word	0x20005774

0800af54 <STTPendingStatePathPlan>:

void STTPendingStatePathPlan(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800af58:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <STTPendingStatePathPlan+0x5c>)
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	4b15      	ldr	r3, [pc, #84]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af5e:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800af60:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <STTPendingStatePathPlan+0x5c>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4a13      	ldr	r2, [pc, #76]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af66:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800af68:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <STTPendingStatePathPlan+0x5c>)
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	4a11      	ldr	r2, [pc, #68]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af6e:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800af70:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <STTPendingStatePathPlan+0x5c>)
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	4a0f      	ldr	r2, [pc, #60]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af76:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800af78:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <STTPendingStatePathPlan+0x5c>)
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	4a0d      	ldr	r2, [pc, #52]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af7e:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800af80:	480c      	ldr	r0, [pc, #48]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af82:	f7fe fbf7 	bl	8009774 <APPApply>
	APPStart(&ins);
 800af86:	480b      	ldr	r0, [pc, #44]	; (800afb4 <STTPendingStatePathPlan+0x60>)
 800af88:	f7fe fd98 	bl	8009abc <APPStart>
	state = RNS_S_PATH_PLAN;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <STTPendingStatePathPlan+0x64>)
 800af8e:	2203      	movs	r2, #3
 800af90:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800af92:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <STTPendingStatePathPlan+0x68>)
 800af94:	2201      	movs	r2, #1
 800af96:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800af98:	4b08      	ldr	r3, [pc, #32]	; (800afbc <STTPendingStatePathPlan+0x68>)
 800af9a:	2201      	movs	r2, #1
 800af9c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800af9e:	2302      	movs	r3, #2
 800afa0:	4a06      	ldr	r2, [pc, #24]	; (800afbc <STTPendingStatePathPlan+0x68>)
 800afa2:	2114      	movs	r1, #20
 800afa4:	4806      	ldr	r0, [pc, #24]	; (800afc0 <STTPendingStatePathPlan+0x6c>)
 800afa6:	f7f8 fbc3 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800afaa:	bf00      	nop
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20007f64 	.word	0x20007f64
 800afb4:	200066ac 	.word	0x200066ac
 800afb8:	20006e5c 	.word	0x20006e5c
 800afbc:	20006694 	.word	0x20006694
 800afc0:	20005774 	.word	0x20005774

0800afc4 <STTPendingStateUser>:

void STTPendingStateUser(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800afc8:	4b15      	ldr	r3, [pc, #84]	; (800b020 <STTPendingStateUser+0x5c>)
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	4b15      	ldr	r3, [pc, #84]	; (800b024 <STTPendingStateUser+0x60>)
 800afce:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800afd0:	4b13      	ldr	r3, [pc, #76]	; (800b020 <STTPendingStateUser+0x5c>)
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4a13      	ldr	r2, [pc, #76]	; (800b024 <STTPendingStateUser+0x60>)
 800afd6:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800afd8:	4b11      	ldr	r3, [pc, #68]	; (800b020 <STTPendingStateUser+0x5c>)
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	4a11      	ldr	r2, [pc, #68]	; (800b024 <STTPendingStateUser+0x60>)
 800afde:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800afe0:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <STTPendingStateUser+0x5c>)
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	4a0f      	ldr	r2, [pc, #60]	; (800b024 <STTPendingStateUser+0x60>)
 800afe6:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800afe8:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <STTPendingStateUser+0x5c>)
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	4a0d      	ldr	r2, [pc, #52]	; (800b024 <STTPendingStateUser+0x60>)
 800afee:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800aff0:	480c      	ldr	r0, [pc, #48]	; (800b024 <STTPendingStateUser+0x60>)
 800aff2:	f7fe fbbf 	bl	8009774 <APPApply>
	APPStart(&ins);
 800aff6:	480b      	ldr	r0, [pc, #44]	; (800b024 <STTPendingStateUser+0x60>)
 800aff8:	f7fe fd60 	bl	8009abc <APPStart>

	state = RNS_S_USER;
 800affc:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <STTPendingStateUser+0x64>)
 800affe:	2204      	movs	r2, #4
 800b000:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <STTPendingStateUser+0x68>)
 800b004:	2201      	movs	r2, #1
 800b006:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b008:	4b08      	ldr	r3, [pc, #32]	; (800b02c <STTPendingStateUser+0x68>)
 800b00a:	2201      	movs	r2, #1
 800b00c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b00e:	2302      	movs	r3, #2
 800b010:	4a06      	ldr	r2, [pc, #24]	; (800b02c <STTPendingStateUser+0x68>)
 800b012:	2114      	movs	r1, #20
 800b014:	4806      	ldr	r0, [pc, #24]	; (800b030 <STTPendingStateUser+0x6c>)
 800b016:	f7f8 fb8b 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b01a:	bf00      	nop
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20007f64 	.word	0x20007f64
 800b024:	200066ac 	.word	0x200066ac
 800b028:	20006e5c 	.word	0x20006e5c
 800b02c:	20006694 	.word	0x20006694
 800b030:	20005774 	.word	0x20005774

0800b034 <STTPendingStateParam>:

void STTPendingStateParam(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
	param.parameter = main_board_1_data_receive.common_instruction;
 800b038:	4b19      	ldr	r3, [pc, #100]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b03a:	781a      	ldrb	r2, [r3, #0]
 800b03c:	4b19      	ldr	r3, [pc, #100]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b03e:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b040:	4b17      	ldr	r3, [pc, #92]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	4a17      	ldr	r2, [pc, #92]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b046:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b048:	4b15      	ldr	r3, [pc, #84]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	4a15      	ldr	r2, [pc, #84]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b04e:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b050:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	4a13      	ldr	r2, [pc, #76]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b056:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b058:	4b11      	ldr	r3, [pc, #68]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	4a11      	ldr	r2, [pc, #68]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b05e:	6113      	str	r3, [r2, #16]
	param.param_buffer[4].data = main_board_1_data_receive.common_buffer[4].data;
 800b060:	4b0f      	ldr	r3, [pc, #60]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	4a0f      	ldr	r2, [pc, #60]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b066:	6153      	str	r3, [r2, #20]
	param.param_buffer[5].data = main_board_1_data_receive.common_buffer[5].data;
 800b068:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	4a0d      	ldr	r2, [pc, #52]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b06e:	6193      	str	r3, [r2, #24]
	param.param_buffer[6].data = main_board_1_data_receive.common_buffer[6].data;
 800b070:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <STTPendingStateParam+0x6c>)
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	4a0b      	ldr	r2, [pc, #44]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b076:	61d3      	str	r3, [r2, #28]
//	sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",main_board_1_data_receive.common_buffer[0].data,main_board_1_data_receive.common_buffer[1].data,main_board_1_data_receive.common_buffer[2].data,
//			main_board_1_data_receive.common_buffer[3].data,main_board_1_data_receive.common_buffer[4].data,main_board_1_data_receive.common_buffer[5].data,main_board_1_data_receive.common_buffer[6].data);
//
//			UARTPrintString(UART5,uartbuff);

	APPSet(&param);
 800b078:	480a      	ldr	r0, [pc, #40]	; (800b0a4 <STTPendingStateParam+0x70>)
 800b07a:	f7fd f973 	bl	8008364 <APPSet>
	state = RNS_S_PENDING;
 800b07e:	4b0a      	ldr	r3, [pc, #40]	; (800b0a8 <STTPendingStateParam+0x74>)
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b084:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <STTPendingStateParam+0x78>)
 800b086:	2201      	movs	r2, #1
 800b088:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b08a:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <STTPendingStateParam+0x78>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b090:	2302      	movs	r3, #2
 800b092:	4a06      	ldr	r2, [pc, #24]	; (800b0ac <STTPendingStateParam+0x78>)
 800b094:	2114      	movs	r1, #20
 800b096:	4806      	ldr	r0, [pc, #24]	; (800b0b0 <STTPendingStateParam+0x7c>)
 800b098:	f7f8 fb4a 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b09c:	bf00      	nop
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20007f64 	.word	0x20007f64
 800b0a4:	200066c4 	.word	0x200066c4
 800b0a8:	20006e5c 	.word	0x20006e5c
 800b0ac:	20006694 	.word	0x20006694
 800b0b0:	20005774 	.word	0x20005774

0800b0b4 <STTPendingStateEnq>:

void STTPendingStateEnq(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800b0b8:	4b13      	ldr	r3, [pc, #76]	; (800b108 <STTPendingStateEnq+0x54>)
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	4b13      	ldr	r3, [pc, #76]	; (800b10c <STTPendingStateEnq+0x58>)
 800b0be:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800b0c0:	4812      	ldr	r0, [pc, #72]	; (800b10c <STTPendingStateEnq+0x58>)
 800b0c2:	f7fe fec1 	bl	8009e48 <APPEnquire>
	state = RNS_S_PENDING;
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <STTPendingStateEnq+0x5c>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_PENDING;
 800b0cc:	4b0f      	ldr	r3, [pc, #60]	; (800b10c <STTPendingStateEnq+0x58>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	701a      	strb	r2, [r3, #0]
	insData_send[0] = 17;
 800b0d2:	4b10      	ldr	r3, [pc, #64]	; (800b114 <STTPendingStateEnq+0x60>)
 800b0d4:	2211      	movs	r2, #17
 800b0d6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b0d8:	4b0e      	ldr	r3, [pc, #56]	; (800b114 <STTPendingStateEnq+0x60>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	705a      	strb	r2, [r3, #1]


	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b0de:	2302      	movs	r3, #2
 800b0e0:	4a0c      	ldr	r2, [pc, #48]	; (800b114 <STTPendingStateEnq+0x60>)
 800b0e2:	2114      	movs	r1, #20
 800b0e4:	480c      	ldr	r0, [pc, #48]	; (800b118 <STTPendingStateEnq+0x64>)
 800b0e6:	f7f8 fb23 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800b0ea:	2308      	movs	r3, #8
 800b0ec:	4a0b      	ldr	r2, [pc, #44]	; (800b11c <STTPendingStateEnq+0x68>)
 800b0ee:	2115      	movs	r1, #21
 800b0f0:	4809      	ldr	r0, [pc, #36]	; (800b118 <STTPendingStateEnq+0x64>)
 800b0f2:	f7f8 fb1d 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800b0f6:	2308      	movs	r3, #8
 800b0f8:	4a09      	ldr	r2, [pc, #36]	; (800b120 <STTPendingStateEnq+0x6c>)
 800b0fa:	2116      	movs	r1, #22
 800b0fc:	4806      	ldr	r0, [pc, #24]	; (800b118 <STTPendingStateEnq+0x64>)
 800b0fe:	f7f8 fb17 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800b102:	bf00      	nop
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20007f64 	.word	0x20007f64
 800b10c:	20007b04 	.word	0x20007b04
 800b110:	20006e5c 	.word	0x20006e5c
 800b114:	20006694 	.word	0x20006694
 800b118:	20005774 	.word	0x20005774
 800b11c:	20007b08 	.word	0x20007b08
 800b120:	20007b10 	.word	0x20007b10

0800b124 <STTVelocityStateVelocity>:

void STTVelocityStateVelocity(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b128:	4b15      	ldr	r3, [pc, #84]	; (800b180 <STTVelocityStateVelocity+0x5c>)
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	4b15      	ldr	r3, [pc, #84]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b12e:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b130:	4b13      	ldr	r3, [pc, #76]	; (800b180 <STTVelocityStateVelocity+0x5c>)
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	4a13      	ldr	r2, [pc, #76]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b136:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b138:	4b11      	ldr	r3, [pc, #68]	; (800b180 <STTVelocityStateVelocity+0x5c>)
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	4a11      	ldr	r2, [pc, #68]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b13e:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b140:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <STTVelocityStateVelocity+0x5c>)
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	4a0f      	ldr	r2, [pc, #60]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b146:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b148:	4b0d      	ldr	r3, [pc, #52]	; (800b180 <STTVelocityStateVelocity+0x5c>)
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	4a0d      	ldr	r2, [pc, #52]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b14e:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b150:	480c      	ldr	r0, [pc, #48]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b152:	f7fe fb0f 	bl	8009774 <APPApply>
	APPStart(&ins);
 800b156:	480b      	ldr	r0, [pc, #44]	; (800b184 <STTVelocityStateVelocity+0x60>)
 800b158:	f7fe fcb0 	bl	8009abc <APPStart>
	state = RNS_S_VELOCITY;
 800b15c:	4b0a      	ldr	r3, [pc, #40]	; (800b188 <STTVelocityStateVelocity+0x64>)
 800b15e:	2201      	movs	r2, #1
 800b160:	701a      	strb	r2, [r3, #0]
	insData_send[0] = 1;
 800b162:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <STTVelocityStateVelocity+0x68>)
 800b164:	2201      	movs	r2, #1
 800b166:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b168:	4b08      	ldr	r3, [pc, #32]	; (800b18c <STTVelocityStateVelocity+0x68>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b16e:	2302      	movs	r3, #2
 800b170:	4a06      	ldr	r2, [pc, #24]	; (800b18c <STTVelocityStateVelocity+0x68>)
 800b172:	2114      	movs	r1, #20
 800b174:	4806      	ldr	r0, [pc, #24]	; (800b190 <STTVelocityStateVelocity+0x6c>)
 800b176:	f7f8 fadb 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif
}
 800b17a:	bf00      	nop
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20007f64 	.word	0x20007f64
 800b184:	200066ac 	.word	0x200066ac
 800b188:	20006e5c 	.word	0x20006e5c
 800b18c:	20006694 	.word	0x20006694
 800b190:	20005774 	.word	0x20005774

0800b194 <STTVelocityStateLineFollow>:

void STTVelocityStateLineFollow(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b198:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <STTVelocityStateLineFollow+0x5c>)
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b19e:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b1a0:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <STTVelocityStateLineFollow+0x5c>)
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	4a13      	ldr	r2, [pc, #76]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b1a6:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b1a8:	4b11      	ldr	r3, [pc, #68]	; (800b1f0 <STTVelocityStateLineFollow+0x5c>)
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	4a11      	ldr	r2, [pc, #68]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b1ae:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <STTVelocityStateLineFollow+0x5c>)
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	4a0f      	ldr	r2, [pc, #60]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b1b6:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <STTVelocityStateLineFollow+0x5c>)
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	4a0d      	ldr	r2, [pc, #52]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b1be:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b1c0:	480c      	ldr	r0, [pc, #48]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b1c2:	f7fe fad7 	bl	8009774 <APPApply>
	APPStart(&ins);
 800b1c6:	480b      	ldr	r0, [pc, #44]	; (800b1f4 <STTVelocityStateLineFollow+0x60>)
 800b1c8:	f7fe fc78 	bl	8009abc <APPStart>

	state = RNS_S_LINE_FOLLOW;
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <STTVelocityStateLineFollow+0x64>)
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <STTVelocityStateLineFollow+0x68>)
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b1d8:	4b08      	ldr	r3, [pc, #32]	; (800b1fc <STTVelocityStateLineFollow+0x68>)
 800b1da:	2201      	movs	r2, #1
 800b1dc:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b1de:	2302      	movs	r3, #2
 800b1e0:	4a06      	ldr	r2, [pc, #24]	; (800b1fc <STTVelocityStateLineFollow+0x68>)
 800b1e2:	2114      	movs	r1, #20
 800b1e4:	4806      	ldr	r0, [pc, #24]	; (800b200 <STTVelocityStateLineFollow+0x6c>)
 800b1e6:	f7f8 faa3 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b1ea:	bf00      	nop
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20007f64 	.word	0x20007f64
 800b1f4:	200066ac 	.word	0x200066ac
 800b1f8:	20006e5c 	.word	0x20006e5c
 800b1fc:	20006694 	.word	0x20006694
 800b200:	20005774 	.word	0x20005774

0800b204 <STTVelocityStatePathPlan>:

void STTVelocityStatePathPlan(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b208:	4b15      	ldr	r3, [pc, #84]	; (800b260 <STTVelocityStatePathPlan+0x5c>)
 800b20a:	781a      	ldrb	r2, [r3, #0]
 800b20c:	4b15      	ldr	r3, [pc, #84]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b20e:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b210:	4b13      	ldr	r3, [pc, #76]	; (800b260 <STTVelocityStatePathPlan+0x5c>)
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	4a13      	ldr	r2, [pc, #76]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b216:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b218:	4b11      	ldr	r3, [pc, #68]	; (800b260 <STTVelocityStatePathPlan+0x5c>)
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	4a11      	ldr	r2, [pc, #68]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b21e:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b220:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <STTVelocityStatePathPlan+0x5c>)
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	4a0f      	ldr	r2, [pc, #60]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b226:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b228:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <STTVelocityStatePathPlan+0x5c>)
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	4a0d      	ldr	r2, [pc, #52]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b22e:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b230:	480c      	ldr	r0, [pc, #48]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b232:	f7fe fa9f 	bl	8009774 <APPApply>
	APPStart(&ins);
 800b236:	480b      	ldr	r0, [pc, #44]	; (800b264 <STTVelocityStatePathPlan+0x60>)
 800b238:	f7fe fc40 	bl	8009abc <APPStart>
	state = RNS_S_PATH_PLAN;
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <STTVelocityStatePathPlan+0x64>)
 800b23e:	2203      	movs	r2, #3
 800b240:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b242:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <STTVelocityStatePathPlan+0x68>)
 800b244:	2201      	movs	r2, #1
 800b246:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b248:	4b08      	ldr	r3, [pc, #32]	; (800b26c <STTVelocityStatePathPlan+0x68>)
 800b24a:	2201      	movs	r2, #1
 800b24c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b24e:	2302      	movs	r3, #2
 800b250:	4a06      	ldr	r2, [pc, #24]	; (800b26c <STTVelocityStatePathPlan+0x68>)
 800b252:	2114      	movs	r1, #20
 800b254:	4806      	ldr	r0, [pc, #24]	; (800b270 <STTVelocityStatePathPlan+0x6c>)
 800b256:	f7f8 fa6b 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b25a:	bf00      	nop
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20007f64 	.word	0x20007f64
 800b264:	200066ac 	.word	0x200066ac
 800b268:	20006e5c 	.word	0x20006e5c
 800b26c:	20006694 	.word	0x20006694
 800b270:	20005774 	.word	0x20005774

0800b274 <STTVelocityStateUser>:

void STTVelocityStateUser(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b278:	4b15      	ldr	r3, [pc, #84]	; (800b2d0 <STTVelocityStateUser+0x5c>)
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b27e:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b280:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <STTVelocityStateUser+0x5c>)
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4a13      	ldr	r2, [pc, #76]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b286:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b288:	4b11      	ldr	r3, [pc, #68]	; (800b2d0 <STTVelocityStateUser+0x5c>)
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	4a11      	ldr	r2, [pc, #68]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b28e:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b290:	4b0f      	ldr	r3, [pc, #60]	; (800b2d0 <STTVelocityStateUser+0x5c>)
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	4a0f      	ldr	r2, [pc, #60]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b296:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b298:	4b0d      	ldr	r3, [pc, #52]	; (800b2d0 <STTVelocityStateUser+0x5c>)
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	4a0d      	ldr	r2, [pc, #52]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b29e:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b2a0:	480c      	ldr	r0, [pc, #48]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b2a2:	f7fe fa67 	bl	8009774 <APPApply>
	APPStart(&ins);
 800b2a6:	480b      	ldr	r0, [pc, #44]	; (800b2d4 <STTVelocityStateUser+0x60>)
 800b2a8:	f7fe fc08 	bl	8009abc <APPStart>
	state = RNS_S_USER;
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	; (800b2d8 <STTVelocityStateUser+0x64>)
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	; (800b2dc <STTVelocityStateUser+0x68>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b2b8:	4b08      	ldr	r3, [pc, #32]	; (800b2dc <STTVelocityStateUser+0x68>)
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b2be:	2302      	movs	r3, #2
 800b2c0:	4a06      	ldr	r2, [pc, #24]	; (800b2dc <STTVelocityStateUser+0x68>)
 800b2c2:	2114      	movs	r1, #20
 800b2c4:	4806      	ldr	r0, [pc, #24]	; (800b2e0 <STTVelocityStateUser+0x6c>)
 800b2c6:	f7f8 fa33 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b2ca:	bf00      	nop
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20007f64 	.word	0x20007f64
 800b2d4:	200066ac 	.word	0x200066ac
 800b2d8:	20006e5c 	.word	0x20006e5c
 800b2dc:	20006694 	.word	0x20006694
 800b2e0:	20005774 	.word	0x20005774

0800b2e4 <STTVelocityStateParam>:

void STTVelocityStateParam(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800b2e8:	4b13      	ldr	r3, [pc, #76]	; (800b338 <STTVelocityStateParam+0x54>)
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	4b13      	ldr	r3, [pc, #76]	; (800b33c <STTVelocityStateParam+0x58>)
 800b2ee:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b2f0:	4b11      	ldr	r3, [pc, #68]	; (800b338 <STTVelocityStateParam+0x54>)
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	4a11      	ldr	r2, [pc, #68]	; (800b33c <STTVelocityStateParam+0x58>)
 800b2f6:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b2f8:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <STTVelocityStateParam+0x54>)
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	4a0f      	ldr	r2, [pc, #60]	; (800b33c <STTVelocityStateParam+0x58>)
 800b2fe:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b300:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <STTVelocityStateParam+0x54>)
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	4a0d      	ldr	r2, [pc, #52]	; (800b33c <STTVelocityStateParam+0x58>)
 800b306:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b308:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <STTVelocityStateParam+0x54>)
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	4a0b      	ldr	r2, [pc, #44]	; (800b33c <STTVelocityStateParam+0x58>)
 800b30e:	6113      	str	r3, [r2, #16]
	APPSet(&param);
 800b310:	480a      	ldr	r0, [pc, #40]	; (800b33c <STTVelocityStateParam+0x58>)
 800b312:	f7fd f827 	bl	8008364 <APPSet>

	state = RNS_S_VELOCITY;
 800b316:	4b0a      	ldr	r3, [pc, #40]	; (800b340 <STTVelocityStateParam+0x5c>)
 800b318:	2201      	movs	r2, #1
 800b31a:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <STTVelocityStateParam+0x60>)
 800b31e:	2201      	movs	r2, #1
 800b320:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b322:	4b08      	ldr	r3, [pc, #32]	; (800b344 <STTVelocityStateParam+0x60>)
 800b324:	2200      	movs	r2, #0
 800b326:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b328:	2302      	movs	r3, #2
 800b32a:	4a06      	ldr	r2, [pc, #24]	; (800b344 <STTVelocityStateParam+0x60>)
 800b32c:	2114      	movs	r1, #20
 800b32e:	4806      	ldr	r0, [pc, #24]	; (800b348 <STTVelocityStateParam+0x64>)
 800b330:	f7f8 f9fe 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b334:	bf00      	nop
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20007f64 	.word	0x20007f64
 800b33c:	200066c4 	.word	0x200066c4
 800b340:	20006e5c 	.word	0x20006e5c
 800b344:	20006694 	.word	0x20006694
 800b348:	20005774 	.word	0x20005774

0800b34c <STTVelocityStateEnq>:

void STTVelocityStateEnq(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800b350:	4b13      	ldr	r3, [pc, #76]	; (800b3a0 <STTVelocityStateEnq+0x54>)
 800b352:	781a      	ldrb	r2, [r3, #0]
 800b354:	4b13      	ldr	r3, [pc, #76]	; (800b3a4 <STTVelocityStateEnq+0x58>)
 800b356:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800b358:	4812      	ldr	r0, [pc, #72]	; (800b3a4 <STTVelocityStateEnq+0x58>)
 800b35a:	f7fe fd75 	bl	8009e48 <APPEnquire>
	state = RNS_S_VELOCITY;
 800b35e:	4b12      	ldr	r3, [pc, #72]	; (800b3a8 <STTVelocityStateEnq+0x5c>)
 800b360:	2201      	movs	r2, #1
 800b362:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_PENDING;
 800b364:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <STTVelocityStateEnq+0x58>)
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800b36a:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <STTVelocityStateEnq+0x60>)
 800b36c:	2211      	movs	r2, #17
 800b36e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b370:	4b0e      	ldr	r3, [pc, #56]	; (800b3ac <STTVelocityStateEnq+0x60>)
 800b372:	2200      	movs	r2, #0
 800b374:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b376:	2302      	movs	r3, #2
 800b378:	4a0c      	ldr	r2, [pc, #48]	; (800b3ac <STTVelocityStateEnq+0x60>)
 800b37a:	2114      	movs	r1, #20
 800b37c:	480c      	ldr	r0, [pc, #48]	; (800b3b0 <STTVelocityStateEnq+0x64>)
 800b37e:	f7f8 f9d7 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800b382:	2308      	movs	r3, #8
 800b384:	4a0b      	ldr	r2, [pc, #44]	; (800b3b4 <STTVelocityStateEnq+0x68>)
 800b386:	2115      	movs	r1, #21
 800b388:	4809      	ldr	r0, [pc, #36]	; (800b3b0 <STTVelocityStateEnq+0x64>)
 800b38a:	f7f8 f9d1 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800b38e:	2308      	movs	r3, #8
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <STTVelocityStateEnq+0x6c>)
 800b392:	2116      	movs	r1, #22
 800b394:	4806      	ldr	r0, [pc, #24]	; (800b3b0 <STTVelocityStateEnq+0x64>)
 800b396:	f7f8 f9cb 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800b39a:	bf00      	nop
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20007f64 	.word	0x20007f64
 800b3a4:	20007b04 	.word	0x20007b04
 800b3a8:	20006e5c 	.word	0x20006e5c
 800b3ac:	20006694 	.word	0x20006694
 800b3b0:	20005774 	.word	0x20005774
 800b3b4:	20007b08 	.word	0x20007b08
 800b3b8:	20007b10 	.word	0x20007b10

0800b3bc <STTLineFollowStateParam>:

void STTLineFollowStateParam(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800b3c0:	4b13      	ldr	r3, [pc, #76]	; (800b410 <STTLineFollowStateParam+0x54>)
 800b3c2:	781a      	ldrb	r2, [r3, #0]
 800b3c4:	4b13      	ldr	r3, [pc, #76]	; (800b414 <STTLineFollowStateParam+0x58>)
 800b3c6:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b3c8:	4b11      	ldr	r3, [pc, #68]	; (800b410 <STTLineFollowStateParam+0x54>)
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	4a11      	ldr	r2, [pc, #68]	; (800b414 <STTLineFollowStateParam+0x58>)
 800b3ce:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b3d0:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <STTLineFollowStateParam+0x54>)
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	4a0f      	ldr	r2, [pc, #60]	; (800b414 <STTLineFollowStateParam+0x58>)
 800b3d6:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b3d8:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <STTLineFollowStateParam+0x54>)
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	4a0d      	ldr	r2, [pc, #52]	; (800b414 <STTLineFollowStateParam+0x58>)
 800b3de:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b3e0:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <STTLineFollowStateParam+0x54>)
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	4a0b      	ldr	r2, [pc, #44]	; (800b414 <STTLineFollowStateParam+0x58>)
 800b3e6:	6113      	str	r3, [r2, #16]
	APPSet(&param);
 800b3e8:	480a      	ldr	r0, [pc, #40]	; (800b414 <STTLineFollowStateParam+0x58>)
 800b3ea:	f7fc ffbb 	bl	8008364 <APPSet>

	state = RNS_S_LINE_FOLLOW;
 800b3ee:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <STTLineFollowStateParam+0x5c>)
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b3f4:	4b09      	ldr	r3, [pc, #36]	; (800b41c <STTLineFollowStateParam+0x60>)
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b3fa:	4b08      	ldr	r3, [pc, #32]	; (800b41c <STTLineFollowStateParam+0x60>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b400:	2302      	movs	r3, #2
 800b402:	4a06      	ldr	r2, [pc, #24]	; (800b41c <STTLineFollowStateParam+0x60>)
 800b404:	2114      	movs	r1, #20
 800b406:	4806      	ldr	r0, [pc, #24]	; (800b420 <STTLineFollowStateParam+0x64>)
 800b408:	f7f8 f992 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b40c:	bf00      	nop
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20007f64 	.word	0x20007f64
 800b414:	200066c4 	.word	0x200066c4
 800b418:	20006e5c 	.word	0x20006e5c
 800b41c:	20006694 	.word	0x20006694
 800b420:	20005774 	.word	0x20005774

0800b424 <STTLineFollowStateEnq>:

void STTLineFollowStateEnq(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800b428:	4b13      	ldr	r3, [pc, #76]	; (800b478 <STTLineFollowStateEnq+0x54>)
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	4b13      	ldr	r3, [pc, #76]	; (800b47c <STTLineFollowStateEnq+0x58>)
 800b42e:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800b430:	4812      	ldr	r0, [pc, #72]	; (800b47c <STTLineFollowStateEnq+0x58>)
 800b432:	f7fe fd09 	bl	8009e48 <APPEnquire>
	state = RNS_S_LINE_FOLLOW;
 800b436:	4b12      	ldr	r3, [pc, #72]	; (800b480 <STTLineFollowStateEnq+0x5c>)
 800b438:	2202      	movs	r2, #2
 800b43a:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_BUSY;
 800b43c:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <STTLineFollowStateEnq+0x58>)
 800b43e:	2201      	movs	r2, #1
 800b440:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800b442:	4b10      	ldr	r3, [pc, #64]	; (800b484 <STTLineFollowStateEnq+0x60>)
 800b444:	2211      	movs	r2, #17
 800b446:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b448:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <STTLineFollowStateEnq+0x60>)
 800b44a:	2201      	movs	r2, #1
 800b44c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b44e:	2302      	movs	r3, #2
 800b450:	4a0c      	ldr	r2, [pc, #48]	; (800b484 <STTLineFollowStateEnq+0x60>)
 800b452:	2114      	movs	r1, #20
 800b454:	480c      	ldr	r0, [pc, #48]	; (800b488 <STTLineFollowStateEnq+0x64>)
 800b456:	f7f8 f96b 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,&enq.enq_buffer[0],8);
 800b45a:	2308      	movs	r3, #8
 800b45c:	4a0b      	ldr	r2, [pc, #44]	; (800b48c <STTLineFollowStateEnq+0x68>)
 800b45e:	2114      	movs	r1, #20
 800b460:	4809      	ldr	r0, [pc, #36]	; (800b488 <STTLineFollowStateEnq+0x64>)
 800b462:	f7f8 f965 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,&enq.enq_buffer[2],8);
 800b466:	2308      	movs	r3, #8
 800b468:	4a09      	ldr	r2, [pc, #36]	; (800b490 <STTLineFollowStateEnq+0x6c>)
 800b46a:	2114      	movs	r1, #20
 800b46c:	4806      	ldr	r0, [pc, #24]	; (800b488 <STTLineFollowStateEnq+0x64>)
 800b46e:	f7f8 f95f 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,&enq.enq_buffer[2],8);
	#endif

}
 800b472:	bf00      	nop
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20007f64 	.word	0x20007f64
 800b47c:	20007b04 	.word	0x20007b04
 800b480:	20006e5c 	.word	0x20006e5c
 800b484:	20006694 	.word	0x20006694
 800b488:	20005774 	.word	0x20005774
 800b48c:	20007b08 	.word	0x20007b08
 800b490:	20007b10 	.word	0x20007b10

0800b494 <STTPathPlanStateStop>:

void STTPathPlanStateStop(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0

	PP_stop(&pp);
 800b498:	480a      	ldr	r0, [pc, #40]	; (800b4c4 <STTPathPlanStateStop+0x30>)
 800b49a:	f7f9 fe79 	bl	8005190 <PP_stop>
	APPStop();
 800b49e:	f7fe fc01 	bl	8009ca4 <APPStop>
	// put function to stop path plan and clear the path plan related variable

	state = RNS_S_PENDING;
 800b4a2:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <STTPathPlanStateStop+0x34>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b4a8:	4b08      	ldr	r3, [pc, #32]	; (800b4cc <STTPathPlanStateStop+0x38>)
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b4ae:	4b07      	ldr	r3, [pc, #28]	; (800b4cc <STTPathPlanStateStop+0x38>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	4a05      	ldr	r2, [pc, #20]	; (800b4cc <STTPathPlanStateStop+0x38>)
 800b4b8:	2114      	movs	r1, #20
 800b4ba:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <STTPathPlanStateStop+0x3c>)
 800b4bc:	f7f8 f938 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b4c0:	bf00      	nop
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20006868 	.word	0x20006868
 800b4c8:	20006e5c 	.word	0x20006e5c
 800b4cc:	20006694 	.word	0x20006694
 800b4d0:	20005774 	.word	0x20005774

0800b4d4 <STTPathPlanStateParam>:

void STTPathPlanStateParam(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800b4d8:	4b13      	ldr	r3, [pc, #76]	; (800b528 <STTPathPlanStateParam+0x54>)
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	4b13      	ldr	r3, [pc, #76]	; (800b52c <STTPathPlanStateParam+0x58>)
 800b4de:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b4e0:	4b11      	ldr	r3, [pc, #68]	; (800b528 <STTPathPlanStateParam+0x54>)
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4a11      	ldr	r2, [pc, #68]	; (800b52c <STTPathPlanStateParam+0x58>)
 800b4e6:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	; (800b528 <STTPathPlanStateParam+0x54>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	4a0f      	ldr	r2, [pc, #60]	; (800b52c <STTPathPlanStateParam+0x58>)
 800b4ee:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b4f0:	4b0d      	ldr	r3, [pc, #52]	; (800b528 <STTPathPlanStateParam+0x54>)
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	4a0d      	ldr	r2, [pc, #52]	; (800b52c <STTPathPlanStateParam+0x58>)
 800b4f6:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b4f8:	4b0b      	ldr	r3, [pc, #44]	; (800b528 <STTPathPlanStateParam+0x54>)
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	4a0b      	ldr	r2, [pc, #44]	; (800b52c <STTPathPlanStateParam+0x58>)
 800b4fe:	6113      	str	r3, [r2, #16]
	//param.param_buffer[4].data = main_board_1_data_receive.common_buffer[4].data;//
	APPSet(&param);
 800b500:	480a      	ldr	r0, [pc, #40]	; (800b52c <STTPathPlanStateParam+0x58>)
 800b502:	f7fc ff2f 	bl	8008364 <APPSet>

	state = RNS_S_PATH_PLAN;
 800b506:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <STTPathPlanStateParam+0x5c>)
 800b508:	2203      	movs	r2, #3
 800b50a:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b50c:	4b09      	ldr	r3, [pc, #36]	; (800b534 <STTPathPlanStateParam+0x60>)
 800b50e:	2201      	movs	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b512:	4b08      	ldr	r3, [pc, #32]	; (800b534 <STTPathPlanStateParam+0x60>)
 800b514:	2201      	movs	r2, #1
 800b516:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b518:	2302      	movs	r3, #2
 800b51a:	4a06      	ldr	r2, [pc, #24]	; (800b534 <STTPathPlanStateParam+0x60>)
 800b51c:	2114      	movs	r1, #20
 800b51e:	4806      	ldr	r0, [pc, #24]	; (800b538 <STTPathPlanStateParam+0x64>)
 800b520:	f7f8 f906 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b524:	bf00      	nop
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20007f64 	.word	0x20007f64
 800b52c:	200066c4 	.word	0x200066c4
 800b530:	20006e5c 	.word	0x20006e5c
 800b534:	20006694 	.word	0x20006694
 800b538:	20005774 	.word	0x20005774

0800b53c <STTPathPlanStateEnq>:

void STTPathPlanStateEnq(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800b540:	4b13      	ldr	r3, [pc, #76]	; (800b590 <STTPathPlanStateEnq+0x54>)
 800b542:	781a      	ldrb	r2, [r3, #0]
 800b544:	4b13      	ldr	r3, [pc, #76]	; (800b594 <STTPathPlanStateEnq+0x58>)
 800b546:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800b548:	4812      	ldr	r0, [pc, #72]	; (800b594 <STTPathPlanStateEnq+0x58>)
 800b54a:	f7fe fc7d 	bl	8009e48 <APPEnquire>
	state = RNS_S_PATH_PLAN;
 800b54e:	4b12      	ldr	r3, [pc, #72]	; (800b598 <STTPathPlanStateEnq+0x5c>)
 800b550:	2203      	movs	r2, #3
 800b552:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_BUSY;
 800b554:	4b0f      	ldr	r3, [pc, #60]	; (800b594 <STTPathPlanStateEnq+0x58>)
 800b556:	2201      	movs	r2, #1
 800b558:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800b55a:	4b10      	ldr	r3, [pc, #64]	; (800b59c <STTPathPlanStateEnq+0x60>)
 800b55c:	2211      	movs	r2, #17
 800b55e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b560:	4b0e      	ldr	r3, [pc, #56]	; (800b59c <STTPathPlanStateEnq+0x60>)
 800b562:	2201      	movs	r2, #1
 800b564:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b566:	2302      	movs	r3, #2
 800b568:	4a0c      	ldr	r2, [pc, #48]	; (800b59c <STTPathPlanStateEnq+0x60>)
 800b56a:	2114      	movs	r1, #20
 800b56c:	480c      	ldr	r0, [pc, #48]	; (800b5a0 <STTPathPlanStateEnq+0x64>)
 800b56e:	f7f8 f8df 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800b572:	2308      	movs	r3, #8
 800b574:	4a0b      	ldr	r2, [pc, #44]	; (800b5a4 <STTPathPlanStateEnq+0x68>)
 800b576:	2115      	movs	r1, #21
 800b578:	4809      	ldr	r0, [pc, #36]	; (800b5a0 <STTPathPlanStateEnq+0x64>)
 800b57a:	f7f8 f8d9 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800b57e:	2308      	movs	r3, #8
 800b580:	4a09      	ldr	r2, [pc, #36]	; (800b5a8 <STTPathPlanStateEnq+0x6c>)
 800b582:	2116      	movs	r1, #22
 800b584:	4806      	ldr	r0, [pc, #24]	; (800b5a0 <STTPathPlanStateEnq+0x64>)
 800b586:	f7f8 f8d3 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800b58a:	bf00      	nop
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20007f64 	.word	0x20007f64
 800b594:	20007b04 	.word	0x20007b04
 800b598:	20006e5c 	.word	0x20006e5c
 800b59c:	20006694 	.word	0x20006694
 800b5a0:	20005774 	.word	0x20005774
 800b5a4:	20007b08 	.word	0x20007b08
 800b5a8:	20007b10 	.word	0x20007b10

0800b5ac <STTUserStateStop>:


void STTUserStateStop(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	af00      	add	r7, sp, #0
	UF.flag = 0;
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <STTUserStateStop+0x30>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	801a      	strh	r2, [r3, #0]
	APPStop();
 800b5b6:	f7fe fb75 	bl	8009ca4 <APPStop>
	// put function to stop path plan and clear the path plan related variable

	state = RNS_S_PENDING;
 800b5ba:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <STTUserStateStop+0x34>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b5c0:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <STTUserStateStop+0x38>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b5c6:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <STTUserStateStop+0x38>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	4a05      	ldr	r2, [pc, #20]	; (800b5e4 <STTUserStateStop+0x38>)
 800b5d0:	2114      	movs	r1, #20
 800b5d2:	4805      	ldr	r0, [pc, #20]	; (800b5e8 <STTUserStateStop+0x3c>)
 800b5d4:	f7f8 f8ac 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b5d8:	bf00      	nop
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	20006e2c 	.word	0x20006e2c
 800b5e0:	20006e5c 	.word	0x20006e5c
 800b5e4:	20006694 	.word	0x20006694
 800b5e8:	20005774 	.word	0x20005774

0800b5ec <STTUserStateParam>:

void STTUserStateParam(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800b5f0:	4b13      	ldr	r3, [pc, #76]	; (800b640 <STTUserStateParam+0x54>)
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	4b13      	ldr	r3, [pc, #76]	; (800b644 <STTUserStateParam+0x58>)
 800b5f6:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b5f8:	4b11      	ldr	r3, [pc, #68]	; (800b640 <STTUserStateParam+0x54>)
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a11      	ldr	r2, [pc, #68]	; (800b644 <STTUserStateParam+0x58>)
 800b5fe:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b600:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <STTUserStateParam+0x54>)
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	4a0f      	ldr	r2, [pc, #60]	; (800b644 <STTUserStateParam+0x58>)
 800b606:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b608:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <STTUserStateParam+0x54>)
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	4a0d      	ldr	r2, [pc, #52]	; (800b644 <STTUserStateParam+0x58>)
 800b60e:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <STTUserStateParam+0x54>)
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	4a0b      	ldr	r2, [pc, #44]	; (800b644 <STTUserStateParam+0x58>)
 800b616:	6113      	str	r3, [r2, #16]
//	param.param_buffer[4].data = main_board_1_data_receive.common_buffer[4].data;//
	APPSet(&param);
 800b618:	480a      	ldr	r0, [pc, #40]	; (800b644 <STTUserStateParam+0x58>)
 800b61a:	f7fc fea3 	bl	8008364 <APPSet>

	state = RNS_S_USER;
 800b61e:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <STTUserStateParam+0x5c>)
 800b620:	2204      	movs	r2, #4
 800b622:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b624:	4b09      	ldr	r3, [pc, #36]	; (800b64c <STTUserStateParam+0x60>)
 800b626:	2201      	movs	r2, #1
 800b628:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b62a:	4b08      	ldr	r3, [pc, #32]	; (800b64c <STTUserStateParam+0x60>)
 800b62c:	2201      	movs	r2, #1
 800b62e:	705a      	strb	r2, [r3, #1]
	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b630:	2302      	movs	r3, #2
 800b632:	4a06      	ldr	r2, [pc, #24]	; (800b64c <STTUserStateParam+0x60>)
 800b634:	2114      	movs	r1, #20
 800b636:	4806      	ldr	r0, [pc, #24]	; (800b650 <STTUserStateParam+0x64>)
 800b638:	f7f8 f87a 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b63c:	bf00      	nop
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20007f64 	.word	0x20007f64
 800b644:	200066c4 	.word	0x200066c4
 800b648:	20006e5c 	.word	0x20006e5c
 800b64c:	20006694 	.word	0x20006694
 800b650:	20005774 	.word	0x20005774

0800b654 <STTUserStateEnq>:

void STTUserStateEnq(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800b658:	4b13      	ldr	r3, [pc, #76]	; (800b6a8 <STTUserStateEnq+0x54>)
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	4b13      	ldr	r3, [pc, #76]	; (800b6ac <STTUserStateEnq+0x58>)
 800b65e:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800b660:	4812      	ldr	r0, [pc, #72]	; (800b6ac <STTUserStateEnq+0x58>)
 800b662:	f7fe fbf1 	bl	8009e48 <APPEnquire>
	state = RNS_S_PATH_PLAN;
 800b666:	4b12      	ldr	r3, [pc, #72]	; (800b6b0 <STTUserStateEnq+0x5c>)
 800b668:	2203      	movs	r2, #3
 800b66a:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_BUSY;
 800b66c:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <STTUserStateEnq+0x58>)
 800b66e:	2201      	movs	r2, #1
 800b670:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800b672:	4b10      	ldr	r3, [pc, #64]	; (800b6b4 <STTUserStateEnq+0x60>)
 800b674:	2211      	movs	r2, #17
 800b676:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b678:	4b0e      	ldr	r3, [pc, #56]	; (800b6b4 <STTUserStateEnq+0x60>)
 800b67a:	2201      	movs	r2, #1
 800b67c:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b67e:	2302      	movs	r3, #2
 800b680:	4a0c      	ldr	r2, [pc, #48]	; (800b6b4 <STTUserStateEnq+0x60>)
 800b682:	2114      	movs	r1, #20
 800b684:	480c      	ldr	r0, [pc, #48]	; (800b6b8 <STTUserStateEnq+0x64>)
 800b686:	f7f8 f853 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800b68a:	2308      	movs	r3, #8
 800b68c:	4a0b      	ldr	r2, [pc, #44]	; (800b6bc <STTUserStateEnq+0x68>)
 800b68e:	2115      	movs	r1, #21
 800b690:	4809      	ldr	r0, [pc, #36]	; (800b6b8 <STTUserStateEnq+0x64>)
 800b692:	f7f8 f84d 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800b696:	2308      	movs	r3, #8
 800b698:	4a09      	ldr	r2, [pc, #36]	; (800b6c0 <STTUserStateEnq+0x6c>)
 800b69a:	2116      	movs	r1, #22
 800b69c:	4806      	ldr	r0, [pc, #24]	; (800b6b8 <STTUserStateEnq+0x64>)
 800b69e:	f7f8 f847 	bl	8003730 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800b6a2:	bf00      	nop
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20007f64 	.word	0x20007f64
 800b6ac:	20007b04 	.word	0x20007b04
 800b6b0:	20006e5c 	.word	0x20006e5c
 800b6b4:	20006694 	.word	0x20006694
 800b6b8:	20005774 	.word	0x20005774
 800b6bc:	20007b08 	.word	0x20007b08
 800b6c0:	20007b10 	.word	0x20007b10

0800b6c4 <STTUserStateFinish>:

void STTUserStateFinish(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	af00      	add	r7, sp, #0

	APPStop();
 800b6c8:	f7fe faec 	bl	8009ca4 <APPStop>

	state = RNS_S_PENDING;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <STTUserStateFinish+0x24>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]

	insData_send[1] = RNS_PENDING;
 800b6d2:	4b06      	ldr	r3, [pc, #24]	; (800b6ec <STTUserStateFinish+0x28>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
		CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b6d8:	2302      	movs	r3, #2
 800b6da:	4a04      	ldr	r2, [pc, #16]	; (800b6ec <STTUserStateFinish+0x28>)
 800b6dc:	2114      	movs	r1, #20
 800b6de:	4804      	ldr	r0, [pc, #16]	; (800b6f0 <STTUserStateFinish+0x2c>)
 800b6e0:	f7f8 f826 	bl	8003730 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b6e4:	bf00      	nop
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20006e5c 	.word	0x20006e5c
 800b6ec:	20006694 	.word	0x20006694
 800b6f0:	20005774 	.word	0x20005774

0800b6f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08c      	sub	sp, #48	; 0x30
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b700:	2300      	movs	r3, #0
 800b702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800b704:	2200      	movs	r2, #0
 800b706:	6879      	ldr	r1, [r7, #4]
 800b708:	2037      	movs	r0, #55	; 0x37
 800b70a:	f002 fd4d 	bl	800e1a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b70e:	2037      	movs	r0, #55	; 0x37
 800b710:	f002 fd66 	bl	800e1e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]
 800b718:	4b1f      	ldr	r3, [pc, #124]	; (800b798 <HAL_InitTick+0xa4>)
 800b71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71c:	4a1e      	ldr	r2, [pc, #120]	; (800b798 <HAL_InitTick+0xa4>)
 800b71e:	f043 0301 	orr.w	r3, r3, #1
 800b722:	6413      	str	r3, [r2, #64]	; 0x40
 800b724:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <HAL_InitTick+0xa4>)
 800b726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b730:	f107 0210 	add.w	r2, r7, #16
 800b734:	f107 0314 	add.w	r3, r7, #20
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f005 fa20 	bl	8010b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b740:	f005 f9f6 	bl	8010b30 <HAL_RCC_GetPCLK1Freq>
 800b744:	4603      	mov	r3, r0
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74c:	4a13      	ldr	r2, [pc, #76]	; (800b79c <HAL_InitTick+0xa8>)
 800b74e:	fba2 2303 	umull	r2, r3, r2, r3
 800b752:	0c9b      	lsrs	r3, r3, #18
 800b754:	3b01      	subs	r3, #1
 800b756:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim7.Instance = TIM7;
 800b758:	4b11      	ldr	r3, [pc, #68]	; (800b7a0 <HAL_InitTick+0xac>)
 800b75a:	4a12      	ldr	r2, [pc, #72]	; (800b7a4 <HAL_InitTick+0xb0>)
 800b75c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800b75e:	4b10      	ldr	r3, [pc, #64]	; (800b7a0 <HAL_InitTick+0xac>)
 800b760:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b764:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800b766:	4a0e      	ldr	r2, [pc, #56]	; (800b7a0 <HAL_InitTick+0xac>)
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800b76c:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <HAL_InitTick+0xac>)
 800b76e:	2200      	movs	r2, #0
 800b770:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <HAL_InitTick+0xac>)
 800b774:	2200      	movs	r2, #0
 800b776:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800b778:	4809      	ldr	r0, [pc, #36]	; (800b7a0 <HAL_InitTick+0xac>)
 800b77a:	f005 fb51 	bl	8010e20 <HAL_TIM_Base_Init>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d104      	bne.n	800b78e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800b784:	4806      	ldr	r0, [pc, #24]	; (800b7a0 <HAL_InitTick+0xac>)
 800b786:	f005 fb9a 	bl	8010ebe <HAL_TIM_Base_Start_IT>
 800b78a:	4603      	mov	r3, r0
 800b78c:	e000      	b.n	800b790 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
}
 800b790:	4618      	mov	r0, r3
 800b792:	3730      	adds	r7, #48	; 0x30
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	40023800 	.word	0x40023800
 800b79c:	431bde83 	.word	0x431bde83
 800b7a0:	20005440 	.word	0x20005440
 800b7a4:	40001400 	.word	0x40001400

0800b7a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	af00      	add	r7, sp, #0
	return 1;
 800b7ac:	2301      	movs	r3, #1
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <_kill>:

int _kill(int pid, int sig)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b7c2:	f00a fc73 	bl	80160ac <__errno>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2216      	movs	r2, #22
 800b7ca:	601a      	str	r2, [r3, #0]
	return -1;
 800b7cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <_exit>:

void _exit (int status)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b7e0:	f04f 31ff 	mov.w	r1, #4294967295
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff ffe7 	bl	800b7b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b7ea:	e7fe      	b.n	800b7ea <_exit+0x12>

0800b7ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
 800b7fc:	e00a      	b.n	800b814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b7fe:	f3af 8000 	nop.w
 800b802:	4601      	mov	r1, r0
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	1c5a      	adds	r2, r3, #1
 800b808:	60ba      	str	r2, [r7, #8]
 800b80a:	b2ca      	uxtb	r2, r1
 800b80c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3301      	adds	r3, #1
 800b812:	617b      	str	r3, [r7, #20]
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	429a      	cmp	r2, r3
 800b81a:	dbf0      	blt.n	800b7fe <_read+0x12>
	}

return len;
 800b81c:	687b      	ldr	r3, [r7, #4]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b086      	sub	sp, #24
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e009      	b.n	800b84c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	60ba      	str	r2, [r7, #8]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	3301      	adds	r3, #1
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	dbf1      	blt.n	800b838 <_write+0x12>
	}
	return len;
 800b854:	687b      	ldr	r3, [r7, #4]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <_close>:

int _close(int file)
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
	return -1;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b876:	b480      	push	{r7}
 800b878:	b083      	sub	sp, #12
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b886:	605a      	str	r2, [r3, #4]
	return 0;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <_isatty>:

int _isatty(int file)
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
	return 1;
 800b89e:	2301      	movs	r3, #1
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
	return 0;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b8d0:	4a14      	ldr	r2, [pc, #80]	; (800b924 <_sbrk+0x5c>)
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <_sbrk+0x60>)
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b8dc:	4b13      	ldr	r3, [pc, #76]	; (800b92c <_sbrk+0x64>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d102      	bne.n	800b8ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b8e4:	4b11      	ldr	r3, [pc, #68]	; (800b92c <_sbrk+0x64>)
 800b8e6:	4a12      	ldr	r2, [pc, #72]	; (800b930 <_sbrk+0x68>)
 800b8e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b8ea:	4b10      	ldr	r3, [pc, #64]	; (800b92c <_sbrk+0x64>)
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d207      	bcs.n	800b908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b8f8:	f00a fbd8 	bl	80160ac <__errno>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	220c      	movs	r2, #12
 800b900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	e009      	b.n	800b91c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b908:	4b08      	ldr	r3, [pc, #32]	; (800b92c <_sbrk+0x64>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <_sbrk+0x64>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	4a05      	ldr	r2, [pc, #20]	; (800b92c <_sbrk+0x64>)
 800b918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b91a:	68fb      	ldr	r3, [r7, #12]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20020000 	.word	0x20020000
 800b928:	00000400 	.word	0x00000400
 800b92c:	20000470 	.word	0x20000470
 800b930:	20008148 	.word	0x20008148

0800b934 <SYSSystemInit>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

void SYSSystemInit(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af02      	add	r7, sp, #8
	/* Left position ABT*/
	ABTInit(SAMPLE_TIME, fFLeftPosGain[0], fFLeftPosGain[1], fFLeftPosGain[2], &fFLeftPosData, &fFLeftPos, &fFLeftVel, &fFLeftAcc, &fleft_pos_data);
 800b93a:	4bc1      	ldr	r3, [pc, #772]	; (800bc40 <SYSSystemInit+0x30c>)
 800b93c:	edd3 7a00 	vldr	s15, [r3]
 800b940:	4bbf      	ldr	r3, [pc, #764]	; (800bc40 <SYSSystemInit+0x30c>)
 800b942:	ed93 7a01 	vldr	s14, [r3, #4]
 800b946:	4bbe      	ldr	r3, [pc, #760]	; (800bc40 <SYSSystemInit+0x30c>)
 800b948:	edd3 6a02 	vldr	s13, [r3, #8]
 800b94c:	4bbd      	ldr	r3, [pc, #756]	; (800bc44 <SYSSystemInit+0x310>)
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	4bbd      	ldr	r3, [pc, #756]	; (800bc48 <SYSSystemInit+0x314>)
 800b952:	4abe      	ldr	r2, [pc, #760]	; (800bc4c <SYSSystemInit+0x318>)
 800b954:	49be      	ldr	r1, [pc, #760]	; (800bc50 <SYSSystemInit+0x31c>)
 800b956:	48bf      	ldr	r0, [pc, #764]	; (800bc54 <SYSSystemInit+0x320>)
 800b958:	eef0 1a66 	vmov.f32	s3, s13
 800b95c:	eeb0 1a47 	vmov.f32	s2, s14
 800b960:	eef0 0a67 	vmov.f32	s1, s15
 800b964:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800bc58 <SYSSystemInit+0x324>
 800b968:	f7f5 fb40 	bl	8000fec <ABTInit>
	ABTEstimateInit(&fleft_pos_data);
 800b96c:	48b5      	ldr	r0, [pc, #724]	; (800bc44 <SYSSystemInit+0x310>)
 800b96e:	f7f5 fb6a 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fBLeftPosGain[0], fBLeftPosGain[1], fBLeftPosGain[2], &fBLeftPosData, &fBLeftPos, &fBLeftVel, &fBLeftAcc, &bleft_pos_data);
 800b972:	4bba      	ldr	r3, [pc, #744]	; (800bc5c <SYSSystemInit+0x328>)
 800b974:	edd3 7a00 	vldr	s15, [r3]
 800b978:	4bb8      	ldr	r3, [pc, #736]	; (800bc5c <SYSSystemInit+0x328>)
 800b97a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b97e:	4bb7      	ldr	r3, [pc, #732]	; (800bc5c <SYSSystemInit+0x328>)
 800b980:	edd3 6a02 	vldr	s13, [r3, #8]
 800b984:	4bb6      	ldr	r3, [pc, #728]	; (800bc60 <SYSSystemInit+0x32c>)
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	4bb6      	ldr	r3, [pc, #728]	; (800bc64 <SYSSystemInit+0x330>)
 800b98a:	4ab7      	ldr	r2, [pc, #732]	; (800bc68 <SYSSystemInit+0x334>)
 800b98c:	49b7      	ldr	r1, [pc, #732]	; (800bc6c <SYSSystemInit+0x338>)
 800b98e:	48b8      	ldr	r0, [pc, #736]	; (800bc70 <SYSSystemInit+0x33c>)
 800b990:	eef0 1a66 	vmov.f32	s3, s13
 800b994:	eeb0 1a47 	vmov.f32	s2, s14
 800b998:	eef0 0a67 	vmov.f32	s1, s15
 800b99c:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800bc58 <SYSSystemInit+0x324>
 800b9a0:	f7f5 fb24 	bl	8000fec <ABTInit>
	ABTEstimateInit(&bleft_pos_data);
 800b9a4:	48ae      	ldr	r0, [pc, #696]	; (800bc60 <SYSSystemInit+0x32c>)
 800b9a6:	f7f5 fb4e 	bl	8001046 <ABTEstimateInit>

	/* Right position ABT */
	ABTInit(SAMPLE_TIME, fFRightPosGain[0], fFRightPosGain[1], fFRightPosGain[2], &fFRightPosData, &fFRightPos, &fFRightVel, &fFRightAcc, &fright_pos_data);
 800b9aa:	4bb2      	ldr	r3, [pc, #712]	; (800bc74 <SYSSystemInit+0x340>)
 800b9ac:	edd3 7a00 	vldr	s15, [r3]
 800b9b0:	4bb0      	ldr	r3, [pc, #704]	; (800bc74 <SYSSystemInit+0x340>)
 800b9b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9b6:	4baf      	ldr	r3, [pc, #700]	; (800bc74 <SYSSystemInit+0x340>)
 800b9b8:	edd3 6a02 	vldr	s13, [r3, #8]
 800b9bc:	4bae      	ldr	r3, [pc, #696]	; (800bc78 <SYSSystemInit+0x344>)
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	4bae      	ldr	r3, [pc, #696]	; (800bc7c <SYSSystemInit+0x348>)
 800b9c2:	4aaf      	ldr	r2, [pc, #700]	; (800bc80 <SYSSystemInit+0x34c>)
 800b9c4:	49af      	ldr	r1, [pc, #700]	; (800bc84 <SYSSystemInit+0x350>)
 800b9c6:	48b0      	ldr	r0, [pc, #704]	; (800bc88 <SYSSystemInit+0x354>)
 800b9c8:	eef0 1a66 	vmov.f32	s3, s13
 800b9cc:	eeb0 1a47 	vmov.f32	s2, s14
 800b9d0:	eef0 0a67 	vmov.f32	s1, s15
 800b9d4:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800bc58 <SYSSystemInit+0x324>
 800b9d8:	f7f5 fb08 	bl	8000fec <ABTInit>
	ABTEstimateInit(&fright_pos_data);
 800b9dc:	48a6      	ldr	r0, [pc, #664]	; (800bc78 <SYSSystemInit+0x344>)
 800b9de:	f7f5 fb32 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fBRightPosGain[0], fBRightPosGain[1], fBRightPosGain[2], &fBRightPosData, &fBRightPos, &fBRightVel, &fBRightAcc, &bright_pos_data);
 800b9e2:	4baa      	ldr	r3, [pc, #680]	; (800bc8c <SYSSystemInit+0x358>)
 800b9e4:	edd3 7a00 	vldr	s15, [r3]
 800b9e8:	4ba8      	ldr	r3, [pc, #672]	; (800bc8c <SYSSystemInit+0x358>)
 800b9ea:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9ee:	4ba7      	ldr	r3, [pc, #668]	; (800bc8c <SYSSystemInit+0x358>)
 800b9f0:	edd3 6a02 	vldr	s13, [r3, #8]
 800b9f4:	4ba6      	ldr	r3, [pc, #664]	; (800bc90 <SYSSystemInit+0x35c>)
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	4ba6      	ldr	r3, [pc, #664]	; (800bc94 <SYSSystemInit+0x360>)
 800b9fa:	4aa7      	ldr	r2, [pc, #668]	; (800bc98 <SYSSystemInit+0x364>)
 800b9fc:	49a7      	ldr	r1, [pc, #668]	; (800bc9c <SYSSystemInit+0x368>)
 800b9fe:	48a8      	ldr	r0, [pc, #672]	; (800bca0 <SYSSystemInit+0x36c>)
 800ba00:	eef0 1a66 	vmov.f32	s3, s13
 800ba04:	eeb0 1a47 	vmov.f32	s2, s14
 800ba08:	eef0 0a67 	vmov.f32	s1, s15
 800ba0c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800bc58 <SYSSystemInit+0x324>
 800ba10:	f7f5 faec 	bl	8000fec <ABTInit>
	ABTEstimateInit(&bright_pos_data);
 800ba14:	489e      	ldr	r0, [pc, #632]	; (800bc90 <SYSSystemInit+0x35c>)
 800ba16:	f7f5 fb16 	bl	8001046 <ABTEstimateInit>

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 800ba1a:	4ba2      	ldr	r3, [pc, #648]	; (800bca4 <SYSSystemInit+0x370>)
 800ba1c:	edd3 7a00 	vldr	s15, [r3]
 800ba20:	4ba0      	ldr	r3, [pc, #640]	; (800bca4 <SYSSystemInit+0x370>)
 800ba22:	ed93 7a01 	vldr	s14, [r3, #4]
 800ba26:	4b9f      	ldr	r3, [pc, #636]	; (800bca4 <SYSSystemInit+0x370>)
 800ba28:	edd3 6a02 	vldr	s13, [r3, #8]
 800ba2c:	4b9e      	ldr	r3, [pc, #632]	; (800bca8 <SYSSystemInit+0x374>)
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	4b9e      	ldr	r3, [pc, #632]	; (800bcac <SYSSystemInit+0x378>)
 800ba32:	4a9f      	ldr	r2, [pc, #636]	; (800bcb0 <SYSSystemInit+0x37c>)
 800ba34:	499f      	ldr	r1, [pc, #636]	; (800bcb4 <SYSSystemInit+0x380>)
 800ba36:	48a0      	ldr	r0, [pc, #640]	; (800bcb8 <SYSSystemInit+0x384>)
 800ba38:	eef0 1a66 	vmov.f32	s3, s13
 800ba3c:	eeb0 1a47 	vmov.f32	s2, s14
 800ba40:	eef0 0a67 	vmov.f32	s1, s15
 800ba44:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800bc58 <SYSSystemInit+0x324>
 800ba48:	f7f5 fad0 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800ba4c:	4896      	ldr	r0, [pc, #600]	; (800bca8 <SYSSystemInit+0x374>)
 800ba4e:	f7f5 fafa 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800ba52:	4b9a      	ldr	r3, [pc, #616]	; (800bcbc <SYSSystemInit+0x388>)
 800ba54:	edd3 7a00 	vldr	s15, [r3]
 800ba58:	4b98      	ldr	r3, [pc, #608]	; (800bcbc <SYSSystemInit+0x388>)
 800ba5a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ba5e:	4b97      	ldr	r3, [pc, #604]	; (800bcbc <SYSSystemInit+0x388>)
 800ba60:	edd3 6a02 	vldr	s13, [r3, #8]
 800ba64:	4b96      	ldr	r3, [pc, #600]	; (800bcc0 <SYSSystemInit+0x38c>)
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	4b96      	ldr	r3, [pc, #600]	; (800bcc4 <SYSSystemInit+0x390>)
 800ba6a:	4a97      	ldr	r2, [pc, #604]	; (800bcc8 <SYSSystemInit+0x394>)
 800ba6c:	4997      	ldr	r1, [pc, #604]	; (800bccc <SYSSystemInit+0x398>)
 800ba6e:	4898      	ldr	r0, [pc, #608]	; (800bcd0 <SYSSystemInit+0x39c>)
 800ba70:	eef0 1a66 	vmov.f32	s3, s13
 800ba74:	eeb0 1a47 	vmov.f32	s2, s14
 800ba78:	eef0 0a67 	vmov.f32	s1, s15
 800ba7c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800bc58 <SYSSystemInit+0x324>
 800ba80:	f7f5 fab4 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800ba84:	488e      	ldr	r0, [pc, #568]	; (800bcc0 <SYSSystemInit+0x38c>)
 800ba86:	f7f5 fade 	bl	8001046 <ABTEstimateInit>

	//FUZZYPID
	/* Left velocity PID*/
	FuzzyPIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fuz_fleft_vel);
 800ba8a:	4a92      	ldr	r2, [pc, #584]	; (800bcd4 <SYSSystemInit+0x3a0>)
 800ba8c:	4992      	ldr	r1, [pc, #584]	; (800bcd8 <SYSSystemInit+0x3a4>)
 800ba8e:	4893      	ldr	r0, [pc, #588]	; (800bcdc <SYSSystemInit+0x3a8>)
 800ba90:	f7f7 feab 	bl	80037ea <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzFLeftVG[0], fFuzFLeftVG[1], fFuzFLeftVG[2], fFuzFLeftVG[3], fFuzFLeftVG[4], fFuzFLeftVG[5], fFuzFLeftVG[6], fFuzFLeftVG[7],fFuzFLeftVG[8],fFuzFLeftVG[9], &fuz_fleft_vel);
 800ba94:	4b92      	ldr	r3, [pc, #584]	; (800bce0 <SYSSystemInit+0x3ac>)
 800ba96:	edd3 7a00 	vldr	s15, [r3]
 800ba9a:	4b91      	ldr	r3, [pc, #580]	; (800bce0 <SYSSystemInit+0x3ac>)
 800ba9c:	ed93 7a01 	vldr	s14, [r3, #4]
 800baa0:	4b8f      	ldr	r3, [pc, #572]	; (800bce0 <SYSSystemInit+0x3ac>)
 800baa2:	edd3 6a02 	vldr	s13, [r3, #8]
 800baa6:	4b8e      	ldr	r3, [pc, #568]	; (800bce0 <SYSSystemInit+0x3ac>)
 800baa8:	ed93 6a03 	vldr	s12, [r3, #12]
 800baac:	4b8c      	ldr	r3, [pc, #560]	; (800bce0 <SYSSystemInit+0x3ac>)
 800baae:	edd3 5a04 	vldr	s11, [r3, #16]
 800bab2:	4b8b      	ldr	r3, [pc, #556]	; (800bce0 <SYSSystemInit+0x3ac>)
 800bab4:	ed93 5a05 	vldr	s10, [r3, #20]
 800bab8:	4b89      	ldr	r3, [pc, #548]	; (800bce0 <SYSSystemInit+0x3ac>)
 800baba:	ed93 3a06 	vldr	s6, [r3, #24]
 800babe:	4b88      	ldr	r3, [pc, #544]	; (800bce0 <SYSSystemInit+0x3ac>)
 800bac0:	edd3 3a07 	vldr	s7, [r3, #28]
 800bac4:	4b86      	ldr	r3, [pc, #536]	; (800bce0 <SYSSystemInit+0x3ac>)
 800bac6:	ed93 4a08 	vldr	s8, [r3, #32]
 800baca:	4b85      	ldr	r3, [pc, #532]	; (800bce0 <SYSSystemInit+0x3ac>)
 800bacc:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800bad0:	4880      	ldr	r0, [pc, #512]	; (800bcd4 <SYSSystemInit+0x3a0>)
 800bad2:	eef0 2a45 	vmov.f32	s5, s10
 800bad6:	eeb0 2a65 	vmov.f32	s4, s11
 800bada:	eef0 1a46 	vmov.f32	s3, s12
 800bade:	eeb0 1a66 	vmov.f32	s2, s13
 800bae2:	eef0 0a47 	vmov.f32	s1, s14
 800bae6:	eeb0 0a67 	vmov.f32	s0, s15
 800baea:	f7f7 fe97 	bl	800381c <FuzzyPIDGainInit>

	FuzzyPIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &fuz_bleft_vel);
 800baee:	4a7d      	ldr	r2, [pc, #500]	; (800bce4 <SYSSystemInit+0x3b0>)
 800baf0:	497d      	ldr	r1, [pc, #500]	; (800bce8 <SYSSystemInit+0x3b4>)
 800baf2:	487e      	ldr	r0, [pc, #504]	; (800bcec <SYSSystemInit+0x3b8>)
 800baf4:	f7f7 fe79 	bl	80037ea <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzBLeftVG[0], fFuzBLeftVG[1], fFuzBLeftVG[2], fFuzBLeftVG[3], fFuzBLeftVG[4], fFuzBLeftVG[5], fFuzBLeftVG[6], fFuzBLeftVG[7], fFuzBLeftVG[8], fFuzBLeftVG[9], &fuz_bleft_vel);
 800baf8:	4b7d      	ldr	r3, [pc, #500]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bafa:	edd3 7a00 	vldr	s15, [r3]
 800bafe:	4b7c      	ldr	r3, [pc, #496]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb00:	ed93 7a01 	vldr	s14, [r3, #4]
 800bb04:	4b7a      	ldr	r3, [pc, #488]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb06:	edd3 6a02 	vldr	s13, [r3, #8]
 800bb0a:	4b79      	ldr	r3, [pc, #484]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb0c:	ed93 6a03 	vldr	s12, [r3, #12]
 800bb10:	4b77      	ldr	r3, [pc, #476]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb12:	edd3 5a04 	vldr	s11, [r3, #16]
 800bb16:	4b76      	ldr	r3, [pc, #472]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb18:	ed93 5a05 	vldr	s10, [r3, #20]
 800bb1c:	4b74      	ldr	r3, [pc, #464]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb1e:	ed93 3a06 	vldr	s6, [r3, #24]
 800bb22:	4b73      	ldr	r3, [pc, #460]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb24:	edd3 3a07 	vldr	s7, [r3, #28]
 800bb28:	4b71      	ldr	r3, [pc, #452]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb2a:	ed93 4a08 	vldr	s8, [r3, #32]
 800bb2e:	4b70      	ldr	r3, [pc, #448]	; (800bcf0 <SYSSystemInit+0x3bc>)
 800bb30:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800bb34:	486b      	ldr	r0, [pc, #428]	; (800bce4 <SYSSystemInit+0x3b0>)
 800bb36:	eef0 2a45 	vmov.f32	s5, s10
 800bb3a:	eeb0 2a65 	vmov.f32	s4, s11
 800bb3e:	eef0 1a46 	vmov.f32	s3, s12
 800bb42:	eeb0 1a66 	vmov.f32	s2, s13
 800bb46:	eef0 0a47 	vmov.f32	s1, s14
 800bb4a:	eeb0 0a67 	vmov.f32	s0, s15
 800bb4e:	f7f7 fe65 	bl	800381c <FuzzyPIDGainInit>

	/* Right velocity PID*/
	FuzzyPIDSourceInit(&fFRightVelErr, &fFRightVelU, &fuz_fright_vel);
 800bb52:	4a68      	ldr	r2, [pc, #416]	; (800bcf4 <SYSSystemInit+0x3c0>)
 800bb54:	4968      	ldr	r1, [pc, #416]	; (800bcf8 <SYSSystemInit+0x3c4>)
 800bb56:	4869      	ldr	r0, [pc, #420]	; (800bcfc <SYSSystemInit+0x3c8>)
 800bb58:	f7f7 fe47 	bl	80037ea <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzFRightVG[0], fFuzFRightVG[1], fFuzFRightVG[2], fFuzFRightVG[3], fFuzFRightVG[4], fFuzFRightVG[5], fFuzFRightVG[6], fFuzFRightVG[7], fFuzFRightVG[8], fFuzFRightVG[9], &fuz_fright_vel);
 800bb5c:	4b68      	ldr	r3, [pc, #416]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb5e:	edd3 7a00 	vldr	s15, [r3]
 800bb62:	4b67      	ldr	r3, [pc, #412]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb64:	ed93 7a01 	vldr	s14, [r3, #4]
 800bb68:	4b65      	ldr	r3, [pc, #404]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb6a:	edd3 6a02 	vldr	s13, [r3, #8]
 800bb6e:	4b64      	ldr	r3, [pc, #400]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb70:	ed93 6a03 	vldr	s12, [r3, #12]
 800bb74:	4b62      	ldr	r3, [pc, #392]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb76:	edd3 5a04 	vldr	s11, [r3, #16]
 800bb7a:	4b61      	ldr	r3, [pc, #388]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb7c:	ed93 5a05 	vldr	s10, [r3, #20]
 800bb80:	4b5f      	ldr	r3, [pc, #380]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb82:	ed93 3a06 	vldr	s6, [r3, #24]
 800bb86:	4b5e      	ldr	r3, [pc, #376]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb88:	edd3 3a07 	vldr	s7, [r3, #28]
 800bb8c:	4b5c      	ldr	r3, [pc, #368]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb8e:	ed93 4a08 	vldr	s8, [r3, #32]
 800bb92:	4b5b      	ldr	r3, [pc, #364]	; (800bd00 <SYSSystemInit+0x3cc>)
 800bb94:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800bb98:	4856      	ldr	r0, [pc, #344]	; (800bcf4 <SYSSystemInit+0x3c0>)
 800bb9a:	eef0 2a45 	vmov.f32	s5, s10
 800bb9e:	eeb0 2a65 	vmov.f32	s4, s11
 800bba2:	eef0 1a46 	vmov.f32	s3, s12
 800bba6:	eeb0 1a66 	vmov.f32	s2, s13
 800bbaa:	eef0 0a47 	vmov.f32	s1, s14
 800bbae:	eeb0 0a67 	vmov.f32	s0, s15
 800bbb2:	f7f7 fe33 	bl	800381c <FuzzyPIDGainInit>

	FuzzyPIDSourceInit(&fBRightVelErr, &fBRightVelU, &fuz_bright_vel);
 800bbb6:	4a53      	ldr	r2, [pc, #332]	; (800bd04 <SYSSystemInit+0x3d0>)
 800bbb8:	4953      	ldr	r1, [pc, #332]	; (800bd08 <SYSSystemInit+0x3d4>)
 800bbba:	4854      	ldr	r0, [pc, #336]	; (800bd0c <SYSSystemInit+0x3d8>)
 800bbbc:	f7f7 fe15 	bl	80037ea <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzBRightVG[0], fFuzBRightVG[1], fFuzBRightVG[2], fFuzBRightVG[3], fFuzBRightVG[4], fFuzBRightVG[5], fFuzBRightVG[6], fFuzBRightVG[7], fFuzBRightVG[8], fFuzBRightVG[9], &fuz_bright_vel);
 800bbc0:	4b53      	ldr	r3, [pc, #332]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbc2:	edd3 7a00 	vldr	s15, [r3]
 800bbc6:	4b52      	ldr	r3, [pc, #328]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbc8:	ed93 7a01 	vldr	s14, [r3, #4]
 800bbcc:	4b50      	ldr	r3, [pc, #320]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbce:	edd3 6a02 	vldr	s13, [r3, #8]
 800bbd2:	4b4f      	ldr	r3, [pc, #316]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbd4:	ed93 6a03 	vldr	s12, [r3, #12]
 800bbd8:	4b4d      	ldr	r3, [pc, #308]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbda:	edd3 5a04 	vldr	s11, [r3, #16]
 800bbde:	4b4c      	ldr	r3, [pc, #304]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbe0:	ed93 5a05 	vldr	s10, [r3, #20]
 800bbe4:	4b4a      	ldr	r3, [pc, #296]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbe6:	ed93 3a06 	vldr	s6, [r3, #24]
 800bbea:	4b49      	ldr	r3, [pc, #292]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbec:	edd3 3a07 	vldr	s7, [r3, #28]
 800bbf0:	4b47      	ldr	r3, [pc, #284]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbf2:	ed93 4a08 	vldr	s8, [r3, #32]
 800bbf6:	4b46      	ldr	r3, [pc, #280]	; (800bd10 <SYSSystemInit+0x3dc>)
 800bbf8:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800bbfc:	4841      	ldr	r0, [pc, #260]	; (800bd04 <SYSSystemInit+0x3d0>)
 800bbfe:	eef0 2a45 	vmov.f32	s5, s10
 800bc02:	eeb0 2a65 	vmov.f32	s4, s11
 800bc06:	eef0 1a46 	vmov.f32	s3, s12
 800bc0a:	eeb0 1a66 	vmov.f32	s2, s13
 800bc0e:	eef0 0a47 	vmov.f32	s1, s14
 800bc12:	eeb0 0a67 	vmov.f32	s0, s15
 800bc16:	f7f7 fe01 	bl	800381c <FuzzyPIDGainInit>

	//ROBOCONPID
	/* Left velocity PID*/
	PIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fleft_vel);
 800bc1a:	4a3e      	ldr	r2, [pc, #248]	; (800bd14 <SYSSystemInit+0x3e0>)
 800bc1c:	492e      	ldr	r1, [pc, #184]	; (800bcd8 <SYSSystemInit+0x3a4>)
 800bc1e:	482f      	ldr	r0, [pc, #188]	; (800bcdc <SYSSystemInit+0x3a8>)
 800bc20:	f7f8 fd03 	bl	800462a <PIDSourceInit>
	PIDDelayInit(&fleft_vel);
 800bc24:	483b      	ldr	r0, [pc, #236]	; (800bd14 <SYSSystemInit+0x3e0>)
 800bc26:	f7f8 fe97 	bl	8004958 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFLeftVG[0], fFLeftVG[1], fFLeftVG[2], fFLeftVG[3], fFLeftVG[4], fFLeftVG[5], fFLeftVG[6], &fleft_vel);
 800bc2a:	4b3b      	ldr	r3, [pc, #236]	; (800bd18 <SYSSystemInit+0x3e4>)
 800bc2c:	edd3 7a00 	vldr	s15, [r3]
 800bc30:	4b39      	ldr	r3, [pc, #228]	; (800bd18 <SYSSystemInit+0x3e4>)
 800bc32:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc36:	4b38      	ldr	r3, [pc, #224]	; (800bd18 <SYSSystemInit+0x3e4>)
 800bc38:	edd3 6a02 	vldr	s13, [r3, #8]
 800bc3c:	e06e      	b.n	800bd1c <SYSSystemInit+0x3e8>
 800bc3e:	bf00      	nop
 800bc40:	20000000 	.word	0x20000000
 800bc44:	200078d4 	.word	0x200078d4
 800bc48:	20006638 	.word	0x20006638
 800bc4c:	20007ee8 	.word	0x20007ee8
 800bc50:	20007f14 	.word	0x20007f14
 800bc54:	200077d8 	.word	0x200077d8
 800bc58:	3ba3d70a 	.word	0x3ba3d70a
 800bc5c:	20000018 	.word	0x20000018
 800bc60:	200076ec 	.word	0x200076ec
 800bc64:	20006e1c 	.word	0x20006e1c
 800bc68:	20006e18 	.word	0x20006e18
 800bc6c:	20007f20 	.word	0x20007f20
 800bc70:	20006dbc 	.word	0x20006dbc
 800bc74:	2000000c 	.word	0x2000000c
 800bc78:	20007d78 	.word	0x20007d78
 800bc7c:	20007ed8 	.word	0x20007ed8
 800bc80:	20006ef8 	.word	0x20006ef8
 800bc84:	20006ef0 	.word	0x20006ef0
 800bc88:	20006da8 	.word	0x20006da8
 800bc8c:	20000024 	.word	0x20000024
 800bc90:	20007bfc 	.word	0x20007bfc
 800bc94:	20007b24 	.word	0x20007b24
 800bc98:	200073f4 	.word	0x200073f4
 800bc9c:	20006db4 	.word	0x20006db4
 800bca0:	20007f5c 	.word	0x20007f5c
 800bca4:	20000030 	.word	0x20000030
 800bca8:	20007eec 	.word	0x20007eec
 800bcac:	20006690 	.word	0x20006690
 800bcb0:	20007a68 	.word	0x20007a68
 800bcb4:	20007bf8 	.word	0x20007bf8
 800bcb8:	200066c0 	.word	0x200066c0
 800bcbc:	2000003c 	.word	0x2000003c
 800bcc0:	20006e68 	.word	0x20006e68
 800bcc4:	20006da0 	.word	0x20006da0
 800bcc8:	20006830 	.word	0x20006830
 800bccc:	20007a5c 	.word	0x20007a5c
 800bcd0:	20007f0c 	.word	0x20007f0c
 800bcd4:	20007a80 	.word	0x20007a80
 800bcd8:	20006e88 	.word	0x20006e88
 800bcdc:	20006e64 	.word	0x20006e64
 800bce0:	20000048 	.word	0x20000048
 800bce4:	20007c34 	.word	0x20007c34
 800bce8:	2000675c 	.word	0x2000675c
 800bcec:	20007da0 	.word	0x20007da0
 800bcf0:	20000098 	.word	0x20000098
 800bcf4:	2000794c 	.word	0x2000794c
 800bcf8:	200066a0 	.word	0x200066a0
 800bcfc:	20007380 	.word	0x20007380
 800bd00:	20000070 	.word	0x20000070
 800bd04:	20007e60 	.word	0x20007e60
 800bd08:	2000662c 	.word	0x2000662c
 800bd0c:	2000669c 	.word	0x2000669c
 800bd10:	200000c0 	.word	0x200000c0
 800bd14:	20006e8c 	.word	0x20006e8c
 800bd18:	200000e8 	.word	0x200000e8
 800bd1c:	4bb8      	ldr	r3, [pc, #736]	; (800c000 <SYSSystemInit+0x6cc>)
 800bd1e:	ed93 6a03 	vldr	s12, [r3, #12]
 800bd22:	4bb7      	ldr	r3, [pc, #732]	; (800c000 <SYSSystemInit+0x6cc>)
 800bd24:	edd3 5a04 	vldr	s11, [r3, #16]
 800bd28:	4bb5      	ldr	r3, [pc, #724]	; (800c000 <SYSSystemInit+0x6cc>)
 800bd2a:	ed93 5a05 	vldr	s10, [r3, #20]
 800bd2e:	4bb4      	ldr	r3, [pc, #720]	; (800c000 <SYSSystemInit+0x6cc>)
 800bd30:	edd3 4a06 	vldr	s9, [r3, #24]
 800bd34:	48b3      	ldr	r0, [pc, #716]	; (800c004 <SYSSystemInit+0x6d0>)
 800bd36:	eef0 3a64 	vmov.f32	s7, s9
 800bd3a:	eeb0 3a45 	vmov.f32	s6, s10
 800bd3e:	eef0 2a65 	vmov.f32	s5, s11
 800bd42:	eeb0 2a46 	vmov.f32	s4, s12
 800bd46:	eef0 1a66 	vmov.f32	s3, s13
 800bd4a:	eeb0 1a47 	vmov.f32	s2, s14
 800bd4e:	eef0 0a67 	vmov.f32	s1, s15
 800bd52:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800c008 <SYSSystemInit+0x6d4>
 800bd56:	f7f8 fc7a 	bl	800464e <PIDGainInit>

	PIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &bleft_vel);
 800bd5a:	4aac      	ldr	r2, [pc, #688]	; (800c00c <SYSSystemInit+0x6d8>)
 800bd5c:	49ac      	ldr	r1, [pc, #688]	; (800c010 <SYSSystemInit+0x6dc>)
 800bd5e:	48ad      	ldr	r0, [pc, #692]	; (800c014 <SYSSystemInit+0x6e0>)
 800bd60:	f7f8 fc63 	bl	800462a <PIDSourceInit>
	PIDDelayInit(&bleft_vel);
 800bd64:	48a9      	ldr	r0, [pc, #676]	; (800c00c <SYSSystemInit+0x6d8>)
 800bd66:	f7f8 fdf7 	bl	8004958 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBLeftVG[0], fBLeftVG[1], fBLeftVG[2], fBLeftVG[3], fBLeftVG[4], fBLeftVG[5], fBLeftVG[6], &bleft_vel);
 800bd6a:	4bab      	ldr	r3, [pc, #684]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd6c:	edd3 7a00 	vldr	s15, [r3]
 800bd70:	4ba9      	ldr	r3, [pc, #676]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd72:	ed93 7a01 	vldr	s14, [r3, #4]
 800bd76:	4ba8      	ldr	r3, [pc, #672]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd78:	edd3 6a02 	vldr	s13, [r3, #8]
 800bd7c:	4ba6      	ldr	r3, [pc, #664]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd7e:	ed93 6a03 	vldr	s12, [r3, #12]
 800bd82:	4ba5      	ldr	r3, [pc, #660]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd84:	edd3 5a04 	vldr	s11, [r3, #16]
 800bd88:	4ba3      	ldr	r3, [pc, #652]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd8a:	ed93 5a05 	vldr	s10, [r3, #20]
 800bd8e:	4ba2      	ldr	r3, [pc, #648]	; (800c018 <SYSSystemInit+0x6e4>)
 800bd90:	edd3 4a06 	vldr	s9, [r3, #24]
 800bd94:	489d      	ldr	r0, [pc, #628]	; (800c00c <SYSSystemInit+0x6d8>)
 800bd96:	eef0 3a64 	vmov.f32	s7, s9
 800bd9a:	eeb0 3a45 	vmov.f32	s6, s10
 800bd9e:	eef0 2a65 	vmov.f32	s5, s11
 800bda2:	eeb0 2a46 	vmov.f32	s4, s12
 800bda6:	eef0 1a66 	vmov.f32	s3, s13
 800bdaa:	eeb0 1a47 	vmov.f32	s2, s14
 800bdae:	eef0 0a67 	vmov.f32	s1, s15
 800bdb2:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800c008 <SYSSystemInit+0x6d4>
 800bdb6:	f7f8 fc4a 	bl	800464e <PIDGainInit>

	/* Right velocity PID*/
	PIDSourceInit(&fFRightVelErr, &fFRightVelU, &fright_vel);
 800bdba:	4a98      	ldr	r2, [pc, #608]	; (800c01c <SYSSystemInit+0x6e8>)
 800bdbc:	4998      	ldr	r1, [pc, #608]	; (800c020 <SYSSystemInit+0x6ec>)
 800bdbe:	4899      	ldr	r0, [pc, #612]	; (800c024 <SYSSystemInit+0x6f0>)
 800bdc0:	f7f8 fc33 	bl	800462a <PIDSourceInit>
	PIDDelayInit(&fright_vel);
 800bdc4:	4895      	ldr	r0, [pc, #596]	; (800c01c <SYSSystemInit+0x6e8>)
 800bdc6:	f7f8 fdc7 	bl	8004958 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFRightVG[0], fFRightVG[1], fFRightVG[2], fFRightVG[3], fFRightVG[4], fFRightVG[5], fFRightVG[6], &fright_vel);
 800bdca:	4b97      	ldr	r3, [pc, #604]	; (800c028 <SYSSystemInit+0x6f4>)
 800bdcc:	edd3 7a00 	vldr	s15, [r3]
 800bdd0:	4b95      	ldr	r3, [pc, #596]	; (800c028 <SYSSystemInit+0x6f4>)
 800bdd2:	ed93 7a01 	vldr	s14, [r3, #4]
 800bdd6:	4b94      	ldr	r3, [pc, #592]	; (800c028 <SYSSystemInit+0x6f4>)
 800bdd8:	edd3 6a02 	vldr	s13, [r3, #8]
 800bddc:	4b92      	ldr	r3, [pc, #584]	; (800c028 <SYSSystemInit+0x6f4>)
 800bdde:	ed93 6a03 	vldr	s12, [r3, #12]
 800bde2:	4b91      	ldr	r3, [pc, #580]	; (800c028 <SYSSystemInit+0x6f4>)
 800bde4:	edd3 5a04 	vldr	s11, [r3, #16]
 800bde8:	4b8f      	ldr	r3, [pc, #572]	; (800c028 <SYSSystemInit+0x6f4>)
 800bdea:	ed93 5a05 	vldr	s10, [r3, #20]
 800bdee:	4b8e      	ldr	r3, [pc, #568]	; (800c028 <SYSSystemInit+0x6f4>)
 800bdf0:	edd3 4a06 	vldr	s9, [r3, #24]
 800bdf4:	4889      	ldr	r0, [pc, #548]	; (800c01c <SYSSystemInit+0x6e8>)
 800bdf6:	eef0 3a64 	vmov.f32	s7, s9
 800bdfa:	eeb0 3a45 	vmov.f32	s6, s10
 800bdfe:	eef0 2a65 	vmov.f32	s5, s11
 800be02:	eeb0 2a46 	vmov.f32	s4, s12
 800be06:	eef0 1a66 	vmov.f32	s3, s13
 800be0a:	eeb0 1a47 	vmov.f32	s2, s14
 800be0e:	eef0 0a67 	vmov.f32	s1, s15
 800be12:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c008 <SYSSystemInit+0x6d4>
 800be16:	f7f8 fc1a 	bl	800464e <PIDGainInit>

	PIDSourceInit(&fBRightVelErr, &fBRightVelU, &bright_vel);
 800be1a:	4a84      	ldr	r2, [pc, #528]	; (800c02c <SYSSystemInit+0x6f8>)
 800be1c:	4984      	ldr	r1, [pc, #528]	; (800c030 <SYSSystemInit+0x6fc>)
 800be1e:	4885      	ldr	r0, [pc, #532]	; (800c034 <SYSSystemInit+0x700>)
 800be20:	f7f8 fc03 	bl	800462a <PIDSourceInit>
	PIDDelayInit(&bright_vel);
 800be24:	4881      	ldr	r0, [pc, #516]	; (800c02c <SYSSystemInit+0x6f8>)
 800be26:	f7f8 fd97 	bl	8004958 <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBRightVG[0], fBRightVG[1], fBRightVG[2], fBRightVG[3], fBRightVG[4], fBRightVG[5], fBRightVG[6], &bright_vel);
 800be2a:	4b83      	ldr	r3, [pc, #524]	; (800c038 <SYSSystemInit+0x704>)
 800be2c:	edd3 7a00 	vldr	s15, [r3]
 800be30:	4b81      	ldr	r3, [pc, #516]	; (800c038 <SYSSystemInit+0x704>)
 800be32:	ed93 7a01 	vldr	s14, [r3, #4]
 800be36:	4b80      	ldr	r3, [pc, #512]	; (800c038 <SYSSystemInit+0x704>)
 800be38:	edd3 6a02 	vldr	s13, [r3, #8]
 800be3c:	4b7e      	ldr	r3, [pc, #504]	; (800c038 <SYSSystemInit+0x704>)
 800be3e:	ed93 6a03 	vldr	s12, [r3, #12]
 800be42:	4b7d      	ldr	r3, [pc, #500]	; (800c038 <SYSSystemInit+0x704>)
 800be44:	edd3 5a04 	vldr	s11, [r3, #16]
 800be48:	4b7b      	ldr	r3, [pc, #492]	; (800c038 <SYSSystemInit+0x704>)
 800be4a:	ed93 5a05 	vldr	s10, [r3, #20]
 800be4e:	4b7a      	ldr	r3, [pc, #488]	; (800c038 <SYSSystemInit+0x704>)
 800be50:	edd3 4a06 	vldr	s9, [r3, #24]
 800be54:	4875      	ldr	r0, [pc, #468]	; (800c02c <SYSSystemInit+0x6f8>)
 800be56:	eef0 3a64 	vmov.f32	s7, s9
 800be5a:	eeb0 3a45 	vmov.f32	s6, s10
 800be5e:	eef0 2a65 	vmov.f32	s5, s11
 800be62:	eeb0 2a46 	vmov.f32	s4, s12
 800be66:	eef0 1a66 	vmov.f32	s3, s13
 800be6a:	eeb0 1a47 	vmov.f32	s2, s14
 800be6e:	eef0 0a67 	vmov.f32	s1, s15
 800be72:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800c008 <SYSSystemInit+0x6d4>
 800be76:	f7f8 fbea 	bl	800464e <PIDGainInit>

	//Line follow
	/* Distance PID*/
	PIDSourceInit(&fLFDistErr, &fLFDistU, &lf_dist);
 800be7a:	4a70      	ldr	r2, [pc, #448]	; (800c03c <SYSSystemInit+0x708>)
 800be7c:	4970      	ldr	r1, [pc, #448]	; (800c040 <SYSSystemInit+0x70c>)
 800be7e:	4871      	ldr	r0, [pc, #452]	; (800c044 <SYSSystemInit+0x710>)
 800be80:	f7f8 fbd3 	bl	800462a <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fLFDistG[0], fLFDistG[1], fLFDistG[2], fLFDistG[3], fLFDistG[4], fLFDistG[5], fLFDistG[6], &lf_dist);
 800be84:	4b70      	ldr	r3, [pc, #448]	; (800c048 <SYSSystemInit+0x714>)
 800be86:	edd3 7a00 	vldr	s15, [r3]
 800be8a:	4b6f      	ldr	r3, [pc, #444]	; (800c048 <SYSSystemInit+0x714>)
 800be8c:	ed93 7a01 	vldr	s14, [r3, #4]
 800be90:	4b6d      	ldr	r3, [pc, #436]	; (800c048 <SYSSystemInit+0x714>)
 800be92:	edd3 6a02 	vldr	s13, [r3, #8]
 800be96:	4b6c      	ldr	r3, [pc, #432]	; (800c048 <SYSSystemInit+0x714>)
 800be98:	ed93 6a03 	vldr	s12, [r3, #12]
 800be9c:	4b6a      	ldr	r3, [pc, #424]	; (800c048 <SYSSystemInit+0x714>)
 800be9e:	edd3 5a04 	vldr	s11, [r3, #16]
 800bea2:	4b69      	ldr	r3, [pc, #420]	; (800c048 <SYSSystemInit+0x714>)
 800bea4:	ed93 5a05 	vldr	s10, [r3, #20]
 800bea8:	4b67      	ldr	r3, [pc, #412]	; (800c048 <SYSSystemInit+0x714>)
 800beaa:	edd3 4a06 	vldr	s9, [r3, #24]
 800beae:	4863      	ldr	r0, [pc, #396]	; (800c03c <SYSSystemInit+0x708>)
 800beb0:	eef0 3a64 	vmov.f32	s7, s9
 800beb4:	eeb0 3a45 	vmov.f32	s6, s10
 800beb8:	eef0 2a65 	vmov.f32	s5, s11
 800bebc:	eeb0 2a46 	vmov.f32	s4, s12
 800bec0:	eef0 1a66 	vmov.f32	s3, s13
 800bec4:	eeb0 1a47 	vmov.f32	s2, s14
 800bec8:	eef0 0a67 	vmov.f32	s1, s15
 800becc:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800c008 <SYSSystemInit+0x6d4>
 800bed0:	f7f8 fbbd 	bl	800464e <PIDGainInit>
	PIDDelayInit(&lf_dist);
 800bed4:	4859      	ldr	r0, [pc, #356]	; (800c03c <SYSSystemInit+0x708>)
 800bed6:	f7f8 fd3f 	bl	8004958 <PIDDelayInit>

	/* Rotate PID*/
	PIDSourceInit(&fRotateErr, &fRotateU, &lf_rotate);
 800beda:	4a5c      	ldr	r2, [pc, #368]	; (800c04c <SYSSystemInit+0x718>)
 800bedc:	495c      	ldr	r1, [pc, #368]	; (800c050 <SYSSystemInit+0x71c>)
 800bede:	485d      	ldr	r0, [pc, #372]	; (800c054 <SYSSystemInit+0x720>)
 800bee0:	f7f8 fba3 	bl	800462a <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fRotateG[0], fRotateG[1], fRotateG[2], fRotateG[3], fRotateG[4], fRotateG[5], fRotateG[6], &lf_rotate);
 800bee4:	4b5c      	ldr	r3, [pc, #368]	; (800c058 <SYSSystemInit+0x724>)
 800bee6:	edd3 7a00 	vldr	s15, [r3]
 800beea:	4b5b      	ldr	r3, [pc, #364]	; (800c058 <SYSSystemInit+0x724>)
 800beec:	ed93 7a01 	vldr	s14, [r3, #4]
 800bef0:	4b59      	ldr	r3, [pc, #356]	; (800c058 <SYSSystemInit+0x724>)
 800bef2:	edd3 6a02 	vldr	s13, [r3, #8]
 800bef6:	4b58      	ldr	r3, [pc, #352]	; (800c058 <SYSSystemInit+0x724>)
 800bef8:	ed93 6a03 	vldr	s12, [r3, #12]
 800befc:	4b56      	ldr	r3, [pc, #344]	; (800c058 <SYSSystemInit+0x724>)
 800befe:	edd3 5a04 	vldr	s11, [r3, #16]
 800bf02:	4b55      	ldr	r3, [pc, #340]	; (800c058 <SYSSystemInit+0x724>)
 800bf04:	ed93 5a05 	vldr	s10, [r3, #20]
 800bf08:	4b53      	ldr	r3, [pc, #332]	; (800c058 <SYSSystemInit+0x724>)
 800bf0a:	edd3 4a06 	vldr	s9, [r3, #24]
 800bf0e:	484f      	ldr	r0, [pc, #316]	; (800c04c <SYSSystemInit+0x718>)
 800bf10:	eef0 3a64 	vmov.f32	s7, s9
 800bf14:	eeb0 3a45 	vmov.f32	s6, s10
 800bf18:	eef0 2a65 	vmov.f32	s5, s11
 800bf1c:	eeb0 2a46 	vmov.f32	s4, s12
 800bf20:	eef0 1a66 	vmov.f32	s3, s13
 800bf24:	eeb0 1a47 	vmov.f32	s2, s14
 800bf28:	eef0 0a67 	vmov.f32	s1, s15
 800bf2c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800c008 <SYSSystemInit+0x6d4>
 800bf30:	f7f8 fb8d 	bl	800464e <PIDGainInit>
	PIDDelayInit(&lf_rotate);
 800bf34:	4845      	ldr	r0, [pc, #276]	; (800c04c <SYSSystemInit+0x718>)
 800bf36:	f7f8 fd0f 	bl	8004958 <PIDDelayInit>

	/*  */
	PIDSourceInit(&fFwdErr, &fFwdU, &lf_fwd);
 800bf3a:	4a48      	ldr	r2, [pc, #288]	; (800c05c <SYSSystemInit+0x728>)
 800bf3c:	4948      	ldr	r1, [pc, #288]	; (800c060 <SYSSystemInit+0x72c>)
 800bf3e:	4849      	ldr	r0, [pc, #292]	; (800c064 <SYSSystemInit+0x730>)
 800bf40:	f7f8 fb73 	bl	800462a <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fFwdG[0], fFwdG[1], fFwdG[2], fFwdG[3], fFwdG[4], fFwdG[5], fFwdG[6], &lf_fwd);
 800bf44:	4b48      	ldr	r3, [pc, #288]	; (800c068 <SYSSystemInit+0x734>)
 800bf46:	edd3 7a00 	vldr	s15, [r3]
 800bf4a:	4b47      	ldr	r3, [pc, #284]	; (800c068 <SYSSystemInit+0x734>)
 800bf4c:	ed93 7a01 	vldr	s14, [r3, #4]
 800bf50:	4b45      	ldr	r3, [pc, #276]	; (800c068 <SYSSystemInit+0x734>)
 800bf52:	edd3 6a02 	vldr	s13, [r3, #8]
 800bf56:	4b44      	ldr	r3, [pc, #272]	; (800c068 <SYSSystemInit+0x734>)
 800bf58:	ed93 6a03 	vldr	s12, [r3, #12]
 800bf5c:	4b42      	ldr	r3, [pc, #264]	; (800c068 <SYSSystemInit+0x734>)
 800bf5e:	edd3 5a04 	vldr	s11, [r3, #16]
 800bf62:	4b41      	ldr	r3, [pc, #260]	; (800c068 <SYSSystemInit+0x734>)
 800bf64:	ed93 5a05 	vldr	s10, [r3, #20]
 800bf68:	4b3f      	ldr	r3, [pc, #252]	; (800c068 <SYSSystemInit+0x734>)
 800bf6a:	edd3 4a06 	vldr	s9, [r3, #24]
 800bf6e:	483b      	ldr	r0, [pc, #236]	; (800c05c <SYSSystemInit+0x728>)
 800bf70:	eef0 3a64 	vmov.f32	s7, s9
 800bf74:	eeb0 3a45 	vmov.f32	s6, s10
 800bf78:	eef0 2a65 	vmov.f32	s5, s11
 800bf7c:	eeb0 2a46 	vmov.f32	s4, s12
 800bf80:	eef0 1a66 	vmov.f32	s3, s13
 800bf84:	eeb0 1a47 	vmov.f32	s2, s14
 800bf88:	eef0 0a67 	vmov.f32	s1, s15
 800bf8c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800c008 <SYSSystemInit+0x6d4>
 800bf90:	f7f8 fb5d 	bl	800464e <PIDGainInit>
	PIDDelayInit(&lf_fwd);
 800bf94:	4831      	ldr	r0, [pc, #196]	; (800c05c <SYSSystemInit+0x728>)
 800bf96:	f7f8 fcdf 	bl	8004958 <PIDDelayInit>

	//IMU Rotate PID
	PIDSourceInit(&fAngleErr, &fAngleU, &imu_rotate);
 800bf9a:	4a34      	ldr	r2, [pc, #208]	; (800c06c <SYSSystemInit+0x738>)
 800bf9c:	4934      	ldr	r1, [pc, #208]	; (800c070 <SYSSystemInit+0x73c>)
 800bf9e:	4835      	ldr	r0, [pc, #212]	; (800c074 <SYSSystemInit+0x740>)
 800bfa0:	f7f8 fb43 	bl	800462a <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fAngleG[0], fAngleG[1], fAngleG[2], fAngleG[3], fAngleG[4], fAngleG[5], fAngleG[6], &imu_rotate);
 800bfa4:	4b34      	ldr	r3, [pc, #208]	; (800c078 <SYSSystemInit+0x744>)
 800bfa6:	edd3 7a00 	vldr	s15, [r3]
 800bfaa:	4b33      	ldr	r3, [pc, #204]	; (800c078 <SYSSystemInit+0x744>)
 800bfac:	ed93 7a01 	vldr	s14, [r3, #4]
 800bfb0:	4b31      	ldr	r3, [pc, #196]	; (800c078 <SYSSystemInit+0x744>)
 800bfb2:	edd3 6a02 	vldr	s13, [r3, #8]
 800bfb6:	4b30      	ldr	r3, [pc, #192]	; (800c078 <SYSSystemInit+0x744>)
 800bfb8:	ed93 6a03 	vldr	s12, [r3, #12]
 800bfbc:	4b2e      	ldr	r3, [pc, #184]	; (800c078 <SYSSystemInit+0x744>)
 800bfbe:	edd3 5a04 	vldr	s11, [r3, #16]
 800bfc2:	4b2d      	ldr	r3, [pc, #180]	; (800c078 <SYSSystemInit+0x744>)
 800bfc4:	ed93 5a05 	vldr	s10, [r3, #20]
 800bfc8:	4b2b      	ldr	r3, [pc, #172]	; (800c078 <SYSSystemInit+0x744>)
 800bfca:	edd3 4a06 	vldr	s9, [r3, #24]
 800bfce:	4827      	ldr	r0, [pc, #156]	; (800c06c <SYSSystemInit+0x738>)
 800bfd0:	eef0 3a64 	vmov.f32	s7, s9
 800bfd4:	eeb0 3a45 	vmov.f32	s6, s10
 800bfd8:	eef0 2a65 	vmov.f32	s5, s11
 800bfdc:	eeb0 2a46 	vmov.f32	s4, s12
 800bfe0:	eef0 1a66 	vmov.f32	s3, s13
 800bfe4:	eeb0 1a47 	vmov.f32	s2, s14
 800bfe8:	eef0 0a67 	vmov.f32	s1, s15
 800bfec:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800c008 <SYSSystemInit+0x6d4>
 800bff0:	f7f8 fb2d 	bl	800464e <PIDGainInit>
	PIDDelayInit(&imu_rotate);
 800bff4:	481d      	ldr	r0, [pc, #116]	; (800c06c <SYSSystemInit+0x738>)
 800bff6:	f7f8 fcaf 	bl	8004958 <PIDDelayInit>

//	VESCInit(40000,1,0.0037,&vesc);

}
 800bffa:	bf00      	nop
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	200000e8 	.word	0x200000e8
 800c004:	20006e8c 	.word	0x20006e8c
 800c008:	3ba3d70a 	.word	0x3ba3d70a
 800c00c:	200066e8 	.word	0x200066e8
 800c010:	2000675c 	.word	0x2000675c
 800c014:	20007da0 	.word	0x20007da0
 800c018:	20000120 	.word	0x20000120
 800c01c:	20006dc0 	.word	0x20006dc0
 800c020:	200066a0 	.word	0x200066a0
 800c024:	20007380 	.word	0x20007380
 800c028:	20000104 	.word	0x20000104
 800c02c:	20007dac 	.word	0x20007dac
 800c030:	2000662c 	.word	0x2000662c
 800c034:	2000669c 	.word	0x2000669c
 800c038:	2000013c 	.word	0x2000013c
 800c03c:	20007e0c 	.word	0x20007e0c
 800c040:	200078c8 	.word	0x200078c8
 800c044:	20007384 	.word	0x20007384
 800c048:	20000158 	.word	0x20000158
 800c04c:	200079f8 	.word	0x200079f8
 800c050:	20007a4c 	.word	0x20007a4c
 800c054:	20006d9c 	.word	0x20006d9c
 800c058:	20000174 	.word	0x20000174
 800c05c:	20007b2c 	.word	0x20007b2c
 800c060:	20007f10 	.word	0x20007f10
 800c064:	20006864 	.word	0x20006864
 800c068:	20000190 	.word	0x20000190
 800c06c:	2000663c 	.word	0x2000663c
 800c070:	20006748 	.word	0x20006748
 800c074:	20007a7c 	.word	0x20007a7c
 800c078:	200001ac 	.word	0x200001ac
 800c07c:	00000000 	.word	0x00000000

0800c080 <SYSSystem5ms>:

void SYSSystem5ms(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	ed2d 8b02 	vpush	{d8}
 800c086:	af00      	add	r7, sp, #0
	/* Obtain position for left and right */

	fFLeftPosData = fFPtd * (QEIRead(QEI6) - MIN_POSCNT);
 800c088:	2006      	movs	r0, #6
 800c08a:	f7f6 f8f9 	bl	8002280 <QEIRead>
 800c08e:	4603      	mov	r3, r0
 800c090:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c094:	ee07 3a90 	vmov	s15, r3
 800c098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c09c:	4b9f      	ldr	r3, [pc, #636]	; (800c31c <SYSSystem5ms+0x29c>)
 800c09e:	edd3 7a00 	vldr	s15, [r3]
 800c0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a6:	4b9e      	ldr	r3, [pc, #632]	; (800c320 <SYSSystem5ms+0x2a0>)
 800c0a8:	edc3 7a00 	vstr	s15, [r3]
	fFRightPosData = fFKcd * fFPtd * (QEIRead(QEI4) - MIN_POSCNT);
 800c0ac:	4b9d      	ldr	r3, [pc, #628]	; (800c324 <SYSSystem5ms+0x2a4>)
 800c0ae:	ed93 7a00 	vldr	s14, [r3]
 800c0b2:	4b9a      	ldr	r3, [pc, #616]	; (800c31c <SYSSystem5ms+0x29c>)
 800c0b4:	edd3 7a00 	vldr	s15, [r3]
 800c0b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 800c0bc:	2004      	movs	r0, #4
 800c0be:	f7f6 f8df 	bl	8002280 <QEIRead>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c0c8:	ee07 3a90 	vmov	s15, r3
 800c0cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0d0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c0d4:	4b94      	ldr	r3, [pc, #592]	; (800c328 <SYSSystem5ms+0x2a8>)
 800c0d6:	edc3 7a00 	vstr	s15, [r3]

	fBLeftPosData = fBPtd * (QEIRead(QEI1) -MIN_POSCNT);
 800c0da:	2001      	movs	r0, #1
 800c0dc:	f7f6 f8d0 	bl	8002280 <QEIRead>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c0e6:	ee07 3a90 	vmov	s15, r3
 800c0ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0ee:	4b8f      	ldr	r3, [pc, #572]	; (800c32c <SYSSystem5ms+0x2ac>)
 800c0f0:	edd3 7a00 	vldr	s15, [r3]
 800c0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f8:	4b8d      	ldr	r3, [pc, #564]	; (800c330 <SYSSystem5ms+0x2b0>)
 800c0fa:	edc3 7a00 	vstr	s15, [r3]
	fBRightPosData = fBKcd * fBPtd * (QEIRead(QEI3) - MIN_POSCNT);
 800c0fe:	4b8d      	ldr	r3, [pc, #564]	; (800c334 <SYSSystem5ms+0x2b4>)
 800c100:	ed93 7a00 	vldr	s14, [r3]
 800c104:	4b89      	ldr	r3, [pc, #548]	; (800c32c <SYSSystem5ms+0x2ac>)
 800c106:	edd3 7a00 	vldr	s15, [r3]
 800c10a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800c10e:	2003      	movs	r0, #3
 800c110:	f7f6 f8b6 	bl	8002280 <QEIRead>
 800c114:	4603      	mov	r3, r0
 800c116:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c122:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c126:	4b84      	ldr	r3, [pc, #528]	; (800c338 <SYSSystem5ms+0x2b8>)
 800c128:	edc3 7a00 	vstr	s15, [r3]

	fXEncData = xPtd * (QEIRead(QEI2) - MIN_POSCNT);
 800c12c:	2002      	movs	r0, #2
 800c12e:	f7f6 f8a7 	bl	8002280 <QEIRead>
 800c132:	4603      	mov	r3, r0
 800c134:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c138:	ee07 3a90 	vmov	s15, r3
 800c13c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c140:	4b7e      	ldr	r3, [pc, #504]	; (800c33c <SYSSystem5ms+0x2bc>)
 800c142:	edd3 7a00 	vldr	s15, [r3]
 800c146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c14a:	4b7d      	ldr	r3, [pc, #500]	; (800c340 <SYSSystem5ms+0x2c0>)
 800c14c:	edc3 7a00 	vstr	s15, [r3]
	fYEncData = yPtd * (QEIRead(QEI5) - MIN_POSCNT);
 800c150:	2005      	movs	r0, #5
 800c152:	f7f6 f895 	bl	8002280 <QEIRead>
 800c156:	4603      	mov	r3, r0
 800c158:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c164:	4b77      	ldr	r3, [pc, #476]	; (800c344 <SYSSystem5ms+0x2c4>)
 800c166:	edd3 7a00 	vldr	s15, [r3]
 800c16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16e:	4b76      	ldr	r3, [pc, #472]	; (800c348 <SYSSystem5ms+0x2c8>)
 800c170:	edc3 7a00 	vstr	s15, [r3]

	/* ABT filter */
	ABT(&fleft_pos_data);
 800c174:	4875      	ldr	r0, [pc, #468]	; (800c34c <SYSSystem5ms+0x2cc>)
 800c176:	f7f4 ff7f 	bl	8001078 <ABT>
	ABT(&fright_pos_data);
 800c17a:	4875      	ldr	r0, [pc, #468]	; (800c350 <SYSSystem5ms+0x2d0>)
 800c17c:	f7f4 ff7c 	bl	8001078 <ABT>

	ABT(&bleft_pos_data);
 800c180:	4874      	ldr	r0, [pc, #464]	; (800c354 <SYSSystem5ms+0x2d4>)
 800c182:	f7f4 ff79 	bl	8001078 <ABT>
	ABT(&bright_pos_data);
 800c186:	4874      	ldr	r0, [pc, #464]	; (800c358 <SYSSystem5ms+0x2d8>)
 800c188:	f7f4 ff76 	bl	8001078 <ABT>

	ABT(&x_data);
 800c18c:	4873      	ldr	r0, [pc, #460]	; (800c35c <SYSSystem5ms+0x2dc>)
 800c18e:	f7f4 ff73 	bl	8001078 <ABT>
	ABT(&y_data);
 800c192:	4873      	ldr	r0, [pc, #460]	; (800c360 <SYSSystem5ms+0x2e0>)
 800c194:	f7f4 ff70 	bl	8001078 <ABT>

	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
 800c198:	4b72      	ldr	r3, [pc, #456]	; (800c364 <SYSSystem5ms+0x2e4>)
 800c19a:	edd3 7a00 	vldr	s15, [r3]
 800c19e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a6:	db02      	blt.n	800c1ae <SYSSystem5ms+0x12e>
 800c1a8:	4b6e      	ldr	r3, [pc, #440]	; (800c364 <SYSSystem5ms+0x2e4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	e010      	b.n	800c1d0 <SYSSystem5ms+0x150>
 800c1ae:	4b6d      	ldr	r3, [pc, #436]	; (800c364 <SYSSystem5ms+0x2e4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7f4 f9c8 	bl	8000548 <__aeabi_f2d>
 800c1b8:	f04f 0200 	mov.w	r2, #0
 800c1bc:	4b6a      	ldr	r3, [pc, #424]	; (800c368 <SYSSystem5ms+0x2e8>)
 800c1be:	f7f4 f865 	bl	800028c <__adddf3>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	f7f4 fd0d 	bl	8000be8 <__aeabi_d2f>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	4a64      	ldr	r2, [pc, #400]	; (800c364 <SYSSystem5ms+0x2e4>)
 800c1d2:	6013      	str	r3, [r2, #0]

	PathPlan(&pp);
 800c1d4:	4865      	ldr	r0, [pc, #404]	; (800c36c <SYSSystem5ms+0x2ec>)
 800c1d6:	f7f9 f867 	bl	80052a8 <PathPlan>

	if (sys.lf_flag) {
 800c1da:	4b65      	ldr	r3, [pc, #404]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d02f      	beq.n	800c248 <SYSSystem5ms+0x1c8>

		LSAErr_Handler(&LSA_A);
 800c1e8:	4862      	ldr	r0, [pc, #392]	; (800c374 <SYSSystem5ms+0x2f4>)
 800c1ea:	f7f7 ff4b 	bl	8004084 <LSAErr_Handler>
		LSAErr_Handler(&LSA_B);
 800c1ee:	4862      	ldr	r0, [pc, #392]	; (800c378 <SYSSystem5ms+0x2f8>)
 800c1f0:	f7f7 ff48 	bl	8004084 <LSAErr_Handler>
		LSAErr_Handler(&LSA_C);
 800c1f4:	4861      	ldr	r0, [pc, #388]	; (800c37c <SYSSystem5ms+0x2fc>)
 800c1f6:	f7f7 ff45 	bl	8004084 <LSAErr_Handler>
		LSAErr_Handler(&LSA_D);
 800c1fa:	4861      	ldr	r0, [pc, #388]	; (800c380 <SYSSystem5ms+0x300>)
 800c1fc:	f7f7 ff42 	bl	8004084 <LSAErr_Handler>

		if(LSA_RIGHT->LSA_T == 8 || LSA_FRONT->LSA_T == 8){
 800c200:	4b60      	ldr	r3, [pc, #384]	; (800c384 <SYSSystem5ms+0x304>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800c208:	2b08      	cmp	r3, #8
 800c20a:	d005      	beq.n	800c218 <SYSSystem5ms+0x198>
 800c20c:	4b5e      	ldr	r3, [pc, #376]	; (800c388 <SYSSystem5ms+0x308>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800c214:	2b08      	cmp	r3, #8
 800c216:	d112      	bne.n	800c23e <SYSSystem5ms+0x1be>
			if(sys.junc_flag == 0){
 800c218:	4b55      	ldr	r3, [pc, #340]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	f003 0310 	and.w	r3, r3, #16
 800c220:	b2db      	uxtb	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d110      	bne.n	800c248 <SYSSystem5ms+0x1c8>
				junction_count++;
 800c226:	4b59      	ldr	r3, [pc, #356]	; (800c38c <SYSSystem5ms+0x30c>)
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	3301      	adds	r3, #1
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	4b57      	ldr	r3, [pc, #348]	; (800c38c <SYSSystem5ms+0x30c>)
 800c230:	801a      	strh	r2, [r3, #0]
				sys.junc_flag = 1;
 800c232:	4a4f      	ldr	r2, [pc, #316]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c234:	7813      	ldrb	r3, [r2, #0]
 800c236:	f043 0310 	orr.w	r3, r3, #16
 800c23a:	7013      	strb	r3, [r2, #0]
			if(sys.junc_flag == 0){
 800c23c:	e004      	b.n	800c248 <SYSSystem5ms+0x1c8>
			}
		} else{
			sys.junc_flag = 0;
 800c23e:	4a4c      	ldr	r2, [pc, #304]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c240:	7813      	ldrb	r3, [r2, #0]
 800c242:	f36f 1304 	bfc	r3, #4, #1
 800c246:	7013      	strb	r3, [r2, #0]
		}
	}

	if (sys.activate){
 800c248:	4b49      	ldr	r3, [pc, #292]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 84dd 	beq.w	800cc12 <SYSSystem5ms+0xb92>

		//LineFollowStart//
		if(sys.lf_flag){
 800c258:	4b45      	ldr	r3, [pc, #276]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	f003 0308 	and.w	r3, r3, #8
 800c260:	b2db      	uxtb	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 838f 	beq.w	800c986 <SYSSystem5ms+0x906>

			sys.busy_flag = 1;
 800c268:	4a41      	ldr	r2, [pc, #260]	; (800c370 <SYSSystem5ms+0x2f0>)
 800c26a:	7813      	ldrb	r3, [r2, #0]
 800c26c:	f043 0302 	orr.w	r3, r3, #2
 800c270:	7013      	strb	r3, [r2, #0]

			if(Dir == DIR_LEFT || Dir == DIR_RIGHT){
 800c272:	4b47      	ldr	r3, [pc, #284]	; (800c390 <SYSSystem5ms+0x310>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b10      	cmp	r3, #16
 800c278:	d004      	beq.n	800c284 <SYSSystem5ms+0x204>
 800c27a:	4b45      	ldr	r3, [pc, #276]	; (800c390 <SYSSystem5ms+0x310>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b11      	cmp	r3, #17
 800c280:	f040 8096 	bne.w	800c3b0 <SYSSystem5ms+0x330>

				if((LSA_LEFT->LSA_T != 0) && (LSA_RIGHT->LSA_T != 0)){
 800c284:	4b43      	ldr	r3, [pc, #268]	; (800c394 <SYSSystem5ms+0x314>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d028      	beq.n	800c2e2 <SYSSystem5ms+0x262>
 800c290:	4b3c      	ldr	r3, [pc, #240]	; (800c384 <SYSSystem5ms+0x304>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d022      	beq.n	800c2e2 <SYSSystem5ms+0x262>
					fFwdErr = LSA_RIGHT->PosErr - LSA_LEFT->PosErr;
 800c29c:	4b39      	ldr	r3, [pc, #228]	; (800c384 <SYSSystem5ms+0x304>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800c2a4:	4b3b      	ldr	r3, [pc, #236]	; (800c394 <SYSSystem5ms+0x314>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800c2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2b0:	4b39      	ldr	r3, [pc, #228]	; (800c398 <SYSSystem5ms+0x318>)
 800c2b2:	edc3 7a00 	vstr	s15, [r3]
					store_lsa = LSA_RIGHT->PosErr + LSA_LEFT->PosErr;
 800c2b6:	4b33      	ldr	r3, [pc, #204]	; (800c384 <SYSSystem5ms+0x304>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800c2be:	4b35      	ldr	r3, [pc, #212]	; (800c394 <SYSSystem5ms+0x314>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800c2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ca:	4b34      	ldr	r3, [pc, #208]	; (800c39c <SYSSystem5ms+0x31c>)
 800c2cc:	edc3 7a00 	vstr	s15, [r3]
					store_imu = fyaw;
 800c2d0:	4b24      	ldr	r3, [pc, #144]	; (800c364 <SYSSystem5ms+0x2e4>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a32      	ldr	r2, [pc, #200]	; (800c3a0 <SYSSystem5ms+0x320>)
 800c2d6:	6013      	str	r3, [r2, #0]
					robot_angle = store_lsa;
 800c2d8:	4b30      	ldr	r3, [pc, #192]	; (800c39c <SYSSystem5ms+0x31c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a31      	ldr	r2, [pc, #196]	; (800c3a4 <SYSSystem5ms+0x324>)
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e00f      	b.n	800c302 <SYSSystem5ms+0x282>
				}else{
					robot_angle = store_lsa + store_imu - fyaw;
 800c2e2:	4b2e      	ldr	r3, [pc, #184]	; (800c39c <SYSSystem5ms+0x31c>)
 800c2e4:	ed93 7a00 	vldr	s14, [r3]
 800c2e8:	4b2d      	ldr	r3, [pc, #180]	; (800c3a0 <SYSSystem5ms+0x320>)
 800c2ea:	edd3 7a00 	vldr	s15, [r3]
 800c2ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2f2:	4b1c      	ldr	r3, [pc, #112]	; (800c364 <SYSSystem5ms+0x2e4>)
 800c2f4:	edd3 7a00 	vldr	s15, [r3]
 800c2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2fc:	4b29      	ldr	r3, [pc, #164]	; (800c3a4 <SYSSystem5ms+0x324>)
 800c2fe:	edc3 7a00 	vstr	s15, [r3]
				}

				fLFDistErr = LFtargetDist - fXEncData;
 800c302:	4b29      	ldr	r3, [pc, #164]	; (800c3a8 <SYSSystem5ms+0x328>)
 800c304:	ed93 7a00 	vldr	s14, [r3]
 800c308:	4b0d      	ldr	r3, [pc, #52]	; (800c340 <SYSSystem5ms+0x2c0>)
 800c30a:	edd3 7a00 	vldr	s15, [r3]
 800c30e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c312:	4b26      	ldr	r3, [pc, #152]	; (800c3ac <SYSSystem5ms+0x32c>)
 800c314:	edc3 7a00 	vstr	s15, [r3]
 800c318:	e09c      	b.n	800c454 <SYSSystem5ms+0x3d4>
 800c31a:	bf00      	nop
 800c31c:	20006ee4 	.word	0x20006ee4
 800c320:	200077d8 	.word	0x200077d8
 800c324:	200079f4 	.word	0x200079f4
 800c328:	20006da8 	.word	0x20006da8
 800c32c:	20006750 	.word	0x20006750
 800c330:	20006dbc 	.word	0x20006dbc
 800c334:	20007f1c 	.word	0x20007f1c
 800c338:	20007f5c 	.word	0x20007f5c
 800c33c:	20006630 	.word	0x20006630
 800c340:	200066c0 	.word	0x200066c0
 800c344:	20006ee0 	.word	0x20006ee0
 800c348:	20007f0c 	.word	0x20007f0c
 800c34c:	200078d4 	.word	0x200078d4
 800c350:	20007d78 	.word	0x20007d78
 800c354:	200076ec 	.word	0x200076ec
 800c358:	20007bfc 	.word	0x20007bfc
 800c35c:	20007eec 	.word	0x20007eec
 800c360:	20006e68 	.word	0x20006e68
 800c364:	20007af4 	.word	0x20007af4
 800c368:	40768000 	.word	0x40768000
 800c36c:	20006868 	.word	0x20006868
 800c370:	20006dac 	.word	0x20006dac
 800c374:	2000738c 	.word	0x2000738c
 800c378:	2000767c 	.word	0x2000767c
 800c37c:	200077dc 	.word	0x200077dc
 800c380:	20007b90 	.word	0x20007b90
 800c384:	20007a74 	.word	0x20007a74
 800c388:	20006e20 	.word	0x20006e20
 800c38c:	20006628 	.word	0x20006628
 800c390:	200079ec 	.word	0x200079ec
 800c394:	200073f8 	.word	0x200073f8
 800c398:	20006864 	.word	0x20006864
 800c39c:	20007a60 	.word	0x20007a60
 800c3a0:	20006eec 	.word	0x20006eec
 800c3a4:	20007944 	.word	0x20007944
 800c3a8:	20007c20 	.word	0x20007c20
 800c3ac:	20007384 	.word	0x20007384

			} else if(Dir == DIR_FRONT || Dir == DIR_BACK) {
 800c3b0:	4bb9      	ldr	r3, [pc, #740]	; (800c698 <SYSSystem5ms+0x618>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b0e      	cmp	r3, #14
 800c3b6:	d003      	beq.n	800c3c0 <SYSSystem5ms+0x340>
 800c3b8:	4bb7      	ldr	r3, [pc, #732]	; (800c698 <SYSSystem5ms+0x618>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b0f      	cmp	r3, #15
 800c3be:	d149      	bne.n	800c454 <SYSSystem5ms+0x3d4>

				if((LSA_FRONT->LSA_T != 0) && (LSA_BACK->LSA_T != 0)){
 800c3c0:	4bb6      	ldr	r3, [pc, #728]	; (800c69c <SYSSystem5ms+0x61c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d028      	beq.n	800c41e <SYSSystem5ms+0x39e>
 800c3cc:	4bb4      	ldr	r3, [pc, #720]	; (800c6a0 <SYSSystem5ms+0x620>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d022      	beq.n	800c41e <SYSSystem5ms+0x39e>
					fFwdErr = LSA_FRONT->PosErr - LSA_BACK->PosErr;
 800c3d8:	4bb0      	ldr	r3, [pc, #704]	; (800c69c <SYSSystem5ms+0x61c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800c3e0:	4baf      	ldr	r3, [pc, #700]	; (800c6a0 <SYSSystem5ms+0x620>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800c3e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3ec:	4bad      	ldr	r3, [pc, #692]	; (800c6a4 <SYSSystem5ms+0x624>)
 800c3ee:	edc3 7a00 	vstr	s15, [r3]
					store_lsa = LSA_FRONT->PosErr + LSA_BACK->PosErr;
 800c3f2:	4baa      	ldr	r3, [pc, #680]	; (800c69c <SYSSystem5ms+0x61c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800c3fa:	4ba9      	ldr	r3, [pc, #676]	; (800c6a0 <SYSSystem5ms+0x620>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800c402:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c406:	4ba8      	ldr	r3, [pc, #672]	; (800c6a8 <SYSSystem5ms+0x628>)
 800c408:	edc3 7a00 	vstr	s15, [r3]
					store_imu = fyaw;
 800c40c:	4ba7      	ldr	r3, [pc, #668]	; (800c6ac <SYSSystem5ms+0x62c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4aa7      	ldr	r2, [pc, #668]	; (800c6b0 <SYSSystem5ms+0x630>)
 800c412:	6013      	str	r3, [r2, #0]
					robot_angle = store_lsa;
 800c414:	4ba4      	ldr	r3, [pc, #656]	; (800c6a8 <SYSSystem5ms+0x628>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4aa6      	ldr	r2, [pc, #664]	; (800c6b4 <SYSSystem5ms+0x634>)
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	e00f      	b.n	800c43e <SYSSystem5ms+0x3be>
				}else{
					robot_angle = store_lsa + store_imu - fyaw;
 800c41e:	4ba2      	ldr	r3, [pc, #648]	; (800c6a8 <SYSSystem5ms+0x628>)
 800c420:	ed93 7a00 	vldr	s14, [r3]
 800c424:	4ba2      	ldr	r3, [pc, #648]	; (800c6b0 <SYSSystem5ms+0x630>)
 800c426:	edd3 7a00 	vldr	s15, [r3]
 800c42a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c42e:	4b9f      	ldr	r3, [pc, #636]	; (800c6ac <SYSSystem5ms+0x62c>)
 800c430:	edd3 7a00 	vldr	s15, [r3]
 800c434:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c438:	4b9e      	ldr	r3, [pc, #632]	; (800c6b4 <SYSSystem5ms+0x634>)
 800c43a:	edc3 7a00 	vstr	s15, [r3]
				}

				fLFDistErr = LFtargetDist - fYEncData;
 800c43e:	4b9e      	ldr	r3, [pc, #632]	; (800c6b8 <SYSSystem5ms+0x638>)
 800c440:	ed93 7a00 	vldr	s14, [r3]
 800c444:	4b9d      	ldr	r3, [pc, #628]	; (800c6bc <SYSSystem5ms+0x63c>)
 800c446:	edd3 7a00 	vldr	s15, [r3]
 800c44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c44e:	4b9c      	ldr	r3, [pc, #624]	; (800c6c0 <SYSSystem5ms+0x640>)
 800c450:	edc3 7a00 	vstr	s15, [r3]
			}

			fRotateErr = robot_angle;
 800c454:	4b97      	ldr	r3, [pc, #604]	; (800c6b4 <SYSSystem5ms+0x634>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a9a      	ldr	r2, [pc, #616]	; (800c6c4 <SYSSystem5ms+0x644>)
 800c45a:	6013      	str	r3, [r2, #0]

			PID(&lf_dist);
 800c45c:	489a      	ldr	r0, [pc, #616]	; (800c6c8 <SYSSystem5ms+0x648>)
 800c45e:	f7f8 fa99 	bl	8004994 <PID>
			PID(&lf_rotate);
 800c462:	489a      	ldr	r0, [pc, #616]	; (800c6cc <SYSSystem5ms+0x64c>)
 800c464:	f7f8 fa96 	bl	8004994 <PID>
			PID(&lf_fwd);
 800c468:	4899      	ldr	r0, [pc, #612]	; (800c6d0 <SYSSystem5ms+0x650>)
 800c46a:	f7f8 fa93 	bl	8004994 <PID>

			if(sys.dist_flag){//DISTANCE LINE FOLLOW
 800c46e:	4b99      	ldr	r3, [pc, #612]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	f003 0320 	and.w	r3, r3, #32
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 81bc 	beq.w	800c7f6 <SYSSystem5ms+0x776>
				if(sys.lf_right || sys.lf_front){
 800c47e:	4b95      	ldr	r3, [pc, #596]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c480:	785b      	ldrb	r3, [r3, #1]
 800c482:	f003 0304 	and.w	r3, r3, #4
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d107      	bne.n	800c49c <SYSSystem5ms+0x41c>
 800c48c:	4b91      	ldr	r3, [pc, #580]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80af 	beq.w	800c5fa <SYSSystem5ms+0x57a>
					if(Dir == DIR_RIGHT){
 800c49c:	4b7e      	ldr	r3, [pc, #504]	; (800c698 <SYSSystem5ms+0x618>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b11      	cmp	r3, #17
 800c4a2:	d152      	bne.n	800c54a <SYSSystem5ms+0x4ca>
						if(fXEncData < LFtargetDist){
 800c4a4:	4b8c      	ldr	r3, [pc, #560]	; (800c6d8 <SYSSystem5ms+0x658>)
 800c4a6:	ed93 7a00 	vldr	s14, [r3]
 800c4aa:	4b83      	ldr	r3, [pc, #524]	; (800c6b8 <SYSSystem5ms+0x638>)
 800c4ac:	edd3 7a00 	vldr	s15, [r3]
 800c4b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b8:	d521      	bpl.n	800c4fe <SYSSystem5ms+0x47e>
							LineFollow(fLFDistU + 0.2 ,fFwdU, fRotateU, 1.5);
 800c4ba:	4b88      	ldr	r3, [pc, #544]	; (800c6dc <SYSSystem5ms+0x65c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f4 f842 	bl	8000548 <__aeabi_f2d>
 800c4c4:	a372      	add	r3, pc, #456	; (adr r3, 800c690 <SYSSystem5ms+0x610>)
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f7f3 fedf 	bl	800028c <__adddf3>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	f7f4 fb87 	bl	8000be8 <__aeabi_d2f>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	4b80      	ldr	r3, [pc, #512]	; (800c6e0 <SYSSystem5ms+0x660>)
 800c4de:	edd3 7a00 	vldr	s15, [r3]
 800c4e2:	4b80      	ldr	r3, [pc, #512]	; (800c6e4 <SYSSystem5ms+0x664>)
 800c4e4:	ed93 7a00 	vldr	s14, [r3]
 800c4e8:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800c4ec:	eeb0 1a47 	vmov.f32	s2, s14
 800c4f0:	eef0 0a67 	vmov.f32	s1, s15
 800c4f4:	ee00 2a10 	vmov	s0, r2
 800c4f8:	f000 fc06 	bl	800cd08 <LineFollow>
					if(Dir == DIR_RIGHT){
 800c4fc:	e242      	b.n	800c984 <SYSSystem5ms+0x904>
						} else if(fRotateErr != 0.0){
 800c4fe:	4b71      	ldr	r3, [pc, #452]	; (800c6c4 <SYSSystem5ms+0x644>)
 800c500:	edd3 7a00 	vldr	s15, [r3]
 800c504:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50c:	d00d      	beq.n	800c52a <SYSSystem5ms+0x4aa>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800c50e:	4b75      	ldr	r3, [pc, #468]	; (800c6e4 <SYSSystem5ms+0x664>)
 800c510:	edd3 7a00 	vldr	s15, [r3]
 800c514:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800c518:	eeb0 1a67 	vmov.f32	s2, s15
 800c51c:	eddf 0a72 	vldr	s1, [pc, #456]	; 800c6e8 <SYSSystem5ms+0x668>
 800c520:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800c6e8 <SYSSystem5ms+0x668>
 800c524:	f000 fbf0 	bl	800cd08 <LineFollow>
					if(Dir == DIR_RIGHT){
 800c528:	e22c      	b.n	800c984 <SYSSystem5ms+0x904>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800c52a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800c6e8 <SYSSystem5ms+0x668>
 800c52e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800c6e8 <SYSSystem5ms+0x668>
 800c532:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c6e8 <SYSSystem5ms+0x668>
 800c536:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800c6e8 <SYSSystem5ms+0x668>
 800c53a:	f000 fbe5 	bl	800cd08 <LineFollow>
							sys.busy_flag = 0;
 800c53e:	4a65      	ldr	r2, [pc, #404]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c540:	7813      	ldrb	r3, [r2, #0]
 800c542:	f36f 0341 	bfc	r3, #1, #1
 800c546:	7013      	strb	r3, [r2, #0]
					if(Dir == DIR_RIGHT){
 800c548:	e21c      	b.n	800c984 <SYSSystem5ms+0x904>
						}
					}else if(Dir == DIR_FRONT){
 800c54a:	4b53      	ldr	r3, [pc, #332]	; (800c698 <SYSSystem5ms+0x618>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b0e      	cmp	r3, #14
 800c550:	f040 8218 	bne.w	800c984 <SYSSystem5ms+0x904>
						if(fYEncData < LFtargetDist){
 800c554:	4b59      	ldr	r3, [pc, #356]	; (800c6bc <SYSSystem5ms+0x63c>)
 800c556:	ed93 7a00 	vldr	s14, [r3]
 800c55a:	4b57      	ldr	r3, [pc, #348]	; (800c6b8 <SYSSystem5ms+0x638>)
 800c55c:	edd3 7a00 	vldr	s15, [r3]
 800c560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c568:	d521      	bpl.n	800c5ae <SYSSystem5ms+0x52e>
							LineFollow(fLFDistU + 0.2 ,fFwdU,fRotateU, 1.5);
 800c56a:	4b5c      	ldr	r3, [pc, #368]	; (800c6dc <SYSSystem5ms+0x65c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7f3 ffea 	bl	8000548 <__aeabi_f2d>
 800c574:	a346      	add	r3, pc, #280	; (adr r3, 800c690 <SYSSystem5ms+0x610>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7f3 fe87 	bl	800028c <__adddf3>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4610      	mov	r0, r2
 800c584:	4619      	mov	r1, r3
 800c586:	f7f4 fb2f 	bl	8000be8 <__aeabi_d2f>
 800c58a:	4602      	mov	r2, r0
 800c58c:	4b54      	ldr	r3, [pc, #336]	; (800c6e0 <SYSSystem5ms+0x660>)
 800c58e:	edd3 7a00 	vldr	s15, [r3]
 800c592:	4b54      	ldr	r3, [pc, #336]	; (800c6e4 <SYSSystem5ms+0x664>)
 800c594:	ed93 7a00 	vldr	s14, [r3]
 800c598:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800c59c:	eeb0 1a47 	vmov.f32	s2, s14
 800c5a0:	eef0 0a67 	vmov.f32	s1, s15
 800c5a4:	ee00 2a10 	vmov	s0, r2
 800c5a8:	f000 fbae 	bl	800cd08 <LineFollow>
					if(Dir == DIR_RIGHT){
 800c5ac:	e1ea      	b.n	800c984 <SYSSystem5ms+0x904>
						} else if(fRotateErr != 0.0){
 800c5ae:	4b45      	ldr	r3, [pc, #276]	; (800c6c4 <SYSSystem5ms+0x644>)
 800c5b0:	edd3 7a00 	vldr	s15, [r3]
 800c5b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5bc:	d00d      	beq.n	800c5da <SYSSystem5ms+0x55a>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800c5be:	4b49      	ldr	r3, [pc, #292]	; (800c6e4 <SYSSystem5ms+0x664>)
 800c5c0:	edd3 7a00 	vldr	s15, [r3]
 800c5c4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800c5c8:	eeb0 1a67 	vmov.f32	s2, s15
 800c5cc:	eddf 0a46 	vldr	s1, [pc, #280]	; 800c6e8 <SYSSystem5ms+0x668>
 800c5d0:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800c6e8 <SYSSystem5ms+0x668>
 800c5d4:	f000 fb98 	bl	800cd08 <LineFollow>
					if(Dir == DIR_RIGHT){
 800c5d8:	e1d4      	b.n	800c984 <SYSSystem5ms+0x904>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800c5da:	eddf 1a43 	vldr	s3, [pc, #268]	; 800c6e8 <SYSSystem5ms+0x668>
 800c5de:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800c6e8 <SYSSystem5ms+0x668>
 800c5e2:	eddf 0a41 	vldr	s1, [pc, #260]	; 800c6e8 <SYSSystem5ms+0x668>
 800c5e6:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800c6e8 <SYSSystem5ms+0x668>
 800c5ea:	f000 fb8d 	bl	800cd08 <LineFollow>
							sys.busy_flag = 0;
 800c5ee:	4a39      	ldr	r2, [pc, #228]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c5f0:	7813      	ldrb	r3, [r2, #0]
 800c5f2:	f36f 0341 	bfc	r3, #1, #1
 800c5f6:	7013      	strb	r3, [r2, #0]
					if(Dir == DIR_RIGHT){
 800c5f8:	e1c4      	b.n	800c984 <SYSSystem5ms+0x904>
						}
					}
				}else if(sys.lf_left || sys.lf_back){
 800c5fa:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c5fc:	785b      	ldrb	r3, [r3, #1]
 800c5fe:	f003 0302 	and.w	r3, r3, #2
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b00      	cmp	r3, #0
 800c606:	d107      	bne.n	800c618 <SYSSystem5ms+0x598>
 800c608:	4b32      	ldr	r3, [pc, #200]	; (800c6d4 <SYSSystem5ms+0x654>)
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 81b7 	beq.w	800c986 <SYSSystem5ms+0x906>
					if(Dir == DIR_LEFT){
 800c618:	4b1f      	ldr	r3, [pc, #124]	; (800c698 <SYSSystem5ms+0x618>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b10      	cmp	r3, #16
 800c61e:	f040 808b 	bne.w	800c738 <SYSSystem5ms+0x6b8>
						if(fXEncData > LFtargetDist){
 800c622:	4b2d      	ldr	r3, [pc, #180]	; (800c6d8 <SYSSystem5ms+0x658>)
 800c624:	ed93 7a00 	vldr	s14, [r3]
 800c628:	4b23      	ldr	r3, [pc, #140]	; (800c6b8 <SYSSystem5ms+0x638>)
 800c62a:	edd3 7a00 	vldr	s15, [r3]
 800c62e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c636:	dd59      	ble.n	800c6ec <SYSSystem5ms+0x66c>
							LineFollow(-fLFDistU - 0.2 ,-fFwdU,fRotateU, 1.5);
 800c638:	4b28      	ldr	r3, [pc, #160]	; (800c6dc <SYSSystem5ms+0x65c>)
 800c63a:	edd3 7a00 	vldr	s15, [r3]
 800c63e:	eef1 7a67 	vneg.f32	s15, s15
 800c642:	ee17 3a90 	vmov	r3, s15
 800c646:	4618      	mov	r0, r3
 800c648:	f7f3 ff7e 	bl	8000548 <__aeabi_f2d>
 800c64c:	a310      	add	r3, pc, #64	; (adr r3, 800c690 <SYSSystem5ms+0x610>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f3 fe19 	bl	8000288 <__aeabi_dsub>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4610      	mov	r0, r2
 800c65c:	4619      	mov	r1, r3
 800c65e:	f7f4 fac3 	bl	8000be8 <__aeabi_d2f>
 800c662:	4602      	mov	r2, r0
 800c664:	4b1e      	ldr	r3, [pc, #120]	; (800c6e0 <SYSSystem5ms+0x660>)
 800c666:	edd3 7a00 	vldr	s15, [r3]
 800c66a:	eef1 7a67 	vneg.f32	s15, s15
 800c66e:	4b1d      	ldr	r3, [pc, #116]	; (800c6e4 <SYSSystem5ms+0x664>)
 800c670:	ed93 7a00 	vldr	s14, [r3]
 800c674:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800c678:	eeb0 1a47 	vmov.f32	s2, s14
 800c67c:	eef0 0a67 	vmov.f32	s1, s15
 800c680:	ee00 2a10 	vmov	s0, r2
 800c684:	f000 fb40 	bl	800cd08 <LineFollow>
 800c688:	e17d      	b.n	800c986 <SYSSystem5ms+0x906>
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w
 800c690:	9999999a 	.word	0x9999999a
 800c694:	3fc99999 	.word	0x3fc99999
 800c698:	200079ec 	.word	0x200079ec
 800c69c:	20006e20 	.word	0x20006e20
 800c6a0:	200079f0 	.word	0x200079f0
 800c6a4:	20006864 	.word	0x20006864
 800c6a8:	20007a60 	.word	0x20007a60
 800c6ac:	20007af4 	.word	0x20007af4
 800c6b0:	20006eec 	.word	0x20006eec
 800c6b4:	20007944 	.word	0x20007944
 800c6b8:	20007c20 	.word	0x20007c20
 800c6bc:	20007f0c 	.word	0x20007f0c
 800c6c0:	20007384 	.word	0x20007384
 800c6c4:	20006d9c 	.word	0x20006d9c
 800c6c8:	20007e0c 	.word	0x20007e0c
 800c6cc:	200079f8 	.word	0x200079f8
 800c6d0:	20007b2c 	.word	0x20007b2c
 800c6d4:	20006dac 	.word	0x20006dac
 800c6d8:	200066c0 	.word	0x200066c0
 800c6dc:	200078c8 	.word	0x200078c8
 800c6e0:	20007f10 	.word	0x20007f10
 800c6e4:	20007a4c 	.word	0x20007a4c
 800c6e8:	00000000 	.word	0x00000000
						} else if(fRotateErr != 0.0){
 800c6ec:	4bca      	ldr	r3, [pc, #808]	; (800ca18 <SYSSystem5ms+0x998>)
 800c6ee:	edd3 7a00 	vldr	s15, [r3]
 800c6f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fa:	d00d      	beq.n	800c718 <SYSSystem5ms+0x698>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800c6fc:	4bc7      	ldr	r3, [pc, #796]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c6fe:	edd3 7a00 	vldr	s15, [r3]
 800c702:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800c706:	eeb0 1a67 	vmov.f32	s2, s15
 800c70a:	eddf 0ac5 	vldr	s1, [pc, #788]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c70e:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c712:	f000 faf9 	bl	800cd08 <LineFollow>
 800c716:	e136      	b.n	800c986 <SYSSystem5ms+0x906>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800c718:	eddf 1ac1 	vldr	s3, [pc, #772]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c71c:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c720:	eddf 0abf 	vldr	s1, [pc, #764]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c724:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c728:	f000 faee 	bl	800cd08 <LineFollow>
							sys.busy_flag = 0;
 800c72c:	4abd      	ldr	r2, [pc, #756]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c72e:	7813      	ldrb	r3, [r2, #0]
 800c730:	f36f 0341 	bfc	r3, #1, #1
 800c734:	7013      	strb	r3, [r2, #0]
 800c736:	e126      	b.n	800c986 <SYSSystem5ms+0x906>
						}
					} else if(Dir == DIR_BACK){
 800c738:	4bbb      	ldr	r3, [pc, #748]	; (800ca28 <SYSSystem5ms+0x9a8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b0f      	cmp	r3, #15
 800c73e:	f040 8122 	bne.w	800c986 <SYSSystem5ms+0x906>
						if(fYEncData > LFtargetDist){
 800c742:	4bba      	ldr	r3, [pc, #744]	; (800ca2c <SYSSystem5ms+0x9ac>)
 800c744:	ed93 7a00 	vldr	s14, [r3]
 800c748:	4bb9      	ldr	r3, [pc, #740]	; (800ca30 <SYSSystem5ms+0x9b0>)
 800c74a:	edd3 7a00 	vldr	s15, [r3]
 800c74e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c756:	dd28      	ble.n	800c7aa <SYSSystem5ms+0x72a>
							LineFollow(-fLFDistU - 0.2 ,-fFwdU,fRotateU, 1.5);
 800c758:	4bb6      	ldr	r3, [pc, #728]	; (800ca34 <SYSSystem5ms+0x9b4>)
 800c75a:	edd3 7a00 	vldr	s15, [r3]
 800c75e:	eef1 7a67 	vneg.f32	s15, s15
 800c762:	ee17 3a90 	vmov	r3, s15
 800c766:	4618      	mov	r0, r3
 800c768:	f7f3 feee 	bl	8000548 <__aeabi_f2d>
 800c76c:	a3a8      	add	r3, pc, #672	; (adr r3, 800ca10 <SYSSystem5ms+0x990>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	f7f3 fd89 	bl	8000288 <__aeabi_dsub>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4610      	mov	r0, r2
 800c77c:	4619      	mov	r1, r3
 800c77e:	f7f4 fa33 	bl	8000be8 <__aeabi_d2f>
 800c782:	4602      	mov	r2, r0
 800c784:	4bac      	ldr	r3, [pc, #688]	; (800ca38 <SYSSystem5ms+0x9b8>)
 800c786:	edd3 7a00 	vldr	s15, [r3]
 800c78a:	eef1 7a67 	vneg.f32	s15, s15
 800c78e:	4ba3      	ldr	r3, [pc, #652]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c790:	ed93 7a00 	vldr	s14, [r3]
 800c794:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800c798:	eeb0 1a47 	vmov.f32	s2, s14
 800c79c:	eef0 0a67 	vmov.f32	s1, s15
 800c7a0:	ee00 2a10 	vmov	s0, r2
 800c7a4:	f000 fab0 	bl	800cd08 <LineFollow>
 800c7a8:	e0ed      	b.n	800c986 <SYSSystem5ms+0x906>
						} else if(fRotateErr != 0.0){
 800c7aa:	4b9b      	ldr	r3, [pc, #620]	; (800ca18 <SYSSystem5ms+0x998>)
 800c7ac:	edd3 7a00 	vldr	s15, [r3]
 800c7b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b8:	d00d      	beq.n	800c7d6 <SYSSystem5ms+0x756>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800c7ba:	4b98      	ldr	r3, [pc, #608]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c7bc:	edd3 7a00 	vldr	s15, [r3]
 800c7c0:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800c7c4:	eeb0 1a67 	vmov.f32	s2, s15
 800c7c8:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c7cc:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c7d0:	f000 fa9a 	bl	800cd08 <LineFollow>
 800c7d4:	e0d7      	b.n	800c986 <SYSSystem5ms+0x906>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800c7d6:	eddf 1a92 	vldr	s3, [pc, #584]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c7da:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c7de:	eddf 0a90 	vldr	s1, [pc, #576]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c7e2:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c7e6:	f000 fa8f 	bl	800cd08 <LineFollow>
							sys.busy_flag = 0;
 800c7ea:	4a8e      	ldr	r2, [pc, #568]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c7ec:	7813      	ldrb	r3, [r2, #0]
 800c7ee:	f36f 0341 	bfc	r3, #1, #1
 800c7f2:	7013      	strb	r3, [r2, #0]
 800c7f4:	e0c7      	b.n	800c986 <SYSSystem5ms+0x906>
						}
					}
				}
			} else if(sys.lf_junc){//JUNCTION LINE FOLLOW
 800c7f6:	4b8b      	ldr	r3, [pc, #556]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b00      	cmp	r3, #0
 800c802:	f000 80c0 	beq.w	800c986 <SYSSystem5ms+0x906>
				if(sys.lf_right || sys.lf_front){
 800c806:	4b87      	ldr	r3, [pc, #540]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c808:	785b      	ldrb	r3, [r3, #1]
 800c80a:	f003 0304 	and.w	r3, r3, #4
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b00      	cmp	r3, #0
 800c812:	d106      	bne.n	800c822 <SYSSystem5ms+0x7a2>
 800c814:	4b83      	ldr	r3, [pc, #524]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d04d      	beq.n	800c8be <SYSSystem5ms+0x83e>
					if(junction_count < LFtargetJunc){
 800c822:	4b86      	ldr	r3, [pc, #536]	; (800ca3c <SYSSystem5ms+0x9bc>)
 800c824:	881a      	ldrh	r2, [r3, #0]
 800c826:	4b86      	ldr	r3, [pc, #536]	; (800ca40 <SYSSystem5ms+0x9c0>)
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d221      	bcs.n	800c872 <SYSSystem5ms+0x7f2>
						LineFollow(fLFDistU + 0.2,fFwdU,fRotateU, 1.5);
 800c82e:	4b81      	ldr	r3, [pc, #516]	; (800ca34 <SYSSystem5ms+0x9b4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4618      	mov	r0, r3
 800c834:	f7f3 fe88 	bl	8000548 <__aeabi_f2d>
 800c838:	a375      	add	r3, pc, #468	; (adr r3, 800ca10 <SYSSystem5ms+0x990>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fd25 	bl	800028c <__adddf3>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4610      	mov	r0, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	f7f4 f9cd 	bl	8000be8 <__aeabi_d2f>
 800c84e:	4602      	mov	r2, r0
 800c850:	4b79      	ldr	r3, [pc, #484]	; (800ca38 <SYSSystem5ms+0x9b8>)
 800c852:	edd3 7a00 	vldr	s15, [r3]
 800c856:	4b71      	ldr	r3, [pc, #452]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c858:	ed93 7a00 	vldr	s14, [r3]
 800c85c:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800c860:	eeb0 1a47 	vmov.f32	s2, s14
 800c864:	eef0 0a67 	vmov.f32	s1, s15
 800c868:	ee00 2a10 	vmov	s0, r2
 800c86c:	f000 fa4c 	bl	800cd08 <LineFollow>
					if(junction_count < LFtargetJunc){
 800c870:	e089      	b.n	800c986 <SYSSystem5ms+0x906>
					} else if(fRotateErr != 0.0){
 800c872:	4b69      	ldr	r3, [pc, #420]	; (800ca18 <SYSSystem5ms+0x998>)
 800c874:	edd3 7a00 	vldr	s15, [r3]
 800c878:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c880:	d00d      	beq.n	800c89e <SYSSystem5ms+0x81e>
						LineFollow(0.0,0.0,fRotateU,2.0);
 800c882:	4b66      	ldr	r3, [pc, #408]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c884:	edd3 7a00 	vldr	s15, [r3]
 800c888:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800c88c:	eeb0 1a67 	vmov.f32	s2, s15
 800c890:	eddf 0a63 	vldr	s1, [pc, #396]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c894:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c898:	f000 fa36 	bl	800cd08 <LineFollow>
					if(junction_count < LFtargetJunc){
 800c89c:	e073      	b.n	800c986 <SYSSystem5ms+0x906>
					} else {
						LineFollow(0.0,0.0,0.0, 0.0);
 800c89e:	eddf 1a60 	vldr	s3, [pc, #384]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c8a2:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c8a6:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c8aa:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c8ae:	f000 fa2b 	bl	800cd08 <LineFollow>
						sys.busy_flag = 0;
 800c8b2:	4a5c      	ldr	r2, [pc, #368]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c8b4:	7813      	ldrb	r3, [r2, #0]
 800c8b6:	f36f 0341 	bfc	r3, #1, #1
 800c8ba:	7013      	strb	r3, [r2, #0]
					if(junction_count < LFtargetJunc){
 800c8bc:	e063      	b.n	800c986 <SYSSystem5ms+0x906>
					}
				} else if(sys.lf_left || sys.lf_back){
 800c8be:	4b59      	ldr	r3, [pc, #356]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c8c0:	785b      	ldrb	r3, [r3, #1]
 800c8c2:	f003 0302 	and.w	r3, r3, #2
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <SYSSystem5ms+0x85a>
 800c8cc:	4b55      	ldr	r3, [pc, #340]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c8ce:	785b      	ldrb	r3, [r3, #1]
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d055      	beq.n	800c986 <SYSSystem5ms+0x906>
					if(junction_count < LFtargetJunc){
 800c8da:	4b58      	ldr	r3, [pc, #352]	; (800ca3c <SYSSystem5ms+0x9bc>)
 800c8dc:	881a      	ldrh	r2, [r3, #0]
 800c8de:	4b58      	ldr	r3, [pc, #352]	; (800ca40 <SYSSystem5ms+0x9c0>)
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d228      	bcs.n	800c938 <SYSSystem5ms+0x8b8>
						LineFollow(-fLFDistU - 0.2,-fFwdU,fRotateU, 1.5);
 800c8e6:	4b53      	ldr	r3, [pc, #332]	; (800ca34 <SYSSystem5ms+0x9b4>)
 800c8e8:	edd3 7a00 	vldr	s15, [r3]
 800c8ec:	eef1 7a67 	vneg.f32	s15, s15
 800c8f0:	ee17 3a90 	vmov	r3, s15
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f3 fe27 	bl	8000548 <__aeabi_f2d>
 800c8fa:	a345      	add	r3, pc, #276	; (adr r3, 800ca10 <SYSSystem5ms+0x990>)
 800c8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c900:	f7f3 fcc2 	bl	8000288 <__aeabi_dsub>
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4610      	mov	r0, r2
 800c90a:	4619      	mov	r1, r3
 800c90c:	f7f4 f96c 	bl	8000be8 <__aeabi_d2f>
 800c910:	4602      	mov	r2, r0
 800c912:	4b49      	ldr	r3, [pc, #292]	; (800ca38 <SYSSystem5ms+0x9b8>)
 800c914:	edd3 7a00 	vldr	s15, [r3]
 800c918:	eef1 7a67 	vneg.f32	s15, s15
 800c91c:	4b3f      	ldr	r3, [pc, #252]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c91e:	ed93 7a00 	vldr	s14, [r3]
 800c922:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800c926:	eeb0 1a47 	vmov.f32	s2, s14
 800c92a:	eef0 0a67 	vmov.f32	s1, s15
 800c92e:	ee00 2a10 	vmov	s0, r2
 800c932:	f000 f9e9 	bl	800cd08 <LineFollow>
 800c936:	e026      	b.n	800c986 <SYSSystem5ms+0x906>
					} else if(fRotateErr != 0.0){
 800c938:	4b37      	ldr	r3, [pc, #220]	; (800ca18 <SYSSystem5ms+0x998>)
 800c93a:	edd3 7a00 	vldr	s15, [r3]
 800c93e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c946:	d00d      	beq.n	800c964 <SYSSystem5ms+0x8e4>
						LineFollow(0.0,0.0,fRotateU,2.0);
 800c948:	4b34      	ldr	r3, [pc, #208]	; (800ca1c <SYSSystem5ms+0x99c>)
 800c94a:	edd3 7a00 	vldr	s15, [r3]
 800c94e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800c952:	eeb0 1a67 	vmov.f32	s2, s15
 800c956:	eddf 0a32 	vldr	s1, [pc, #200]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c95a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c95e:	f000 f9d3 	bl	800cd08 <LineFollow>
 800c962:	e010      	b.n	800c986 <SYSSystem5ms+0x906>
					} else {
						LineFollow(0.0,0.0,0.0,0.0);
 800c964:	eddf 1a2e 	vldr	s3, [pc, #184]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c968:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c96c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c970:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800ca20 <SYSSystem5ms+0x9a0>
 800c974:	f000 f9c8 	bl	800cd08 <LineFollow>
						sys.busy_flag = 0;
 800c978:	4a2a      	ldr	r2, [pc, #168]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c97a:	7813      	ldrb	r3, [r2, #0]
 800c97c:	f36f 0341 	bfc	r3, #1, #1
 800c980:	7013      	strb	r3, [r2, #0]
 800c982:	e000      	b.n	800c986 <SYSSystem5ms+0x906>
					if(Dir == DIR_RIGHT){
 800c984:	bf00      	nop
			}
		}
		//LineFollowEnd//

		//ROBOT ROTATE USING IMU Start - testing //+ve:clkwise,-ve:anti-clkwise,max:+-180
		if (sys.rotate){
 800c986:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c988:	785b      	ldrb	r3, [r3, #1]
 800c98a:	f003 0308 	and.w	r3, r3, #8
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 80aa 	beq.w	800caea <SYSSystem5ms+0xa6a>
			sys.busy_flag = 1;
 800c996:	4a23      	ldr	r2, [pc, #140]	; (800ca24 <SYSSystem5ms+0x9a4>)
 800c998:	7813      	ldrb	r3, [r2, #0]
 800c99a:	f043 0302 	orr.w	r3, r3, #2
 800c99e:	7013      	strb	r3, [r2, #0]

			fAngleErr = (float)(AngleTargetDeg - (int16_t)fyaw);
 800c9a0:	4b28      	ldr	r3, [pc, #160]	; (800ca44 <SYSSystem5ms+0x9c4>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a28      	ldr	r2, [pc, #160]	; (800ca48 <SYSSystem5ms+0x9c8>)
 800c9a6:	edd2 7a00 	vldr	s15, [r2]
 800c9aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9ae:	ee17 2a90 	vmov	r2, s15
 800c9b2:	b212      	sxth	r2, r2
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9be:	4b23      	ldr	r3, [pc, #140]	; (800ca4c <SYSSystem5ms+0x9cc>)
 800c9c0:	edc3 7a00 	vstr	s15, [r3]


			if((int16_t)fAngleErr < -360){
 800c9c4:	4b21      	ldr	r3, [pc, #132]	; (800ca4c <SYSSystem5ms+0x9cc>)
 800c9c6:	edd3 7a00 	vldr	s15, [r3]
 800c9ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9ce:	ee17 3a90 	vmov	r3, s15
 800c9d2:	b21b      	sxth	r3, r3
 800c9d4:	f513 7fb4 	cmn.w	r3, #360	; 0x168
 800c9d8:	da3c      	bge.n	800ca54 <SYSSystem5ms+0x9d4>
				tempyaw = (int16_t)fyaw - 360;
 800c9da:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <SYSSystem5ms+0x9c8>)
 800c9dc:	edd3 7a00 	vldr	s15, [r3]
 800c9e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c9e4:	ee17 3a90 	vmov	r3, s15
 800c9e8:	b21b      	sxth	r3, r3
 800c9ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800c9ee:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <SYSSystem5ms+0x9d0>)
 800c9f0:	6013      	str	r3, [r2, #0]
				fAngleErr = (float)(AngleTargetDeg - tempyaw);
 800c9f2:	4b14      	ldr	r3, [pc, #80]	; (800ca44 <SYSSystem5ms+0x9c4>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	4b16      	ldr	r3, [pc, #88]	; (800ca50 <SYSSystem5ms+0x9d0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	ee07 3a90 	vmov	s15, r3
 800ca00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca04:	4b11      	ldr	r3, [pc, #68]	; (800ca4c <SYSSystem5ms+0x9cc>)
 800ca06:	edc3 7a00 	vstr	s15, [r3]
 800ca0a:	e046      	b.n	800ca9a <SYSSystem5ms+0xa1a>
 800ca0c:	f3af 8000 	nop.w
 800ca10:	9999999a 	.word	0x9999999a
 800ca14:	3fc99999 	.word	0x3fc99999
 800ca18:	20006d9c 	.word	0x20006d9c
 800ca1c:	20007a4c 	.word	0x20007a4c
 800ca20:	00000000 	.word	0x00000000
 800ca24:	20006dac 	.word	0x20006dac
 800ca28:	200079ec 	.word	0x200079ec
 800ca2c:	20007f0c 	.word	0x20007f0c
 800ca30:	20007c20 	.word	0x20007c20
 800ca34:	200078c8 	.word	0x200078c8
 800ca38:	20007f10 	.word	0x20007f10
 800ca3c:	20006628 	.word	0x20006628
 800ca40:	20007f58 	.word	0x20007f58
 800ca44:	20007a50 	.word	0x20007a50
 800ca48:	20007af4 	.word	0x20007af4
 800ca4c:	20007a7c 	.word	0x20007a7c
 800ca50:	20006740 	.word	0x20006740
			}else if((int16_t)fAngleErr > 360){
 800ca54:	4b71      	ldr	r3, [pc, #452]	; (800cc1c <SYSSystem5ms+0xb9c>)
 800ca56:	edd3 7a00 	vldr	s15, [r3]
 800ca5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca5e:	ee17 3a90 	vmov	r3, s15
 800ca62:	b21b      	sxth	r3, r3
 800ca64:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800ca68:	dd17      	ble.n	800ca9a <SYSSystem5ms+0xa1a>
				tempyaw = 360 + (int16_t)fyaw;
 800ca6a:	4b6d      	ldr	r3, [pc, #436]	; (800cc20 <SYSSystem5ms+0xba0>)
 800ca6c:	edd3 7a00 	vldr	s15, [r3]
 800ca70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca74:	ee17 3a90 	vmov	r3, s15
 800ca78:	b21b      	sxth	r3, r3
 800ca7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ca7e:	4a69      	ldr	r2, [pc, #420]	; (800cc24 <SYSSystem5ms+0xba4>)
 800ca80:	6013      	str	r3, [r2, #0]
				fAngleErr = (float)(AngleTargetDeg - tempyaw);
 800ca82:	4b69      	ldr	r3, [pc, #420]	; (800cc28 <SYSSystem5ms+0xba8>)
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	4b67      	ldr	r3, [pc, #412]	; (800cc24 <SYSSystem5ms+0xba4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	ee07 3a90 	vmov	s15, r3
 800ca90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca94:	4b61      	ldr	r3, [pc, #388]	; (800cc1c <SYSSystem5ms+0xb9c>)
 800ca96:	edc3 7a00 	vstr	s15, [r3]
			}

			PID(&imu_rotate);
 800ca9a:	4864      	ldr	r0, [pc, #400]	; (800cc2c <SYSSystem5ms+0xbac>)
 800ca9c:	f7f7 ff7a 	bl	8004994 <PID>

			fFLeftVelR  = fAngleU;
 800caa0:	4b63      	ldr	r3, [pc, #396]	; (800cc30 <SYSSystem5ms+0xbb0>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a63      	ldr	r2, [pc, #396]	; (800cc34 <SYSSystem5ms+0xbb4>)
 800caa6:	6013      	str	r3, [r2, #0]
			fBLeftVelR  = fAngleU;
 800caa8:	4b61      	ldr	r3, [pc, #388]	; (800cc30 <SYSSystem5ms+0xbb0>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a62      	ldr	r2, [pc, #392]	; (800cc38 <SYSSystem5ms+0xbb8>)
 800caae:	6013      	str	r3, [r2, #0]
			fFRightVelR = -fAngleU;
 800cab0:	4b5f      	ldr	r3, [pc, #380]	; (800cc30 <SYSSystem5ms+0xbb0>)
 800cab2:	edd3 7a00 	vldr	s15, [r3]
 800cab6:	eef1 7a67 	vneg.f32	s15, s15
 800caba:	4b60      	ldr	r3, [pc, #384]	; (800cc3c <SYSSystem5ms+0xbbc>)
 800cabc:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelR = -fAngleU;
 800cac0:	4b5b      	ldr	r3, [pc, #364]	; (800cc30 <SYSSystem5ms+0xbb0>)
 800cac2:	edd3 7a00 	vldr	s15, [r3]
 800cac6:	eef1 7a67 	vneg.f32	s15, s15
 800caca:	4b5d      	ldr	r3, [pc, #372]	; (800cc40 <SYSSystem5ms+0xbc0>)
 800cacc:	edc3 7a00 	vstr	s15, [r3]

			if(fAngleErr == 0.0)
 800cad0:	4b52      	ldr	r3, [pc, #328]	; (800cc1c <SYSSystem5ms+0xb9c>)
 800cad2:	edd3 7a00 	vldr	s15, [r3]
 800cad6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cade:	d104      	bne.n	800caea <SYSSystem5ms+0xa6a>
				sys.busy_flag = 0;
 800cae0:	4a58      	ldr	r2, [pc, #352]	; (800cc44 <SYSSystem5ms+0xbc4>)
 800cae2:	7813      	ldrb	r3, [r2, #0]
 800cae4:	f36f 0341 	bfc	r3, #1, #1
 800cae8:	7013      	strb	r3, [r2, #0]
		}

		//ROBOT ROTATE USING IMU End - testing

		//PathPLanningStart//
		if(sys.odnstart_flag && pp.pp_start) {
 800caea:	4b56      	ldr	r3, [pc, #344]	; (800cc44 <SYSSystem5ms+0xbc4>)
 800caec:	785b      	ldrb	r3, [r3, #1]
 800caee:	f003 0310 	and.w	r3, r3, #16
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d037      	beq.n	800cb68 <SYSSystem5ms+0xae8>
 800caf8:	4b53      	ldr	r3, [pc, #332]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cafa:	f893 3530 	ldrb.w	r3, [r3, #1328]	; 0x530
 800cafe:	f003 0301 	and.w	r3, r3, #1
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d02f      	beq.n	800cb68 <SYSSystem5ms+0xae8>

			switch (dev_cfg.base_type){
 800cb08:	4b50      	ldr	r3, [pc, #320]	; (800cc4c <SYSSystem5ms+0xbcc>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d002      	beq.n	800cb16 <SYSSystem5ms+0xa96>
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d014      	beq.n	800cb3e <SYSSystem5ms+0xabe>
				fBLeftVelR  = pp.v3;
				fBRightVelR = pp.v4;
				break;

			default:
				break;
 800cb14:	e029      	b.n	800cb6a <SYSSystem5ms+0xaea>
				fFLeftVelR  = pp.v1;
 800cb16:	4b4c      	ldr	r3, [pc, #304]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb18:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800cb1c:	4a45      	ldr	r2, [pc, #276]	; (800cc34 <SYSSystem5ms+0xbb4>)
 800cb1e:	6013      	str	r3, [r2, #0]
				fBLeftVelR  = pp.v3;
 800cb20:	4b49      	ldr	r3, [pc, #292]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb22:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cb26:	4a44      	ldr	r2, [pc, #272]	; (800cc38 <SYSSystem5ms+0xbb8>)
 800cb28:	6013      	str	r3, [r2, #0]
				fFRightVelR = pp.v2;
 800cb2a:	4b47      	ldr	r3, [pc, #284]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cb30:	4a42      	ldr	r2, [pc, #264]	; (800cc3c <SYSSystem5ms+0xbbc>)
 800cb32:	6013      	str	r3, [r2, #0]
				fBRightVelR = 0.00;
 800cb34:	4b42      	ldr	r3, [pc, #264]	; (800cc40 <SYSSystem5ms+0xbc0>)
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	601a      	str	r2, [r3, #0]
				break;
 800cb3c:	e015      	b.n	800cb6a <SYSSystem5ms+0xaea>
				fFLeftVelR  = pp.v2;
 800cb3e:	4b42      	ldr	r3, [pc, #264]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cb44:	4a3b      	ldr	r2, [pc, #236]	; (800cc34 <SYSSystem5ms+0xbb4>)
 800cb46:	6013      	str	r3, [r2, #0]
				fFRightVelR = pp.v1;
 800cb48:	4b3f      	ldr	r3, [pc, #252]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb4a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800cb4e:	4a3b      	ldr	r2, [pc, #236]	; (800cc3c <SYSSystem5ms+0xbbc>)
 800cb50:	6013      	str	r3, [r2, #0]
				fBLeftVelR  = pp.v3;
 800cb52:	4b3d      	ldr	r3, [pc, #244]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb54:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800cb58:	4a37      	ldr	r2, [pc, #220]	; (800cc38 <SYSSystem5ms+0xbb8>)
 800cb5a:	6013      	str	r3, [r2, #0]
				fBRightVelR = pp.v4;
 800cb5c:	4b3a      	ldr	r3, [pc, #232]	; (800cc48 <SYSSystem5ms+0xbc8>)
 800cb5e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb62:	4a37      	ldr	r2, [pc, #220]	; (800cc40 <SYSSystem5ms+0xbc0>)
 800cb64:	6013      	str	r3, [r2, #0]
				break;
 800cb66:	e000      	b.n	800cb6a <SYSSystem5ms+0xaea>
			}

		}
 800cb68:	bf00      	nop
		}
		//After finish running your task, reset UF.user flag to
		//enable it to go to UserFinish state

		//UserEnd
		if (sys.vel_flag){
 800cb6a:	4b36      	ldr	r3, [pc, #216]	; (800cc44 <SYSSystem5ms+0xbc4>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d04c      	beq.n	800cc12 <SYSSystem5ms+0xb92>
			fFLeftVelErr = fFLeftVelR - fFLeftVel;
 800cb78:	4b2e      	ldr	r3, [pc, #184]	; (800cc34 <SYSSystem5ms+0xbb4>)
 800cb7a:	ed93 7a00 	vldr	s14, [r3]
 800cb7e:	4b34      	ldr	r3, [pc, #208]	; (800cc50 <SYSSystem5ms+0xbd0>)
 800cb80:	edd3 7a00 	vldr	s15, [r3]
 800cb84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb88:	4b32      	ldr	r3, [pc, #200]	; (800cc54 <SYSSystem5ms+0xbd4>)
 800cb8a:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelErr = fBLeftVelR - fBLeftVel;
 800cb8e:	4b2a      	ldr	r3, [pc, #168]	; (800cc38 <SYSSystem5ms+0xbb8>)
 800cb90:	ed93 7a00 	vldr	s14, [r3]
 800cb94:	4b30      	ldr	r3, [pc, #192]	; (800cc58 <SYSSystem5ms+0xbd8>)
 800cb96:	edd3 7a00 	vldr	s15, [r3]
 800cb9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb9e:	4b2f      	ldr	r3, [pc, #188]	; (800cc5c <SYSSystem5ms+0xbdc>)
 800cba0:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelErr = fFRightVelR - fFRightVel;
 800cba4:	4b25      	ldr	r3, [pc, #148]	; (800cc3c <SYSSystem5ms+0xbbc>)
 800cba6:	ed93 7a00 	vldr	s14, [r3]
 800cbaa:	4b2d      	ldr	r3, [pc, #180]	; (800cc60 <SYSSystem5ms+0xbe0>)
 800cbac:	edd3 7a00 	vldr	s15, [r3]
 800cbb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbb4:	4b2b      	ldr	r3, [pc, #172]	; (800cc64 <SYSSystem5ms+0xbe4>)
 800cbb6:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelErr = fBRightVelR - fBRightVel;
 800cbba:	4b21      	ldr	r3, [pc, #132]	; (800cc40 <SYSSystem5ms+0xbc0>)
 800cbbc:	ed93 7a00 	vldr	s14, [r3]
 800cbc0:	4b29      	ldr	r3, [pc, #164]	; (800cc68 <SYSSystem5ms+0xbe8>)
 800cbc2:	edd3 7a00 	vldr	s15, [r3]
 800cbc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbca:	4b28      	ldr	r3, [pc, #160]	; (800cc6c <SYSSystem5ms+0xbec>)
 800cbcc:	edc3 7a00 	vstr	s15, [r3]

			if(dev_cfg.PID_type == fuzzyPID){
 800cbd0:	4b1e      	ldr	r3, [pc, #120]	; (800cc4c <SYSSystem5ms+0xbcc>)
 800cbd2:	789b      	ldrb	r3, [r3, #2]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d10c      	bne.n	800cbf2 <SYSSystem5ms+0xb72>
				FuzzyPID(&fuz_fleft_vel);
 800cbd8:	4825      	ldr	r0, [pc, #148]	; (800cc70 <SYSSystem5ms+0xbf0>)
 800cbda:	f7f6 fe85 	bl	80038e8 <FuzzyPID>
				FuzzyPID(&fuz_bleft_vel);
 800cbde:	4825      	ldr	r0, [pc, #148]	; (800cc74 <SYSSystem5ms+0xbf4>)
 800cbe0:	f7f6 fe82 	bl	80038e8 <FuzzyPID>
				FuzzyPID(&fuz_fright_vel);
 800cbe4:	4824      	ldr	r0, [pc, #144]	; (800cc78 <SYSSystem5ms+0xbf8>)
 800cbe6:	f7f6 fe7f 	bl	80038e8 <FuzzyPID>
				FuzzyPID(&fuz_bright_vel);
 800cbea:	4824      	ldr	r0, [pc, #144]	; (800cc7c <SYSSystem5ms+0xbfc>)
 800cbec:	f7f6 fe7c 	bl	80038e8 <FuzzyPID>
			}

		}
	}

}
 800cbf0:	e00f      	b.n	800cc12 <SYSSystem5ms+0xb92>
			} else if(dev_cfg.PID_type == roboconPID){
 800cbf2:	4b16      	ldr	r3, [pc, #88]	; (800cc4c <SYSSystem5ms+0xbcc>)
 800cbf4:	789b      	ldrb	r3, [r3, #2]
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d10b      	bne.n	800cc12 <SYSSystem5ms+0xb92>
				PID(&fleft_vel);
 800cbfa:	4821      	ldr	r0, [pc, #132]	; (800cc80 <SYSSystem5ms+0xc00>)
 800cbfc:	f7f7 feca 	bl	8004994 <PID>
				PID(&bleft_vel);
 800cc00:	4820      	ldr	r0, [pc, #128]	; (800cc84 <SYSSystem5ms+0xc04>)
 800cc02:	f7f7 fec7 	bl	8004994 <PID>
				PID(&fright_vel);
 800cc06:	4820      	ldr	r0, [pc, #128]	; (800cc88 <SYSSystem5ms+0xc08>)
 800cc08:	f7f7 fec4 	bl	8004994 <PID>
				PID(&bright_vel);
 800cc0c:	481f      	ldr	r0, [pc, #124]	; (800cc8c <SYSSystem5ms+0xc0c>)
 800cc0e:	f7f7 fec1 	bl	8004994 <PID>
}
 800cc12:	bf00      	nop
 800cc14:	46bd      	mov	sp, r7
 800cc16:	ecbd 8b02 	vpop	{d8}
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20007a7c 	.word	0x20007a7c
 800cc20:	20007af4 	.word	0x20007af4
 800cc24:	20006740 	.word	0x20006740
 800cc28:	20007a50 	.word	0x20007a50
 800cc2c:	2000663c 	.word	0x2000663c
 800cc30:	20006748 	.word	0x20006748
 800cc34:	2000682c 	.word	0x2000682c
 800cc38:	20007f60 	.word	0x20007f60
 800cc3c:	20007b8c 	.word	0x20007b8c
 800cc40:	20007b18 	.word	0x20007b18
 800cc44:	20006dac 	.word	0x20006dac
 800cc48:	20006868 	.word	0x20006868
 800cc4c:	20007b1c 	.word	0x20007b1c
 800cc50:	20007ee8 	.word	0x20007ee8
 800cc54:	20006e64 	.word	0x20006e64
 800cc58:	20006e18 	.word	0x20006e18
 800cc5c:	20007da0 	.word	0x20007da0
 800cc60:	20006ef8 	.word	0x20006ef8
 800cc64:	20007380 	.word	0x20007380
 800cc68:	200073f4 	.word	0x200073f4
 800cc6c:	2000669c 	.word	0x2000669c
 800cc70:	20007a80 	.word	0x20007a80
 800cc74:	20007c34 	.word	0x20007c34
 800cc78:	2000794c 	.word	0x2000794c
 800cc7c:	20007e60 	.word	0x20007e60
 800cc80:	20006e8c 	.word	0x20006e8c
 800cc84:	200066e8 	.word	0x200066e8
 800cc88:	20006dc0 	.word	0x20006dc0
 800cc8c:	20007dac 	.word	0x20007dac

0800cc90 <SYSSystemAct>:
void SYSSystemAct(void)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	af00      	add	r7, sp, #0
	WriteBDC(&BDC1,(int32_t)fFLeftVelU);
 800cc94:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <SYSSystemAct+0x58>)
 800cc96:	edd3 7a00 	vldr	s15, [r3]
 800cc9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc9e:	ee17 1a90 	vmov	r1, s15
 800cca2:	4812      	ldr	r0, [pc, #72]	; (800ccec <SYSSystemAct+0x5c>)
 800cca4:	f7f4 fb7c 	bl	80013a0 <WriteBDC>
	WriteBDC(&BDC2,(int32_t)fFRightVelU);
 800cca8:	4b11      	ldr	r3, [pc, #68]	; (800ccf0 <SYSSystemAct+0x60>)
 800ccaa:	edd3 7a00 	vldr	s15, [r3]
 800ccae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccb2:	ee17 1a90 	vmov	r1, s15
 800ccb6:	480f      	ldr	r0, [pc, #60]	; (800ccf4 <SYSSystemAct+0x64>)
 800ccb8:	f7f4 fb72 	bl	80013a0 <WriteBDC>
	WriteBDC(&BDC3,(int32_t)fBLeftVelU);
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <SYSSystemAct+0x68>)
 800ccbe:	edd3 7a00 	vldr	s15, [r3]
 800ccc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccc6:	ee17 1a90 	vmov	r1, s15
 800ccca:	480c      	ldr	r0, [pc, #48]	; (800ccfc <SYSSystemAct+0x6c>)
 800cccc:	f7f4 fb68 	bl	80013a0 <WriteBDC>
	WriteBDC(&BDC4,(int32_t)fBRightVelU);
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <SYSSystemAct+0x70>)
 800ccd2:	edd3 7a00 	vldr	s15, [r3]
 800ccd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccda:	ee17 1a90 	vmov	r1, s15
 800ccde:	4809      	ldr	r0, [pc, #36]	; (800cd04 <SYSSystemAct+0x74>)
 800cce0:	f7f4 fb5e 	bl	80013a0 <WriteBDC>
//	VESCPDC(fFLeftVelU/20000,fFRightVelU/20000,fBLeftVelU/20000,fBRightVelU/20000, &vesc);
}
 800cce4:	bf00      	nop
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20006e88 	.word	0x20006e88
 800ccec:	20007f24 	.word	0x20007f24
 800ccf0:	200066a0 	.word	0x200066a0
 800ccf4:	20006e34 	.word	0x20006e34
 800ccf8:	2000675c 	.word	0x2000675c
 800ccfc:	2000683c 	.word	0x2000683c
 800cd00:	2000662c 	.word	0x2000662c
 800cd04:	200079c0 	.word	0x200079c0

0800cd08 <LineFollow>:

/*********************************************/
/*           Private Function 			     */
/*********************************************/

void LineFollow(float vel, float angle, float rotate_value, float w){
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	ed87 0a03 	vstr	s0, [r7, #12]
 800cd12:	edc7 0a02 	vstr	s1, [r7, #8]
 800cd16:	ed87 1a01 	vstr	s2, [r7, #4]
 800cd1a:	edc7 1a00 	vstr	s3, [r7]

	if(Dir == DIR_LEFT || Dir == DIR_RIGHT){
 800cd1e:	4bbf      	ldr	r3, [pc, #764]	; (800d01c <LineFollow+0x314>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b10      	cmp	r3, #16
 800cd24:	d004      	beq.n	800cd30 <LineFollow+0x28>
 800cd26:	4bbd      	ldr	r3, [pc, #756]	; (800d01c <LineFollow+0x314>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b11      	cmp	r3, #17
 800cd2c:	f040 80e7 	bne.w	800cefe <LineFollow+0x1f6>
		if(dev_cfg.base_type == fwd_omni){
 800cd30:	4bbb      	ldr	r3, [pc, #748]	; (800d020 <LineFollow+0x318>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	f040 8081 	bne.w	800ce3c <LineFollow+0x134>
			fFLeftVelR  =  vel * Cos((int)angle + 45) + rotate_value * w;
 800cd3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd42:	ee17 3a90 	vmov	r3, s15
 800cd46:	332d      	adds	r3, #45	; 0x2d
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd50:	eeb0 0a67 	vmov.f32	s0, s15
 800cd54:	f000 fa10 	bl	800d178 <Cos>
 800cd58:	eeb0 7a40 	vmov.f32	s14, s0
 800cd5c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd64:	edd7 6a01 	vldr	s13, [r7, #4]
 800cd68:	edd7 7a00 	vldr	s15, [r7]
 800cd6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd74:	4bab      	ldr	r3, [pc, #684]	; (800d024 <LineFollow+0x31c>)
 800cd76:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Sin((int)angle - 135) - rotate_value * w;
 800cd7a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cd7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd82:	ee17 3a90 	vmov	r3, s15
 800cd86:	3b87      	subs	r3, #135	; 0x87
 800cd88:	ee07 3a90 	vmov	s15, r3
 800cd8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd90:	eeb0 0a67 	vmov.f32	s0, s15
 800cd94:	f000 f9bc 	bl	800d110 <Sin>
 800cd98:	eeb0 7a40 	vmov.f32	s14, s0
 800cd9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cda0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cda4:	edd7 6a01 	vldr	s13, [r7, #4]
 800cda8:	edd7 7a00 	vldr	s15, [r7]
 800cdac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdb4:	4b9c      	ldr	r3, [pc, #624]	; (800d028 <LineFollow+0x320>)
 800cdb6:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Sin((int)angle - 135) + rotate_value * w;
 800cdba:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdc2:	ee17 3a90 	vmov	r3, s15
 800cdc6:	3b87      	subs	r3, #135	; 0x87
 800cdc8:	ee07 3a90 	vmov	s15, r3
 800cdcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdd0:	eeb0 0a67 	vmov.f32	s0, s15
 800cdd4:	f000 f99c 	bl	800d110 <Sin>
 800cdd8:	eeb0 7a40 	vmov.f32	s14, s0
 800cddc:	edd7 7a03 	vldr	s15, [r7, #12]
 800cde0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cde4:	edd7 6a01 	vldr	s13, [r7, #4]
 800cde8:	edd7 7a00 	vldr	s15, [r7]
 800cdec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdf4:	4b8d      	ldr	r3, [pc, #564]	; (800d02c <LineFollow+0x324>)
 800cdf6:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelR =  vel * Cos((int)angle + 45) - rotate_value * w;
 800cdfa:	edd7 7a02 	vldr	s15, [r7, #8]
 800cdfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce02:	ee17 3a90 	vmov	r3, s15
 800ce06:	332d      	adds	r3, #45	; 0x2d
 800ce08:	ee07 3a90 	vmov	s15, r3
 800ce0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce10:	eeb0 0a67 	vmov.f32	s0, s15
 800ce14:	f000 f9b0 	bl	800d178 <Cos>
 800ce18:	eeb0 7a40 	vmov.f32	s14, s0
 800ce1c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce20:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce24:	edd7 6a01 	vldr	s13, [r7, #4]
 800ce28:	edd7 7a00 	vldr	s15, [r7]
 800ce2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce34:	4b7e      	ldr	r3, [pc, #504]	; (800d030 <LineFollow+0x328>)
 800ce36:	edc3 7a00 	vstr	s15, [r3]
		if(dev_cfg.base_type == fwd_omni){
 800ce3a:	e15b      	b.n	800d0f4 <LineFollow+0x3ec>
		}else if(dev_cfg.base_type == tri_omni){
 800ce3c:	4b78      	ldr	r3, [pc, #480]	; (800d020 <LineFollow+0x318>)
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	f040 8157 	bne.w	800d0f4 <LineFollow+0x3ec>
			fFLeftVelR  =  vel * Cos((int)angle +60) + rotate_value * w;
 800ce46:	edd7 7a02 	vldr	s15, [r7, #8]
 800ce4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce4e:	ee17 3a90 	vmov	r3, s15
 800ce52:	333c      	adds	r3, #60	; 0x3c
 800ce54:	ee07 3a90 	vmov	s15, r3
 800ce58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ce60:	f000 f98a 	bl	800d178 <Cos>
 800ce64:	eeb0 7a40 	vmov.f32	s14, s0
 800ce68:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce70:	edd7 6a01 	vldr	s13, [r7, #4]
 800ce74:	edd7 7a00 	vldr	s15, [r7]
 800ce78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce80:	4b68      	ldr	r3, [pc, #416]	; (800d024 <LineFollow+0x31c>)
 800ce82:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Cos((int)angle +120) - rotate_value * w;
 800ce86:	edd7 7a02 	vldr	s15, [r7, #8]
 800ce8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce8e:	ee17 3a90 	vmov	r3, s15
 800ce92:	3378      	adds	r3, #120	; 0x78
 800ce94:	ee07 3a90 	vmov	s15, r3
 800ce98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce9c:	eeb0 0a67 	vmov.f32	s0, s15
 800cea0:	f000 f96a 	bl	800d178 <Cos>
 800cea4:	eeb0 7a40 	vmov.f32	s14, s0
 800cea8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ceac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceb0:	edd7 6a01 	vldr	s13, [r7, #4]
 800ceb4:	edd7 7a00 	vldr	s15, [r7]
 800ceb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec0:	4b59      	ldr	r3, [pc, #356]	; (800d028 <LineFollow+0x320>)
 800cec2:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Cos((int)angle + 0) - rotate_value * w;
 800cec6:	edd7 7a02 	vldr	s15, [r7, #8]
 800ceca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ced2:	eeb0 0a67 	vmov.f32	s0, s15
 800ced6:	f000 f94f 	bl	800d178 <Cos>
 800ceda:	eeb0 7a40 	vmov.f32	s14, s0
 800cede:	edd7 7a03 	vldr	s15, [r7, #12]
 800cee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cee6:	edd7 6a01 	vldr	s13, [r7, #4]
 800ceea:	edd7 7a00 	vldr	s15, [r7]
 800ceee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cef6:	4b4d      	ldr	r3, [pc, #308]	; (800d02c <LineFollow+0x324>)
 800cef8:	edc3 7a00 	vstr	s15, [r3]
		if(dev_cfg.base_type == fwd_omni){
 800cefc:	e0fa      	b.n	800d0f4 <LineFollow+0x3ec>
		}
	} else if(Dir == DIR_FRONT || Dir == DIR_BACK){
 800cefe:	4b47      	ldr	r3, [pc, #284]	; (800d01c <LineFollow+0x314>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b0e      	cmp	r3, #14
 800cf04:	d004      	beq.n	800cf10 <LineFollow+0x208>
 800cf06:	4b45      	ldr	r3, [pc, #276]	; (800d01c <LineFollow+0x314>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b0f      	cmp	r3, #15
 800cf0c:	f040 80f3 	bne.w	800d0f6 <LineFollow+0x3ee>
		if(dev_cfg.base_type == fwd_omni){
 800cf10:	4b43      	ldr	r3, [pc, #268]	; (800d020 <LineFollow+0x318>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	f040 808d 	bne.w	800d034 <LineFollow+0x32c>
			fFLeftVelR  =  vel * Cos((int)angle - 45) + rotate_value * w;
 800cf1a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf22:	ee17 3a90 	vmov	r3, s15
 800cf26:	3b2d      	subs	r3, #45	; 0x2d
 800cf28:	ee07 3a90 	vmov	s15, r3
 800cf2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf30:	eeb0 0a67 	vmov.f32	s0, s15
 800cf34:	f000 f920 	bl	800d178 <Cos>
 800cf38:	eeb0 7a40 	vmov.f32	s14, s0
 800cf3c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf44:	edd7 6a01 	vldr	s13, [r7, #4]
 800cf48:	edd7 7a00 	vldr	s15, [r7]
 800cf4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf54:	4b33      	ldr	r3, [pc, #204]	; (800d024 <LineFollow+0x31c>)
 800cf56:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Sin((int)angle + 135) - rotate_value * w;
 800cf5a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf62:	ee17 3a90 	vmov	r3, s15
 800cf66:	3387      	adds	r3, #135	; 0x87
 800cf68:	ee07 3a90 	vmov	s15, r3
 800cf6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf70:	eeb0 0a67 	vmov.f32	s0, s15
 800cf74:	f000 f8cc 	bl	800d110 <Sin>
 800cf78:	eeb0 7a40 	vmov.f32	s14, s0
 800cf7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cf80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf84:	edd7 6a01 	vldr	s13, [r7, #4]
 800cf88:	edd7 7a00 	vldr	s15, [r7]
 800cf8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf94:	4b24      	ldr	r3, [pc, #144]	; (800d028 <LineFollow+0x320>)
 800cf96:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Sin((int)angle + 135) + rotate_value * w;
 800cf9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800cf9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfa2:	ee17 3a90 	vmov	r3, s15
 800cfa6:	3387      	adds	r3, #135	; 0x87
 800cfa8:	ee07 3a90 	vmov	s15, r3
 800cfac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfb0:	eeb0 0a67 	vmov.f32	s0, s15
 800cfb4:	f000 f8ac 	bl	800d110 <Sin>
 800cfb8:	eeb0 7a40 	vmov.f32	s14, s0
 800cfbc:	edd7 7a03 	vldr	s15, [r7, #12]
 800cfc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfc4:	edd7 6a01 	vldr	s13, [r7, #4]
 800cfc8:	edd7 7a00 	vldr	s15, [r7]
 800cfcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cfd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfd4:	4b15      	ldr	r3, [pc, #84]	; (800d02c <LineFollow+0x324>)
 800cfd6:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelR =  vel * Cos((int)angle - 45) - rotate_value * w;
 800cfda:	edd7 7a02 	vldr	s15, [r7, #8]
 800cfde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cfe2:	ee17 3a90 	vmov	r3, s15
 800cfe6:	3b2d      	subs	r3, #45	; 0x2d
 800cfe8:	ee07 3a90 	vmov	s15, r3
 800cfec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cff0:	eeb0 0a67 	vmov.f32	s0, s15
 800cff4:	f000 f8c0 	bl	800d178 <Cos>
 800cff8:	eeb0 7a40 	vmov.f32	s14, s0
 800cffc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d000:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d004:	edd7 6a01 	vldr	s13, [r7, #4]
 800d008:	edd7 7a00 	vldr	s15, [r7]
 800d00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d014:	4b06      	ldr	r3, [pc, #24]	; (800d030 <LineFollow+0x328>)
 800d016:	edc3 7a00 	vstr	s15, [r3]
			fFLeftVelR  =  vel * Sin((int)angle +60) + rotate_value * w;
			fFRightVelR =  vel * Sin((int)angle +120) - rotate_value * w;
			fBLeftVelR  =  vel * Sin((int)angle + 0) - rotate_value * w;
		}
	}
}
 800d01a:	e06c      	b.n	800d0f6 <LineFollow+0x3ee>
 800d01c:	200079ec 	.word	0x200079ec
 800d020:	20007b1c 	.word	0x20007b1c
 800d024:	2000682c 	.word	0x2000682c
 800d028:	20007b8c 	.word	0x20007b8c
 800d02c:	20007f60 	.word	0x20007f60
 800d030:	20007b18 	.word	0x20007b18
		} else if(dev_cfg.base_type ==  tri_omni){
 800d034:	4b32      	ldr	r3, [pc, #200]	; (800d100 <LineFollow+0x3f8>)
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d15c      	bne.n	800d0f6 <LineFollow+0x3ee>
			fFLeftVelR  =  vel * Sin((int)angle +60) + rotate_value * w;
 800d03c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d044:	ee17 3a90 	vmov	r3, s15
 800d048:	333c      	adds	r3, #60	; 0x3c
 800d04a:	ee07 3a90 	vmov	s15, r3
 800d04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d052:	eeb0 0a67 	vmov.f32	s0, s15
 800d056:	f000 f85b 	bl	800d110 <Sin>
 800d05a:	eeb0 7a40 	vmov.f32	s14, s0
 800d05e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d062:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d066:	edd7 6a01 	vldr	s13, [r7, #4]
 800d06a:	edd7 7a00 	vldr	s15, [r7]
 800d06e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d072:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d076:	4b23      	ldr	r3, [pc, #140]	; (800d104 <LineFollow+0x3fc>)
 800d078:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Sin((int)angle +120) - rotate_value * w;
 800d07c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d084:	ee17 3a90 	vmov	r3, s15
 800d088:	3378      	adds	r3, #120	; 0x78
 800d08a:	ee07 3a90 	vmov	s15, r3
 800d08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d092:	eeb0 0a67 	vmov.f32	s0, s15
 800d096:	f000 f83b 	bl	800d110 <Sin>
 800d09a:	eeb0 7a40 	vmov.f32	s14, s0
 800d09e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0a6:	edd7 6a01 	vldr	s13, [r7, #4]
 800d0aa:	edd7 7a00 	vldr	s15, [r7]
 800d0ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0b6:	4b14      	ldr	r3, [pc, #80]	; (800d108 <LineFollow+0x400>)
 800d0b8:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Sin((int)angle + 0) - rotate_value * w;
 800d0bc:	edd7 7a02 	vldr	s15, [r7, #8]
 800d0c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0c8:	eeb0 0a67 	vmov.f32	s0, s15
 800d0cc:	f000 f820 	bl	800d110 <Sin>
 800d0d0:	eeb0 7a40 	vmov.f32	s14, s0
 800d0d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0dc:	edd7 6a01 	vldr	s13, [r7, #4]
 800d0e0:	edd7 7a00 	vldr	s15, [r7]
 800d0e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ec:	4b07      	ldr	r3, [pc, #28]	; (800d10c <LineFollow+0x404>)
 800d0ee:	edc3 7a00 	vstr	s15, [r3]
}
 800d0f2:	e000      	b.n	800d0f6 <LineFollow+0x3ee>
		if(dev_cfg.base_type == fwd_omni){
 800d0f4:	bf00      	nop
}
 800d0f6:	bf00      	nop
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20007b1c 	.word	0x20007b1c
 800d104:	2000682c 	.word	0x2000682c
 800d108:	20007b8c 	.word	0x20007b8c
 800d10c:	20007f60 	.word	0x20007f60

0800d110 <Sin>:

float Sin(float angle){
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	ed87 0a01 	vstr	s0, [r7, #4]
	float pi, sin;
	pi = angle * 3.141592654 / 180;
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7f3 fa14 	bl	8000548 <__aeabi_f2d>
 800d120:	a312      	add	r3, pc, #72	; (adr r3, 800d16c <Sin+0x5c>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 fa67 	bl	80005f8 <__aeabi_dmul>
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	4610      	mov	r0, r2
 800d130:	4619      	mov	r1, r3
 800d132:	f04f 0200 	mov.w	r2, #0
 800d136:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <Sin+0x58>)
 800d138:	f7f3 fb88 	bl	800084c <__aeabi_ddiv>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	4610      	mov	r0, r2
 800d142:	4619      	mov	r1, r3
 800d144:	f7f3 fd50 	bl	8000be8 <__aeabi_d2f>
 800d148:	4603      	mov	r3, r0
 800d14a:	60fb      	str	r3, [r7, #12]
	sin=sinf(pi);
 800d14c:	ed97 0a03 	vldr	s0, [r7, #12]
 800d150:	f00e f95a 	bl	801b408 <sinf>
 800d154:	ed87 0a02 	vstr	s0, [r7, #8]
	return sin;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	ee07 3a90 	vmov	s15, r3
}
 800d15e:	eeb0 0a67 	vmov.f32	s0, s15
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	40668000 	.word	0x40668000
 800d16c:	54524550 	.word	0x54524550
 800d170:	400921fb 	.word	0x400921fb
 800d174:	00000000 	.word	0x00000000

0800d178 <Cos>:

float Cos(float angle){
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	ed87 0a01 	vstr	s0, [r7, #4]
	float pi, cos;
	pi = angle * 3.141592654 / 180;
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7f3 f9e0 	bl	8000548 <__aeabi_f2d>
 800d188:	a312      	add	r3, pc, #72	; (adr r3, 800d1d4 <Cos+0x5c>)
 800d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18e:	f7f3 fa33 	bl	80005f8 <__aeabi_dmul>
 800d192:	4602      	mov	r2, r0
 800d194:	460b      	mov	r3, r1
 800d196:	4610      	mov	r0, r2
 800d198:	4619      	mov	r1, r3
 800d19a:	f04f 0200 	mov.w	r2, #0
 800d19e:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <Cos+0x58>)
 800d1a0:	f7f3 fb54 	bl	800084c <__aeabi_ddiv>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f7f3 fd1c 	bl	8000be8 <__aeabi_d2f>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	60fb      	str	r3, [r7, #12]
	cos = cosf(pi);
 800d1b4:	ed97 0a03 	vldr	s0, [r7, #12]
 800d1b8:	f00e f8de 	bl	801b378 <cosf>
 800d1bc:	ed87 0a02 	vstr	s0, [r7, #8]
	return cos;
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	ee07 3a90 	vmov	s15, r3
}
 800d1c6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	40668000 	.word	0x40668000
 800d1d4:	54524550 	.word	0x54524550
 800d1d8:	400921fb 	.word	0x400921fb

0800d1dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d1e0:	4b08      	ldr	r3, [pc, #32]	; (800d204 <SystemInit+0x28>)
 800d1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1e6:	4a07      	ldr	r2, [pc, #28]	; (800d204 <SystemInit+0x28>)
 800d1e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d1ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d1f0:	4b04      	ldr	r3, [pc, #16]	; (800d204 <SystemInit+0x28>)
 800d1f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d1f6:	609a      	str	r2, [r3, #8]
#endif
}
 800d1f8:	bf00      	nop
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	e000ed00 	.word	0xe000ed00

0800d208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d208:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800d20c:	480d      	ldr	r0, [pc, #52]	; (800d244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800d20e:	490e      	ldr	r1, [pc, #56]	; (800d248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800d210:	4a0e      	ldr	r2, [pc, #56]	; (800d24c <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d214:	e002      	b.n	800d21c <LoopCopyDataInit>

0800d216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d21a:	3304      	adds	r3, #4

0800d21c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d21c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d21e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d220:	d3f9      	bcc.n	800d216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d222:	4a0b      	ldr	r2, [pc, #44]	; (800d250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800d224:	4c0b      	ldr	r4, [pc, #44]	; (800d254 <LoopFillZerobss+0x26>)
  movs r3, #0
 800d226:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d228:	e001      	b.n	800d22e <LoopFillZerobss>

0800d22a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d22a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d22c:	3204      	adds	r2, #4

0800d22e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d22e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d230:	d3fb      	bcc.n	800d22a <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d232:	f7ff ffd3 	bl	800d1dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d236:	f008 ff3f 	bl	80160b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d23a:	f7f7 f8ad 	bl	8004398 <main>
  bx  lr    
 800d23e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d248:	20000450 	.word	0x20000450
  ldr r2, =_sidata
 800d24c:	0801d38c 	.word	0x0801d38c
  ldr r2, =_sbss
 800d250:	20000450 	.word	0x20000450
  ldr r4, =_ebss
 800d254:	20008148 	.word	0x20008148

0800d258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d258:	e7fe      	b.n	800d258 <ADC_IRQHandler>
	...

0800d25c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d260:	4b0e      	ldr	r3, [pc, #56]	; (800d29c <HAL_Init+0x40>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a0d      	ldr	r2, [pc, #52]	; (800d29c <HAL_Init+0x40>)
 800d266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d26a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d26c:	4b0b      	ldr	r3, [pc, #44]	; (800d29c <HAL_Init+0x40>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <HAL_Init+0x40>)
 800d272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d278:	4b08      	ldr	r3, [pc, #32]	; (800d29c <HAL_Init+0x40>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a07      	ldr	r2, [pc, #28]	; (800d29c <HAL_Init+0x40>)
 800d27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d284:	2003      	movs	r0, #3
 800d286:	f000 ff84 	bl	800e192 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d28a:	2000      	movs	r0, #0
 800d28c:	f7fe fa32 	bl	800b6f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d290:	f7f5 f90c 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	40023c00 	.word	0x40023c00

0800d2a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d2a4:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <HAL_IncTick+0x20>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <HAL_IncTick+0x24>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	4a04      	ldr	r2, [pc, #16]	; (800d2c4 <HAL_IncTick+0x24>)
 800d2b2:	6013      	str	r3, [r2, #0]
}
 800d2b4:	bf00      	nop
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	20000270 	.word	0x20000270
 800d2c4:	200080f4 	.word	0x200080f4

0800d2c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0
  return uwTick;
 800d2cc:	4b03      	ldr	r3, [pc, #12]	; (800d2dc <HAL_GetTick+0x14>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	200080f4 	.word	0x200080f4

0800d2e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e0ed      	b.n	800d4ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d102      	bne.n	800d304 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7f5 f900 	bl	8002504 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f022 0202 	bic.w	r2, r2, #2
 800d312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d314:	f7ff ffd8 	bl	800d2c8 <HAL_GetTick>
 800d318:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800d31a:	e012      	b.n	800d342 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d31c:	f7ff ffd4 	bl	800d2c8 <HAL_GetTick>
 800d320:	4602      	mov	r2, r0
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	2b0a      	cmp	r3, #10
 800d328:	d90b      	bls.n	800d342 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2205      	movs	r2, #5
 800d33a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e0c5      	b.n	800d4ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	f003 0302 	and.w	r3, r3, #2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e5      	bne.n	800d31c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f042 0201 	orr.w	r2, r2, #1
 800d35e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d360:	f7ff ffb2 	bl	800d2c8 <HAL_GetTick>
 800d364:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d366:	e012      	b.n	800d38e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d368:	f7ff ffae 	bl	800d2c8 <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	2b0a      	cmp	r3, #10
 800d374:	d90b      	bls.n	800d38e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2205      	movs	r2, #5
 800d386:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e09f      	b.n	800d4ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	f003 0301 	and.w	r3, r3, #1
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d0e5      	beq.n	800d368 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7e1b      	ldrb	r3, [r3, #24]
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d108      	bne.n	800d3b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	e007      	b.n	800d3c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d3c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	7e5b      	ldrb	r3, [r3, #25]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d108      	bne.n	800d3e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	e007      	b.n	800d3f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7e9b      	ldrb	r3, [r3, #26]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d108      	bne.n	800d40a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f042 0220 	orr.w	r2, r2, #32
 800d406:	601a      	str	r2, [r3, #0]
 800d408:	e007      	b.n	800d41a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f022 0220 	bic.w	r2, r2, #32
 800d418:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	7edb      	ldrb	r3, [r3, #27]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d108      	bne.n	800d434 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f022 0210 	bic.w	r2, r2, #16
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e007      	b.n	800d444 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f042 0210 	orr.w	r2, r2, #16
 800d442:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	7f1b      	ldrb	r3, [r3, #28]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d108      	bne.n	800d45e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f042 0208 	orr.w	r2, r2, #8
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	e007      	b.n	800d46e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f022 0208 	bic.w	r2, r2, #8
 800d46c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7f5b      	ldrb	r3, [r3, #29]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d108      	bne.n	800d488 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f042 0204 	orr.w	r2, r2, #4
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	e007      	b.n	800d498 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f022 0204 	bic.w	r2, r2, #4
 800d496:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	431a      	orrs	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	ea42 0103 	orr.w	r1, r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	1e5a      	subs	r2, r3, #1
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
	...

0800d4d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800d4f0:	7cfb      	ldrb	r3, [r7, #19]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d003      	beq.n	800d4fe <HAL_CAN_ConfigFilter+0x26>
 800d4f6:	7cfb      	ldrb	r3, [r7, #19]
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	f040 80be 	bne.w	800d67a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800d4fe:	4b65      	ldr	r3, [pc, #404]	; (800d694 <HAL_CAN_ConfigFilter+0x1bc>)
 800d500:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d508:	f043 0201 	orr.w	r2, r3, #1
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d518:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	021b      	lsls	r3, r3, #8
 800d52e:	431a      	orrs	r2, r3
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	f003 031f 	and.w	r3, r3, #31
 800d53e:	2201      	movs	r2, #1
 800d540:	fa02 f303 	lsl.w	r3, r2, r3
 800d544:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	43db      	mvns	r3, r3
 800d550:	401a      	ands	r2, r3
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	69db      	ldr	r3, [r3, #28]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d123      	bne.n	800d5a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	43db      	mvns	r3, r3
 800d56a:	401a      	ands	r2, r3
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d582:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	3248      	adds	r2, #72	; 0x48
 800d588:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d59c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d59e:	6979      	ldr	r1, [r7, #20]
 800d5a0:	3348      	adds	r3, #72	; 0x48
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	69db      	ldr	r3, [r3, #28]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d122      	bne.n	800d5f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	431a      	orrs	r2, r3
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d5d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	3248      	adds	r2, #72	; 0x48
 800d5d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d5ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d5ec:	6979      	ldr	r1, [r7, #20]
 800d5ee:	3348      	adds	r3, #72	; 0x48
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	440b      	add	r3, r1
 800d5f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d109      	bne.n	800d612 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	43db      	mvns	r3, r3
 800d608:	401a      	ands	r2, r3
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800d610:	e007      	b.n	800d622 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	431a      	orrs	r2, r3
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d109      	bne.n	800d63e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	43db      	mvns	r3, r3
 800d634:	401a      	ands	r2, r3
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800d63c:	e007      	b.n	800d64e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	431a      	orrs	r2, r3
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d107      	bne.n	800d666 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	431a      	orrs	r2, r3
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800d66c:	f023 0201 	bic.w	r2, r3, #1
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	e006      	b.n	800d688 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
  }
}
 800d688:	4618      	mov	r0, r3
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	40006400 	.word	0x40006400

0800d698 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d12e      	bne.n	800d70a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f022 0201 	bic.w	r2, r2, #1
 800d6c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d6c4:	f7ff fe00 	bl	800d2c8 <HAL_GetTick>
 800d6c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d6ca:	e012      	b.n	800d6f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d6cc:	f7ff fdfc 	bl	800d2c8 <HAL_GetTick>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	2b0a      	cmp	r3, #10
 800d6d8:	d90b      	bls.n	800d6f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2205      	movs	r2, #5
 800d6ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e012      	b.n	800d718 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f003 0301 	and.w	r3, r3, #1
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e5      	bne.n	800d6cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	e006      	b.n	800d718 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
  }
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800d720:	b480      	push	{r7}
 800d722:	b089      	sub	sp, #36	; 0x24
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d734:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800d73e:	7ffb      	ldrb	r3, [r7, #31]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d003      	beq.n	800d74c <HAL_CAN_AddTxMessage+0x2c>
 800d744:	7ffb      	ldrb	r3, [r7, #31]
 800d746:	2b02      	cmp	r3, #2
 800d748:	f040 80b8 	bne.w	800d8bc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10a      	bne.n	800d76c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80a0 	beq.w	800d8ac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	0e1b      	lsrs	r3, r3, #24
 800d770:	f003 0303 	and.w	r3, r3, #3
 800d774:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d907      	bls.n	800d78c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d788:	2301      	movs	r3, #1
 800d78a:	e09e      	b.n	800d8ca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800d78c:	2201      	movs	r2, #1
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	409a      	lsls	r2, r3
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10d      	bne.n	800d7ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d7a8:	68f9      	ldr	r1, [r7, #12]
 800d7aa:	6809      	ldr	r1, [r1, #0]
 800d7ac:	431a      	orrs	r2, r3
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	3318      	adds	r3, #24
 800d7b2:	011b      	lsls	r3, r3, #4
 800d7b4:	440b      	add	r3, r1
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	e00f      	b.n	800d7da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d7c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d7ca:	68f9      	ldr	r1, [r7, #12]
 800d7cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d7ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	3318      	adds	r3, #24
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	440b      	add	r3, r1
 800d7d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6819      	ldr	r1, [r3, #0]
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	691a      	ldr	r2, [r3, #16]
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	3318      	adds	r3, #24
 800d7e6:	011b      	lsls	r3, r3, #4
 800d7e8:	440b      	add	r3, r1
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	7d1b      	ldrb	r3, [r3, #20]
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d111      	bne.n	800d81a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	3318      	adds	r3, #24
 800d7fe:	011b      	lsls	r3, r3, #4
 800d800:	4413      	add	r3, r2
 800d802:	3304      	adds	r3, #4
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	6811      	ldr	r1, [r2, #0]
 800d80a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	3318      	adds	r3, #24
 800d812:	011b      	lsls	r3, r3, #4
 800d814:	440b      	add	r3, r1
 800d816:	3304      	adds	r3, #4
 800d818:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	3307      	adds	r3, #7
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	061a      	lsls	r2, r3, #24
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3306      	adds	r3, #6
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	041b      	lsls	r3, r3, #16
 800d82a:	431a      	orrs	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3305      	adds	r3, #5
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	021b      	lsls	r3, r3, #8
 800d834:	4313      	orrs	r3, r2
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	3204      	adds	r2, #4
 800d83a:	7812      	ldrb	r2, [r2, #0]
 800d83c:	4610      	mov	r0, r2
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	6811      	ldr	r1, [r2, #0]
 800d842:	ea43 0200 	orr.w	r2, r3, r0
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	440b      	add	r3, r1
 800d84c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800d850:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3303      	adds	r3, #3
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	061a      	lsls	r2, r3, #24
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3302      	adds	r3, #2
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	041b      	lsls	r3, r3, #16
 800d862:	431a      	orrs	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3301      	adds	r3, #1
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	4313      	orrs	r3, r2
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	7812      	ldrb	r2, [r2, #0]
 800d872:	4610      	mov	r0, r2
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	6811      	ldr	r1, [r2, #0]
 800d878:	ea43 0200 	orr.w	r2, r3, r0
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	011b      	lsls	r3, r3, #4
 800d880:	440b      	add	r3, r1
 800d882:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800d886:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	3318      	adds	r3, #24
 800d890:	011b      	lsls	r3, r3, #4
 800d892:	4413      	add	r3, r2
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	6811      	ldr	r1, [r2, #0]
 800d89a:	f043 0201 	orr.w	r2, r3, #1
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	3318      	adds	r3, #24
 800d8a2:	011b      	lsls	r3, r3, #4
 800d8a4:	440b      	add	r3, r1
 800d8a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	e00e      	b.n	800d8ca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e006      	b.n	800d8ca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
  }
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3724      	adds	r7, #36	; 0x24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b085      	sub	sp, #20
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d8e8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800d8ea:	7afb      	ldrb	r3, [r7, #11]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d002      	beq.n	800d8f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800d8f0:	7afb      	ldrb	r3, [r7, #11]
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d11d      	bne.n	800d932 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	3301      	adds	r3, #1
 800d908:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3301      	adds	r3, #1
 800d91c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	3301      	adds	r3, #1
 800d930:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800d932:	68fb      	ldr	r3, [r7, #12]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d940:	b480      	push	{r7}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d954:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d003      	beq.n	800d964 <HAL_CAN_GetRxMessage+0x24>
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
 800d95e:	2b02      	cmp	r3, #2
 800d960:	f040 80f3 	bne.w	800db4a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10e      	bne.n	800d988 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	f003 0303 	and.w	r3, r3, #3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d116      	bne.n	800d9a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	e0e7      	b.n	800db58 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	f003 0303 	and.w	r3, r3, #3
 800d992:	2b00      	cmp	r3, #0
 800d994:	d107      	bne.n	800d9a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d99a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e0d8      	b.n	800db58 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	331b      	adds	r3, #27
 800d9ae:	011b      	lsls	r3, r3, #4
 800d9b0:	4413      	add	r3, r2
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0204 	and.w	r2, r3, #4
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10c      	bne.n	800d9de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	331b      	adds	r3, #27
 800d9cc:	011b      	lsls	r3, r3, #4
 800d9ce:	4413      	add	r3, r2
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	0d5b      	lsrs	r3, r3, #21
 800d9d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	e00b      	b.n	800d9f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	331b      	adds	r3, #27
 800d9e6:	011b      	lsls	r3, r3, #4
 800d9e8:	4413      	add	r3, r2
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	08db      	lsrs	r3, r3, #3
 800d9ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	331b      	adds	r3, #27
 800d9fe:	011b      	lsls	r3, r3, #4
 800da00:	4413      	add	r3, r2
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 0202 	and.w	r2, r3, #2
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	331b      	adds	r3, #27
 800da14:	011b      	lsls	r3, r3, #4
 800da16:	4413      	add	r3, r2
 800da18:	3304      	adds	r3, #4
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 020f 	and.w	r2, r3, #15
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	331b      	adds	r3, #27
 800da2c:	011b      	lsls	r3, r3, #4
 800da2e:	4413      	add	r3, r2
 800da30:	3304      	adds	r3, #4
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	0a1b      	lsrs	r3, r3, #8
 800da36:	b2da      	uxtb	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	331b      	adds	r3, #27
 800da44:	011b      	lsls	r3, r3, #4
 800da46:	4413      	add	r3, r2
 800da48:	3304      	adds	r3, #4
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	0c1b      	lsrs	r3, r3, #16
 800da4e:	b29a      	uxth	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	011b      	lsls	r3, r3, #4
 800da5c:	4413      	add	r3, r2
 800da5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	b2da      	uxtb	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	011b      	lsls	r3, r3, #4
 800da72:	4413      	add	r3, r2
 800da74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	0a1a      	lsrs	r2, r3, #8
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	3301      	adds	r3, #1
 800da80:	b2d2      	uxtb	r2, r2
 800da82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	011b      	lsls	r3, r3, #4
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	0c1a      	lsrs	r2, r3, #16
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	3302      	adds	r3, #2
 800da9a:	b2d2      	uxtb	r2, r2
 800da9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	011b      	lsls	r3, r3, #4
 800daa6:	4413      	add	r3, r2
 800daa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	0e1a      	lsrs	r2, r3, #24
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	3303      	adds	r3, #3
 800dab4:	b2d2      	uxtb	r2, r2
 800dab6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	011b      	lsls	r3, r3, #4
 800dac0:	4413      	add	r3, r2
 800dac2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	3304      	adds	r3, #4
 800dacc:	b2d2      	uxtb	r2, r2
 800dace:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	011b      	lsls	r3, r3, #4
 800dad8:	4413      	add	r3, r2
 800dada:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	0a1a      	lsrs	r2, r3, #8
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	3305      	adds	r3, #5
 800dae6:	b2d2      	uxtb	r2, r2
 800dae8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	011b      	lsls	r3, r3, #4
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	0c1a      	lsrs	r2, r3, #16
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	3306      	adds	r3, #6
 800db00:	b2d2      	uxtb	r2, r2
 800db02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	011b      	lsls	r3, r3, #4
 800db0c:	4413      	add	r3, r2
 800db0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	0e1a      	lsrs	r2, r3, #24
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	3307      	adds	r3, #7
 800db1a:	b2d2      	uxtb	r2, r2
 800db1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d108      	bne.n	800db36 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68da      	ldr	r2, [r3, #12]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f042 0220 	orr.w	r2, r2, #32
 800db32:	60da      	str	r2, [r3, #12]
 800db34:	e007      	b.n	800db46 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	691a      	ldr	r2, [r3, #16]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f042 0220 	orr.w	r2, r2, #32
 800db44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	e006      	b.n	800db58 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
  }
}
 800db58:	4618      	mov	r0, r3
 800db5a:	371c      	adds	r7, #28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800db76:	7bfb      	ldrb	r3, [r7, #15]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d002      	beq.n	800db82 <HAL_CAN_ActivateNotification+0x1e>
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d109      	bne.n	800db96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	6959      	ldr	r1, [r3, #20]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	e006      	b.n	800dba4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
  }
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b08a      	sub	sp, #40	; 0x28
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d07c      	beq.n	800dcf0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d023      	beq.n	800dc48 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2201      	movs	r2, #1
 800dc06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f983 	bl	800df1e <HAL_CAN_TxMailbox0CompleteCallback>
 800dc18:	e016      	b.n	800dc48 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	f003 0304 	and.w	r3, r3, #4
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc2c:	e00c      	b.n	800dc48 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	f003 0308 	and.w	r3, r3, #8
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d004      	beq.n	800dc42 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc3e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc40:	e002      	b.n	800dc48 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f989 	bl	800df5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d024      	beq.n	800dc9c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d003      	beq.n	800dc6e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f963 	bl	800df32 <HAL_CAN_TxMailbox1CompleteCallback>
 800dc6c:	e016      	b.n	800dc9c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d004      	beq.n	800dc82 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dc7e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc80:	e00c      	b.n	800dc9c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d004      	beq.n	800dc96 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dc92:	627b      	str	r3, [r7, #36]	; 0x24
 800dc94:	e002      	b.n	800dc9c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 f969 	bl	800df6e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d024      	beq.n	800dcf0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800dcae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d003      	beq.n	800dcc2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f943 	bl	800df46 <HAL_CAN_TxMailbox2CompleteCallback>
 800dcc0:	e016      	b.n	800dcf0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d004      	beq.n	800dcd6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcd4:	e00c      	b.n	800dcf0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d004      	beq.n	800dcea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dce6:	627b      	str	r3, [r7, #36]	; 0x24
 800dce8:	e002      	b.n	800dcf0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f949 	bl	800df82 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	f003 0308 	and.w	r3, r3, #8
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00c      	beq.n	800dd14 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f003 0310 	and.w	r3, r3, #16
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d007      	beq.n	800dd14 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2210      	movs	r2, #16
 800dd12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800dd14:	6a3b      	ldr	r3, [r7, #32]
 800dd16:	f003 0304 	and.w	r3, r3, #4
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00b      	beq.n	800dd36 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f003 0308 	and.w	r3, r3, #8
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d006      	beq.n	800dd36 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2208      	movs	r2, #8
 800dd2e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f930 	bl	800df96 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	f003 0302 	and.w	r3, r3, #2
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d009      	beq.n	800dd54 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	f003 0303 	and.w	r3, r3, #3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7fc fc00 	bl	800a554 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00c      	beq.n	800dd78 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	f003 0310 	and.w	r3, r3, #16
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d007      	beq.n	800dd78 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2210      	movs	r2, #16
 800dd76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	f003 0320 	and.w	r3, r3, #32
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00b      	beq.n	800dd9a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	f003 0308 	and.w	r3, r3, #8
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d006      	beq.n	800dd9a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2208      	movs	r2, #8
 800dd92:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f908 	bl	800dfaa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	f003 0310 	and.w	r3, r3, #16
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d009      	beq.n	800ddb8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	f003 0303 	and.w	r3, r3, #3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7fc fcbe 	bl	800a734 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00b      	beq.n	800ddda <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	f003 0310 	and.w	r3, r3, #16
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d006      	beq.n	800ddda <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2210      	movs	r2, #16
 800ddd2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f8f2 	bl	800dfbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f003 0308 	and.w	r3, r3, #8
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d006      	beq.n	800ddfc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2208      	movs	r2, #8
 800ddf4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f8eb 	bl	800dfd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d07b      	beq.n	800defe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	f003 0304 	and.w	r3, r3, #4
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d072      	beq.n	800def6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800de10:	6a3b      	ldr	r3, [r7, #32]
 800de12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de16:	2b00      	cmp	r3, #0
 800de18:	d008      	beq.n	800de2c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800de20:	2b00      	cmp	r3, #0
 800de22:	d003      	beq.n	800de2c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	f043 0301 	orr.w	r3, r3, #1
 800de2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de32:	2b00      	cmp	r3, #0
 800de34:	d008      	beq.n	800de48 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d003      	beq.n	800de48 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	f043 0302 	orr.w	r3, r3, #2
 800de46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d008      	beq.n	800de64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d003      	beq.n	800de64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5e:	f043 0304 	orr.w	r3, r3, #4
 800de62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d043      	beq.n	800def6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800de74:	2b00      	cmp	r3, #0
 800de76:	d03e      	beq.n	800def6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800de7e:	2b60      	cmp	r3, #96	; 0x60
 800de80:	d02b      	beq.n	800deda <HAL_CAN_IRQHandler+0x32a>
 800de82:	2b60      	cmp	r3, #96	; 0x60
 800de84:	d82e      	bhi.n	800dee4 <HAL_CAN_IRQHandler+0x334>
 800de86:	2b50      	cmp	r3, #80	; 0x50
 800de88:	d022      	beq.n	800ded0 <HAL_CAN_IRQHandler+0x320>
 800de8a:	2b50      	cmp	r3, #80	; 0x50
 800de8c:	d82a      	bhi.n	800dee4 <HAL_CAN_IRQHandler+0x334>
 800de8e:	2b40      	cmp	r3, #64	; 0x40
 800de90:	d019      	beq.n	800dec6 <HAL_CAN_IRQHandler+0x316>
 800de92:	2b40      	cmp	r3, #64	; 0x40
 800de94:	d826      	bhi.n	800dee4 <HAL_CAN_IRQHandler+0x334>
 800de96:	2b30      	cmp	r3, #48	; 0x30
 800de98:	d010      	beq.n	800debc <HAL_CAN_IRQHandler+0x30c>
 800de9a:	2b30      	cmp	r3, #48	; 0x30
 800de9c:	d822      	bhi.n	800dee4 <HAL_CAN_IRQHandler+0x334>
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d002      	beq.n	800dea8 <HAL_CAN_IRQHandler+0x2f8>
 800dea2:	2b20      	cmp	r3, #32
 800dea4:	d005      	beq.n	800deb2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800dea6:	e01d      	b.n	800dee4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deaa:	f043 0308 	orr.w	r3, r3, #8
 800deae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800deb0:	e019      	b.n	800dee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb4:	f043 0310 	orr.w	r3, r3, #16
 800deb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800deba:	e014      	b.n	800dee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	f043 0320 	orr.w	r3, r3, #32
 800dec2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800dec4:	e00f      	b.n	800dee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800decc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800dece:	e00a      	b.n	800dee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800ded8:	e005      	b.n	800dee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dedc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dee0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800dee2:	e000      	b.n	800dee6 <HAL_CAN_IRQHandler+0x336>
            break;
 800dee4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	699a      	ldr	r2, [r3, #24]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800def4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2204      	movs	r2, #4
 800defc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d008      	beq.n	800df16 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	431a      	orrs	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 f868 	bl	800dfe6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800df16:	bf00      	nop
 800df18:	3728      	adds	r7, #40	; 0x28
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800df1e:	b480      	push	{r7}
 800df20:	b083      	sub	sp, #12
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800df26:	bf00      	nop
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800df3a:	bf00      	nop
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800df4e:	bf00      	nop
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800df5a:	b480      	push	{r7}
 800df5c:	b083      	sub	sp, #12
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800df62:	bf00      	nop
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800df6e:	b480      	push	{r7}
 800df70:	b083      	sub	sp, #12
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800df76:	bf00      	nop
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800df82:	b480      	push	{r7}
 800df84:	b083      	sub	sp, #12
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800df8a:	bf00      	nop
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800df96:	b480      	push	{r7}
 800df98:	b083      	sub	sp, #12
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800df9e:	bf00      	nop
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800dfb2:	bf00      	nop
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b083      	sub	sp, #12
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800dfc6:	bf00      	nop
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800dfd2:	b480      	push	{r7}
 800dfd4:	b083      	sub	sp, #12
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800dfda:	bf00      	nop
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b083      	sub	sp, #12
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800dfee:	bf00      	nop
 800dff0:	370c      	adds	r7, #12
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
	...

0800dffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f003 0307 	and.w	r3, r3, #7
 800e00a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e00c:	4b0c      	ldr	r3, [pc, #48]	; (800e040 <__NVIC_SetPriorityGrouping+0x44>)
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e018:	4013      	ands	r3, r2
 800e01a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e02c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e02e:	4a04      	ldr	r2, [pc, #16]	; (800e040 <__NVIC_SetPriorityGrouping+0x44>)
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	60d3      	str	r3, [r2, #12]
}
 800e034:	bf00      	nop
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	e000ed00 	.word	0xe000ed00

0800e044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e044:	b480      	push	{r7}
 800e046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e048:	4b04      	ldr	r3, [pc, #16]	; (800e05c <__NVIC_GetPriorityGrouping+0x18>)
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	0a1b      	lsrs	r3, r3, #8
 800e04e:	f003 0307 	and.w	r3, r3, #7
}
 800e052:	4618      	mov	r0, r3
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	e000ed00 	.word	0xe000ed00

0800e060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	4603      	mov	r3, r0
 800e068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	db0b      	blt.n	800e08a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e072:	79fb      	ldrb	r3, [r7, #7]
 800e074:	f003 021f 	and.w	r2, r3, #31
 800e078:	4907      	ldr	r1, [pc, #28]	; (800e098 <__NVIC_EnableIRQ+0x38>)
 800e07a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e07e:	095b      	lsrs	r3, r3, #5
 800e080:	2001      	movs	r0, #1
 800e082:	fa00 f202 	lsl.w	r2, r0, r2
 800e086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e08a:	bf00      	nop
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	e000e100 	.word	0xe000e100

0800e09c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	db0c      	blt.n	800e0c8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	f003 021f 	and.w	r2, r3, #31
 800e0b4:	4907      	ldr	r1, [pc, #28]	; (800e0d4 <__NVIC_ClearPendingIRQ+0x38>)
 800e0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0ba:	095b      	lsrs	r3, r3, #5
 800e0bc:	2001      	movs	r0, #1
 800e0be:	fa00 f202 	lsl.w	r2, r0, r2
 800e0c2:	3360      	adds	r3, #96	; 0x60
 800e0c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	e000e100 	.word	0xe000e100

0800e0d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	4603      	mov	r3, r0
 800e0e0:	6039      	str	r1, [r7, #0]
 800e0e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	db0a      	blt.n	800e102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	490c      	ldr	r1, [pc, #48]	; (800e124 <__NVIC_SetPriority+0x4c>)
 800e0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0f6:	0112      	lsls	r2, r2, #4
 800e0f8:	b2d2      	uxtb	r2, r2
 800e0fa:	440b      	add	r3, r1
 800e0fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e100:	e00a      	b.n	800e118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	b2da      	uxtb	r2, r3
 800e106:	4908      	ldr	r1, [pc, #32]	; (800e128 <__NVIC_SetPriority+0x50>)
 800e108:	79fb      	ldrb	r3, [r7, #7]
 800e10a:	f003 030f 	and.w	r3, r3, #15
 800e10e:	3b04      	subs	r3, #4
 800e110:	0112      	lsls	r2, r2, #4
 800e112:	b2d2      	uxtb	r2, r2
 800e114:	440b      	add	r3, r1
 800e116:	761a      	strb	r2, [r3, #24]
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	e000e100 	.word	0xe000e100
 800e128:	e000ed00 	.word	0xe000ed00

0800e12c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b089      	sub	sp, #36	; 0x24
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f003 0307 	and.w	r3, r3, #7
 800e13e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	f1c3 0307 	rsb	r3, r3, #7
 800e146:	2b04      	cmp	r3, #4
 800e148:	bf28      	it	cs
 800e14a:	2304      	movcs	r3, #4
 800e14c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	3304      	adds	r3, #4
 800e152:	2b06      	cmp	r3, #6
 800e154:	d902      	bls.n	800e15c <NVIC_EncodePriority+0x30>
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	3b03      	subs	r3, #3
 800e15a:	e000      	b.n	800e15e <NVIC_EncodePriority+0x32>
 800e15c:	2300      	movs	r3, #0
 800e15e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e160:	f04f 32ff 	mov.w	r2, #4294967295
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	fa02 f303 	lsl.w	r3, r2, r3
 800e16a:	43da      	mvns	r2, r3
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	401a      	ands	r2, r3
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e174:	f04f 31ff 	mov.w	r1, #4294967295
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	fa01 f303 	lsl.w	r3, r1, r3
 800e17e:	43d9      	mvns	r1, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e184:	4313      	orrs	r3, r2
         );
}
 800e186:	4618      	mov	r0, r3
 800e188:	3724      	adds	r7, #36	; 0x24
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b082      	sub	sp, #8
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7ff ff2e 	bl	800dffc <__NVIC_SetPriorityGrouping>
}
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
 800e1b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e1ba:	f7ff ff43 	bl	800e044 <__NVIC_GetPriorityGrouping>
 800e1be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	68b9      	ldr	r1, [r7, #8]
 800e1c4:	6978      	ldr	r0, [r7, #20]
 800e1c6:	f7ff ffb1 	bl	800e12c <NVIC_EncodePriority>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff ff80 	bl	800e0d8 <__NVIC_SetPriority>
}
 800e1d8:	bf00      	nop
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e1ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff ff36 	bl	800e060 <__NVIC_EnableIRQ>
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800e206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7ff ff46 	bl	800e09c <__NVIC_ClearPendingIRQ>
}
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d004      	beq.n	800e236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2280      	movs	r2, #128	; 0x80
 800e230:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e00c      	b.n	800e250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2205      	movs	r2, #5
 800e23a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f022 0201 	bic.w	r2, r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b086      	sub	sp, #24
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e264:	2300      	movs	r3, #0
 800e266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e268:	4b92      	ldr	r3, [pc, #584]	; (800e4b4 <HAL_DMA_IRQHandler+0x258>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a92      	ldr	r2, [pc, #584]	; (800e4b8 <HAL_DMA_IRQHandler+0x25c>)
 800e26e:	fba2 2303 	umull	r2, r3, r2, r3
 800e272:	0a9b      	lsrs	r3, r3, #10
 800e274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e27a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e286:	2208      	movs	r2, #8
 800e288:	409a      	lsls	r2, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	4013      	ands	r3, r2
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d01a      	beq.n	800e2c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d013      	beq.n	800e2c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f022 0204 	bic.w	r2, r2, #4
 800e2ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2b4:	2208      	movs	r2, #8
 800e2b6:	409a      	lsls	r2, r3
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c0:	f043 0201 	orr.w	r2, r3, #1
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	409a      	lsls	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d012      	beq.n	800e2fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00b      	beq.n	800e2fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	409a      	lsls	r2, r3
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f6:	f043 0202 	orr.w	r2, r3, #2
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e302:	2204      	movs	r2, #4
 800e304:	409a      	lsls	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	4013      	ands	r3, r2
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d012      	beq.n	800e334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f003 0302 	and.w	r3, r3, #2
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e320:	2204      	movs	r2, #4
 800e322:	409a      	lsls	r2, r3
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e32c:	f043 0204 	orr.w	r2, r3, #4
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e338:	2210      	movs	r2, #16
 800e33a:	409a      	lsls	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	4013      	ands	r3, r2
 800e340:	2b00      	cmp	r3, #0
 800e342:	d043      	beq.n	800e3cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0308 	and.w	r3, r3, #8
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d03c      	beq.n	800e3cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e356:	2210      	movs	r2, #16
 800e358:	409a      	lsls	r2, r3
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d018      	beq.n	800e39e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e376:	2b00      	cmp	r3, #0
 800e378:	d108      	bne.n	800e38c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d024      	beq.n	800e3cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	4798      	blx	r3
 800e38a:	e01f      	b.n	800e3cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e390:	2b00      	cmp	r3, #0
 800e392:	d01b      	beq.n	800e3cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	4798      	blx	r3
 800e39c:	e016      	b.n	800e3cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d107      	bne.n	800e3bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f022 0208 	bic.w	r2, r2, #8
 800e3ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d0:	2220      	movs	r2, #32
 800e3d2:	409a      	lsls	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 808e 	beq.w	800e4fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0310 	and.w	r3, r3, #16
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f000 8086 	beq.w	800e4fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3f2:	2220      	movs	r2, #32
 800e3f4:	409a      	lsls	r2, r3
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2b05      	cmp	r3, #5
 800e404:	d136      	bne.n	800e474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f022 0216 	bic.w	r2, r2, #22
 800e414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	695a      	ldr	r2, [r3, #20]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d103      	bne.n	800e436 <HAL_DMA_IRQHandler+0x1da>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e432:	2b00      	cmp	r3, #0
 800e434:	d007      	beq.n	800e446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f022 0208 	bic.w	r2, r2, #8
 800e444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e44a:	223f      	movs	r2, #63	; 0x3f
 800e44c:	409a      	lsls	r2, r3
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e466:	2b00      	cmp	r3, #0
 800e468:	d07d      	beq.n	800e566 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	4798      	blx	r3
        }
        return;
 800e472:	e078      	b.n	800e566 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d01c      	beq.n	800e4bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d108      	bne.n	800e4a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e494:	2b00      	cmp	r3, #0
 800e496:	d030      	beq.n	800e4fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	4798      	blx	r3
 800e4a0:	e02b      	b.n	800e4fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d027      	beq.n	800e4fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	4798      	blx	r3
 800e4b2:	e022      	b.n	800e4fa <HAL_DMA_IRQHandler+0x29e>
 800e4b4:	20000268 	.word	0x20000268
 800e4b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10f      	bne.n	800e4ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f022 0210 	bic.w	r2, r2, #16
 800e4d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d032      	beq.n	800e568 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d022      	beq.n	800e554 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2205      	movs	r2, #5
 800e512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f022 0201 	bic.w	r2, r2, #1
 800e524:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	3301      	adds	r3, #1
 800e52a:	60bb      	str	r3, [r7, #8]
 800e52c:	697a      	ldr	r2, [r7, #20]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d307      	bcc.n	800e542 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f003 0301 	and.w	r3, r3, #1
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f2      	bne.n	800e526 <HAL_DMA_IRQHandler+0x2ca>
 800e540:	e000      	b.n	800e544 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800e542:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d005      	beq.n	800e568 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	4798      	blx	r3
 800e564:	e000      	b.n	800e568 <HAL_DMA_IRQHandler+0x30c>
        return;
 800e566:	bf00      	nop
    }
  }
}
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop

0800e570 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e57e:	b2db      	uxtb	r3, r3
}
 800e580:	4618      	mov	r0, r3
 800e582:	370c      	adds	r7, #12
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b089      	sub	sp, #36	; 0x24
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e596:	2300      	movs	r3, #0
 800e598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e59a:	2300      	movs	r3, #0
 800e59c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	61fb      	str	r3, [r7, #28]
 800e5a6:	e16b      	b.n	800e880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	69fb      	ldr	r3, [r7, #28]
 800e5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	f040 815a 	bne.w	800e87a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d00b      	beq.n	800e5e6 <HAL_GPIO_Init+0x5a>
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d007      	beq.n	800e5e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e5da:	2b11      	cmp	r3, #17
 800e5dc:	d003      	beq.n	800e5e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	2b12      	cmp	r3, #18
 800e5e4:	d130      	bne.n	800e648 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	005b      	lsls	r3, r3, #1
 800e5f0:	2203      	movs	r2, #3
 800e5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5f6:	43db      	mvns	r3, r3
 800e5f8:	69ba      	ldr	r2, [r7, #24]
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	68da      	ldr	r2, [r3, #12]
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	fa02 f303 	lsl.w	r3, r2, r3
 800e60a:	69ba      	ldr	r2, [r7, #24]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	69ba      	ldr	r2, [r7, #24]
 800e614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e61c:	2201      	movs	r2, #1
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	fa02 f303 	lsl.w	r3, r2, r3
 800e624:	43db      	mvns	r3, r3
 800e626:	69ba      	ldr	r2, [r7, #24]
 800e628:	4013      	ands	r3, r2
 800e62a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	091b      	lsrs	r3, r3, #4
 800e632:	f003 0201 	and.w	r2, r3, #1
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	fa02 f303 	lsl.w	r3, r2, r3
 800e63c:	69ba      	ldr	r2, [r7, #24]
 800e63e:	4313      	orrs	r3, r2
 800e640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	69ba      	ldr	r2, [r7, #24]
 800e646:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	2203      	movs	r2, #3
 800e654:	fa02 f303 	lsl.w	r3, r2, r3
 800e658:	43db      	mvns	r3, r3
 800e65a:	69ba      	ldr	r2, [r7, #24]
 800e65c:	4013      	ands	r3, r2
 800e65e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	689a      	ldr	r2, [r3, #8]
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	fa02 f303 	lsl.w	r3, r2, r3
 800e66c:	69ba      	ldr	r2, [r7, #24]
 800e66e:	4313      	orrs	r3, r2
 800e670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	69ba      	ldr	r2, [r7, #24]
 800e676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d003      	beq.n	800e688 <HAL_GPIO_Init+0xfc>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	2b12      	cmp	r3, #18
 800e686:	d123      	bne.n	800e6d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	08da      	lsrs	r2, r3, #3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3208      	adds	r2, #8
 800e690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	f003 0307 	and.w	r3, r3, #7
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	220f      	movs	r2, #15
 800e6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a4:	43db      	mvns	r3, r3
 800e6a6:	69ba      	ldr	r2, [r7, #24]
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	691a      	ldr	r2, [r3, #16]
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	f003 0307 	and.w	r3, r3, #7
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6bc:	69ba      	ldr	r2, [r7, #24]
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	08da      	lsrs	r2, r3, #3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3208      	adds	r2, #8
 800e6ca:	69b9      	ldr	r1, [r7, #24]
 800e6cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	005b      	lsls	r3, r3, #1
 800e6da:	2203      	movs	r2, #3
 800e6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e0:	43db      	mvns	r3, r3
 800e6e2:	69ba      	ldr	r2, [r7, #24]
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	f003 0203 	and.w	r2, r3, #3
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	005b      	lsls	r3, r3, #1
 800e6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6f8:	69ba      	ldr	r2, [r7, #24]
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f000 80b4 	beq.w	800e87a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e712:	2300      	movs	r3, #0
 800e714:	60fb      	str	r3, [r7, #12]
 800e716:	4b60      	ldr	r3, [pc, #384]	; (800e898 <HAL_GPIO_Init+0x30c>)
 800e718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e71a:	4a5f      	ldr	r2, [pc, #380]	; (800e898 <HAL_GPIO_Init+0x30c>)
 800e71c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e720:	6453      	str	r3, [r2, #68]	; 0x44
 800e722:	4b5d      	ldr	r3, [pc, #372]	; (800e898 <HAL_GPIO_Init+0x30c>)
 800e724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e72e:	4a5b      	ldr	r2, [pc, #364]	; (800e89c <HAL_GPIO_Init+0x310>)
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	089b      	lsrs	r3, r3, #2
 800e734:	3302      	adds	r3, #2
 800e736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e73a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	f003 0303 	and.w	r3, r3, #3
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	220f      	movs	r2, #15
 800e746:	fa02 f303 	lsl.w	r3, r2, r3
 800e74a:	43db      	mvns	r3, r3
 800e74c:	69ba      	ldr	r2, [r7, #24]
 800e74e:	4013      	ands	r3, r2
 800e750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a52      	ldr	r2, [pc, #328]	; (800e8a0 <HAL_GPIO_Init+0x314>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d02b      	beq.n	800e7b2 <HAL_GPIO_Init+0x226>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4a51      	ldr	r2, [pc, #324]	; (800e8a4 <HAL_GPIO_Init+0x318>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d025      	beq.n	800e7ae <HAL_GPIO_Init+0x222>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4a50      	ldr	r2, [pc, #320]	; (800e8a8 <HAL_GPIO_Init+0x31c>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d01f      	beq.n	800e7aa <HAL_GPIO_Init+0x21e>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a4f      	ldr	r2, [pc, #316]	; (800e8ac <HAL_GPIO_Init+0x320>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d019      	beq.n	800e7a6 <HAL_GPIO_Init+0x21a>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a4e      	ldr	r2, [pc, #312]	; (800e8b0 <HAL_GPIO_Init+0x324>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d013      	beq.n	800e7a2 <HAL_GPIO_Init+0x216>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a4d      	ldr	r2, [pc, #308]	; (800e8b4 <HAL_GPIO_Init+0x328>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d00d      	beq.n	800e79e <HAL_GPIO_Init+0x212>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4a4c      	ldr	r2, [pc, #304]	; (800e8b8 <HAL_GPIO_Init+0x32c>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d007      	beq.n	800e79a <HAL_GPIO_Init+0x20e>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a4b      	ldr	r2, [pc, #300]	; (800e8bc <HAL_GPIO_Init+0x330>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d101      	bne.n	800e796 <HAL_GPIO_Init+0x20a>
 800e792:	2307      	movs	r3, #7
 800e794:	e00e      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e796:	2308      	movs	r3, #8
 800e798:	e00c      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e79a:	2306      	movs	r3, #6
 800e79c:	e00a      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e79e:	2305      	movs	r3, #5
 800e7a0:	e008      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e7a2:	2304      	movs	r3, #4
 800e7a4:	e006      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e004      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	e002      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e000      	b.n	800e7b4 <HAL_GPIO_Init+0x228>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	69fa      	ldr	r2, [r7, #28]
 800e7b6:	f002 0203 	and.w	r2, r2, #3
 800e7ba:	0092      	lsls	r2, r2, #2
 800e7bc:	4093      	lsls	r3, r2
 800e7be:	69ba      	ldr	r2, [r7, #24]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e7c4:	4935      	ldr	r1, [pc, #212]	; (800e89c <HAL_GPIO_Init+0x310>)
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	089b      	lsrs	r3, r3, #2
 800e7ca:	3302      	adds	r3, #2
 800e7cc:	69ba      	ldr	r2, [r7, #24]
 800e7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e7d2:	4b3b      	ldr	r3, [pc, #236]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	43db      	mvns	r3, r3
 800e7dc:	69ba      	ldr	r2, [r7, #24]
 800e7de:	4013      	ands	r3, r2
 800e7e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d003      	beq.n	800e7f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800e7ee:	69ba      	ldr	r2, [r7, #24]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e7f6:	4a32      	ldr	r2, [pc, #200]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800e7fc:	4b30      	ldr	r3, [pc, #192]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	43db      	mvns	r3, r3
 800e806:	69ba      	ldr	r2, [r7, #24]
 800e808:	4013      	ands	r3, r2
 800e80a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d003      	beq.n	800e820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800e818:	69ba      	ldr	r2, [r7, #24]
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e820:	4a27      	ldr	r2, [pc, #156]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e826:	4b26      	ldr	r3, [pc, #152]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	43db      	mvns	r3, r3
 800e830:	69ba      	ldr	r2, [r7, #24]
 800e832:	4013      	ands	r3, r2
 800e834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d003      	beq.n	800e84a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800e842:	69ba      	ldr	r2, [r7, #24]
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	4313      	orrs	r3, r2
 800e848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e84a:	4a1d      	ldr	r2, [pc, #116]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e850:	4b1b      	ldr	r3, [pc, #108]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	43db      	mvns	r3, r3
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	4013      	ands	r3, r2
 800e85e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d003      	beq.n	800e874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800e86c:	69ba      	ldr	r2, [r7, #24]
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	4313      	orrs	r3, r2
 800e872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e874:	4a12      	ldr	r2, [pc, #72]	; (800e8c0 <HAL_GPIO_Init+0x334>)
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	3301      	adds	r3, #1
 800e87e:	61fb      	str	r3, [r7, #28]
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	2b0f      	cmp	r3, #15
 800e884:	f67f ae90 	bls.w	800e5a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e888:	bf00      	nop
 800e88a:	bf00      	nop
 800e88c:	3724      	adds	r7, #36	; 0x24
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	40023800 	.word	0x40023800
 800e89c:	40013800 	.word	0x40013800
 800e8a0:	40020000 	.word	0x40020000
 800e8a4:	40020400 	.word	0x40020400
 800e8a8:	40020800 	.word	0x40020800
 800e8ac:	40020c00 	.word	0x40020c00
 800e8b0:	40021000 	.word	0x40021000
 800e8b4:	40021400 	.word	0x40021400
 800e8b8:	40021800 	.word	0x40021800
 800e8bc:	40021c00 	.word	0x40021c00
 800e8c0:	40013c00 	.word	0x40013c00

0800e8c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	691a      	ldr	r2, [r3, #16]
 800e8d4:	887b      	ldrh	r3, [r7, #2]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d002      	beq.n	800e8e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	73fb      	strb	r3, [r7, #15]
 800e8e0:	e001      	b.n	800e8e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	807b      	strh	r3, [r7, #2]
 800e900:	4613      	mov	r3, r2
 800e902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e904:	787b      	ldrb	r3, [r7, #1]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e90a:	887a      	ldrh	r2, [r7, #2]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e910:	e003      	b.n	800e91a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e912:	887b      	ldrh	r3, [r7, #2]
 800e914:	041a      	lsls	r2, r3, #16
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	619a      	str	r2, [r3, #24]
}
 800e91a:	bf00      	nop
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b088      	sub	sp, #32
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800e92e:	2300      	movs	r3, #0
 800e930:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e946:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e94e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800e950:	7bfb      	ldrb	r3, [r7, #15]
 800e952:	2b10      	cmp	r3, #16
 800e954:	d003      	beq.n	800e95e <HAL_I2C_EV_IRQHandler+0x38>
 800e956:	7bfb      	ldrb	r3, [r7, #15]
 800e958:	2b40      	cmp	r3, #64	; 0x40
 800e95a:	f040 80bd 	bne.w	800ead8 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	695b      	ldr	r3, [r3, #20]
 800e96c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	f003 0301 	and.w	r3, r3, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10d      	bne.n	800e994 <HAL_I2C_EV_IRQHandler+0x6e>
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e97e:	d003      	beq.n	800e988 <HAL_I2C_EV_IRQHandler+0x62>
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e986:	d101      	bne.n	800e98c <HAL_I2C_EV_IRQHandler+0x66>
 800e988:	2301      	movs	r3, #1
 800e98a:	e000      	b.n	800e98e <HAL_I2C_EV_IRQHandler+0x68>
 800e98c:	2300      	movs	r3, #0
 800e98e:	2b01      	cmp	r3, #1
 800e990:	f000 812e 	beq.w	800ebf0 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	f003 0301 	and.w	r3, r3, #1
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00c      	beq.n	800e9b8 <HAL_I2C_EV_IRQHandler+0x92>
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	0a5b      	lsrs	r3, r3, #9
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d006      	beq.n	800e9b8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f001 fc54 	bl	8010258 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 fd62 	bl	800f47a <I2C_Master_SB>
 800e9b6:	e08e      	b.n	800ead6 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	08db      	lsrs	r3, r3, #3
 800e9bc:	f003 0301 	and.w	r3, r3, #1
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <HAL_I2C_EV_IRQHandler+0xb2>
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	0a5b      	lsrs	r3, r3, #9
 800e9c8:	f003 0301 	and.w	r3, r3, #1
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d003      	beq.n	800e9d8 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 fdd8 	bl	800f586 <I2C_Master_ADD10>
 800e9d6:	e07e      	b.n	800ead6 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	085b      	lsrs	r3, r3, #1
 800e9dc:	f003 0301 	and.w	r3, r3, #1
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <HAL_I2C_EV_IRQHandler+0xd2>
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	0a5b      	lsrs	r3, r3, #9
 800e9e8:	f003 0301 	and.w	r3, r3, #1
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d003      	beq.n	800e9f8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 fdf2 	bl	800f5da <I2C_Master_ADDR>
 800e9f6:	e06e      	b.n	800ead6 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	089b      	lsrs	r3, r3, #2
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d037      	beq.n	800ea74 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea12:	f000 80ef 	beq.w	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	09db      	lsrs	r3, r3, #7
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00f      	beq.n	800ea42 <HAL_I2C_EV_IRQHandler+0x11c>
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	0a9b      	lsrs	r3, r3, #10
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d009      	beq.n	800ea42 <HAL_I2C_EV_IRQHandler+0x11c>
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	089b      	lsrs	r3, r3, #2
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d103      	bne.n	800ea42 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f9ef 	bl	800ee1e <I2C_MasterTransmit_TXE>
 800ea40:	e049      	b.n	800ead6 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	089b      	lsrs	r3, r3, #2
 800ea46:	f003 0301 	and.w	r3, r3, #1
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f000 80d2 	beq.w	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	0a5b      	lsrs	r3, r3, #9
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 80cb 	beq.w	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
 800ea60:	2b10      	cmp	r3, #16
 800ea62:	d103      	bne.n	800ea6c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 fa76 	bl	800ef56 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea6a:	e0c3      	b.n	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f000 fada 	bl	800f026 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea72:	e0bf      	b.n	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea82:	f000 80b7 	beq.w	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	099b      	lsrs	r3, r3, #6
 800ea8a:	f003 0301 	and.w	r3, r3, #1
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00f      	beq.n	800eab2 <HAL_I2C_EV_IRQHandler+0x18c>
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	0a9b      	lsrs	r3, r3, #10
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d009      	beq.n	800eab2 <HAL_I2C_EV_IRQHandler+0x18c>
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	089b      	lsrs	r3, r3, #2
 800eaa2:	f003 0301 	and.w	r3, r3, #1
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d103      	bne.n	800eab2 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fb4a 	bl	800f144 <I2C_MasterReceive_RXNE>
 800eab0:	e011      	b.n	800ead6 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	089b      	lsrs	r3, r3, #2
 800eab6:	f003 0301 	and.w	r3, r3, #1
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 809a 	beq.w	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	0a5b      	lsrs	r3, r3, #9
 800eac4:	f003 0301 	and.w	r3, r3, #1
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f000 8093 	beq.w	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 fbe9 	bl	800f2a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ead4:	e08e      	b.n	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
 800ead6:	e08d      	b.n	800ebf4 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d004      	beq.n	800eaea <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	695b      	ldr	r3, [r3, #20]
 800eae6:	61fb      	str	r3, [r7, #28]
 800eae8:	e007      	b.n	800eafa <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	085b      	lsrs	r3, r3, #1
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d012      	beq.n	800eb2c <HAL_I2C_EV_IRQHandler+0x206>
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	0a5b      	lsrs	r3, r3, #9
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00c      	beq.n	800eb2c <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d003      	beq.n	800eb22 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	699b      	ldr	r3, [r3, #24]
 800eb20:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800eb22:	69b9      	ldr	r1, [r7, #24]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 ffa7 	bl	800fa78 <I2C_Slave_ADDR>
 800eb2a:	e066      	b.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	091b      	lsrs	r3, r3, #4
 800eb30:	f003 0301 	and.w	r3, r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d009      	beq.n	800eb4c <HAL_I2C_EV_IRQHandler+0x226>
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	0a5b      	lsrs	r3, r3, #9
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 ffdb 	bl	800fb00 <I2C_Slave_STOPF>
 800eb4a:	e056      	b.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800eb4c:	7bbb      	ldrb	r3, [r7, #14]
 800eb4e:	2b21      	cmp	r3, #33	; 0x21
 800eb50:	d002      	beq.n	800eb58 <HAL_I2C_EV_IRQHandler+0x232>
 800eb52:	7bbb      	ldrb	r3, [r7, #14]
 800eb54:	2b29      	cmp	r3, #41	; 0x29
 800eb56:	d125      	bne.n	800eba4 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	09db      	lsrs	r3, r3, #7
 800eb5c:	f003 0301 	and.w	r3, r3, #1
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00f      	beq.n	800eb84 <HAL_I2C_EV_IRQHandler+0x25e>
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	0a9b      	lsrs	r3, r3, #10
 800eb68:	f003 0301 	and.w	r3, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d009      	beq.n	800eb84 <HAL_I2C_EV_IRQHandler+0x25e>
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	089b      	lsrs	r3, r3, #2
 800eb74:	f003 0301 	and.w	r3, r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d103      	bne.n	800eb84 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 febd 	bl	800f8fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eb82:	e039      	b.n	800ebf8 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	089b      	lsrs	r3, r3, #2
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d033      	beq.n	800ebf8 <HAL_I2C_EV_IRQHandler+0x2d2>
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	0a5b      	lsrs	r3, r3, #9
 800eb94:	f003 0301 	and.w	r3, r3, #1
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d02d      	beq.n	800ebf8 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 feea 	bl	800f976 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eba2:	e029      	b.n	800ebf8 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	099b      	lsrs	r3, r3, #6
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00f      	beq.n	800ebd0 <HAL_I2C_EV_IRQHandler+0x2aa>
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	0a9b      	lsrs	r3, r3, #10
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d009      	beq.n	800ebd0 <HAL_I2C_EV_IRQHandler+0x2aa>
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	089b      	lsrs	r3, r3, #2
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d103      	bne.n	800ebd0 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 fef5 	bl	800f9b8 <I2C_SlaveReceive_RXNE>
 800ebce:	e014      	b.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ebd0:	69fb      	ldr	r3, [r7, #28]
 800ebd2:	089b      	lsrs	r3, r3, #2
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00e      	beq.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	0a5b      	lsrs	r3, r3, #9
 800ebe0:	f003 0301 	and.w	r3, r3, #1
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d008      	beq.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 ff23 	bl	800fa34 <I2C_SlaveReceive_BTF>
 800ebee:	e004      	b.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800ebf0:	bf00      	nop
 800ebf2:	e002      	b.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ebf4:	bf00      	nop
 800ebf6:	e000      	b.n	800ebfa <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ebf8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800ebfa:	3720      	adds	r7, #32
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08a      	sub	sp, #40	; 0x28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec22:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	0a1b      	lsrs	r3, r3, #8
 800ec28:	f003 0301 	and.w	r3, r3, #1
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00e      	beq.n	800ec4e <HAL_I2C_ER_IRQHandler+0x4e>
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	0a1b      	lsrs	r3, r3, #8
 800ec34:	f003 0301 	and.w	r3, r3, #1
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d008      	beq.n	800ec4e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3e:	f043 0301 	orr.w	r3, r3, #1
 800ec42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec4c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ec4e:	6a3b      	ldr	r3, [r7, #32]
 800ec50:	0a5b      	lsrs	r3, r3, #9
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00e      	beq.n	800ec78 <HAL_I2C_ER_IRQHandler+0x78>
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	0a1b      	lsrs	r3, r3, #8
 800ec5e:	f003 0301 	and.w	r3, r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d008      	beq.n	800ec78 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ec66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec68:	f043 0302 	orr.w	r3, r3, #2
 800ec6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800ec76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	0a9b      	lsrs	r3, r3, #10
 800ec7c:	f003 0301 	and.w	r3, r3, #1
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d03f      	beq.n	800ed04 <HAL_I2C_ER_IRQHandler+0x104>
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	0a1b      	lsrs	r3, r3, #8
 800ec88:	f003 0301 	and.w	r3, r3, #1
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d039      	beq.n	800ed04 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800ec90:	7efb      	ldrb	r3, [r7, #27]
 800ec92:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eca2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ecaa:	7ebb      	ldrb	r3, [r7, #26]
 800ecac:	2b20      	cmp	r3, #32
 800ecae:	d112      	bne.n	800ecd6 <HAL_I2C_ER_IRQHandler+0xd6>
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10f      	bne.n	800ecd6 <HAL_I2C_ER_IRQHandler+0xd6>
 800ecb6:	7cfb      	ldrb	r3, [r7, #19]
 800ecb8:	2b21      	cmp	r3, #33	; 0x21
 800ecba:	d008      	beq.n	800ecce <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800ecbc:	7cfb      	ldrb	r3, [r7, #19]
 800ecbe:	2b29      	cmp	r3, #41	; 0x29
 800ecc0:	d005      	beq.n	800ecce <HAL_I2C_ER_IRQHandler+0xce>
 800ecc2:	7cfb      	ldrb	r3, [r7, #19]
 800ecc4:	2b28      	cmp	r3, #40	; 0x28
 800ecc6:	d106      	bne.n	800ecd6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2b21      	cmp	r3, #33	; 0x21
 800eccc:	d103      	bne.n	800ecd6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f001 f846 	bl	800fd60 <I2C_Slave_AF>
 800ecd4:	e016      	b.n	800ed04 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ecde:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	f043 0304 	orr.w	r3, r3, #4
 800ece6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ece8:	7efb      	ldrb	r3, [r7, #27]
 800ecea:	2b10      	cmp	r3, #16
 800ecec:	d002      	beq.n	800ecf4 <HAL_I2C_ER_IRQHandler+0xf4>
 800ecee:	7efb      	ldrb	r3, [r7, #27]
 800ecf0:	2b40      	cmp	r3, #64	; 0x40
 800ecf2:	d107      	bne.n	800ed04 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed02:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ed04:	6a3b      	ldr	r3, [r7, #32]
 800ed06:	0adb      	lsrs	r3, r3, #11
 800ed08:	f003 0301 	and.w	r3, r3, #1
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00e      	beq.n	800ed2e <HAL_I2C_ER_IRQHandler+0x12e>
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	0a1b      	lsrs	r3, r3, #8
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d008      	beq.n	800ed2e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800ed1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1e:	f043 0308 	orr.w	r3, r3, #8
 800ed22:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800ed2c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d008      	beq.n	800ed46 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3a:	431a      	orrs	r2, r3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f001 f87d 	bl	800fe40 <I2C_ITError>
  }
}
 800ed46:	bf00      	nop
 800ed48:	3728      	adds	r7, #40	; 0x28
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed4e:	b480      	push	{r7}
 800ed50:	b083      	sub	sp, #12
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ed56:	bf00      	nop
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed62:	b480      	push	{r7}
 800ed64:	b083      	sub	sp, #12
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ed6a:	bf00      	nop
 800ed6c:	370c      	adds	r7, #12
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr

0800ed76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b083      	sub	sp, #12
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ed7e:	bf00      	nop
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ed92:	bf00      	nop
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b083      	sub	sp, #12
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	460b      	mov	r3, r1
 800eda8:	70fb      	strb	r3, [r7, #3]
 800edaa:	4613      	mov	r3, r2
 800edac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800edae:	bf00      	nop
 800edb0:	370c      	adds	r7, #12
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edba:	b480      	push	{r7}
 800edbc:	b083      	sub	sp, #12
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800edc2:	bf00      	nop
 800edc4:	370c      	adds	r7, #12
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr

0800edce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800edce:	b480      	push	{r7}
 800edd0:	b083      	sub	sp, #12
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800edd6:	bf00      	nop
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ede2:	b480      	push	{r7}
 800ede4:	b083      	sub	sp, #12
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800edea:	bf00      	nop
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ee12:	bf00      	nop
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr

0800ee1e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b084      	sub	sp, #16
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee34:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d150      	bne.n	800eee6 <I2C_MasterTransmit_TXE+0xc8>
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
 800ee46:	2b21      	cmp	r3, #33	; 0x21
 800ee48:	d14d      	bne.n	800eee6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	2b08      	cmp	r3, #8
 800ee4e:	d01d      	beq.n	800ee8c <I2C_MasterTransmit_TXE+0x6e>
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b20      	cmp	r3, #32
 800ee54:	d01a      	beq.n	800ee8c <I2C_MasterTransmit_TXE+0x6e>
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ee5c:	d016      	beq.n	800ee8c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	685a      	ldr	r2, [r3, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee6c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2211      	movs	r2, #17
 800ee72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2220      	movs	r2, #32
 800ee80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff ff62 	bl	800ed4e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ee8a:	e060      	b.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee9a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eeaa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2220      	movs	r2, #32
 800eeb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	2b40      	cmp	r3, #64	; 0x40
 800eec4:	d107      	bne.n	800eed6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7ff ff7d 	bl	800edce <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800eed4:	e03b      	b.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ff35 	bl	800ed4e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800eee4:	e033      	b.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b21      	cmp	r3, #33	; 0x21
 800eeea:	d005      	beq.n	800eef8 <I2C_MasterTransmit_TXE+0xda>
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	2b40      	cmp	r3, #64	; 0x40
 800eef0:	d12d      	bne.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800eef2:	7bfb      	ldrb	r3, [r7, #15]
 800eef4:	2b22      	cmp	r3, #34	; 0x22
 800eef6:	d12a      	bne.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d108      	bne.n	800ef14 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef10:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ef12:	e01c      	b.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b40      	cmp	r3, #64	; 0x40
 800ef1e:	d103      	bne.n	800ef28 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f000 f880 	bl	800f026 <I2C_MemoryTransmit_TXE_BTF>
}
 800ef26:	e012      	b.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2c:	781a      	ldrb	r2, [r3, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	3b01      	subs	r3, #1
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ef4c:	e7ff      	b.n	800ef4e <I2C_MasterTransmit_TXE+0x130>
 800ef4e:	bf00      	nop
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef62:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	2b21      	cmp	r3, #33	; 0x21
 800ef6e:	d156      	bne.n	800f01e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d012      	beq.n	800efa0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	781a      	ldrb	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3b01      	subs	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ef9e:	e03e      	b.n	800f01e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b08      	cmp	r3, #8
 800efa4:	d01d      	beq.n	800efe2 <I2C_MasterTransmit_BTF+0x8c>
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b20      	cmp	r3, #32
 800efaa:	d01a      	beq.n	800efe2 <I2C_MasterTransmit_BTF+0x8c>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800efb2:	d016      	beq.n	800efe2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800efc2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2211      	movs	r2, #17
 800efc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2220      	movs	r2, #32
 800efd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7ff feb7 	bl	800ed4e <HAL_I2C_MasterTxCpltCallback>
}
 800efe0:	e01d      	b.n	800f01e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800eff0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f000:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2220      	movs	r2, #32
 800f00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2200      	movs	r2, #0
 800f014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff fe98 	bl	800ed4e <HAL_I2C_MasterTxCpltCallback>
}
 800f01e:	bf00      	nop
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}

0800f026 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b084      	sub	sp, #16
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f034:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d11d      	bne.n	800f07a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f042:	2b01      	cmp	r3, #1
 800f044:	d10b      	bne.n	800f05e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f056:	1c9a      	adds	r2, r3, #2
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f05c:	e06e      	b.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f062:	b29b      	uxth	r3, r3
 800f064:	121b      	asrs	r3, r3, #8
 800f066:	b2da      	uxtb	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f078:	e060      	b.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d10b      	bne.n	800f09a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f086:	b2da      	uxtb	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f098:	e050      	b.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	d14c      	bne.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	2b22      	cmp	r3, #34	; 0x22
 800f0a6:	d108      	bne.n	800f0ba <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f0b6:	601a      	str	r2, [r3, #0]
}
 800f0b8:	e040      	b.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d015      	beq.n	800f0f0 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	2b21      	cmp	r3, #33	; 0x21
 800f0c8:	d112      	bne.n	800f0f0 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ce:	781a      	ldrb	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f0ee:	e025      	b.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d120      	bne.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	2b21      	cmp	r3, #33	; 0x21
 800f0fe:	d11d      	bne.n	800f13c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f10e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f11e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2220      	movs	r2, #32
 800f12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff fe49 	bl	800edce <HAL_I2C_MemTxCpltCallback>
}
 800f13c:	bf00      	nop
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f152:	b2db      	uxtb	r3, r3
 800f154:	2b22      	cmp	r3, #34	; 0x22
 800f156:	f040 80a2 	bne.w	800f29e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f15e:	b29b      	uxth	r3, r3
 800f160:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b03      	cmp	r3, #3
 800f166:	d921      	bls.n	800f1ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f172:	b2d2      	uxtb	r2, r2
 800f174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f184:	b29b      	uxth	r3, r3
 800f186:	3b01      	subs	r3, #1
 800f188:	b29a      	uxth	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f192:	b29b      	uxth	r3, r3
 800f194:	2b03      	cmp	r3, #3
 800f196:	f040 8082 	bne.w	800f29e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	685a      	ldr	r2, [r3, #4]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1a8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f1aa:	e078      	b.n	800f29e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d074      	beq.n	800f29e <I2C_MasterReceive_RXNE+0x15a>
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d002      	beq.n	800f1c0 <I2C_MasterReceive_RXNE+0x7c>
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d16e      	bne.n	800f29e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f001 f817 	bl	80101f4 <I2C_WaitOnSTOPRequestThroughIT>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d142      	bne.n	800f252 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	685a      	ldr	r2, [r3, #4]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f1ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	691a      	ldr	r2, [r3, #16]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f6:	b2d2      	uxtb	r2, r2
 800f1f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fe:	1c5a      	adds	r2, r3, #1
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f208:	b29b      	uxth	r3, r3
 800f20a:	3b01      	subs	r3, #1
 800f20c:	b29a      	uxth	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2220      	movs	r2, #32
 800f216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b40      	cmp	r3, #64	; 0x40
 800f224:	d10a      	bne.n	800f23c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7ff fdd4 	bl	800ede2 <HAL_I2C_MemRxCpltCallback>
}
 800f23a:	e030      	b.n	800f29e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2212      	movs	r2, #18
 800f248:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fd89 	bl	800ed62 <HAL_I2C_MasterRxCpltCallback>
}
 800f250:	e025      	b.n	800f29e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	685a      	ldr	r2, [r3, #4]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f260:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	691a      	ldr	r2, [r3, #16]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26c:	b2d2      	uxtb	r2, r2
 800f26e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f27e:	b29b      	uxth	r3, r3
 800f280:	3b01      	subs	r3, #1
 800f282:	b29a      	uxth	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2220      	movs	r2, #32
 800f28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff fdac 	bl	800edf6 <HAL_I2C_ErrorCallback>
}
 800f29e:	bf00      	nop
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	2b04      	cmp	r3, #4
 800f2bc:	d11b      	bne.n	800f2f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	685a      	ldr	r2, [r3, #4]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	691a      	ldr	r2, [r3, #16]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d8:	b2d2      	uxtb	r2, r2
 800f2da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e0:	1c5a      	adds	r2, r3, #1
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	b29a      	uxth	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f2f4:	e0bd      	b.n	800f472 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d129      	bne.n	800f354 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f30e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b04      	cmp	r3, #4
 800f314:	d00a      	beq.n	800f32c <I2C_MasterReceive_BTF+0x86>
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d007      	beq.n	800f32c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f32a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	691a      	ldr	r2, [r3, #16]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f336:	b2d2      	uxtb	r2, r2
 800f338:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f348:	b29b      	uxth	r3, r3
 800f34a:	3b01      	subs	r3, #1
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f352:	e08e      	b.n	800f472 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f358:	b29b      	uxth	r3, r3
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	d176      	bne.n	800f44c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b01      	cmp	r3, #1
 800f362:	d002      	beq.n	800f36a <I2C_MasterReceive_BTF+0xc4>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b10      	cmp	r3, #16
 800f368:	d108      	bne.n	800f37c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	e019      	b.n	800f3b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2b04      	cmp	r3, #4
 800f380:	d002      	beq.n	800f388 <I2C_MasterReceive_BTF+0xe2>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b02      	cmp	r3, #2
 800f386:	d108      	bne.n	800f39a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f396:	601a      	str	r2, [r3, #0]
 800f398:	e00a      	b.n	800f3b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2b10      	cmp	r3, #16
 800f39e:	d007      	beq.n	800f3b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	681a      	ldr	r2, [r3, #0]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	691a      	ldr	r2, [r3, #16]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	b2d2      	uxtb	r2, r2
 800f3bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	685a      	ldr	r2, [r3, #4]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f40a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2220      	movs	r2, #32
 800f410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b40      	cmp	r3, #64	; 0x40
 800f41e:	d10a      	bne.n	800f436 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff fcd7 	bl	800ede2 <HAL_I2C_MemRxCpltCallback>
}
 800f434:	e01d      	b.n	800f472 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2212      	movs	r2, #18
 800f442:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f7ff fc8c 	bl	800ed62 <HAL_I2C_MasterRxCpltCallback>
}
 800f44a:	e012      	b.n	800f472 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	691a      	ldr	r2, [r3, #16]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f456:	b2d2      	uxtb	r2, r2
 800f458:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f468:	b29b      	uxth	r3, r3
 800f46a:	3b01      	subs	r3, #1
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f472:	bf00      	nop
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800f47a:	b480      	push	{r7}
 800f47c:	b083      	sub	sp, #12
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b40      	cmp	r3, #64	; 0x40
 800f48c:	d117      	bne.n	800f4be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f492:	2b00      	cmp	r3, #0
 800f494:	d109      	bne.n	800f4aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	461a      	mov	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f4a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800f4a8:	e067      	b.n	800f57a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	f043 0301 	orr.w	r3, r3, #1
 800f4b4:	b2da      	uxtb	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	611a      	str	r2, [r3, #16]
}
 800f4bc:	e05d      	b.n	800f57a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4c6:	d133      	bne.n	800f530 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	2b21      	cmp	r3, #33	; 0x21
 800f4d2:	d109      	bne.n	800f4e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	461a      	mov	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f4e4:	611a      	str	r2, [r3, #16]
 800f4e6:	e008      	b.n	800f4fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	f043 0301 	orr.w	r3, r3, #1
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d004      	beq.n	800f50c <I2C_Master_SB+0x92>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d108      	bne.n	800f51e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f510:	2b00      	cmp	r3, #0
 800f512:	d032      	beq.n	800f57a <I2C_Master_SB+0x100>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d02d      	beq.n	800f57a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	685a      	ldr	r2, [r3, #4]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f52c:	605a      	str	r2, [r3, #4]
}
 800f52e:	e024      	b.n	800f57a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10e      	bne.n	800f556 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	11db      	asrs	r3, r3, #7
 800f540:	b2db      	uxtb	r3, r3
 800f542:	f003 0306 	and.w	r3, r3, #6
 800f546:	b2db      	uxtb	r3, r3
 800f548:	f063 030f 	orn	r3, r3, #15
 800f54c:	b2da      	uxtb	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	611a      	str	r2, [r3, #16]
}
 800f554:	e011      	b.n	800f57a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d10d      	bne.n	800f57a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f562:	b29b      	uxth	r3, r3
 800f564:	11db      	asrs	r3, r3, #7
 800f566:	b2db      	uxtb	r3, r3
 800f568:	f003 0306 	and.w	r3, r3, #6
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	f063 030e 	orn	r3, r3, #14
 800f572:	b2da      	uxtb	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	611a      	str	r2, [r3, #16]
}
 800f57a:	bf00      	nop
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800f586:	b480      	push	{r7}
 800f588:	b083      	sub	sp, #12
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f592:	b2da      	uxtb	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <I2C_Master_ADD10+0x24>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d011      	beq.n	800f5ce <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d104      	bne.n	800f5be <I2C_Master_ADD10+0x38>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d007      	beq.n	800f5ce <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5cc:	605a      	str	r2, [r3, #4]
    }
  }
}
 800f5ce:	bf00      	nop
 800f5d0:	370c      	adds	r7, #12
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b091      	sub	sp, #68	; 0x44
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f5e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b22      	cmp	r3, #34	; 0x22
 800f602:	f040 8169 	bne.w	800f8d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10f      	bne.n	800f62e <I2C_Master_ADDR+0x54>
 800f60e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f612:	2b40      	cmp	r3, #64	; 0x40
 800f614:	d10b      	bne.n	800f62e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f616:	2300      	movs	r3, #0
 800f618:	633b      	str	r3, [r7, #48]	; 0x30
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	695b      	ldr	r3, [r3, #20]
 800f620:	633b      	str	r3, [r7, #48]	; 0x30
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	699b      	ldr	r3, [r3, #24]
 800f628:	633b      	str	r3, [r7, #48]	; 0x30
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	e160      	b.n	800f8f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f632:	2b00      	cmp	r3, #0
 800f634:	d11d      	bne.n	800f672 <I2C_Master_ADDR+0x98>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	691b      	ldr	r3, [r3, #16]
 800f63a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f63e:	d118      	bne.n	800f672 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f640:	2300      	movs	r3, #0
 800f642:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	699b      	ldr	r3, [r3, #24]
 800f652:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f654:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f664:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	651a      	str	r2, [r3, #80]	; 0x50
 800f670:	e13e      	b.n	800f8f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f676:	b29b      	uxth	r3, r3
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d113      	bne.n	800f6a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f67c:	2300      	movs	r3, #0
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	62bb      	str	r3, [r7, #40]	; 0x28
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f690:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	e115      	b.n	800f8d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	f040 808a 	bne.w	800f7c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f6b6:	d137      	bne.n	800f728 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6d6:	d113      	bne.n	800f700 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	695b      	ldr	r3, [r3, #20]
 800f6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6fe:	e0e7      	b.n	800f8d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f700:	2300      	movs	r3, #0
 800f702:	623b      	str	r3, [r7, #32]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	623b      	str	r3, [r7, #32]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	699b      	ldr	r3, [r3, #24]
 800f712:	623b      	str	r3, [r7, #32]
 800f714:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	e0d3      	b.n	800f8d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800f728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72a:	2b08      	cmp	r3, #8
 800f72c:	d02e      	beq.n	800f78c <I2C_Master_ADDR+0x1b2>
 800f72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f730:	2b20      	cmp	r3, #32
 800f732:	d02b      	beq.n	800f78c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800f734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f736:	2b12      	cmp	r3, #18
 800f738:	d102      	bne.n	800f740 <I2C_Master_ADDR+0x166>
 800f73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d125      	bne.n	800f78c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f742:	2b04      	cmp	r3, #4
 800f744:	d00e      	beq.n	800f764 <I2C_Master_ADDR+0x18a>
 800f746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d00b      	beq.n	800f764 <I2C_Master_ADDR+0x18a>
 800f74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74e:	2b10      	cmp	r3, #16
 800f750:	d008      	beq.n	800f764 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	e007      	b.n	800f774 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f772:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f774:	2300      	movs	r3, #0
 800f776:	61fb      	str	r3, [r7, #28]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	61fb      	str	r3, [r7, #28]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	699b      	ldr	r3, [r3, #24]
 800f786:	61fb      	str	r3, [r7, #28]
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	e0a1      	b.n	800f8d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f79a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f79c:	2300      	movs	r3, #0
 800f79e:	61bb      	str	r3, [r7, #24]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	695b      	ldr	r3, [r3, #20]
 800f7a6:	61bb      	str	r3, [r7, #24]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	61bb      	str	r3, [r7, #24]
 800f7b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	e085      	b.n	800f8d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d14d      	bne.n	800f86a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d0:	2b04      	cmp	r3, #4
 800f7d2:	d016      	beq.n	800f802 <I2C_Master_ADDR+0x228>
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d013      	beq.n	800f802 <I2C_Master_ADDR+0x228>
 800f7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7dc:	2b10      	cmp	r3, #16
 800f7de:	d010      	beq.n	800f802 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	681a      	ldr	r2, [r3, #0]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7fe:	601a      	str	r2, [r3, #0]
 800f800:	e007      	b.n	800f812 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f810:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f81c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f820:	d117      	bne.n	800f852 <I2C_Master_ADDR+0x278>
 800f822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f828:	d00b      	beq.n	800f842 <I2C_Master_ADDR+0x268>
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d008      	beq.n	800f842 <I2C_Master_ADDR+0x268>
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	2b08      	cmp	r3, #8
 800f834:	d005      	beq.n	800f842 <I2C_Master_ADDR+0x268>
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	2b10      	cmp	r3, #16
 800f83a:	d002      	beq.n	800f842 <I2C_Master_ADDR+0x268>
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	2b20      	cmp	r3, #32
 800f840:	d107      	bne.n	800f852 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	685a      	ldr	r2, [r3, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f850:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f852:	2300      	movs	r3, #0
 800f854:	617b      	str	r3, [r7, #20]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	617b      	str	r3, [r7, #20]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	617b      	str	r3, [r7, #20]
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	e032      	b.n	800f8d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f878:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f888:	d117      	bne.n	800f8ba <I2C_Master_ADDR+0x2e0>
 800f88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f890:	d00b      	beq.n	800f8aa <I2C_Master_ADDR+0x2d0>
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	2b01      	cmp	r3, #1
 800f896:	d008      	beq.n	800f8aa <I2C_Master_ADDR+0x2d0>
 800f898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89a:	2b08      	cmp	r3, #8
 800f89c:	d005      	beq.n	800f8aa <I2C_Master_ADDR+0x2d0>
 800f89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a0:	2b10      	cmp	r3, #16
 800f8a2:	d002      	beq.n	800f8aa <I2C_Master_ADDR+0x2d0>
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	2b20      	cmp	r3, #32
 800f8a8:	d107      	bne.n	800f8ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	685a      	ldr	r2, [r3, #4]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f8b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	613b      	str	r3, [r7, #16]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	695b      	ldr	r3, [r3, #20]
 800f8c4:	613b      	str	r3, [r7, #16]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	613b      	str	r3, [r7, #16]
 800f8ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800f8d6:	e00b      	b.n	800f8f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60fb      	str	r3, [r7, #12]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	60fb      	str	r3, [r7, #12]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	699b      	ldr	r3, [r3, #24]
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
}
 800f8ee:	e7ff      	b.n	800f8f0 <I2C_Master_ADDR+0x316>
 800f8f0:	bf00      	nop
 800f8f2:	3744      	adds	r7, #68	; 0x44
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f90a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f910:	b29b      	uxth	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d02b      	beq.n	800f96e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91a:	781a      	ldrb	r2, [r3, #0]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f930:	b29b      	uxth	r3, r3
 800f932:	3b01      	subs	r3, #1
 800f934:	b29a      	uxth	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f93e:	b29b      	uxth	r3, r3
 800f940:	2b00      	cmp	r3, #0
 800f942:	d114      	bne.n	800f96e <I2C_SlaveTransmit_TXE+0x72>
 800f944:	7bfb      	ldrb	r3, [r7, #15]
 800f946:	2b29      	cmp	r3, #41	; 0x29
 800f948:	d111      	bne.n	800f96e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	685a      	ldr	r2, [r3, #4]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f958:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2221      	movs	r2, #33	; 0x21
 800f95e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2228      	movs	r2, #40	; 0x28
 800f964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7ff fa04 	bl	800ed76 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800f96e:	bf00      	nop
 800f970:	3710      	adds	r7, #16
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f976:	b480      	push	{r7}
 800f978:	b083      	sub	sp, #12
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f982:	b29b      	uxth	r3, r3
 800f984:	2b00      	cmp	r3, #0
 800f986:	d011      	beq.n	800f9ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98c:	781a      	ldrb	r2, [r3, #0]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f998:	1c5a      	adds	r2, r3, #1
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d02c      	beq.n	800fa2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	691a      	ldr	r2, [r3, #16]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9dc:	b2d2      	uxtb	r2, r2
 800f9de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e4:	1c5a      	adds	r2, r3, #1
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d114      	bne.n	800fa2c <I2C_SlaveReceive_RXNE+0x74>
 800fa02:	7bfb      	ldrb	r3, [r7, #15]
 800fa04:	2b2a      	cmp	r3, #42	; 0x2a
 800fa06:	d111      	bne.n	800fa2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	685a      	ldr	r2, [r3, #4]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2222      	movs	r2, #34	; 0x22
 800fa1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2228      	movs	r2, #40	; 0x28
 800fa22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7ff f9af 	bl	800ed8a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800fa2c:	bf00      	nop
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d012      	beq.n	800fa6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	691a      	ldr	r2, [r3, #16]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa50:	b2d2      	uxtb	r2, r2
 800fa52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	3b01      	subs	r3, #1
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800fa6c:	bf00      	nop
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800fa82:	2300      	movs	r3, #0
 800fa84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fa92:	2b28      	cmp	r3, #40	; 0x28
 800fa94:	d127      	bne.n	800fae6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	685a      	ldr	r2, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faa4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	089b      	lsrs	r3, r3, #2
 800faaa:	f003 0301 	and.w	r3, r3, #1
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d101      	bne.n	800fab6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800fab2:	2301      	movs	r3, #1
 800fab4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	09db      	lsrs	r3, r3, #7
 800faba:	f003 0301 	and.w	r3, r3, #1
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d103      	bne.n	800faca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	81bb      	strh	r3, [r7, #12]
 800fac8:	e002      	b.n	800fad0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	699b      	ldr	r3, [r3, #24]
 800face:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800fad8:	89ba      	ldrh	r2, [r7, #12]
 800fada:	7bfb      	ldrb	r3, [r7, #15]
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff f95d 	bl	800ed9e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fae4:	e008      	b.n	800faf8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f06f 0202 	mvn.w	r2, #2
 800faee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800faf8:	bf00      	nop
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	685a      	ldr	r2, [r3, #4]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fb1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800fb20:	2300      	movs	r3, #0
 800fb22:	60bb      	str	r3, [r7, #8]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	695b      	ldr	r3, [r3, #20]
 800fb2a:	60bb      	str	r3, [r7, #8]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f042 0201 	orr.w	r2, r2, #1
 800fb3a:	601a      	str	r2, [r3, #0]
 800fb3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb5c:	d172      	bne.n	800fc44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
 800fb60:	2b22      	cmp	r3, #34	; 0x22
 800fb62:	d002      	beq.n	800fb6a <I2C_Slave_STOPF+0x6a>
 800fb64:	7bfb      	ldrb	r3, [r7, #15]
 800fb66:	2b2a      	cmp	r3, #42	; 0x2a
 800fb68:	d135      	bne.n	800fbd6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d005      	beq.n	800fb8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb86:	f043 0204 	orr.w	r2, r3, #4
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fb9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fe fce4 	bl	800e570 <HAL_DMA_GetState>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d049      	beq.n	800fc42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb2:	4a69      	ldr	r2, [pc, #420]	; (800fd58 <I2C_Slave_STOPF+0x258>)
 800fbb4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe fb2c 	bl	800e218 <HAL_DMA_Abort_IT>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d03d      	beq.n	800fc42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fbd0:	4610      	mov	r0, r2
 800fbd2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fbd4:	e035      	b.n	800fc42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d005      	beq.n	800fbfa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf2:	f043 0204 	orr.w	r2, r3, #4
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	685a      	ldr	r2, [r3, #4]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fc08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fe fcae 	bl	800e570 <HAL_DMA_GetState>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d014      	beq.n	800fc44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc1e:	4a4e      	ldr	r2, [pc, #312]	; (800fd58 <I2C_Slave_STOPF+0x258>)
 800fc20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe faf6 	bl	800e218 <HAL_DMA_Abort_IT>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d008      	beq.n	800fc44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fc3c:	4610      	mov	r0, r2
 800fc3e:	4798      	blx	r3
 800fc40:	e000      	b.n	800fc44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fc42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d03e      	beq.n	800fccc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	f003 0304 	and.w	r3, r3, #4
 800fc58:	2b04      	cmp	r3, #4
 800fc5a:	d112      	bne.n	800fc82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	691a      	ldr	r2, [r3, #16]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	b2d2      	uxtb	r2, r2
 800fc68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc8c:	2b40      	cmp	r3, #64	; 0x40
 800fc8e:	d112      	bne.n	800fcb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	691a      	ldr	r2, [r3, #16]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9a:	b2d2      	uxtb	r2, r2
 800fc9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	3b01      	subs	r3, #1
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d005      	beq.n	800fccc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcc4:	f043 0204 	orr.w	r2, r3, #4
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d003      	beq.n	800fcdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f000 f8b3 	bl	800fe40 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800fcda:	e039      	b.n	800fd50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
 800fcde:	2b2a      	cmp	r3, #42	; 0x2a
 800fce0:	d109      	bne.n	800fcf6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2228      	movs	r2, #40	; 0x28
 800fcec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff f84a 	bl	800ed8a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b28      	cmp	r3, #40	; 0x28
 800fd00:	d111      	bne.n	800fd26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4a15      	ldr	r2, [pc, #84]	; (800fd5c <I2C_Slave_STOPF+0x25c>)
 800fd06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2220      	movs	r2, #32
 800fd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff f84b 	bl	800edba <HAL_I2C_ListenCpltCallback>
}
 800fd24:	e014      	b.n	800fd50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd2a:	2b22      	cmp	r3, #34	; 0x22
 800fd2c:	d002      	beq.n	800fd34 <I2C_Slave_STOPF+0x234>
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
 800fd30:	2b22      	cmp	r3, #34	; 0x22
 800fd32:	d10d      	bne.n	800fd50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7ff f81d 	bl	800ed8a <HAL_I2C_SlaveRxCpltCallback>
}
 800fd50:	bf00      	nop
 800fd52:	3710      	adds	r7, #16
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	080100a5 	.word	0x080100a5
 800fd5c:	ffff0000 	.word	0xffff0000

0800fd60 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd6e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd74:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	2b08      	cmp	r3, #8
 800fd7a:	d002      	beq.n	800fd82 <I2C_Slave_AF+0x22>
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2b20      	cmp	r3, #32
 800fd80:	d129      	bne.n	800fdd6 <I2C_Slave_AF+0x76>
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	2b28      	cmp	r3, #40	; 0x28
 800fd86:	d126      	bne.n	800fdd6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a2c      	ldr	r2, [pc, #176]	; (800fe3c <I2C_Slave_AF+0xdc>)
 800fd8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fd9c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fda6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdb6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2200      	movs	r2, #0
 800fdbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2220      	movs	r2, #32
 800fdc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7fe fff3 	bl	800edba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800fdd4:	e02e      	b.n	800fe34 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
 800fdd8:	2b21      	cmp	r3, #33	; 0x21
 800fdda:	d126      	bne.n	800fe2a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	4a17      	ldr	r2, [pc, #92]	; (800fe3c <I2C_Slave_AF+0xdc>)
 800fde0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2221      	movs	r2, #33	; 0x21
 800fde6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2220      	movs	r2, #32
 800fdec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fe06:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fe10:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe20:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7fe ffa7 	bl	800ed76 <HAL_I2C_SlaveTxCpltCallback>
}
 800fe28:	e004      	b.n	800fe34 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fe32:	615a      	str	r2, [r3, #20]
}
 800fe34:	bf00      	nop
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	ffff0000 	.word	0xffff0000

0800fe40 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fe58:	7bbb      	ldrb	r3, [r7, #14]
 800fe5a:	2b10      	cmp	r3, #16
 800fe5c:	d002      	beq.n	800fe64 <I2C_ITError+0x24>
 800fe5e:	7bbb      	ldrb	r3, [r7, #14]
 800fe60:	2b40      	cmp	r3, #64	; 0x40
 800fe62:	d10a      	bne.n	800fe7a <I2C_ITError+0x3a>
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
 800fe66:	2b22      	cmp	r3, #34	; 0x22
 800fe68:	d107      	bne.n	800fe7a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fe78:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fe80:	2b28      	cmp	r3, #40	; 0x28
 800fe82:	d107      	bne.n	800fe94 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2228      	movs	r2, #40	; 0x28
 800fe8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fe92:	e015      	b.n	800fec0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fea2:	d00a      	beq.n	800feba <I2C_ITError+0x7a>
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
 800fea6:	2b60      	cmp	r3, #96	; 0x60
 800fea8:	d007      	beq.n	800feba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2220      	movs	r2, #32
 800feae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2200      	movs	r2, #0
 800febe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800feca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fece:	d162      	bne.n	800ff96 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	685a      	ldr	r2, [r3, #4]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fede:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	2b01      	cmp	r3, #1
 800feec:	d020      	beq.n	800ff30 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fef2:	4a6a      	ldr	r2, [pc, #424]	; (801009c <I2C_ITError+0x25c>)
 800fef4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe f98c 	bl	800e218 <HAL_DMA_Abort_IT>
 800ff00:	4603      	mov	r3, r0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 8089 	beq.w	801001a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f022 0201 	bic.w	r2, r2, #1
 800ff16:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2220      	movs	r2, #32
 800ff1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ff2a:	4610      	mov	r0, r2
 800ff2c:	4798      	blx	r3
 800ff2e:	e074      	b.n	801001a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff34:	4a59      	ldr	r2, [pc, #356]	; (801009c <I2C_ITError+0x25c>)
 800ff36:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fe f96b 	bl	800e218 <HAL_DMA_Abort_IT>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d068      	beq.n	801001a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	695b      	ldr	r3, [r3, #20]
 800ff4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff52:	2b40      	cmp	r3, #64	; 0x40
 800ff54:	d10b      	bne.n	800ff6e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	691a      	ldr	r2, [r3, #16]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff60:	b2d2      	uxtb	r2, r2
 800ff62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff68:	1c5a      	adds	r2, r3, #1
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f022 0201 	bic.w	r2, r2, #1
 800ff7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2220      	movs	r2, #32
 800ff82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff8c:	687a      	ldr	r2, [r7, #4]
 800ff8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ff90:	4610      	mov	r0, r2
 800ff92:	4798      	blx	r3
 800ff94:	e041      	b.n	801001a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	2b60      	cmp	r3, #96	; 0x60
 800ffa0:	d125      	bne.n	800ffee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2220      	movs	r2, #32
 800ffa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffba:	2b40      	cmp	r3, #64	; 0x40
 800ffbc:	d10b      	bne.n	800ffd6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	691a      	ldr	r2, [r3, #16]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	b2d2      	uxtb	r2, r2
 800ffca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd0:	1c5a      	adds	r2, r3, #1
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f022 0201 	bic.w	r2, r2, #1
 800ffe4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f7fe ff0f 	bl	800ee0a <HAL_I2C_AbortCpltCallback>
 800ffec:	e015      	b.n	801001a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	695b      	ldr	r3, [r3, #20]
 800fff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fff8:	2b40      	cmp	r3, #64	; 0x40
 800fffa:	d10b      	bne.n	8010014 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	691a      	ldr	r2, [r3, #16]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010006:	b2d2      	uxtb	r2, r2
 8010008:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801000e:	1c5a      	adds	r2, r3, #1
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7fe feee 	bl	800edf6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801001e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	d10e      	bne.n	8010048 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010030:	2b00      	cmp	r3, #0
 8010032:	d109      	bne.n	8010048 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801003a:	2b00      	cmp	r3, #0
 801003c:	d104      	bne.n	8010048 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010044:	2b00      	cmp	r3, #0
 8010046:	d007      	beq.n	8010058 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	685a      	ldr	r2, [r3, #4]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010056:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801005e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010064:	f003 0304 	and.w	r3, r3, #4
 8010068:	2b04      	cmp	r3, #4
 801006a:	d113      	bne.n	8010094 <I2C_ITError+0x254>
 801006c:	7bfb      	ldrb	r3, [r7, #15]
 801006e:	2b28      	cmp	r3, #40	; 0x28
 8010070:	d110      	bne.n	8010094 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4a0a      	ldr	r2, [pc, #40]	; (80100a0 <I2C_ITError+0x260>)
 8010076:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2220      	movs	r2, #32
 8010082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fe fe93 	bl	800edba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010094:	bf00      	nop
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	080100a5 	.word	0x080100a5
 80100a0:	ffff0000 	.word	0xffff0000

080100a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80100ac:	2300      	movs	r3, #0
 80100ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80100be:	4b4b      	ldr	r3, [pc, #300]	; (80101ec <I2C_DMAAbort+0x148>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	08db      	lsrs	r3, r3, #3
 80100c4:	4a4a      	ldr	r2, [pc, #296]	; (80101f0 <I2C_DMAAbort+0x14c>)
 80100c6:	fba2 2303 	umull	r2, r3, r2, r3
 80100ca:	0a1a      	lsrs	r2, r3, #8
 80100cc:	4613      	mov	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	00da      	lsls	r2, r3, #3
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d106      	bne.n	80100ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100e2:	f043 0220 	orr.w	r2, r3, #32
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80100ea:	e00a      	b.n	8010102 <I2C_DMAAbort+0x5e>
    }
    count--;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	3b01      	subs	r3, #1
 80100f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80100fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010100:	d0ea      	beq.n	80100d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010106:	2b00      	cmp	r3, #0
 8010108:	d003      	beq.n	8010112 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801010e:	2200      	movs	r2, #0
 8010110:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010116:	2b00      	cmp	r3, #0
 8010118:	d003      	beq.n	8010122 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801011e:	2200      	movs	r2, #0
 8010120:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010130:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	2200      	movs	r2, #0
 8010136:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010144:	2200      	movs	r2, #0
 8010146:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801014c:	2b00      	cmp	r3, #0
 801014e:	d003      	beq.n	8010158 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010154:	2200      	movs	r2, #0
 8010156:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f022 0201 	bic.w	r2, r2, #1
 8010166:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b60      	cmp	r3, #96	; 0x60
 8010172:	d10e      	bne.n	8010192 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	2220      	movs	r2, #32
 8010178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	2200      	movs	r2, #0
 8010180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	2200      	movs	r2, #0
 8010188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801018a:	6978      	ldr	r0, [r7, #20]
 801018c:	f7fe fe3d 	bl	800ee0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010190:	e027      	b.n	80101e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010192:	7cfb      	ldrb	r3, [r7, #19]
 8010194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010198:	2b28      	cmp	r3, #40	; 0x28
 801019a:	d117      	bne.n	80101cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f042 0201 	orr.w	r2, r2, #1
 80101aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	2200      	movs	r2, #0
 80101c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	2228      	movs	r2, #40	; 0x28
 80101c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80101ca:	e007      	b.n	80101dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	2220      	movs	r2, #32
 80101d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	2200      	movs	r2, #0
 80101d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80101dc:	6978      	ldr	r0, [r7, #20]
 80101de:	f7fe fe0a 	bl	800edf6 <HAL_I2C_ErrorCallback>
}
 80101e2:	bf00      	nop
 80101e4:	3718      	adds	r7, #24
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	20000268 	.word	0x20000268
 80101f0:	14f8b589 	.word	0x14f8b589

080101f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b085      	sub	sp, #20
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101fc:	2300      	movs	r3, #0
 80101fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8010200:	4b13      	ldr	r3, [pc, #76]	; (8010250 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	08db      	lsrs	r3, r3, #3
 8010206:	4a13      	ldr	r2, [pc, #76]	; (8010254 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8010208:	fba2 2303 	umull	r2, r3, r2, r3
 801020c:	0a1a      	lsrs	r2, r3, #8
 801020e:	4613      	mov	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	4413      	add	r3, r2
 8010214:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	3b01      	subs	r3, #1
 801021a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d107      	bne.n	8010232 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010226:	f043 0220 	orr.w	r2, r3, #32
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801022e:	2301      	movs	r3, #1
 8010230:	e008      	b.n	8010244 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801023c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010240:	d0e9      	beq.n	8010216 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3714      	adds	r7, #20
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr
 8010250:	20000268 	.word	0x20000268
 8010254:	14f8b589 	.word	0x14f8b589

08010258 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010264:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010268:	d103      	bne.n	8010272 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2201      	movs	r2, #1
 801026e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8010270:	e007      	b.n	8010282 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010276:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801027a:	d102      	bne.n	8010282 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2208      	movs	r2, #8
 8010280:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010282:	bf00      	nop
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr
	...

08010290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d101      	bne.n	80102a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801029e:	2301      	movs	r3, #1
 80102a0:	e25b      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f003 0301 	and.w	r3, r3, #1
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d075      	beq.n	801039a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80102ae:	4ba3      	ldr	r3, [pc, #652]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	f003 030c 	and.w	r3, r3, #12
 80102b6:	2b04      	cmp	r3, #4
 80102b8:	d00c      	beq.n	80102d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80102ba:	4ba0      	ldr	r3, [pc, #640]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80102c2:	2b08      	cmp	r3, #8
 80102c4:	d112      	bne.n	80102ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80102c6:	4b9d      	ldr	r3, [pc, #628]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102d2:	d10b      	bne.n	80102ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80102d4:	4b99      	ldr	r3, [pc, #612]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d05b      	beq.n	8010398 <HAL_RCC_OscConfig+0x108>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d157      	bne.n	8010398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80102e8:	2301      	movs	r3, #1
 80102ea:	e236      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102f4:	d106      	bne.n	8010304 <HAL_RCC_OscConfig+0x74>
 80102f6:	4b91      	ldr	r3, [pc, #580]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a90      	ldr	r2, [pc, #576]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80102fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010300:	6013      	str	r3, [r2, #0]
 8010302:	e01d      	b.n	8010340 <HAL_RCC_OscConfig+0xb0>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801030c:	d10c      	bne.n	8010328 <HAL_RCC_OscConfig+0x98>
 801030e:	4b8b      	ldr	r3, [pc, #556]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4a8a      	ldr	r2, [pc, #552]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010318:	6013      	str	r3, [r2, #0]
 801031a:	4b88      	ldr	r3, [pc, #544]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4a87      	ldr	r2, [pc, #540]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	e00b      	b.n	8010340 <HAL_RCC_OscConfig+0xb0>
 8010328:	4b84      	ldr	r3, [pc, #528]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a83      	ldr	r2, [pc, #524]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801032e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010332:	6013      	str	r3, [r2, #0]
 8010334:	4b81      	ldr	r3, [pc, #516]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a80      	ldr	r2, [pc, #512]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801033a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801033e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d013      	beq.n	8010370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010348:	f7fc ffbe 	bl	800d2c8 <HAL_GetTick>
 801034c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801034e:	e008      	b.n	8010362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010350:	f7fc ffba 	bl	800d2c8 <HAL_GetTick>
 8010354:	4602      	mov	r2, r0
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	2b64      	cmp	r3, #100	; 0x64
 801035c:	d901      	bls.n	8010362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801035e:	2303      	movs	r3, #3
 8010360:	e1fb      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010362:	4b76      	ldr	r3, [pc, #472]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801036a:	2b00      	cmp	r3, #0
 801036c:	d0f0      	beq.n	8010350 <HAL_RCC_OscConfig+0xc0>
 801036e:	e014      	b.n	801039a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010370:	f7fc ffaa 	bl	800d2c8 <HAL_GetTick>
 8010374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010376:	e008      	b.n	801038a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010378:	f7fc ffa6 	bl	800d2c8 <HAL_GetTick>
 801037c:	4602      	mov	r2, r0
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	2b64      	cmp	r3, #100	; 0x64
 8010384:	d901      	bls.n	801038a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010386:	2303      	movs	r3, #3
 8010388:	e1e7      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801038a:	4b6c      	ldr	r3, [pc, #432]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1f0      	bne.n	8010378 <HAL_RCC_OscConfig+0xe8>
 8010396:	e000      	b.n	801039a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f003 0302 	and.w	r3, r3, #2
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d063      	beq.n	801046e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80103a6:	4b65      	ldr	r3, [pc, #404]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	f003 030c 	and.w	r3, r3, #12
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00b      	beq.n	80103ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80103b2:	4b62      	ldr	r3, [pc, #392]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80103b4:	689b      	ldr	r3, [r3, #8]
 80103b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80103ba:	2b08      	cmp	r3, #8
 80103bc:	d11c      	bne.n	80103f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80103be:	4b5f      	ldr	r3, [pc, #380]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d116      	bne.n	80103f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80103ca:	4b5c      	ldr	r3, [pc, #368]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f003 0302 	and.w	r3, r3, #2
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d005      	beq.n	80103e2 <HAL_RCC_OscConfig+0x152>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d001      	beq.n	80103e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80103de:	2301      	movs	r3, #1
 80103e0:	e1bb      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80103e2:	4b56      	ldr	r3, [pc, #344]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	4952      	ldr	r1, [pc, #328]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80103f2:	4313      	orrs	r3, r2
 80103f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80103f6:	e03a      	b.n	801046e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d020      	beq.n	8010442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010400:	4b4f      	ldr	r3, [pc, #316]	; (8010540 <HAL_RCC_OscConfig+0x2b0>)
 8010402:	2201      	movs	r2, #1
 8010404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010406:	f7fc ff5f 	bl	800d2c8 <HAL_GetTick>
 801040a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801040c:	e008      	b.n	8010420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801040e:	f7fc ff5b 	bl	800d2c8 <HAL_GetTick>
 8010412:	4602      	mov	r2, r0
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	1ad3      	subs	r3, r2, r3
 8010418:	2b02      	cmp	r3, #2
 801041a:	d901      	bls.n	8010420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801041c:	2303      	movs	r3, #3
 801041e:	e19c      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010420:	4b46      	ldr	r3, [pc, #280]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	f003 0302 	and.w	r3, r3, #2
 8010428:	2b00      	cmp	r3, #0
 801042a:	d0f0      	beq.n	801040e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801042c:	4b43      	ldr	r3, [pc, #268]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	00db      	lsls	r3, r3, #3
 801043a:	4940      	ldr	r1, [pc, #256]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801043c:	4313      	orrs	r3, r2
 801043e:	600b      	str	r3, [r1, #0]
 8010440:	e015      	b.n	801046e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010442:	4b3f      	ldr	r3, [pc, #252]	; (8010540 <HAL_RCC_OscConfig+0x2b0>)
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010448:	f7fc ff3e 	bl	800d2c8 <HAL_GetTick>
 801044c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801044e:	e008      	b.n	8010462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010450:	f7fc ff3a 	bl	800d2c8 <HAL_GetTick>
 8010454:	4602      	mov	r2, r0
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	2b02      	cmp	r3, #2
 801045c:	d901      	bls.n	8010462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801045e:	2303      	movs	r3, #3
 8010460:	e17b      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010462:	4b36      	ldr	r3, [pc, #216]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f003 0302 	and.w	r3, r3, #2
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f0      	bne.n	8010450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 0308 	and.w	r3, r3, #8
 8010476:	2b00      	cmp	r3, #0
 8010478:	d030      	beq.n	80104dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	695b      	ldr	r3, [r3, #20]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d016      	beq.n	80104b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010482:	4b30      	ldr	r3, [pc, #192]	; (8010544 <HAL_RCC_OscConfig+0x2b4>)
 8010484:	2201      	movs	r2, #1
 8010486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010488:	f7fc ff1e 	bl	800d2c8 <HAL_GetTick>
 801048c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801048e:	e008      	b.n	80104a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010490:	f7fc ff1a 	bl	800d2c8 <HAL_GetTick>
 8010494:	4602      	mov	r2, r0
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	2b02      	cmp	r3, #2
 801049c:	d901      	bls.n	80104a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801049e:	2303      	movs	r3, #3
 80104a0:	e15b      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80104a2:	4b26      	ldr	r3, [pc, #152]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80104a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d0f0      	beq.n	8010490 <HAL_RCC_OscConfig+0x200>
 80104ae:	e015      	b.n	80104dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80104b0:	4b24      	ldr	r3, [pc, #144]	; (8010544 <HAL_RCC_OscConfig+0x2b4>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80104b6:	f7fc ff07 	bl	800d2c8 <HAL_GetTick>
 80104ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80104bc:	e008      	b.n	80104d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80104be:	f7fc ff03 	bl	800d2c8 <HAL_GetTick>
 80104c2:	4602      	mov	r2, r0
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d901      	bls.n	80104d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80104cc:	2303      	movs	r3, #3
 80104ce:	e144      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80104d0:	4b1a      	ldr	r3, [pc, #104]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80104d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d4:	f003 0302 	and.w	r3, r3, #2
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1f0      	bne.n	80104be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f003 0304 	and.w	r3, r3, #4
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 80a0 	beq.w	801062a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80104ea:	2300      	movs	r3, #0
 80104ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80104ee:	4b13      	ldr	r3, [pc, #76]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 80104f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d10f      	bne.n	801051a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80104fa:	2300      	movs	r3, #0
 80104fc:	60bb      	str	r3, [r7, #8]
 80104fe:	4b0f      	ldr	r3, [pc, #60]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010502:	4a0e      	ldr	r2, [pc, #56]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 8010504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010508:	6413      	str	r3, [r2, #64]	; 0x40
 801050a:	4b0c      	ldr	r3, [pc, #48]	; (801053c <HAL_RCC_OscConfig+0x2ac>)
 801050c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010512:	60bb      	str	r3, [r7, #8]
 8010514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010516:	2301      	movs	r3, #1
 8010518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801051a:	4b0b      	ldr	r3, [pc, #44]	; (8010548 <HAL_RCC_OscConfig+0x2b8>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010522:	2b00      	cmp	r3, #0
 8010524:	d121      	bne.n	801056a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010526:	4b08      	ldr	r3, [pc, #32]	; (8010548 <HAL_RCC_OscConfig+0x2b8>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a07      	ldr	r2, [pc, #28]	; (8010548 <HAL_RCC_OscConfig+0x2b8>)
 801052c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010532:	f7fc fec9 	bl	800d2c8 <HAL_GetTick>
 8010536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010538:	e011      	b.n	801055e <HAL_RCC_OscConfig+0x2ce>
 801053a:	bf00      	nop
 801053c:	40023800 	.word	0x40023800
 8010540:	42470000 	.word	0x42470000
 8010544:	42470e80 	.word	0x42470e80
 8010548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801054c:	f7fc febc 	bl	800d2c8 <HAL_GetTick>
 8010550:	4602      	mov	r2, r0
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	2b02      	cmp	r3, #2
 8010558:	d901      	bls.n	801055e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801055a:	2303      	movs	r3, #3
 801055c:	e0fd      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801055e:	4b81      	ldr	r3, [pc, #516]	; (8010764 <HAL_RCC_OscConfig+0x4d4>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010566:	2b00      	cmp	r3, #0
 8010568:	d0f0      	beq.n	801054c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	689b      	ldr	r3, [r3, #8]
 801056e:	2b01      	cmp	r3, #1
 8010570:	d106      	bne.n	8010580 <HAL_RCC_OscConfig+0x2f0>
 8010572:	4b7d      	ldr	r3, [pc, #500]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010576:	4a7c      	ldr	r2, [pc, #496]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010578:	f043 0301 	orr.w	r3, r3, #1
 801057c:	6713      	str	r3, [r2, #112]	; 0x70
 801057e:	e01c      	b.n	80105ba <HAL_RCC_OscConfig+0x32a>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	2b05      	cmp	r3, #5
 8010586:	d10c      	bne.n	80105a2 <HAL_RCC_OscConfig+0x312>
 8010588:	4b77      	ldr	r3, [pc, #476]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 801058a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801058c:	4a76      	ldr	r2, [pc, #472]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 801058e:	f043 0304 	orr.w	r3, r3, #4
 8010592:	6713      	str	r3, [r2, #112]	; 0x70
 8010594:	4b74      	ldr	r3, [pc, #464]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010598:	4a73      	ldr	r2, [pc, #460]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 801059a:	f043 0301 	orr.w	r3, r3, #1
 801059e:	6713      	str	r3, [r2, #112]	; 0x70
 80105a0:	e00b      	b.n	80105ba <HAL_RCC_OscConfig+0x32a>
 80105a2:	4b71      	ldr	r3, [pc, #452]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80105a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a6:	4a70      	ldr	r2, [pc, #448]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80105a8:	f023 0301 	bic.w	r3, r3, #1
 80105ac:	6713      	str	r3, [r2, #112]	; 0x70
 80105ae:	4b6e      	ldr	r3, [pc, #440]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80105b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105b2:	4a6d      	ldr	r2, [pc, #436]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80105b4:	f023 0304 	bic.w	r3, r3, #4
 80105b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	689b      	ldr	r3, [r3, #8]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d015      	beq.n	80105ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80105c2:	f7fc fe81 	bl	800d2c8 <HAL_GetTick>
 80105c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80105c8:	e00a      	b.n	80105e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80105ca:	f7fc fe7d 	bl	800d2c8 <HAL_GetTick>
 80105ce:	4602      	mov	r2, r0
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	1ad3      	subs	r3, r2, r3
 80105d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105d8:	4293      	cmp	r3, r2
 80105da:	d901      	bls.n	80105e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80105dc:	2303      	movs	r3, #3
 80105de:	e0bc      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80105e0:	4b61      	ldr	r3, [pc, #388]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80105e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e4:	f003 0302 	and.w	r3, r3, #2
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d0ee      	beq.n	80105ca <HAL_RCC_OscConfig+0x33a>
 80105ec:	e014      	b.n	8010618 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80105ee:	f7fc fe6b 	bl	800d2c8 <HAL_GetTick>
 80105f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80105f4:	e00a      	b.n	801060c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80105f6:	f7fc fe67 	bl	800d2c8 <HAL_GetTick>
 80105fa:	4602      	mov	r2, r0
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	f241 3288 	movw	r2, #5000	; 0x1388
 8010604:	4293      	cmp	r3, r2
 8010606:	d901      	bls.n	801060c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010608:	2303      	movs	r3, #3
 801060a:	e0a6      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801060c:	4b56      	ldr	r3, [pc, #344]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 801060e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010610:	f003 0302 	and.w	r3, r3, #2
 8010614:	2b00      	cmp	r3, #0
 8010616:	d1ee      	bne.n	80105f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	2b01      	cmp	r3, #1
 801061c:	d105      	bne.n	801062a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801061e:	4b52      	ldr	r3, [pc, #328]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010622:	4a51      	ldr	r2, [pc, #324]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	699b      	ldr	r3, [r3, #24]
 801062e:	2b00      	cmp	r3, #0
 8010630:	f000 8092 	beq.w	8010758 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010634:	4b4c      	ldr	r3, [pc, #304]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010636:	689b      	ldr	r3, [r3, #8]
 8010638:	f003 030c 	and.w	r3, r3, #12
 801063c:	2b08      	cmp	r3, #8
 801063e:	d05c      	beq.n	80106fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	2b02      	cmp	r3, #2
 8010646:	d141      	bne.n	80106cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010648:	4b48      	ldr	r3, [pc, #288]	; (801076c <HAL_RCC_OscConfig+0x4dc>)
 801064a:	2200      	movs	r2, #0
 801064c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801064e:	f7fc fe3b 	bl	800d2c8 <HAL_GetTick>
 8010652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010654:	e008      	b.n	8010668 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010656:	f7fc fe37 	bl	800d2c8 <HAL_GetTick>
 801065a:	4602      	mov	r2, r0
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	2b02      	cmp	r3, #2
 8010662:	d901      	bls.n	8010668 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010664:	2303      	movs	r3, #3
 8010666:	e078      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010668:	4b3f      	ldr	r3, [pc, #252]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1f0      	bne.n	8010656 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	69da      	ldr	r2, [r3, #28]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	431a      	orrs	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010682:	019b      	lsls	r3, r3, #6
 8010684:	431a      	orrs	r2, r3
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801068a:	085b      	lsrs	r3, r3, #1
 801068c:	3b01      	subs	r3, #1
 801068e:	041b      	lsls	r3, r3, #16
 8010690:	431a      	orrs	r2, r3
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010696:	061b      	lsls	r3, r3, #24
 8010698:	4933      	ldr	r1, [pc, #204]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 801069a:	4313      	orrs	r3, r2
 801069c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801069e:	4b33      	ldr	r3, [pc, #204]	; (801076c <HAL_RCC_OscConfig+0x4dc>)
 80106a0:	2201      	movs	r2, #1
 80106a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106a4:	f7fc fe10 	bl	800d2c8 <HAL_GetTick>
 80106a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80106aa:	e008      	b.n	80106be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106ac:	f7fc fe0c 	bl	800d2c8 <HAL_GetTick>
 80106b0:	4602      	mov	r2, r0
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	2b02      	cmp	r3, #2
 80106b8:	d901      	bls.n	80106be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80106ba:	2303      	movs	r3, #3
 80106bc:	e04d      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80106be:	4b2a      	ldr	r3, [pc, #168]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d0f0      	beq.n	80106ac <HAL_RCC_OscConfig+0x41c>
 80106ca:	e045      	b.n	8010758 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80106cc:	4b27      	ldr	r3, [pc, #156]	; (801076c <HAL_RCC_OscConfig+0x4dc>)
 80106ce:	2200      	movs	r2, #0
 80106d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106d2:	f7fc fdf9 	bl	800d2c8 <HAL_GetTick>
 80106d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80106d8:	e008      	b.n	80106ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80106da:	f7fc fdf5 	bl	800d2c8 <HAL_GetTick>
 80106de:	4602      	mov	r2, r0
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d901      	bls.n	80106ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80106e8:	2303      	movs	r3, #3
 80106ea:	e036      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80106ec:	4b1e      	ldr	r3, [pc, #120]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1f0      	bne.n	80106da <HAL_RCC_OscConfig+0x44a>
 80106f8:	e02e      	b.n	8010758 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	699b      	ldr	r3, [r3, #24]
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d101      	bne.n	8010706 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8010702:	2301      	movs	r3, #1
 8010704:	e029      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010706:	4b18      	ldr	r3, [pc, #96]	; (8010768 <HAL_RCC_OscConfig+0x4d8>)
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	69db      	ldr	r3, [r3, #28]
 8010716:	429a      	cmp	r2, r3
 8010718:	d11c      	bne.n	8010754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010724:	429a      	cmp	r2, r3
 8010726:	d115      	bne.n	8010754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801072e:	4013      	ands	r3, r2
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010734:	4293      	cmp	r3, r2
 8010736:	d10d      	bne.n	8010754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8010742:	429a      	cmp	r2, r3
 8010744:	d106      	bne.n	8010754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010750:	429a      	cmp	r2, r3
 8010752:	d001      	beq.n	8010758 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010754:	2301      	movs	r3, #1
 8010756:	e000      	b.n	801075a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3718      	adds	r7, #24
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	40007000 	.word	0x40007000
 8010768:	40023800 	.word	0x40023800
 801076c:	42470060 	.word	0x42470060

08010770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d101      	bne.n	8010784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	e0cc      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010784:	4b68      	ldr	r3, [pc, #416]	; (8010928 <HAL_RCC_ClockConfig+0x1b8>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f003 030f 	and.w	r3, r3, #15
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	429a      	cmp	r2, r3
 8010790:	d90c      	bls.n	80107ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010792:	4b65      	ldr	r3, [pc, #404]	; (8010928 <HAL_RCC_ClockConfig+0x1b8>)
 8010794:	683a      	ldr	r2, [r7, #0]
 8010796:	b2d2      	uxtb	r2, r2
 8010798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801079a:	4b63      	ldr	r3, [pc, #396]	; (8010928 <HAL_RCC_ClockConfig+0x1b8>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f003 030f 	and.w	r3, r3, #15
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d001      	beq.n	80107ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80107a8:	2301      	movs	r3, #1
 80107aa:	e0b8      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f003 0302 	and.w	r3, r3, #2
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d020      	beq.n	80107fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d005      	beq.n	80107d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80107c4:	4b59      	ldr	r3, [pc, #356]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	4a58      	ldr	r2, [pc, #352]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80107ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80107ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f003 0308 	and.w	r3, r3, #8
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d005      	beq.n	80107e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80107dc:	4b53      	ldr	r3, [pc, #332]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	4a52      	ldr	r2, [pc, #328]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80107e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80107e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80107e8:	4b50      	ldr	r3, [pc, #320]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	494d      	ldr	r1, [pc, #308]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80107f6:	4313      	orrs	r3, r2
 80107f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	2b00      	cmp	r3, #0
 8010804:	d044      	beq.n	8010890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d107      	bne.n	801081e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801080e:	4b47      	ldr	r3, [pc, #284]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010816:	2b00      	cmp	r3, #0
 8010818:	d119      	bne.n	801084e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801081a:	2301      	movs	r3, #1
 801081c:	e07f      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	2b02      	cmp	r3, #2
 8010824:	d003      	beq.n	801082e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801082a:	2b03      	cmp	r3, #3
 801082c:	d107      	bne.n	801083e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801082e:	4b3f      	ldr	r3, [pc, #252]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010836:	2b00      	cmp	r3, #0
 8010838:	d109      	bne.n	801084e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801083a:	2301      	movs	r3, #1
 801083c:	e06f      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801083e:	4b3b      	ldr	r3, [pc, #236]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f003 0302 	and.w	r3, r3, #2
 8010846:	2b00      	cmp	r3, #0
 8010848:	d101      	bne.n	801084e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801084a:	2301      	movs	r3, #1
 801084c:	e067      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801084e:	4b37      	ldr	r3, [pc, #220]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	f023 0203 	bic.w	r2, r3, #3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	4934      	ldr	r1, [pc, #208]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 801085c:	4313      	orrs	r3, r2
 801085e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010860:	f7fc fd32 	bl	800d2c8 <HAL_GetTick>
 8010864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010866:	e00a      	b.n	801087e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010868:	f7fc fd2e 	bl	800d2c8 <HAL_GetTick>
 801086c:	4602      	mov	r2, r0
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	1ad3      	subs	r3, r2, r3
 8010872:	f241 3288 	movw	r2, #5000	; 0x1388
 8010876:	4293      	cmp	r3, r2
 8010878:	d901      	bls.n	801087e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801087a:	2303      	movs	r3, #3
 801087c:	e04f      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801087e:	4b2b      	ldr	r3, [pc, #172]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	f003 020c 	and.w	r2, r3, #12
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	009b      	lsls	r3, r3, #2
 801088c:	429a      	cmp	r2, r3
 801088e:	d1eb      	bne.n	8010868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010890:	4b25      	ldr	r3, [pc, #148]	; (8010928 <HAL_RCC_ClockConfig+0x1b8>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f003 030f 	and.w	r3, r3, #15
 8010898:	683a      	ldr	r2, [r7, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d20c      	bcs.n	80108b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801089e:	4b22      	ldr	r3, [pc, #136]	; (8010928 <HAL_RCC_ClockConfig+0x1b8>)
 80108a0:	683a      	ldr	r2, [r7, #0]
 80108a2:	b2d2      	uxtb	r2, r2
 80108a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80108a6:	4b20      	ldr	r3, [pc, #128]	; (8010928 <HAL_RCC_ClockConfig+0x1b8>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f003 030f 	and.w	r3, r3, #15
 80108ae:	683a      	ldr	r2, [r7, #0]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d001      	beq.n	80108b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80108b4:	2301      	movs	r3, #1
 80108b6:	e032      	b.n	801091e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	f003 0304 	and.w	r3, r3, #4
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d008      	beq.n	80108d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80108c4:	4b19      	ldr	r3, [pc, #100]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	4916      	ldr	r1, [pc, #88]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80108d2:	4313      	orrs	r3, r2
 80108d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f003 0308 	and.w	r3, r3, #8
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d009      	beq.n	80108f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80108e2:	4b12      	ldr	r3, [pc, #72]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	691b      	ldr	r3, [r3, #16]
 80108ee:	00db      	lsls	r3, r3, #3
 80108f0:	490e      	ldr	r1, [pc, #56]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80108f2:	4313      	orrs	r3, r2
 80108f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80108f6:	f000 f82d 	bl	8010954 <HAL_RCC_GetSysClockFreq>
 80108fa:	4602      	mov	r2, r0
 80108fc:	4b0b      	ldr	r3, [pc, #44]	; (801092c <HAL_RCC_ClockConfig+0x1bc>)
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	091b      	lsrs	r3, r3, #4
 8010902:	f003 030f 	and.w	r3, r3, #15
 8010906:	490a      	ldr	r1, [pc, #40]	; (8010930 <HAL_RCC_ClockConfig+0x1c0>)
 8010908:	5ccb      	ldrb	r3, [r1, r3]
 801090a:	fa22 f303 	lsr.w	r3, r2, r3
 801090e:	4a09      	ldr	r2, [pc, #36]	; (8010934 <HAL_RCC_ClockConfig+0x1c4>)
 8010910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010912:	4b09      	ldr	r3, [pc, #36]	; (8010938 <HAL_RCC_ClockConfig+0x1c8>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4618      	mov	r0, r3
 8010918:	f7fa feec 	bl	800b6f4 <HAL_InitTick>

  return HAL_OK;
 801091c:	2300      	movs	r3, #0
}
 801091e:	4618      	mov	r0, r3
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	40023c00 	.word	0x40023c00
 801092c:	40023800 	.word	0x40023800
 8010930:	0801ca74 	.word	0x0801ca74
 8010934:	20000268 	.word	0x20000268
 8010938:	2000026c 	.word	0x2000026c

0801093c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 801093c:	b480      	push	{r7}
 801093e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8010940:	4b03      	ldr	r3, [pc, #12]	; (8010950 <HAL_RCC_EnableCSS+0x14>)
 8010942:	2201      	movs	r2, #1
 8010944:	601a      	str	r2, [r3, #0]
}
 8010946:	bf00      	nop
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr
 8010950:	4247004c 	.word	0x4247004c

08010954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010954:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010958:	b084      	sub	sp, #16
 801095a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801095c:	2300      	movs	r3, #0
 801095e:	607b      	str	r3, [r7, #4]
 8010960:	2300      	movs	r3, #0
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	2300      	movs	r3, #0
 8010966:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010968:	2300      	movs	r3, #0
 801096a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801096c:	4b67      	ldr	r3, [pc, #412]	; (8010b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	f003 030c 	and.w	r3, r3, #12
 8010974:	2b08      	cmp	r3, #8
 8010976:	d00d      	beq.n	8010994 <HAL_RCC_GetSysClockFreq+0x40>
 8010978:	2b08      	cmp	r3, #8
 801097a:	f200 80bd 	bhi.w	8010af8 <HAL_RCC_GetSysClockFreq+0x1a4>
 801097e:	2b00      	cmp	r3, #0
 8010980:	d002      	beq.n	8010988 <HAL_RCC_GetSysClockFreq+0x34>
 8010982:	2b04      	cmp	r3, #4
 8010984:	d003      	beq.n	801098e <HAL_RCC_GetSysClockFreq+0x3a>
 8010986:	e0b7      	b.n	8010af8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010988:	4b61      	ldr	r3, [pc, #388]	; (8010b10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801098a:	60bb      	str	r3, [r7, #8]
       break;
 801098c:	e0b7      	b.n	8010afe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801098e:	4b61      	ldr	r3, [pc, #388]	; (8010b14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8010990:	60bb      	str	r3, [r7, #8]
      break;
 8010992:	e0b4      	b.n	8010afe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010994:	4b5d      	ldr	r3, [pc, #372]	; (8010b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801099c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801099e:	4b5b      	ldr	r3, [pc, #364]	; (8010b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d04d      	beq.n	8010a46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80109aa:	4b58      	ldr	r3, [pc, #352]	; (8010b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	099b      	lsrs	r3, r3, #6
 80109b0:	461a      	mov	r2, r3
 80109b2:	f04f 0300 	mov.w	r3, #0
 80109b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80109ba:	f04f 0100 	mov.w	r1, #0
 80109be:	ea02 0800 	and.w	r8, r2, r0
 80109c2:	ea03 0901 	and.w	r9, r3, r1
 80109c6:	4640      	mov	r0, r8
 80109c8:	4649      	mov	r1, r9
 80109ca:	f04f 0200 	mov.w	r2, #0
 80109ce:	f04f 0300 	mov.w	r3, #0
 80109d2:	014b      	lsls	r3, r1, #5
 80109d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80109d8:	0142      	lsls	r2, r0, #5
 80109da:	4610      	mov	r0, r2
 80109dc:	4619      	mov	r1, r3
 80109de:	ebb0 0008 	subs.w	r0, r0, r8
 80109e2:	eb61 0109 	sbc.w	r1, r1, r9
 80109e6:	f04f 0200 	mov.w	r2, #0
 80109ea:	f04f 0300 	mov.w	r3, #0
 80109ee:	018b      	lsls	r3, r1, #6
 80109f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80109f4:	0182      	lsls	r2, r0, #6
 80109f6:	1a12      	subs	r2, r2, r0
 80109f8:	eb63 0301 	sbc.w	r3, r3, r1
 80109fc:	f04f 0000 	mov.w	r0, #0
 8010a00:	f04f 0100 	mov.w	r1, #0
 8010a04:	00d9      	lsls	r1, r3, #3
 8010a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010a0a:	00d0      	lsls	r0, r2, #3
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	460b      	mov	r3, r1
 8010a10:	eb12 0208 	adds.w	r2, r2, r8
 8010a14:	eb43 0309 	adc.w	r3, r3, r9
 8010a18:	f04f 0000 	mov.w	r0, #0
 8010a1c:	f04f 0100 	mov.w	r1, #0
 8010a20:	0259      	lsls	r1, r3, #9
 8010a22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8010a26:	0250      	lsls	r0, r2, #9
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	4610      	mov	r0, r2
 8010a2e:	4619      	mov	r1, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	461a      	mov	r2, r3
 8010a34:	f04f 0300 	mov.w	r3, #0
 8010a38:	f7f0 f926 	bl	8000c88 <__aeabi_uldivmod>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	460b      	mov	r3, r1
 8010a40:	4613      	mov	r3, r2
 8010a42:	60fb      	str	r3, [r7, #12]
 8010a44:	e04a      	b.n	8010adc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010a46:	4b31      	ldr	r3, [pc, #196]	; (8010b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	099b      	lsrs	r3, r3, #6
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	f04f 0300 	mov.w	r3, #0
 8010a52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010a56:	f04f 0100 	mov.w	r1, #0
 8010a5a:	ea02 0400 	and.w	r4, r2, r0
 8010a5e:	ea03 0501 	and.w	r5, r3, r1
 8010a62:	4620      	mov	r0, r4
 8010a64:	4629      	mov	r1, r5
 8010a66:	f04f 0200 	mov.w	r2, #0
 8010a6a:	f04f 0300 	mov.w	r3, #0
 8010a6e:	014b      	lsls	r3, r1, #5
 8010a70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8010a74:	0142      	lsls	r2, r0, #5
 8010a76:	4610      	mov	r0, r2
 8010a78:	4619      	mov	r1, r3
 8010a7a:	1b00      	subs	r0, r0, r4
 8010a7c:	eb61 0105 	sbc.w	r1, r1, r5
 8010a80:	f04f 0200 	mov.w	r2, #0
 8010a84:	f04f 0300 	mov.w	r3, #0
 8010a88:	018b      	lsls	r3, r1, #6
 8010a8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8010a8e:	0182      	lsls	r2, r0, #6
 8010a90:	1a12      	subs	r2, r2, r0
 8010a92:	eb63 0301 	sbc.w	r3, r3, r1
 8010a96:	f04f 0000 	mov.w	r0, #0
 8010a9a:	f04f 0100 	mov.w	r1, #0
 8010a9e:	00d9      	lsls	r1, r3, #3
 8010aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010aa4:	00d0      	lsls	r0, r2, #3
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	1912      	adds	r2, r2, r4
 8010aac:	eb45 0303 	adc.w	r3, r5, r3
 8010ab0:	f04f 0000 	mov.w	r0, #0
 8010ab4:	f04f 0100 	mov.w	r1, #0
 8010ab8:	0299      	lsls	r1, r3, #10
 8010aba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8010abe:	0290      	lsls	r0, r2, #10
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	461a      	mov	r2, r3
 8010acc:	f04f 0300 	mov.w	r3, #0
 8010ad0:	f7f0 f8da 	bl	8000c88 <__aeabi_uldivmod>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	4613      	mov	r3, r2
 8010ada:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010adc:	4b0b      	ldr	r3, [pc, #44]	; (8010b0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	0c1b      	lsrs	r3, r3, #16
 8010ae2:	f003 0303 	and.w	r3, r3, #3
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	005b      	lsls	r3, r3, #1
 8010aea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010af4:	60bb      	str	r3, [r7, #8]
      break;
 8010af6:	e002      	b.n	8010afe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010af8:	4b05      	ldr	r3, [pc, #20]	; (8010b10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8010afa:	60bb      	str	r3, [r7, #8]
      break;
 8010afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010afe:	68bb      	ldr	r3, [r7, #8]
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010b0a:	bf00      	nop
 8010b0c:	40023800 	.word	0x40023800
 8010b10:	00f42400 	.word	0x00f42400
 8010b14:	007a1200 	.word	0x007a1200

08010b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010b1c:	4b03      	ldr	r3, [pc, #12]	; (8010b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	20000268 	.word	0x20000268

08010b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010b34:	f7ff fff0 	bl	8010b18 <HAL_RCC_GetHCLKFreq>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	4b05      	ldr	r3, [pc, #20]	; (8010b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010b3c:	689b      	ldr	r3, [r3, #8]
 8010b3e:	0a9b      	lsrs	r3, r3, #10
 8010b40:	f003 0307 	and.w	r3, r3, #7
 8010b44:	4903      	ldr	r1, [pc, #12]	; (8010b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010b46:	5ccb      	ldrb	r3, [r1, r3]
 8010b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	40023800 	.word	0x40023800
 8010b54:	0801ca84 	.word	0x0801ca84

08010b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010b5c:	f7ff ffdc 	bl	8010b18 <HAL_RCC_GetHCLKFreq>
 8010b60:	4602      	mov	r2, r0
 8010b62:	4b05      	ldr	r3, [pc, #20]	; (8010b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	0b5b      	lsrs	r3, r3, #13
 8010b68:	f003 0307 	and.w	r3, r3, #7
 8010b6c:	4903      	ldr	r1, [pc, #12]	; (8010b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010b6e:	5ccb      	ldrb	r3, [r1, r3]
 8010b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	40023800 	.word	0x40023800
 8010b7c:	0801ca84 	.word	0x0801ca84

08010b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	220f      	movs	r2, #15
 8010b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010b90:	4b12      	ldr	r3, [pc, #72]	; (8010bdc <HAL_RCC_GetClockConfig+0x5c>)
 8010b92:	689b      	ldr	r3, [r3, #8]
 8010b94:	f003 0203 	and.w	r2, r3, #3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010b9c:	4b0f      	ldr	r3, [pc, #60]	; (8010bdc <HAL_RCC_GetClockConfig+0x5c>)
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010ba8:	4b0c      	ldr	r3, [pc, #48]	; (8010bdc <HAL_RCC_GetClockConfig+0x5c>)
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010bb4:	4b09      	ldr	r3, [pc, #36]	; (8010bdc <HAL_RCC_GetClockConfig+0x5c>)
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	08db      	lsrs	r3, r3, #3
 8010bba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010bc2:	4b07      	ldr	r3, [pc, #28]	; (8010be0 <HAL_RCC_GetClockConfig+0x60>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f003 020f 	and.w	r2, r3, #15
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	601a      	str	r2, [r3, #0]
}
 8010bce:	bf00      	nop
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	40023800 	.word	0x40023800
 8010be0:	40023c00 	.word	0x40023c00

08010be4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b088      	sub	sp, #32
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	099b      	lsrs	r3, r3, #6
 8010c00:	f003 0301 	and.w	r3, r3, #1
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10f      	bne.n	8010c28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d00a      	beq.n	8010c28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	099b      	lsrs	r3, r3, #6
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d004      	beq.n	8010c28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	4798      	blx	r3
    return;
 8010c26:	e0d7      	b.n	8010dd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	085b      	lsrs	r3, r3, #1
 8010c2c:	f003 0301 	and.w	r3, r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00a      	beq.n	8010c4a <HAL_SPI_IRQHandler+0x66>
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	09db      	lsrs	r3, r3, #7
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d004      	beq.n	8010c4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	4798      	blx	r3
    return;
 8010c48:	e0c6      	b.n	8010dd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010c4a:	69bb      	ldr	r3, [r7, #24]
 8010c4c:	095b      	lsrs	r3, r3, #5
 8010c4e:	f003 0301 	and.w	r3, r3, #1
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d10c      	bne.n	8010c70 <HAL_SPI_IRQHandler+0x8c>
 8010c56:	69bb      	ldr	r3, [r7, #24]
 8010c58:	099b      	lsrs	r3, r3, #6
 8010c5a:	f003 0301 	and.w	r3, r3, #1
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d106      	bne.n	8010c70 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	0a1b      	lsrs	r3, r3, #8
 8010c66:	f003 0301 	and.w	r3, r3, #1
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f000 80b4 	beq.w	8010dd8 <HAL_SPI_IRQHandler+0x1f4>
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	095b      	lsrs	r3, r3, #5
 8010c74:	f003 0301 	and.w	r3, r3, #1
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f000 80ad 	beq.w	8010dd8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	099b      	lsrs	r3, r3, #6
 8010c82:	f003 0301 	and.w	r3, r3, #1
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d023      	beq.n	8010cd2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b03      	cmp	r3, #3
 8010c94:	d011      	beq.n	8010cba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c9a:	f043 0204 	orr.w	r2, r3, #4
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	617b      	str	r3, [r7, #20]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	617b      	str	r3, [r7, #20]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	617b      	str	r3, [r7, #20]
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	e00b      	b.n	8010cd2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010cba:	2300      	movs	r3, #0
 8010cbc:	613b      	str	r3, [r7, #16]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	613b      	str	r3, [r7, #16]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	689b      	ldr	r3, [r3, #8]
 8010ccc:	613b      	str	r3, [r7, #16]
 8010cce:	693b      	ldr	r3, [r7, #16]
        return;
 8010cd0:	e082      	b.n	8010dd8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	095b      	lsrs	r3, r3, #5
 8010cd6:	f003 0301 	and.w	r3, r3, #1
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d014      	beq.n	8010d08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ce2:	f043 0201 	orr.w	r2, r3, #1
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010cea:	2300      	movs	r3, #0
 8010cec:	60fb      	str	r3, [r7, #12]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	60fb      	str	r3, [r7, #12]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d04:	601a      	str	r2, [r3, #0]
 8010d06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	0a1b      	lsrs	r3, r3, #8
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d00c      	beq.n	8010d2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d18:	f043 0208 	orr.w	r2, r3, #8
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010d20:	2300      	movs	r3, #0
 8010d22:	60bb      	str	r3, [r7, #8]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	60bb      	str	r3, [r7, #8]
 8010d2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d04f      	beq.n	8010dd6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	685a      	ldr	r2, [r3, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010d44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2201      	movs	r2, #1
 8010d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	f003 0302 	and.w	r3, r3, #2
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d104      	bne.n	8010d62 <HAL_SPI_IRQHandler+0x17e>
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	f003 0301 	and.w	r3, r3, #1
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d034      	beq.n	8010dcc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	685a      	ldr	r2, [r3, #4]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	f022 0203 	bic.w	r2, r2, #3
 8010d70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d011      	beq.n	8010d9e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d7e:	4a18      	ldr	r2, [pc, #96]	; (8010de0 <HAL_SPI_IRQHandler+0x1fc>)
 8010d80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fd fa46 	bl	800e218 <HAL_DMA_Abort_IT>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d005      	beq.n	8010d9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d016      	beq.n	8010dd4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010daa:	4a0d      	ldr	r2, [pc, #52]	; (8010de0 <HAL_SPI_IRQHandler+0x1fc>)
 8010dac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fd fa30 	bl	800e218 <HAL_DMA_Abort_IT>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00a      	beq.n	8010dd4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8010dca:	e003      	b.n	8010dd4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 f809 	bl	8010de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010dd2:	e000      	b.n	8010dd6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010dd4:	bf00      	nop
    return;
 8010dd6:	bf00      	nop
  }
}
 8010dd8:	3720      	adds	r7, #32
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	08010df9 	.word	0x08010df9

08010de4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b083      	sub	sp, #12
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010dec:	bf00      	nop
 8010dee:	370c      	adds	r7, #12
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f7ff ffe6 	bl	8010de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010e18:	bf00      	nop
 8010e1a:	3710      	adds	r7, #16
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d101      	bne.n	8010e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e01d      	b.n	8010e6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7f1 fd3a 	bl	80028c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2202      	movs	r2, #2
 8010e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	4610      	mov	r0, r2
 8010e60:	f000 fc3e 	bl	80116e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2201      	movs	r2, #1
 8010e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010e76:	b480      	push	{r7}
 8010e78:	b085      	sub	sp, #20
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2202      	movs	r2, #2
 8010e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	f003 0307 	and.w	r3, r3, #7
 8010e90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b06      	cmp	r3, #6
 8010e96:	d007      	beq.n	8010ea8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f042 0201 	orr.w	r2, r2, #1
 8010ea6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3714      	adds	r7, #20
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	b085      	sub	sp, #20
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	68da      	ldr	r2, [r3, #12]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f042 0201 	orr.w	r2, r2, #1
 8010ed4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	f003 0307 	and.w	r3, r3, #7
 8010ee0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b06      	cmp	r3, #6
 8010ee6:	d007      	beq.n	8010ef8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f042 0201 	orr.w	r2, r2, #1
 8010ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3714      	adds	r7, #20
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr

08010f06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b082      	sub	sp, #8
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d101      	bne.n	8010f18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010f14:	2301      	movs	r3, #1
 8010f16:	e01d      	b.n	8010f54 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d106      	bne.n	8010f32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f7f1 fb89 	bl	8002644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2202      	movs	r2, #2
 8010f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3304      	adds	r3, #4
 8010f42:	4619      	mov	r1, r3
 8010f44:	4610      	mov	r0, r2
 8010f46:	f000 fbcb 	bl	80116e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010f52:	2300      	movs	r3, #0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3708      	adds	r7, #8
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	6839      	ldr	r1, [r7, #0]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 fea0 	bl	8011cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a15      	ldr	r2, [pc, #84]	; (8010fd0 <HAL_TIM_PWM_Start+0x74>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d004      	beq.n	8010f88 <HAL_TIM_PWM_Start+0x2c>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a14      	ldr	r2, [pc, #80]	; (8010fd4 <HAL_TIM_PWM_Start+0x78>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d101      	bne.n	8010f8c <HAL_TIM_PWM_Start+0x30>
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e000      	b.n	8010f8e <HAL_TIM_PWM_Start+0x32>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d007      	beq.n	8010fa2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	689b      	ldr	r3, [r3, #8]
 8010fa8:	f003 0307 	and.w	r3, r3, #7
 8010fac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2b06      	cmp	r3, #6
 8010fb2:	d007      	beq.n	8010fc4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f042 0201 	orr.w	r2, r2, #1
 8010fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010fc4:	2300      	movs	r3, #0
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3710      	adds	r7, #16
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	40010000 	.word	0x40010000
 8010fd4:	40010400 	.word	0x40010400

08010fd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	e083      	b.n	80110f4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d106      	bne.n	8011006 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7f1 ff11 	bl	8002e28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2202      	movs	r2, #2
 801100a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	6812      	ldr	r2, [r2, #0]
 8011018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801101c:	f023 0307 	bic.w	r3, r3, #7
 8011020:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	3304      	adds	r3, #4
 801102a:	4619      	mov	r1, r3
 801102c:	4610      	mov	r0, r2
 801102e:	f000 fb57 	bl	80116e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	699b      	ldr	r3, [r3, #24]
 8011040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	6a1b      	ldr	r3, [r3, #32]
 8011048:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	697a      	ldr	r2, [r7, #20]
 8011050:	4313      	orrs	r3, r2
 8011052:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801105a:	f023 0303 	bic.w	r3, r3, #3
 801105e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	689a      	ldr	r2, [r3, #8]
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	699b      	ldr	r3, [r3, #24]
 8011068:	021b      	lsls	r3, r3, #8
 801106a:	4313      	orrs	r3, r2
 801106c:	693a      	ldr	r2, [r7, #16]
 801106e:	4313      	orrs	r3, r2
 8011070:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011078:	f023 030c 	bic.w	r3, r3, #12
 801107c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	68da      	ldr	r2, [r3, #12]
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	69db      	ldr	r3, [r3, #28]
 8011092:	021b      	lsls	r3, r3, #8
 8011094:	4313      	orrs	r3, r2
 8011096:	693a      	ldr	r2, [r7, #16]
 8011098:	4313      	orrs	r3, r2
 801109a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	691b      	ldr	r3, [r3, #16]
 80110a0:	011a      	lsls	r2, r3, #4
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	031b      	lsls	r3, r3, #12
 80110a8:	4313      	orrs	r3, r2
 80110aa:	693a      	ldr	r2, [r7, #16]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80110b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80110be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	695b      	ldr	r3, [r3, #20]
 80110c8:	011b      	lsls	r3, r3, #4
 80110ca:	4313      	orrs	r3, r2
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	697a      	ldr	r2, [r7, #20]
 80110d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	693a      	ldr	r2, [r7, #16]
 80110e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2201      	movs	r2, #1
 80110ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3718      	adds	r7, #24
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d003      	beq.n	8011114 <HAL_TIM_Encoder_Start+0x18>
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	2b04      	cmp	r3, #4
 8011110:	d008      	beq.n	8011124 <HAL_TIM_Encoder_Start+0x28>
 8011112:	e00f      	b.n	8011134 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2201      	movs	r2, #1
 801111a:	2100      	movs	r1, #0
 801111c:	4618      	mov	r0, r3
 801111e:	f000 fdc9 	bl	8011cb4 <TIM_CCxChannelCmd>
      break;
 8011122:	e016      	b.n	8011152 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2201      	movs	r2, #1
 801112a:	2104      	movs	r1, #4
 801112c:	4618      	mov	r0, r3
 801112e:	f000 fdc1 	bl	8011cb4 <TIM_CCxChannelCmd>
      break;
 8011132:	e00e      	b.n	8011152 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2201      	movs	r2, #1
 801113a:	2100      	movs	r1, #0
 801113c:	4618      	mov	r0, r3
 801113e:	f000 fdb9 	bl	8011cb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2201      	movs	r2, #1
 8011148:	2104      	movs	r1, #4
 801114a:	4618      	mov	r0, r3
 801114c:	f000 fdb2 	bl	8011cb4 <TIM_CCxChannelCmd>
      break;
 8011150:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f042 0201 	orr.w	r2, r2, #1
 8011160:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	f003 0302 	and.w	r3, r3, #2
 801117e:	2b02      	cmp	r3, #2
 8011180:	d122      	bne.n	80111c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	f003 0302 	and.w	r3, r3, #2
 801118c:	2b02      	cmp	r3, #2
 801118e:	d11b      	bne.n	80111c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f06f 0202 	mvn.w	r2, #2
 8011198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2201      	movs	r2, #1
 801119e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	699b      	ldr	r3, [r3, #24]
 80111a6:	f003 0303 	and.w	r3, r3, #3
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d003      	beq.n	80111b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 fa78 	bl	80116a4 <HAL_TIM_IC_CaptureCallback>
 80111b4:	e005      	b.n	80111c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f000 fa6a 	bl	8011690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fa7b 	bl	80116b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	691b      	ldr	r3, [r3, #16]
 80111ce:	f003 0304 	and.w	r3, r3, #4
 80111d2:	2b04      	cmp	r3, #4
 80111d4:	d122      	bne.n	801121c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	f003 0304 	and.w	r3, r3, #4
 80111e0:	2b04      	cmp	r3, #4
 80111e2:	d11b      	bne.n	801121c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f06f 0204 	mvn.w	r2, #4
 80111ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2202      	movs	r2, #2
 80111f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d003      	beq.n	801120a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 fa4e 	bl	80116a4 <HAL_TIM_IC_CaptureCallback>
 8011208:	e005      	b.n	8011216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 fa40 	bl	8011690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 fa51 	bl	80116b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	691b      	ldr	r3, [r3, #16]
 8011222:	f003 0308 	and.w	r3, r3, #8
 8011226:	2b08      	cmp	r3, #8
 8011228:	d122      	bne.n	8011270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	f003 0308 	and.w	r3, r3, #8
 8011234:	2b08      	cmp	r3, #8
 8011236:	d11b      	bne.n	8011270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f06f 0208 	mvn.w	r2, #8
 8011240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2204      	movs	r2, #4
 8011246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	69db      	ldr	r3, [r3, #28]
 801124e:	f003 0303 	and.w	r3, r3, #3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 fa24 	bl	80116a4 <HAL_TIM_IC_CaptureCallback>
 801125c:	e005      	b.n	801126a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 fa16 	bl	8011690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f000 fa27 	bl	80116b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	f003 0310 	and.w	r3, r3, #16
 801127a:	2b10      	cmp	r3, #16
 801127c:	d122      	bne.n	80112c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	f003 0310 	and.w	r3, r3, #16
 8011288:	2b10      	cmp	r3, #16
 801128a:	d11b      	bne.n	80112c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f06f 0210 	mvn.w	r2, #16
 8011294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2208      	movs	r2, #8
 801129a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	69db      	ldr	r3, [r3, #28]
 80112a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f000 f9fa 	bl	80116a4 <HAL_TIM_IC_CaptureCallback>
 80112b0:	e005      	b.n	80112be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f9ec 	bl	8011690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 f9fd 	bl	80116b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	691b      	ldr	r3, [r3, #16]
 80112ca:	f003 0301 	and.w	r3, r3, #1
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d10e      	bne.n	80112f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	f003 0301 	and.w	r3, r3, #1
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d107      	bne.n	80112f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f06f 0201 	mvn.w	r2, #1
 80112e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f7f9 fc42 	bl	800ab74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	691b      	ldr	r3, [r3, #16]
 80112f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112fa:	2b80      	cmp	r3, #128	; 0x80
 80112fc:	d10e      	bne.n	801131c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011308:	2b80      	cmp	r3, #128	; 0x80
 801130a:	d107      	bne.n	801131c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fd78 	bl	8011e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	691b      	ldr	r3, [r3, #16]
 8011322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011326:	2b40      	cmp	r3, #64	; 0x40
 8011328:	d10e      	bne.n	8011348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011334:	2b40      	cmp	r3, #64	; 0x40
 8011336:	d107      	bne.n	8011348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 f9c2 	bl	80116cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	691b      	ldr	r3, [r3, #16]
 801134e:	f003 0320 	and.w	r3, r3, #32
 8011352:	2b20      	cmp	r3, #32
 8011354:	d10e      	bne.n	8011374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	f003 0320 	and.w	r3, r3, #32
 8011360:	2b20      	cmp	r3, #32
 8011362:	d107      	bne.n	8011374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f06f 0220 	mvn.w	r2, #32
 801136c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 fd42 	bl	8011df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011374:	bf00      	nop
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801138e:	2b01      	cmp	r3, #1
 8011390:	d101      	bne.n	8011396 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8011392:	2302      	movs	r3, #2
 8011394:	e0b4      	b.n	8011500 <HAL_TIM_PWM_ConfigChannel+0x184>
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2201      	movs	r2, #1
 801139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2202      	movs	r2, #2
 80113a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2b0c      	cmp	r3, #12
 80113aa:	f200 809f 	bhi.w	80114ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80113ae:	a201      	add	r2, pc, #4	; (adr r2, 80113b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80113b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b4:	080113e9 	.word	0x080113e9
 80113b8:	080114ed 	.word	0x080114ed
 80113bc:	080114ed 	.word	0x080114ed
 80113c0:	080114ed 	.word	0x080114ed
 80113c4:	08011429 	.word	0x08011429
 80113c8:	080114ed 	.word	0x080114ed
 80113cc:	080114ed 	.word	0x080114ed
 80113d0:	080114ed 	.word	0x080114ed
 80113d4:	0801146b 	.word	0x0801146b
 80113d8:	080114ed 	.word	0x080114ed
 80113dc:	080114ed 	.word	0x080114ed
 80113e0:	080114ed 	.word	0x080114ed
 80113e4:	080114ab 	.word	0x080114ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	68b9      	ldr	r1, [r7, #8]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f000 fa16 	bl	8011820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	699a      	ldr	r2, [r3, #24]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f042 0208 	orr.w	r2, r2, #8
 8011402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	699a      	ldr	r2, [r3, #24]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f022 0204 	bic.w	r2, r2, #4
 8011412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	6999      	ldr	r1, [r3, #24]
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	691a      	ldr	r2, [r3, #16]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	430a      	orrs	r2, r1
 8011424:	619a      	str	r2, [r3, #24]
      break;
 8011426:	e062      	b.n	80114ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	68b9      	ldr	r1, [r7, #8]
 801142e:	4618      	mov	r0, r3
 8011430:	f000 fa66 	bl	8011900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	699a      	ldr	r2, [r3, #24]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	699a      	ldr	r2, [r3, #24]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	6999      	ldr	r1, [r3, #24]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	021a      	lsls	r2, r3, #8
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	430a      	orrs	r2, r1
 8011466:	619a      	str	r2, [r3, #24]
      break;
 8011468:	e041      	b.n	80114ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	68b9      	ldr	r1, [r7, #8]
 8011470:	4618      	mov	r0, r3
 8011472:	f000 fabb 	bl	80119ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	69da      	ldr	r2, [r3, #28]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f042 0208 	orr.w	r2, r2, #8
 8011484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	69da      	ldr	r2, [r3, #28]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f022 0204 	bic.w	r2, r2, #4
 8011494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	69d9      	ldr	r1, [r3, #28]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	691a      	ldr	r2, [r3, #16]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	430a      	orrs	r2, r1
 80114a6:	61da      	str	r2, [r3, #28]
      break;
 80114a8:	e021      	b.n	80114ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68b9      	ldr	r1, [r7, #8]
 80114b0:	4618      	mov	r0, r3
 80114b2:	f000 fb0f 	bl	8011ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	69da      	ldr	r2, [r3, #28]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	69da      	ldr	r2, [r3, #28]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	69d9      	ldr	r1, [r3, #28]
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	691b      	ldr	r3, [r3, #16]
 80114e0:	021a      	lsls	r2, r3, #8
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	430a      	orrs	r2, r1
 80114e8:	61da      	str	r2, [r3, #28]
      break;
 80114ea:	e000      	b.n	80114ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80114ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2201      	movs	r2, #1
 80114f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80114fe:	2300      	movs	r3, #0
}
 8011500:	4618      	mov	r0, r3
 8011502:	3710      	adds	r7, #16
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011518:	2b01      	cmp	r3, #1
 801151a:	d101      	bne.n	8011520 <HAL_TIM_ConfigClockSource+0x18>
 801151c:	2302      	movs	r3, #2
 801151e:	e0b3      	b.n	8011688 <HAL_TIM_ConfigClockSource+0x180>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2201      	movs	r2, #1
 8011524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2202      	movs	r2, #2
 801152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801153e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011546:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	68fa      	ldr	r2, [r7, #12]
 801154e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011558:	d03e      	beq.n	80115d8 <HAL_TIM_ConfigClockSource+0xd0>
 801155a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801155e:	f200 8087 	bhi.w	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011566:	f000 8085 	beq.w	8011674 <HAL_TIM_ConfigClockSource+0x16c>
 801156a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801156e:	d87f      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011570:	2b70      	cmp	r3, #112	; 0x70
 8011572:	d01a      	beq.n	80115aa <HAL_TIM_ConfigClockSource+0xa2>
 8011574:	2b70      	cmp	r3, #112	; 0x70
 8011576:	d87b      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011578:	2b60      	cmp	r3, #96	; 0x60
 801157a:	d050      	beq.n	801161e <HAL_TIM_ConfigClockSource+0x116>
 801157c:	2b60      	cmp	r3, #96	; 0x60
 801157e:	d877      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011580:	2b50      	cmp	r3, #80	; 0x50
 8011582:	d03c      	beq.n	80115fe <HAL_TIM_ConfigClockSource+0xf6>
 8011584:	2b50      	cmp	r3, #80	; 0x50
 8011586:	d873      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011588:	2b40      	cmp	r3, #64	; 0x40
 801158a:	d058      	beq.n	801163e <HAL_TIM_ConfigClockSource+0x136>
 801158c:	2b40      	cmp	r3, #64	; 0x40
 801158e:	d86f      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011590:	2b30      	cmp	r3, #48	; 0x30
 8011592:	d064      	beq.n	801165e <HAL_TIM_ConfigClockSource+0x156>
 8011594:	2b30      	cmp	r3, #48	; 0x30
 8011596:	d86b      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 8011598:	2b20      	cmp	r3, #32
 801159a:	d060      	beq.n	801165e <HAL_TIM_ConfigClockSource+0x156>
 801159c:	2b20      	cmp	r3, #32
 801159e:	d867      	bhi.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d05c      	beq.n	801165e <HAL_TIM_ConfigClockSource+0x156>
 80115a4:	2b10      	cmp	r3, #16
 80115a6:	d05a      	beq.n	801165e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80115a8:	e062      	b.n	8011670 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6818      	ldr	r0, [r3, #0]
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	6899      	ldr	r1, [r3, #8]
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	685a      	ldr	r2, [r3, #4]
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	f000 fb5b 	bl	8011c74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	689b      	ldr	r3, [r3, #8]
 80115c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80115cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	68fa      	ldr	r2, [r7, #12]
 80115d4:	609a      	str	r2, [r3, #8]
      break;
 80115d6:	e04e      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6818      	ldr	r0, [r3, #0]
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	6899      	ldr	r1, [r3, #8]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	685a      	ldr	r2, [r3, #4]
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	f000 fb44 	bl	8011c74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	689a      	ldr	r2, [r3, #8]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80115fa:	609a      	str	r2, [r3, #8]
      break;
 80115fc:	e03b      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6818      	ldr	r0, [r3, #0]
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	6859      	ldr	r1, [r3, #4]
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	68db      	ldr	r3, [r3, #12]
 801160a:	461a      	mov	r2, r3
 801160c:	f000 fab8 	bl	8011b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2150      	movs	r1, #80	; 0x50
 8011616:	4618      	mov	r0, r3
 8011618:	f000 fb11 	bl	8011c3e <TIM_ITRx_SetConfig>
      break;
 801161c:	e02b      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6818      	ldr	r0, [r3, #0]
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	6859      	ldr	r1, [r3, #4]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	461a      	mov	r2, r3
 801162c:	f000 fad7 	bl	8011bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	2160      	movs	r1, #96	; 0x60
 8011636:	4618      	mov	r0, r3
 8011638:	f000 fb01 	bl	8011c3e <TIM_ITRx_SetConfig>
      break;
 801163c:	e01b      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6818      	ldr	r0, [r3, #0]
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	6859      	ldr	r1, [r3, #4]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	68db      	ldr	r3, [r3, #12]
 801164a:	461a      	mov	r2, r3
 801164c:	f000 fa98 	bl	8011b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2140      	movs	r1, #64	; 0x40
 8011656:	4618      	mov	r0, r3
 8011658:	f000 faf1 	bl	8011c3e <TIM_ITRx_SetConfig>
      break;
 801165c:	e00b      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	4619      	mov	r1, r3
 8011668:	4610      	mov	r0, r2
 801166a:	f000 fae8 	bl	8011c3e <TIM_ITRx_SetConfig>
      break;
 801166e:	e002      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011670:	bf00      	nop
 8011672:	e000      	b.n	8011676 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8011674:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2201      	movs	r2, #1
 801167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2200      	movs	r2, #0
 8011682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3710      	adds	r7, #16
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011698:	bf00      	nop
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr

080116a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80116ac:	bf00      	nop
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80116c0:	bf00      	nop
 80116c2:	370c      	adds	r7, #12
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr

080116cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b083      	sub	sp, #12
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80116d4:	bf00      	nop
 80116d6:	370c      	adds	r7, #12
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	4a40      	ldr	r2, [pc, #256]	; (80117f4 <TIM_Base_SetConfig+0x114>)
 80116f4:	4293      	cmp	r3, r2
 80116f6:	d013      	beq.n	8011720 <TIM_Base_SetConfig+0x40>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116fe:	d00f      	beq.n	8011720 <TIM_Base_SetConfig+0x40>
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	4a3d      	ldr	r2, [pc, #244]	; (80117f8 <TIM_Base_SetConfig+0x118>)
 8011704:	4293      	cmp	r3, r2
 8011706:	d00b      	beq.n	8011720 <TIM_Base_SetConfig+0x40>
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	4a3c      	ldr	r2, [pc, #240]	; (80117fc <TIM_Base_SetConfig+0x11c>)
 801170c:	4293      	cmp	r3, r2
 801170e:	d007      	beq.n	8011720 <TIM_Base_SetConfig+0x40>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	4a3b      	ldr	r2, [pc, #236]	; (8011800 <TIM_Base_SetConfig+0x120>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d003      	beq.n	8011720 <TIM_Base_SetConfig+0x40>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	4a3a      	ldr	r2, [pc, #232]	; (8011804 <TIM_Base_SetConfig+0x124>)
 801171c:	4293      	cmp	r3, r2
 801171e:	d108      	bne.n	8011732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	4313      	orrs	r3, r2
 8011730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	4a2f      	ldr	r2, [pc, #188]	; (80117f4 <TIM_Base_SetConfig+0x114>)
 8011736:	4293      	cmp	r3, r2
 8011738:	d02b      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011740:	d027      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	4a2c      	ldr	r2, [pc, #176]	; (80117f8 <TIM_Base_SetConfig+0x118>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d023      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4a2b      	ldr	r2, [pc, #172]	; (80117fc <TIM_Base_SetConfig+0x11c>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d01f      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4a2a      	ldr	r2, [pc, #168]	; (8011800 <TIM_Base_SetConfig+0x120>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d01b      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4a29      	ldr	r2, [pc, #164]	; (8011804 <TIM_Base_SetConfig+0x124>)
 801175e:	4293      	cmp	r3, r2
 8011760:	d017      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4a28      	ldr	r2, [pc, #160]	; (8011808 <TIM_Base_SetConfig+0x128>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d013      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4a27      	ldr	r2, [pc, #156]	; (801180c <TIM_Base_SetConfig+0x12c>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d00f      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4a26      	ldr	r2, [pc, #152]	; (8011810 <TIM_Base_SetConfig+0x130>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d00b      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4a25      	ldr	r2, [pc, #148]	; (8011814 <TIM_Base_SetConfig+0x134>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d007      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4a24      	ldr	r2, [pc, #144]	; (8011818 <TIM_Base_SetConfig+0x138>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d003      	beq.n	8011792 <TIM_Base_SetConfig+0xb2>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4a23      	ldr	r2, [pc, #140]	; (801181c <TIM_Base_SetConfig+0x13c>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d108      	bne.n	80117a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	68fa      	ldr	r2, [r7, #12]
 80117a0:	4313      	orrs	r3, r2
 80117a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	689a      	ldr	r2, [r3, #8]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4a0a      	ldr	r2, [pc, #40]	; (80117f4 <TIM_Base_SetConfig+0x114>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d003      	beq.n	80117d8 <TIM_Base_SetConfig+0xf8>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a0c      	ldr	r2, [pc, #48]	; (8011804 <TIM_Base_SetConfig+0x124>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d103      	bne.n	80117e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	691a      	ldr	r2, [r3, #16]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2201      	movs	r2, #1
 80117e4:	615a      	str	r2, [r3, #20]
}
 80117e6:	bf00      	nop
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	40010000 	.word	0x40010000
 80117f8:	40000400 	.word	0x40000400
 80117fc:	40000800 	.word	0x40000800
 8011800:	40000c00 	.word	0x40000c00
 8011804:	40010400 	.word	0x40010400
 8011808:	40014000 	.word	0x40014000
 801180c:	40014400 	.word	0x40014400
 8011810:	40014800 	.word	0x40014800
 8011814:	40001800 	.word	0x40001800
 8011818:	40001c00 	.word	0x40001c00
 801181c:	40002000 	.word	0x40002000

08011820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011820:	b480      	push	{r7}
 8011822:	b087      	sub	sp, #28
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a1b      	ldr	r3, [r3, #32]
 801182e:	f023 0201 	bic.w	r2, r3, #1
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a1b      	ldr	r3, [r3, #32]
 801183a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	699b      	ldr	r3, [r3, #24]
 8011846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801184e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f023 0303 	bic.w	r3, r3, #3
 8011856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	68fa      	ldr	r2, [r7, #12]
 801185e:	4313      	orrs	r3, r2
 8011860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f023 0302 	bic.w	r3, r3, #2
 8011868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	697a      	ldr	r2, [r7, #20]
 8011870:	4313      	orrs	r3, r2
 8011872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4a20      	ldr	r2, [pc, #128]	; (80118f8 <TIM_OC1_SetConfig+0xd8>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d003      	beq.n	8011884 <TIM_OC1_SetConfig+0x64>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4a1f      	ldr	r2, [pc, #124]	; (80118fc <TIM_OC1_SetConfig+0xdc>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d10c      	bne.n	801189e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	f023 0308 	bic.w	r3, r3, #8
 801188a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	697a      	ldr	r2, [r7, #20]
 8011892:	4313      	orrs	r3, r2
 8011894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f023 0304 	bic.w	r3, r3, #4
 801189c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4a15      	ldr	r2, [pc, #84]	; (80118f8 <TIM_OC1_SetConfig+0xd8>)
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d003      	beq.n	80118ae <TIM_OC1_SetConfig+0x8e>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4a14      	ldr	r2, [pc, #80]	; (80118fc <TIM_OC1_SetConfig+0xdc>)
 80118aa:	4293      	cmp	r3, r2
 80118ac:	d111      	bne.n	80118d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80118b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80118bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	695b      	ldr	r3, [r3, #20]
 80118c2:	693a      	ldr	r2, [r7, #16]
 80118c4:	4313      	orrs	r3, r2
 80118c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	699b      	ldr	r3, [r3, #24]
 80118cc:	693a      	ldr	r2, [r7, #16]
 80118ce:	4313      	orrs	r3, r2
 80118d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	693a      	ldr	r2, [r7, #16]
 80118d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	685a      	ldr	r2, [r3, #4]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	621a      	str	r2, [r3, #32]
}
 80118ec:	bf00      	nop
 80118ee:	371c      	adds	r7, #28
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr
 80118f8:	40010000 	.word	0x40010000
 80118fc:	40010400 	.word	0x40010400

08011900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011900:	b480      	push	{r7}
 8011902:	b087      	sub	sp, #28
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a1b      	ldr	r3, [r3, #32]
 801190e:	f023 0210 	bic.w	r2, r3, #16
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a1b      	ldr	r3, [r3, #32]
 801191a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	699b      	ldr	r3, [r3, #24]
 8011926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801192e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	021b      	lsls	r3, r3, #8
 801193e:	68fa      	ldr	r2, [r7, #12]
 8011940:	4313      	orrs	r3, r2
 8011942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	f023 0320 	bic.w	r3, r3, #32
 801194a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	011b      	lsls	r3, r3, #4
 8011952:	697a      	ldr	r2, [r7, #20]
 8011954:	4313      	orrs	r3, r2
 8011956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	4a22      	ldr	r2, [pc, #136]	; (80119e4 <TIM_OC2_SetConfig+0xe4>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d003      	beq.n	8011968 <TIM_OC2_SetConfig+0x68>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4a21      	ldr	r2, [pc, #132]	; (80119e8 <TIM_OC2_SetConfig+0xe8>)
 8011964:	4293      	cmp	r3, r2
 8011966:	d10d      	bne.n	8011984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801196e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	011b      	lsls	r3, r3, #4
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	4313      	orrs	r3, r2
 801197a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	4a17      	ldr	r2, [pc, #92]	; (80119e4 <TIM_OC2_SetConfig+0xe4>)
 8011988:	4293      	cmp	r3, r2
 801198a:	d003      	beq.n	8011994 <TIM_OC2_SetConfig+0x94>
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	4a16      	ldr	r2, [pc, #88]	; (80119e8 <TIM_OC2_SetConfig+0xe8>)
 8011990:	4293      	cmp	r3, r2
 8011992:	d113      	bne.n	80119bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801199a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	695b      	ldr	r3, [r3, #20]
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	693a      	ldr	r2, [r7, #16]
 80119ac:	4313      	orrs	r3, r2
 80119ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	699b      	ldr	r3, [r3, #24]
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	693a      	ldr	r2, [r7, #16]
 80119b8:	4313      	orrs	r3, r2
 80119ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	693a      	ldr	r2, [r7, #16]
 80119c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	685a      	ldr	r2, [r3, #4]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	697a      	ldr	r2, [r7, #20]
 80119d4:	621a      	str	r2, [r3, #32]
}
 80119d6:	bf00      	nop
 80119d8:	371c      	adds	r7, #28
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	40010000 	.word	0x40010000
 80119e8:	40010400 	.word	0x40010400

080119ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b087      	sub	sp, #28
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6a1b      	ldr	r3, [r3, #32]
 80119fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a1b      	ldr	r3, [r3, #32]
 8011a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	69db      	ldr	r3, [r3, #28]
 8011a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f023 0303 	bic.w	r3, r3, #3
 8011a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	68fa      	ldr	r2, [r7, #12]
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	689b      	ldr	r3, [r3, #8]
 8011a3a:	021b      	lsls	r3, r3, #8
 8011a3c:	697a      	ldr	r2, [r7, #20]
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4a21      	ldr	r2, [pc, #132]	; (8011acc <TIM_OC3_SetConfig+0xe0>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d003      	beq.n	8011a52 <TIM_OC3_SetConfig+0x66>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a20      	ldr	r2, [pc, #128]	; (8011ad0 <TIM_OC3_SetConfig+0xe4>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d10d      	bne.n	8011a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	021b      	lsls	r3, r3, #8
 8011a60:	697a      	ldr	r2, [r7, #20]
 8011a62:	4313      	orrs	r3, r2
 8011a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4a16      	ldr	r2, [pc, #88]	; (8011acc <TIM_OC3_SetConfig+0xe0>)
 8011a72:	4293      	cmp	r3, r2
 8011a74:	d003      	beq.n	8011a7e <TIM_OC3_SetConfig+0x92>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	4a15      	ldr	r2, [pc, #84]	; (8011ad0 <TIM_OC3_SetConfig+0xe4>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d113      	bne.n	8011aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	695b      	ldr	r3, [r3, #20]
 8011a92:	011b      	lsls	r3, r3, #4
 8011a94:	693a      	ldr	r2, [r7, #16]
 8011a96:	4313      	orrs	r3, r2
 8011a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	011b      	lsls	r3, r3, #4
 8011aa0:	693a      	ldr	r2, [r7, #16]
 8011aa2:	4313      	orrs	r3, r2
 8011aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	693a      	ldr	r2, [r7, #16]
 8011aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	68fa      	ldr	r2, [r7, #12]
 8011ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	685a      	ldr	r2, [r3, #4]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	697a      	ldr	r2, [r7, #20]
 8011abe:	621a      	str	r2, [r3, #32]
}
 8011ac0:	bf00      	nop
 8011ac2:	371c      	adds	r7, #28
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	40010000 	.word	0x40010000
 8011ad0:	40010400 	.word	0x40010400

08011ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ad4:	b480      	push	{r7}
 8011ad6:	b087      	sub	sp, #28
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a1b      	ldr	r3, [r3, #32]
 8011ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6a1b      	ldr	r3, [r3, #32]
 8011aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	69db      	ldr	r3, [r3, #28]
 8011afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	021b      	lsls	r3, r3, #8
 8011b12:	68fa      	ldr	r2, [r7, #12]
 8011b14:	4313      	orrs	r3, r2
 8011b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	031b      	lsls	r3, r3, #12
 8011b26:	693a      	ldr	r2, [r7, #16]
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4a12      	ldr	r2, [pc, #72]	; (8011b78 <TIM_OC4_SetConfig+0xa4>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d003      	beq.n	8011b3c <TIM_OC4_SetConfig+0x68>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	4a11      	ldr	r2, [pc, #68]	; (8011b7c <TIM_OC4_SetConfig+0xa8>)
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d109      	bne.n	8011b50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	695b      	ldr	r3, [r3, #20]
 8011b48:	019b      	lsls	r3, r3, #6
 8011b4a:	697a      	ldr	r2, [r7, #20]
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	697a      	ldr	r2, [r7, #20]
 8011b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	68fa      	ldr	r2, [r7, #12]
 8011b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	685a      	ldr	r2, [r3, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	693a      	ldr	r2, [r7, #16]
 8011b68:	621a      	str	r2, [r3, #32]
}
 8011b6a:	bf00      	nop
 8011b6c:	371c      	adds	r7, #28
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	40010000 	.word	0x40010000
 8011b7c:	40010400 	.word	0x40010400

08011b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b087      	sub	sp, #28
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	6a1b      	ldr	r3, [r3, #32]
 8011b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6a1b      	ldr	r3, [r3, #32]
 8011b96:	f023 0201 	bic.w	r2, r3, #1
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	699b      	ldr	r3, [r3, #24]
 8011ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	011b      	lsls	r3, r3, #4
 8011bb0:	693a      	ldr	r2, [r7, #16]
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	f023 030a 	bic.w	r3, r3, #10
 8011bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	693a      	ldr	r2, [r7, #16]
 8011bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	697a      	ldr	r2, [r7, #20]
 8011bd0:	621a      	str	r2, [r3, #32]
}
 8011bd2:	bf00      	nop
 8011bd4:	371c      	adds	r7, #28
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011bde:	b480      	push	{r7}
 8011be0:	b087      	sub	sp, #28
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	60f8      	str	r0, [r7, #12]
 8011be6:	60b9      	str	r1, [r7, #8]
 8011be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6a1b      	ldr	r3, [r3, #32]
 8011bee:	f023 0210 	bic.w	r2, r3, #16
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	699b      	ldr	r3, [r3, #24]
 8011bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	031b      	lsls	r3, r3, #12
 8011c0e:	697a      	ldr	r2, [r7, #20]
 8011c10:	4313      	orrs	r3, r2
 8011c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	011b      	lsls	r3, r3, #4
 8011c20:	693a      	ldr	r2, [r7, #16]
 8011c22:	4313      	orrs	r3, r2
 8011c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	621a      	str	r2, [r3, #32]
}
 8011c32:	bf00      	nop
 8011c34:	371c      	adds	r7, #28
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011c3e:	b480      	push	{r7}
 8011c40:	b085      	sub	sp, #20
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	689b      	ldr	r3, [r3, #8]
 8011c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	f043 0307 	orr.w	r3, r3, #7
 8011c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	68fa      	ldr	r2, [r7, #12]
 8011c66:	609a      	str	r2, [r3, #8]
}
 8011c68:	bf00      	nop
 8011c6a:	3714      	adds	r7, #20
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b087      	sub	sp, #28
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
 8011c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	021a      	lsls	r2, r3, #8
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	431a      	orrs	r2, r3
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	697a      	ldr	r2, [r7, #20]
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	697a      	ldr	r2, [r7, #20]
 8011ca6:	609a      	str	r2, [r3, #8]
}
 8011ca8:	bf00      	nop
 8011caa:	371c      	adds	r7, #28
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr

08011cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b087      	sub	sp, #28
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	f003 031f 	and.w	r3, r3, #31
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8011ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	6a1a      	ldr	r2, [r3, #32]
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	43db      	mvns	r3, r3
 8011cd6:	401a      	ands	r2, r3
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	6a1a      	ldr	r2, [r3, #32]
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	f003 031f 	and.w	r3, r3, #31
 8011ce6:	6879      	ldr	r1, [r7, #4]
 8011ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8011cec:	431a      	orrs	r2, r3
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	621a      	str	r2, [r3, #32]
}
 8011cf2:	bf00      	nop
 8011cf4:	371c      	adds	r7, #28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfc:	4770      	bx	lr
	...

08011d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b085      	sub	sp, #20
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d101      	bne.n	8011d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d14:	2302      	movs	r3, #2
 8011d16:	e05a      	b.n	8011dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2202      	movs	r2, #2
 8011d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	4313      	orrs	r3, r2
 8011d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	68fa      	ldr	r2, [r7, #12]
 8011d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4a21      	ldr	r2, [pc, #132]	; (8011ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d022      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d64:	d01d      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4a1d      	ldr	r2, [pc, #116]	; (8011de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d018      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4a1b      	ldr	r2, [pc, #108]	; (8011de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d013      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4a1a      	ldr	r2, [pc, #104]	; (8011de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d00e      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a18      	ldr	r2, [pc, #96]	; (8011dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d009      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	4a17      	ldr	r2, [pc, #92]	; (8011df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d004      	beq.n	8011da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4a15      	ldr	r2, [pc, #84]	; (8011df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d10c      	bne.n	8011dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	4313      	orrs	r3, r2
 8011db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68ba      	ldr	r2, [r7, #8]
 8011dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3714      	adds	r7, #20
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	40010000 	.word	0x40010000
 8011de0:	40000400 	.word	0x40000400
 8011de4:	40000800 	.word	0x40000800
 8011de8:	40000c00 	.word	0x40000c00
 8011dec:	40010400 	.word	0x40010400
 8011df0:	40014000 	.word	0x40014000
 8011df4:	40001800 	.word	0x40001800

08011df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011e00:	bf00      	nop
 8011e02:	370c      	adds	r7, #12
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr

08011e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011e14:	bf00      	nop
 8011e16:	370c      	adds	r7, #12
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr

08011e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d101      	bne.n	8011e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e03f      	b.n	8011eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d106      	bne.n	8011e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2200      	movs	r2, #0
 8011e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7f0 fe78 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2224      	movs	r2, #36	; 0x24
 8011e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	68da      	ldr	r2, [r3, #12]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f000 fa69 	bl	801233c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	691a      	ldr	r2, [r3, #16]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	695a      	ldr	r2, [r3, #20]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	68da      	ldr	r2, [r3, #12]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2220      	movs	r2, #32
 8011ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2220      	movs	r2, #32
 8011eac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b088      	sub	sp, #32
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	695b      	ldr	r3, [r3, #20]
 8011eda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8011edc:	2300      	movs	r3, #0
 8011ede:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	f003 030f 	and.w	r3, r3, #15
 8011eea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d10d      	bne.n	8011f0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	f003 0320 	and.w	r3, r3, #32
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d008      	beq.n	8011f0e <HAL_UART_IRQHandler+0x52>
 8011efc:	69bb      	ldr	r3, [r7, #24]
 8011efe:	f003 0320 	and.w	r3, r3, #32
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d003      	beq.n	8011f0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 f996 	bl	8012238 <UART_Receive_IT>
      return;
 8011f0c:	e0d0      	b.n	80120b0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f000 80b0 	beq.w	8012076 <HAL_UART_IRQHandler+0x1ba>
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	f003 0301 	and.w	r3, r3, #1
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d105      	bne.n	8011f2c <HAL_UART_IRQHandler+0x70>
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	f000 80a5 	beq.w	8012076 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	f003 0301 	and.w	r3, r3, #1
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00a      	beq.n	8011f4c <HAL_UART_IRQHandler+0x90>
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d005      	beq.n	8011f4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f44:	f043 0201 	orr.w	r2, r3, #1
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011f4c:	69fb      	ldr	r3, [r7, #28]
 8011f4e:	f003 0304 	and.w	r3, r3, #4
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d00a      	beq.n	8011f6c <HAL_UART_IRQHandler+0xb0>
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	f003 0301 	and.w	r3, r3, #1
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d005      	beq.n	8011f6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f64:	f043 0202 	orr.w	r2, r3, #2
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	f003 0302 	and.w	r3, r3, #2
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00a      	beq.n	8011f8c <HAL_UART_IRQHandler+0xd0>
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	f003 0301 	and.w	r3, r3, #1
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d005      	beq.n	8011f8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f84:	f043 0204 	orr.w	r2, r3, #4
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	f003 0308 	and.w	r3, r3, #8
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00f      	beq.n	8011fb6 <HAL_UART_IRQHandler+0xfa>
 8011f96:	69bb      	ldr	r3, [r7, #24]
 8011f98:	f003 0320 	and.w	r3, r3, #32
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d104      	bne.n	8011faa <HAL_UART_IRQHandler+0xee>
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	f003 0301 	and.w	r3, r3, #1
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d005      	beq.n	8011fb6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fae:	f043 0208 	orr.w	r2, r3, #8
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d077      	beq.n	80120ae <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	f003 0320 	and.w	r3, r3, #32
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d007      	beq.n	8011fd8 <HAL_UART_IRQHandler+0x11c>
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	f003 0320 	and.w	r3, r3, #32
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d002      	beq.n	8011fd8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 f930 	bl	8012238 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	695b      	ldr	r3, [r3, #20]
 8011fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe2:	2b40      	cmp	r3, #64	; 0x40
 8011fe4:	bf0c      	ite	eq
 8011fe6:	2301      	moveq	r3, #1
 8011fe8:	2300      	movne	r3, #0
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ff2:	f003 0308 	and.w	r3, r3, #8
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d102      	bne.n	8012000 <HAL_UART_IRQHandler+0x144>
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d031      	beq.n	8012064 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f000 f879 	bl	80120f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	695b      	ldr	r3, [r3, #20]
 801200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012010:	2b40      	cmp	r3, #64	; 0x40
 8012012:	d123      	bne.n	801205c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	695a      	ldr	r2, [r3, #20]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012022:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012028:	2b00      	cmp	r3, #0
 801202a:	d013      	beq.n	8012054 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012030:	4a21      	ldr	r2, [pc, #132]	; (80120b8 <HAL_UART_IRQHandler+0x1fc>)
 8012032:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012038:	4618      	mov	r0, r3
 801203a:	f7fc f8ed 	bl	800e218 <HAL_DMA_Abort_IT>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d016      	beq.n	8012072 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801204e:	4610      	mov	r0, r2
 8012050:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012052:	e00e      	b.n	8012072 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f845 	bl	80120e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801205a:	e00a      	b.n	8012072 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f841 	bl	80120e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012062:	e006      	b.n	8012072 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 f83d 	bl	80120e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8012070:	e01d      	b.n	80120ae <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012072:	bf00      	nop
    return;
 8012074:	e01b      	b.n	80120ae <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801207c:	2b00      	cmp	r3, #0
 801207e:	d008      	beq.n	8012092 <HAL_UART_IRQHandler+0x1d6>
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012086:	2b00      	cmp	r3, #0
 8012088:	d003      	beq.n	8012092 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f000 f866 	bl	801215c <UART_Transmit_IT>
    return;
 8012090:	e00e      	b.n	80120b0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012098:	2b00      	cmp	r3, #0
 801209a:	d009      	beq.n	80120b0 <HAL_UART_IRQHandler+0x1f4>
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d004      	beq.n	80120b0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f000 f8ae 	bl	8012208 <UART_EndTransmit_IT>
    return;
 80120ac:	e000      	b.n	80120b0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80120ae:	bf00      	nop
  }
}
 80120b0:	3720      	adds	r7, #32
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	08012135 	.word	0x08012135

080120bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80120c4:	bf00      	nop
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80120d8:	bf00      	nop
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80120ec:	bf00      	nop
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	68da      	ldr	r2, [r3, #12]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801210e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	695a      	ldr	r2, [r3, #20]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f022 0201 	bic.w	r2, r2, #1
 801211e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2220      	movs	r2, #32
 8012124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8012128:	bf00      	nop
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2200      	movs	r2, #0
 8012146:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2200      	movs	r2, #0
 801214c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f7ff ffc8 	bl	80120e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012154:	bf00      	nop
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801215c:	b480      	push	{r7}
 801215e:	b085      	sub	sp, #20
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801216a:	b2db      	uxtb	r3, r3
 801216c:	2b21      	cmp	r3, #33	; 0x21
 801216e:	d144      	bne.n	80121fa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	689b      	ldr	r3, [r3, #8]
 8012174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012178:	d11a      	bne.n	80121b0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6a1b      	ldr	r3, [r3, #32]
 801217e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	461a      	mov	r2, r3
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801218e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	691b      	ldr	r3, [r3, #16]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d105      	bne.n	80121a4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6a1b      	ldr	r3, [r3, #32]
 801219c:	1c9a      	adds	r2, r3, #2
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	621a      	str	r2, [r3, #32]
 80121a2:	e00e      	b.n	80121c2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6a1b      	ldr	r3, [r3, #32]
 80121a8:	1c5a      	adds	r2, r3, #1
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	621a      	str	r2, [r3, #32]
 80121ae:	e008      	b.n	80121c2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6a1b      	ldr	r3, [r3, #32]
 80121b4:	1c59      	adds	r1, r3, #1
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	6211      	str	r1, [r2, #32]
 80121ba:	781a      	ldrb	r2, [r3, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	3b01      	subs	r3, #1
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	4619      	mov	r1, r3
 80121d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d10f      	bne.n	80121f6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	68da      	ldr	r2, [r3, #12]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80121e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	68da      	ldr	r2, [r3, #12]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	e000      	b.n	80121fc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80121fa:	2302      	movs	r3, #2
  }
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3714      	adds	r7, #20
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr

08012208 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	68da      	ldr	r2, [r3, #12]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801221e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2220      	movs	r2, #32
 8012224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7ff ff47 	bl	80120bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801222e:	2300      	movs	r3, #0
}
 8012230:	4618      	mov	r0, r3
 8012232:	3708      	adds	r7, #8
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012246:	b2db      	uxtb	r3, r3
 8012248:	2b22      	cmp	r3, #34	; 0x22
 801224a:	d171      	bne.n	8012330 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	689b      	ldr	r3, [r3, #8]
 8012250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012254:	d123      	bne.n	801229e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801225a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10e      	bne.n	8012282 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	b29b      	uxth	r3, r3
 801226c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012270:	b29a      	uxth	r2, r3
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801227a:	1c9a      	adds	r2, r3, #2
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	629a      	str	r2, [r3, #40]	; 0x28
 8012280:	e029      	b.n	80122d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	b29b      	uxth	r3, r3
 801228a:	b2db      	uxtb	r3, r3
 801228c:	b29a      	uxth	r2, r3
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012296:	1c5a      	adds	r2, r3, #1
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	629a      	str	r2, [r3, #40]	; 0x28
 801229c:	e01b      	b.n	80122d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	691b      	ldr	r3, [r3, #16]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d10a      	bne.n	80122bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	6858      	ldr	r0, [r3, #4]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b0:	1c59      	adds	r1, r3, #1
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	6291      	str	r1, [r2, #40]	; 0x28
 80122b6:	b2c2      	uxtb	r2, r0
 80122b8:	701a      	strb	r2, [r3, #0]
 80122ba:	e00c      	b.n	80122d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	b2da      	uxtb	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122c8:	1c58      	adds	r0, r3, #1
 80122ca:	6879      	ldr	r1, [r7, #4]
 80122cc:	6288      	str	r0, [r1, #40]	; 0x28
 80122ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80122d2:	b2d2      	uxtb	r2, r2
 80122d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80122da:	b29b      	uxth	r3, r3
 80122dc:	3b01      	subs	r3, #1
 80122de:	b29b      	uxth	r3, r3
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	4619      	mov	r1, r3
 80122e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d120      	bne.n	801232c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	68da      	ldr	r2, [r3, #12]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f022 0220 	bic.w	r2, r2, #32
 80122f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	68da      	ldr	r2, [r3, #12]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	695a      	ldr	r2, [r3, #20]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f022 0201 	bic.w	r2, r2, #1
 8012318:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2220      	movs	r2, #32
 801231e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7ff fed4 	bl	80120d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8012328:	2300      	movs	r3, #0
 801232a:	e002      	b.n	8012332 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801232c:	2300      	movs	r3, #0
 801232e:	e000      	b.n	8012332 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8012330:	2302      	movs	r3, #2
  }
}
 8012332:	4618      	mov	r0, r3
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
	...

0801233c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	b0bd      	sub	sp, #244	; 0xf4
 8012342:	af00      	add	r7, sp, #0
 8012344:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	691b      	ldr	r3, [r3, #16]
 8012350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012358:	68d9      	ldr	r1, [r3, #12]
 801235a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801235e:	681a      	ldr	r2, [r3, #0]
 8012360:	ea40 0301 	orr.w	r3, r0, r1
 8012364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801236a:	689a      	ldr	r2, [r3, #8]
 801236c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012370:	691b      	ldr	r3, [r3, #16]
 8012372:	431a      	orrs	r2, r3
 8012374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012378:	695b      	ldr	r3, [r3, #20]
 801237a:	431a      	orrs	r2, r3
 801237c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012380:	69db      	ldr	r3, [r3, #28]
 8012382:	4313      	orrs	r3, r2
 8012384:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8012388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012394:	f021 010c 	bic.w	r1, r1, #12
 8012398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80123a2:	430b      	orrs	r3, r1
 80123a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80123a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	695b      	ldr	r3, [r3, #20]
 80123ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80123b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123b6:	6999      	ldr	r1, [r3, #24]
 80123b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123bc:	681a      	ldr	r2, [r3, #0]
 80123be:	ea40 0301 	orr.w	r3, r0, r1
 80123c2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123c8:	69db      	ldr	r3, [r3, #28]
 80123ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123ce:	f040 81a5 	bne.w	801271c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80123d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	4bcd      	ldr	r3, [pc, #820]	; (8012710 <UART_SetConfig+0x3d4>)
 80123da:	429a      	cmp	r2, r3
 80123dc:	d006      	beq.n	80123ec <UART_SetConfig+0xb0>
 80123de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	4bcb      	ldr	r3, [pc, #812]	; (8012714 <UART_SetConfig+0x3d8>)
 80123e6:	429a      	cmp	r2, r3
 80123e8:	f040 80cb 	bne.w	8012582 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80123ec:	f7fe fbb4 	bl	8010b58 <HAL_RCC_GetPCLK2Freq>
 80123f0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80123f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80123f8:	461c      	mov	r4, r3
 80123fa:	f04f 0500 	mov.w	r5, #0
 80123fe:	4622      	mov	r2, r4
 8012400:	462b      	mov	r3, r5
 8012402:	1891      	adds	r1, r2, r2
 8012404:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8012408:	415b      	adcs	r3, r3
 801240a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801240e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8012412:	1912      	adds	r2, r2, r4
 8012414:	eb45 0303 	adc.w	r3, r5, r3
 8012418:	f04f 0000 	mov.w	r0, #0
 801241c:	f04f 0100 	mov.w	r1, #0
 8012420:	00d9      	lsls	r1, r3, #3
 8012422:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012426:	00d0      	lsls	r0, r2, #3
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	1911      	adds	r1, r2, r4
 801242e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8012432:	416b      	adcs	r3, r5
 8012434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	461a      	mov	r2, r3
 8012440:	f04f 0300 	mov.w	r3, #0
 8012444:	1891      	adds	r1, r2, r2
 8012446:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801244a:	415b      	adcs	r3, r3
 801244c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012450:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8012454:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8012458:	f7ee fc16 	bl	8000c88 <__aeabi_uldivmod>
 801245c:	4602      	mov	r2, r0
 801245e:	460b      	mov	r3, r1
 8012460:	4bad      	ldr	r3, [pc, #692]	; (8012718 <UART_SetConfig+0x3dc>)
 8012462:	fba3 2302 	umull	r2, r3, r3, r2
 8012466:	095b      	lsrs	r3, r3, #5
 8012468:	011e      	lsls	r6, r3, #4
 801246a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801246e:	461c      	mov	r4, r3
 8012470:	f04f 0500 	mov.w	r5, #0
 8012474:	4622      	mov	r2, r4
 8012476:	462b      	mov	r3, r5
 8012478:	1891      	adds	r1, r2, r2
 801247a:	67b9      	str	r1, [r7, #120]	; 0x78
 801247c:	415b      	adcs	r3, r3
 801247e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012480:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8012484:	1912      	adds	r2, r2, r4
 8012486:	eb45 0303 	adc.w	r3, r5, r3
 801248a:	f04f 0000 	mov.w	r0, #0
 801248e:	f04f 0100 	mov.w	r1, #0
 8012492:	00d9      	lsls	r1, r3, #3
 8012494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012498:	00d0      	lsls	r0, r2, #3
 801249a:	4602      	mov	r2, r0
 801249c:	460b      	mov	r3, r1
 801249e:	1911      	adds	r1, r2, r4
 80124a0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80124a4:	416b      	adcs	r3, r5
 80124a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80124aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	461a      	mov	r2, r3
 80124b2:	f04f 0300 	mov.w	r3, #0
 80124b6:	1891      	adds	r1, r2, r2
 80124b8:	6739      	str	r1, [r7, #112]	; 0x70
 80124ba:	415b      	adcs	r3, r3
 80124bc:	677b      	str	r3, [r7, #116]	; 0x74
 80124be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80124c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80124c6:	f7ee fbdf 	bl	8000c88 <__aeabi_uldivmod>
 80124ca:	4602      	mov	r2, r0
 80124cc:	460b      	mov	r3, r1
 80124ce:	4b92      	ldr	r3, [pc, #584]	; (8012718 <UART_SetConfig+0x3dc>)
 80124d0:	fba3 1302 	umull	r1, r3, r3, r2
 80124d4:	095b      	lsrs	r3, r3, #5
 80124d6:	2164      	movs	r1, #100	; 0x64
 80124d8:	fb01 f303 	mul.w	r3, r1, r3
 80124dc:	1ad3      	subs	r3, r2, r3
 80124de:	00db      	lsls	r3, r3, #3
 80124e0:	3332      	adds	r3, #50	; 0x32
 80124e2:	4a8d      	ldr	r2, [pc, #564]	; (8012718 <UART_SetConfig+0x3dc>)
 80124e4:	fba2 2303 	umull	r2, r3, r2, r3
 80124e8:	095b      	lsrs	r3, r3, #5
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80124f0:	441e      	add	r6, r3
 80124f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80124f6:	4618      	mov	r0, r3
 80124f8:	f04f 0100 	mov.w	r1, #0
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	1894      	adds	r4, r2, r2
 8012502:	66bc      	str	r4, [r7, #104]	; 0x68
 8012504:	415b      	adcs	r3, r3
 8012506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012508:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801250c:	1812      	adds	r2, r2, r0
 801250e:	eb41 0303 	adc.w	r3, r1, r3
 8012512:	f04f 0400 	mov.w	r4, #0
 8012516:	f04f 0500 	mov.w	r5, #0
 801251a:	00dd      	lsls	r5, r3, #3
 801251c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012520:	00d4      	lsls	r4, r2, #3
 8012522:	4622      	mov	r2, r4
 8012524:	462b      	mov	r3, r5
 8012526:	1814      	adds	r4, r2, r0
 8012528:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801252c:	414b      	adcs	r3, r1
 801252e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	461a      	mov	r2, r3
 801253a:	f04f 0300 	mov.w	r3, #0
 801253e:	1891      	adds	r1, r2, r2
 8012540:	6639      	str	r1, [r7, #96]	; 0x60
 8012542:	415b      	adcs	r3, r3
 8012544:	667b      	str	r3, [r7, #100]	; 0x64
 8012546:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801254a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801254e:	f7ee fb9b 	bl	8000c88 <__aeabi_uldivmod>
 8012552:	4602      	mov	r2, r0
 8012554:	460b      	mov	r3, r1
 8012556:	4b70      	ldr	r3, [pc, #448]	; (8012718 <UART_SetConfig+0x3dc>)
 8012558:	fba3 1302 	umull	r1, r3, r3, r2
 801255c:	095b      	lsrs	r3, r3, #5
 801255e:	2164      	movs	r1, #100	; 0x64
 8012560:	fb01 f303 	mul.w	r3, r1, r3
 8012564:	1ad3      	subs	r3, r2, r3
 8012566:	00db      	lsls	r3, r3, #3
 8012568:	3332      	adds	r3, #50	; 0x32
 801256a:	4a6b      	ldr	r2, [pc, #428]	; (8012718 <UART_SetConfig+0x3dc>)
 801256c:	fba2 2303 	umull	r2, r3, r2, r3
 8012570:	095b      	lsrs	r3, r3, #5
 8012572:	f003 0207 	and.w	r2, r3, #7
 8012576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4432      	add	r2, r6
 801257e:	609a      	str	r2, [r3, #8]
 8012580:	e26d      	b.n	8012a5e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012582:	f7fe fad5 	bl	8010b30 <HAL_RCC_GetPCLK1Freq>
 8012586:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801258a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801258e:	461c      	mov	r4, r3
 8012590:	f04f 0500 	mov.w	r5, #0
 8012594:	4622      	mov	r2, r4
 8012596:	462b      	mov	r3, r5
 8012598:	1891      	adds	r1, r2, r2
 801259a:	65b9      	str	r1, [r7, #88]	; 0x58
 801259c:	415b      	adcs	r3, r3
 801259e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80125a4:	1912      	adds	r2, r2, r4
 80125a6:	eb45 0303 	adc.w	r3, r5, r3
 80125aa:	f04f 0000 	mov.w	r0, #0
 80125ae:	f04f 0100 	mov.w	r1, #0
 80125b2:	00d9      	lsls	r1, r3, #3
 80125b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80125b8:	00d0      	lsls	r0, r2, #3
 80125ba:	4602      	mov	r2, r0
 80125bc:	460b      	mov	r3, r1
 80125be:	1911      	adds	r1, r2, r4
 80125c0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80125c4:	416b      	adcs	r3, r5
 80125c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80125ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125ce:	685b      	ldr	r3, [r3, #4]
 80125d0:	461a      	mov	r2, r3
 80125d2:	f04f 0300 	mov.w	r3, #0
 80125d6:	1891      	adds	r1, r2, r2
 80125d8:	6539      	str	r1, [r7, #80]	; 0x50
 80125da:	415b      	adcs	r3, r3
 80125dc:	657b      	str	r3, [r7, #84]	; 0x54
 80125de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80125e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80125e6:	f7ee fb4f 	bl	8000c88 <__aeabi_uldivmod>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4b4a      	ldr	r3, [pc, #296]	; (8012718 <UART_SetConfig+0x3dc>)
 80125f0:	fba3 2302 	umull	r2, r3, r3, r2
 80125f4:	095b      	lsrs	r3, r3, #5
 80125f6:	011e      	lsls	r6, r3, #4
 80125f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80125fc:	461c      	mov	r4, r3
 80125fe:	f04f 0500 	mov.w	r5, #0
 8012602:	4622      	mov	r2, r4
 8012604:	462b      	mov	r3, r5
 8012606:	1891      	adds	r1, r2, r2
 8012608:	64b9      	str	r1, [r7, #72]	; 0x48
 801260a:	415b      	adcs	r3, r3
 801260c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801260e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012612:	1912      	adds	r2, r2, r4
 8012614:	eb45 0303 	adc.w	r3, r5, r3
 8012618:	f04f 0000 	mov.w	r0, #0
 801261c:	f04f 0100 	mov.w	r1, #0
 8012620:	00d9      	lsls	r1, r3, #3
 8012622:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012626:	00d0      	lsls	r0, r2, #3
 8012628:	4602      	mov	r2, r0
 801262a:	460b      	mov	r3, r1
 801262c:	1911      	adds	r1, r2, r4
 801262e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8012632:	416b      	adcs	r3, r5
 8012634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	461a      	mov	r2, r3
 8012640:	f04f 0300 	mov.w	r3, #0
 8012644:	1891      	adds	r1, r2, r2
 8012646:	6439      	str	r1, [r7, #64]	; 0x40
 8012648:	415b      	adcs	r3, r3
 801264a:	647b      	str	r3, [r7, #68]	; 0x44
 801264c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012650:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8012654:	f7ee fb18 	bl	8000c88 <__aeabi_uldivmod>
 8012658:	4602      	mov	r2, r0
 801265a:	460b      	mov	r3, r1
 801265c:	4b2e      	ldr	r3, [pc, #184]	; (8012718 <UART_SetConfig+0x3dc>)
 801265e:	fba3 1302 	umull	r1, r3, r3, r2
 8012662:	095b      	lsrs	r3, r3, #5
 8012664:	2164      	movs	r1, #100	; 0x64
 8012666:	fb01 f303 	mul.w	r3, r1, r3
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	3332      	adds	r3, #50	; 0x32
 8012670:	4a29      	ldr	r2, [pc, #164]	; (8012718 <UART_SetConfig+0x3dc>)
 8012672:	fba2 2303 	umull	r2, r3, r2, r3
 8012676:	095b      	lsrs	r3, r3, #5
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801267e:	441e      	add	r6, r3
 8012680:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012684:	4618      	mov	r0, r3
 8012686:	f04f 0100 	mov.w	r1, #0
 801268a:	4602      	mov	r2, r0
 801268c:	460b      	mov	r3, r1
 801268e:	1894      	adds	r4, r2, r2
 8012690:	63bc      	str	r4, [r7, #56]	; 0x38
 8012692:	415b      	adcs	r3, r3
 8012694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801269a:	1812      	adds	r2, r2, r0
 801269c:	eb41 0303 	adc.w	r3, r1, r3
 80126a0:	f04f 0400 	mov.w	r4, #0
 80126a4:	f04f 0500 	mov.w	r5, #0
 80126a8:	00dd      	lsls	r5, r3, #3
 80126aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80126ae:	00d4      	lsls	r4, r2, #3
 80126b0:	4622      	mov	r2, r4
 80126b2:	462b      	mov	r3, r5
 80126b4:	1814      	adds	r4, r2, r0
 80126b6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80126ba:	414b      	adcs	r3, r1
 80126bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80126c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	461a      	mov	r2, r3
 80126c8:	f04f 0300 	mov.w	r3, #0
 80126cc:	1891      	adds	r1, r2, r2
 80126ce:	6339      	str	r1, [r7, #48]	; 0x30
 80126d0:	415b      	adcs	r3, r3
 80126d2:	637b      	str	r3, [r7, #52]	; 0x34
 80126d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80126d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80126dc:	f7ee fad4 	bl	8000c88 <__aeabi_uldivmod>
 80126e0:	4602      	mov	r2, r0
 80126e2:	460b      	mov	r3, r1
 80126e4:	4b0c      	ldr	r3, [pc, #48]	; (8012718 <UART_SetConfig+0x3dc>)
 80126e6:	fba3 1302 	umull	r1, r3, r3, r2
 80126ea:	095b      	lsrs	r3, r3, #5
 80126ec:	2164      	movs	r1, #100	; 0x64
 80126ee:	fb01 f303 	mul.w	r3, r1, r3
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	00db      	lsls	r3, r3, #3
 80126f6:	3332      	adds	r3, #50	; 0x32
 80126f8:	4a07      	ldr	r2, [pc, #28]	; (8012718 <UART_SetConfig+0x3dc>)
 80126fa:	fba2 2303 	umull	r2, r3, r2, r3
 80126fe:	095b      	lsrs	r3, r3, #5
 8012700:	f003 0207 	and.w	r2, r3, #7
 8012704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4432      	add	r2, r6
 801270c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801270e:	e1a6      	b.n	8012a5e <UART_SetConfig+0x722>
 8012710:	40011000 	.word	0x40011000
 8012714:	40011400 	.word	0x40011400
 8012718:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801271c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	4bd1      	ldr	r3, [pc, #836]	; (8012a68 <UART_SetConfig+0x72c>)
 8012724:	429a      	cmp	r2, r3
 8012726:	d006      	beq.n	8012736 <UART_SetConfig+0x3fa>
 8012728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	4bcf      	ldr	r3, [pc, #828]	; (8012a6c <UART_SetConfig+0x730>)
 8012730:	429a      	cmp	r2, r3
 8012732:	f040 80ca 	bne.w	80128ca <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8012736:	f7fe fa0f 	bl	8010b58 <HAL_RCC_GetPCLK2Freq>
 801273a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801273e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012742:	461c      	mov	r4, r3
 8012744:	f04f 0500 	mov.w	r5, #0
 8012748:	4622      	mov	r2, r4
 801274a:	462b      	mov	r3, r5
 801274c:	1891      	adds	r1, r2, r2
 801274e:	62b9      	str	r1, [r7, #40]	; 0x28
 8012750:	415b      	adcs	r3, r3
 8012752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012754:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012758:	1912      	adds	r2, r2, r4
 801275a:	eb45 0303 	adc.w	r3, r5, r3
 801275e:	f04f 0000 	mov.w	r0, #0
 8012762:	f04f 0100 	mov.w	r1, #0
 8012766:	00d9      	lsls	r1, r3, #3
 8012768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801276c:	00d0      	lsls	r0, r2, #3
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	eb12 0a04 	adds.w	sl, r2, r4
 8012776:	eb43 0b05 	adc.w	fp, r3, r5
 801277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	f04f 0100 	mov.w	r1, #0
 8012786:	f04f 0200 	mov.w	r2, #0
 801278a:	f04f 0300 	mov.w	r3, #0
 801278e:	008b      	lsls	r3, r1, #2
 8012790:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012794:	0082      	lsls	r2, r0, #2
 8012796:	4650      	mov	r0, sl
 8012798:	4659      	mov	r1, fp
 801279a:	f7ee fa75 	bl	8000c88 <__aeabi_uldivmod>
 801279e:	4602      	mov	r2, r0
 80127a0:	460b      	mov	r3, r1
 80127a2:	4bb3      	ldr	r3, [pc, #716]	; (8012a70 <UART_SetConfig+0x734>)
 80127a4:	fba3 2302 	umull	r2, r3, r3, r2
 80127a8:	095b      	lsrs	r3, r3, #5
 80127aa:	011e      	lsls	r6, r3, #4
 80127ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80127b0:	4618      	mov	r0, r3
 80127b2:	f04f 0100 	mov.w	r1, #0
 80127b6:	4602      	mov	r2, r0
 80127b8:	460b      	mov	r3, r1
 80127ba:	1894      	adds	r4, r2, r2
 80127bc:	623c      	str	r4, [r7, #32]
 80127be:	415b      	adcs	r3, r3
 80127c0:	627b      	str	r3, [r7, #36]	; 0x24
 80127c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80127c6:	1812      	adds	r2, r2, r0
 80127c8:	eb41 0303 	adc.w	r3, r1, r3
 80127cc:	f04f 0400 	mov.w	r4, #0
 80127d0:	f04f 0500 	mov.w	r5, #0
 80127d4:	00dd      	lsls	r5, r3, #3
 80127d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80127da:	00d4      	lsls	r4, r2, #3
 80127dc:	4622      	mov	r2, r4
 80127de:	462b      	mov	r3, r5
 80127e0:	1814      	adds	r4, r2, r0
 80127e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80127e6:	414b      	adcs	r3, r1
 80127e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80127ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f04f 0100 	mov.w	r1, #0
 80127f8:	f04f 0200 	mov.w	r2, #0
 80127fc:	f04f 0300 	mov.w	r3, #0
 8012800:	008b      	lsls	r3, r1, #2
 8012802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012806:	0082      	lsls	r2, r0, #2
 8012808:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801280c:	f7ee fa3c 	bl	8000c88 <__aeabi_uldivmod>
 8012810:	4602      	mov	r2, r0
 8012812:	460b      	mov	r3, r1
 8012814:	4b96      	ldr	r3, [pc, #600]	; (8012a70 <UART_SetConfig+0x734>)
 8012816:	fba3 1302 	umull	r1, r3, r3, r2
 801281a:	095b      	lsrs	r3, r3, #5
 801281c:	2164      	movs	r1, #100	; 0x64
 801281e:	fb01 f303 	mul.w	r3, r1, r3
 8012822:	1ad3      	subs	r3, r2, r3
 8012824:	011b      	lsls	r3, r3, #4
 8012826:	3332      	adds	r3, #50	; 0x32
 8012828:	4a91      	ldr	r2, [pc, #580]	; (8012a70 <UART_SetConfig+0x734>)
 801282a:	fba2 2303 	umull	r2, r3, r2, r3
 801282e:	095b      	lsrs	r3, r3, #5
 8012830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012834:	441e      	add	r6, r3
 8012836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801283a:	4618      	mov	r0, r3
 801283c:	f04f 0100 	mov.w	r1, #0
 8012840:	4602      	mov	r2, r0
 8012842:	460b      	mov	r3, r1
 8012844:	1894      	adds	r4, r2, r2
 8012846:	61bc      	str	r4, [r7, #24]
 8012848:	415b      	adcs	r3, r3
 801284a:	61fb      	str	r3, [r7, #28]
 801284c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012850:	1812      	adds	r2, r2, r0
 8012852:	eb41 0303 	adc.w	r3, r1, r3
 8012856:	f04f 0400 	mov.w	r4, #0
 801285a:	f04f 0500 	mov.w	r5, #0
 801285e:	00dd      	lsls	r5, r3, #3
 8012860:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012864:	00d4      	lsls	r4, r2, #3
 8012866:	4622      	mov	r2, r4
 8012868:	462b      	mov	r3, r5
 801286a:	1814      	adds	r4, r2, r0
 801286c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8012870:	414b      	adcs	r3, r1
 8012872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	4618      	mov	r0, r3
 801287e:	f04f 0100 	mov.w	r1, #0
 8012882:	f04f 0200 	mov.w	r2, #0
 8012886:	f04f 0300 	mov.w	r3, #0
 801288a:	008b      	lsls	r3, r1, #2
 801288c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012890:	0082      	lsls	r2, r0, #2
 8012892:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8012896:	f7ee f9f7 	bl	8000c88 <__aeabi_uldivmod>
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	4b74      	ldr	r3, [pc, #464]	; (8012a70 <UART_SetConfig+0x734>)
 80128a0:	fba3 1302 	umull	r1, r3, r3, r2
 80128a4:	095b      	lsrs	r3, r3, #5
 80128a6:	2164      	movs	r1, #100	; 0x64
 80128a8:	fb01 f303 	mul.w	r3, r1, r3
 80128ac:	1ad3      	subs	r3, r2, r3
 80128ae:	011b      	lsls	r3, r3, #4
 80128b0:	3332      	adds	r3, #50	; 0x32
 80128b2:	4a6f      	ldr	r2, [pc, #444]	; (8012a70 <UART_SetConfig+0x734>)
 80128b4:	fba2 2303 	umull	r2, r3, r2, r3
 80128b8:	095b      	lsrs	r3, r3, #5
 80128ba:	f003 020f 	and.w	r2, r3, #15
 80128be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4432      	add	r2, r6
 80128c6:	609a      	str	r2, [r3, #8]
 80128c8:	e0c9      	b.n	8012a5e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80128ca:	f7fe f931 	bl	8010b30 <HAL_RCC_GetPCLK1Freq>
 80128ce:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80128d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80128d6:	461c      	mov	r4, r3
 80128d8:	f04f 0500 	mov.w	r5, #0
 80128dc:	4622      	mov	r2, r4
 80128de:	462b      	mov	r3, r5
 80128e0:	1891      	adds	r1, r2, r2
 80128e2:	6139      	str	r1, [r7, #16]
 80128e4:	415b      	adcs	r3, r3
 80128e6:	617b      	str	r3, [r7, #20]
 80128e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80128ec:	1912      	adds	r2, r2, r4
 80128ee:	eb45 0303 	adc.w	r3, r5, r3
 80128f2:	f04f 0000 	mov.w	r0, #0
 80128f6:	f04f 0100 	mov.w	r1, #0
 80128fa:	00d9      	lsls	r1, r3, #3
 80128fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012900:	00d0      	lsls	r0, r2, #3
 8012902:	4602      	mov	r2, r0
 8012904:	460b      	mov	r3, r1
 8012906:	eb12 0804 	adds.w	r8, r2, r4
 801290a:	eb43 0905 	adc.w	r9, r3, r5
 801290e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	f04f 0100 	mov.w	r1, #0
 801291a:	f04f 0200 	mov.w	r2, #0
 801291e:	f04f 0300 	mov.w	r3, #0
 8012922:	008b      	lsls	r3, r1, #2
 8012924:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012928:	0082      	lsls	r2, r0, #2
 801292a:	4640      	mov	r0, r8
 801292c:	4649      	mov	r1, r9
 801292e:	f7ee f9ab 	bl	8000c88 <__aeabi_uldivmod>
 8012932:	4602      	mov	r2, r0
 8012934:	460b      	mov	r3, r1
 8012936:	4b4e      	ldr	r3, [pc, #312]	; (8012a70 <UART_SetConfig+0x734>)
 8012938:	fba3 2302 	umull	r2, r3, r3, r2
 801293c:	095b      	lsrs	r3, r3, #5
 801293e:	011e      	lsls	r6, r3, #4
 8012940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012944:	4618      	mov	r0, r3
 8012946:	f04f 0100 	mov.w	r1, #0
 801294a:	4602      	mov	r2, r0
 801294c:	460b      	mov	r3, r1
 801294e:	1894      	adds	r4, r2, r2
 8012950:	60bc      	str	r4, [r7, #8]
 8012952:	415b      	adcs	r3, r3
 8012954:	60fb      	str	r3, [r7, #12]
 8012956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801295a:	1812      	adds	r2, r2, r0
 801295c:	eb41 0303 	adc.w	r3, r1, r3
 8012960:	f04f 0400 	mov.w	r4, #0
 8012964:	f04f 0500 	mov.w	r5, #0
 8012968:	00dd      	lsls	r5, r3, #3
 801296a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801296e:	00d4      	lsls	r4, r2, #3
 8012970:	4622      	mov	r2, r4
 8012972:	462b      	mov	r3, r5
 8012974:	1814      	adds	r4, r2, r0
 8012976:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801297a:	414b      	adcs	r3, r1
 801297c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	f04f 0100 	mov.w	r1, #0
 801298c:	f04f 0200 	mov.w	r2, #0
 8012990:	f04f 0300 	mov.w	r3, #0
 8012994:	008b      	lsls	r3, r1, #2
 8012996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801299a:	0082      	lsls	r2, r0, #2
 801299c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80129a0:	f7ee f972 	bl	8000c88 <__aeabi_uldivmod>
 80129a4:	4602      	mov	r2, r0
 80129a6:	460b      	mov	r3, r1
 80129a8:	4b31      	ldr	r3, [pc, #196]	; (8012a70 <UART_SetConfig+0x734>)
 80129aa:	fba3 1302 	umull	r1, r3, r3, r2
 80129ae:	095b      	lsrs	r3, r3, #5
 80129b0:	2164      	movs	r1, #100	; 0x64
 80129b2:	fb01 f303 	mul.w	r3, r1, r3
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	011b      	lsls	r3, r3, #4
 80129ba:	3332      	adds	r3, #50	; 0x32
 80129bc:	4a2c      	ldr	r2, [pc, #176]	; (8012a70 <UART_SetConfig+0x734>)
 80129be:	fba2 2303 	umull	r2, r3, r2, r3
 80129c2:	095b      	lsrs	r3, r3, #5
 80129c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129c8:	441e      	add	r6, r3
 80129ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80129ce:	4618      	mov	r0, r3
 80129d0:	f04f 0100 	mov.w	r1, #0
 80129d4:	4602      	mov	r2, r0
 80129d6:	460b      	mov	r3, r1
 80129d8:	1894      	adds	r4, r2, r2
 80129da:	603c      	str	r4, [r7, #0]
 80129dc:	415b      	adcs	r3, r3
 80129de:	607b      	str	r3, [r7, #4]
 80129e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129e4:	1812      	adds	r2, r2, r0
 80129e6:	eb41 0303 	adc.w	r3, r1, r3
 80129ea:	f04f 0400 	mov.w	r4, #0
 80129ee:	f04f 0500 	mov.w	r5, #0
 80129f2:	00dd      	lsls	r5, r3, #3
 80129f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80129f8:	00d4      	lsls	r4, r2, #3
 80129fa:	4622      	mov	r2, r4
 80129fc:	462b      	mov	r3, r5
 80129fe:	1814      	adds	r4, r2, r0
 8012a00:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8012a04:	414b      	adcs	r3, r1
 8012a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f04f 0100 	mov.w	r1, #0
 8012a16:	f04f 0200 	mov.w	r2, #0
 8012a1a:	f04f 0300 	mov.w	r3, #0
 8012a1e:	008b      	lsls	r3, r1, #2
 8012a20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012a24:	0082      	lsls	r2, r0, #2
 8012a26:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8012a2a:	f7ee f92d 	bl	8000c88 <__aeabi_uldivmod>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	460b      	mov	r3, r1
 8012a32:	4b0f      	ldr	r3, [pc, #60]	; (8012a70 <UART_SetConfig+0x734>)
 8012a34:	fba3 1302 	umull	r1, r3, r3, r2
 8012a38:	095b      	lsrs	r3, r3, #5
 8012a3a:	2164      	movs	r1, #100	; 0x64
 8012a3c:	fb01 f303 	mul.w	r3, r1, r3
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	011b      	lsls	r3, r3, #4
 8012a44:	3332      	adds	r3, #50	; 0x32
 8012a46:	4a0a      	ldr	r2, [pc, #40]	; (8012a70 <UART_SetConfig+0x734>)
 8012a48:	fba2 2303 	umull	r2, r3, r2, r3
 8012a4c:	095b      	lsrs	r3, r3, #5
 8012a4e:	f003 020f 	and.w	r2, r3, #15
 8012a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4432      	add	r2, r6
 8012a5a:	609a      	str	r2, [r3, #8]
}
 8012a5c:	e7ff      	b.n	8012a5e <UART_SetConfig+0x722>
 8012a5e:	bf00      	nop
 8012a60:	37f4      	adds	r7, #244	; 0xf4
 8012a62:	46bd      	mov	sp, r7
 8012a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a68:	40011000 	.word	0x40011000
 8012a6c:	40011400 	.word	0x40011400
 8012a70:	51eb851f 	.word	0x51eb851f

08012a74 <__NVIC_SetPriority>:
{
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	6039      	str	r1, [r7, #0]
 8012a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	db0a      	blt.n	8012a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	490c      	ldr	r1, [pc, #48]	; (8012ac0 <__NVIC_SetPriority+0x4c>)
 8012a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a92:	0112      	lsls	r2, r2, #4
 8012a94:	b2d2      	uxtb	r2, r2
 8012a96:	440b      	add	r3, r1
 8012a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012a9c:	e00a      	b.n	8012ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	b2da      	uxtb	r2, r3
 8012aa2:	4908      	ldr	r1, [pc, #32]	; (8012ac4 <__NVIC_SetPriority+0x50>)
 8012aa4:	79fb      	ldrb	r3, [r7, #7]
 8012aa6:	f003 030f 	and.w	r3, r3, #15
 8012aaa:	3b04      	subs	r3, #4
 8012aac:	0112      	lsls	r2, r2, #4
 8012aae:	b2d2      	uxtb	r2, r2
 8012ab0:	440b      	add	r3, r1
 8012ab2:	761a      	strb	r2, [r3, #24]
}
 8012ab4:	bf00      	nop
 8012ab6:	370c      	adds	r7, #12
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr
 8012ac0:	e000e100 	.word	0xe000e100
 8012ac4:	e000ed00 	.word	0xe000ed00

08012ac8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012acc:	4b05      	ldr	r3, [pc, #20]	; (8012ae4 <SysTick_Handler+0x1c>)
 8012ace:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012ad0:	f002 f986 	bl	8014de0 <xTaskGetSchedulerState>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d001      	beq.n	8012ade <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012ada:	f003 f86d 	bl	8015bb8 <xPortSysTickHandler>
  }
}
 8012ade:	bf00      	nop
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	e000e010 	.word	0xe000e010

08012ae8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012aec:	2100      	movs	r1, #0
 8012aee:	f06f 0004 	mvn.w	r0, #4
 8012af2:	f7ff ffbf 	bl	8012a74 <__NVIC_SetPriority>
#endif
}
 8012af6:	bf00      	nop
 8012af8:	bd80      	pop	{r7, pc}
	...

08012afc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012afc:	b480      	push	{r7}
 8012afe:	b083      	sub	sp, #12
 8012b00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b02:	f3ef 8305 	mrs	r3, IPSR
 8012b06:	603b      	str	r3, [r7, #0]
  return(result);
 8012b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d003      	beq.n	8012b16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012b0e:	f06f 0305 	mvn.w	r3, #5
 8012b12:	607b      	str	r3, [r7, #4]
 8012b14:	e00c      	b.n	8012b30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012b16:	4b0a      	ldr	r3, [pc, #40]	; (8012b40 <osKernelInitialize+0x44>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d105      	bne.n	8012b2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012b1e:	4b08      	ldr	r3, [pc, #32]	; (8012b40 <osKernelInitialize+0x44>)
 8012b20:	2201      	movs	r2, #1
 8012b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012b24:	2300      	movs	r3, #0
 8012b26:	607b      	str	r3, [r7, #4]
 8012b28:	e002      	b.n	8012b30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012b30:	687b      	ldr	r3, [r7, #4]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	370c      	adds	r7, #12
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr
 8012b3e:	bf00      	nop
 8012b40:	20000474 	.word	0x20000474

08012b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b4a:	f3ef 8305 	mrs	r3, IPSR
 8012b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8012b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d003      	beq.n	8012b5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012b56:	f06f 0305 	mvn.w	r3, #5
 8012b5a:	607b      	str	r3, [r7, #4]
 8012b5c:	e010      	b.n	8012b80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012b5e:	4b0b      	ldr	r3, [pc, #44]	; (8012b8c <osKernelStart+0x48>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d109      	bne.n	8012b7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012b66:	f7ff ffbf 	bl	8012ae8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012b6a:	4b08      	ldr	r3, [pc, #32]	; (8012b8c <osKernelStart+0x48>)
 8012b6c:	2202      	movs	r2, #2
 8012b6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012b70:	f001 fcee 	bl	8014550 <vTaskStartScheduler>
      stat = osOK;
 8012b74:	2300      	movs	r3, #0
 8012b76:	607b      	str	r3, [r7, #4]
 8012b78:	e002      	b.n	8012b80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012b80:	687b      	ldr	r3, [r7, #4]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	20000474 	.word	0x20000474

08012b90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b08e      	sub	sp, #56	; 0x38
 8012b94:	af04      	add	r7, sp, #16
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ba0:	f3ef 8305 	mrs	r3, IPSR
 8012ba4:	617b      	str	r3, [r7, #20]
  return(result);
 8012ba6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d17e      	bne.n	8012caa <osThreadNew+0x11a>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d07b      	beq.n	8012caa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012bb2:	2380      	movs	r3, #128	; 0x80
 8012bb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012bb6:	2318      	movs	r3, #24
 8012bb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d045      	beq.n	8012c56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d002      	beq.n	8012bd8 <osThreadNew+0x48>
        name = attr->name;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	699b      	ldr	r3, [r3, #24]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d002      	beq.n	8012be6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	699b      	ldr	r3, [r3, #24]
 8012be4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d008      	beq.n	8012bfe <osThreadNew+0x6e>
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	2b38      	cmp	r3, #56	; 0x38
 8012bf0:	d805      	bhi.n	8012bfe <osThreadNew+0x6e>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	f003 0301 	and.w	r3, r3, #1
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d001      	beq.n	8012c02 <osThreadNew+0x72>
        return (NULL);
 8012bfe:	2300      	movs	r3, #0
 8012c00:	e054      	b.n	8012cac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	695b      	ldr	r3, [r3, #20]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d003      	beq.n	8012c12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	695b      	ldr	r3, [r3, #20]
 8012c0e:	089b      	lsrs	r3, r3, #2
 8012c10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00e      	beq.n	8012c38 <osThreadNew+0xa8>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	2b5b      	cmp	r3, #91	; 0x5b
 8012c20:	d90a      	bls.n	8012c38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d006      	beq.n	8012c38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	695b      	ldr	r3, [r3, #20]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d002      	beq.n	8012c38 <osThreadNew+0xa8>
        mem = 1;
 8012c32:	2301      	movs	r3, #1
 8012c34:	61bb      	str	r3, [r7, #24]
 8012c36:	e010      	b.n	8012c5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d10c      	bne.n	8012c5a <osThreadNew+0xca>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d108      	bne.n	8012c5a <osThreadNew+0xca>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	691b      	ldr	r3, [r3, #16]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d104      	bne.n	8012c5a <osThreadNew+0xca>
          mem = 0;
 8012c50:	2300      	movs	r3, #0
 8012c52:	61bb      	str	r3, [r7, #24]
 8012c54:	e001      	b.n	8012c5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012c56:	2300      	movs	r3, #0
 8012c58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d110      	bne.n	8012c82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012c68:	9202      	str	r2, [sp, #8]
 8012c6a:	9301      	str	r3, [sp, #4]
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	6a3a      	ldr	r2, [r7, #32]
 8012c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c76:	68f8      	ldr	r0, [r7, #12]
 8012c78:	f001 fa52 	bl	8014120 <xTaskCreateStatic>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	613b      	str	r3, [r7, #16]
 8012c80:	e013      	b.n	8012caa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d110      	bne.n	8012caa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012c88:	6a3b      	ldr	r3, [r7, #32]
 8012c8a:	b29a      	uxth	r2, r3
 8012c8c:	f107 0310 	add.w	r3, r7, #16
 8012c90:	9301      	str	r3, [sp, #4]
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	9300      	str	r3, [sp, #0]
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f001 fa9d 	bl	80141da <xTaskCreate>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d001      	beq.n	8012caa <osThreadNew+0x11a>
            hTask = NULL;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012caa:	693b      	ldr	r3, [r7, #16]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3728      	adds	r7, #40	; 0x28
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b086      	sub	sp, #24
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cc0:	f3ef 8305 	mrs	r3, IPSR
 8012cc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012cc6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d003      	beq.n	8012cd4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012ccc:	f06f 0305 	mvn.w	r3, #5
 8012cd0:	617b      	str	r3, [r7, #20]
 8012cd2:	e00b      	b.n	8012cec <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d103      	bne.n	8012ce2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012cda:	f06f 0303 	mvn.w	r3, #3
 8012cde:	617b      	str	r3, [r7, #20]
 8012ce0:	e004      	b.n	8012cec <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012ce6:	6938      	ldr	r0, [r7, #16]
 8012ce8:	f001 fbbc 	bl	8014464 <vTaskSuspend>
  }

  return (stat);
 8012cec:	697b      	ldr	r3, [r7, #20]
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3718      	adds	r7, #24
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}

08012cf6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012cf6:	b580      	push	{r7, lr}
 8012cf8:	b08a      	sub	sp, #40	; 0x28
 8012cfa:	af02      	add	r7, sp, #8
 8012cfc:	60f8      	str	r0, [r7, #12]
 8012cfe:	60b9      	str	r1, [r7, #8]
 8012d00:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012d02:	2300      	movs	r3, #0
 8012d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d06:	f3ef 8305 	mrs	r3, IPSR
 8012d0a:	613b      	str	r3, [r7, #16]
  return(result);
 8012d0c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d175      	bne.n	8012dfe <osSemaphoreNew+0x108>
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d072      	beq.n	8012dfe <osSemaphoreNew+0x108>
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d86e      	bhi.n	8012dfe <osSemaphoreNew+0x108>
    mem = -1;
 8012d20:	f04f 33ff 	mov.w	r3, #4294967295
 8012d24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d015      	beq.n	8012d58 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	689b      	ldr	r3, [r3, #8]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d006      	beq.n	8012d42 <osSemaphoreNew+0x4c>
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	2b4f      	cmp	r3, #79	; 0x4f
 8012d3a:	d902      	bls.n	8012d42 <osSemaphoreNew+0x4c>
        mem = 1;
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	61bb      	str	r3, [r7, #24]
 8012d40:	e00c      	b.n	8012d5c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d108      	bne.n	8012d5c <osSemaphoreNew+0x66>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d104      	bne.n	8012d5c <osSemaphoreNew+0x66>
          mem = 0;
 8012d52:	2300      	movs	r3, #0
 8012d54:	61bb      	str	r3, [r7, #24]
 8012d56:	e001      	b.n	8012d5c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012d5c:	69bb      	ldr	r3, [r7, #24]
 8012d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d62:	d04c      	beq.n	8012dfe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	d128      	bne.n	8012dbc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8012d6a:	69bb      	ldr	r3, [r7, #24]
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	d10a      	bne.n	8012d86 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	2203      	movs	r2, #3
 8012d76:	9200      	str	r2, [sp, #0]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	2100      	movs	r1, #0
 8012d7c:	2001      	movs	r0, #1
 8012d7e:	f000 fa29 	bl	80131d4 <xQueueGenericCreateStatic>
 8012d82:	61f8      	str	r0, [r7, #28]
 8012d84:	e005      	b.n	8012d92 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8012d86:	2203      	movs	r2, #3
 8012d88:	2100      	movs	r1, #0
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	f000 fa9a 	bl	80132c4 <xQueueGenericCreate>
 8012d90:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d022      	beq.n	8012dde <osSemaphoreNew+0xe8>
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d01f      	beq.n	8012dde <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012d9e:	2300      	movs	r3, #0
 8012da0:	2200      	movs	r2, #0
 8012da2:	2100      	movs	r1, #0
 8012da4:	69f8      	ldr	r0, [r7, #28]
 8012da6:	f000 fb55 	bl	8013454 <xQueueGenericSend>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d016      	beq.n	8012dde <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012db0:	69f8      	ldr	r0, [r7, #28]
 8012db2:	f000 ffe1 	bl	8013d78 <vQueueDelete>
            hSemaphore = NULL;
 8012db6:	2300      	movs	r3, #0
 8012db8:	61fb      	str	r3, [r7, #28]
 8012dba:	e010      	b.n	8012dde <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d108      	bne.n	8012dd4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	68b9      	ldr	r1, [r7, #8]
 8012dca:	68f8      	ldr	r0, [r7, #12]
 8012dcc:	f000 fad7 	bl	801337e <xQueueCreateCountingSemaphoreStatic>
 8012dd0:	61f8      	str	r0, [r7, #28]
 8012dd2:	e004      	b.n	8012dde <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012dd4:	68b9      	ldr	r1, [r7, #8]
 8012dd6:	68f8      	ldr	r0, [r7, #12]
 8012dd8:	f000 fb08 	bl	80133ec <xQueueCreateCountingSemaphore>
 8012ddc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00c      	beq.n	8012dfe <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d003      	beq.n	8012df2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	617b      	str	r3, [r7, #20]
 8012df0:	e001      	b.n	8012df6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8012df2:	2300      	movs	r3, #0
 8012df4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012df6:	6979      	ldr	r1, [r7, #20]
 8012df8:	69f8      	ldr	r0, [r7, #28]
 8012dfa:	f001 f909 	bl	8014010 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012dfe:	69fb      	ldr	r3, [r7, #28]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3720      	adds	r7, #32
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b086      	sub	sp, #24
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012e16:	2300      	movs	r3, #0
 8012e18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d103      	bne.n	8012e28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012e20:	f06f 0303 	mvn.w	r3, #3
 8012e24:	617b      	str	r3, [r7, #20]
 8012e26:	e039      	b.n	8012e9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e28:	f3ef 8305 	mrs	r3, IPSR
 8012e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d022      	beq.n	8012e7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d003      	beq.n	8012e42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8012e3a:	f06f 0303 	mvn.w	r3, #3
 8012e3e:	617b      	str	r3, [r7, #20]
 8012e40:	e02c      	b.n	8012e9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8012e42:	2300      	movs	r3, #0
 8012e44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012e46:	f107 0308 	add.w	r3, r7, #8
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	6938      	ldr	r0, [r7, #16]
 8012e50:	f000 ff12 	bl	8013c78 <xQueueReceiveFromISR>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b01      	cmp	r3, #1
 8012e58:	d003      	beq.n	8012e62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8012e5a:	f06f 0302 	mvn.w	r3, #2
 8012e5e:	617b      	str	r3, [r7, #20]
 8012e60:	e01c      	b.n	8012e9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d019      	beq.n	8012e9c <osSemaphoreAcquire+0x94>
 8012e68:	4b0f      	ldr	r3, [pc, #60]	; (8012ea8 <osSemaphoreAcquire+0xa0>)
 8012e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e6e:	601a      	str	r2, [r3, #0]
 8012e70:	f3bf 8f4f 	dsb	sy
 8012e74:	f3bf 8f6f 	isb	sy
 8012e78:	e010      	b.n	8012e9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012e7a:	6839      	ldr	r1, [r7, #0]
 8012e7c:	6938      	ldr	r0, [r7, #16]
 8012e7e:	f000 fdef 	bl	8013a60 <xQueueSemaphoreTake>
 8012e82:	4603      	mov	r3, r0
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d009      	beq.n	8012e9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d003      	beq.n	8012e96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012e8e:	f06f 0301 	mvn.w	r3, #1
 8012e92:	617b      	str	r3, [r7, #20]
 8012e94:	e002      	b.n	8012e9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8012e96:	f06f 0302 	mvn.w	r3, #2
 8012e9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012e9c:	697b      	ldr	r3, [r7, #20]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3718      	adds	r7, #24
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	e000ed04 	.word	0xe000ed04

08012eac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b086      	sub	sp, #24
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d103      	bne.n	8012eca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012ec2:	f06f 0303 	mvn.w	r3, #3
 8012ec6:	617b      	str	r3, [r7, #20]
 8012ec8:	e02c      	b.n	8012f24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012eca:	f3ef 8305 	mrs	r3, IPSR
 8012ece:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d01a      	beq.n	8012f0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8012eda:	f107 0308 	add.w	r3, r7, #8
 8012ede:	4619      	mov	r1, r3
 8012ee0:	6938      	ldr	r0, [r7, #16]
 8012ee2:	f000 fc50 	bl	8013786 <xQueueGiveFromISR>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d003      	beq.n	8012ef4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012eec:	f06f 0302 	mvn.w	r3, #2
 8012ef0:	617b      	str	r3, [r7, #20]
 8012ef2:	e017      	b.n	8012f24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d014      	beq.n	8012f24 <osSemaphoreRelease+0x78>
 8012efa:	4b0d      	ldr	r3, [pc, #52]	; (8012f30 <osSemaphoreRelease+0x84>)
 8012efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f00:	601a      	str	r2, [r3, #0]
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	f3bf 8f6f 	isb	sy
 8012f0a:	e00b      	b.n	8012f24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	2200      	movs	r2, #0
 8012f10:	2100      	movs	r1, #0
 8012f12:	6938      	ldr	r0, [r7, #16]
 8012f14:	f000 fa9e 	bl	8013454 <xQueueGenericSend>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d002      	beq.n	8012f24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012f1e:	f06f 0302 	mvn.w	r3, #2
 8012f22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012f24:	697b      	ldr	r3, [r7, #20]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3718      	adds	r7, #24
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	e000ed04 	.word	0xe000ed04

08012f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012f34:	b480      	push	{r7}
 8012f36:	b085      	sub	sp, #20
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	4a07      	ldr	r2, [pc, #28]	; (8012f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8012f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	4a06      	ldr	r2, [pc, #24]	; (8012f64 <vApplicationGetIdleTaskMemory+0x30>)
 8012f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2280      	movs	r2, #128	; 0x80
 8012f50:	601a      	str	r2, [r3, #0]
}
 8012f52:	bf00      	nop
 8012f54:	3714      	adds	r7, #20
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	20000478 	.word	0x20000478
 8012f64:	200004d4 	.word	0x200004d4

08012f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012f68:	b480      	push	{r7}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	4a07      	ldr	r2, [pc, #28]	; (8012f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8012f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	4a06      	ldr	r2, [pc, #24]	; (8012f98 <vApplicationGetTimerTaskMemory+0x30>)
 8012f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012f86:	601a      	str	r2, [r3, #0]
}
 8012f88:	bf00      	nop
 8012f8a:	3714      	adds	r7, #20
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f92:	4770      	bx	lr
 8012f94:	200006d4 	.word	0x200006d4
 8012f98:	20000730 	.word	0x20000730

08012f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f103 0208 	add.w	r2, r3, #8
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f103 0208 	add.w	r2, r3, #8
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f103 0208 	add.w	r2, r3, #8
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012fd0:	bf00      	nop
 8012fd2:	370c      	adds	r7, #12
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fda:	4770      	bx	lr

08012fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012fdc:	b480      	push	{r7}
 8012fde:	b083      	sub	sp, #12
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012fea:	bf00      	nop
 8012fec:	370c      	adds	r7, #12
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr

08012ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012ff6:	b480      	push	{r7}
 8012ff8:	b085      	sub	sp, #20
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
 8012ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	68fa      	ldr	r2, [r7, #12]
 801300a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	689a      	ldr	r2, [r3, #8]
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	683a      	ldr	r2, [r7, #0]
 801301a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	683a      	ldr	r2, [r7, #0]
 8013020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	1c5a      	adds	r2, r3, #1
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	601a      	str	r2, [r3, #0]
}
 8013032:	bf00      	nop
 8013034:	3714      	adds	r7, #20
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr

0801303e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801303e:	b480      	push	{r7}
 8013040:	b085      	sub	sp, #20
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
 8013046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013054:	d103      	bne.n	801305e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	691b      	ldr	r3, [r3, #16]
 801305a:	60fb      	str	r3, [r7, #12]
 801305c:	e00c      	b.n	8013078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	3308      	adds	r3, #8
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	e002      	b.n	801306c <vListInsert+0x2e>
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	60fb      	str	r3, [r7, #12]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	68ba      	ldr	r2, [r7, #8]
 8013074:	429a      	cmp	r2, r3
 8013076:	d2f6      	bcs.n	8013066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	685a      	ldr	r2, [r3, #4]
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	683a      	ldr	r2, [r7, #0]
 8013086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	683a      	ldr	r2, [r7, #0]
 8013092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	1c5a      	adds	r2, r3, #1
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	601a      	str	r2, [r3, #0]
}
 80130a4:	bf00      	nop
 80130a6:	3714      	adds	r7, #20
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	691b      	ldr	r3, [r3, #16]
 80130bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	6892      	ldr	r2, [r2, #8]
 80130c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	689b      	ldr	r3, [r3, #8]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	6852      	ldr	r2, [r2, #4]
 80130d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d103      	bne.n	80130e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	689a      	ldr	r2, [r3, #8]
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	1e5a      	subs	r2, r3, #1
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3714      	adds	r7, #20
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr

08013104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d10a      	bne.n	801312e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311c:	f383 8811 	msr	BASEPRI, r3
 8013120:	f3bf 8f6f 	isb	sy
 8013124:	f3bf 8f4f 	dsb	sy
 8013128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801312a:	bf00      	nop
 801312c:	e7fe      	b.n	801312c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801312e:	f002 fcb1 	bl	8015a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801313a:	68f9      	ldr	r1, [r7, #12]
 801313c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801313e:	fb01 f303 	mul.w	r3, r1, r3
 8013142:	441a      	add	r2, r3
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2200      	movs	r2, #0
 801314c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801315e:	3b01      	subs	r3, #1
 8013160:	68f9      	ldr	r1, [r7, #12]
 8013162:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013164:	fb01 f303 	mul.w	r3, r1, r3
 8013168:	441a      	add	r2, r3
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	22ff      	movs	r2, #255	; 0xff
 8013172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	22ff      	movs	r2, #255	; 0xff
 801317a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d114      	bne.n	80131ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	691b      	ldr	r3, [r3, #16]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d01a      	beq.n	80131c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	3310      	adds	r3, #16
 8013190:	4618      	mov	r0, r3
 8013192:	f001 fc67 	bl	8014a64 <xTaskRemoveFromEventList>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d012      	beq.n	80131c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801319c:	4b0c      	ldr	r3, [pc, #48]	; (80131d0 <xQueueGenericReset+0xcc>)
 801319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131a2:	601a      	str	r2, [r3, #0]
 80131a4:	f3bf 8f4f 	dsb	sy
 80131a8:	f3bf 8f6f 	isb	sy
 80131ac:	e009      	b.n	80131c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	3310      	adds	r3, #16
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ff fef2 	bl	8012f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	3324      	adds	r3, #36	; 0x24
 80131bc:	4618      	mov	r0, r3
 80131be:	f7ff feed 	bl	8012f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80131c2:	f002 fc97 	bl	8015af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80131c6:	2301      	movs	r3, #1
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3710      	adds	r7, #16
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	e000ed04 	.word	0xe000ed04

080131d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b08e      	sub	sp, #56	; 0x38
 80131d8:	af02      	add	r7, sp, #8
 80131da:	60f8      	str	r0, [r7, #12]
 80131dc:	60b9      	str	r1, [r7, #8]
 80131de:	607a      	str	r2, [r7, #4]
 80131e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d10a      	bne.n	80131fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80131e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ec:	f383 8811 	msr	BASEPRI, r3
 80131f0:	f3bf 8f6f 	isb	sy
 80131f4:	f3bf 8f4f 	dsb	sy
 80131f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131fa:	bf00      	nop
 80131fc:	e7fe      	b.n	80131fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d10a      	bne.n	801321a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013208:	f383 8811 	msr	BASEPRI, r3
 801320c:	f3bf 8f6f 	isb	sy
 8013210:	f3bf 8f4f 	dsb	sy
 8013214:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013216:	bf00      	nop
 8013218:	e7fe      	b.n	8013218 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <xQueueGenericCreateStatic+0x52>
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d001      	beq.n	801322a <xQueueGenericCreateStatic+0x56>
 8013226:	2301      	movs	r3, #1
 8013228:	e000      	b.n	801322c <xQueueGenericCreateStatic+0x58>
 801322a:	2300      	movs	r3, #0
 801322c:	2b00      	cmp	r3, #0
 801322e:	d10a      	bne.n	8013246 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013234:	f383 8811 	msr	BASEPRI, r3
 8013238:	f3bf 8f6f 	isb	sy
 801323c:	f3bf 8f4f 	dsb	sy
 8013240:	623b      	str	r3, [r7, #32]
}
 8013242:	bf00      	nop
 8013244:	e7fe      	b.n	8013244 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d102      	bne.n	8013252 <xQueueGenericCreateStatic+0x7e>
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d101      	bne.n	8013256 <xQueueGenericCreateStatic+0x82>
 8013252:	2301      	movs	r3, #1
 8013254:	e000      	b.n	8013258 <xQueueGenericCreateStatic+0x84>
 8013256:	2300      	movs	r3, #0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d10a      	bne.n	8013272 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013260:	f383 8811 	msr	BASEPRI, r3
 8013264:	f3bf 8f6f 	isb	sy
 8013268:	f3bf 8f4f 	dsb	sy
 801326c:	61fb      	str	r3, [r7, #28]
}
 801326e:	bf00      	nop
 8013270:	e7fe      	b.n	8013270 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013272:	2350      	movs	r3, #80	; 0x50
 8013274:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	2b50      	cmp	r3, #80	; 0x50
 801327a:	d00a      	beq.n	8013292 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013280:	f383 8811 	msr	BASEPRI, r3
 8013284:	f3bf 8f6f 	isb	sy
 8013288:	f3bf 8f4f 	dsb	sy
 801328c:	61bb      	str	r3, [r7, #24]
}
 801328e:	bf00      	nop
 8013290:	e7fe      	b.n	8013290 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329a:	2b00      	cmp	r3, #0
 801329c:	d00d      	beq.n	80132ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a0:	2201      	movs	r2, #1
 80132a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80132aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ac:	9300      	str	r3, [sp, #0]
 80132ae:	4613      	mov	r3, r2
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	68b9      	ldr	r1, [r7, #8]
 80132b4:	68f8      	ldr	r0, [r7, #12]
 80132b6:	f000 f83f 	bl	8013338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80132bc:	4618      	mov	r0, r3
 80132be:	3730      	adds	r7, #48	; 0x30
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08a      	sub	sp, #40	; 0x28
 80132c8:	af02      	add	r7, sp, #8
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	4613      	mov	r3, r2
 80132d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d10a      	bne.n	80132ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80132d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132dc:	f383 8811 	msr	BASEPRI, r3
 80132e0:	f3bf 8f6f 	isb	sy
 80132e4:	f3bf 8f4f 	dsb	sy
 80132e8:	613b      	str	r3, [r7, #16]
}
 80132ea:	bf00      	nop
 80132ec:	e7fe      	b.n	80132ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	68ba      	ldr	r2, [r7, #8]
 80132f2:	fb02 f303 	mul.w	r3, r2, r3
 80132f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80132f8:	69fb      	ldr	r3, [r7, #28]
 80132fa:	3350      	adds	r3, #80	; 0x50
 80132fc:	4618      	mov	r0, r3
 80132fe:	f002 fceb 	bl	8015cd8 <pvPortMalloc>
 8013302:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d011      	beq.n	801332e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	3350      	adds	r3, #80	; 0x50
 8013312:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	2200      	movs	r2, #0
 8013318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801331c:	79fa      	ldrb	r2, [r7, #7]
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	4613      	mov	r3, r2
 8013324:	697a      	ldr	r2, [r7, #20]
 8013326:	68b9      	ldr	r1, [r7, #8]
 8013328:	68f8      	ldr	r0, [r7, #12]
 801332a:	f000 f805 	bl	8013338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801332e:	69bb      	ldr	r3, [r7, #24]
	}
 8013330:	4618      	mov	r0, r3
 8013332:	3720      	adds	r7, #32
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
 8013344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d103      	bne.n	8013354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	69ba      	ldr	r2, [r7, #24]
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	e002      	b.n	801335a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	68ba      	ldr	r2, [r7, #8]
 8013364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013366:	2101      	movs	r1, #1
 8013368:	69b8      	ldr	r0, [r7, #24]
 801336a:	f7ff fecb 	bl	8013104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	78fa      	ldrb	r2, [r7, #3]
 8013372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013376:	bf00      	nop
 8013378:	3710      	adds	r7, #16
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801337e:	b580      	push	{r7, lr}
 8013380:	b08a      	sub	sp, #40	; 0x28
 8013382:	af02      	add	r7, sp, #8
 8013384:	60f8      	str	r0, [r7, #12]
 8013386:	60b9      	str	r1, [r7, #8]
 8013388:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10a      	bne.n	80133a6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8013390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013394:	f383 8811 	msr	BASEPRI, r3
 8013398:	f3bf 8f6f 	isb	sy
 801339c:	f3bf 8f4f 	dsb	sy
 80133a0:	61bb      	str	r3, [r7, #24]
}
 80133a2:	bf00      	nop
 80133a4:	e7fe      	b.n	80133a4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80133a6:	68ba      	ldr	r2, [r7, #8]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d90a      	bls.n	80133c4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80133ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b2:	f383 8811 	msr	BASEPRI, r3
 80133b6:	f3bf 8f6f 	isb	sy
 80133ba:	f3bf 8f4f 	dsb	sy
 80133be:	617b      	str	r3, [r7, #20]
}
 80133c0:	bf00      	nop
 80133c2:	e7fe      	b.n	80133c2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80133c4:	2302      	movs	r3, #2
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2200      	movs	r2, #0
 80133cc:	2100      	movs	r1, #0
 80133ce:	68f8      	ldr	r0, [r7, #12]
 80133d0:	f7ff ff00 	bl	80131d4 <xQueueGenericCreateStatic>
 80133d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d002      	beq.n	80133e2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80133e2:	69fb      	ldr	r3, [r7, #28]
	}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3720      	adds	r7, #32
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10a      	bne.n	8013412 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80133fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013400:	f383 8811 	msr	BASEPRI, r3
 8013404:	f3bf 8f6f 	isb	sy
 8013408:	f3bf 8f4f 	dsb	sy
 801340c:	613b      	str	r3, [r7, #16]
}
 801340e:	bf00      	nop
 8013410:	e7fe      	b.n	8013410 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013412:	683a      	ldr	r2, [r7, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	429a      	cmp	r2, r3
 8013418:	d90a      	bls.n	8013430 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801341e:	f383 8811 	msr	BASEPRI, r3
 8013422:	f3bf 8f6f 	isb	sy
 8013426:	f3bf 8f4f 	dsb	sy
 801342a:	60fb      	str	r3, [r7, #12]
}
 801342c:	bf00      	nop
 801342e:	e7fe      	b.n	801342e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013430:	2202      	movs	r2, #2
 8013432:	2100      	movs	r1, #0
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f7ff ff45 	bl	80132c4 <xQueueGenericCreate>
 801343a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801343c:	697b      	ldr	r3, [r7, #20]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d002      	beq.n	8013448 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	683a      	ldr	r2, [r7, #0]
 8013446:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013448:	697b      	ldr	r3, [r7, #20]
	}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
	...

08013454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b08e      	sub	sp, #56	; 0x38
 8013458:	af00      	add	r7, sp, #0
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	60b9      	str	r1, [r7, #8]
 801345e:	607a      	str	r2, [r7, #4]
 8013460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013462:	2300      	movs	r3, #0
 8013464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346c:	2b00      	cmp	r3, #0
 801346e:	d10a      	bne.n	8013486 <xQueueGenericSend+0x32>
	__asm volatile
 8013470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013474:	f383 8811 	msr	BASEPRI, r3
 8013478:	f3bf 8f6f 	isb	sy
 801347c:	f3bf 8f4f 	dsb	sy
 8013480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013482:	bf00      	nop
 8013484:	e7fe      	b.n	8013484 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d103      	bne.n	8013494 <xQueueGenericSend+0x40>
 801348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013490:	2b00      	cmp	r3, #0
 8013492:	d101      	bne.n	8013498 <xQueueGenericSend+0x44>
 8013494:	2301      	movs	r3, #1
 8013496:	e000      	b.n	801349a <xQueueGenericSend+0x46>
 8013498:	2300      	movs	r3, #0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d10a      	bne.n	80134b4 <xQueueGenericSend+0x60>
	__asm volatile
 801349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80134b0:	bf00      	nop
 80134b2:	e7fe      	b.n	80134b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	2b02      	cmp	r3, #2
 80134b8:	d103      	bne.n	80134c2 <xQueueGenericSend+0x6e>
 80134ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d101      	bne.n	80134c6 <xQueueGenericSend+0x72>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e000      	b.n	80134c8 <xQueueGenericSend+0x74>
 80134c6:	2300      	movs	r3, #0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d10a      	bne.n	80134e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80134cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d0:	f383 8811 	msr	BASEPRI, r3
 80134d4:	f3bf 8f6f 	isb	sy
 80134d8:	f3bf 8f4f 	dsb	sy
 80134dc:	623b      	str	r3, [r7, #32]
}
 80134de:	bf00      	nop
 80134e0:	e7fe      	b.n	80134e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80134e2:	f001 fc7d 	bl	8014de0 <xTaskGetSchedulerState>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d102      	bne.n	80134f2 <xQueueGenericSend+0x9e>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d101      	bne.n	80134f6 <xQueueGenericSend+0xa2>
 80134f2:	2301      	movs	r3, #1
 80134f4:	e000      	b.n	80134f8 <xQueueGenericSend+0xa4>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d10a      	bne.n	8013512 <xQueueGenericSend+0xbe>
	__asm volatile
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	61fb      	str	r3, [r7, #28]
}
 801350e:	bf00      	nop
 8013510:	e7fe      	b.n	8013510 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013512:	f002 fabf 	bl	8015a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801351e:	429a      	cmp	r2, r3
 8013520:	d302      	bcc.n	8013528 <xQueueGenericSend+0xd4>
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	2b02      	cmp	r3, #2
 8013526:	d129      	bne.n	801357c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013528:	683a      	ldr	r2, [r7, #0]
 801352a:	68b9      	ldr	r1, [r7, #8]
 801352c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801352e:	f000 fc5e 	bl	8013dee <prvCopyDataToQueue>
 8013532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013538:	2b00      	cmp	r3, #0
 801353a:	d010      	beq.n	801355e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353e:	3324      	adds	r3, #36	; 0x24
 8013540:	4618      	mov	r0, r3
 8013542:	f001 fa8f 	bl	8014a64 <xTaskRemoveFromEventList>
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d013      	beq.n	8013574 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801354c:	4b3f      	ldr	r3, [pc, #252]	; (801364c <xQueueGenericSend+0x1f8>)
 801354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013552:	601a      	str	r2, [r3, #0]
 8013554:	f3bf 8f4f 	dsb	sy
 8013558:	f3bf 8f6f 	isb	sy
 801355c:	e00a      	b.n	8013574 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013560:	2b00      	cmp	r3, #0
 8013562:	d007      	beq.n	8013574 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013564:	4b39      	ldr	r3, [pc, #228]	; (801364c <xQueueGenericSend+0x1f8>)
 8013566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801356a:	601a      	str	r2, [r3, #0]
 801356c:	f3bf 8f4f 	dsb	sy
 8013570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013574:	f002 fabe 	bl	8015af4 <vPortExitCritical>
				return pdPASS;
 8013578:	2301      	movs	r3, #1
 801357a:	e063      	b.n	8013644 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d103      	bne.n	801358a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013582:	f002 fab7 	bl	8015af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013586:	2300      	movs	r3, #0
 8013588:	e05c      	b.n	8013644 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358c:	2b00      	cmp	r3, #0
 801358e:	d106      	bne.n	801359e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013590:	f107 0314 	add.w	r3, r7, #20
 8013594:	4618      	mov	r0, r3
 8013596:	f001 fac9 	bl	8014b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801359a:	2301      	movs	r3, #1
 801359c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801359e:	f002 faa9 	bl	8015af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80135a2:	f001 f83b 	bl	801461c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80135a6:	f002 fa75 	bl	8015a94 <vPortEnterCritical>
 80135aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135b0:	b25b      	sxtb	r3, r3
 80135b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b6:	d103      	bne.n	80135c0 <xQueueGenericSend+0x16c>
 80135b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ba:	2200      	movs	r2, #0
 80135bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80135c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135c6:	b25b      	sxtb	r3, r3
 80135c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135cc:	d103      	bne.n	80135d6 <xQueueGenericSend+0x182>
 80135ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d0:	2200      	movs	r2, #0
 80135d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80135d6:	f002 fa8d 	bl	8015af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80135da:	1d3a      	adds	r2, r7, #4
 80135dc:	f107 0314 	add.w	r3, r7, #20
 80135e0:	4611      	mov	r1, r2
 80135e2:	4618      	mov	r0, r3
 80135e4:	f001 fab8 	bl	8014b58 <xTaskCheckForTimeOut>
 80135e8:	4603      	mov	r3, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d124      	bne.n	8013638 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80135ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135f0:	f000 fcf5 	bl	8013fde <prvIsQueueFull>
 80135f4:	4603      	mov	r3, r0
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d018      	beq.n	801362c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80135fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fc:	3310      	adds	r3, #16
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	4611      	mov	r1, r2
 8013602:	4618      	mov	r0, r3
 8013604:	f001 f9de 	bl	80149c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801360a:	f000 fc80 	bl	8013f0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801360e:	f001 f813 	bl	8014638 <xTaskResumeAll>
 8013612:	4603      	mov	r3, r0
 8013614:	2b00      	cmp	r3, #0
 8013616:	f47f af7c 	bne.w	8013512 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801361a:	4b0c      	ldr	r3, [pc, #48]	; (801364c <xQueueGenericSend+0x1f8>)
 801361c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	f3bf 8f4f 	dsb	sy
 8013626:	f3bf 8f6f 	isb	sy
 801362a:	e772      	b.n	8013512 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801362c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801362e:	f000 fc6e 	bl	8013f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013632:	f001 f801 	bl	8014638 <xTaskResumeAll>
 8013636:	e76c      	b.n	8013512 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801363a:	f000 fc68 	bl	8013f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801363e:	f000 fffb 	bl	8014638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013644:	4618      	mov	r0, r3
 8013646:	3738      	adds	r7, #56	; 0x38
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	e000ed04 	.word	0xe000ed04

08013650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b090      	sub	sp, #64	; 0x40
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
 801365c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013664:	2b00      	cmp	r3, #0
 8013666:	d10a      	bne.n	801367e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366c:	f383 8811 	msr	BASEPRI, r3
 8013670:	f3bf 8f6f 	isb	sy
 8013674:	f3bf 8f4f 	dsb	sy
 8013678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801367a:	bf00      	nop
 801367c:	e7fe      	b.n	801367c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d103      	bne.n	801368c <xQueueGenericSendFromISR+0x3c>
 8013684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013688:	2b00      	cmp	r3, #0
 801368a:	d101      	bne.n	8013690 <xQueueGenericSendFromISR+0x40>
 801368c:	2301      	movs	r3, #1
 801368e:	e000      	b.n	8013692 <xQueueGenericSendFromISR+0x42>
 8013690:	2300      	movs	r3, #0
 8013692:	2b00      	cmp	r3, #0
 8013694:	d10a      	bne.n	80136ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369a:	f383 8811 	msr	BASEPRI, r3
 801369e:	f3bf 8f6f 	isb	sy
 80136a2:	f3bf 8f4f 	dsb	sy
 80136a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80136a8:	bf00      	nop
 80136aa:	e7fe      	b.n	80136aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	2b02      	cmp	r3, #2
 80136b0:	d103      	bne.n	80136ba <xQueueGenericSendFromISR+0x6a>
 80136b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	d101      	bne.n	80136be <xQueueGenericSendFromISR+0x6e>
 80136ba:	2301      	movs	r3, #1
 80136bc:	e000      	b.n	80136c0 <xQueueGenericSendFromISR+0x70>
 80136be:	2300      	movs	r3, #0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d10a      	bne.n	80136da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80136c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	623b      	str	r3, [r7, #32]
}
 80136d6:	bf00      	nop
 80136d8:	e7fe      	b.n	80136d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136da:	f002 fabd 	bl	8015c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80136de:	f3ef 8211 	mrs	r2, BASEPRI
 80136e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e6:	f383 8811 	msr	BASEPRI, r3
 80136ea:	f3bf 8f6f 	isb	sy
 80136ee:	f3bf 8f4f 	dsb	sy
 80136f2:	61fa      	str	r2, [r7, #28]
 80136f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80136f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80136f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80136fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013702:	429a      	cmp	r2, r3
 8013704:	d302      	bcc.n	801370c <xQueueGenericSendFromISR+0xbc>
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	2b02      	cmp	r3, #2
 801370a:	d12f      	bne.n	801376c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801370e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801371a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801371c:	683a      	ldr	r2, [r7, #0]
 801371e:	68b9      	ldr	r1, [r7, #8]
 8013720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013722:	f000 fb64 	bl	8013dee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013726:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801372e:	d112      	bne.n	8013756 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013734:	2b00      	cmp	r3, #0
 8013736:	d016      	beq.n	8013766 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801373a:	3324      	adds	r3, #36	; 0x24
 801373c:	4618      	mov	r0, r3
 801373e:	f001 f991 	bl	8014a64 <xTaskRemoveFromEventList>
 8013742:	4603      	mov	r3, r0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00e      	beq.n	8013766 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d00b      	beq.n	8013766 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	601a      	str	r2, [r3, #0]
 8013754:	e007      	b.n	8013766 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801375a:	3301      	adds	r3, #1
 801375c:	b2db      	uxtb	r3, r3
 801375e:	b25a      	sxtb	r2, r3
 8013760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013766:	2301      	movs	r3, #1
 8013768:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801376a:	e001      	b.n	8013770 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801376c:	2300      	movs	r3, #0
 801376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013772:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801377a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801377e:	4618      	mov	r0, r3
 8013780:	3740      	adds	r7, #64	; 0x40
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013786:	b580      	push	{r7, lr}
 8013788:	b08e      	sub	sp, #56	; 0x38
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
 801378e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10a      	bne.n	80137b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801379e:	f383 8811 	msr	BASEPRI, r3
 80137a2:	f3bf 8f6f 	isb	sy
 80137a6:	f3bf 8f4f 	dsb	sy
 80137aa:	623b      	str	r3, [r7, #32]
}
 80137ac:	bf00      	nop
 80137ae:	e7fe      	b.n	80137ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80137b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d00a      	beq.n	80137ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80137b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	61fb      	str	r3, [r7, #28]
}
 80137ca:	bf00      	nop
 80137cc:	e7fe      	b.n	80137cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80137ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d103      	bne.n	80137de <xQueueGiveFromISR+0x58>
 80137d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d8:	689b      	ldr	r3, [r3, #8]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d101      	bne.n	80137e2 <xQueueGiveFromISR+0x5c>
 80137de:	2301      	movs	r3, #1
 80137e0:	e000      	b.n	80137e4 <xQueueGiveFromISR+0x5e>
 80137e2:	2300      	movs	r3, #0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10a      	bne.n	80137fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80137e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ec:	f383 8811 	msr	BASEPRI, r3
 80137f0:	f3bf 8f6f 	isb	sy
 80137f4:	f3bf 8f4f 	dsb	sy
 80137f8:	61bb      	str	r3, [r7, #24]
}
 80137fa:	bf00      	nop
 80137fc:	e7fe      	b.n	80137fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80137fe:	f002 fa2b 	bl	8015c58 <vPortValidateInterruptPriority>
	__asm volatile
 8013802:	f3ef 8211 	mrs	r2, BASEPRI
 8013806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380a:	f383 8811 	msr	BASEPRI, r3
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	617a      	str	r2, [r7, #20]
 8013818:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801381a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801381c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013822:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801382a:	429a      	cmp	r2, r3
 801382c:	d22b      	bcs.n	8013886 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383a:	1c5a      	adds	r2, r3, #1
 801383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013848:	d112      	bne.n	8013870 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801384e:	2b00      	cmp	r3, #0
 8013850:	d016      	beq.n	8013880 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013854:	3324      	adds	r3, #36	; 0x24
 8013856:	4618      	mov	r0, r3
 8013858:	f001 f904 	bl	8014a64 <xTaskRemoveFromEventList>
 801385c:	4603      	mov	r3, r0
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00e      	beq.n	8013880 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d00b      	beq.n	8013880 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	2201      	movs	r2, #1
 801386c:	601a      	str	r2, [r3, #0]
 801386e:	e007      	b.n	8013880 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013874:	3301      	adds	r3, #1
 8013876:	b2db      	uxtb	r3, r3
 8013878:	b25a      	sxtb	r2, r3
 801387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013880:	2301      	movs	r3, #1
 8013882:	637b      	str	r3, [r7, #52]	; 0x34
 8013884:	e001      	b.n	801388a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013886:	2300      	movs	r3, #0
 8013888:	637b      	str	r3, [r7, #52]	; 0x34
 801388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f383 8811 	msr	BASEPRI, r3
}
 8013894:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013898:	4618      	mov	r0, r3
 801389a:	3738      	adds	r7, #56	; 0x38
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b08c      	sub	sp, #48	; 0x30
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80138ac:	2300      	movs	r3, #0
 80138ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80138b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d10a      	bne.n	80138d0 <xQueueReceive+0x30>
	__asm volatile
 80138ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	623b      	str	r3, [r7, #32]
}
 80138cc:	bf00      	nop
 80138ce:	e7fe      	b.n	80138ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d103      	bne.n	80138de <xQueueReceive+0x3e>
 80138d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d101      	bne.n	80138e2 <xQueueReceive+0x42>
 80138de:	2301      	movs	r3, #1
 80138e0:	e000      	b.n	80138e4 <xQueueReceive+0x44>
 80138e2:	2300      	movs	r3, #0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10a      	bne.n	80138fe <xQueueReceive+0x5e>
	__asm volatile
 80138e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	61fb      	str	r3, [r7, #28]
}
 80138fa:	bf00      	nop
 80138fc:	e7fe      	b.n	80138fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80138fe:	f001 fa6f 	bl	8014de0 <xTaskGetSchedulerState>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d102      	bne.n	801390e <xQueueReceive+0x6e>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d101      	bne.n	8013912 <xQueueReceive+0x72>
 801390e:	2301      	movs	r3, #1
 8013910:	e000      	b.n	8013914 <xQueueReceive+0x74>
 8013912:	2300      	movs	r3, #0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10a      	bne.n	801392e <xQueueReceive+0x8e>
	__asm volatile
 8013918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	61bb      	str	r3, [r7, #24]
}
 801392a:	bf00      	nop
 801392c:	e7fe      	b.n	801392c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801392e:	f002 f8b1 	bl	8015a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393a:	2b00      	cmp	r3, #0
 801393c:	d01f      	beq.n	801397e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801393e:	68b9      	ldr	r1, [r7, #8]
 8013940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013942:	f000 fabe 	bl	8013ec2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013948:	1e5a      	subs	r2, r3, #1
 801394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801394c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00f      	beq.n	8013976 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	3310      	adds	r3, #16
 801395a:	4618      	mov	r0, r3
 801395c:	f001 f882 	bl	8014a64 <xTaskRemoveFromEventList>
 8013960:	4603      	mov	r3, r0
 8013962:	2b00      	cmp	r3, #0
 8013964:	d007      	beq.n	8013976 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013966:	4b3d      	ldr	r3, [pc, #244]	; (8013a5c <xQueueReceive+0x1bc>)
 8013968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801396c:	601a      	str	r2, [r3, #0]
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013976:	f002 f8bd 	bl	8015af4 <vPortExitCritical>
				return pdPASS;
 801397a:	2301      	movs	r3, #1
 801397c:	e069      	b.n	8013a52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d103      	bne.n	801398c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013984:	f002 f8b6 	bl	8015af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013988:	2300      	movs	r3, #0
 801398a:	e062      	b.n	8013a52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398e:	2b00      	cmp	r3, #0
 8013990:	d106      	bne.n	80139a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013992:	f107 0310 	add.w	r3, r7, #16
 8013996:	4618      	mov	r0, r3
 8013998:	f001 f8c8 	bl	8014b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801399c:	2301      	movs	r3, #1
 801399e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139a0:	f002 f8a8 	bl	8015af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139a4:	f000 fe3a 	bl	801461c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80139a8:	f002 f874 	bl	8015a94 <vPortEnterCritical>
 80139ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139b2:	b25b      	sxtb	r3, r3
 80139b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139b8:	d103      	bne.n	80139c2 <xQueueReceive+0x122>
 80139ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139bc:	2200      	movs	r2, #0
 80139be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80139c8:	b25b      	sxtb	r3, r3
 80139ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ce:	d103      	bne.n	80139d8 <xQueueReceive+0x138>
 80139d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d2:	2200      	movs	r2, #0
 80139d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80139d8:	f002 f88c 	bl	8015af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80139dc:	1d3a      	adds	r2, r7, #4
 80139de:	f107 0310 	add.w	r3, r7, #16
 80139e2:	4611      	mov	r1, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f001 f8b7 	bl	8014b58 <xTaskCheckForTimeOut>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d123      	bne.n	8013a38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80139f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139f2:	f000 fade 	bl	8013fb2 <prvIsQueueEmpty>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d017      	beq.n	8013a2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80139fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fe:	3324      	adds	r3, #36	; 0x24
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	4611      	mov	r1, r2
 8013a04:	4618      	mov	r0, r3
 8013a06:	f000 ffdd 	bl	80149c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a0c:	f000 fa7f 	bl	8013f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013a10:	f000 fe12 	bl	8014638 <xTaskResumeAll>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d189      	bne.n	801392e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013a1a:	4b10      	ldr	r3, [pc, #64]	; (8013a5c <xQueueReceive+0x1bc>)
 8013a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	f3bf 8f4f 	dsb	sy
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	e780      	b.n	801392e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a2e:	f000 fa6e 	bl	8013f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a32:	f000 fe01 	bl	8014638 <xTaskResumeAll>
 8013a36:	e77a      	b.n	801392e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a3a:	f000 fa68 	bl	8013f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a3e:	f000 fdfb 	bl	8014638 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a44:	f000 fab5 	bl	8013fb2 <prvIsQueueEmpty>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f43f af6f 	beq.w	801392e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3730      	adds	r7, #48	; 0x30
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	e000ed04 	.word	0xe000ed04

08013a60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b08e      	sub	sp, #56	; 0x38
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013a72:	2300      	movs	r3, #0
 8013a74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10a      	bne.n	8013a92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	623b      	str	r3, [r7, #32]
}
 8013a8e:	bf00      	nop
 8013a90:	e7fe      	b.n	8013a90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00a      	beq.n	8013ab0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9e:	f383 8811 	msr	BASEPRI, r3
 8013aa2:	f3bf 8f6f 	isb	sy
 8013aa6:	f3bf 8f4f 	dsb	sy
 8013aaa:	61fb      	str	r3, [r7, #28]
}
 8013aac:	bf00      	nop
 8013aae:	e7fe      	b.n	8013aae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ab0:	f001 f996 	bl	8014de0 <xTaskGetSchedulerState>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d102      	bne.n	8013ac0 <xQueueSemaphoreTake+0x60>
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d101      	bne.n	8013ac4 <xQueueSemaphoreTake+0x64>
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	e000      	b.n	8013ac6 <xQueueSemaphoreTake+0x66>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d10a      	bne.n	8013ae0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ace:	f383 8811 	msr	BASEPRI, r3
 8013ad2:	f3bf 8f6f 	isb	sy
 8013ad6:	f3bf 8f4f 	dsb	sy
 8013ada:	61bb      	str	r3, [r7, #24]
}
 8013adc:	bf00      	nop
 8013ade:	e7fe      	b.n	8013ade <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013ae0:	f001 ffd8 	bl	8015a94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ae8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d024      	beq.n	8013b3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af2:	1e5a      	subs	r2, r3, #1
 8013af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d104      	bne.n	8013b0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013b00:	f001 fae4 	bl	80150cc <pvTaskIncrementMutexHeldCount>
 8013b04:	4602      	mov	r2, r0
 8013b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0c:	691b      	ldr	r3, [r3, #16]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00f      	beq.n	8013b32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b14:	3310      	adds	r3, #16
 8013b16:	4618      	mov	r0, r3
 8013b18:	f000 ffa4 	bl	8014a64 <xTaskRemoveFromEventList>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d007      	beq.n	8013b32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013b22:	4b54      	ldr	r3, [pc, #336]	; (8013c74 <xQueueSemaphoreTake+0x214>)
 8013b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b28:	601a      	str	r2, [r3, #0]
 8013b2a:	f3bf 8f4f 	dsb	sy
 8013b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013b32:	f001 ffdf 	bl	8015af4 <vPortExitCritical>
				return pdPASS;
 8013b36:	2301      	movs	r3, #1
 8013b38:	e097      	b.n	8013c6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d111      	bne.n	8013b64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00a      	beq.n	8013b5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b4a:	f383 8811 	msr	BASEPRI, r3
 8013b4e:	f3bf 8f6f 	isb	sy
 8013b52:	f3bf 8f4f 	dsb	sy
 8013b56:	617b      	str	r3, [r7, #20]
}
 8013b58:	bf00      	nop
 8013b5a:	e7fe      	b.n	8013b5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013b5c:	f001 ffca 	bl	8015af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013b60:	2300      	movs	r3, #0
 8013b62:	e082      	b.n	8013c6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d106      	bne.n	8013b78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013b6a:	f107 030c 	add.w	r3, r7, #12
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f000 ffdc 	bl	8014b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b74:	2301      	movs	r3, #1
 8013b76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b78:	f001 ffbc 	bl	8015af4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b7c:	f000 fd4e 	bl	801461c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013b80:	f001 ff88 	bl	8015a94 <vPortEnterCritical>
 8013b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b8a:	b25b      	sxtb	r3, r3
 8013b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b90:	d103      	bne.n	8013b9a <xQueueSemaphoreTake+0x13a>
 8013b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b94:	2200      	movs	r2, #0
 8013b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ba0:	b25b      	sxtb	r3, r3
 8013ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba6:	d103      	bne.n	8013bb0 <xQueueSemaphoreTake+0x150>
 8013ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013baa:	2200      	movs	r2, #0
 8013bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013bb0:	f001 ffa0 	bl	8015af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013bb4:	463a      	mov	r2, r7
 8013bb6:	f107 030c 	add.w	r3, r7, #12
 8013bba:	4611      	mov	r1, r2
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f000 ffcb 	bl	8014b58 <xTaskCheckForTimeOut>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d132      	bne.n	8013c2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bca:	f000 f9f2 	bl	8013fb2 <prvIsQueueEmpty>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d026      	beq.n	8013c22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d109      	bne.n	8013bf0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8013bdc:	f001 ff5a 	bl	8015a94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	689b      	ldr	r3, [r3, #8]
 8013be4:	4618      	mov	r0, r3
 8013be6:	f001 f919 	bl	8014e1c <xTaskPriorityInherit>
 8013bea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013bec:	f001 ff82 	bl	8015af4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf2:	3324      	adds	r3, #36	; 0x24
 8013bf4:	683a      	ldr	r2, [r7, #0]
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f000 fee3 	bl	80149c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c00:	f000 f985 	bl	8013f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013c04:	f000 fd18 	bl	8014638 <xTaskResumeAll>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f47f af68 	bne.w	8013ae0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013c10:	4b18      	ldr	r3, [pc, #96]	; (8013c74 <xQueueSemaphoreTake+0x214>)
 8013c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c16:	601a      	str	r2, [r3, #0]
 8013c18:	f3bf 8f4f 	dsb	sy
 8013c1c:	f3bf 8f6f 	isb	sy
 8013c20:	e75e      	b.n	8013ae0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c24:	f000 f973 	bl	8013f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c28:	f000 fd06 	bl	8014638 <xTaskResumeAll>
 8013c2c:	e758      	b.n	8013ae0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c30:	f000 f96d 	bl	8013f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013c34:	f000 fd00 	bl	8014638 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c3a:	f000 f9ba 	bl	8013fb2 <prvIsQueueEmpty>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	f43f af4d 	beq.w	8013ae0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00d      	beq.n	8013c68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013c4c:	f001 ff22 	bl	8015a94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c52:	f000 f8b4 	bl	8013dbe <prvGetDisinheritPriorityAfterTimeout>
 8013c56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5a:	689b      	ldr	r3, [r3, #8]
 8013c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f001 f9b2 	bl	8014fc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013c64:	f001 ff46 	bl	8015af4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3738      	adds	r7, #56	; 0x38
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	e000ed04 	.word	0xe000ed04

08013c78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b08e      	sub	sp, #56	; 0x38
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d10a      	bne.n	8013ca4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c92:	f383 8811 	msr	BASEPRI, r3
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	f3bf 8f4f 	dsb	sy
 8013c9e:	623b      	str	r3, [r7, #32]
}
 8013ca0:	bf00      	nop
 8013ca2:	e7fe      	b.n	8013ca2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d103      	bne.n	8013cb2 <xQueueReceiveFromISR+0x3a>
 8013caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d101      	bne.n	8013cb6 <xQueueReceiveFromISR+0x3e>
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e000      	b.n	8013cb8 <xQueueReceiveFromISR+0x40>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d10a      	bne.n	8013cd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc0:	f383 8811 	msr	BASEPRI, r3
 8013cc4:	f3bf 8f6f 	isb	sy
 8013cc8:	f3bf 8f4f 	dsb	sy
 8013ccc:	61fb      	str	r3, [r7, #28]
}
 8013cce:	bf00      	nop
 8013cd0:	e7fe      	b.n	8013cd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cd2:	f001 ffc1 	bl	8015c58 <vPortValidateInterruptPriority>
	__asm volatile
 8013cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8013cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cde:	f383 8811 	msr	BASEPRI, r3
 8013ce2:	f3bf 8f6f 	isb	sy
 8013ce6:	f3bf 8f4f 	dsb	sy
 8013cea:	61ba      	str	r2, [r7, #24]
 8013cec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013cee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d02f      	beq.n	8013d5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013d08:	68b9      	ldr	r1, [r7, #8]
 8013d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d0c:	f000 f8d9 	bl	8013ec2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d12:	1e5a      	subs	r2, r3, #1
 8013d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d20:	d112      	bne.n	8013d48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d24:	691b      	ldr	r3, [r3, #16]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d016      	beq.n	8013d58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2c:	3310      	adds	r3, #16
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f000 fe98 	bl	8014a64 <xTaskRemoveFromEventList>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d00e      	beq.n	8013d58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d00b      	beq.n	8013d58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2201      	movs	r2, #1
 8013d44:	601a      	str	r2, [r3, #0]
 8013d46:	e007      	b.n	8013d58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	b25a      	sxtb	r2, r3
 8013d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8013d5c:	e001      	b.n	8013d62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	637b      	str	r3, [r7, #52]	; 0x34
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	f383 8811 	msr	BASEPRI, r3
}
 8013d6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3738      	adds	r7, #56	; 0x38
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d10a      	bne.n	8013da0 <vQueueDelete+0x28>
	__asm volatile
 8013d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d8e:	f383 8811 	msr	BASEPRI, r3
 8013d92:	f3bf 8f6f 	isb	sy
 8013d96:	f3bf 8f4f 	dsb	sy
 8013d9a:	60bb      	str	r3, [r7, #8]
}
 8013d9c:	bf00      	nop
 8013d9e:	e7fe      	b.n	8013d9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f000 f95f 	bl	8014064 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d102      	bne.n	8013db6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8013db0:	68f8      	ldr	r0, [r7, #12]
 8013db2:	f002 f85d 	bl	8015e70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013db6:	bf00      	nop
 8013db8:	3710      	adds	r7, #16
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}

08013dbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013dbe:	b480      	push	{r7}
 8013dc0:	b085      	sub	sp, #20
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d006      	beq.n	8013ddc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013dd8:	60fb      	str	r3, [r7, #12]
 8013dda:	e001      	b.n	8013de0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013de0:	68fb      	ldr	r3, [r7, #12]
	}
 8013de2:	4618      	mov	r0, r3
 8013de4:	3714      	adds	r7, #20
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr

08013dee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013dee:	b580      	push	{r7, lr}
 8013df0:	b086      	sub	sp, #24
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	60f8      	str	r0, [r7, #12]
 8013df6:	60b9      	str	r1, [r7, #8]
 8013df8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10d      	bne.n	8013e28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d14d      	bne.n	8013eb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f001 f867 	bl	8014eec <xTaskPriorityDisinherit>
 8013e1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2200      	movs	r2, #0
 8013e24:	609a      	str	r2, [r3, #8]
 8013e26:	e043      	b.n	8013eb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d119      	bne.n	8013e62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	6858      	ldr	r0, [r3, #4]
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e36:	461a      	mov	r2, r3
 8013e38:	68b9      	ldr	r1, [r7, #8]
 8013e3a:	f002 f961 	bl	8016100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	685a      	ldr	r2, [r3, #4]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e46:	441a      	add	r2, r3
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	685a      	ldr	r2, [r3, #4]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d32b      	bcc.n	8013eb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	605a      	str	r2, [r3, #4]
 8013e60:	e026      	b.n	8013eb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	68d8      	ldr	r0, [r3, #12]
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	68b9      	ldr	r1, [r7, #8]
 8013e6e:	f002 f947 	bl	8016100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	68da      	ldr	r2, [r3, #12]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e7a:	425b      	negs	r3, r3
 8013e7c:	441a      	add	r2, r3
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	68da      	ldr	r2, [r3, #12]
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d207      	bcs.n	8013e9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	689a      	ldr	r2, [r3, #8]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e96:	425b      	negs	r3, r3
 8013e98:	441a      	add	r2, r3
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b02      	cmp	r3, #2
 8013ea2:	d105      	bne.n	8013eb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d002      	beq.n	8013eb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	3b01      	subs	r3, #1
 8013eae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	1c5a      	adds	r2, r3, #1
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013eb8:	697b      	ldr	r3, [r7, #20]
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3718      	adds	r7, #24
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}

08013ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013ec2:	b580      	push	{r7, lr}
 8013ec4:	b082      	sub	sp, #8
 8013ec6:	af00      	add	r7, sp, #0
 8013ec8:	6078      	str	r0, [r7, #4]
 8013eca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d018      	beq.n	8013f06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	68da      	ldr	r2, [r3, #12]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013edc:	441a      	add	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	68da      	ldr	r2, [r3, #12]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d303      	bcc.n	8013ef6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	68d9      	ldr	r1, [r3, #12]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efe:	461a      	mov	r2, r3
 8013f00:	6838      	ldr	r0, [r7, #0]
 8013f02:	f002 f8fd 	bl	8016100 <memcpy>
	}
}
 8013f06:	bf00      	nop
 8013f08:	3708      	adds	r7, #8
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b084      	sub	sp, #16
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013f16:	f001 fdbd 	bl	8015a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f22:	e011      	b.n	8013f48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d012      	beq.n	8013f52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	3324      	adds	r3, #36	; 0x24
 8013f30:	4618      	mov	r0, r3
 8013f32:	f000 fd97 	bl	8014a64 <xTaskRemoveFromEventList>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d001      	beq.n	8013f40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013f3c:	f000 fe6e 	bl	8014c1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013f40:	7bfb      	ldrb	r3, [r7, #15]
 8013f42:	3b01      	subs	r3, #1
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dce9      	bgt.n	8013f24 <prvUnlockQueue+0x16>
 8013f50:	e000      	b.n	8013f54 <prvUnlockQueue+0x46>
					break;
 8013f52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	22ff      	movs	r2, #255	; 0xff
 8013f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013f5c:	f001 fdca 	bl	8015af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013f60:	f001 fd98 	bl	8015a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f6c:	e011      	b.n	8013f92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	691b      	ldr	r3, [r3, #16]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d012      	beq.n	8013f9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	3310      	adds	r3, #16
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f000 fd72 	bl	8014a64 <xTaskRemoveFromEventList>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d001      	beq.n	8013f8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013f86:	f000 fe49 	bl	8014c1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013f8a:	7bbb      	ldrb	r3, [r7, #14]
 8013f8c:	3b01      	subs	r3, #1
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	dce9      	bgt.n	8013f6e <prvUnlockQueue+0x60>
 8013f9a:	e000      	b.n	8013f9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013f9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	22ff      	movs	r2, #255	; 0xff
 8013fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013fa6:	f001 fda5 	bl	8015af4 <vPortExitCritical>
}
 8013faa:	bf00      	nop
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fba:	f001 fd6b 	bl	8015a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d102      	bne.n	8013fcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	60fb      	str	r3, [r7, #12]
 8013fca:	e001      	b.n	8013fd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013fd0:	f001 fd90 	bl	8015af4 <vPortExitCritical>

	return xReturn;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3710      	adds	r7, #16
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}

08013fde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b084      	sub	sp, #16
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013fe6:	f001 fd55 	bl	8015a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d102      	bne.n	8013ffc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	60fb      	str	r3, [r7, #12]
 8013ffa:	e001      	b.n	8014000 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014000:	f001 fd78 	bl	8015af4 <vPortExitCritical>

	return xReturn;
 8014004:	68fb      	ldr	r3, [r7, #12]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
	...

08014010 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014010:	b480      	push	{r7}
 8014012:	b085      	sub	sp, #20
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801401a:	2300      	movs	r3, #0
 801401c:	60fb      	str	r3, [r7, #12]
 801401e:	e014      	b.n	801404a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014020:	4a0f      	ldr	r2, [pc, #60]	; (8014060 <vQueueAddToRegistry+0x50>)
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d10b      	bne.n	8014044 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801402c:	490c      	ldr	r1, [pc, #48]	; (8014060 <vQueueAddToRegistry+0x50>)
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014036:	4a0a      	ldr	r2, [pc, #40]	; (8014060 <vQueueAddToRegistry+0x50>)
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	00db      	lsls	r3, r3, #3
 801403c:	4413      	add	r3, r2
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014042:	e006      	b.n	8014052 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	3301      	adds	r3, #1
 8014048:	60fb      	str	r3, [r7, #12]
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2b07      	cmp	r3, #7
 801404e:	d9e7      	bls.n	8014020 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014050:	bf00      	nop
 8014052:	bf00      	nop
 8014054:	3714      	adds	r7, #20
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	200080f8 	.word	0x200080f8

08014064 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014064:	b480      	push	{r7}
 8014066:	b085      	sub	sp, #20
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801406c:	2300      	movs	r3, #0
 801406e:	60fb      	str	r3, [r7, #12]
 8014070:	e016      	b.n	80140a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014072:	4a10      	ldr	r2, [pc, #64]	; (80140b4 <vQueueUnregisterQueue+0x50>)
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	00db      	lsls	r3, r3, #3
 8014078:	4413      	add	r3, r2
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	687a      	ldr	r2, [r7, #4]
 801407e:	429a      	cmp	r2, r3
 8014080:	d10b      	bne.n	801409a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014082:	4a0c      	ldr	r2, [pc, #48]	; (80140b4 <vQueueUnregisterQueue+0x50>)
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	2100      	movs	r1, #0
 8014088:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801408c:	4a09      	ldr	r2, [pc, #36]	; (80140b4 <vQueueUnregisterQueue+0x50>)
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	4413      	add	r3, r2
 8014094:	2200      	movs	r2, #0
 8014096:	605a      	str	r2, [r3, #4]
				break;
 8014098:	e006      	b.n	80140a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	3301      	adds	r3, #1
 801409e:	60fb      	str	r3, [r7, #12]
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2b07      	cmp	r3, #7
 80140a4:	d9e5      	bls.n	8014072 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80140a6:	bf00      	nop
 80140a8:	bf00      	nop
 80140aa:	3714      	adds	r7, #20
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr
 80140b4:	200080f8 	.word	0x200080f8

080140b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b086      	sub	sp, #24
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	60b9      	str	r1, [r7, #8]
 80140c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80140c8:	f001 fce4 	bl	8015a94 <vPortEnterCritical>
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80140d2:	b25b      	sxtb	r3, r3
 80140d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d8:	d103      	bne.n	80140e2 <vQueueWaitForMessageRestricted+0x2a>
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	2200      	movs	r2, #0
 80140de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140e8:	b25b      	sxtb	r3, r3
 80140ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ee:	d103      	bne.n	80140f8 <vQueueWaitForMessageRestricted+0x40>
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	2200      	movs	r2, #0
 80140f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80140f8:	f001 fcfc 	bl	8015af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014100:	2b00      	cmp	r3, #0
 8014102:	d106      	bne.n	8014112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	3324      	adds	r3, #36	; 0x24
 8014108:	687a      	ldr	r2, [r7, #4]
 801410a:	68b9      	ldr	r1, [r7, #8]
 801410c:	4618      	mov	r0, r3
 801410e:	f000 fc7d 	bl	8014a0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014112:	6978      	ldr	r0, [r7, #20]
 8014114:	f7ff fefb 	bl	8013f0e <prvUnlockQueue>
	}
 8014118:	bf00      	nop
 801411a:	3718      	adds	r7, #24
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014120:	b580      	push	{r7, lr}
 8014122:	b08e      	sub	sp, #56	; 0x38
 8014124:	af04      	add	r7, sp, #16
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
 801412c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014130:	2b00      	cmp	r3, #0
 8014132:	d10a      	bne.n	801414a <xTaskCreateStatic+0x2a>
	__asm volatile
 8014134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014138:	f383 8811 	msr	BASEPRI, r3
 801413c:	f3bf 8f6f 	isb	sy
 8014140:	f3bf 8f4f 	dsb	sy
 8014144:	623b      	str	r3, [r7, #32]
}
 8014146:	bf00      	nop
 8014148:	e7fe      	b.n	8014148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414c:	2b00      	cmp	r3, #0
 801414e:	d10a      	bne.n	8014166 <xTaskCreateStatic+0x46>
	__asm volatile
 8014150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014154:	f383 8811 	msr	BASEPRI, r3
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	f3bf 8f4f 	dsb	sy
 8014160:	61fb      	str	r3, [r7, #28]
}
 8014162:	bf00      	nop
 8014164:	e7fe      	b.n	8014164 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014166:	235c      	movs	r3, #92	; 0x5c
 8014168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	2b5c      	cmp	r3, #92	; 0x5c
 801416e:	d00a      	beq.n	8014186 <xTaskCreateStatic+0x66>
	__asm volatile
 8014170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014174:	f383 8811 	msr	BASEPRI, r3
 8014178:	f3bf 8f6f 	isb	sy
 801417c:	f3bf 8f4f 	dsb	sy
 8014180:	61bb      	str	r3, [r7, #24]
}
 8014182:	bf00      	nop
 8014184:	e7fe      	b.n	8014184 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801418a:	2b00      	cmp	r3, #0
 801418c:	d01e      	beq.n	80141cc <xTaskCreateStatic+0xac>
 801418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014190:	2b00      	cmp	r3, #0
 8014192:	d01b      	beq.n	80141cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801419c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a0:	2202      	movs	r2, #2
 80141a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80141a6:	2300      	movs	r3, #0
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ac:	9302      	str	r3, [sp, #8]
 80141ae:	f107 0314 	add.w	r3, r7, #20
 80141b2:	9301      	str	r3, [sp, #4]
 80141b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	687a      	ldr	r2, [r7, #4]
 80141bc:	68b9      	ldr	r1, [r7, #8]
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	f000 f850 	bl	8014264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80141c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141c6:	f000 f8dd 	bl	8014384 <prvAddNewTaskToReadyList>
 80141ca:	e001      	b.n	80141d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80141cc:	2300      	movs	r3, #0
 80141ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80141d0:	697b      	ldr	r3, [r7, #20]
	}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3728      	adds	r7, #40	; 0x28
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}

080141da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b08c      	sub	sp, #48	; 0x30
 80141de:	af04      	add	r7, sp, #16
 80141e0:	60f8      	str	r0, [r7, #12]
 80141e2:	60b9      	str	r1, [r7, #8]
 80141e4:	603b      	str	r3, [r7, #0]
 80141e6:	4613      	mov	r3, r2
 80141e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80141ea:	88fb      	ldrh	r3, [r7, #6]
 80141ec:	009b      	lsls	r3, r3, #2
 80141ee:	4618      	mov	r0, r3
 80141f0:	f001 fd72 	bl	8015cd8 <pvPortMalloc>
 80141f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d00e      	beq.n	801421a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80141fc:	205c      	movs	r0, #92	; 0x5c
 80141fe:	f001 fd6b 	bl	8015cd8 <pvPortMalloc>
 8014202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014204:	69fb      	ldr	r3, [r7, #28]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d003      	beq.n	8014212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	697a      	ldr	r2, [r7, #20]
 801420e:	631a      	str	r2, [r3, #48]	; 0x30
 8014210:	e005      	b.n	801421e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014212:	6978      	ldr	r0, [r7, #20]
 8014214:	f001 fe2c 	bl	8015e70 <vPortFree>
 8014218:	e001      	b.n	801421e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801421a:	2300      	movs	r3, #0
 801421c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d017      	beq.n	8014254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	2200      	movs	r2, #0
 8014228:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801422c:	88fa      	ldrh	r2, [r7, #6]
 801422e:	2300      	movs	r3, #0
 8014230:	9303      	str	r3, [sp, #12]
 8014232:	69fb      	ldr	r3, [r7, #28]
 8014234:	9302      	str	r3, [sp, #8]
 8014236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014238:	9301      	str	r3, [sp, #4]
 801423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423c:	9300      	str	r3, [sp, #0]
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	68b9      	ldr	r1, [r7, #8]
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	f000 f80e 	bl	8014264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014248:	69f8      	ldr	r0, [r7, #28]
 801424a:	f000 f89b 	bl	8014384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801424e:	2301      	movs	r3, #1
 8014250:	61bb      	str	r3, [r7, #24]
 8014252:	e002      	b.n	801425a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014254:	f04f 33ff 	mov.w	r3, #4294967295
 8014258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801425a:	69bb      	ldr	r3, [r7, #24]
	}
 801425c:	4618      	mov	r0, r3
 801425e:	3720      	adds	r7, #32
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b088      	sub	sp, #32
 8014268:	af00      	add	r7, sp, #0
 801426a:	60f8      	str	r0, [r7, #12]
 801426c:	60b9      	str	r1, [r7, #8]
 801426e:	607a      	str	r2, [r7, #4]
 8014270:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014274:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	461a      	mov	r2, r3
 801427c:	21a5      	movs	r1, #165	; 0xa5
 801427e:	f001 ff4d 	bl	801611c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801428c:	3b01      	subs	r3, #1
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	4413      	add	r3, r2
 8014292:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	f023 0307 	bic.w	r3, r3, #7
 801429a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	f003 0307 	and.w	r3, r3, #7
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d00a      	beq.n	80142bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80142a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142aa:	f383 8811 	msr	BASEPRI, r3
 80142ae:	f3bf 8f6f 	isb	sy
 80142b2:	f3bf 8f4f 	dsb	sy
 80142b6:	617b      	str	r3, [r7, #20]
}
 80142b8:	bf00      	nop
 80142ba:	e7fe      	b.n	80142ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d01f      	beq.n	8014302 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80142c2:	2300      	movs	r3, #0
 80142c4:	61fb      	str	r3, [r7, #28]
 80142c6:	e012      	b.n	80142ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80142c8:	68ba      	ldr	r2, [r7, #8]
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	4413      	add	r3, r2
 80142ce:	7819      	ldrb	r1, [r3, #0]
 80142d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	4413      	add	r3, r2
 80142d6:	3334      	adds	r3, #52	; 0x34
 80142d8:	460a      	mov	r2, r1
 80142da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80142dc:	68ba      	ldr	r2, [r7, #8]
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	4413      	add	r3, r2
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d006      	beq.n	80142f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	3301      	adds	r3, #1
 80142ec:	61fb      	str	r3, [r7, #28]
 80142ee:	69fb      	ldr	r3, [r7, #28]
 80142f0:	2b0f      	cmp	r3, #15
 80142f2:	d9e9      	bls.n	80142c8 <prvInitialiseNewTask+0x64>
 80142f4:	e000      	b.n	80142f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80142f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80142f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142fa:	2200      	movs	r2, #0
 80142fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014300:	e003      	b.n	801430a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014304:	2200      	movs	r2, #0
 8014306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	2b37      	cmp	r3, #55	; 0x37
 801430e:	d901      	bls.n	8014314 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014310:	2337      	movs	r3, #55	; 0x37
 8014312:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014318:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801431e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014322:	2200      	movs	r2, #0
 8014324:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014328:	3304      	adds	r3, #4
 801432a:	4618      	mov	r0, r3
 801432c:	f7fe fe56 	bl	8012fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014332:	3318      	adds	r3, #24
 8014334:	4618      	mov	r0, r3
 8014336:	f7fe fe51 	bl	8012fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801433e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014342:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801434e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014352:	2200      	movs	r2, #0
 8014354:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014358:	2200      	movs	r2, #0
 801435a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801435e:	683a      	ldr	r2, [r7, #0]
 8014360:	68f9      	ldr	r1, [r7, #12]
 8014362:	69b8      	ldr	r0, [r7, #24]
 8014364:	f001 fa68 	bl	8015838 <pxPortInitialiseStack>
 8014368:	4602      	mov	r2, r0
 801436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014370:	2b00      	cmp	r3, #0
 8014372:	d002      	beq.n	801437a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801437a:	bf00      	nop
 801437c:	3720      	adds	r7, #32
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
	...

08014384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801438c:	f001 fb82 	bl	8015a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014390:	4b2d      	ldr	r3, [pc, #180]	; (8014448 <prvAddNewTaskToReadyList+0xc4>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	3301      	adds	r3, #1
 8014396:	4a2c      	ldr	r2, [pc, #176]	; (8014448 <prvAddNewTaskToReadyList+0xc4>)
 8014398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801439a:	4b2c      	ldr	r3, [pc, #176]	; (801444c <prvAddNewTaskToReadyList+0xc8>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d109      	bne.n	80143b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80143a2:	4a2a      	ldr	r2, [pc, #168]	; (801444c <prvAddNewTaskToReadyList+0xc8>)
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80143a8:	4b27      	ldr	r3, [pc, #156]	; (8014448 <prvAddNewTaskToReadyList+0xc4>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	2b01      	cmp	r3, #1
 80143ae:	d110      	bne.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80143b0:	f000 fc58 	bl	8014c64 <prvInitialiseTaskLists>
 80143b4:	e00d      	b.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80143b6:	4b26      	ldr	r3, [pc, #152]	; (8014450 <prvAddNewTaskToReadyList+0xcc>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d109      	bne.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80143be:	4b23      	ldr	r3, [pc, #140]	; (801444c <prvAddNewTaskToReadyList+0xc8>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d802      	bhi.n	80143d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80143cc:	4a1f      	ldr	r2, [pc, #124]	; (801444c <prvAddNewTaskToReadyList+0xc8>)
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80143d2:	4b20      	ldr	r3, [pc, #128]	; (8014454 <prvAddNewTaskToReadyList+0xd0>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	3301      	adds	r3, #1
 80143d8:	4a1e      	ldr	r2, [pc, #120]	; (8014454 <prvAddNewTaskToReadyList+0xd0>)
 80143da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80143dc:	4b1d      	ldr	r3, [pc, #116]	; (8014454 <prvAddNewTaskToReadyList+0xd0>)
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e8:	4b1b      	ldr	r3, [pc, #108]	; (8014458 <prvAddNewTaskToReadyList+0xd4>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d903      	bls.n	80143f8 <prvAddNewTaskToReadyList+0x74>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f4:	4a18      	ldr	r2, [pc, #96]	; (8014458 <prvAddNewTaskToReadyList+0xd4>)
 80143f6:	6013      	str	r3, [r2, #0]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143fc:	4613      	mov	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4413      	add	r3, r2
 8014402:	009b      	lsls	r3, r3, #2
 8014404:	4a15      	ldr	r2, [pc, #84]	; (801445c <prvAddNewTaskToReadyList+0xd8>)
 8014406:	441a      	add	r2, r3
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	3304      	adds	r3, #4
 801440c:	4619      	mov	r1, r3
 801440e:	4610      	mov	r0, r2
 8014410:	f7fe fdf1 	bl	8012ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014414:	f001 fb6e 	bl	8015af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014418:	4b0d      	ldr	r3, [pc, #52]	; (8014450 <prvAddNewTaskToReadyList+0xcc>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00e      	beq.n	801443e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014420:	4b0a      	ldr	r3, [pc, #40]	; (801444c <prvAddNewTaskToReadyList+0xc8>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801442a:	429a      	cmp	r2, r3
 801442c:	d207      	bcs.n	801443e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801442e:	4b0c      	ldr	r3, [pc, #48]	; (8014460 <prvAddNewTaskToReadyList+0xdc>)
 8014430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014434:	601a      	str	r2, [r3, #0]
 8014436:	f3bf 8f4f 	dsb	sy
 801443a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801443e:	bf00      	nop
 8014440:	3708      	adds	r7, #8
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
 8014446:	bf00      	nop
 8014448:	20001004 	.word	0x20001004
 801444c:	20000b30 	.word	0x20000b30
 8014450:	20001010 	.word	0x20001010
 8014454:	20001020 	.word	0x20001020
 8014458:	2000100c 	.word	0x2000100c
 801445c:	20000b34 	.word	0x20000b34
 8014460:	e000ed04 	.word	0xe000ed04

08014464 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801446c:	f001 fb12 	bl	8015a94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d102      	bne.n	801447c <vTaskSuspend+0x18>
 8014476:	4b30      	ldr	r3, [pc, #192]	; (8014538 <vTaskSuspend+0xd4>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	e000      	b.n	801447e <vTaskSuspend+0x1a>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	3304      	adds	r3, #4
 8014484:	4618      	mov	r0, r3
 8014486:	f7fe fe13 	bl	80130b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801448e:	2b00      	cmp	r3, #0
 8014490:	d004      	beq.n	801449c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	3318      	adds	r3, #24
 8014496:	4618      	mov	r0, r3
 8014498:	f7fe fe0a 	bl	80130b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	3304      	adds	r3, #4
 80144a0:	4619      	mov	r1, r3
 80144a2:	4826      	ldr	r0, [pc, #152]	; (801453c <vTaskSuspend+0xd8>)
 80144a4:	f7fe fda7 	bl	8012ff6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d103      	bne.n	80144bc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	2200      	movs	r2, #0
 80144b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80144bc:	f001 fb1a 	bl	8015af4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80144c0:	4b1f      	ldr	r3, [pc, #124]	; (8014540 <vTaskSuspend+0xdc>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d005      	beq.n	80144d4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80144c8:	f001 fae4 	bl	8015a94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80144cc:	f000 fc68 	bl	8014da0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80144d0:	f001 fb10 	bl	8015af4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80144d4:	4b18      	ldr	r3, [pc, #96]	; (8014538 <vTaskSuspend+0xd4>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d127      	bne.n	801452e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80144de:	4b18      	ldr	r3, [pc, #96]	; (8014540 <vTaskSuspend+0xdc>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d017      	beq.n	8014516 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80144e6:	4b17      	ldr	r3, [pc, #92]	; (8014544 <vTaskSuspend+0xe0>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00a      	beq.n	8014504 <vTaskSuspend+0xa0>
	__asm volatile
 80144ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f2:	f383 8811 	msr	BASEPRI, r3
 80144f6:	f3bf 8f6f 	isb	sy
 80144fa:	f3bf 8f4f 	dsb	sy
 80144fe:	60bb      	str	r3, [r7, #8]
}
 8014500:	bf00      	nop
 8014502:	e7fe      	b.n	8014502 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014504:	4b10      	ldr	r3, [pc, #64]	; (8014548 <vTaskSuspend+0xe4>)
 8014506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801450a:	601a      	str	r2, [r3, #0]
 801450c:	f3bf 8f4f 	dsb	sy
 8014510:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014514:	e00b      	b.n	801452e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014516:	4b09      	ldr	r3, [pc, #36]	; (801453c <vTaskSuspend+0xd8>)
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	4b0c      	ldr	r3, [pc, #48]	; (801454c <vTaskSuspend+0xe8>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	429a      	cmp	r2, r3
 8014520:	d103      	bne.n	801452a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014522:	4b05      	ldr	r3, [pc, #20]	; (8014538 <vTaskSuspend+0xd4>)
 8014524:	2200      	movs	r2, #0
 8014526:	601a      	str	r2, [r3, #0]
	}
 8014528:	e001      	b.n	801452e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801452a:	f000 f9ed 	bl	8014908 <vTaskSwitchContext>
	}
 801452e:	bf00      	nop
 8014530:	3710      	adds	r7, #16
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	20000b30 	.word	0x20000b30
 801453c:	20000ff0 	.word	0x20000ff0
 8014540:	20001010 	.word	0x20001010
 8014544:	2000102c 	.word	0x2000102c
 8014548:	e000ed04 	.word	0xe000ed04
 801454c:	20001004 	.word	0x20001004

08014550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b08a      	sub	sp, #40	; 0x28
 8014554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014556:	2300      	movs	r3, #0
 8014558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801455a:	2300      	movs	r3, #0
 801455c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801455e:	463a      	mov	r2, r7
 8014560:	1d39      	adds	r1, r7, #4
 8014562:	f107 0308 	add.w	r3, r7, #8
 8014566:	4618      	mov	r0, r3
 8014568:	f7fe fce4 	bl	8012f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801456c:	6839      	ldr	r1, [r7, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	68ba      	ldr	r2, [r7, #8]
 8014572:	9202      	str	r2, [sp, #8]
 8014574:	9301      	str	r3, [sp, #4]
 8014576:	2300      	movs	r3, #0
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	2300      	movs	r3, #0
 801457c:	460a      	mov	r2, r1
 801457e:	4921      	ldr	r1, [pc, #132]	; (8014604 <vTaskStartScheduler+0xb4>)
 8014580:	4821      	ldr	r0, [pc, #132]	; (8014608 <vTaskStartScheduler+0xb8>)
 8014582:	f7ff fdcd 	bl	8014120 <xTaskCreateStatic>
 8014586:	4603      	mov	r3, r0
 8014588:	4a20      	ldr	r2, [pc, #128]	; (801460c <vTaskStartScheduler+0xbc>)
 801458a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801458c:	4b1f      	ldr	r3, [pc, #124]	; (801460c <vTaskStartScheduler+0xbc>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014594:	2301      	movs	r3, #1
 8014596:	617b      	str	r3, [r7, #20]
 8014598:	e001      	b.n	801459e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801459a:	2300      	movs	r3, #0
 801459c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	2b01      	cmp	r3, #1
 80145a2:	d102      	bne.n	80145aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80145a4:	f000 fdfa 	bl	801519c <xTimerCreateTimerTask>
 80145a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d116      	bne.n	80145de <vTaskStartScheduler+0x8e>
	__asm volatile
 80145b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b4:	f383 8811 	msr	BASEPRI, r3
 80145b8:	f3bf 8f6f 	isb	sy
 80145bc:	f3bf 8f4f 	dsb	sy
 80145c0:	613b      	str	r3, [r7, #16]
}
 80145c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80145c4:	4b12      	ldr	r3, [pc, #72]	; (8014610 <vTaskStartScheduler+0xc0>)
 80145c6:	f04f 32ff 	mov.w	r2, #4294967295
 80145ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80145cc:	4b11      	ldr	r3, [pc, #68]	; (8014614 <vTaskStartScheduler+0xc4>)
 80145ce:	2201      	movs	r2, #1
 80145d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80145d2:	4b11      	ldr	r3, [pc, #68]	; (8014618 <vTaskStartScheduler+0xc8>)
 80145d4:	2200      	movs	r2, #0
 80145d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80145d8:	f001 f9ba 	bl	8015950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80145dc:	e00e      	b.n	80145fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80145de:	697b      	ldr	r3, [r7, #20]
 80145e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145e4:	d10a      	bne.n	80145fc <vTaskStartScheduler+0xac>
	__asm volatile
 80145e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ea:	f383 8811 	msr	BASEPRI, r3
 80145ee:	f3bf 8f6f 	isb	sy
 80145f2:	f3bf 8f4f 	dsb	sy
 80145f6:	60fb      	str	r3, [r7, #12]
}
 80145f8:	bf00      	nop
 80145fa:	e7fe      	b.n	80145fa <vTaskStartScheduler+0xaa>
}
 80145fc:	bf00      	nop
 80145fe:	3718      	adds	r7, #24
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}
 8014604:	0801ca50 	.word	0x0801ca50
 8014608:	08014c35 	.word	0x08014c35
 801460c:	20001028 	.word	0x20001028
 8014610:	20001024 	.word	0x20001024
 8014614:	20001010 	.word	0x20001010
 8014618:	20001008 	.word	0x20001008

0801461c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801461c:	b480      	push	{r7}
 801461e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014620:	4b04      	ldr	r3, [pc, #16]	; (8014634 <vTaskSuspendAll+0x18>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	3301      	adds	r3, #1
 8014626:	4a03      	ldr	r2, [pc, #12]	; (8014634 <vTaskSuspendAll+0x18>)
 8014628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801462a:	bf00      	nop
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr
 8014634:	2000102c 	.word	0x2000102c

08014638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801463e:	2300      	movs	r3, #0
 8014640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014642:	2300      	movs	r3, #0
 8014644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014646:	4b42      	ldr	r3, [pc, #264]	; (8014750 <xTaskResumeAll+0x118>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d10a      	bne.n	8014664 <xTaskResumeAll+0x2c>
	__asm volatile
 801464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014652:	f383 8811 	msr	BASEPRI, r3
 8014656:	f3bf 8f6f 	isb	sy
 801465a:	f3bf 8f4f 	dsb	sy
 801465e:	603b      	str	r3, [r7, #0]
}
 8014660:	bf00      	nop
 8014662:	e7fe      	b.n	8014662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014664:	f001 fa16 	bl	8015a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014668:	4b39      	ldr	r3, [pc, #228]	; (8014750 <xTaskResumeAll+0x118>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	3b01      	subs	r3, #1
 801466e:	4a38      	ldr	r2, [pc, #224]	; (8014750 <xTaskResumeAll+0x118>)
 8014670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014672:	4b37      	ldr	r3, [pc, #220]	; (8014750 <xTaskResumeAll+0x118>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d162      	bne.n	8014740 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801467a:	4b36      	ldr	r3, [pc, #216]	; (8014754 <xTaskResumeAll+0x11c>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d05e      	beq.n	8014740 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014682:	e02f      	b.n	80146e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014684:	4b34      	ldr	r3, [pc, #208]	; (8014758 <xTaskResumeAll+0x120>)
 8014686:	68db      	ldr	r3, [r3, #12]
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3318      	adds	r3, #24
 8014690:	4618      	mov	r0, r3
 8014692:	f7fe fd0d 	bl	80130b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	3304      	adds	r3, #4
 801469a:	4618      	mov	r0, r3
 801469c:	f7fe fd08 	bl	80130b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a4:	4b2d      	ldr	r3, [pc, #180]	; (801475c <xTaskResumeAll+0x124>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d903      	bls.n	80146b4 <xTaskResumeAll+0x7c>
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146b0:	4a2a      	ldr	r2, [pc, #168]	; (801475c <xTaskResumeAll+0x124>)
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146b8:	4613      	mov	r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	4413      	add	r3, r2
 80146be:	009b      	lsls	r3, r3, #2
 80146c0:	4a27      	ldr	r2, [pc, #156]	; (8014760 <xTaskResumeAll+0x128>)
 80146c2:	441a      	add	r2, r3
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	3304      	adds	r3, #4
 80146c8:	4619      	mov	r1, r3
 80146ca:	4610      	mov	r0, r2
 80146cc:	f7fe fc93 	bl	8012ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146d4:	4b23      	ldr	r3, [pc, #140]	; (8014764 <xTaskResumeAll+0x12c>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146da:	429a      	cmp	r2, r3
 80146dc:	d302      	bcc.n	80146e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80146de:	4b22      	ldr	r3, [pc, #136]	; (8014768 <xTaskResumeAll+0x130>)
 80146e0:	2201      	movs	r2, #1
 80146e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146e4:	4b1c      	ldr	r3, [pc, #112]	; (8014758 <xTaskResumeAll+0x120>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d1cb      	bne.n	8014684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d001      	beq.n	80146f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146f2:	f000 fb55 	bl	8014da0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80146f6:	4b1d      	ldr	r3, [pc, #116]	; (801476c <xTaskResumeAll+0x134>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d010      	beq.n	8014724 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014702:	f000 f847 	bl	8014794 <xTaskIncrementTick>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d002      	beq.n	8014712 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801470c:	4b16      	ldr	r3, [pc, #88]	; (8014768 <xTaskResumeAll+0x130>)
 801470e:	2201      	movs	r2, #1
 8014710:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	3b01      	subs	r3, #1
 8014716:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d1f1      	bne.n	8014702 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801471e:	4b13      	ldr	r3, [pc, #76]	; (801476c <xTaskResumeAll+0x134>)
 8014720:	2200      	movs	r2, #0
 8014722:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014724:	4b10      	ldr	r3, [pc, #64]	; (8014768 <xTaskResumeAll+0x130>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d009      	beq.n	8014740 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801472c:	2301      	movs	r3, #1
 801472e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014730:	4b0f      	ldr	r3, [pc, #60]	; (8014770 <xTaskResumeAll+0x138>)
 8014732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014736:	601a      	str	r2, [r3, #0]
 8014738:	f3bf 8f4f 	dsb	sy
 801473c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014740:	f001 f9d8 	bl	8015af4 <vPortExitCritical>

	return xAlreadyYielded;
 8014744:	68bb      	ldr	r3, [r7, #8]
}
 8014746:	4618      	mov	r0, r3
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	2000102c 	.word	0x2000102c
 8014754:	20001004 	.word	0x20001004
 8014758:	20000fc4 	.word	0x20000fc4
 801475c:	2000100c 	.word	0x2000100c
 8014760:	20000b34 	.word	0x20000b34
 8014764:	20000b30 	.word	0x20000b30
 8014768:	20001018 	.word	0x20001018
 801476c:	20001014 	.word	0x20001014
 8014770:	e000ed04 	.word	0xe000ed04

08014774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801477a:	4b05      	ldr	r3, [pc, #20]	; (8014790 <xTaskGetTickCount+0x1c>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014780:	687b      	ldr	r3, [r7, #4]
}
 8014782:	4618      	mov	r0, r3
 8014784:	370c      	adds	r7, #12
 8014786:	46bd      	mov	sp, r7
 8014788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	20001008 	.word	0x20001008

08014794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b086      	sub	sp, #24
 8014798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801479a:	2300      	movs	r3, #0
 801479c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801479e:	4b4f      	ldr	r3, [pc, #316]	; (80148dc <xTaskIncrementTick+0x148>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f040 808f 	bne.w	80148c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80147a8:	4b4d      	ldr	r3, [pc, #308]	; (80148e0 <xTaskIncrementTick+0x14c>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	3301      	adds	r3, #1
 80147ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80147b0:	4a4b      	ldr	r2, [pc, #300]	; (80148e0 <xTaskIncrementTick+0x14c>)
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80147b6:	693b      	ldr	r3, [r7, #16]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d120      	bne.n	80147fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80147bc:	4b49      	ldr	r3, [pc, #292]	; (80148e4 <xTaskIncrementTick+0x150>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d00a      	beq.n	80147dc <xTaskIncrementTick+0x48>
	__asm volatile
 80147c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ca:	f383 8811 	msr	BASEPRI, r3
 80147ce:	f3bf 8f6f 	isb	sy
 80147d2:	f3bf 8f4f 	dsb	sy
 80147d6:	603b      	str	r3, [r7, #0]
}
 80147d8:	bf00      	nop
 80147da:	e7fe      	b.n	80147da <xTaskIncrementTick+0x46>
 80147dc:	4b41      	ldr	r3, [pc, #260]	; (80148e4 <xTaskIncrementTick+0x150>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	60fb      	str	r3, [r7, #12]
 80147e2:	4b41      	ldr	r3, [pc, #260]	; (80148e8 <xTaskIncrementTick+0x154>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	4a3f      	ldr	r2, [pc, #252]	; (80148e4 <xTaskIncrementTick+0x150>)
 80147e8:	6013      	str	r3, [r2, #0]
 80147ea:	4a3f      	ldr	r2, [pc, #252]	; (80148e8 <xTaskIncrementTick+0x154>)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	6013      	str	r3, [r2, #0]
 80147f0:	4b3e      	ldr	r3, [pc, #248]	; (80148ec <xTaskIncrementTick+0x158>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	3301      	adds	r3, #1
 80147f6:	4a3d      	ldr	r2, [pc, #244]	; (80148ec <xTaskIncrementTick+0x158>)
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	f000 fad1 	bl	8014da0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80147fe:	4b3c      	ldr	r3, [pc, #240]	; (80148f0 <xTaskIncrementTick+0x15c>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	693a      	ldr	r2, [r7, #16]
 8014804:	429a      	cmp	r2, r3
 8014806:	d349      	bcc.n	801489c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014808:	4b36      	ldr	r3, [pc, #216]	; (80148e4 <xTaskIncrementTick+0x150>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d104      	bne.n	801481c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014812:	4b37      	ldr	r3, [pc, #220]	; (80148f0 <xTaskIncrementTick+0x15c>)
 8014814:	f04f 32ff 	mov.w	r2, #4294967295
 8014818:	601a      	str	r2, [r3, #0]
					break;
 801481a:	e03f      	b.n	801489c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801481c:	4b31      	ldr	r3, [pc, #196]	; (80148e4 <xTaskIncrementTick+0x150>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801482c:	693a      	ldr	r2, [r7, #16]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	429a      	cmp	r2, r3
 8014832:	d203      	bcs.n	801483c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014834:	4a2e      	ldr	r2, [pc, #184]	; (80148f0 <xTaskIncrementTick+0x15c>)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801483a:	e02f      	b.n	801489c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	3304      	adds	r3, #4
 8014840:	4618      	mov	r0, r3
 8014842:	f7fe fc35 	bl	80130b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801484a:	2b00      	cmp	r3, #0
 801484c:	d004      	beq.n	8014858 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	3318      	adds	r3, #24
 8014852:	4618      	mov	r0, r3
 8014854:	f7fe fc2c 	bl	80130b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801485c:	4b25      	ldr	r3, [pc, #148]	; (80148f4 <xTaskIncrementTick+0x160>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	429a      	cmp	r2, r3
 8014862:	d903      	bls.n	801486c <xTaskIncrementTick+0xd8>
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014868:	4a22      	ldr	r2, [pc, #136]	; (80148f4 <xTaskIncrementTick+0x160>)
 801486a:	6013      	str	r3, [r2, #0]
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014870:	4613      	mov	r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4a1f      	ldr	r2, [pc, #124]	; (80148f8 <xTaskIncrementTick+0x164>)
 801487a:	441a      	add	r2, r3
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	3304      	adds	r3, #4
 8014880:	4619      	mov	r1, r3
 8014882:	4610      	mov	r0, r2
 8014884:	f7fe fbb7 	bl	8012ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801488c:	4b1b      	ldr	r3, [pc, #108]	; (80148fc <xTaskIncrementTick+0x168>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014892:	429a      	cmp	r2, r3
 8014894:	d3b8      	bcc.n	8014808 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014896:	2301      	movs	r3, #1
 8014898:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801489a:	e7b5      	b.n	8014808 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801489c:	4b17      	ldr	r3, [pc, #92]	; (80148fc <xTaskIncrementTick+0x168>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a2:	4915      	ldr	r1, [pc, #84]	; (80148f8 <xTaskIncrementTick+0x164>)
 80148a4:	4613      	mov	r3, r2
 80148a6:	009b      	lsls	r3, r3, #2
 80148a8:	4413      	add	r3, r2
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	440b      	add	r3, r1
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d901      	bls.n	80148b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80148b4:	2301      	movs	r3, #1
 80148b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80148b8:	4b11      	ldr	r3, [pc, #68]	; (8014900 <xTaskIncrementTick+0x16c>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d007      	beq.n	80148d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80148c0:	2301      	movs	r3, #1
 80148c2:	617b      	str	r3, [r7, #20]
 80148c4:	e004      	b.n	80148d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80148c6:	4b0f      	ldr	r3, [pc, #60]	; (8014904 <xTaskIncrementTick+0x170>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	3301      	adds	r3, #1
 80148cc:	4a0d      	ldr	r2, [pc, #52]	; (8014904 <xTaskIncrementTick+0x170>)
 80148ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80148d0:	697b      	ldr	r3, [r7, #20]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3718      	adds	r7, #24
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	2000102c 	.word	0x2000102c
 80148e0:	20001008 	.word	0x20001008
 80148e4:	20000fbc 	.word	0x20000fbc
 80148e8:	20000fc0 	.word	0x20000fc0
 80148ec:	2000101c 	.word	0x2000101c
 80148f0:	20001024 	.word	0x20001024
 80148f4:	2000100c 	.word	0x2000100c
 80148f8:	20000b34 	.word	0x20000b34
 80148fc:	20000b30 	.word	0x20000b30
 8014900:	20001018 	.word	0x20001018
 8014904:	20001014 	.word	0x20001014

08014908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014908:	b480      	push	{r7}
 801490a:	b085      	sub	sp, #20
 801490c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801490e:	4b28      	ldr	r3, [pc, #160]	; (80149b0 <vTaskSwitchContext+0xa8>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d003      	beq.n	801491e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014916:	4b27      	ldr	r3, [pc, #156]	; (80149b4 <vTaskSwitchContext+0xac>)
 8014918:	2201      	movs	r2, #1
 801491a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801491c:	e041      	b.n	80149a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801491e:	4b25      	ldr	r3, [pc, #148]	; (80149b4 <vTaskSwitchContext+0xac>)
 8014920:	2200      	movs	r2, #0
 8014922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014924:	4b24      	ldr	r3, [pc, #144]	; (80149b8 <vTaskSwitchContext+0xb0>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	60fb      	str	r3, [r7, #12]
 801492a:	e010      	b.n	801494e <vTaskSwitchContext+0x46>
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d10a      	bne.n	8014948 <vTaskSwitchContext+0x40>
	__asm volatile
 8014932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014936:	f383 8811 	msr	BASEPRI, r3
 801493a:	f3bf 8f6f 	isb	sy
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	607b      	str	r3, [r7, #4]
}
 8014944:	bf00      	nop
 8014946:	e7fe      	b.n	8014946 <vTaskSwitchContext+0x3e>
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	3b01      	subs	r3, #1
 801494c:	60fb      	str	r3, [r7, #12]
 801494e:	491b      	ldr	r1, [pc, #108]	; (80149bc <vTaskSwitchContext+0xb4>)
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	4613      	mov	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4413      	add	r3, r2
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	440b      	add	r3, r1
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d0e4      	beq.n	801492c <vTaskSwitchContext+0x24>
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	4613      	mov	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	4a13      	ldr	r2, [pc, #76]	; (80149bc <vTaskSwitchContext+0xb4>)
 801496e:	4413      	add	r3, r2
 8014970:	60bb      	str	r3, [r7, #8]
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	685a      	ldr	r2, [r3, #4]
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	605a      	str	r2, [r3, #4]
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	685a      	ldr	r2, [r3, #4]
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	3308      	adds	r3, #8
 8014984:	429a      	cmp	r2, r3
 8014986:	d104      	bne.n	8014992 <vTaskSwitchContext+0x8a>
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	685a      	ldr	r2, [r3, #4]
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	605a      	str	r2, [r3, #4]
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	4a09      	ldr	r2, [pc, #36]	; (80149c0 <vTaskSwitchContext+0xb8>)
 801499a:	6013      	str	r3, [r2, #0]
 801499c:	4a06      	ldr	r2, [pc, #24]	; (80149b8 <vTaskSwitchContext+0xb0>)
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	6013      	str	r3, [r2, #0]
}
 80149a2:	bf00      	nop
 80149a4:	3714      	adds	r7, #20
 80149a6:	46bd      	mov	sp, r7
 80149a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ac:	4770      	bx	lr
 80149ae:	bf00      	nop
 80149b0:	2000102c 	.word	0x2000102c
 80149b4:	20001018 	.word	0x20001018
 80149b8:	2000100c 	.word	0x2000100c
 80149bc:	20000b34 	.word	0x20000b34
 80149c0:	20000b30 	.word	0x20000b30

080149c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d10a      	bne.n	80149ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80149d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d8:	f383 8811 	msr	BASEPRI, r3
 80149dc:	f3bf 8f6f 	isb	sy
 80149e0:	f3bf 8f4f 	dsb	sy
 80149e4:	60fb      	str	r3, [r7, #12]
}
 80149e6:	bf00      	nop
 80149e8:	e7fe      	b.n	80149e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149ea:	4b07      	ldr	r3, [pc, #28]	; (8014a08 <vTaskPlaceOnEventList+0x44>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3318      	adds	r3, #24
 80149f0:	4619      	mov	r1, r3
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7fe fb23 	bl	801303e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149f8:	2101      	movs	r1, #1
 80149fa:	6838      	ldr	r0, [r7, #0]
 80149fc:	f000 fb7a 	bl	80150f4 <prvAddCurrentTaskToDelayedList>
}
 8014a00:	bf00      	nop
 8014a02:	3710      	adds	r7, #16
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}
 8014a08:	20000b30 	.word	0x20000b30

08014a0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b086      	sub	sp, #24
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d10a      	bne.n	8014a34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a22:	f383 8811 	msr	BASEPRI, r3
 8014a26:	f3bf 8f6f 	isb	sy
 8014a2a:	f3bf 8f4f 	dsb	sy
 8014a2e:	617b      	str	r3, [r7, #20]
}
 8014a30:	bf00      	nop
 8014a32:	e7fe      	b.n	8014a32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a34:	4b0a      	ldr	r3, [pc, #40]	; (8014a60 <vTaskPlaceOnEventListRestricted+0x54>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	3318      	adds	r3, #24
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	68f8      	ldr	r0, [r7, #12]
 8014a3e:	f7fe fada 	bl	8012ff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d002      	beq.n	8014a4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014a48:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	68b8      	ldr	r0, [r7, #8]
 8014a52:	f000 fb4f 	bl	80150f4 <prvAddCurrentTaskToDelayedList>
	}
 8014a56:	bf00      	nop
 8014a58:	3718      	adds	r7, #24
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	20000b30 	.word	0x20000b30

08014a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b086      	sub	sp, #24
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d10a      	bne.n	8014a90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7e:	f383 8811 	msr	BASEPRI, r3
 8014a82:	f3bf 8f6f 	isb	sy
 8014a86:	f3bf 8f4f 	dsb	sy
 8014a8a:	60fb      	str	r3, [r7, #12]
}
 8014a8c:	bf00      	nop
 8014a8e:	e7fe      	b.n	8014a8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	3318      	adds	r3, #24
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fe fb0b 	bl	80130b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a9a:	4b1e      	ldr	r3, [pc, #120]	; (8014b14 <xTaskRemoveFromEventList+0xb0>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d11d      	bne.n	8014ade <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	3304      	adds	r3, #4
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7fe fb02 	bl	80130b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab0:	4b19      	ldr	r3, [pc, #100]	; (8014b18 <xTaskRemoveFromEventList+0xb4>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d903      	bls.n	8014ac0 <xTaskRemoveFromEventList+0x5c>
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014abc:	4a16      	ldr	r2, [pc, #88]	; (8014b18 <xTaskRemoveFromEventList+0xb4>)
 8014abe:	6013      	str	r3, [r2, #0]
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	4413      	add	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4a13      	ldr	r2, [pc, #76]	; (8014b1c <xTaskRemoveFromEventList+0xb8>)
 8014ace:	441a      	add	r2, r3
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	3304      	adds	r3, #4
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	4610      	mov	r0, r2
 8014ad8:	f7fe fa8d 	bl	8012ff6 <vListInsertEnd>
 8014adc:	e005      	b.n	8014aea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014ade:	693b      	ldr	r3, [r7, #16]
 8014ae0:	3318      	adds	r3, #24
 8014ae2:	4619      	mov	r1, r3
 8014ae4:	480e      	ldr	r0, [pc, #56]	; (8014b20 <xTaskRemoveFromEventList+0xbc>)
 8014ae6:	f7fe fa86 	bl	8012ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aee:	4b0d      	ldr	r3, [pc, #52]	; (8014b24 <xTaskRemoveFromEventList+0xc0>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d905      	bls.n	8014b04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014af8:	2301      	movs	r3, #1
 8014afa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014afc:	4b0a      	ldr	r3, [pc, #40]	; (8014b28 <xTaskRemoveFromEventList+0xc4>)
 8014afe:	2201      	movs	r2, #1
 8014b00:	601a      	str	r2, [r3, #0]
 8014b02:	e001      	b.n	8014b08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014b04:	2300      	movs	r3, #0
 8014b06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014b08:	697b      	ldr	r3, [r7, #20]
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3718      	adds	r7, #24
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	2000102c 	.word	0x2000102c
 8014b18:	2000100c 	.word	0x2000100c
 8014b1c:	20000b34 	.word	0x20000b34
 8014b20:	20000fc4 	.word	0x20000fc4
 8014b24:	20000b30 	.word	0x20000b30
 8014b28:	20001018 	.word	0x20001018

08014b2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b083      	sub	sp, #12
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014b34:	4b06      	ldr	r3, [pc, #24]	; (8014b50 <vTaskInternalSetTimeOutState+0x24>)
 8014b36:	681a      	ldr	r2, [r3, #0]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014b3c:	4b05      	ldr	r3, [pc, #20]	; (8014b54 <vTaskInternalSetTimeOutState+0x28>)
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	605a      	str	r2, [r3, #4]
}
 8014b44:	bf00      	nop
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr
 8014b50:	2000101c 	.word	0x2000101c
 8014b54:	20001008 	.word	0x20001008

08014b58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b088      	sub	sp, #32
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10a      	bne.n	8014b7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b6c:	f383 8811 	msr	BASEPRI, r3
 8014b70:	f3bf 8f6f 	isb	sy
 8014b74:	f3bf 8f4f 	dsb	sy
 8014b78:	613b      	str	r3, [r7, #16]
}
 8014b7a:	bf00      	nop
 8014b7c:	e7fe      	b.n	8014b7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10a      	bne.n	8014b9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	60fb      	str	r3, [r7, #12]
}
 8014b96:	bf00      	nop
 8014b98:	e7fe      	b.n	8014b98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014b9a:	f000 ff7b 	bl	8015a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014b9e:	4b1d      	ldr	r3, [pc, #116]	; (8014c14 <xTaskCheckForTimeOut+0xbc>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	69ba      	ldr	r2, [r7, #24]
 8014baa:	1ad3      	subs	r3, r2, r3
 8014bac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bb6:	d102      	bne.n	8014bbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	61fb      	str	r3, [r7, #28]
 8014bbc:	e023      	b.n	8014c06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	4b15      	ldr	r3, [pc, #84]	; (8014c18 <xTaskCheckForTimeOut+0xc0>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	d007      	beq.n	8014bda <xTaskCheckForTimeOut+0x82>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	685b      	ldr	r3, [r3, #4]
 8014bce:	69ba      	ldr	r2, [r7, #24]
 8014bd0:	429a      	cmp	r2, r3
 8014bd2:	d302      	bcc.n	8014bda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	61fb      	str	r3, [r7, #28]
 8014bd8:	e015      	b.n	8014c06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	697a      	ldr	r2, [r7, #20]
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d20b      	bcs.n	8014bfc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	681a      	ldr	r2, [r3, #0]
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	1ad2      	subs	r2, r2, r3
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7ff ff9b 	bl	8014b2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	61fb      	str	r3, [r7, #28]
 8014bfa:	e004      	b.n	8014c06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014c02:	2301      	movs	r3, #1
 8014c04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014c06:	f000 ff75 	bl	8015af4 <vPortExitCritical>

	return xReturn;
 8014c0a:	69fb      	ldr	r3, [r7, #28]
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3720      	adds	r7, #32
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}
 8014c14:	20001008 	.word	0x20001008
 8014c18:	2000101c 	.word	0x2000101c

08014c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014c20:	4b03      	ldr	r3, [pc, #12]	; (8014c30 <vTaskMissedYield+0x14>)
 8014c22:	2201      	movs	r2, #1
 8014c24:	601a      	str	r2, [r3, #0]
}
 8014c26:	bf00      	nop
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2e:	4770      	bx	lr
 8014c30:	20001018 	.word	0x20001018

08014c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014c3c:	f000 f852 	bl	8014ce4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014c40:	4b06      	ldr	r3, [pc, #24]	; (8014c5c <prvIdleTask+0x28>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d9f9      	bls.n	8014c3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014c48:	4b05      	ldr	r3, [pc, #20]	; (8014c60 <prvIdleTask+0x2c>)
 8014c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c4e:	601a      	str	r2, [r3, #0]
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014c58:	e7f0      	b.n	8014c3c <prvIdleTask+0x8>
 8014c5a:	bf00      	nop
 8014c5c:	20000b34 	.word	0x20000b34
 8014c60:	e000ed04 	.word	0xe000ed04

08014c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	607b      	str	r3, [r7, #4]
 8014c6e:	e00c      	b.n	8014c8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	4613      	mov	r3, r2
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	4413      	add	r3, r2
 8014c78:	009b      	lsls	r3, r3, #2
 8014c7a:	4a12      	ldr	r2, [pc, #72]	; (8014cc4 <prvInitialiseTaskLists+0x60>)
 8014c7c:	4413      	add	r3, r2
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7fe f98c 	bl	8012f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	3301      	adds	r3, #1
 8014c88:	607b      	str	r3, [r7, #4]
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2b37      	cmp	r3, #55	; 0x37
 8014c8e:	d9ef      	bls.n	8014c70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014c90:	480d      	ldr	r0, [pc, #52]	; (8014cc8 <prvInitialiseTaskLists+0x64>)
 8014c92:	f7fe f983 	bl	8012f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014c96:	480d      	ldr	r0, [pc, #52]	; (8014ccc <prvInitialiseTaskLists+0x68>)
 8014c98:	f7fe f980 	bl	8012f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014c9c:	480c      	ldr	r0, [pc, #48]	; (8014cd0 <prvInitialiseTaskLists+0x6c>)
 8014c9e:	f7fe f97d 	bl	8012f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014ca2:	480c      	ldr	r0, [pc, #48]	; (8014cd4 <prvInitialiseTaskLists+0x70>)
 8014ca4:	f7fe f97a 	bl	8012f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ca8:	480b      	ldr	r0, [pc, #44]	; (8014cd8 <prvInitialiseTaskLists+0x74>)
 8014caa:	f7fe f977 	bl	8012f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014cae:	4b0b      	ldr	r3, [pc, #44]	; (8014cdc <prvInitialiseTaskLists+0x78>)
 8014cb0:	4a05      	ldr	r2, [pc, #20]	; (8014cc8 <prvInitialiseTaskLists+0x64>)
 8014cb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014cb4:	4b0a      	ldr	r3, [pc, #40]	; (8014ce0 <prvInitialiseTaskLists+0x7c>)
 8014cb6:	4a05      	ldr	r2, [pc, #20]	; (8014ccc <prvInitialiseTaskLists+0x68>)
 8014cb8:	601a      	str	r2, [r3, #0]
}
 8014cba:	bf00      	nop
 8014cbc:	3708      	adds	r7, #8
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	20000b34 	.word	0x20000b34
 8014cc8:	20000f94 	.word	0x20000f94
 8014ccc:	20000fa8 	.word	0x20000fa8
 8014cd0:	20000fc4 	.word	0x20000fc4
 8014cd4:	20000fd8 	.word	0x20000fd8
 8014cd8:	20000ff0 	.word	0x20000ff0
 8014cdc:	20000fbc 	.word	0x20000fbc
 8014ce0:	20000fc0 	.word	0x20000fc0

08014ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014cea:	e019      	b.n	8014d20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014cec:	f000 fed2 	bl	8015a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cf0:	4b10      	ldr	r3, [pc, #64]	; (8014d34 <prvCheckTasksWaitingTermination+0x50>)
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	68db      	ldr	r3, [r3, #12]
 8014cf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	3304      	adds	r3, #4
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fe f9d7 	bl	80130b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014d02:	4b0d      	ldr	r3, [pc, #52]	; (8014d38 <prvCheckTasksWaitingTermination+0x54>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	3b01      	subs	r3, #1
 8014d08:	4a0b      	ldr	r2, [pc, #44]	; (8014d38 <prvCheckTasksWaitingTermination+0x54>)
 8014d0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014d0c:	4b0b      	ldr	r3, [pc, #44]	; (8014d3c <prvCheckTasksWaitingTermination+0x58>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	3b01      	subs	r3, #1
 8014d12:	4a0a      	ldr	r2, [pc, #40]	; (8014d3c <prvCheckTasksWaitingTermination+0x58>)
 8014d14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014d16:	f000 feed 	bl	8015af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014d1a:	6878      	ldr	r0, [r7, #4]
 8014d1c:	f000 f810 	bl	8014d40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014d20:	4b06      	ldr	r3, [pc, #24]	; (8014d3c <prvCheckTasksWaitingTermination+0x58>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d1e1      	bne.n	8014cec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014d28:	bf00      	nop
 8014d2a:	bf00      	nop
 8014d2c:	3708      	adds	r7, #8
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}
 8014d32:	bf00      	nop
 8014d34:	20000fd8 	.word	0x20000fd8
 8014d38:	20001004 	.word	0x20001004
 8014d3c:	20000fec 	.word	0x20000fec

08014d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b084      	sub	sp, #16
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d108      	bne.n	8014d64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d56:	4618      	mov	r0, r3
 8014d58:	f001 f88a 	bl	8015e70 <vPortFree>
				vPortFree( pxTCB );
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f001 f887 	bl	8015e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014d62:	e018      	b.n	8014d96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d6a:	2b01      	cmp	r3, #1
 8014d6c:	d103      	bne.n	8014d76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f001 f87e 	bl	8015e70 <vPortFree>
	}
 8014d74:	e00f      	b.n	8014d96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014d7c:	2b02      	cmp	r3, #2
 8014d7e:	d00a      	beq.n	8014d96 <prvDeleteTCB+0x56>
	__asm volatile
 8014d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d84:	f383 8811 	msr	BASEPRI, r3
 8014d88:	f3bf 8f6f 	isb	sy
 8014d8c:	f3bf 8f4f 	dsb	sy
 8014d90:	60fb      	str	r3, [r7, #12]
}
 8014d92:	bf00      	nop
 8014d94:	e7fe      	b.n	8014d94 <prvDeleteTCB+0x54>
	}
 8014d96:	bf00      	nop
 8014d98:	3710      	adds	r7, #16
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}
	...

08014da0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014da0:	b480      	push	{r7}
 8014da2:	b083      	sub	sp, #12
 8014da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014da6:	4b0c      	ldr	r3, [pc, #48]	; (8014dd8 <prvResetNextTaskUnblockTime+0x38>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d104      	bne.n	8014dba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014db0:	4b0a      	ldr	r3, [pc, #40]	; (8014ddc <prvResetNextTaskUnblockTime+0x3c>)
 8014db2:	f04f 32ff 	mov.w	r2, #4294967295
 8014db6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014db8:	e008      	b.n	8014dcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014dba:	4b07      	ldr	r3, [pc, #28]	; (8014dd8 <prvResetNextTaskUnblockTime+0x38>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	68db      	ldr	r3, [r3, #12]
 8014dc0:	68db      	ldr	r3, [r3, #12]
 8014dc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	4a04      	ldr	r2, [pc, #16]	; (8014ddc <prvResetNextTaskUnblockTime+0x3c>)
 8014dca:	6013      	str	r3, [r2, #0]
}
 8014dcc:	bf00      	nop
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr
 8014dd8:	20000fbc 	.word	0x20000fbc
 8014ddc:	20001024 	.word	0x20001024

08014de0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014de0:	b480      	push	{r7}
 8014de2:	b083      	sub	sp, #12
 8014de4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014de6:	4b0b      	ldr	r3, [pc, #44]	; (8014e14 <xTaskGetSchedulerState+0x34>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d102      	bne.n	8014df4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014dee:	2301      	movs	r3, #1
 8014df0:	607b      	str	r3, [r7, #4]
 8014df2:	e008      	b.n	8014e06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014df4:	4b08      	ldr	r3, [pc, #32]	; (8014e18 <xTaskGetSchedulerState+0x38>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d102      	bne.n	8014e02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014dfc:	2302      	movs	r3, #2
 8014dfe:	607b      	str	r3, [r7, #4]
 8014e00:	e001      	b.n	8014e06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014e02:	2300      	movs	r3, #0
 8014e04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014e06:	687b      	ldr	r3, [r7, #4]
	}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	370c      	adds	r7, #12
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e12:	4770      	bx	lr
 8014e14:	20001010 	.word	0x20001010
 8014e18:	2000102c 	.word	0x2000102c

08014e1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b084      	sub	sp, #16
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d051      	beq.n	8014ed6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e36:	4b2a      	ldr	r3, [pc, #168]	; (8014ee0 <xTaskPriorityInherit+0xc4>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d241      	bcs.n	8014ec4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	699b      	ldr	r3, [r3, #24]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	db06      	blt.n	8014e56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e48:	4b25      	ldr	r3, [pc, #148]	; (8014ee0 <xTaskPriorityInherit+0xc4>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	6959      	ldr	r1, [r3, #20]
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e5e:	4613      	mov	r3, r2
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	4413      	add	r3, r2
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	4a1f      	ldr	r2, [pc, #124]	; (8014ee4 <xTaskPriorityInherit+0xc8>)
 8014e68:	4413      	add	r3, r2
 8014e6a:	4299      	cmp	r1, r3
 8014e6c:	d122      	bne.n	8014eb4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	3304      	adds	r3, #4
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7fe f91c 	bl	80130b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e78:	4b19      	ldr	r3, [pc, #100]	; (8014ee0 <xTaskPriorityInherit+0xc4>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e86:	4b18      	ldr	r3, [pc, #96]	; (8014ee8 <xTaskPriorityInherit+0xcc>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d903      	bls.n	8014e96 <xTaskPriorityInherit+0x7a>
 8014e8e:	68bb      	ldr	r3, [r7, #8]
 8014e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e92:	4a15      	ldr	r2, [pc, #84]	; (8014ee8 <xTaskPriorityInherit+0xcc>)
 8014e94:	6013      	str	r3, [r2, #0]
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	009b      	lsls	r3, r3, #2
 8014e9e:	4413      	add	r3, r2
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	4a10      	ldr	r2, [pc, #64]	; (8014ee4 <xTaskPriorityInherit+0xc8>)
 8014ea4:	441a      	add	r2, r3
 8014ea6:	68bb      	ldr	r3, [r7, #8]
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	4619      	mov	r1, r3
 8014eac:	4610      	mov	r0, r2
 8014eae:	f7fe f8a2 	bl	8012ff6 <vListInsertEnd>
 8014eb2:	e004      	b.n	8014ebe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014eb4:	4b0a      	ldr	r3, [pc, #40]	; (8014ee0 <xTaskPriorityInherit+0xc4>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	60fb      	str	r3, [r7, #12]
 8014ec2:	e008      	b.n	8014ed6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ec8:	4b05      	ldr	r3, [pc, #20]	; (8014ee0 <xTaskPriorityInherit+0xc4>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d201      	bcs.n	8014ed6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
	}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3710      	adds	r7, #16
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	20000b30 	.word	0x20000b30
 8014ee4:	20000b34 	.word	0x20000b34
 8014ee8:	2000100c 	.word	0x2000100c

08014eec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b086      	sub	sp, #24
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d056      	beq.n	8014fb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f02:	4b2e      	ldr	r3, [pc, #184]	; (8014fbc <xTaskPriorityDisinherit+0xd0>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	693a      	ldr	r2, [r7, #16]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d00a      	beq.n	8014f22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f10:	f383 8811 	msr	BASEPRI, r3
 8014f14:	f3bf 8f6f 	isb	sy
 8014f18:	f3bf 8f4f 	dsb	sy
 8014f1c:	60fb      	str	r3, [r7, #12]
}
 8014f1e:	bf00      	nop
 8014f20:	e7fe      	b.n	8014f20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d10a      	bne.n	8014f40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f2e:	f383 8811 	msr	BASEPRI, r3
 8014f32:	f3bf 8f6f 	isb	sy
 8014f36:	f3bf 8f4f 	dsb	sy
 8014f3a:	60bb      	str	r3, [r7, #8]
}
 8014f3c:	bf00      	nop
 8014f3e:	e7fe      	b.n	8014f3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f44:	1e5a      	subs	r2, r3, #1
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d02c      	beq.n	8014fb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d128      	bne.n	8014fb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	3304      	adds	r3, #4
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7fe f8a4 	bl	80130b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f80:	4b0f      	ldr	r3, [pc, #60]	; (8014fc0 <xTaskPriorityDisinherit+0xd4>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d903      	bls.n	8014f90 <xTaskPriorityDisinherit+0xa4>
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f8c:	4a0c      	ldr	r2, [pc, #48]	; (8014fc0 <xTaskPriorityDisinherit+0xd4>)
 8014f8e:	6013      	str	r3, [r2, #0]
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f94:	4613      	mov	r3, r2
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	4413      	add	r3, r2
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	4a09      	ldr	r2, [pc, #36]	; (8014fc4 <xTaskPriorityDisinherit+0xd8>)
 8014f9e:	441a      	add	r2, r3
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	4610      	mov	r0, r2
 8014fa8:	f7fe f825 	bl	8012ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014fac:	2301      	movs	r3, #1
 8014fae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014fb0:	697b      	ldr	r3, [r7, #20]
	}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3718      	adds	r7, #24
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	20000b30 	.word	0x20000b30
 8014fc0:	2000100c 	.word	0x2000100c
 8014fc4:	20000b34 	.word	0x20000b34

08014fc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b088      	sub	sp, #32
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d06a      	beq.n	80150b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d10a      	bne.n	8014ffe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fec:	f383 8811 	msr	BASEPRI, r3
 8014ff0:	f3bf 8f6f 	isb	sy
 8014ff4:	f3bf 8f4f 	dsb	sy
 8014ff8:	60fb      	str	r3, [r7, #12]
}
 8014ffa:	bf00      	nop
 8014ffc:	e7fe      	b.n	8014ffc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015002:	683a      	ldr	r2, [r7, #0]
 8015004:	429a      	cmp	r2, r3
 8015006:	d902      	bls.n	801500e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	61fb      	str	r3, [r7, #28]
 801500c:	e002      	b.n	8015014 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015012:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015018:	69fa      	ldr	r2, [r7, #28]
 801501a:	429a      	cmp	r2, r3
 801501c:	d04b      	beq.n	80150b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015022:	697a      	ldr	r2, [r7, #20]
 8015024:	429a      	cmp	r2, r3
 8015026:	d146      	bne.n	80150b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015028:	4b25      	ldr	r3, [pc, #148]	; (80150c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	69ba      	ldr	r2, [r7, #24]
 801502e:	429a      	cmp	r2, r3
 8015030:	d10a      	bne.n	8015048 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8015032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015036:	f383 8811 	msr	BASEPRI, r3
 801503a:	f3bf 8f6f 	isb	sy
 801503e:	f3bf 8f4f 	dsb	sy
 8015042:	60bb      	str	r3, [r7, #8]
}
 8015044:	bf00      	nop
 8015046:	e7fe      	b.n	8015046 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015048:	69bb      	ldr	r3, [r7, #24]
 801504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801504c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	69fa      	ldr	r2, [r7, #28]
 8015052:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015054:	69bb      	ldr	r3, [r7, #24]
 8015056:	699b      	ldr	r3, [r3, #24]
 8015058:	2b00      	cmp	r3, #0
 801505a:	db04      	blt.n	8015066 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801505c:	69fb      	ldr	r3, [r7, #28]
 801505e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015062:	69bb      	ldr	r3, [r7, #24]
 8015064:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	6959      	ldr	r1, [r3, #20]
 801506a:	693a      	ldr	r2, [r7, #16]
 801506c:	4613      	mov	r3, r2
 801506e:	009b      	lsls	r3, r3, #2
 8015070:	4413      	add	r3, r2
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	4a13      	ldr	r2, [pc, #76]	; (80150c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015076:	4413      	add	r3, r2
 8015078:	4299      	cmp	r1, r3
 801507a:	d11c      	bne.n	80150b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	3304      	adds	r3, #4
 8015080:	4618      	mov	r0, r3
 8015082:	f7fe f815 	bl	80130b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015086:	69bb      	ldr	r3, [r7, #24]
 8015088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801508a:	4b0f      	ldr	r3, [pc, #60]	; (80150c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	429a      	cmp	r2, r3
 8015090:	d903      	bls.n	801509a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015096:	4a0c      	ldr	r2, [pc, #48]	; (80150c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015098:	6013      	str	r3, [r2, #0]
 801509a:	69bb      	ldr	r3, [r7, #24]
 801509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801509e:	4613      	mov	r3, r2
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	4413      	add	r3, r2
 80150a4:	009b      	lsls	r3, r3, #2
 80150a6:	4a07      	ldr	r2, [pc, #28]	; (80150c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80150a8:	441a      	add	r2, r3
 80150aa:	69bb      	ldr	r3, [r7, #24]
 80150ac:	3304      	adds	r3, #4
 80150ae:	4619      	mov	r1, r3
 80150b0:	4610      	mov	r0, r2
 80150b2:	f7fd ffa0 	bl	8012ff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80150b6:	bf00      	nop
 80150b8:	3720      	adds	r7, #32
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	20000b30 	.word	0x20000b30
 80150c4:	20000b34 	.word	0x20000b34
 80150c8:	2000100c 	.word	0x2000100c

080150cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80150cc:	b480      	push	{r7}
 80150ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80150d0:	4b07      	ldr	r3, [pc, #28]	; (80150f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d004      	beq.n	80150e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80150d8:	4b05      	ldr	r3, [pc, #20]	; (80150f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150de:	3201      	adds	r2, #1
 80150e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80150e2:	4b03      	ldr	r3, [pc, #12]	; (80150f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80150e4:	681b      	ldr	r3, [r3, #0]
	}
 80150e6:	4618      	mov	r0, r3
 80150e8:	46bd      	mov	sp, r7
 80150ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ee:	4770      	bx	lr
 80150f0:	20000b30 	.word	0x20000b30

080150f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b084      	sub	sp, #16
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80150fe:	4b21      	ldr	r3, [pc, #132]	; (8015184 <prvAddCurrentTaskToDelayedList+0x90>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015104:	4b20      	ldr	r3, [pc, #128]	; (8015188 <prvAddCurrentTaskToDelayedList+0x94>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	3304      	adds	r3, #4
 801510a:	4618      	mov	r0, r3
 801510c:	f7fd ffd0 	bl	80130b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015116:	d10a      	bne.n	801512e <prvAddCurrentTaskToDelayedList+0x3a>
 8015118:	683b      	ldr	r3, [r7, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d007      	beq.n	801512e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801511e:	4b1a      	ldr	r3, [pc, #104]	; (8015188 <prvAddCurrentTaskToDelayedList+0x94>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	3304      	adds	r3, #4
 8015124:	4619      	mov	r1, r3
 8015126:	4819      	ldr	r0, [pc, #100]	; (801518c <prvAddCurrentTaskToDelayedList+0x98>)
 8015128:	f7fd ff65 	bl	8012ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801512c:	e026      	b.n	801517c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	4413      	add	r3, r2
 8015134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015136:	4b14      	ldr	r3, [pc, #80]	; (8015188 <prvAddCurrentTaskToDelayedList+0x94>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801513e:	68ba      	ldr	r2, [r7, #8]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	429a      	cmp	r2, r3
 8015144:	d209      	bcs.n	801515a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015146:	4b12      	ldr	r3, [pc, #72]	; (8015190 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	4b0f      	ldr	r3, [pc, #60]	; (8015188 <prvAddCurrentTaskToDelayedList+0x94>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	3304      	adds	r3, #4
 8015150:	4619      	mov	r1, r3
 8015152:	4610      	mov	r0, r2
 8015154:	f7fd ff73 	bl	801303e <vListInsert>
}
 8015158:	e010      	b.n	801517c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801515a:	4b0e      	ldr	r3, [pc, #56]	; (8015194 <prvAddCurrentTaskToDelayedList+0xa0>)
 801515c:	681a      	ldr	r2, [r3, #0]
 801515e:	4b0a      	ldr	r3, [pc, #40]	; (8015188 <prvAddCurrentTaskToDelayedList+0x94>)
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	3304      	adds	r3, #4
 8015164:	4619      	mov	r1, r3
 8015166:	4610      	mov	r0, r2
 8015168:	f7fd ff69 	bl	801303e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801516c:	4b0a      	ldr	r3, [pc, #40]	; (8015198 <prvAddCurrentTaskToDelayedList+0xa4>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68ba      	ldr	r2, [r7, #8]
 8015172:	429a      	cmp	r2, r3
 8015174:	d202      	bcs.n	801517c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015176:	4a08      	ldr	r2, [pc, #32]	; (8015198 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	6013      	str	r3, [r2, #0]
}
 801517c:	bf00      	nop
 801517e:	3710      	adds	r7, #16
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	20001008 	.word	0x20001008
 8015188:	20000b30 	.word	0x20000b30
 801518c:	20000ff0 	.word	0x20000ff0
 8015190:	20000fc0 	.word	0x20000fc0
 8015194:	20000fbc 	.word	0x20000fbc
 8015198:	20001024 	.word	0x20001024

0801519c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b08a      	sub	sp, #40	; 0x28
 80151a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80151a6:	f000 fb07 	bl	80157b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80151aa:	4b1c      	ldr	r3, [pc, #112]	; (801521c <xTimerCreateTimerTask+0x80>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d021      	beq.n	80151f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80151b2:	2300      	movs	r3, #0
 80151b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80151ba:	1d3a      	adds	r2, r7, #4
 80151bc:	f107 0108 	add.w	r1, r7, #8
 80151c0:	f107 030c 	add.w	r3, r7, #12
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7fd fecf 	bl	8012f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80151ca:	6879      	ldr	r1, [r7, #4]
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	68fa      	ldr	r2, [r7, #12]
 80151d0:	9202      	str	r2, [sp, #8]
 80151d2:	9301      	str	r3, [sp, #4]
 80151d4:	2302      	movs	r3, #2
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	2300      	movs	r3, #0
 80151da:	460a      	mov	r2, r1
 80151dc:	4910      	ldr	r1, [pc, #64]	; (8015220 <xTimerCreateTimerTask+0x84>)
 80151de:	4811      	ldr	r0, [pc, #68]	; (8015224 <xTimerCreateTimerTask+0x88>)
 80151e0:	f7fe ff9e 	bl	8014120 <xTaskCreateStatic>
 80151e4:	4603      	mov	r3, r0
 80151e6:	4a10      	ldr	r2, [pc, #64]	; (8015228 <xTimerCreateTimerTask+0x8c>)
 80151e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80151ea:	4b0f      	ldr	r3, [pc, #60]	; (8015228 <xTimerCreateTimerTask+0x8c>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d001      	beq.n	80151f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80151f2:	2301      	movs	r3, #1
 80151f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d10a      	bne.n	8015212 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80151fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015200:	f383 8811 	msr	BASEPRI, r3
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	613b      	str	r3, [r7, #16]
}
 801520e:	bf00      	nop
 8015210:	e7fe      	b.n	8015210 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015212:	697b      	ldr	r3, [r7, #20]
}
 8015214:	4618      	mov	r0, r3
 8015216:	3718      	adds	r7, #24
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	20001060 	.word	0x20001060
 8015220:	0801ca58 	.word	0x0801ca58
 8015224:	08015361 	.word	0x08015361
 8015228:	20001064 	.word	0x20001064

0801522c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b08a      	sub	sp, #40	; 0x28
 8015230:	af00      	add	r7, sp, #0
 8015232:	60f8      	str	r0, [r7, #12]
 8015234:	60b9      	str	r1, [r7, #8]
 8015236:	607a      	str	r2, [r7, #4]
 8015238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801523a:	2300      	movs	r3, #0
 801523c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d10a      	bne.n	801525a <xTimerGenericCommand+0x2e>
	__asm volatile
 8015244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015248:	f383 8811 	msr	BASEPRI, r3
 801524c:	f3bf 8f6f 	isb	sy
 8015250:	f3bf 8f4f 	dsb	sy
 8015254:	623b      	str	r3, [r7, #32]
}
 8015256:	bf00      	nop
 8015258:	e7fe      	b.n	8015258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801525a:	4b1a      	ldr	r3, [pc, #104]	; (80152c4 <xTimerGenericCommand+0x98>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d02a      	beq.n	80152b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	2b05      	cmp	r3, #5
 8015272:	dc18      	bgt.n	80152a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015274:	f7ff fdb4 	bl	8014de0 <xTaskGetSchedulerState>
 8015278:	4603      	mov	r3, r0
 801527a:	2b02      	cmp	r3, #2
 801527c:	d109      	bne.n	8015292 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801527e:	4b11      	ldr	r3, [pc, #68]	; (80152c4 <xTimerGenericCommand+0x98>)
 8015280:	6818      	ldr	r0, [r3, #0]
 8015282:	f107 0110 	add.w	r1, r7, #16
 8015286:	2300      	movs	r3, #0
 8015288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801528a:	f7fe f8e3 	bl	8013454 <xQueueGenericSend>
 801528e:	6278      	str	r0, [r7, #36]	; 0x24
 8015290:	e012      	b.n	80152b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015292:	4b0c      	ldr	r3, [pc, #48]	; (80152c4 <xTimerGenericCommand+0x98>)
 8015294:	6818      	ldr	r0, [r3, #0]
 8015296:	f107 0110 	add.w	r1, r7, #16
 801529a:	2300      	movs	r3, #0
 801529c:	2200      	movs	r2, #0
 801529e:	f7fe f8d9 	bl	8013454 <xQueueGenericSend>
 80152a2:	6278      	str	r0, [r7, #36]	; 0x24
 80152a4:	e008      	b.n	80152b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80152a6:	4b07      	ldr	r3, [pc, #28]	; (80152c4 <xTimerGenericCommand+0x98>)
 80152a8:	6818      	ldr	r0, [r3, #0]
 80152aa:	f107 0110 	add.w	r1, r7, #16
 80152ae:	2300      	movs	r3, #0
 80152b0:	683a      	ldr	r2, [r7, #0]
 80152b2:	f7fe f9cd 	bl	8013650 <xQueueGenericSendFromISR>
 80152b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80152b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3728      	adds	r7, #40	; 0x28
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}
 80152c2:	bf00      	nop
 80152c4:	20001060 	.word	0x20001060

080152c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b088      	sub	sp, #32
 80152cc:	af02      	add	r7, sp, #8
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152d2:	4b22      	ldr	r3, [pc, #136]	; (801535c <prvProcessExpiredTimer+0x94>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	68db      	ldr	r3, [r3, #12]
 80152da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	3304      	adds	r3, #4
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7fd fee5 	bl	80130b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152ec:	f003 0304 	and.w	r3, r3, #4
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d022      	beq.n	801533a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	699a      	ldr	r2, [r3, #24]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	18d1      	adds	r1, r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	683a      	ldr	r2, [r7, #0]
 8015300:	6978      	ldr	r0, [r7, #20]
 8015302:	f000 f8d1 	bl	80154a8 <prvInsertTimerInActiveList>
 8015306:	4603      	mov	r3, r0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d01f      	beq.n	801534c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801530c:	2300      	movs	r3, #0
 801530e:	9300      	str	r3, [sp, #0]
 8015310:	2300      	movs	r3, #0
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	2100      	movs	r1, #0
 8015316:	6978      	ldr	r0, [r7, #20]
 8015318:	f7ff ff88 	bl	801522c <xTimerGenericCommand>
 801531c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d113      	bne.n	801534c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015328:	f383 8811 	msr	BASEPRI, r3
 801532c:	f3bf 8f6f 	isb	sy
 8015330:	f3bf 8f4f 	dsb	sy
 8015334:	60fb      	str	r3, [r7, #12]
}
 8015336:	bf00      	nop
 8015338:	e7fe      	b.n	8015338 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015340:	f023 0301 	bic.w	r3, r3, #1
 8015344:	b2da      	uxtb	r2, r3
 8015346:	697b      	ldr	r3, [r7, #20]
 8015348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	6a1b      	ldr	r3, [r3, #32]
 8015350:	6978      	ldr	r0, [r7, #20]
 8015352:	4798      	blx	r3
}
 8015354:	bf00      	nop
 8015356:	3718      	adds	r7, #24
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20001058 	.word	0x20001058

08015360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015368:	f107 0308 	add.w	r3, r7, #8
 801536c:	4618      	mov	r0, r3
 801536e:	f000 f857 	bl	8015420 <prvGetNextExpireTime>
 8015372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	4619      	mov	r1, r3
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f000 f803 	bl	8015384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801537e:	f000 f8d5 	bl	801552c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015382:	e7f1      	b.n	8015368 <prvTimerTask+0x8>

08015384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801538e:	f7ff f945 	bl	801461c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015392:	f107 0308 	add.w	r3, r7, #8
 8015396:	4618      	mov	r0, r3
 8015398:	f000 f866 	bl	8015468 <prvSampleTimeNow>
 801539c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d130      	bne.n	8015406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d10a      	bne.n	80153c0 <prvProcessTimerOrBlockTask+0x3c>
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d806      	bhi.n	80153c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80153b2:	f7ff f941 	bl	8014638 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80153b6:	68f9      	ldr	r1, [r7, #12]
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f7ff ff85 	bl	80152c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80153be:	e024      	b.n	801540a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d008      	beq.n	80153d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80153c6:	4b13      	ldr	r3, [pc, #76]	; (8015414 <prvProcessTimerOrBlockTask+0x90>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d101      	bne.n	80153d4 <prvProcessTimerOrBlockTask+0x50>
 80153d0:	2301      	movs	r3, #1
 80153d2:	e000      	b.n	80153d6 <prvProcessTimerOrBlockTask+0x52>
 80153d4:	2300      	movs	r3, #0
 80153d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80153d8:	4b0f      	ldr	r3, [pc, #60]	; (8015418 <prvProcessTimerOrBlockTask+0x94>)
 80153da:	6818      	ldr	r0, [r3, #0]
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	1ad3      	subs	r3, r2, r3
 80153e2:	683a      	ldr	r2, [r7, #0]
 80153e4:	4619      	mov	r1, r3
 80153e6:	f7fe fe67 	bl	80140b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80153ea:	f7ff f925 	bl	8014638 <xTaskResumeAll>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d10a      	bne.n	801540a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80153f4:	4b09      	ldr	r3, [pc, #36]	; (801541c <prvProcessTimerOrBlockTask+0x98>)
 80153f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153fa:	601a      	str	r2, [r3, #0]
 80153fc:	f3bf 8f4f 	dsb	sy
 8015400:	f3bf 8f6f 	isb	sy
}
 8015404:	e001      	b.n	801540a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015406:	f7ff f917 	bl	8014638 <xTaskResumeAll>
}
 801540a:	bf00      	nop
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	2000105c 	.word	0x2000105c
 8015418:	20001060 	.word	0x20001060
 801541c:	e000ed04 	.word	0xe000ed04

08015420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015420:	b480      	push	{r7}
 8015422:	b085      	sub	sp, #20
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015428:	4b0e      	ldr	r3, [pc, #56]	; (8015464 <prvGetNextExpireTime+0x44>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <prvGetNextExpireTime+0x16>
 8015432:	2201      	movs	r2, #1
 8015434:	e000      	b.n	8015438 <prvGetNextExpireTime+0x18>
 8015436:	2200      	movs	r2, #0
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d105      	bne.n	8015450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015444:	4b07      	ldr	r3, [pc, #28]	; (8015464 <prvGetNextExpireTime+0x44>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	68db      	ldr	r3, [r3, #12]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	60fb      	str	r3, [r7, #12]
 801544e:	e001      	b.n	8015454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015450:	2300      	movs	r3, #0
 8015452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015454:	68fb      	ldr	r3, [r7, #12]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3714      	adds	r7, #20
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr
 8015462:	bf00      	nop
 8015464:	20001058 	.word	0x20001058

08015468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015470:	f7ff f980 	bl	8014774 <xTaskGetTickCount>
 8015474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015476:	4b0b      	ldr	r3, [pc, #44]	; (80154a4 <prvSampleTimeNow+0x3c>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	68fa      	ldr	r2, [r7, #12]
 801547c:	429a      	cmp	r2, r3
 801547e:	d205      	bcs.n	801548c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015480:	f000 f936 	bl	80156f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2201      	movs	r2, #1
 8015488:	601a      	str	r2, [r3, #0]
 801548a:	e002      	b.n	8015492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2200      	movs	r2, #0
 8015490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015492:	4a04      	ldr	r2, [pc, #16]	; (80154a4 <prvSampleTimeNow+0x3c>)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015498:	68fb      	ldr	r3, [r7, #12]
}
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	20001068 	.word	0x20001068

080154a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b086      	sub	sp, #24
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	60f8      	str	r0, [r7, #12]
 80154b0:	60b9      	str	r1, [r7, #8]
 80154b2:	607a      	str	r2, [r7, #4]
 80154b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80154b6:	2300      	movs	r3, #0
 80154b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	68ba      	ldr	r2, [r7, #8]
 80154be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80154c6:	68ba      	ldr	r2, [r7, #8]
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d812      	bhi.n	80154f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154ce:	687a      	ldr	r2, [r7, #4]
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	1ad2      	subs	r2, r2, r3
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	699b      	ldr	r3, [r3, #24]
 80154d8:	429a      	cmp	r2, r3
 80154da:	d302      	bcc.n	80154e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80154dc:	2301      	movs	r3, #1
 80154de:	617b      	str	r3, [r7, #20]
 80154e0:	e01b      	b.n	801551a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80154e2:	4b10      	ldr	r3, [pc, #64]	; (8015524 <prvInsertTimerInActiveList+0x7c>)
 80154e4:	681a      	ldr	r2, [r3, #0]
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	3304      	adds	r3, #4
 80154ea:	4619      	mov	r1, r3
 80154ec:	4610      	mov	r0, r2
 80154ee:	f7fd fda6 	bl	801303e <vListInsert>
 80154f2:	e012      	b.n	801551a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80154f4:	687a      	ldr	r2, [r7, #4]
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d206      	bcs.n	801550a <prvInsertTimerInActiveList+0x62>
 80154fc:	68ba      	ldr	r2, [r7, #8]
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	429a      	cmp	r2, r3
 8015502:	d302      	bcc.n	801550a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015504:	2301      	movs	r3, #1
 8015506:	617b      	str	r3, [r7, #20]
 8015508:	e007      	b.n	801551a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801550a:	4b07      	ldr	r3, [pc, #28]	; (8015528 <prvInsertTimerInActiveList+0x80>)
 801550c:	681a      	ldr	r2, [r3, #0]
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	3304      	adds	r3, #4
 8015512:	4619      	mov	r1, r3
 8015514:	4610      	mov	r0, r2
 8015516:	f7fd fd92 	bl	801303e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801551a:	697b      	ldr	r3, [r7, #20]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3718      	adds	r7, #24
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	2000105c 	.word	0x2000105c
 8015528:	20001058 	.word	0x20001058

0801552c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b08e      	sub	sp, #56	; 0x38
 8015530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015532:	e0ca      	b.n	80156ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	da18      	bge.n	801556c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801553a:	1d3b      	adds	r3, r7, #4
 801553c:	3304      	adds	r3, #4
 801553e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10a      	bne.n	801555c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801554a:	f383 8811 	msr	BASEPRI, r3
 801554e:	f3bf 8f6f 	isb	sy
 8015552:	f3bf 8f4f 	dsb	sy
 8015556:	61fb      	str	r3, [r7, #28]
}
 8015558:	bf00      	nop
 801555a:	e7fe      	b.n	801555a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015562:	6850      	ldr	r0, [r2, #4]
 8015564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015566:	6892      	ldr	r2, [r2, #8]
 8015568:	4611      	mov	r1, r2
 801556a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2b00      	cmp	r3, #0
 8015570:	f2c0 80aa 	blt.w	80156c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557a:	695b      	ldr	r3, [r3, #20]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d004      	beq.n	801558a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015582:	3304      	adds	r3, #4
 8015584:	4618      	mov	r0, r3
 8015586:	f7fd fd93 	bl	80130b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801558a:	463b      	mov	r3, r7
 801558c:	4618      	mov	r0, r3
 801558e:	f7ff ff6b 	bl	8015468 <prvSampleTimeNow>
 8015592:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2b09      	cmp	r3, #9
 8015598:	f200 8097 	bhi.w	80156ca <prvProcessReceivedCommands+0x19e>
 801559c:	a201      	add	r2, pc, #4	; (adr r2, 80155a4 <prvProcessReceivedCommands+0x78>)
 801559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155a2:	bf00      	nop
 80155a4:	080155cd 	.word	0x080155cd
 80155a8:	080155cd 	.word	0x080155cd
 80155ac:	080155cd 	.word	0x080155cd
 80155b0:	08015641 	.word	0x08015641
 80155b4:	08015655 	.word	0x08015655
 80155b8:	0801569f 	.word	0x0801569f
 80155bc:	080155cd 	.word	0x080155cd
 80155c0:	080155cd 	.word	0x080155cd
 80155c4:	08015641 	.word	0x08015641
 80155c8:	08015655 	.word	0x08015655
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155d2:	f043 0301 	orr.w	r3, r3, #1
 80155d6:	b2da      	uxtb	r2, r3
 80155d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80155de:	68ba      	ldr	r2, [r7, #8]
 80155e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e2:	699b      	ldr	r3, [r3, #24]
 80155e4:	18d1      	adds	r1, r2, r3
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155ec:	f7ff ff5c 	bl	80154a8 <prvInsertTimerInActiveList>
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d069      	beq.n	80156ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f8:	6a1b      	ldr	r3, [r3, #32]
 80155fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015604:	f003 0304 	and.w	r3, r3, #4
 8015608:	2b00      	cmp	r3, #0
 801560a:	d05e      	beq.n	80156ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801560c:	68ba      	ldr	r2, [r7, #8]
 801560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015610:	699b      	ldr	r3, [r3, #24]
 8015612:	441a      	add	r2, r3
 8015614:	2300      	movs	r3, #0
 8015616:	9300      	str	r3, [sp, #0]
 8015618:	2300      	movs	r3, #0
 801561a:	2100      	movs	r1, #0
 801561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801561e:	f7ff fe05 	bl	801522c <xTimerGenericCommand>
 8015622:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015624:	6a3b      	ldr	r3, [r7, #32]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d14f      	bne.n	80156ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562e:	f383 8811 	msr	BASEPRI, r3
 8015632:	f3bf 8f6f 	isb	sy
 8015636:	f3bf 8f4f 	dsb	sy
 801563a:	61bb      	str	r3, [r7, #24]
}
 801563c:	bf00      	nop
 801563e:	e7fe      	b.n	801563e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015646:	f023 0301 	bic.w	r3, r3, #1
 801564a:	b2da      	uxtb	r2, r3
 801564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801564e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015652:	e03a      	b.n	80156ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801565a:	f043 0301 	orr.w	r3, r3, #1
 801565e:	b2da      	uxtb	r2, r3
 8015660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801566e:	699b      	ldr	r3, [r3, #24]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d10a      	bne.n	801568a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015678:	f383 8811 	msr	BASEPRI, r3
 801567c:	f3bf 8f6f 	isb	sy
 8015680:	f3bf 8f4f 	dsb	sy
 8015684:	617b      	str	r3, [r7, #20]
}
 8015686:	bf00      	nop
 8015688:	e7fe      	b.n	8015688 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801568c:	699a      	ldr	r2, [r3, #24]
 801568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015690:	18d1      	adds	r1, r2, r3
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015698:	f7ff ff06 	bl	80154a8 <prvInsertTimerInActiveList>
					break;
 801569c:	e015      	b.n	80156ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156a4:	f003 0302 	and.w	r3, r3, #2
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d103      	bne.n	80156b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80156ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156ae:	f000 fbdf 	bl	8015e70 <vPortFree>
 80156b2:	e00a      	b.n	80156ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ba:	f023 0301 	bic.w	r3, r3, #1
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80156c6:	e000      	b.n	80156ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80156c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156ca:	4b08      	ldr	r3, [pc, #32]	; (80156ec <prvProcessReceivedCommands+0x1c0>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	1d39      	adds	r1, r7, #4
 80156d0:	2200      	movs	r2, #0
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7fe f8e4 	bl	80138a0 <xQueueReceive>
 80156d8:	4603      	mov	r3, r0
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f47f af2a 	bne.w	8015534 <prvProcessReceivedCommands+0x8>
	}
}
 80156e0:	bf00      	nop
 80156e2:	bf00      	nop
 80156e4:	3730      	adds	r7, #48	; 0x30
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	20001060 	.word	0x20001060

080156f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b088      	sub	sp, #32
 80156f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80156f6:	e048      	b.n	801578a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80156f8:	4b2d      	ldr	r3, [pc, #180]	; (80157b0 <prvSwitchTimerLists+0xc0>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	68db      	ldr	r3, [r3, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015702:	4b2b      	ldr	r3, [pc, #172]	; (80157b0 <prvSwitchTimerLists+0xc0>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	68db      	ldr	r3, [r3, #12]
 801570a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	3304      	adds	r3, #4
 8015710:	4618      	mov	r0, r3
 8015712:	f7fd fccd 	bl	80130b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	6a1b      	ldr	r3, [r3, #32]
 801571a:	68f8      	ldr	r0, [r7, #12]
 801571c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015724:	f003 0304 	and.w	r3, r3, #4
 8015728:	2b00      	cmp	r3, #0
 801572a:	d02e      	beq.n	801578a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	699b      	ldr	r3, [r3, #24]
 8015730:	693a      	ldr	r2, [r7, #16]
 8015732:	4413      	add	r3, r2
 8015734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015736:	68ba      	ldr	r2, [r7, #8]
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	429a      	cmp	r2, r3
 801573c:	d90e      	bls.n	801575c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	68ba      	ldr	r2, [r7, #8]
 8015742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	68fa      	ldr	r2, [r7, #12]
 8015748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801574a:	4b19      	ldr	r3, [pc, #100]	; (80157b0 <prvSwitchTimerLists+0xc0>)
 801574c:	681a      	ldr	r2, [r3, #0]
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	3304      	adds	r3, #4
 8015752:	4619      	mov	r1, r3
 8015754:	4610      	mov	r0, r2
 8015756:	f7fd fc72 	bl	801303e <vListInsert>
 801575a:	e016      	b.n	801578a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801575c:	2300      	movs	r3, #0
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	2300      	movs	r3, #0
 8015762:	693a      	ldr	r2, [r7, #16]
 8015764:	2100      	movs	r1, #0
 8015766:	68f8      	ldr	r0, [r7, #12]
 8015768:	f7ff fd60 	bl	801522c <xTimerGenericCommand>
 801576c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d10a      	bne.n	801578a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015778:	f383 8811 	msr	BASEPRI, r3
 801577c:	f3bf 8f6f 	isb	sy
 8015780:	f3bf 8f4f 	dsb	sy
 8015784:	603b      	str	r3, [r7, #0]
}
 8015786:	bf00      	nop
 8015788:	e7fe      	b.n	8015788 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801578a:	4b09      	ldr	r3, [pc, #36]	; (80157b0 <prvSwitchTimerLists+0xc0>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d1b1      	bne.n	80156f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015794:	4b06      	ldr	r3, [pc, #24]	; (80157b0 <prvSwitchTimerLists+0xc0>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801579a:	4b06      	ldr	r3, [pc, #24]	; (80157b4 <prvSwitchTimerLists+0xc4>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	4a04      	ldr	r2, [pc, #16]	; (80157b0 <prvSwitchTimerLists+0xc0>)
 80157a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80157a2:	4a04      	ldr	r2, [pc, #16]	; (80157b4 <prvSwitchTimerLists+0xc4>)
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	6013      	str	r3, [r2, #0]
}
 80157a8:	bf00      	nop
 80157aa:	3718      	adds	r7, #24
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	20001058 	.word	0x20001058
 80157b4:	2000105c 	.word	0x2000105c

080157b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80157be:	f000 f969 	bl	8015a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80157c2:	4b15      	ldr	r3, [pc, #84]	; (8015818 <prvCheckForValidListAndQueue+0x60>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d120      	bne.n	801580c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80157ca:	4814      	ldr	r0, [pc, #80]	; (801581c <prvCheckForValidListAndQueue+0x64>)
 80157cc:	f7fd fbe6 	bl	8012f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80157d0:	4813      	ldr	r0, [pc, #76]	; (8015820 <prvCheckForValidListAndQueue+0x68>)
 80157d2:	f7fd fbe3 	bl	8012f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80157d6:	4b13      	ldr	r3, [pc, #76]	; (8015824 <prvCheckForValidListAndQueue+0x6c>)
 80157d8:	4a10      	ldr	r2, [pc, #64]	; (801581c <prvCheckForValidListAndQueue+0x64>)
 80157da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80157dc:	4b12      	ldr	r3, [pc, #72]	; (8015828 <prvCheckForValidListAndQueue+0x70>)
 80157de:	4a10      	ldr	r2, [pc, #64]	; (8015820 <prvCheckForValidListAndQueue+0x68>)
 80157e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80157e2:	2300      	movs	r3, #0
 80157e4:	9300      	str	r3, [sp, #0]
 80157e6:	4b11      	ldr	r3, [pc, #68]	; (801582c <prvCheckForValidListAndQueue+0x74>)
 80157e8:	4a11      	ldr	r2, [pc, #68]	; (8015830 <prvCheckForValidListAndQueue+0x78>)
 80157ea:	2110      	movs	r1, #16
 80157ec:	200a      	movs	r0, #10
 80157ee:	f7fd fcf1 	bl	80131d4 <xQueueGenericCreateStatic>
 80157f2:	4603      	mov	r3, r0
 80157f4:	4a08      	ldr	r2, [pc, #32]	; (8015818 <prvCheckForValidListAndQueue+0x60>)
 80157f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80157f8:	4b07      	ldr	r3, [pc, #28]	; (8015818 <prvCheckForValidListAndQueue+0x60>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d005      	beq.n	801580c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015800:	4b05      	ldr	r3, [pc, #20]	; (8015818 <prvCheckForValidListAndQueue+0x60>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	490b      	ldr	r1, [pc, #44]	; (8015834 <prvCheckForValidListAndQueue+0x7c>)
 8015806:	4618      	mov	r0, r3
 8015808:	f7fe fc02 	bl	8014010 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801580c:	f000 f972 	bl	8015af4 <vPortExitCritical>
}
 8015810:	bf00      	nop
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	20001060 	.word	0x20001060
 801581c:	20001030 	.word	0x20001030
 8015820:	20001044 	.word	0x20001044
 8015824:	20001058 	.word	0x20001058
 8015828:	2000105c 	.word	0x2000105c
 801582c:	2000110c 	.word	0x2000110c
 8015830:	2000106c 	.word	0x2000106c
 8015834:	0801ca60 	.word	0x0801ca60

08015838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015838:	b480      	push	{r7}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	60b9      	str	r1, [r7, #8]
 8015842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	3b04      	subs	r3, #4
 8015848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	3b04      	subs	r3, #4
 8015856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	f023 0201 	bic.w	r2, r3, #1
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	3b04      	subs	r3, #4
 8015866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015868:	4a0c      	ldr	r2, [pc, #48]	; (801589c <pxPortInitialiseStack+0x64>)
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	3b14      	subs	r3, #20
 8015872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015874:	687a      	ldr	r2, [r7, #4]
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	3b04      	subs	r3, #4
 801587e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f06f 0202 	mvn.w	r2, #2
 8015886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3b20      	subs	r3, #32
 801588c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801588e:	68fb      	ldr	r3, [r7, #12]
}
 8015890:	4618      	mov	r0, r3
 8015892:	3714      	adds	r7, #20
 8015894:	46bd      	mov	sp, r7
 8015896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589a:	4770      	bx	lr
 801589c:	080158a1 	.word	0x080158a1

080158a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80158a0:	b480      	push	{r7}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80158a6:	2300      	movs	r3, #0
 80158a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80158aa:	4b12      	ldr	r3, [pc, #72]	; (80158f4 <prvTaskExitError+0x54>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158b2:	d00a      	beq.n	80158ca <prvTaskExitError+0x2a>
	__asm volatile
 80158b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b8:	f383 8811 	msr	BASEPRI, r3
 80158bc:	f3bf 8f6f 	isb	sy
 80158c0:	f3bf 8f4f 	dsb	sy
 80158c4:	60fb      	str	r3, [r7, #12]
}
 80158c6:	bf00      	nop
 80158c8:	e7fe      	b.n	80158c8 <prvTaskExitError+0x28>
	__asm volatile
 80158ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ce:	f383 8811 	msr	BASEPRI, r3
 80158d2:	f3bf 8f6f 	isb	sy
 80158d6:	f3bf 8f4f 	dsb	sy
 80158da:	60bb      	str	r3, [r7, #8]
}
 80158dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80158de:	bf00      	nop
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d0fc      	beq.n	80158e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80158e6:	bf00      	nop
 80158e8:	bf00      	nop
 80158ea:	3714      	adds	r7, #20
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr
 80158f4:	20000274 	.word	0x20000274
	...

08015900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015900:	4b07      	ldr	r3, [pc, #28]	; (8015920 <pxCurrentTCBConst2>)
 8015902:	6819      	ldr	r1, [r3, #0]
 8015904:	6808      	ldr	r0, [r1, #0]
 8015906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801590a:	f380 8809 	msr	PSP, r0
 801590e:	f3bf 8f6f 	isb	sy
 8015912:	f04f 0000 	mov.w	r0, #0
 8015916:	f380 8811 	msr	BASEPRI, r0
 801591a:	4770      	bx	lr
 801591c:	f3af 8000 	nop.w

08015920 <pxCurrentTCBConst2>:
 8015920:	20000b30 	.word	0x20000b30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015924:	bf00      	nop
 8015926:	bf00      	nop

08015928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015928:	4808      	ldr	r0, [pc, #32]	; (801594c <prvPortStartFirstTask+0x24>)
 801592a:	6800      	ldr	r0, [r0, #0]
 801592c:	6800      	ldr	r0, [r0, #0]
 801592e:	f380 8808 	msr	MSP, r0
 8015932:	f04f 0000 	mov.w	r0, #0
 8015936:	f380 8814 	msr	CONTROL, r0
 801593a:	b662      	cpsie	i
 801593c:	b661      	cpsie	f
 801593e:	f3bf 8f4f 	dsb	sy
 8015942:	f3bf 8f6f 	isb	sy
 8015946:	df00      	svc	0
 8015948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801594a:	bf00      	nop
 801594c:	e000ed08 	.word	0xe000ed08

08015950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b086      	sub	sp, #24
 8015954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015956:	4b46      	ldr	r3, [pc, #280]	; (8015a70 <xPortStartScheduler+0x120>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	4a46      	ldr	r2, [pc, #280]	; (8015a74 <xPortStartScheduler+0x124>)
 801595c:	4293      	cmp	r3, r2
 801595e:	d10a      	bne.n	8015976 <xPortStartScheduler+0x26>
	__asm volatile
 8015960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015964:	f383 8811 	msr	BASEPRI, r3
 8015968:	f3bf 8f6f 	isb	sy
 801596c:	f3bf 8f4f 	dsb	sy
 8015970:	613b      	str	r3, [r7, #16]
}
 8015972:	bf00      	nop
 8015974:	e7fe      	b.n	8015974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015976:	4b3e      	ldr	r3, [pc, #248]	; (8015a70 <xPortStartScheduler+0x120>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	4a3f      	ldr	r2, [pc, #252]	; (8015a78 <xPortStartScheduler+0x128>)
 801597c:	4293      	cmp	r3, r2
 801597e:	d10a      	bne.n	8015996 <xPortStartScheduler+0x46>
	__asm volatile
 8015980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015984:	f383 8811 	msr	BASEPRI, r3
 8015988:	f3bf 8f6f 	isb	sy
 801598c:	f3bf 8f4f 	dsb	sy
 8015990:	60fb      	str	r3, [r7, #12]
}
 8015992:	bf00      	nop
 8015994:	e7fe      	b.n	8015994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015996:	4b39      	ldr	r3, [pc, #228]	; (8015a7c <xPortStartScheduler+0x12c>)
 8015998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	b2db      	uxtb	r3, r3
 80159a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	22ff      	movs	r2, #255	; 0xff
 80159a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80159b0:	78fb      	ldrb	r3, [r7, #3]
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80159b8:	b2da      	uxtb	r2, r3
 80159ba:	4b31      	ldr	r3, [pc, #196]	; (8015a80 <xPortStartScheduler+0x130>)
 80159bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80159be:	4b31      	ldr	r3, [pc, #196]	; (8015a84 <xPortStartScheduler+0x134>)
 80159c0:	2207      	movs	r2, #7
 80159c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80159c4:	e009      	b.n	80159da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80159c6:	4b2f      	ldr	r3, [pc, #188]	; (8015a84 <xPortStartScheduler+0x134>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	3b01      	subs	r3, #1
 80159cc:	4a2d      	ldr	r2, [pc, #180]	; (8015a84 <xPortStartScheduler+0x134>)
 80159ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80159d0:	78fb      	ldrb	r3, [r7, #3]
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	b2db      	uxtb	r3, r3
 80159d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80159da:	78fb      	ldrb	r3, [r7, #3]
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159e2:	2b80      	cmp	r3, #128	; 0x80
 80159e4:	d0ef      	beq.n	80159c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80159e6:	4b27      	ldr	r3, [pc, #156]	; (8015a84 <xPortStartScheduler+0x134>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	f1c3 0307 	rsb	r3, r3, #7
 80159ee:	2b04      	cmp	r3, #4
 80159f0:	d00a      	beq.n	8015a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80159f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f6:	f383 8811 	msr	BASEPRI, r3
 80159fa:	f3bf 8f6f 	isb	sy
 80159fe:	f3bf 8f4f 	dsb	sy
 8015a02:	60bb      	str	r3, [r7, #8]
}
 8015a04:	bf00      	nop
 8015a06:	e7fe      	b.n	8015a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015a08:	4b1e      	ldr	r3, [pc, #120]	; (8015a84 <xPortStartScheduler+0x134>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	021b      	lsls	r3, r3, #8
 8015a0e:	4a1d      	ldr	r2, [pc, #116]	; (8015a84 <xPortStartScheduler+0x134>)
 8015a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015a12:	4b1c      	ldr	r3, [pc, #112]	; (8015a84 <xPortStartScheduler+0x134>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015a1a:	4a1a      	ldr	r2, [pc, #104]	; (8015a84 <xPortStartScheduler+0x134>)
 8015a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	b2da      	uxtb	r2, r3
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015a26:	4b18      	ldr	r3, [pc, #96]	; (8015a88 <xPortStartScheduler+0x138>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4a17      	ldr	r2, [pc, #92]	; (8015a88 <xPortStartScheduler+0x138>)
 8015a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015a32:	4b15      	ldr	r3, [pc, #84]	; (8015a88 <xPortStartScheduler+0x138>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	4a14      	ldr	r2, [pc, #80]	; (8015a88 <xPortStartScheduler+0x138>)
 8015a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015a3e:	f000 f8dd 	bl	8015bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015a42:	4b12      	ldr	r3, [pc, #72]	; (8015a8c <xPortStartScheduler+0x13c>)
 8015a44:	2200      	movs	r2, #0
 8015a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015a48:	f000 f8fc 	bl	8015c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015a4c:	4b10      	ldr	r3, [pc, #64]	; (8015a90 <xPortStartScheduler+0x140>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	4a0f      	ldr	r2, [pc, #60]	; (8015a90 <xPortStartScheduler+0x140>)
 8015a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015a58:	f7ff ff66 	bl	8015928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015a5c:	f7fe ff54 	bl	8014908 <vTaskSwitchContext>
	prvTaskExitError();
 8015a60:	f7ff ff1e 	bl	80158a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3718      	adds	r7, #24
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	e000ed00 	.word	0xe000ed00
 8015a74:	410fc271 	.word	0x410fc271
 8015a78:	410fc270 	.word	0x410fc270
 8015a7c:	e000e400 	.word	0xe000e400
 8015a80:	2000115c 	.word	0x2000115c
 8015a84:	20001160 	.word	0x20001160
 8015a88:	e000ed20 	.word	0xe000ed20
 8015a8c:	20000274 	.word	0x20000274
 8015a90:	e000ef34 	.word	0xe000ef34

08015a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015a94:	b480      	push	{r7}
 8015a96:	b083      	sub	sp, #12
 8015a98:	af00      	add	r7, sp, #0
	__asm volatile
 8015a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9e:	f383 8811 	msr	BASEPRI, r3
 8015aa2:	f3bf 8f6f 	isb	sy
 8015aa6:	f3bf 8f4f 	dsb	sy
 8015aaa:	607b      	str	r3, [r7, #4]
}
 8015aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015aae:	4b0f      	ldr	r3, [pc, #60]	; (8015aec <vPortEnterCritical+0x58>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	4a0d      	ldr	r2, [pc, #52]	; (8015aec <vPortEnterCritical+0x58>)
 8015ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015ab8:	4b0c      	ldr	r3, [pc, #48]	; (8015aec <vPortEnterCritical+0x58>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d10f      	bne.n	8015ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015ac0:	4b0b      	ldr	r3, [pc, #44]	; (8015af0 <vPortEnterCritical+0x5c>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	b2db      	uxtb	r3, r3
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00a      	beq.n	8015ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ace:	f383 8811 	msr	BASEPRI, r3
 8015ad2:	f3bf 8f6f 	isb	sy
 8015ad6:	f3bf 8f4f 	dsb	sy
 8015ada:	603b      	str	r3, [r7, #0]
}
 8015adc:	bf00      	nop
 8015ade:	e7fe      	b.n	8015ade <vPortEnterCritical+0x4a>
	}
}
 8015ae0:	bf00      	nop
 8015ae2:	370c      	adds	r7, #12
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr
 8015aec:	20000274 	.word	0x20000274
 8015af0:	e000ed04 	.word	0xe000ed04

08015af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015af4:	b480      	push	{r7}
 8015af6:	b083      	sub	sp, #12
 8015af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015afa:	4b12      	ldr	r3, [pc, #72]	; (8015b44 <vPortExitCritical+0x50>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d10a      	bne.n	8015b18 <vPortExitCritical+0x24>
	__asm volatile
 8015b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b06:	f383 8811 	msr	BASEPRI, r3
 8015b0a:	f3bf 8f6f 	isb	sy
 8015b0e:	f3bf 8f4f 	dsb	sy
 8015b12:	607b      	str	r3, [r7, #4]
}
 8015b14:	bf00      	nop
 8015b16:	e7fe      	b.n	8015b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015b18:	4b0a      	ldr	r3, [pc, #40]	; (8015b44 <vPortExitCritical+0x50>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	3b01      	subs	r3, #1
 8015b1e:	4a09      	ldr	r2, [pc, #36]	; (8015b44 <vPortExitCritical+0x50>)
 8015b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015b22:	4b08      	ldr	r3, [pc, #32]	; (8015b44 <vPortExitCritical+0x50>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d105      	bne.n	8015b36 <vPortExitCritical+0x42>
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	f383 8811 	msr	BASEPRI, r3
}
 8015b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015b36:	bf00      	nop
 8015b38:	370c      	adds	r7, #12
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b40:	4770      	bx	lr
 8015b42:	bf00      	nop
 8015b44:	20000274 	.word	0x20000274
	...

08015b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015b50:	f3ef 8009 	mrs	r0, PSP
 8015b54:	f3bf 8f6f 	isb	sy
 8015b58:	4b15      	ldr	r3, [pc, #84]	; (8015bb0 <pxCurrentTCBConst>)
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	f01e 0f10 	tst.w	lr, #16
 8015b60:	bf08      	it	eq
 8015b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b6a:	6010      	str	r0, [r2, #0]
 8015b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015b74:	f380 8811 	msr	BASEPRI, r0
 8015b78:	f3bf 8f4f 	dsb	sy
 8015b7c:	f3bf 8f6f 	isb	sy
 8015b80:	f7fe fec2 	bl	8014908 <vTaskSwitchContext>
 8015b84:	f04f 0000 	mov.w	r0, #0
 8015b88:	f380 8811 	msr	BASEPRI, r0
 8015b8c:	bc09      	pop	{r0, r3}
 8015b8e:	6819      	ldr	r1, [r3, #0]
 8015b90:	6808      	ldr	r0, [r1, #0]
 8015b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b96:	f01e 0f10 	tst.w	lr, #16
 8015b9a:	bf08      	it	eq
 8015b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015ba0:	f380 8809 	msr	PSP, r0
 8015ba4:	f3bf 8f6f 	isb	sy
 8015ba8:	4770      	bx	lr
 8015baa:	bf00      	nop
 8015bac:	f3af 8000 	nop.w

08015bb0 <pxCurrentTCBConst>:
 8015bb0:	20000b30 	.word	0x20000b30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015bb4:	bf00      	nop
 8015bb6:	bf00      	nop

08015bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8015bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc2:	f383 8811 	msr	BASEPRI, r3
 8015bc6:	f3bf 8f6f 	isb	sy
 8015bca:	f3bf 8f4f 	dsb	sy
 8015bce:	607b      	str	r3, [r7, #4]
}
 8015bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015bd2:	f7fe fddf 	bl	8014794 <xTaskIncrementTick>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d003      	beq.n	8015be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015bdc:	4b06      	ldr	r3, [pc, #24]	; (8015bf8 <xPortSysTickHandler+0x40>)
 8015bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015be2:	601a      	str	r2, [r3, #0]
 8015be4:	2300      	movs	r3, #0
 8015be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	f383 8811 	msr	BASEPRI, r3
}
 8015bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015bf0:	bf00      	nop
 8015bf2:	3708      	adds	r7, #8
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	e000ed04 	.word	0xe000ed04

08015bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015bfc:	b480      	push	{r7}
 8015bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015c00:	4b0b      	ldr	r3, [pc, #44]	; (8015c30 <vPortSetupTimerInterrupt+0x34>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015c06:	4b0b      	ldr	r3, [pc, #44]	; (8015c34 <vPortSetupTimerInterrupt+0x38>)
 8015c08:	2200      	movs	r2, #0
 8015c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015c0c:	4b0a      	ldr	r3, [pc, #40]	; (8015c38 <vPortSetupTimerInterrupt+0x3c>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	4a0a      	ldr	r2, [pc, #40]	; (8015c3c <vPortSetupTimerInterrupt+0x40>)
 8015c12:	fba2 2303 	umull	r2, r3, r2, r3
 8015c16:	099b      	lsrs	r3, r3, #6
 8015c18:	4a09      	ldr	r2, [pc, #36]	; (8015c40 <vPortSetupTimerInterrupt+0x44>)
 8015c1a:	3b01      	subs	r3, #1
 8015c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015c1e:	4b04      	ldr	r3, [pc, #16]	; (8015c30 <vPortSetupTimerInterrupt+0x34>)
 8015c20:	2207      	movs	r2, #7
 8015c22:	601a      	str	r2, [r3, #0]
}
 8015c24:	bf00      	nop
 8015c26:	46bd      	mov	sp, r7
 8015c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop
 8015c30:	e000e010 	.word	0xe000e010
 8015c34:	e000e018 	.word	0xe000e018
 8015c38:	20000268 	.word	0x20000268
 8015c3c:	10624dd3 	.word	0x10624dd3
 8015c40:	e000e014 	.word	0xe000e014

08015c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015c54 <vPortEnableVFP+0x10>
 8015c48:	6801      	ldr	r1, [r0, #0]
 8015c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015c4e:	6001      	str	r1, [r0, #0]
 8015c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015c52:	bf00      	nop
 8015c54:	e000ed88 	.word	0xe000ed88

08015c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015c58:	b480      	push	{r7}
 8015c5a:	b085      	sub	sp, #20
 8015c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015c5e:	f3ef 8305 	mrs	r3, IPSR
 8015c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2b0f      	cmp	r3, #15
 8015c68:	d914      	bls.n	8015c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015c6a:	4a17      	ldr	r2, [pc, #92]	; (8015cc8 <vPortValidateInterruptPriority+0x70>)
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	4413      	add	r3, r2
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015c74:	4b15      	ldr	r3, [pc, #84]	; (8015ccc <vPortValidateInterruptPriority+0x74>)
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	7afa      	ldrb	r2, [r7, #11]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d20a      	bcs.n	8015c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c82:	f383 8811 	msr	BASEPRI, r3
 8015c86:	f3bf 8f6f 	isb	sy
 8015c8a:	f3bf 8f4f 	dsb	sy
 8015c8e:	607b      	str	r3, [r7, #4]
}
 8015c90:	bf00      	nop
 8015c92:	e7fe      	b.n	8015c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015c94:	4b0e      	ldr	r3, [pc, #56]	; (8015cd0 <vPortValidateInterruptPriority+0x78>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015c9c:	4b0d      	ldr	r3, [pc, #52]	; (8015cd4 <vPortValidateInterruptPriority+0x7c>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d90a      	bls.n	8015cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca8:	f383 8811 	msr	BASEPRI, r3
 8015cac:	f3bf 8f6f 	isb	sy
 8015cb0:	f3bf 8f4f 	dsb	sy
 8015cb4:	603b      	str	r3, [r7, #0]
}
 8015cb6:	bf00      	nop
 8015cb8:	e7fe      	b.n	8015cb8 <vPortValidateInterruptPriority+0x60>
	}
 8015cba:	bf00      	nop
 8015cbc:	3714      	adds	r7, #20
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop
 8015cc8:	e000e3f0 	.word	0xe000e3f0
 8015ccc:	2000115c 	.word	0x2000115c
 8015cd0:	e000ed0c 	.word	0xe000ed0c
 8015cd4:	20001160 	.word	0x20001160

08015cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b08a      	sub	sp, #40	; 0x28
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015ce4:	f7fe fc9a 	bl	801461c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ce8:	4b5b      	ldr	r3, [pc, #364]	; (8015e58 <pvPortMalloc+0x180>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d101      	bne.n	8015cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015cf0:	f000 f920 	bl	8015f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015cf4:	4b59      	ldr	r3, [pc, #356]	; (8015e5c <pvPortMalloc+0x184>)
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	4013      	ands	r3, r2
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	f040 8093 	bne.w	8015e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d01d      	beq.n	8015d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015d08:	2208      	movs	r2, #8
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	4413      	add	r3, r2
 8015d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f003 0307 	and.w	r3, r3, #7
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d014      	beq.n	8015d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f023 0307 	bic.w	r3, r3, #7
 8015d20:	3308      	adds	r3, #8
 8015d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f003 0307 	and.w	r3, r3, #7
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d00a      	beq.n	8015d44 <pvPortMalloc+0x6c>
	__asm volatile
 8015d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d32:	f383 8811 	msr	BASEPRI, r3
 8015d36:	f3bf 8f6f 	isb	sy
 8015d3a:	f3bf 8f4f 	dsb	sy
 8015d3e:	617b      	str	r3, [r7, #20]
}
 8015d40:	bf00      	nop
 8015d42:	e7fe      	b.n	8015d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d06e      	beq.n	8015e28 <pvPortMalloc+0x150>
 8015d4a:	4b45      	ldr	r3, [pc, #276]	; (8015e60 <pvPortMalloc+0x188>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d869      	bhi.n	8015e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015d54:	4b43      	ldr	r3, [pc, #268]	; (8015e64 <pvPortMalloc+0x18c>)
 8015d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015d58:	4b42      	ldr	r3, [pc, #264]	; (8015e64 <pvPortMalloc+0x18c>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015d5e:	e004      	b.n	8015d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	687a      	ldr	r2, [r7, #4]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d903      	bls.n	8015d7c <pvPortMalloc+0xa4>
 8015d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d1f1      	bne.n	8015d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015d7c:	4b36      	ldr	r3, [pc, #216]	; (8015e58 <pvPortMalloc+0x180>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d050      	beq.n	8015e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015d86:	6a3b      	ldr	r3, [r7, #32]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	2208      	movs	r2, #8
 8015d8c:	4413      	add	r3, r2
 8015d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d92:	681a      	ldr	r2, [r3, #0]
 8015d94:	6a3b      	ldr	r3, [r7, #32]
 8015d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9a:	685a      	ldr	r2, [r3, #4]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	1ad2      	subs	r2, r2, r3
 8015da0:	2308      	movs	r3, #8
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d91f      	bls.n	8015de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4413      	add	r3, r2
 8015dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015db0:	69bb      	ldr	r3, [r7, #24]
 8015db2:	f003 0307 	and.w	r3, r3, #7
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00a      	beq.n	8015dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8015dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dbe:	f383 8811 	msr	BASEPRI, r3
 8015dc2:	f3bf 8f6f 	isb	sy
 8015dc6:	f3bf 8f4f 	dsb	sy
 8015dca:	613b      	str	r3, [r7, #16]
}
 8015dcc:	bf00      	nop
 8015dce:	e7fe      	b.n	8015dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd2:	685a      	ldr	r2, [r3, #4]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	1ad2      	subs	r2, r2, r3
 8015dd8:	69bb      	ldr	r3, [r7, #24]
 8015dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015de2:	69b8      	ldr	r0, [r7, #24]
 8015de4:	f000 f908 	bl	8015ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015de8:	4b1d      	ldr	r3, [pc, #116]	; (8015e60 <pvPortMalloc+0x188>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dee:	685b      	ldr	r3, [r3, #4]
 8015df0:	1ad3      	subs	r3, r2, r3
 8015df2:	4a1b      	ldr	r2, [pc, #108]	; (8015e60 <pvPortMalloc+0x188>)
 8015df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015df6:	4b1a      	ldr	r3, [pc, #104]	; (8015e60 <pvPortMalloc+0x188>)
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	4b1b      	ldr	r3, [pc, #108]	; (8015e68 <pvPortMalloc+0x190>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d203      	bcs.n	8015e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015e02:	4b17      	ldr	r3, [pc, #92]	; (8015e60 <pvPortMalloc+0x188>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	4a18      	ldr	r2, [pc, #96]	; (8015e68 <pvPortMalloc+0x190>)
 8015e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e0c:	685a      	ldr	r2, [r3, #4]
 8015e0e:	4b13      	ldr	r3, [pc, #76]	; (8015e5c <pvPortMalloc+0x184>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	431a      	orrs	r2, r3
 8015e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015e1e:	4b13      	ldr	r3, [pc, #76]	; (8015e6c <pvPortMalloc+0x194>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	3301      	adds	r3, #1
 8015e24:	4a11      	ldr	r2, [pc, #68]	; (8015e6c <pvPortMalloc+0x194>)
 8015e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015e28:	f7fe fc06 	bl	8014638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e2c:	69fb      	ldr	r3, [r7, #28]
 8015e2e:	f003 0307 	and.w	r3, r3, #7
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d00a      	beq.n	8015e4c <pvPortMalloc+0x174>
	__asm volatile
 8015e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e3a:	f383 8811 	msr	BASEPRI, r3
 8015e3e:	f3bf 8f6f 	isb	sy
 8015e42:	f3bf 8f4f 	dsb	sy
 8015e46:	60fb      	str	r3, [r7, #12]
}
 8015e48:	bf00      	nop
 8015e4a:	e7fe      	b.n	8015e4a <pvPortMalloc+0x172>
	return pvReturn;
 8015e4c:	69fb      	ldr	r3, [r7, #28]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3728      	adds	r7, #40	; 0x28
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	20004d6c 	.word	0x20004d6c
 8015e5c:	20004d80 	.word	0x20004d80
 8015e60:	20004d70 	.word	0x20004d70
 8015e64:	20004d64 	.word	0x20004d64
 8015e68:	20004d74 	.word	0x20004d74
 8015e6c:	20004d78 	.word	0x20004d78

08015e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b086      	sub	sp, #24
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d04d      	beq.n	8015f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015e82:	2308      	movs	r3, #8
 8015e84:	425b      	negs	r3, r3
 8015e86:	697a      	ldr	r2, [r7, #20]
 8015e88:	4413      	add	r3, r2
 8015e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	4b24      	ldr	r3, [pc, #144]	; (8015f28 <vPortFree+0xb8>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	4013      	ands	r3, r2
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d10a      	bne.n	8015eb4 <vPortFree+0x44>
	__asm volatile
 8015e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ea2:	f383 8811 	msr	BASEPRI, r3
 8015ea6:	f3bf 8f6f 	isb	sy
 8015eaa:	f3bf 8f4f 	dsb	sy
 8015eae:	60fb      	str	r3, [r7, #12]
}
 8015eb0:	bf00      	nop
 8015eb2:	e7fe      	b.n	8015eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00a      	beq.n	8015ed2 <vPortFree+0x62>
	__asm volatile
 8015ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec0:	f383 8811 	msr	BASEPRI, r3
 8015ec4:	f3bf 8f6f 	isb	sy
 8015ec8:	f3bf 8f4f 	dsb	sy
 8015ecc:	60bb      	str	r3, [r7, #8]
}
 8015ece:	bf00      	nop
 8015ed0:	e7fe      	b.n	8015ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	685a      	ldr	r2, [r3, #4]
 8015ed6:	4b14      	ldr	r3, [pc, #80]	; (8015f28 <vPortFree+0xb8>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4013      	ands	r3, r2
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d01e      	beq.n	8015f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d11a      	bne.n	8015f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	685a      	ldr	r2, [r3, #4]
 8015eec:	4b0e      	ldr	r3, [pc, #56]	; (8015f28 <vPortFree+0xb8>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	43db      	mvns	r3, r3
 8015ef2:	401a      	ands	r2, r3
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015ef8:	f7fe fb90 	bl	801461c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	685a      	ldr	r2, [r3, #4]
 8015f00:	4b0a      	ldr	r3, [pc, #40]	; (8015f2c <vPortFree+0xbc>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	4413      	add	r3, r2
 8015f06:	4a09      	ldr	r2, [pc, #36]	; (8015f2c <vPortFree+0xbc>)
 8015f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015f0a:	6938      	ldr	r0, [r7, #16]
 8015f0c:	f000 f874 	bl	8015ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015f10:	4b07      	ldr	r3, [pc, #28]	; (8015f30 <vPortFree+0xc0>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	3301      	adds	r3, #1
 8015f16:	4a06      	ldr	r2, [pc, #24]	; (8015f30 <vPortFree+0xc0>)
 8015f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015f1a:	f7fe fb8d 	bl	8014638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015f1e:	bf00      	nop
 8015f20:	3718      	adds	r7, #24
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	20004d80 	.word	0x20004d80
 8015f2c:	20004d70 	.word	0x20004d70
 8015f30:	20004d7c 	.word	0x20004d7c

08015f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015f34:	b480      	push	{r7}
 8015f36:	b085      	sub	sp, #20
 8015f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015f3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015f40:	4b27      	ldr	r3, [pc, #156]	; (8015fe0 <prvHeapInit+0xac>)
 8015f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	f003 0307 	and.w	r3, r3, #7
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d00c      	beq.n	8015f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3307      	adds	r3, #7
 8015f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f023 0307 	bic.w	r3, r3, #7
 8015f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015f5c:	68ba      	ldr	r2, [r7, #8]
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	1ad3      	subs	r3, r2, r3
 8015f62:	4a1f      	ldr	r2, [pc, #124]	; (8015fe0 <prvHeapInit+0xac>)
 8015f64:	4413      	add	r3, r2
 8015f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015f6c:	4a1d      	ldr	r2, [pc, #116]	; (8015fe4 <prvHeapInit+0xb0>)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015f72:	4b1c      	ldr	r3, [pc, #112]	; (8015fe4 <prvHeapInit+0xb0>)
 8015f74:	2200      	movs	r2, #0
 8015f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	68ba      	ldr	r2, [r7, #8]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015f80:	2208      	movs	r2, #8
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	1a9b      	subs	r3, r3, r2
 8015f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	f023 0307 	bic.w	r3, r3, #7
 8015f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	4a15      	ldr	r2, [pc, #84]	; (8015fe8 <prvHeapInit+0xb4>)
 8015f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015f96:	4b14      	ldr	r3, [pc, #80]	; (8015fe8 <prvHeapInit+0xb4>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015f9e:	4b12      	ldr	r3, [pc, #72]	; (8015fe8 <prvHeapInit+0xb4>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	68fa      	ldr	r2, [r7, #12]
 8015fae:	1ad2      	subs	r2, r2, r3
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015fb4:	4b0c      	ldr	r3, [pc, #48]	; (8015fe8 <prvHeapInit+0xb4>)
 8015fb6:	681a      	ldr	r2, [r3, #0]
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	685b      	ldr	r3, [r3, #4]
 8015fc0:	4a0a      	ldr	r2, [pc, #40]	; (8015fec <prvHeapInit+0xb8>)
 8015fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	4a09      	ldr	r2, [pc, #36]	; (8015ff0 <prvHeapInit+0xbc>)
 8015fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015fcc:	4b09      	ldr	r3, [pc, #36]	; (8015ff4 <prvHeapInit+0xc0>)
 8015fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015fd2:	601a      	str	r2, [r3, #0]
}
 8015fd4:	bf00      	nop
 8015fd6:	3714      	adds	r7, #20
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fde:	4770      	bx	lr
 8015fe0:	20001164 	.word	0x20001164
 8015fe4:	20004d64 	.word	0x20004d64
 8015fe8:	20004d6c 	.word	0x20004d6c
 8015fec:	20004d74 	.word	0x20004d74
 8015ff0:	20004d70 	.word	0x20004d70
 8015ff4:	20004d80 	.word	0x20004d80

08015ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016000:	4b28      	ldr	r3, [pc, #160]	; (80160a4 <prvInsertBlockIntoFreeList+0xac>)
 8016002:	60fb      	str	r3, [r7, #12]
 8016004:	e002      	b.n	801600c <prvInsertBlockIntoFreeList+0x14>
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	60fb      	str	r3, [r7, #12]
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	687a      	ldr	r2, [r7, #4]
 8016012:	429a      	cmp	r2, r3
 8016014:	d8f7      	bhi.n	8016006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	68ba      	ldr	r2, [r7, #8]
 8016020:	4413      	add	r3, r2
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	429a      	cmp	r2, r3
 8016026:	d108      	bne.n	801603a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	441a      	add	r2, r3
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	68ba      	ldr	r2, [r7, #8]
 8016044:	441a      	add	r2, r3
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	429a      	cmp	r2, r3
 801604c:	d118      	bne.n	8016080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	681a      	ldr	r2, [r3, #0]
 8016052:	4b15      	ldr	r3, [pc, #84]	; (80160a8 <prvInsertBlockIntoFreeList+0xb0>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	429a      	cmp	r2, r3
 8016058:	d00d      	beq.n	8016076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	685a      	ldr	r2, [r3, #4]
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	441a      	add	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	601a      	str	r2, [r3, #0]
 8016074:	e008      	b.n	8016088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016076:	4b0c      	ldr	r3, [pc, #48]	; (80160a8 <prvInsertBlockIntoFreeList+0xb0>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	601a      	str	r2, [r3, #0]
 801607e:	e003      	b.n	8016088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016088:	68fa      	ldr	r2, [r7, #12]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	429a      	cmp	r2, r3
 801608e:	d002      	beq.n	8016096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016096:	bf00      	nop
 8016098:	3714      	adds	r7, #20
 801609a:	46bd      	mov	sp, r7
 801609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a0:	4770      	bx	lr
 80160a2:	bf00      	nop
 80160a4:	20004d64 	.word	0x20004d64
 80160a8:	20004d6c 	.word	0x20004d6c

080160ac <__errno>:
 80160ac:	4b01      	ldr	r3, [pc, #4]	; (80160b4 <__errno+0x8>)
 80160ae:	6818      	ldr	r0, [r3, #0]
 80160b0:	4770      	bx	lr
 80160b2:	bf00      	nop
 80160b4:	20000278 	.word	0x20000278

080160b8 <__libc_init_array>:
 80160b8:	b570      	push	{r4, r5, r6, lr}
 80160ba:	4d0d      	ldr	r5, [pc, #52]	; (80160f0 <__libc_init_array+0x38>)
 80160bc:	4c0d      	ldr	r4, [pc, #52]	; (80160f4 <__libc_init_array+0x3c>)
 80160be:	1b64      	subs	r4, r4, r5
 80160c0:	10a4      	asrs	r4, r4, #2
 80160c2:	2600      	movs	r6, #0
 80160c4:	42a6      	cmp	r6, r4
 80160c6:	d109      	bne.n	80160dc <__libc_init_array+0x24>
 80160c8:	4d0b      	ldr	r5, [pc, #44]	; (80160f8 <__libc_init_array+0x40>)
 80160ca:	4c0c      	ldr	r4, [pc, #48]	; (80160fc <__libc_init_array+0x44>)
 80160cc:	f006 fb68 	bl	801c7a0 <_init>
 80160d0:	1b64      	subs	r4, r4, r5
 80160d2:	10a4      	asrs	r4, r4, #2
 80160d4:	2600      	movs	r6, #0
 80160d6:	42a6      	cmp	r6, r4
 80160d8:	d105      	bne.n	80160e6 <__libc_init_array+0x2e>
 80160da:	bd70      	pop	{r4, r5, r6, pc}
 80160dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80160e0:	4798      	blx	r3
 80160e2:	3601      	adds	r6, #1
 80160e4:	e7ee      	b.n	80160c4 <__libc_init_array+0xc>
 80160e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80160ea:	4798      	blx	r3
 80160ec:	3601      	adds	r6, #1
 80160ee:	e7f2      	b.n	80160d6 <__libc_init_array+0x1e>
 80160f0:	0801d384 	.word	0x0801d384
 80160f4:	0801d384 	.word	0x0801d384
 80160f8:	0801d384 	.word	0x0801d384
 80160fc:	0801d388 	.word	0x0801d388

08016100 <memcpy>:
 8016100:	440a      	add	r2, r1
 8016102:	4291      	cmp	r1, r2
 8016104:	f100 33ff 	add.w	r3, r0, #4294967295
 8016108:	d100      	bne.n	801610c <memcpy+0xc>
 801610a:	4770      	bx	lr
 801610c:	b510      	push	{r4, lr}
 801610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016116:	4291      	cmp	r1, r2
 8016118:	d1f9      	bne.n	801610e <memcpy+0xe>
 801611a:	bd10      	pop	{r4, pc}

0801611c <memset>:
 801611c:	4402      	add	r2, r0
 801611e:	4603      	mov	r3, r0
 8016120:	4293      	cmp	r3, r2
 8016122:	d100      	bne.n	8016126 <memset+0xa>
 8016124:	4770      	bx	lr
 8016126:	f803 1b01 	strb.w	r1, [r3], #1
 801612a:	e7f9      	b.n	8016120 <memset+0x4>

0801612c <__cvt>:
 801612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016130:	ec55 4b10 	vmov	r4, r5, d0
 8016134:	2d00      	cmp	r5, #0
 8016136:	460e      	mov	r6, r1
 8016138:	4619      	mov	r1, r3
 801613a:	462b      	mov	r3, r5
 801613c:	bfbb      	ittet	lt
 801613e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016142:	461d      	movlt	r5, r3
 8016144:	2300      	movge	r3, #0
 8016146:	232d      	movlt	r3, #45	; 0x2d
 8016148:	700b      	strb	r3, [r1, #0]
 801614a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801614c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016150:	4691      	mov	r9, r2
 8016152:	f023 0820 	bic.w	r8, r3, #32
 8016156:	bfbc      	itt	lt
 8016158:	4622      	movlt	r2, r4
 801615a:	4614      	movlt	r4, r2
 801615c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016160:	d005      	beq.n	801616e <__cvt+0x42>
 8016162:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016166:	d100      	bne.n	801616a <__cvt+0x3e>
 8016168:	3601      	adds	r6, #1
 801616a:	2102      	movs	r1, #2
 801616c:	e000      	b.n	8016170 <__cvt+0x44>
 801616e:	2103      	movs	r1, #3
 8016170:	ab03      	add	r3, sp, #12
 8016172:	9301      	str	r3, [sp, #4]
 8016174:	ab02      	add	r3, sp, #8
 8016176:	9300      	str	r3, [sp, #0]
 8016178:	ec45 4b10 	vmov	d0, r4, r5
 801617c:	4653      	mov	r3, sl
 801617e:	4632      	mov	r2, r6
 8016180:	f001 fe46 	bl	8017e10 <_dtoa_r>
 8016184:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016188:	4607      	mov	r7, r0
 801618a:	d102      	bne.n	8016192 <__cvt+0x66>
 801618c:	f019 0f01 	tst.w	r9, #1
 8016190:	d022      	beq.n	80161d8 <__cvt+0xac>
 8016192:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016196:	eb07 0906 	add.w	r9, r7, r6
 801619a:	d110      	bne.n	80161be <__cvt+0x92>
 801619c:	783b      	ldrb	r3, [r7, #0]
 801619e:	2b30      	cmp	r3, #48	; 0x30
 80161a0:	d10a      	bne.n	80161b8 <__cvt+0x8c>
 80161a2:	2200      	movs	r2, #0
 80161a4:	2300      	movs	r3, #0
 80161a6:	4620      	mov	r0, r4
 80161a8:	4629      	mov	r1, r5
 80161aa:	f7ea fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80161ae:	b918      	cbnz	r0, 80161b8 <__cvt+0x8c>
 80161b0:	f1c6 0601 	rsb	r6, r6, #1
 80161b4:	f8ca 6000 	str.w	r6, [sl]
 80161b8:	f8da 3000 	ldr.w	r3, [sl]
 80161bc:	4499      	add	r9, r3
 80161be:	2200      	movs	r2, #0
 80161c0:	2300      	movs	r3, #0
 80161c2:	4620      	mov	r0, r4
 80161c4:	4629      	mov	r1, r5
 80161c6:	f7ea fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80161ca:	b108      	cbz	r0, 80161d0 <__cvt+0xa4>
 80161cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80161d0:	2230      	movs	r2, #48	; 0x30
 80161d2:	9b03      	ldr	r3, [sp, #12]
 80161d4:	454b      	cmp	r3, r9
 80161d6:	d307      	bcc.n	80161e8 <__cvt+0xbc>
 80161d8:	9b03      	ldr	r3, [sp, #12]
 80161da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161dc:	1bdb      	subs	r3, r3, r7
 80161de:	4638      	mov	r0, r7
 80161e0:	6013      	str	r3, [r2, #0]
 80161e2:	b004      	add	sp, #16
 80161e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e8:	1c59      	adds	r1, r3, #1
 80161ea:	9103      	str	r1, [sp, #12]
 80161ec:	701a      	strb	r2, [r3, #0]
 80161ee:	e7f0      	b.n	80161d2 <__cvt+0xa6>

080161f0 <__exponent>:
 80161f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161f2:	4603      	mov	r3, r0
 80161f4:	2900      	cmp	r1, #0
 80161f6:	bfb8      	it	lt
 80161f8:	4249      	neglt	r1, r1
 80161fa:	f803 2b02 	strb.w	r2, [r3], #2
 80161fe:	bfb4      	ite	lt
 8016200:	222d      	movlt	r2, #45	; 0x2d
 8016202:	222b      	movge	r2, #43	; 0x2b
 8016204:	2909      	cmp	r1, #9
 8016206:	7042      	strb	r2, [r0, #1]
 8016208:	dd2a      	ble.n	8016260 <__exponent+0x70>
 801620a:	f10d 0407 	add.w	r4, sp, #7
 801620e:	46a4      	mov	ip, r4
 8016210:	270a      	movs	r7, #10
 8016212:	46a6      	mov	lr, r4
 8016214:	460a      	mov	r2, r1
 8016216:	fb91 f6f7 	sdiv	r6, r1, r7
 801621a:	fb07 1516 	mls	r5, r7, r6, r1
 801621e:	3530      	adds	r5, #48	; 0x30
 8016220:	2a63      	cmp	r2, #99	; 0x63
 8016222:	f104 34ff 	add.w	r4, r4, #4294967295
 8016226:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801622a:	4631      	mov	r1, r6
 801622c:	dcf1      	bgt.n	8016212 <__exponent+0x22>
 801622e:	3130      	adds	r1, #48	; 0x30
 8016230:	f1ae 0502 	sub.w	r5, lr, #2
 8016234:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016238:	1c44      	adds	r4, r0, #1
 801623a:	4629      	mov	r1, r5
 801623c:	4561      	cmp	r1, ip
 801623e:	d30a      	bcc.n	8016256 <__exponent+0x66>
 8016240:	f10d 0209 	add.w	r2, sp, #9
 8016244:	eba2 020e 	sub.w	r2, r2, lr
 8016248:	4565      	cmp	r5, ip
 801624a:	bf88      	it	hi
 801624c:	2200      	movhi	r2, #0
 801624e:	4413      	add	r3, r2
 8016250:	1a18      	subs	r0, r3, r0
 8016252:	b003      	add	sp, #12
 8016254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016256:	f811 2b01 	ldrb.w	r2, [r1], #1
 801625a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801625e:	e7ed      	b.n	801623c <__exponent+0x4c>
 8016260:	2330      	movs	r3, #48	; 0x30
 8016262:	3130      	adds	r1, #48	; 0x30
 8016264:	7083      	strb	r3, [r0, #2]
 8016266:	70c1      	strb	r1, [r0, #3]
 8016268:	1d03      	adds	r3, r0, #4
 801626a:	e7f1      	b.n	8016250 <__exponent+0x60>

0801626c <_printf_float>:
 801626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016270:	ed2d 8b02 	vpush	{d8}
 8016274:	b08d      	sub	sp, #52	; 0x34
 8016276:	460c      	mov	r4, r1
 8016278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801627c:	4616      	mov	r6, r2
 801627e:	461f      	mov	r7, r3
 8016280:	4605      	mov	r5, r0
 8016282:	f002 ff21 	bl	80190c8 <_localeconv_r>
 8016286:	f8d0 a000 	ldr.w	sl, [r0]
 801628a:	4650      	mov	r0, sl
 801628c:	f7e9 ffa0 	bl	80001d0 <strlen>
 8016290:	2300      	movs	r3, #0
 8016292:	930a      	str	r3, [sp, #40]	; 0x28
 8016294:	6823      	ldr	r3, [r4, #0]
 8016296:	9305      	str	r3, [sp, #20]
 8016298:	f8d8 3000 	ldr.w	r3, [r8]
 801629c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80162a0:	3307      	adds	r3, #7
 80162a2:	f023 0307 	bic.w	r3, r3, #7
 80162a6:	f103 0208 	add.w	r2, r3, #8
 80162aa:	f8c8 2000 	str.w	r2, [r8]
 80162ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80162b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80162ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162be:	9307      	str	r3, [sp, #28]
 80162c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80162c4:	ee08 0a10 	vmov	s16, r0
 80162c8:	4b9f      	ldr	r3, [pc, #636]	; (8016548 <_printf_float+0x2dc>)
 80162ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162ce:	f04f 32ff 	mov.w	r2, #4294967295
 80162d2:	f7ea fc2b 	bl	8000b2c <__aeabi_dcmpun>
 80162d6:	bb88      	cbnz	r0, 801633c <_printf_float+0xd0>
 80162d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162dc:	4b9a      	ldr	r3, [pc, #616]	; (8016548 <_printf_float+0x2dc>)
 80162de:	f04f 32ff 	mov.w	r2, #4294967295
 80162e2:	f7ea fc05 	bl	8000af0 <__aeabi_dcmple>
 80162e6:	bb48      	cbnz	r0, 801633c <_printf_float+0xd0>
 80162e8:	2200      	movs	r2, #0
 80162ea:	2300      	movs	r3, #0
 80162ec:	4640      	mov	r0, r8
 80162ee:	4649      	mov	r1, r9
 80162f0:	f7ea fbf4 	bl	8000adc <__aeabi_dcmplt>
 80162f4:	b110      	cbz	r0, 80162fc <_printf_float+0x90>
 80162f6:	232d      	movs	r3, #45	; 0x2d
 80162f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162fc:	4b93      	ldr	r3, [pc, #588]	; (801654c <_printf_float+0x2e0>)
 80162fe:	4894      	ldr	r0, [pc, #592]	; (8016550 <_printf_float+0x2e4>)
 8016300:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016304:	bf94      	ite	ls
 8016306:	4698      	movls	r8, r3
 8016308:	4680      	movhi	r8, r0
 801630a:	2303      	movs	r3, #3
 801630c:	6123      	str	r3, [r4, #16]
 801630e:	9b05      	ldr	r3, [sp, #20]
 8016310:	f023 0204 	bic.w	r2, r3, #4
 8016314:	6022      	str	r2, [r4, #0]
 8016316:	f04f 0900 	mov.w	r9, #0
 801631a:	9700      	str	r7, [sp, #0]
 801631c:	4633      	mov	r3, r6
 801631e:	aa0b      	add	r2, sp, #44	; 0x2c
 8016320:	4621      	mov	r1, r4
 8016322:	4628      	mov	r0, r5
 8016324:	f000 f9d8 	bl	80166d8 <_printf_common>
 8016328:	3001      	adds	r0, #1
 801632a:	f040 8090 	bne.w	801644e <_printf_float+0x1e2>
 801632e:	f04f 30ff 	mov.w	r0, #4294967295
 8016332:	b00d      	add	sp, #52	; 0x34
 8016334:	ecbd 8b02 	vpop	{d8}
 8016338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801633c:	4642      	mov	r2, r8
 801633e:	464b      	mov	r3, r9
 8016340:	4640      	mov	r0, r8
 8016342:	4649      	mov	r1, r9
 8016344:	f7ea fbf2 	bl	8000b2c <__aeabi_dcmpun>
 8016348:	b140      	cbz	r0, 801635c <_printf_float+0xf0>
 801634a:	464b      	mov	r3, r9
 801634c:	2b00      	cmp	r3, #0
 801634e:	bfbc      	itt	lt
 8016350:	232d      	movlt	r3, #45	; 0x2d
 8016352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016356:	487f      	ldr	r0, [pc, #508]	; (8016554 <_printf_float+0x2e8>)
 8016358:	4b7f      	ldr	r3, [pc, #508]	; (8016558 <_printf_float+0x2ec>)
 801635a:	e7d1      	b.n	8016300 <_printf_float+0x94>
 801635c:	6863      	ldr	r3, [r4, #4]
 801635e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016362:	9206      	str	r2, [sp, #24]
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	d13f      	bne.n	80163e8 <_printf_float+0x17c>
 8016368:	2306      	movs	r3, #6
 801636a:	6063      	str	r3, [r4, #4]
 801636c:	9b05      	ldr	r3, [sp, #20]
 801636e:	6861      	ldr	r1, [r4, #4]
 8016370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016374:	2300      	movs	r3, #0
 8016376:	9303      	str	r3, [sp, #12]
 8016378:	ab0a      	add	r3, sp, #40	; 0x28
 801637a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801637e:	ab09      	add	r3, sp, #36	; 0x24
 8016380:	ec49 8b10 	vmov	d0, r8, r9
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	6022      	str	r2, [r4, #0]
 8016388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801638c:	4628      	mov	r0, r5
 801638e:	f7ff fecd 	bl	801612c <__cvt>
 8016392:	9b06      	ldr	r3, [sp, #24]
 8016394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016396:	2b47      	cmp	r3, #71	; 0x47
 8016398:	4680      	mov	r8, r0
 801639a:	d108      	bne.n	80163ae <_printf_float+0x142>
 801639c:	1cc8      	adds	r0, r1, #3
 801639e:	db02      	blt.n	80163a6 <_printf_float+0x13a>
 80163a0:	6863      	ldr	r3, [r4, #4]
 80163a2:	4299      	cmp	r1, r3
 80163a4:	dd41      	ble.n	801642a <_printf_float+0x1be>
 80163a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80163aa:	fa5f fb8b 	uxtb.w	fp, fp
 80163ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80163b2:	d820      	bhi.n	80163f6 <_printf_float+0x18a>
 80163b4:	3901      	subs	r1, #1
 80163b6:	465a      	mov	r2, fp
 80163b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80163bc:	9109      	str	r1, [sp, #36]	; 0x24
 80163be:	f7ff ff17 	bl	80161f0 <__exponent>
 80163c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163c4:	1813      	adds	r3, r2, r0
 80163c6:	2a01      	cmp	r2, #1
 80163c8:	4681      	mov	r9, r0
 80163ca:	6123      	str	r3, [r4, #16]
 80163cc:	dc02      	bgt.n	80163d4 <_printf_float+0x168>
 80163ce:	6822      	ldr	r2, [r4, #0]
 80163d0:	07d2      	lsls	r2, r2, #31
 80163d2:	d501      	bpl.n	80163d8 <_printf_float+0x16c>
 80163d4:	3301      	adds	r3, #1
 80163d6:	6123      	str	r3, [r4, #16]
 80163d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d09c      	beq.n	801631a <_printf_float+0xae>
 80163e0:	232d      	movs	r3, #45	; 0x2d
 80163e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163e6:	e798      	b.n	801631a <_printf_float+0xae>
 80163e8:	9a06      	ldr	r2, [sp, #24]
 80163ea:	2a47      	cmp	r2, #71	; 0x47
 80163ec:	d1be      	bne.n	801636c <_printf_float+0x100>
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d1bc      	bne.n	801636c <_printf_float+0x100>
 80163f2:	2301      	movs	r3, #1
 80163f4:	e7b9      	b.n	801636a <_printf_float+0xfe>
 80163f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80163fa:	d118      	bne.n	801642e <_printf_float+0x1c2>
 80163fc:	2900      	cmp	r1, #0
 80163fe:	6863      	ldr	r3, [r4, #4]
 8016400:	dd0b      	ble.n	801641a <_printf_float+0x1ae>
 8016402:	6121      	str	r1, [r4, #16]
 8016404:	b913      	cbnz	r3, 801640c <_printf_float+0x1a0>
 8016406:	6822      	ldr	r2, [r4, #0]
 8016408:	07d0      	lsls	r0, r2, #31
 801640a:	d502      	bpl.n	8016412 <_printf_float+0x1a6>
 801640c:	3301      	adds	r3, #1
 801640e:	440b      	add	r3, r1
 8016410:	6123      	str	r3, [r4, #16]
 8016412:	65a1      	str	r1, [r4, #88]	; 0x58
 8016414:	f04f 0900 	mov.w	r9, #0
 8016418:	e7de      	b.n	80163d8 <_printf_float+0x16c>
 801641a:	b913      	cbnz	r3, 8016422 <_printf_float+0x1b6>
 801641c:	6822      	ldr	r2, [r4, #0]
 801641e:	07d2      	lsls	r2, r2, #31
 8016420:	d501      	bpl.n	8016426 <_printf_float+0x1ba>
 8016422:	3302      	adds	r3, #2
 8016424:	e7f4      	b.n	8016410 <_printf_float+0x1a4>
 8016426:	2301      	movs	r3, #1
 8016428:	e7f2      	b.n	8016410 <_printf_float+0x1a4>
 801642a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016430:	4299      	cmp	r1, r3
 8016432:	db05      	blt.n	8016440 <_printf_float+0x1d4>
 8016434:	6823      	ldr	r3, [r4, #0]
 8016436:	6121      	str	r1, [r4, #16]
 8016438:	07d8      	lsls	r0, r3, #31
 801643a:	d5ea      	bpl.n	8016412 <_printf_float+0x1a6>
 801643c:	1c4b      	adds	r3, r1, #1
 801643e:	e7e7      	b.n	8016410 <_printf_float+0x1a4>
 8016440:	2900      	cmp	r1, #0
 8016442:	bfd4      	ite	le
 8016444:	f1c1 0202 	rsble	r2, r1, #2
 8016448:	2201      	movgt	r2, #1
 801644a:	4413      	add	r3, r2
 801644c:	e7e0      	b.n	8016410 <_printf_float+0x1a4>
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	055a      	lsls	r2, r3, #21
 8016452:	d407      	bmi.n	8016464 <_printf_float+0x1f8>
 8016454:	6923      	ldr	r3, [r4, #16]
 8016456:	4642      	mov	r2, r8
 8016458:	4631      	mov	r1, r6
 801645a:	4628      	mov	r0, r5
 801645c:	47b8      	blx	r7
 801645e:	3001      	adds	r0, #1
 8016460:	d12c      	bne.n	80164bc <_printf_float+0x250>
 8016462:	e764      	b.n	801632e <_printf_float+0xc2>
 8016464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016468:	f240 80e0 	bls.w	801662c <_printf_float+0x3c0>
 801646c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016470:	2200      	movs	r2, #0
 8016472:	2300      	movs	r3, #0
 8016474:	f7ea fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8016478:	2800      	cmp	r0, #0
 801647a:	d034      	beq.n	80164e6 <_printf_float+0x27a>
 801647c:	4a37      	ldr	r2, [pc, #220]	; (801655c <_printf_float+0x2f0>)
 801647e:	2301      	movs	r3, #1
 8016480:	4631      	mov	r1, r6
 8016482:	4628      	mov	r0, r5
 8016484:	47b8      	blx	r7
 8016486:	3001      	adds	r0, #1
 8016488:	f43f af51 	beq.w	801632e <_printf_float+0xc2>
 801648c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016490:	429a      	cmp	r2, r3
 8016492:	db02      	blt.n	801649a <_printf_float+0x22e>
 8016494:	6823      	ldr	r3, [r4, #0]
 8016496:	07d8      	lsls	r0, r3, #31
 8016498:	d510      	bpl.n	80164bc <_printf_float+0x250>
 801649a:	ee18 3a10 	vmov	r3, s16
 801649e:	4652      	mov	r2, sl
 80164a0:	4631      	mov	r1, r6
 80164a2:	4628      	mov	r0, r5
 80164a4:	47b8      	blx	r7
 80164a6:	3001      	adds	r0, #1
 80164a8:	f43f af41 	beq.w	801632e <_printf_float+0xc2>
 80164ac:	f04f 0800 	mov.w	r8, #0
 80164b0:	f104 091a 	add.w	r9, r4, #26
 80164b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b6:	3b01      	subs	r3, #1
 80164b8:	4543      	cmp	r3, r8
 80164ba:	dc09      	bgt.n	80164d0 <_printf_float+0x264>
 80164bc:	6823      	ldr	r3, [r4, #0]
 80164be:	079b      	lsls	r3, r3, #30
 80164c0:	f100 8105 	bmi.w	80166ce <_printf_float+0x462>
 80164c4:	68e0      	ldr	r0, [r4, #12]
 80164c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164c8:	4298      	cmp	r0, r3
 80164ca:	bfb8      	it	lt
 80164cc:	4618      	movlt	r0, r3
 80164ce:	e730      	b.n	8016332 <_printf_float+0xc6>
 80164d0:	2301      	movs	r3, #1
 80164d2:	464a      	mov	r2, r9
 80164d4:	4631      	mov	r1, r6
 80164d6:	4628      	mov	r0, r5
 80164d8:	47b8      	blx	r7
 80164da:	3001      	adds	r0, #1
 80164dc:	f43f af27 	beq.w	801632e <_printf_float+0xc2>
 80164e0:	f108 0801 	add.w	r8, r8, #1
 80164e4:	e7e6      	b.n	80164b4 <_printf_float+0x248>
 80164e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	dc39      	bgt.n	8016560 <_printf_float+0x2f4>
 80164ec:	4a1b      	ldr	r2, [pc, #108]	; (801655c <_printf_float+0x2f0>)
 80164ee:	2301      	movs	r3, #1
 80164f0:	4631      	mov	r1, r6
 80164f2:	4628      	mov	r0, r5
 80164f4:	47b8      	blx	r7
 80164f6:	3001      	adds	r0, #1
 80164f8:	f43f af19 	beq.w	801632e <_printf_float+0xc2>
 80164fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016500:	4313      	orrs	r3, r2
 8016502:	d102      	bne.n	801650a <_printf_float+0x29e>
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	07d9      	lsls	r1, r3, #31
 8016508:	d5d8      	bpl.n	80164bc <_printf_float+0x250>
 801650a:	ee18 3a10 	vmov	r3, s16
 801650e:	4652      	mov	r2, sl
 8016510:	4631      	mov	r1, r6
 8016512:	4628      	mov	r0, r5
 8016514:	47b8      	blx	r7
 8016516:	3001      	adds	r0, #1
 8016518:	f43f af09 	beq.w	801632e <_printf_float+0xc2>
 801651c:	f04f 0900 	mov.w	r9, #0
 8016520:	f104 0a1a 	add.w	sl, r4, #26
 8016524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016526:	425b      	negs	r3, r3
 8016528:	454b      	cmp	r3, r9
 801652a:	dc01      	bgt.n	8016530 <_printf_float+0x2c4>
 801652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801652e:	e792      	b.n	8016456 <_printf_float+0x1ea>
 8016530:	2301      	movs	r3, #1
 8016532:	4652      	mov	r2, sl
 8016534:	4631      	mov	r1, r6
 8016536:	4628      	mov	r0, r5
 8016538:	47b8      	blx	r7
 801653a:	3001      	adds	r0, #1
 801653c:	f43f aef7 	beq.w	801632e <_printf_float+0xc2>
 8016540:	f109 0901 	add.w	r9, r9, #1
 8016544:	e7ee      	b.n	8016524 <_printf_float+0x2b8>
 8016546:	bf00      	nop
 8016548:	7fefffff 	.word	0x7fefffff
 801654c:	0801ca90 	.word	0x0801ca90
 8016550:	0801ca94 	.word	0x0801ca94
 8016554:	0801ca9c 	.word	0x0801ca9c
 8016558:	0801ca98 	.word	0x0801ca98
 801655c:	0801cea1 	.word	0x0801cea1
 8016560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016564:	429a      	cmp	r2, r3
 8016566:	bfa8      	it	ge
 8016568:	461a      	movge	r2, r3
 801656a:	2a00      	cmp	r2, #0
 801656c:	4691      	mov	r9, r2
 801656e:	dc37      	bgt.n	80165e0 <_printf_float+0x374>
 8016570:	f04f 0b00 	mov.w	fp, #0
 8016574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016578:	f104 021a 	add.w	r2, r4, #26
 801657c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801657e:	9305      	str	r3, [sp, #20]
 8016580:	eba3 0309 	sub.w	r3, r3, r9
 8016584:	455b      	cmp	r3, fp
 8016586:	dc33      	bgt.n	80165f0 <_printf_float+0x384>
 8016588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801658c:	429a      	cmp	r2, r3
 801658e:	db3b      	blt.n	8016608 <_printf_float+0x39c>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	07da      	lsls	r2, r3, #31
 8016594:	d438      	bmi.n	8016608 <_printf_float+0x39c>
 8016596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016598:	9b05      	ldr	r3, [sp, #20]
 801659a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801659c:	1ad3      	subs	r3, r2, r3
 801659e:	eba2 0901 	sub.w	r9, r2, r1
 80165a2:	4599      	cmp	r9, r3
 80165a4:	bfa8      	it	ge
 80165a6:	4699      	movge	r9, r3
 80165a8:	f1b9 0f00 	cmp.w	r9, #0
 80165ac:	dc35      	bgt.n	801661a <_printf_float+0x3ae>
 80165ae:	f04f 0800 	mov.w	r8, #0
 80165b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80165b6:	f104 0a1a 	add.w	sl, r4, #26
 80165ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165be:	1a9b      	subs	r3, r3, r2
 80165c0:	eba3 0309 	sub.w	r3, r3, r9
 80165c4:	4543      	cmp	r3, r8
 80165c6:	f77f af79 	ble.w	80164bc <_printf_float+0x250>
 80165ca:	2301      	movs	r3, #1
 80165cc:	4652      	mov	r2, sl
 80165ce:	4631      	mov	r1, r6
 80165d0:	4628      	mov	r0, r5
 80165d2:	47b8      	blx	r7
 80165d4:	3001      	adds	r0, #1
 80165d6:	f43f aeaa 	beq.w	801632e <_printf_float+0xc2>
 80165da:	f108 0801 	add.w	r8, r8, #1
 80165de:	e7ec      	b.n	80165ba <_printf_float+0x34e>
 80165e0:	4613      	mov	r3, r2
 80165e2:	4631      	mov	r1, r6
 80165e4:	4642      	mov	r2, r8
 80165e6:	4628      	mov	r0, r5
 80165e8:	47b8      	blx	r7
 80165ea:	3001      	adds	r0, #1
 80165ec:	d1c0      	bne.n	8016570 <_printf_float+0x304>
 80165ee:	e69e      	b.n	801632e <_printf_float+0xc2>
 80165f0:	2301      	movs	r3, #1
 80165f2:	4631      	mov	r1, r6
 80165f4:	4628      	mov	r0, r5
 80165f6:	9205      	str	r2, [sp, #20]
 80165f8:	47b8      	blx	r7
 80165fa:	3001      	adds	r0, #1
 80165fc:	f43f ae97 	beq.w	801632e <_printf_float+0xc2>
 8016600:	9a05      	ldr	r2, [sp, #20]
 8016602:	f10b 0b01 	add.w	fp, fp, #1
 8016606:	e7b9      	b.n	801657c <_printf_float+0x310>
 8016608:	ee18 3a10 	vmov	r3, s16
 801660c:	4652      	mov	r2, sl
 801660e:	4631      	mov	r1, r6
 8016610:	4628      	mov	r0, r5
 8016612:	47b8      	blx	r7
 8016614:	3001      	adds	r0, #1
 8016616:	d1be      	bne.n	8016596 <_printf_float+0x32a>
 8016618:	e689      	b.n	801632e <_printf_float+0xc2>
 801661a:	9a05      	ldr	r2, [sp, #20]
 801661c:	464b      	mov	r3, r9
 801661e:	4442      	add	r2, r8
 8016620:	4631      	mov	r1, r6
 8016622:	4628      	mov	r0, r5
 8016624:	47b8      	blx	r7
 8016626:	3001      	adds	r0, #1
 8016628:	d1c1      	bne.n	80165ae <_printf_float+0x342>
 801662a:	e680      	b.n	801632e <_printf_float+0xc2>
 801662c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801662e:	2a01      	cmp	r2, #1
 8016630:	dc01      	bgt.n	8016636 <_printf_float+0x3ca>
 8016632:	07db      	lsls	r3, r3, #31
 8016634:	d538      	bpl.n	80166a8 <_printf_float+0x43c>
 8016636:	2301      	movs	r3, #1
 8016638:	4642      	mov	r2, r8
 801663a:	4631      	mov	r1, r6
 801663c:	4628      	mov	r0, r5
 801663e:	47b8      	blx	r7
 8016640:	3001      	adds	r0, #1
 8016642:	f43f ae74 	beq.w	801632e <_printf_float+0xc2>
 8016646:	ee18 3a10 	vmov	r3, s16
 801664a:	4652      	mov	r2, sl
 801664c:	4631      	mov	r1, r6
 801664e:	4628      	mov	r0, r5
 8016650:	47b8      	blx	r7
 8016652:	3001      	adds	r0, #1
 8016654:	f43f ae6b 	beq.w	801632e <_printf_float+0xc2>
 8016658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801665c:	2200      	movs	r2, #0
 801665e:	2300      	movs	r3, #0
 8016660:	f7ea fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8016664:	b9d8      	cbnz	r0, 801669e <_printf_float+0x432>
 8016666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016668:	f108 0201 	add.w	r2, r8, #1
 801666c:	3b01      	subs	r3, #1
 801666e:	4631      	mov	r1, r6
 8016670:	4628      	mov	r0, r5
 8016672:	47b8      	blx	r7
 8016674:	3001      	adds	r0, #1
 8016676:	d10e      	bne.n	8016696 <_printf_float+0x42a>
 8016678:	e659      	b.n	801632e <_printf_float+0xc2>
 801667a:	2301      	movs	r3, #1
 801667c:	4652      	mov	r2, sl
 801667e:	4631      	mov	r1, r6
 8016680:	4628      	mov	r0, r5
 8016682:	47b8      	blx	r7
 8016684:	3001      	adds	r0, #1
 8016686:	f43f ae52 	beq.w	801632e <_printf_float+0xc2>
 801668a:	f108 0801 	add.w	r8, r8, #1
 801668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016690:	3b01      	subs	r3, #1
 8016692:	4543      	cmp	r3, r8
 8016694:	dcf1      	bgt.n	801667a <_printf_float+0x40e>
 8016696:	464b      	mov	r3, r9
 8016698:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801669c:	e6dc      	b.n	8016458 <_printf_float+0x1ec>
 801669e:	f04f 0800 	mov.w	r8, #0
 80166a2:	f104 0a1a 	add.w	sl, r4, #26
 80166a6:	e7f2      	b.n	801668e <_printf_float+0x422>
 80166a8:	2301      	movs	r3, #1
 80166aa:	4642      	mov	r2, r8
 80166ac:	e7df      	b.n	801666e <_printf_float+0x402>
 80166ae:	2301      	movs	r3, #1
 80166b0:	464a      	mov	r2, r9
 80166b2:	4631      	mov	r1, r6
 80166b4:	4628      	mov	r0, r5
 80166b6:	47b8      	blx	r7
 80166b8:	3001      	adds	r0, #1
 80166ba:	f43f ae38 	beq.w	801632e <_printf_float+0xc2>
 80166be:	f108 0801 	add.w	r8, r8, #1
 80166c2:	68e3      	ldr	r3, [r4, #12]
 80166c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166c6:	1a5b      	subs	r3, r3, r1
 80166c8:	4543      	cmp	r3, r8
 80166ca:	dcf0      	bgt.n	80166ae <_printf_float+0x442>
 80166cc:	e6fa      	b.n	80164c4 <_printf_float+0x258>
 80166ce:	f04f 0800 	mov.w	r8, #0
 80166d2:	f104 0919 	add.w	r9, r4, #25
 80166d6:	e7f4      	b.n	80166c2 <_printf_float+0x456>

080166d8 <_printf_common>:
 80166d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166dc:	4616      	mov	r6, r2
 80166de:	4699      	mov	r9, r3
 80166e0:	688a      	ldr	r2, [r1, #8]
 80166e2:	690b      	ldr	r3, [r1, #16]
 80166e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80166e8:	4293      	cmp	r3, r2
 80166ea:	bfb8      	it	lt
 80166ec:	4613      	movlt	r3, r2
 80166ee:	6033      	str	r3, [r6, #0]
 80166f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80166f4:	4607      	mov	r7, r0
 80166f6:	460c      	mov	r4, r1
 80166f8:	b10a      	cbz	r2, 80166fe <_printf_common+0x26>
 80166fa:	3301      	adds	r3, #1
 80166fc:	6033      	str	r3, [r6, #0]
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	0699      	lsls	r1, r3, #26
 8016702:	bf42      	ittt	mi
 8016704:	6833      	ldrmi	r3, [r6, #0]
 8016706:	3302      	addmi	r3, #2
 8016708:	6033      	strmi	r3, [r6, #0]
 801670a:	6825      	ldr	r5, [r4, #0]
 801670c:	f015 0506 	ands.w	r5, r5, #6
 8016710:	d106      	bne.n	8016720 <_printf_common+0x48>
 8016712:	f104 0a19 	add.w	sl, r4, #25
 8016716:	68e3      	ldr	r3, [r4, #12]
 8016718:	6832      	ldr	r2, [r6, #0]
 801671a:	1a9b      	subs	r3, r3, r2
 801671c:	42ab      	cmp	r3, r5
 801671e:	dc26      	bgt.n	801676e <_printf_common+0x96>
 8016720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016724:	1e13      	subs	r3, r2, #0
 8016726:	6822      	ldr	r2, [r4, #0]
 8016728:	bf18      	it	ne
 801672a:	2301      	movne	r3, #1
 801672c:	0692      	lsls	r2, r2, #26
 801672e:	d42b      	bmi.n	8016788 <_printf_common+0xb0>
 8016730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016734:	4649      	mov	r1, r9
 8016736:	4638      	mov	r0, r7
 8016738:	47c0      	blx	r8
 801673a:	3001      	adds	r0, #1
 801673c:	d01e      	beq.n	801677c <_printf_common+0xa4>
 801673e:	6823      	ldr	r3, [r4, #0]
 8016740:	68e5      	ldr	r5, [r4, #12]
 8016742:	6832      	ldr	r2, [r6, #0]
 8016744:	f003 0306 	and.w	r3, r3, #6
 8016748:	2b04      	cmp	r3, #4
 801674a:	bf08      	it	eq
 801674c:	1aad      	subeq	r5, r5, r2
 801674e:	68a3      	ldr	r3, [r4, #8]
 8016750:	6922      	ldr	r2, [r4, #16]
 8016752:	bf0c      	ite	eq
 8016754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016758:	2500      	movne	r5, #0
 801675a:	4293      	cmp	r3, r2
 801675c:	bfc4      	itt	gt
 801675e:	1a9b      	subgt	r3, r3, r2
 8016760:	18ed      	addgt	r5, r5, r3
 8016762:	2600      	movs	r6, #0
 8016764:	341a      	adds	r4, #26
 8016766:	42b5      	cmp	r5, r6
 8016768:	d11a      	bne.n	80167a0 <_printf_common+0xc8>
 801676a:	2000      	movs	r0, #0
 801676c:	e008      	b.n	8016780 <_printf_common+0xa8>
 801676e:	2301      	movs	r3, #1
 8016770:	4652      	mov	r2, sl
 8016772:	4649      	mov	r1, r9
 8016774:	4638      	mov	r0, r7
 8016776:	47c0      	blx	r8
 8016778:	3001      	adds	r0, #1
 801677a:	d103      	bne.n	8016784 <_printf_common+0xac>
 801677c:	f04f 30ff 	mov.w	r0, #4294967295
 8016780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016784:	3501      	adds	r5, #1
 8016786:	e7c6      	b.n	8016716 <_printf_common+0x3e>
 8016788:	18e1      	adds	r1, r4, r3
 801678a:	1c5a      	adds	r2, r3, #1
 801678c:	2030      	movs	r0, #48	; 0x30
 801678e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016792:	4422      	add	r2, r4
 8016794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801679c:	3302      	adds	r3, #2
 801679e:	e7c7      	b.n	8016730 <_printf_common+0x58>
 80167a0:	2301      	movs	r3, #1
 80167a2:	4622      	mov	r2, r4
 80167a4:	4649      	mov	r1, r9
 80167a6:	4638      	mov	r0, r7
 80167a8:	47c0      	blx	r8
 80167aa:	3001      	adds	r0, #1
 80167ac:	d0e6      	beq.n	801677c <_printf_common+0xa4>
 80167ae:	3601      	adds	r6, #1
 80167b0:	e7d9      	b.n	8016766 <_printf_common+0x8e>
	...

080167b4 <_printf_i>:
 80167b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167b8:	460c      	mov	r4, r1
 80167ba:	4691      	mov	r9, r2
 80167bc:	7e27      	ldrb	r7, [r4, #24]
 80167be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80167c0:	2f78      	cmp	r7, #120	; 0x78
 80167c2:	4680      	mov	r8, r0
 80167c4:	469a      	mov	sl, r3
 80167c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80167ca:	d807      	bhi.n	80167dc <_printf_i+0x28>
 80167cc:	2f62      	cmp	r7, #98	; 0x62
 80167ce:	d80a      	bhi.n	80167e6 <_printf_i+0x32>
 80167d0:	2f00      	cmp	r7, #0
 80167d2:	f000 80d8 	beq.w	8016986 <_printf_i+0x1d2>
 80167d6:	2f58      	cmp	r7, #88	; 0x58
 80167d8:	f000 80a3 	beq.w	8016922 <_printf_i+0x16e>
 80167dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80167e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80167e4:	e03a      	b.n	801685c <_printf_i+0xa8>
 80167e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80167ea:	2b15      	cmp	r3, #21
 80167ec:	d8f6      	bhi.n	80167dc <_printf_i+0x28>
 80167ee:	a001      	add	r0, pc, #4	; (adr r0, 80167f4 <_printf_i+0x40>)
 80167f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80167f4:	0801684d 	.word	0x0801684d
 80167f8:	08016861 	.word	0x08016861
 80167fc:	080167dd 	.word	0x080167dd
 8016800:	080167dd 	.word	0x080167dd
 8016804:	080167dd 	.word	0x080167dd
 8016808:	080167dd 	.word	0x080167dd
 801680c:	08016861 	.word	0x08016861
 8016810:	080167dd 	.word	0x080167dd
 8016814:	080167dd 	.word	0x080167dd
 8016818:	080167dd 	.word	0x080167dd
 801681c:	080167dd 	.word	0x080167dd
 8016820:	0801696d 	.word	0x0801696d
 8016824:	08016891 	.word	0x08016891
 8016828:	0801694f 	.word	0x0801694f
 801682c:	080167dd 	.word	0x080167dd
 8016830:	080167dd 	.word	0x080167dd
 8016834:	0801698f 	.word	0x0801698f
 8016838:	080167dd 	.word	0x080167dd
 801683c:	08016891 	.word	0x08016891
 8016840:	080167dd 	.word	0x080167dd
 8016844:	080167dd 	.word	0x080167dd
 8016848:	08016957 	.word	0x08016957
 801684c:	680b      	ldr	r3, [r1, #0]
 801684e:	1d1a      	adds	r2, r3, #4
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	600a      	str	r2, [r1, #0]
 8016854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801685c:	2301      	movs	r3, #1
 801685e:	e0a3      	b.n	80169a8 <_printf_i+0x1f4>
 8016860:	6825      	ldr	r5, [r4, #0]
 8016862:	6808      	ldr	r0, [r1, #0]
 8016864:	062e      	lsls	r6, r5, #24
 8016866:	f100 0304 	add.w	r3, r0, #4
 801686a:	d50a      	bpl.n	8016882 <_printf_i+0xce>
 801686c:	6805      	ldr	r5, [r0, #0]
 801686e:	600b      	str	r3, [r1, #0]
 8016870:	2d00      	cmp	r5, #0
 8016872:	da03      	bge.n	801687c <_printf_i+0xc8>
 8016874:	232d      	movs	r3, #45	; 0x2d
 8016876:	426d      	negs	r5, r5
 8016878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801687c:	485e      	ldr	r0, [pc, #376]	; (80169f8 <_printf_i+0x244>)
 801687e:	230a      	movs	r3, #10
 8016880:	e019      	b.n	80168b6 <_printf_i+0x102>
 8016882:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016886:	6805      	ldr	r5, [r0, #0]
 8016888:	600b      	str	r3, [r1, #0]
 801688a:	bf18      	it	ne
 801688c:	b22d      	sxthne	r5, r5
 801688e:	e7ef      	b.n	8016870 <_printf_i+0xbc>
 8016890:	680b      	ldr	r3, [r1, #0]
 8016892:	6825      	ldr	r5, [r4, #0]
 8016894:	1d18      	adds	r0, r3, #4
 8016896:	6008      	str	r0, [r1, #0]
 8016898:	0628      	lsls	r0, r5, #24
 801689a:	d501      	bpl.n	80168a0 <_printf_i+0xec>
 801689c:	681d      	ldr	r5, [r3, #0]
 801689e:	e002      	b.n	80168a6 <_printf_i+0xf2>
 80168a0:	0669      	lsls	r1, r5, #25
 80168a2:	d5fb      	bpl.n	801689c <_printf_i+0xe8>
 80168a4:	881d      	ldrh	r5, [r3, #0]
 80168a6:	4854      	ldr	r0, [pc, #336]	; (80169f8 <_printf_i+0x244>)
 80168a8:	2f6f      	cmp	r7, #111	; 0x6f
 80168aa:	bf0c      	ite	eq
 80168ac:	2308      	moveq	r3, #8
 80168ae:	230a      	movne	r3, #10
 80168b0:	2100      	movs	r1, #0
 80168b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80168b6:	6866      	ldr	r6, [r4, #4]
 80168b8:	60a6      	str	r6, [r4, #8]
 80168ba:	2e00      	cmp	r6, #0
 80168bc:	bfa2      	ittt	ge
 80168be:	6821      	ldrge	r1, [r4, #0]
 80168c0:	f021 0104 	bicge.w	r1, r1, #4
 80168c4:	6021      	strge	r1, [r4, #0]
 80168c6:	b90d      	cbnz	r5, 80168cc <_printf_i+0x118>
 80168c8:	2e00      	cmp	r6, #0
 80168ca:	d04d      	beq.n	8016968 <_printf_i+0x1b4>
 80168cc:	4616      	mov	r6, r2
 80168ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80168d2:	fb03 5711 	mls	r7, r3, r1, r5
 80168d6:	5dc7      	ldrb	r7, [r0, r7]
 80168d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80168dc:	462f      	mov	r7, r5
 80168de:	42bb      	cmp	r3, r7
 80168e0:	460d      	mov	r5, r1
 80168e2:	d9f4      	bls.n	80168ce <_printf_i+0x11a>
 80168e4:	2b08      	cmp	r3, #8
 80168e6:	d10b      	bne.n	8016900 <_printf_i+0x14c>
 80168e8:	6823      	ldr	r3, [r4, #0]
 80168ea:	07df      	lsls	r7, r3, #31
 80168ec:	d508      	bpl.n	8016900 <_printf_i+0x14c>
 80168ee:	6923      	ldr	r3, [r4, #16]
 80168f0:	6861      	ldr	r1, [r4, #4]
 80168f2:	4299      	cmp	r1, r3
 80168f4:	bfde      	ittt	le
 80168f6:	2330      	movle	r3, #48	; 0x30
 80168f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80168fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016900:	1b92      	subs	r2, r2, r6
 8016902:	6122      	str	r2, [r4, #16]
 8016904:	f8cd a000 	str.w	sl, [sp]
 8016908:	464b      	mov	r3, r9
 801690a:	aa03      	add	r2, sp, #12
 801690c:	4621      	mov	r1, r4
 801690e:	4640      	mov	r0, r8
 8016910:	f7ff fee2 	bl	80166d8 <_printf_common>
 8016914:	3001      	adds	r0, #1
 8016916:	d14c      	bne.n	80169b2 <_printf_i+0x1fe>
 8016918:	f04f 30ff 	mov.w	r0, #4294967295
 801691c:	b004      	add	sp, #16
 801691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016922:	4835      	ldr	r0, [pc, #212]	; (80169f8 <_printf_i+0x244>)
 8016924:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016928:	6823      	ldr	r3, [r4, #0]
 801692a:	680e      	ldr	r6, [r1, #0]
 801692c:	061f      	lsls	r7, r3, #24
 801692e:	f856 5b04 	ldr.w	r5, [r6], #4
 8016932:	600e      	str	r6, [r1, #0]
 8016934:	d514      	bpl.n	8016960 <_printf_i+0x1ac>
 8016936:	07d9      	lsls	r1, r3, #31
 8016938:	bf44      	itt	mi
 801693a:	f043 0320 	orrmi.w	r3, r3, #32
 801693e:	6023      	strmi	r3, [r4, #0]
 8016940:	b91d      	cbnz	r5, 801694a <_printf_i+0x196>
 8016942:	6823      	ldr	r3, [r4, #0]
 8016944:	f023 0320 	bic.w	r3, r3, #32
 8016948:	6023      	str	r3, [r4, #0]
 801694a:	2310      	movs	r3, #16
 801694c:	e7b0      	b.n	80168b0 <_printf_i+0xfc>
 801694e:	6823      	ldr	r3, [r4, #0]
 8016950:	f043 0320 	orr.w	r3, r3, #32
 8016954:	6023      	str	r3, [r4, #0]
 8016956:	2378      	movs	r3, #120	; 0x78
 8016958:	4828      	ldr	r0, [pc, #160]	; (80169fc <_printf_i+0x248>)
 801695a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801695e:	e7e3      	b.n	8016928 <_printf_i+0x174>
 8016960:	065e      	lsls	r6, r3, #25
 8016962:	bf48      	it	mi
 8016964:	b2ad      	uxthmi	r5, r5
 8016966:	e7e6      	b.n	8016936 <_printf_i+0x182>
 8016968:	4616      	mov	r6, r2
 801696a:	e7bb      	b.n	80168e4 <_printf_i+0x130>
 801696c:	680b      	ldr	r3, [r1, #0]
 801696e:	6826      	ldr	r6, [r4, #0]
 8016970:	6960      	ldr	r0, [r4, #20]
 8016972:	1d1d      	adds	r5, r3, #4
 8016974:	600d      	str	r5, [r1, #0]
 8016976:	0635      	lsls	r5, r6, #24
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	d501      	bpl.n	8016980 <_printf_i+0x1cc>
 801697c:	6018      	str	r0, [r3, #0]
 801697e:	e002      	b.n	8016986 <_printf_i+0x1d2>
 8016980:	0671      	lsls	r1, r6, #25
 8016982:	d5fb      	bpl.n	801697c <_printf_i+0x1c8>
 8016984:	8018      	strh	r0, [r3, #0]
 8016986:	2300      	movs	r3, #0
 8016988:	6123      	str	r3, [r4, #16]
 801698a:	4616      	mov	r6, r2
 801698c:	e7ba      	b.n	8016904 <_printf_i+0x150>
 801698e:	680b      	ldr	r3, [r1, #0]
 8016990:	1d1a      	adds	r2, r3, #4
 8016992:	600a      	str	r2, [r1, #0]
 8016994:	681e      	ldr	r6, [r3, #0]
 8016996:	6862      	ldr	r2, [r4, #4]
 8016998:	2100      	movs	r1, #0
 801699a:	4630      	mov	r0, r6
 801699c:	f7e9 fc20 	bl	80001e0 <memchr>
 80169a0:	b108      	cbz	r0, 80169a6 <_printf_i+0x1f2>
 80169a2:	1b80      	subs	r0, r0, r6
 80169a4:	6060      	str	r0, [r4, #4]
 80169a6:	6863      	ldr	r3, [r4, #4]
 80169a8:	6123      	str	r3, [r4, #16]
 80169aa:	2300      	movs	r3, #0
 80169ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80169b0:	e7a8      	b.n	8016904 <_printf_i+0x150>
 80169b2:	6923      	ldr	r3, [r4, #16]
 80169b4:	4632      	mov	r2, r6
 80169b6:	4649      	mov	r1, r9
 80169b8:	4640      	mov	r0, r8
 80169ba:	47d0      	blx	sl
 80169bc:	3001      	adds	r0, #1
 80169be:	d0ab      	beq.n	8016918 <_printf_i+0x164>
 80169c0:	6823      	ldr	r3, [r4, #0]
 80169c2:	079b      	lsls	r3, r3, #30
 80169c4:	d413      	bmi.n	80169ee <_printf_i+0x23a>
 80169c6:	68e0      	ldr	r0, [r4, #12]
 80169c8:	9b03      	ldr	r3, [sp, #12]
 80169ca:	4298      	cmp	r0, r3
 80169cc:	bfb8      	it	lt
 80169ce:	4618      	movlt	r0, r3
 80169d0:	e7a4      	b.n	801691c <_printf_i+0x168>
 80169d2:	2301      	movs	r3, #1
 80169d4:	4632      	mov	r2, r6
 80169d6:	4649      	mov	r1, r9
 80169d8:	4640      	mov	r0, r8
 80169da:	47d0      	blx	sl
 80169dc:	3001      	adds	r0, #1
 80169de:	d09b      	beq.n	8016918 <_printf_i+0x164>
 80169e0:	3501      	adds	r5, #1
 80169e2:	68e3      	ldr	r3, [r4, #12]
 80169e4:	9903      	ldr	r1, [sp, #12]
 80169e6:	1a5b      	subs	r3, r3, r1
 80169e8:	42ab      	cmp	r3, r5
 80169ea:	dcf2      	bgt.n	80169d2 <_printf_i+0x21e>
 80169ec:	e7eb      	b.n	80169c6 <_printf_i+0x212>
 80169ee:	2500      	movs	r5, #0
 80169f0:	f104 0619 	add.w	r6, r4, #25
 80169f4:	e7f5      	b.n	80169e2 <_printf_i+0x22e>
 80169f6:	bf00      	nop
 80169f8:	0801caa0 	.word	0x0801caa0
 80169fc:	0801cab1 	.word	0x0801cab1

08016a00 <_scanf_float>:
 8016a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a04:	b087      	sub	sp, #28
 8016a06:	4617      	mov	r7, r2
 8016a08:	9303      	str	r3, [sp, #12]
 8016a0a:	688b      	ldr	r3, [r1, #8]
 8016a0c:	1e5a      	subs	r2, r3, #1
 8016a0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016a12:	bf83      	ittte	hi
 8016a14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016a18:	195b      	addhi	r3, r3, r5
 8016a1a:	9302      	strhi	r3, [sp, #8]
 8016a1c:	2300      	movls	r3, #0
 8016a1e:	bf86      	itte	hi
 8016a20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016a24:	608b      	strhi	r3, [r1, #8]
 8016a26:	9302      	strls	r3, [sp, #8]
 8016a28:	680b      	ldr	r3, [r1, #0]
 8016a2a:	468b      	mov	fp, r1
 8016a2c:	2500      	movs	r5, #0
 8016a2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016a32:	f84b 3b1c 	str.w	r3, [fp], #28
 8016a36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a3a:	4680      	mov	r8, r0
 8016a3c:	460c      	mov	r4, r1
 8016a3e:	465e      	mov	r6, fp
 8016a40:	46aa      	mov	sl, r5
 8016a42:	46a9      	mov	r9, r5
 8016a44:	9501      	str	r5, [sp, #4]
 8016a46:	68a2      	ldr	r2, [r4, #8]
 8016a48:	b152      	cbz	r2, 8016a60 <_scanf_float+0x60>
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	2b4e      	cmp	r3, #78	; 0x4e
 8016a50:	d864      	bhi.n	8016b1c <_scanf_float+0x11c>
 8016a52:	2b40      	cmp	r3, #64	; 0x40
 8016a54:	d83c      	bhi.n	8016ad0 <_scanf_float+0xd0>
 8016a56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016a5a:	b2c8      	uxtb	r0, r1
 8016a5c:	280e      	cmp	r0, #14
 8016a5e:	d93a      	bls.n	8016ad6 <_scanf_float+0xd6>
 8016a60:	f1b9 0f00 	cmp.w	r9, #0
 8016a64:	d003      	beq.n	8016a6e <_scanf_float+0x6e>
 8016a66:	6823      	ldr	r3, [r4, #0]
 8016a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a6c:	6023      	str	r3, [r4, #0]
 8016a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a72:	f1ba 0f01 	cmp.w	sl, #1
 8016a76:	f200 8113 	bhi.w	8016ca0 <_scanf_float+0x2a0>
 8016a7a:	455e      	cmp	r6, fp
 8016a7c:	f200 8105 	bhi.w	8016c8a <_scanf_float+0x28a>
 8016a80:	2501      	movs	r5, #1
 8016a82:	4628      	mov	r0, r5
 8016a84:	b007      	add	sp, #28
 8016a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016a8e:	2a0d      	cmp	r2, #13
 8016a90:	d8e6      	bhi.n	8016a60 <_scanf_float+0x60>
 8016a92:	a101      	add	r1, pc, #4	; (adr r1, 8016a98 <_scanf_float+0x98>)
 8016a94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016a98:	08016bd7 	.word	0x08016bd7
 8016a9c:	08016a61 	.word	0x08016a61
 8016aa0:	08016a61 	.word	0x08016a61
 8016aa4:	08016a61 	.word	0x08016a61
 8016aa8:	08016c37 	.word	0x08016c37
 8016aac:	08016c0f 	.word	0x08016c0f
 8016ab0:	08016a61 	.word	0x08016a61
 8016ab4:	08016a61 	.word	0x08016a61
 8016ab8:	08016be5 	.word	0x08016be5
 8016abc:	08016a61 	.word	0x08016a61
 8016ac0:	08016a61 	.word	0x08016a61
 8016ac4:	08016a61 	.word	0x08016a61
 8016ac8:	08016a61 	.word	0x08016a61
 8016acc:	08016b9d 	.word	0x08016b9d
 8016ad0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016ad4:	e7db      	b.n	8016a8e <_scanf_float+0x8e>
 8016ad6:	290e      	cmp	r1, #14
 8016ad8:	d8c2      	bhi.n	8016a60 <_scanf_float+0x60>
 8016ada:	a001      	add	r0, pc, #4	; (adr r0, 8016ae0 <_scanf_float+0xe0>)
 8016adc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016ae0:	08016b8f 	.word	0x08016b8f
 8016ae4:	08016a61 	.word	0x08016a61
 8016ae8:	08016b8f 	.word	0x08016b8f
 8016aec:	08016c23 	.word	0x08016c23
 8016af0:	08016a61 	.word	0x08016a61
 8016af4:	08016b3d 	.word	0x08016b3d
 8016af8:	08016b79 	.word	0x08016b79
 8016afc:	08016b79 	.word	0x08016b79
 8016b00:	08016b79 	.word	0x08016b79
 8016b04:	08016b79 	.word	0x08016b79
 8016b08:	08016b79 	.word	0x08016b79
 8016b0c:	08016b79 	.word	0x08016b79
 8016b10:	08016b79 	.word	0x08016b79
 8016b14:	08016b79 	.word	0x08016b79
 8016b18:	08016b79 	.word	0x08016b79
 8016b1c:	2b6e      	cmp	r3, #110	; 0x6e
 8016b1e:	d809      	bhi.n	8016b34 <_scanf_float+0x134>
 8016b20:	2b60      	cmp	r3, #96	; 0x60
 8016b22:	d8b2      	bhi.n	8016a8a <_scanf_float+0x8a>
 8016b24:	2b54      	cmp	r3, #84	; 0x54
 8016b26:	d077      	beq.n	8016c18 <_scanf_float+0x218>
 8016b28:	2b59      	cmp	r3, #89	; 0x59
 8016b2a:	d199      	bne.n	8016a60 <_scanf_float+0x60>
 8016b2c:	2d07      	cmp	r5, #7
 8016b2e:	d197      	bne.n	8016a60 <_scanf_float+0x60>
 8016b30:	2508      	movs	r5, #8
 8016b32:	e029      	b.n	8016b88 <_scanf_float+0x188>
 8016b34:	2b74      	cmp	r3, #116	; 0x74
 8016b36:	d06f      	beq.n	8016c18 <_scanf_float+0x218>
 8016b38:	2b79      	cmp	r3, #121	; 0x79
 8016b3a:	e7f6      	b.n	8016b2a <_scanf_float+0x12a>
 8016b3c:	6821      	ldr	r1, [r4, #0]
 8016b3e:	05c8      	lsls	r0, r1, #23
 8016b40:	d51a      	bpl.n	8016b78 <_scanf_float+0x178>
 8016b42:	9b02      	ldr	r3, [sp, #8]
 8016b44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016b48:	6021      	str	r1, [r4, #0]
 8016b4a:	f109 0901 	add.w	r9, r9, #1
 8016b4e:	b11b      	cbz	r3, 8016b58 <_scanf_float+0x158>
 8016b50:	3b01      	subs	r3, #1
 8016b52:	3201      	adds	r2, #1
 8016b54:	9302      	str	r3, [sp, #8]
 8016b56:	60a2      	str	r2, [r4, #8]
 8016b58:	68a3      	ldr	r3, [r4, #8]
 8016b5a:	3b01      	subs	r3, #1
 8016b5c:	60a3      	str	r3, [r4, #8]
 8016b5e:	6923      	ldr	r3, [r4, #16]
 8016b60:	3301      	adds	r3, #1
 8016b62:	6123      	str	r3, [r4, #16]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	3b01      	subs	r3, #1
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	607b      	str	r3, [r7, #4]
 8016b6c:	f340 8084 	ble.w	8016c78 <_scanf_float+0x278>
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	3301      	adds	r3, #1
 8016b74:	603b      	str	r3, [r7, #0]
 8016b76:	e766      	b.n	8016a46 <_scanf_float+0x46>
 8016b78:	eb1a 0f05 	cmn.w	sl, r5
 8016b7c:	f47f af70 	bne.w	8016a60 <_scanf_float+0x60>
 8016b80:	6822      	ldr	r2, [r4, #0]
 8016b82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016b86:	6022      	str	r2, [r4, #0]
 8016b88:	f806 3b01 	strb.w	r3, [r6], #1
 8016b8c:	e7e4      	b.n	8016b58 <_scanf_float+0x158>
 8016b8e:	6822      	ldr	r2, [r4, #0]
 8016b90:	0610      	lsls	r0, r2, #24
 8016b92:	f57f af65 	bpl.w	8016a60 <_scanf_float+0x60>
 8016b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016b9a:	e7f4      	b.n	8016b86 <_scanf_float+0x186>
 8016b9c:	f1ba 0f00 	cmp.w	sl, #0
 8016ba0:	d10e      	bne.n	8016bc0 <_scanf_float+0x1c0>
 8016ba2:	f1b9 0f00 	cmp.w	r9, #0
 8016ba6:	d10e      	bne.n	8016bc6 <_scanf_float+0x1c6>
 8016ba8:	6822      	ldr	r2, [r4, #0]
 8016baa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016bae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016bb2:	d108      	bne.n	8016bc6 <_scanf_float+0x1c6>
 8016bb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016bb8:	6022      	str	r2, [r4, #0]
 8016bba:	f04f 0a01 	mov.w	sl, #1
 8016bbe:	e7e3      	b.n	8016b88 <_scanf_float+0x188>
 8016bc0:	f1ba 0f02 	cmp.w	sl, #2
 8016bc4:	d055      	beq.n	8016c72 <_scanf_float+0x272>
 8016bc6:	2d01      	cmp	r5, #1
 8016bc8:	d002      	beq.n	8016bd0 <_scanf_float+0x1d0>
 8016bca:	2d04      	cmp	r5, #4
 8016bcc:	f47f af48 	bne.w	8016a60 <_scanf_float+0x60>
 8016bd0:	3501      	adds	r5, #1
 8016bd2:	b2ed      	uxtb	r5, r5
 8016bd4:	e7d8      	b.n	8016b88 <_scanf_float+0x188>
 8016bd6:	f1ba 0f01 	cmp.w	sl, #1
 8016bda:	f47f af41 	bne.w	8016a60 <_scanf_float+0x60>
 8016bde:	f04f 0a02 	mov.w	sl, #2
 8016be2:	e7d1      	b.n	8016b88 <_scanf_float+0x188>
 8016be4:	b97d      	cbnz	r5, 8016c06 <_scanf_float+0x206>
 8016be6:	f1b9 0f00 	cmp.w	r9, #0
 8016bea:	f47f af3c 	bne.w	8016a66 <_scanf_float+0x66>
 8016bee:	6822      	ldr	r2, [r4, #0]
 8016bf0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016bf4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016bf8:	f47f af39 	bne.w	8016a6e <_scanf_float+0x6e>
 8016bfc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c00:	6022      	str	r2, [r4, #0]
 8016c02:	2501      	movs	r5, #1
 8016c04:	e7c0      	b.n	8016b88 <_scanf_float+0x188>
 8016c06:	2d03      	cmp	r5, #3
 8016c08:	d0e2      	beq.n	8016bd0 <_scanf_float+0x1d0>
 8016c0a:	2d05      	cmp	r5, #5
 8016c0c:	e7de      	b.n	8016bcc <_scanf_float+0x1cc>
 8016c0e:	2d02      	cmp	r5, #2
 8016c10:	f47f af26 	bne.w	8016a60 <_scanf_float+0x60>
 8016c14:	2503      	movs	r5, #3
 8016c16:	e7b7      	b.n	8016b88 <_scanf_float+0x188>
 8016c18:	2d06      	cmp	r5, #6
 8016c1a:	f47f af21 	bne.w	8016a60 <_scanf_float+0x60>
 8016c1e:	2507      	movs	r5, #7
 8016c20:	e7b2      	b.n	8016b88 <_scanf_float+0x188>
 8016c22:	6822      	ldr	r2, [r4, #0]
 8016c24:	0591      	lsls	r1, r2, #22
 8016c26:	f57f af1b 	bpl.w	8016a60 <_scanf_float+0x60>
 8016c2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016c2e:	6022      	str	r2, [r4, #0]
 8016c30:	f8cd 9004 	str.w	r9, [sp, #4]
 8016c34:	e7a8      	b.n	8016b88 <_scanf_float+0x188>
 8016c36:	6822      	ldr	r2, [r4, #0]
 8016c38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016c3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016c40:	d006      	beq.n	8016c50 <_scanf_float+0x250>
 8016c42:	0550      	lsls	r0, r2, #21
 8016c44:	f57f af0c 	bpl.w	8016a60 <_scanf_float+0x60>
 8016c48:	f1b9 0f00 	cmp.w	r9, #0
 8016c4c:	f43f af0f 	beq.w	8016a6e <_scanf_float+0x6e>
 8016c50:	0591      	lsls	r1, r2, #22
 8016c52:	bf58      	it	pl
 8016c54:	9901      	ldrpl	r1, [sp, #4]
 8016c56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c5a:	bf58      	it	pl
 8016c5c:	eba9 0101 	subpl.w	r1, r9, r1
 8016c60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016c64:	bf58      	it	pl
 8016c66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016c6a:	6022      	str	r2, [r4, #0]
 8016c6c:	f04f 0900 	mov.w	r9, #0
 8016c70:	e78a      	b.n	8016b88 <_scanf_float+0x188>
 8016c72:	f04f 0a03 	mov.w	sl, #3
 8016c76:	e787      	b.n	8016b88 <_scanf_float+0x188>
 8016c78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c7c:	4639      	mov	r1, r7
 8016c7e:	4640      	mov	r0, r8
 8016c80:	4798      	blx	r3
 8016c82:	2800      	cmp	r0, #0
 8016c84:	f43f aedf 	beq.w	8016a46 <_scanf_float+0x46>
 8016c88:	e6ea      	b.n	8016a60 <_scanf_float+0x60>
 8016c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016c92:	463a      	mov	r2, r7
 8016c94:	4640      	mov	r0, r8
 8016c96:	4798      	blx	r3
 8016c98:	6923      	ldr	r3, [r4, #16]
 8016c9a:	3b01      	subs	r3, #1
 8016c9c:	6123      	str	r3, [r4, #16]
 8016c9e:	e6ec      	b.n	8016a7a <_scanf_float+0x7a>
 8016ca0:	1e6b      	subs	r3, r5, #1
 8016ca2:	2b06      	cmp	r3, #6
 8016ca4:	d825      	bhi.n	8016cf2 <_scanf_float+0x2f2>
 8016ca6:	2d02      	cmp	r5, #2
 8016ca8:	d836      	bhi.n	8016d18 <_scanf_float+0x318>
 8016caa:	455e      	cmp	r6, fp
 8016cac:	f67f aee8 	bls.w	8016a80 <_scanf_float+0x80>
 8016cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016cb8:	463a      	mov	r2, r7
 8016cba:	4640      	mov	r0, r8
 8016cbc:	4798      	blx	r3
 8016cbe:	6923      	ldr	r3, [r4, #16]
 8016cc0:	3b01      	subs	r3, #1
 8016cc2:	6123      	str	r3, [r4, #16]
 8016cc4:	e7f1      	b.n	8016caa <_scanf_float+0x2aa>
 8016cc6:	9802      	ldr	r0, [sp, #8]
 8016cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ccc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016cd0:	9002      	str	r0, [sp, #8]
 8016cd2:	463a      	mov	r2, r7
 8016cd4:	4640      	mov	r0, r8
 8016cd6:	4798      	blx	r3
 8016cd8:	6923      	ldr	r3, [r4, #16]
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	6123      	str	r3, [r4, #16]
 8016cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ce2:	fa5f fa8a 	uxtb.w	sl, sl
 8016ce6:	f1ba 0f02 	cmp.w	sl, #2
 8016cea:	d1ec      	bne.n	8016cc6 <_scanf_float+0x2c6>
 8016cec:	3d03      	subs	r5, #3
 8016cee:	b2ed      	uxtb	r5, r5
 8016cf0:	1b76      	subs	r6, r6, r5
 8016cf2:	6823      	ldr	r3, [r4, #0]
 8016cf4:	05da      	lsls	r2, r3, #23
 8016cf6:	d52f      	bpl.n	8016d58 <_scanf_float+0x358>
 8016cf8:	055b      	lsls	r3, r3, #21
 8016cfa:	d510      	bpl.n	8016d1e <_scanf_float+0x31e>
 8016cfc:	455e      	cmp	r6, fp
 8016cfe:	f67f aebf 	bls.w	8016a80 <_scanf_float+0x80>
 8016d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d0a:	463a      	mov	r2, r7
 8016d0c:	4640      	mov	r0, r8
 8016d0e:	4798      	blx	r3
 8016d10:	6923      	ldr	r3, [r4, #16]
 8016d12:	3b01      	subs	r3, #1
 8016d14:	6123      	str	r3, [r4, #16]
 8016d16:	e7f1      	b.n	8016cfc <_scanf_float+0x2fc>
 8016d18:	46aa      	mov	sl, r5
 8016d1a:	9602      	str	r6, [sp, #8]
 8016d1c:	e7df      	b.n	8016cde <_scanf_float+0x2de>
 8016d1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016d22:	6923      	ldr	r3, [r4, #16]
 8016d24:	2965      	cmp	r1, #101	; 0x65
 8016d26:	f103 33ff 	add.w	r3, r3, #4294967295
 8016d2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8016d2e:	6123      	str	r3, [r4, #16]
 8016d30:	d00c      	beq.n	8016d4c <_scanf_float+0x34c>
 8016d32:	2945      	cmp	r1, #69	; 0x45
 8016d34:	d00a      	beq.n	8016d4c <_scanf_float+0x34c>
 8016d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d3a:	463a      	mov	r2, r7
 8016d3c:	4640      	mov	r0, r8
 8016d3e:	4798      	blx	r3
 8016d40:	6923      	ldr	r3, [r4, #16]
 8016d42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016d46:	3b01      	subs	r3, #1
 8016d48:	1eb5      	subs	r5, r6, #2
 8016d4a:	6123      	str	r3, [r4, #16]
 8016d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d50:	463a      	mov	r2, r7
 8016d52:	4640      	mov	r0, r8
 8016d54:	4798      	blx	r3
 8016d56:	462e      	mov	r6, r5
 8016d58:	6825      	ldr	r5, [r4, #0]
 8016d5a:	f015 0510 	ands.w	r5, r5, #16
 8016d5e:	d158      	bne.n	8016e12 <_scanf_float+0x412>
 8016d60:	7035      	strb	r5, [r6, #0]
 8016d62:	6823      	ldr	r3, [r4, #0]
 8016d64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d6c:	d11c      	bne.n	8016da8 <_scanf_float+0x3a8>
 8016d6e:	9b01      	ldr	r3, [sp, #4]
 8016d70:	454b      	cmp	r3, r9
 8016d72:	eba3 0209 	sub.w	r2, r3, r9
 8016d76:	d124      	bne.n	8016dc2 <_scanf_float+0x3c2>
 8016d78:	2200      	movs	r2, #0
 8016d7a:	4659      	mov	r1, fp
 8016d7c:	4640      	mov	r0, r8
 8016d7e:	f000 ff0d 	bl	8017b9c <_strtod_r>
 8016d82:	9b03      	ldr	r3, [sp, #12]
 8016d84:	6821      	ldr	r1, [r4, #0]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	f011 0f02 	tst.w	r1, #2
 8016d8c:	ec57 6b10 	vmov	r6, r7, d0
 8016d90:	f103 0204 	add.w	r2, r3, #4
 8016d94:	d020      	beq.n	8016dd8 <_scanf_float+0x3d8>
 8016d96:	9903      	ldr	r1, [sp, #12]
 8016d98:	600a      	str	r2, [r1, #0]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	e9c3 6700 	strd	r6, r7, [r3]
 8016da0:	68e3      	ldr	r3, [r4, #12]
 8016da2:	3301      	adds	r3, #1
 8016da4:	60e3      	str	r3, [r4, #12]
 8016da6:	e66c      	b.n	8016a82 <_scanf_float+0x82>
 8016da8:	9b04      	ldr	r3, [sp, #16]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d0e4      	beq.n	8016d78 <_scanf_float+0x378>
 8016dae:	9905      	ldr	r1, [sp, #20]
 8016db0:	230a      	movs	r3, #10
 8016db2:	462a      	mov	r2, r5
 8016db4:	3101      	adds	r1, #1
 8016db6:	4640      	mov	r0, r8
 8016db8:	f000 ff7a 	bl	8017cb0 <_strtol_r>
 8016dbc:	9b04      	ldr	r3, [sp, #16]
 8016dbe:	9e05      	ldr	r6, [sp, #20]
 8016dc0:	1ac2      	subs	r2, r0, r3
 8016dc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016dc6:	429e      	cmp	r6, r3
 8016dc8:	bf28      	it	cs
 8016dca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016dce:	4912      	ldr	r1, [pc, #72]	; (8016e18 <_scanf_float+0x418>)
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	f000 f82b 	bl	8016e2c <siprintf>
 8016dd6:	e7cf      	b.n	8016d78 <_scanf_float+0x378>
 8016dd8:	f011 0f04 	tst.w	r1, #4
 8016ddc:	9903      	ldr	r1, [sp, #12]
 8016dde:	600a      	str	r2, [r1, #0]
 8016de0:	d1db      	bne.n	8016d9a <_scanf_float+0x39a>
 8016de2:	f8d3 8000 	ldr.w	r8, [r3]
 8016de6:	ee10 2a10 	vmov	r2, s0
 8016dea:	ee10 0a10 	vmov	r0, s0
 8016dee:	463b      	mov	r3, r7
 8016df0:	4639      	mov	r1, r7
 8016df2:	f7e9 fe9b 	bl	8000b2c <__aeabi_dcmpun>
 8016df6:	b128      	cbz	r0, 8016e04 <_scanf_float+0x404>
 8016df8:	4808      	ldr	r0, [pc, #32]	; (8016e1c <_scanf_float+0x41c>)
 8016dfa:	f000 f811 	bl	8016e20 <nanf>
 8016dfe:	ed88 0a00 	vstr	s0, [r8]
 8016e02:	e7cd      	b.n	8016da0 <_scanf_float+0x3a0>
 8016e04:	4630      	mov	r0, r6
 8016e06:	4639      	mov	r1, r7
 8016e08:	f7e9 feee 	bl	8000be8 <__aeabi_d2f>
 8016e0c:	f8c8 0000 	str.w	r0, [r8]
 8016e10:	e7c6      	b.n	8016da0 <_scanf_float+0x3a0>
 8016e12:	2500      	movs	r5, #0
 8016e14:	e635      	b.n	8016a82 <_scanf_float+0x82>
 8016e16:	bf00      	nop
 8016e18:	0801cac2 	.word	0x0801cac2
 8016e1c:	0801cef3 	.word	0x0801cef3

08016e20 <nanf>:
 8016e20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016e28 <nanf+0x8>
 8016e24:	4770      	bx	lr
 8016e26:	bf00      	nop
 8016e28:	7fc00000 	.word	0x7fc00000

08016e2c <siprintf>:
 8016e2c:	b40e      	push	{r1, r2, r3}
 8016e2e:	b500      	push	{lr}
 8016e30:	b09c      	sub	sp, #112	; 0x70
 8016e32:	ab1d      	add	r3, sp, #116	; 0x74
 8016e34:	9002      	str	r0, [sp, #8]
 8016e36:	9006      	str	r0, [sp, #24]
 8016e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e3c:	4809      	ldr	r0, [pc, #36]	; (8016e64 <siprintf+0x38>)
 8016e3e:	9107      	str	r1, [sp, #28]
 8016e40:	9104      	str	r1, [sp, #16]
 8016e42:	4909      	ldr	r1, [pc, #36]	; (8016e68 <siprintf+0x3c>)
 8016e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e48:	9105      	str	r1, [sp, #20]
 8016e4a:	6800      	ldr	r0, [r0, #0]
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	a902      	add	r1, sp, #8
 8016e50:	f002 ff3a 	bl	8019cc8 <_svfiprintf_r>
 8016e54:	9b02      	ldr	r3, [sp, #8]
 8016e56:	2200      	movs	r2, #0
 8016e58:	701a      	strb	r2, [r3, #0]
 8016e5a:	b01c      	add	sp, #112	; 0x70
 8016e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e60:	b003      	add	sp, #12
 8016e62:	4770      	bx	lr
 8016e64:	20000278 	.word	0x20000278
 8016e68:	ffff0208 	.word	0xffff0208

08016e6c <siscanf>:
 8016e6c:	b40e      	push	{r1, r2, r3}
 8016e6e:	b510      	push	{r4, lr}
 8016e70:	b09f      	sub	sp, #124	; 0x7c
 8016e72:	ac21      	add	r4, sp, #132	; 0x84
 8016e74:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016e78:	f854 2b04 	ldr.w	r2, [r4], #4
 8016e7c:	9201      	str	r2, [sp, #4]
 8016e7e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016e82:	9004      	str	r0, [sp, #16]
 8016e84:	9008      	str	r0, [sp, #32]
 8016e86:	f7e9 f9a3 	bl	80001d0 <strlen>
 8016e8a:	4b0c      	ldr	r3, [pc, #48]	; (8016ebc <siscanf+0x50>)
 8016e8c:	9005      	str	r0, [sp, #20]
 8016e8e:	9009      	str	r0, [sp, #36]	; 0x24
 8016e90:	930d      	str	r3, [sp, #52]	; 0x34
 8016e92:	480b      	ldr	r0, [pc, #44]	; (8016ec0 <siscanf+0x54>)
 8016e94:	9a01      	ldr	r2, [sp, #4]
 8016e96:	6800      	ldr	r0, [r0, #0]
 8016e98:	9403      	str	r4, [sp, #12]
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8016e9e:	9316      	str	r3, [sp, #88]	; 0x58
 8016ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ea4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016ea8:	a904      	add	r1, sp, #16
 8016eaa:	4623      	mov	r3, r4
 8016eac:	f003 f866 	bl	8019f7c <__ssvfiscanf_r>
 8016eb0:	b01f      	add	sp, #124	; 0x7c
 8016eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016eb6:	b003      	add	sp, #12
 8016eb8:	4770      	bx	lr
 8016eba:	bf00      	nop
 8016ebc:	08016ee7 	.word	0x08016ee7
 8016ec0:	20000278 	.word	0x20000278

08016ec4 <__sread>:
 8016ec4:	b510      	push	{r4, lr}
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ecc:	f003 fb1a 	bl	801a504 <_read_r>
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	bfab      	itete	ge
 8016ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8016ed8:	181b      	addge	r3, r3, r0
 8016eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ede:	bfac      	ite	ge
 8016ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ee2:	81a3      	strhlt	r3, [r4, #12]
 8016ee4:	bd10      	pop	{r4, pc}

08016ee6 <__seofread>:
 8016ee6:	2000      	movs	r0, #0
 8016ee8:	4770      	bx	lr

08016eea <__swrite>:
 8016eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eee:	461f      	mov	r7, r3
 8016ef0:	898b      	ldrh	r3, [r1, #12]
 8016ef2:	05db      	lsls	r3, r3, #23
 8016ef4:	4605      	mov	r5, r0
 8016ef6:	460c      	mov	r4, r1
 8016ef8:	4616      	mov	r6, r2
 8016efa:	d505      	bpl.n	8016f08 <__swrite+0x1e>
 8016efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f00:	2302      	movs	r3, #2
 8016f02:	2200      	movs	r2, #0
 8016f04:	f002 f8e4 	bl	80190d0 <_lseek_r>
 8016f08:	89a3      	ldrh	r3, [r4, #12]
 8016f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f12:	81a3      	strh	r3, [r4, #12]
 8016f14:	4632      	mov	r2, r6
 8016f16:	463b      	mov	r3, r7
 8016f18:	4628      	mov	r0, r5
 8016f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f1e:	f000 bec9 	b.w	8017cb4 <_write_r>

08016f22 <__sseek>:
 8016f22:	b510      	push	{r4, lr}
 8016f24:	460c      	mov	r4, r1
 8016f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f2a:	f002 f8d1 	bl	80190d0 <_lseek_r>
 8016f2e:	1c43      	adds	r3, r0, #1
 8016f30:	89a3      	ldrh	r3, [r4, #12]
 8016f32:	bf15      	itete	ne
 8016f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f3e:	81a3      	strheq	r3, [r4, #12]
 8016f40:	bf18      	it	ne
 8016f42:	81a3      	strhne	r3, [r4, #12]
 8016f44:	bd10      	pop	{r4, pc}

08016f46 <__sclose>:
 8016f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f4a:	f000 bec5 	b.w	8017cd8 <_close_r>

08016f4e <sulp>:
 8016f4e:	b570      	push	{r4, r5, r6, lr}
 8016f50:	4604      	mov	r4, r0
 8016f52:	460d      	mov	r5, r1
 8016f54:	ec45 4b10 	vmov	d0, r4, r5
 8016f58:	4616      	mov	r6, r2
 8016f5a:	f002 fc51 	bl	8019800 <__ulp>
 8016f5e:	ec51 0b10 	vmov	r0, r1, d0
 8016f62:	b17e      	cbz	r6, 8016f84 <sulp+0x36>
 8016f64:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016f68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	dd09      	ble.n	8016f84 <sulp+0x36>
 8016f70:	051b      	lsls	r3, r3, #20
 8016f72:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016f76:	2400      	movs	r4, #0
 8016f78:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016f7c:	4622      	mov	r2, r4
 8016f7e:	462b      	mov	r3, r5
 8016f80:	f7e9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8016f84:	bd70      	pop	{r4, r5, r6, pc}
	...

08016f88 <_strtod_l>:
 8016f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f8c:	b0a3      	sub	sp, #140	; 0x8c
 8016f8e:	461f      	mov	r7, r3
 8016f90:	2300      	movs	r3, #0
 8016f92:	931e      	str	r3, [sp, #120]	; 0x78
 8016f94:	4ba4      	ldr	r3, [pc, #656]	; (8017228 <_strtod_l+0x2a0>)
 8016f96:	9219      	str	r2, [sp, #100]	; 0x64
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	9307      	str	r3, [sp, #28]
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	4688      	mov	r8, r1
 8016fa2:	f7e9 f915 	bl	80001d0 <strlen>
 8016fa6:	f04f 0a00 	mov.w	sl, #0
 8016faa:	4605      	mov	r5, r0
 8016fac:	f04f 0b00 	mov.w	fp, #0
 8016fb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fb6:	781a      	ldrb	r2, [r3, #0]
 8016fb8:	2a2b      	cmp	r2, #43	; 0x2b
 8016fba:	d04c      	beq.n	8017056 <_strtod_l+0xce>
 8016fbc:	d839      	bhi.n	8017032 <_strtod_l+0xaa>
 8016fbe:	2a0d      	cmp	r2, #13
 8016fc0:	d832      	bhi.n	8017028 <_strtod_l+0xa0>
 8016fc2:	2a08      	cmp	r2, #8
 8016fc4:	d832      	bhi.n	801702c <_strtod_l+0xa4>
 8016fc6:	2a00      	cmp	r2, #0
 8016fc8:	d03c      	beq.n	8017044 <_strtod_l+0xbc>
 8016fca:	2300      	movs	r3, #0
 8016fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8016fce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016fd0:	7833      	ldrb	r3, [r6, #0]
 8016fd2:	2b30      	cmp	r3, #48	; 0x30
 8016fd4:	f040 80b4 	bne.w	8017140 <_strtod_l+0x1b8>
 8016fd8:	7873      	ldrb	r3, [r6, #1]
 8016fda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016fde:	2b58      	cmp	r3, #88	; 0x58
 8016fe0:	d16c      	bne.n	80170bc <_strtod_l+0x134>
 8016fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fe4:	9301      	str	r3, [sp, #4]
 8016fe6:	ab1e      	add	r3, sp, #120	; 0x78
 8016fe8:	9702      	str	r7, [sp, #8]
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	4a8f      	ldr	r2, [pc, #572]	; (801722c <_strtod_l+0x2a4>)
 8016fee:	ab1f      	add	r3, sp, #124	; 0x7c
 8016ff0:	a91d      	add	r1, sp, #116	; 0x74
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f001 fd60 	bl	8018ab8 <__gethex>
 8016ff8:	f010 0707 	ands.w	r7, r0, #7
 8016ffc:	4605      	mov	r5, r0
 8016ffe:	d005      	beq.n	801700c <_strtod_l+0x84>
 8017000:	2f06      	cmp	r7, #6
 8017002:	d12a      	bne.n	801705a <_strtod_l+0xd2>
 8017004:	3601      	adds	r6, #1
 8017006:	2300      	movs	r3, #0
 8017008:	961d      	str	r6, [sp, #116]	; 0x74
 801700a:	930e      	str	r3, [sp, #56]	; 0x38
 801700c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801700e:	2b00      	cmp	r3, #0
 8017010:	f040 8596 	bne.w	8017b40 <_strtod_l+0xbb8>
 8017014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017016:	b1db      	cbz	r3, 8017050 <_strtod_l+0xc8>
 8017018:	4652      	mov	r2, sl
 801701a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801701e:	ec43 2b10 	vmov	d0, r2, r3
 8017022:	b023      	add	sp, #140	; 0x8c
 8017024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017028:	2a20      	cmp	r2, #32
 801702a:	d1ce      	bne.n	8016fca <_strtod_l+0x42>
 801702c:	3301      	adds	r3, #1
 801702e:	931d      	str	r3, [sp, #116]	; 0x74
 8017030:	e7c0      	b.n	8016fb4 <_strtod_l+0x2c>
 8017032:	2a2d      	cmp	r2, #45	; 0x2d
 8017034:	d1c9      	bne.n	8016fca <_strtod_l+0x42>
 8017036:	2201      	movs	r2, #1
 8017038:	920e      	str	r2, [sp, #56]	; 0x38
 801703a:	1c5a      	adds	r2, r3, #1
 801703c:	921d      	str	r2, [sp, #116]	; 0x74
 801703e:	785b      	ldrb	r3, [r3, #1]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d1c4      	bne.n	8016fce <_strtod_l+0x46>
 8017044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017046:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801704a:	2b00      	cmp	r3, #0
 801704c:	f040 8576 	bne.w	8017b3c <_strtod_l+0xbb4>
 8017050:	4652      	mov	r2, sl
 8017052:	465b      	mov	r3, fp
 8017054:	e7e3      	b.n	801701e <_strtod_l+0x96>
 8017056:	2200      	movs	r2, #0
 8017058:	e7ee      	b.n	8017038 <_strtod_l+0xb0>
 801705a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801705c:	b13a      	cbz	r2, 801706e <_strtod_l+0xe6>
 801705e:	2135      	movs	r1, #53	; 0x35
 8017060:	a820      	add	r0, sp, #128	; 0x80
 8017062:	f002 fcd8 	bl	8019a16 <__copybits>
 8017066:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017068:	4620      	mov	r0, r4
 801706a:	f002 f89d 	bl	80191a8 <_Bfree>
 801706e:	3f01      	subs	r7, #1
 8017070:	2f05      	cmp	r7, #5
 8017072:	d807      	bhi.n	8017084 <_strtod_l+0xfc>
 8017074:	e8df f007 	tbb	[pc, r7]
 8017078:	1d180b0e 	.word	0x1d180b0e
 801707c:	030e      	.short	0x030e
 801707e:	f04f 0b00 	mov.w	fp, #0
 8017082:	46da      	mov	sl, fp
 8017084:	0728      	lsls	r0, r5, #28
 8017086:	d5c1      	bpl.n	801700c <_strtod_l+0x84>
 8017088:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801708c:	e7be      	b.n	801700c <_strtod_l+0x84>
 801708e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8017092:	e7f7      	b.n	8017084 <_strtod_l+0xfc>
 8017094:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017098:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801709a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801709e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80170a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80170a6:	e7ed      	b.n	8017084 <_strtod_l+0xfc>
 80170a8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017230 <_strtod_l+0x2a8>
 80170ac:	f04f 0a00 	mov.w	sl, #0
 80170b0:	e7e8      	b.n	8017084 <_strtod_l+0xfc>
 80170b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80170b6:	f04f 3aff 	mov.w	sl, #4294967295
 80170ba:	e7e3      	b.n	8017084 <_strtod_l+0xfc>
 80170bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170be:	1c5a      	adds	r2, r3, #1
 80170c0:	921d      	str	r2, [sp, #116]	; 0x74
 80170c2:	785b      	ldrb	r3, [r3, #1]
 80170c4:	2b30      	cmp	r3, #48	; 0x30
 80170c6:	d0f9      	beq.n	80170bc <_strtod_l+0x134>
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d09f      	beq.n	801700c <_strtod_l+0x84>
 80170cc:	2301      	movs	r3, #1
 80170ce:	f04f 0900 	mov.w	r9, #0
 80170d2:	9304      	str	r3, [sp, #16]
 80170d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170d6:	930a      	str	r3, [sp, #40]	; 0x28
 80170d8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80170dc:	464f      	mov	r7, r9
 80170de:	220a      	movs	r2, #10
 80170e0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80170e2:	7806      	ldrb	r6, [r0, #0]
 80170e4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80170e8:	b2d9      	uxtb	r1, r3
 80170ea:	2909      	cmp	r1, #9
 80170ec:	d92a      	bls.n	8017144 <_strtod_l+0x1bc>
 80170ee:	9907      	ldr	r1, [sp, #28]
 80170f0:	462a      	mov	r2, r5
 80170f2:	f003 fa6b 	bl	801a5cc <strncmp>
 80170f6:	b398      	cbz	r0, 8017160 <_strtod_l+0x1d8>
 80170f8:	2000      	movs	r0, #0
 80170fa:	4633      	mov	r3, r6
 80170fc:	463d      	mov	r5, r7
 80170fe:	9007      	str	r0, [sp, #28]
 8017100:	4602      	mov	r2, r0
 8017102:	2b65      	cmp	r3, #101	; 0x65
 8017104:	d001      	beq.n	801710a <_strtod_l+0x182>
 8017106:	2b45      	cmp	r3, #69	; 0x45
 8017108:	d118      	bne.n	801713c <_strtod_l+0x1b4>
 801710a:	b91d      	cbnz	r5, 8017114 <_strtod_l+0x18c>
 801710c:	9b04      	ldr	r3, [sp, #16]
 801710e:	4303      	orrs	r3, r0
 8017110:	d098      	beq.n	8017044 <_strtod_l+0xbc>
 8017112:	2500      	movs	r5, #0
 8017114:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017118:	f108 0301 	add.w	r3, r8, #1
 801711c:	931d      	str	r3, [sp, #116]	; 0x74
 801711e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017122:	2b2b      	cmp	r3, #43	; 0x2b
 8017124:	d075      	beq.n	8017212 <_strtod_l+0x28a>
 8017126:	2b2d      	cmp	r3, #45	; 0x2d
 8017128:	d07b      	beq.n	8017222 <_strtod_l+0x29a>
 801712a:	f04f 0c00 	mov.w	ip, #0
 801712e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017132:	2909      	cmp	r1, #9
 8017134:	f240 8082 	bls.w	801723c <_strtod_l+0x2b4>
 8017138:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801713c:	2600      	movs	r6, #0
 801713e:	e09d      	b.n	801727c <_strtod_l+0x2f4>
 8017140:	2300      	movs	r3, #0
 8017142:	e7c4      	b.n	80170ce <_strtod_l+0x146>
 8017144:	2f08      	cmp	r7, #8
 8017146:	bfd8      	it	le
 8017148:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801714a:	f100 0001 	add.w	r0, r0, #1
 801714e:	bfda      	itte	le
 8017150:	fb02 3301 	mlale	r3, r2, r1, r3
 8017154:	9309      	strle	r3, [sp, #36]	; 0x24
 8017156:	fb02 3909 	mlagt	r9, r2, r9, r3
 801715a:	3701      	adds	r7, #1
 801715c:	901d      	str	r0, [sp, #116]	; 0x74
 801715e:	e7bf      	b.n	80170e0 <_strtod_l+0x158>
 8017160:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017162:	195a      	adds	r2, r3, r5
 8017164:	921d      	str	r2, [sp, #116]	; 0x74
 8017166:	5d5b      	ldrb	r3, [r3, r5]
 8017168:	2f00      	cmp	r7, #0
 801716a:	d037      	beq.n	80171dc <_strtod_l+0x254>
 801716c:	9007      	str	r0, [sp, #28]
 801716e:	463d      	mov	r5, r7
 8017170:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017174:	2a09      	cmp	r2, #9
 8017176:	d912      	bls.n	801719e <_strtod_l+0x216>
 8017178:	2201      	movs	r2, #1
 801717a:	e7c2      	b.n	8017102 <_strtod_l+0x17a>
 801717c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801717e:	1c5a      	adds	r2, r3, #1
 8017180:	921d      	str	r2, [sp, #116]	; 0x74
 8017182:	785b      	ldrb	r3, [r3, #1]
 8017184:	3001      	adds	r0, #1
 8017186:	2b30      	cmp	r3, #48	; 0x30
 8017188:	d0f8      	beq.n	801717c <_strtod_l+0x1f4>
 801718a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801718e:	2a08      	cmp	r2, #8
 8017190:	f200 84db 	bhi.w	8017b4a <_strtod_l+0xbc2>
 8017194:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017196:	9007      	str	r0, [sp, #28]
 8017198:	2000      	movs	r0, #0
 801719a:	920a      	str	r2, [sp, #40]	; 0x28
 801719c:	4605      	mov	r5, r0
 801719e:	3b30      	subs	r3, #48	; 0x30
 80171a0:	f100 0201 	add.w	r2, r0, #1
 80171a4:	d014      	beq.n	80171d0 <_strtod_l+0x248>
 80171a6:	9907      	ldr	r1, [sp, #28]
 80171a8:	4411      	add	r1, r2
 80171aa:	9107      	str	r1, [sp, #28]
 80171ac:	462a      	mov	r2, r5
 80171ae:	eb00 0e05 	add.w	lr, r0, r5
 80171b2:	210a      	movs	r1, #10
 80171b4:	4572      	cmp	r2, lr
 80171b6:	d113      	bne.n	80171e0 <_strtod_l+0x258>
 80171b8:	182a      	adds	r2, r5, r0
 80171ba:	2a08      	cmp	r2, #8
 80171bc:	f105 0501 	add.w	r5, r5, #1
 80171c0:	4405      	add	r5, r0
 80171c2:	dc1c      	bgt.n	80171fe <_strtod_l+0x276>
 80171c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80171c6:	220a      	movs	r2, #10
 80171c8:	fb02 3301 	mla	r3, r2, r1, r3
 80171cc:	9309      	str	r3, [sp, #36]	; 0x24
 80171ce:	2200      	movs	r2, #0
 80171d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80171d2:	1c59      	adds	r1, r3, #1
 80171d4:	911d      	str	r1, [sp, #116]	; 0x74
 80171d6:	785b      	ldrb	r3, [r3, #1]
 80171d8:	4610      	mov	r0, r2
 80171da:	e7c9      	b.n	8017170 <_strtod_l+0x1e8>
 80171dc:	4638      	mov	r0, r7
 80171de:	e7d2      	b.n	8017186 <_strtod_l+0x1fe>
 80171e0:	2a08      	cmp	r2, #8
 80171e2:	dc04      	bgt.n	80171ee <_strtod_l+0x266>
 80171e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80171e6:	434e      	muls	r6, r1
 80171e8:	9609      	str	r6, [sp, #36]	; 0x24
 80171ea:	3201      	adds	r2, #1
 80171ec:	e7e2      	b.n	80171b4 <_strtod_l+0x22c>
 80171ee:	f102 0c01 	add.w	ip, r2, #1
 80171f2:	f1bc 0f10 	cmp.w	ip, #16
 80171f6:	bfd8      	it	le
 80171f8:	fb01 f909 	mulle.w	r9, r1, r9
 80171fc:	e7f5      	b.n	80171ea <_strtod_l+0x262>
 80171fe:	2d10      	cmp	r5, #16
 8017200:	bfdc      	itt	le
 8017202:	220a      	movle	r2, #10
 8017204:	fb02 3909 	mlale	r9, r2, r9, r3
 8017208:	e7e1      	b.n	80171ce <_strtod_l+0x246>
 801720a:	2300      	movs	r3, #0
 801720c:	9307      	str	r3, [sp, #28]
 801720e:	2201      	movs	r2, #1
 8017210:	e77c      	b.n	801710c <_strtod_l+0x184>
 8017212:	f04f 0c00 	mov.w	ip, #0
 8017216:	f108 0302 	add.w	r3, r8, #2
 801721a:	931d      	str	r3, [sp, #116]	; 0x74
 801721c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017220:	e785      	b.n	801712e <_strtod_l+0x1a6>
 8017222:	f04f 0c01 	mov.w	ip, #1
 8017226:	e7f6      	b.n	8017216 <_strtod_l+0x28e>
 8017228:	0801cd18 	.word	0x0801cd18
 801722c:	0801cac8 	.word	0x0801cac8
 8017230:	7ff00000 	.word	0x7ff00000
 8017234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017236:	1c59      	adds	r1, r3, #1
 8017238:	911d      	str	r1, [sp, #116]	; 0x74
 801723a:	785b      	ldrb	r3, [r3, #1]
 801723c:	2b30      	cmp	r3, #48	; 0x30
 801723e:	d0f9      	beq.n	8017234 <_strtod_l+0x2ac>
 8017240:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017244:	2908      	cmp	r1, #8
 8017246:	f63f af79 	bhi.w	801713c <_strtod_l+0x1b4>
 801724a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801724e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017250:	9308      	str	r3, [sp, #32]
 8017252:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017254:	1c59      	adds	r1, r3, #1
 8017256:	911d      	str	r1, [sp, #116]	; 0x74
 8017258:	785b      	ldrb	r3, [r3, #1]
 801725a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801725e:	2e09      	cmp	r6, #9
 8017260:	d937      	bls.n	80172d2 <_strtod_l+0x34a>
 8017262:	9e08      	ldr	r6, [sp, #32]
 8017264:	1b89      	subs	r1, r1, r6
 8017266:	2908      	cmp	r1, #8
 8017268:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801726c:	dc02      	bgt.n	8017274 <_strtod_l+0x2ec>
 801726e:	4576      	cmp	r6, lr
 8017270:	bfa8      	it	ge
 8017272:	4676      	movge	r6, lr
 8017274:	f1bc 0f00 	cmp.w	ip, #0
 8017278:	d000      	beq.n	801727c <_strtod_l+0x2f4>
 801727a:	4276      	negs	r6, r6
 801727c:	2d00      	cmp	r5, #0
 801727e:	d14f      	bne.n	8017320 <_strtod_l+0x398>
 8017280:	9904      	ldr	r1, [sp, #16]
 8017282:	4301      	orrs	r1, r0
 8017284:	f47f aec2 	bne.w	801700c <_strtod_l+0x84>
 8017288:	2a00      	cmp	r2, #0
 801728a:	f47f aedb 	bne.w	8017044 <_strtod_l+0xbc>
 801728e:	2b69      	cmp	r3, #105	; 0x69
 8017290:	d027      	beq.n	80172e2 <_strtod_l+0x35a>
 8017292:	dc24      	bgt.n	80172de <_strtod_l+0x356>
 8017294:	2b49      	cmp	r3, #73	; 0x49
 8017296:	d024      	beq.n	80172e2 <_strtod_l+0x35a>
 8017298:	2b4e      	cmp	r3, #78	; 0x4e
 801729a:	f47f aed3 	bne.w	8017044 <_strtod_l+0xbc>
 801729e:	499e      	ldr	r1, [pc, #632]	; (8017518 <_strtod_l+0x590>)
 80172a0:	a81d      	add	r0, sp, #116	; 0x74
 80172a2:	f001 fe61 	bl	8018f68 <__match>
 80172a6:	2800      	cmp	r0, #0
 80172a8:	f43f aecc 	beq.w	8017044 <_strtod_l+0xbc>
 80172ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	2b28      	cmp	r3, #40	; 0x28
 80172b2:	d12d      	bne.n	8017310 <_strtod_l+0x388>
 80172b4:	4999      	ldr	r1, [pc, #612]	; (801751c <_strtod_l+0x594>)
 80172b6:	aa20      	add	r2, sp, #128	; 0x80
 80172b8:	a81d      	add	r0, sp, #116	; 0x74
 80172ba:	f001 fe69 	bl	8018f90 <__hexnan>
 80172be:	2805      	cmp	r0, #5
 80172c0:	d126      	bne.n	8017310 <_strtod_l+0x388>
 80172c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80172c4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80172c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80172cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80172d0:	e69c      	b.n	801700c <_strtod_l+0x84>
 80172d2:	210a      	movs	r1, #10
 80172d4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80172d8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80172dc:	e7b9      	b.n	8017252 <_strtod_l+0x2ca>
 80172de:	2b6e      	cmp	r3, #110	; 0x6e
 80172e0:	e7db      	b.n	801729a <_strtod_l+0x312>
 80172e2:	498f      	ldr	r1, [pc, #572]	; (8017520 <_strtod_l+0x598>)
 80172e4:	a81d      	add	r0, sp, #116	; 0x74
 80172e6:	f001 fe3f 	bl	8018f68 <__match>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	f43f aeaa 	beq.w	8017044 <_strtod_l+0xbc>
 80172f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172f2:	498c      	ldr	r1, [pc, #560]	; (8017524 <_strtod_l+0x59c>)
 80172f4:	3b01      	subs	r3, #1
 80172f6:	a81d      	add	r0, sp, #116	; 0x74
 80172f8:	931d      	str	r3, [sp, #116]	; 0x74
 80172fa:	f001 fe35 	bl	8018f68 <__match>
 80172fe:	b910      	cbnz	r0, 8017306 <_strtod_l+0x37e>
 8017300:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017302:	3301      	adds	r3, #1
 8017304:	931d      	str	r3, [sp, #116]	; 0x74
 8017306:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017534 <_strtod_l+0x5ac>
 801730a:	f04f 0a00 	mov.w	sl, #0
 801730e:	e67d      	b.n	801700c <_strtod_l+0x84>
 8017310:	4885      	ldr	r0, [pc, #532]	; (8017528 <_strtod_l+0x5a0>)
 8017312:	f003 f909 	bl	801a528 <nan>
 8017316:	ed8d 0b04 	vstr	d0, [sp, #16]
 801731a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801731e:	e675      	b.n	801700c <_strtod_l+0x84>
 8017320:	9b07      	ldr	r3, [sp, #28]
 8017322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017324:	1af3      	subs	r3, r6, r3
 8017326:	2f00      	cmp	r7, #0
 8017328:	bf08      	it	eq
 801732a:	462f      	moveq	r7, r5
 801732c:	2d10      	cmp	r5, #16
 801732e:	9308      	str	r3, [sp, #32]
 8017330:	46a8      	mov	r8, r5
 8017332:	bfa8      	it	ge
 8017334:	f04f 0810 	movge.w	r8, #16
 8017338:	f7e9 f8e4 	bl	8000504 <__aeabi_ui2d>
 801733c:	2d09      	cmp	r5, #9
 801733e:	4682      	mov	sl, r0
 8017340:	468b      	mov	fp, r1
 8017342:	dd13      	ble.n	801736c <_strtod_l+0x3e4>
 8017344:	4b79      	ldr	r3, [pc, #484]	; (801752c <_strtod_l+0x5a4>)
 8017346:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801734a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801734e:	f7e9 f953 	bl	80005f8 <__aeabi_dmul>
 8017352:	4682      	mov	sl, r0
 8017354:	4648      	mov	r0, r9
 8017356:	468b      	mov	fp, r1
 8017358:	f7e9 f8d4 	bl	8000504 <__aeabi_ui2d>
 801735c:	4602      	mov	r2, r0
 801735e:	460b      	mov	r3, r1
 8017360:	4650      	mov	r0, sl
 8017362:	4659      	mov	r1, fp
 8017364:	f7e8 ff92 	bl	800028c <__adddf3>
 8017368:	4682      	mov	sl, r0
 801736a:	468b      	mov	fp, r1
 801736c:	2d0f      	cmp	r5, #15
 801736e:	dc38      	bgt.n	80173e2 <_strtod_l+0x45a>
 8017370:	9b08      	ldr	r3, [sp, #32]
 8017372:	2b00      	cmp	r3, #0
 8017374:	f43f ae4a 	beq.w	801700c <_strtod_l+0x84>
 8017378:	dd24      	ble.n	80173c4 <_strtod_l+0x43c>
 801737a:	2b16      	cmp	r3, #22
 801737c:	dc0b      	bgt.n	8017396 <_strtod_l+0x40e>
 801737e:	4d6b      	ldr	r5, [pc, #428]	; (801752c <_strtod_l+0x5a4>)
 8017380:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017384:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017388:	4652      	mov	r2, sl
 801738a:	465b      	mov	r3, fp
 801738c:	f7e9 f934 	bl	80005f8 <__aeabi_dmul>
 8017390:	4682      	mov	sl, r0
 8017392:	468b      	mov	fp, r1
 8017394:	e63a      	b.n	801700c <_strtod_l+0x84>
 8017396:	9a08      	ldr	r2, [sp, #32]
 8017398:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801739c:	4293      	cmp	r3, r2
 801739e:	db20      	blt.n	80173e2 <_strtod_l+0x45a>
 80173a0:	4c62      	ldr	r4, [pc, #392]	; (801752c <_strtod_l+0x5a4>)
 80173a2:	f1c5 050f 	rsb	r5, r5, #15
 80173a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80173aa:	4652      	mov	r2, sl
 80173ac:	465b      	mov	r3, fp
 80173ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173b2:	f7e9 f921 	bl	80005f8 <__aeabi_dmul>
 80173b6:	9b08      	ldr	r3, [sp, #32]
 80173b8:	1b5d      	subs	r5, r3, r5
 80173ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80173be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80173c2:	e7e3      	b.n	801738c <_strtod_l+0x404>
 80173c4:	9b08      	ldr	r3, [sp, #32]
 80173c6:	3316      	adds	r3, #22
 80173c8:	db0b      	blt.n	80173e2 <_strtod_l+0x45a>
 80173ca:	9b07      	ldr	r3, [sp, #28]
 80173cc:	4a57      	ldr	r2, [pc, #348]	; (801752c <_strtod_l+0x5a4>)
 80173ce:	1b9e      	subs	r6, r3, r6
 80173d0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80173d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80173d8:	4650      	mov	r0, sl
 80173da:	4659      	mov	r1, fp
 80173dc:	f7e9 fa36 	bl	800084c <__aeabi_ddiv>
 80173e0:	e7d6      	b.n	8017390 <_strtod_l+0x408>
 80173e2:	9b08      	ldr	r3, [sp, #32]
 80173e4:	eba5 0808 	sub.w	r8, r5, r8
 80173e8:	4498      	add	r8, r3
 80173ea:	f1b8 0f00 	cmp.w	r8, #0
 80173ee:	dd71      	ble.n	80174d4 <_strtod_l+0x54c>
 80173f0:	f018 030f 	ands.w	r3, r8, #15
 80173f4:	d00a      	beq.n	801740c <_strtod_l+0x484>
 80173f6:	494d      	ldr	r1, [pc, #308]	; (801752c <_strtod_l+0x5a4>)
 80173f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80173fc:	4652      	mov	r2, sl
 80173fe:	465b      	mov	r3, fp
 8017400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017404:	f7e9 f8f8 	bl	80005f8 <__aeabi_dmul>
 8017408:	4682      	mov	sl, r0
 801740a:	468b      	mov	fp, r1
 801740c:	f038 080f 	bics.w	r8, r8, #15
 8017410:	d04d      	beq.n	80174ae <_strtod_l+0x526>
 8017412:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017416:	dd22      	ble.n	801745e <_strtod_l+0x4d6>
 8017418:	2500      	movs	r5, #0
 801741a:	462e      	mov	r6, r5
 801741c:	9509      	str	r5, [sp, #36]	; 0x24
 801741e:	9507      	str	r5, [sp, #28]
 8017420:	2322      	movs	r3, #34	; 0x22
 8017422:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017534 <_strtod_l+0x5ac>
 8017426:	6023      	str	r3, [r4, #0]
 8017428:	f04f 0a00 	mov.w	sl, #0
 801742c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801742e:	2b00      	cmp	r3, #0
 8017430:	f43f adec 	beq.w	801700c <_strtod_l+0x84>
 8017434:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017436:	4620      	mov	r0, r4
 8017438:	f001 feb6 	bl	80191a8 <_Bfree>
 801743c:	9907      	ldr	r1, [sp, #28]
 801743e:	4620      	mov	r0, r4
 8017440:	f001 feb2 	bl	80191a8 <_Bfree>
 8017444:	4631      	mov	r1, r6
 8017446:	4620      	mov	r0, r4
 8017448:	f001 feae 	bl	80191a8 <_Bfree>
 801744c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801744e:	4620      	mov	r0, r4
 8017450:	f001 feaa 	bl	80191a8 <_Bfree>
 8017454:	4629      	mov	r1, r5
 8017456:	4620      	mov	r0, r4
 8017458:	f001 fea6 	bl	80191a8 <_Bfree>
 801745c:	e5d6      	b.n	801700c <_strtod_l+0x84>
 801745e:	2300      	movs	r3, #0
 8017460:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017464:	4650      	mov	r0, sl
 8017466:	4659      	mov	r1, fp
 8017468:	4699      	mov	r9, r3
 801746a:	f1b8 0f01 	cmp.w	r8, #1
 801746e:	dc21      	bgt.n	80174b4 <_strtod_l+0x52c>
 8017470:	b10b      	cbz	r3, 8017476 <_strtod_l+0x4ee>
 8017472:	4682      	mov	sl, r0
 8017474:	468b      	mov	fp, r1
 8017476:	4b2e      	ldr	r3, [pc, #184]	; (8017530 <_strtod_l+0x5a8>)
 8017478:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801747c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017480:	4652      	mov	r2, sl
 8017482:	465b      	mov	r3, fp
 8017484:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017488:	f7e9 f8b6 	bl	80005f8 <__aeabi_dmul>
 801748c:	4b29      	ldr	r3, [pc, #164]	; (8017534 <_strtod_l+0x5ac>)
 801748e:	460a      	mov	r2, r1
 8017490:	400b      	ands	r3, r1
 8017492:	4929      	ldr	r1, [pc, #164]	; (8017538 <_strtod_l+0x5b0>)
 8017494:	428b      	cmp	r3, r1
 8017496:	4682      	mov	sl, r0
 8017498:	d8be      	bhi.n	8017418 <_strtod_l+0x490>
 801749a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801749e:	428b      	cmp	r3, r1
 80174a0:	bf86      	itte	hi
 80174a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801753c <_strtod_l+0x5b4>
 80174a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80174aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80174ae:	2300      	movs	r3, #0
 80174b0:	9304      	str	r3, [sp, #16]
 80174b2:	e081      	b.n	80175b8 <_strtod_l+0x630>
 80174b4:	f018 0f01 	tst.w	r8, #1
 80174b8:	d007      	beq.n	80174ca <_strtod_l+0x542>
 80174ba:	4b1d      	ldr	r3, [pc, #116]	; (8017530 <_strtod_l+0x5a8>)
 80174bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80174c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c4:	f7e9 f898 	bl	80005f8 <__aeabi_dmul>
 80174c8:	2301      	movs	r3, #1
 80174ca:	f109 0901 	add.w	r9, r9, #1
 80174ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80174d2:	e7ca      	b.n	801746a <_strtod_l+0x4e2>
 80174d4:	d0eb      	beq.n	80174ae <_strtod_l+0x526>
 80174d6:	f1c8 0800 	rsb	r8, r8, #0
 80174da:	f018 020f 	ands.w	r2, r8, #15
 80174de:	d00a      	beq.n	80174f6 <_strtod_l+0x56e>
 80174e0:	4b12      	ldr	r3, [pc, #72]	; (801752c <_strtod_l+0x5a4>)
 80174e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80174e6:	4650      	mov	r0, sl
 80174e8:	4659      	mov	r1, fp
 80174ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ee:	f7e9 f9ad 	bl	800084c <__aeabi_ddiv>
 80174f2:	4682      	mov	sl, r0
 80174f4:	468b      	mov	fp, r1
 80174f6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80174fa:	d0d8      	beq.n	80174ae <_strtod_l+0x526>
 80174fc:	f1b8 0f1f 	cmp.w	r8, #31
 8017500:	dd1e      	ble.n	8017540 <_strtod_l+0x5b8>
 8017502:	2500      	movs	r5, #0
 8017504:	462e      	mov	r6, r5
 8017506:	9509      	str	r5, [sp, #36]	; 0x24
 8017508:	9507      	str	r5, [sp, #28]
 801750a:	2322      	movs	r3, #34	; 0x22
 801750c:	f04f 0a00 	mov.w	sl, #0
 8017510:	f04f 0b00 	mov.w	fp, #0
 8017514:	6023      	str	r3, [r4, #0]
 8017516:	e789      	b.n	801742c <_strtod_l+0x4a4>
 8017518:	0801ca9d 	.word	0x0801ca9d
 801751c:	0801cadc 	.word	0x0801cadc
 8017520:	0801ca95 	.word	0x0801ca95
 8017524:	0801cc1c 	.word	0x0801cc1c
 8017528:	0801cef3 	.word	0x0801cef3
 801752c:	0801cdb8 	.word	0x0801cdb8
 8017530:	0801cd90 	.word	0x0801cd90
 8017534:	7ff00000 	.word	0x7ff00000
 8017538:	7ca00000 	.word	0x7ca00000
 801753c:	7fefffff 	.word	0x7fefffff
 8017540:	f018 0310 	ands.w	r3, r8, #16
 8017544:	bf18      	it	ne
 8017546:	236a      	movne	r3, #106	; 0x6a
 8017548:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017900 <_strtod_l+0x978>
 801754c:	9304      	str	r3, [sp, #16]
 801754e:	4650      	mov	r0, sl
 8017550:	4659      	mov	r1, fp
 8017552:	2300      	movs	r3, #0
 8017554:	f018 0f01 	tst.w	r8, #1
 8017558:	d004      	beq.n	8017564 <_strtod_l+0x5dc>
 801755a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801755e:	f7e9 f84b 	bl	80005f8 <__aeabi_dmul>
 8017562:	2301      	movs	r3, #1
 8017564:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017568:	f109 0908 	add.w	r9, r9, #8
 801756c:	d1f2      	bne.n	8017554 <_strtod_l+0x5cc>
 801756e:	b10b      	cbz	r3, 8017574 <_strtod_l+0x5ec>
 8017570:	4682      	mov	sl, r0
 8017572:	468b      	mov	fp, r1
 8017574:	9b04      	ldr	r3, [sp, #16]
 8017576:	b1bb      	cbz	r3, 80175a8 <_strtod_l+0x620>
 8017578:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801757c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017580:	2b00      	cmp	r3, #0
 8017582:	4659      	mov	r1, fp
 8017584:	dd10      	ble.n	80175a8 <_strtod_l+0x620>
 8017586:	2b1f      	cmp	r3, #31
 8017588:	f340 8128 	ble.w	80177dc <_strtod_l+0x854>
 801758c:	2b34      	cmp	r3, #52	; 0x34
 801758e:	bfde      	ittt	le
 8017590:	3b20      	suble	r3, #32
 8017592:	f04f 32ff 	movle.w	r2, #4294967295
 8017596:	fa02 f303 	lslle.w	r3, r2, r3
 801759a:	f04f 0a00 	mov.w	sl, #0
 801759e:	bfcc      	ite	gt
 80175a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80175a4:	ea03 0b01 	andle.w	fp, r3, r1
 80175a8:	2200      	movs	r2, #0
 80175aa:	2300      	movs	r3, #0
 80175ac:	4650      	mov	r0, sl
 80175ae:	4659      	mov	r1, fp
 80175b0:	f7e9 fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d1a4      	bne.n	8017502 <_strtod_l+0x57a>
 80175b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ba:	9300      	str	r3, [sp, #0]
 80175bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80175be:	462b      	mov	r3, r5
 80175c0:	463a      	mov	r2, r7
 80175c2:	4620      	mov	r0, r4
 80175c4:	f001 fe5c 	bl	8019280 <__s2b>
 80175c8:	9009      	str	r0, [sp, #36]	; 0x24
 80175ca:	2800      	cmp	r0, #0
 80175cc:	f43f af24 	beq.w	8017418 <_strtod_l+0x490>
 80175d0:	9b07      	ldr	r3, [sp, #28]
 80175d2:	1b9e      	subs	r6, r3, r6
 80175d4:	9b08      	ldr	r3, [sp, #32]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	bfb4      	ite	lt
 80175da:	4633      	movlt	r3, r6
 80175dc:	2300      	movge	r3, #0
 80175de:	9310      	str	r3, [sp, #64]	; 0x40
 80175e0:	9b08      	ldr	r3, [sp, #32]
 80175e2:	2500      	movs	r5, #0
 80175e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175e8:	9318      	str	r3, [sp, #96]	; 0x60
 80175ea:	462e      	mov	r6, r5
 80175ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ee:	4620      	mov	r0, r4
 80175f0:	6859      	ldr	r1, [r3, #4]
 80175f2:	f001 fd99 	bl	8019128 <_Balloc>
 80175f6:	9007      	str	r0, [sp, #28]
 80175f8:	2800      	cmp	r0, #0
 80175fa:	f43f af11 	beq.w	8017420 <_strtod_l+0x498>
 80175fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017600:	691a      	ldr	r2, [r3, #16]
 8017602:	3202      	adds	r2, #2
 8017604:	f103 010c 	add.w	r1, r3, #12
 8017608:	0092      	lsls	r2, r2, #2
 801760a:	300c      	adds	r0, #12
 801760c:	f7fe fd78 	bl	8016100 <memcpy>
 8017610:	ec4b ab10 	vmov	d0, sl, fp
 8017614:	aa20      	add	r2, sp, #128	; 0x80
 8017616:	a91f      	add	r1, sp, #124	; 0x7c
 8017618:	4620      	mov	r0, r4
 801761a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801761e:	f002 f96b 	bl	80198f8 <__d2b>
 8017622:	901e      	str	r0, [sp, #120]	; 0x78
 8017624:	2800      	cmp	r0, #0
 8017626:	f43f aefb 	beq.w	8017420 <_strtod_l+0x498>
 801762a:	2101      	movs	r1, #1
 801762c:	4620      	mov	r0, r4
 801762e:	f001 fec1 	bl	80193b4 <__i2b>
 8017632:	4606      	mov	r6, r0
 8017634:	2800      	cmp	r0, #0
 8017636:	f43f aef3 	beq.w	8017420 <_strtod_l+0x498>
 801763a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801763c:	9904      	ldr	r1, [sp, #16]
 801763e:	2b00      	cmp	r3, #0
 8017640:	bfab      	itete	ge
 8017642:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017644:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017646:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017648:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801764c:	bfac      	ite	ge
 801764e:	eb03 0902 	addge.w	r9, r3, r2
 8017652:	1ad7      	sublt	r7, r2, r3
 8017654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017656:	eba3 0801 	sub.w	r8, r3, r1
 801765a:	4490      	add	r8, r2
 801765c:	4ba3      	ldr	r3, [pc, #652]	; (80178ec <_strtod_l+0x964>)
 801765e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017662:	4598      	cmp	r8, r3
 8017664:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017668:	f280 80cc 	bge.w	8017804 <_strtod_l+0x87c>
 801766c:	eba3 0308 	sub.w	r3, r3, r8
 8017670:	2b1f      	cmp	r3, #31
 8017672:	eba2 0203 	sub.w	r2, r2, r3
 8017676:	f04f 0101 	mov.w	r1, #1
 801767a:	f300 80b6 	bgt.w	80177ea <_strtod_l+0x862>
 801767e:	fa01 f303 	lsl.w	r3, r1, r3
 8017682:	9311      	str	r3, [sp, #68]	; 0x44
 8017684:	2300      	movs	r3, #0
 8017686:	930c      	str	r3, [sp, #48]	; 0x30
 8017688:	eb09 0802 	add.w	r8, r9, r2
 801768c:	9b04      	ldr	r3, [sp, #16]
 801768e:	45c1      	cmp	r9, r8
 8017690:	4417      	add	r7, r2
 8017692:	441f      	add	r7, r3
 8017694:	464b      	mov	r3, r9
 8017696:	bfa8      	it	ge
 8017698:	4643      	movge	r3, r8
 801769a:	42bb      	cmp	r3, r7
 801769c:	bfa8      	it	ge
 801769e:	463b      	movge	r3, r7
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	bfc2      	ittt	gt
 80176a4:	eba8 0803 	subgt.w	r8, r8, r3
 80176a8:	1aff      	subgt	r7, r7, r3
 80176aa:	eba9 0903 	subgt.w	r9, r9, r3
 80176ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	dd17      	ble.n	80176e4 <_strtod_l+0x75c>
 80176b4:	4631      	mov	r1, r6
 80176b6:	461a      	mov	r2, r3
 80176b8:	4620      	mov	r0, r4
 80176ba:	f001 ff37 	bl	801952c <__pow5mult>
 80176be:	4606      	mov	r6, r0
 80176c0:	2800      	cmp	r0, #0
 80176c2:	f43f aead 	beq.w	8017420 <_strtod_l+0x498>
 80176c6:	4601      	mov	r1, r0
 80176c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80176ca:	4620      	mov	r0, r4
 80176cc:	f001 fe88 	bl	80193e0 <__multiply>
 80176d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80176d2:	2800      	cmp	r0, #0
 80176d4:	f43f aea4 	beq.w	8017420 <_strtod_l+0x498>
 80176d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80176da:	4620      	mov	r0, r4
 80176dc:	f001 fd64 	bl	80191a8 <_Bfree>
 80176e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176e2:	931e      	str	r3, [sp, #120]	; 0x78
 80176e4:	f1b8 0f00 	cmp.w	r8, #0
 80176e8:	f300 8091 	bgt.w	801780e <_strtod_l+0x886>
 80176ec:	9b08      	ldr	r3, [sp, #32]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	dd08      	ble.n	8017704 <_strtod_l+0x77c>
 80176f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80176f4:	9907      	ldr	r1, [sp, #28]
 80176f6:	4620      	mov	r0, r4
 80176f8:	f001 ff18 	bl	801952c <__pow5mult>
 80176fc:	9007      	str	r0, [sp, #28]
 80176fe:	2800      	cmp	r0, #0
 8017700:	f43f ae8e 	beq.w	8017420 <_strtod_l+0x498>
 8017704:	2f00      	cmp	r7, #0
 8017706:	dd08      	ble.n	801771a <_strtod_l+0x792>
 8017708:	9907      	ldr	r1, [sp, #28]
 801770a:	463a      	mov	r2, r7
 801770c:	4620      	mov	r0, r4
 801770e:	f001 ff67 	bl	80195e0 <__lshift>
 8017712:	9007      	str	r0, [sp, #28]
 8017714:	2800      	cmp	r0, #0
 8017716:	f43f ae83 	beq.w	8017420 <_strtod_l+0x498>
 801771a:	f1b9 0f00 	cmp.w	r9, #0
 801771e:	dd08      	ble.n	8017732 <_strtod_l+0x7aa>
 8017720:	4631      	mov	r1, r6
 8017722:	464a      	mov	r2, r9
 8017724:	4620      	mov	r0, r4
 8017726:	f001 ff5b 	bl	80195e0 <__lshift>
 801772a:	4606      	mov	r6, r0
 801772c:	2800      	cmp	r0, #0
 801772e:	f43f ae77 	beq.w	8017420 <_strtod_l+0x498>
 8017732:	9a07      	ldr	r2, [sp, #28]
 8017734:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017736:	4620      	mov	r0, r4
 8017738:	f001 ffda 	bl	80196f0 <__mdiff>
 801773c:	4605      	mov	r5, r0
 801773e:	2800      	cmp	r0, #0
 8017740:	f43f ae6e 	beq.w	8017420 <_strtod_l+0x498>
 8017744:	68c3      	ldr	r3, [r0, #12]
 8017746:	930f      	str	r3, [sp, #60]	; 0x3c
 8017748:	2300      	movs	r3, #0
 801774a:	60c3      	str	r3, [r0, #12]
 801774c:	4631      	mov	r1, r6
 801774e:	f001 ffb3 	bl	80196b8 <__mcmp>
 8017752:	2800      	cmp	r0, #0
 8017754:	da65      	bge.n	8017822 <_strtod_l+0x89a>
 8017756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017758:	ea53 030a 	orrs.w	r3, r3, sl
 801775c:	f040 8087 	bne.w	801786e <_strtod_l+0x8e6>
 8017760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017764:	2b00      	cmp	r3, #0
 8017766:	f040 8082 	bne.w	801786e <_strtod_l+0x8e6>
 801776a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801776e:	0d1b      	lsrs	r3, r3, #20
 8017770:	051b      	lsls	r3, r3, #20
 8017772:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017776:	d97a      	bls.n	801786e <_strtod_l+0x8e6>
 8017778:	696b      	ldr	r3, [r5, #20]
 801777a:	b913      	cbnz	r3, 8017782 <_strtod_l+0x7fa>
 801777c:	692b      	ldr	r3, [r5, #16]
 801777e:	2b01      	cmp	r3, #1
 8017780:	dd75      	ble.n	801786e <_strtod_l+0x8e6>
 8017782:	4629      	mov	r1, r5
 8017784:	2201      	movs	r2, #1
 8017786:	4620      	mov	r0, r4
 8017788:	f001 ff2a 	bl	80195e0 <__lshift>
 801778c:	4631      	mov	r1, r6
 801778e:	4605      	mov	r5, r0
 8017790:	f001 ff92 	bl	80196b8 <__mcmp>
 8017794:	2800      	cmp	r0, #0
 8017796:	dd6a      	ble.n	801786e <_strtod_l+0x8e6>
 8017798:	9904      	ldr	r1, [sp, #16]
 801779a:	4a55      	ldr	r2, [pc, #340]	; (80178f0 <_strtod_l+0x968>)
 801779c:	465b      	mov	r3, fp
 801779e:	2900      	cmp	r1, #0
 80177a0:	f000 8085 	beq.w	80178ae <_strtod_l+0x926>
 80177a4:	ea02 010b 	and.w	r1, r2, fp
 80177a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80177ac:	dc7f      	bgt.n	80178ae <_strtod_l+0x926>
 80177ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80177b2:	f77f aeaa 	ble.w	801750a <_strtod_l+0x582>
 80177b6:	4a4f      	ldr	r2, [pc, #316]	; (80178f4 <_strtod_l+0x96c>)
 80177b8:	2300      	movs	r3, #0
 80177ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80177be:	4650      	mov	r0, sl
 80177c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80177c4:	4659      	mov	r1, fp
 80177c6:	f7e8 ff17 	bl	80005f8 <__aeabi_dmul>
 80177ca:	460b      	mov	r3, r1
 80177cc:	4303      	orrs	r3, r0
 80177ce:	bf08      	it	eq
 80177d0:	2322      	moveq	r3, #34	; 0x22
 80177d2:	4682      	mov	sl, r0
 80177d4:	468b      	mov	fp, r1
 80177d6:	bf08      	it	eq
 80177d8:	6023      	streq	r3, [r4, #0]
 80177da:	e62b      	b.n	8017434 <_strtod_l+0x4ac>
 80177dc:	f04f 32ff 	mov.w	r2, #4294967295
 80177e0:	fa02 f303 	lsl.w	r3, r2, r3
 80177e4:	ea03 0a0a 	and.w	sl, r3, sl
 80177e8:	e6de      	b.n	80175a8 <_strtod_l+0x620>
 80177ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80177ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80177f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80177f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80177fa:	fa01 f308 	lsl.w	r3, r1, r8
 80177fe:	930c      	str	r3, [sp, #48]	; 0x30
 8017800:	9111      	str	r1, [sp, #68]	; 0x44
 8017802:	e741      	b.n	8017688 <_strtod_l+0x700>
 8017804:	2300      	movs	r3, #0
 8017806:	930c      	str	r3, [sp, #48]	; 0x30
 8017808:	2301      	movs	r3, #1
 801780a:	9311      	str	r3, [sp, #68]	; 0x44
 801780c:	e73c      	b.n	8017688 <_strtod_l+0x700>
 801780e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017810:	4642      	mov	r2, r8
 8017812:	4620      	mov	r0, r4
 8017814:	f001 fee4 	bl	80195e0 <__lshift>
 8017818:	901e      	str	r0, [sp, #120]	; 0x78
 801781a:	2800      	cmp	r0, #0
 801781c:	f47f af66 	bne.w	80176ec <_strtod_l+0x764>
 8017820:	e5fe      	b.n	8017420 <_strtod_l+0x498>
 8017822:	465f      	mov	r7, fp
 8017824:	d16e      	bne.n	8017904 <_strtod_l+0x97c>
 8017826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017828:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801782c:	b342      	cbz	r2, 8017880 <_strtod_l+0x8f8>
 801782e:	4a32      	ldr	r2, [pc, #200]	; (80178f8 <_strtod_l+0x970>)
 8017830:	4293      	cmp	r3, r2
 8017832:	d128      	bne.n	8017886 <_strtod_l+0x8fe>
 8017834:	9b04      	ldr	r3, [sp, #16]
 8017836:	4650      	mov	r0, sl
 8017838:	b1eb      	cbz	r3, 8017876 <_strtod_l+0x8ee>
 801783a:	4a2d      	ldr	r2, [pc, #180]	; (80178f0 <_strtod_l+0x968>)
 801783c:	403a      	ands	r2, r7
 801783e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017842:	f04f 31ff 	mov.w	r1, #4294967295
 8017846:	d819      	bhi.n	801787c <_strtod_l+0x8f4>
 8017848:	0d12      	lsrs	r2, r2, #20
 801784a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801784e:	fa01 f303 	lsl.w	r3, r1, r3
 8017852:	4298      	cmp	r0, r3
 8017854:	d117      	bne.n	8017886 <_strtod_l+0x8fe>
 8017856:	4b29      	ldr	r3, [pc, #164]	; (80178fc <_strtod_l+0x974>)
 8017858:	429f      	cmp	r7, r3
 801785a:	d102      	bne.n	8017862 <_strtod_l+0x8da>
 801785c:	3001      	adds	r0, #1
 801785e:	f43f addf 	beq.w	8017420 <_strtod_l+0x498>
 8017862:	4b23      	ldr	r3, [pc, #140]	; (80178f0 <_strtod_l+0x968>)
 8017864:	403b      	ands	r3, r7
 8017866:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801786a:	f04f 0a00 	mov.w	sl, #0
 801786e:	9b04      	ldr	r3, [sp, #16]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d1a0      	bne.n	80177b6 <_strtod_l+0x82e>
 8017874:	e5de      	b.n	8017434 <_strtod_l+0x4ac>
 8017876:	f04f 33ff 	mov.w	r3, #4294967295
 801787a:	e7ea      	b.n	8017852 <_strtod_l+0x8ca>
 801787c:	460b      	mov	r3, r1
 801787e:	e7e8      	b.n	8017852 <_strtod_l+0x8ca>
 8017880:	ea53 030a 	orrs.w	r3, r3, sl
 8017884:	d088      	beq.n	8017798 <_strtod_l+0x810>
 8017886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017888:	b1db      	cbz	r3, 80178c2 <_strtod_l+0x93a>
 801788a:	423b      	tst	r3, r7
 801788c:	d0ef      	beq.n	801786e <_strtod_l+0x8e6>
 801788e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017890:	9a04      	ldr	r2, [sp, #16]
 8017892:	4650      	mov	r0, sl
 8017894:	4659      	mov	r1, fp
 8017896:	b1c3      	cbz	r3, 80178ca <_strtod_l+0x942>
 8017898:	f7ff fb59 	bl	8016f4e <sulp>
 801789c:	4602      	mov	r2, r0
 801789e:	460b      	mov	r3, r1
 80178a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80178a4:	f7e8 fcf2 	bl	800028c <__adddf3>
 80178a8:	4682      	mov	sl, r0
 80178aa:	468b      	mov	fp, r1
 80178ac:	e7df      	b.n	801786e <_strtod_l+0x8e6>
 80178ae:	4013      	ands	r3, r2
 80178b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80178b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80178b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80178bc:	f04f 3aff 	mov.w	sl, #4294967295
 80178c0:	e7d5      	b.n	801786e <_strtod_l+0x8e6>
 80178c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80178c4:	ea13 0f0a 	tst.w	r3, sl
 80178c8:	e7e0      	b.n	801788c <_strtod_l+0x904>
 80178ca:	f7ff fb40 	bl	8016f4e <sulp>
 80178ce:	4602      	mov	r2, r0
 80178d0:	460b      	mov	r3, r1
 80178d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80178d6:	f7e8 fcd7 	bl	8000288 <__aeabi_dsub>
 80178da:	2200      	movs	r2, #0
 80178dc:	2300      	movs	r3, #0
 80178de:	4682      	mov	sl, r0
 80178e0:	468b      	mov	fp, r1
 80178e2:	f7e9 f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80178e6:	2800      	cmp	r0, #0
 80178e8:	d0c1      	beq.n	801786e <_strtod_l+0x8e6>
 80178ea:	e60e      	b.n	801750a <_strtod_l+0x582>
 80178ec:	fffffc02 	.word	0xfffffc02
 80178f0:	7ff00000 	.word	0x7ff00000
 80178f4:	39500000 	.word	0x39500000
 80178f8:	000fffff 	.word	0x000fffff
 80178fc:	7fefffff 	.word	0x7fefffff
 8017900:	0801caf0 	.word	0x0801caf0
 8017904:	4631      	mov	r1, r6
 8017906:	4628      	mov	r0, r5
 8017908:	f002 f852 	bl	80199b0 <__ratio>
 801790c:	ec59 8b10 	vmov	r8, r9, d0
 8017910:	ee10 0a10 	vmov	r0, s0
 8017914:	2200      	movs	r2, #0
 8017916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801791a:	4649      	mov	r1, r9
 801791c:	f7e9 f8e8 	bl	8000af0 <__aeabi_dcmple>
 8017920:	2800      	cmp	r0, #0
 8017922:	d07c      	beq.n	8017a1e <_strtod_l+0xa96>
 8017924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017926:	2b00      	cmp	r3, #0
 8017928:	d04c      	beq.n	80179c4 <_strtod_l+0xa3c>
 801792a:	4b95      	ldr	r3, [pc, #596]	; (8017b80 <_strtod_l+0xbf8>)
 801792c:	2200      	movs	r2, #0
 801792e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017932:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017b80 <_strtod_l+0xbf8>
 8017936:	f04f 0800 	mov.w	r8, #0
 801793a:	4b92      	ldr	r3, [pc, #584]	; (8017b84 <_strtod_l+0xbfc>)
 801793c:	403b      	ands	r3, r7
 801793e:	9311      	str	r3, [sp, #68]	; 0x44
 8017940:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017942:	4b91      	ldr	r3, [pc, #580]	; (8017b88 <_strtod_l+0xc00>)
 8017944:	429a      	cmp	r2, r3
 8017946:	f040 80b2 	bne.w	8017aae <_strtod_l+0xb26>
 801794a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801794e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017952:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017956:	ec4b ab10 	vmov	d0, sl, fp
 801795a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801795e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017962:	f001 ff4d 	bl	8019800 <__ulp>
 8017966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801796a:	ec53 2b10 	vmov	r2, r3, d0
 801796e:	f7e8 fe43 	bl	80005f8 <__aeabi_dmul>
 8017972:	4652      	mov	r2, sl
 8017974:	465b      	mov	r3, fp
 8017976:	f7e8 fc89 	bl	800028c <__adddf3>
 801797a:	460b      	mov	r3, r1
 801797c:	4981      	ldr	r1, [pc, #516]	; (8017b84 <_strtod_l+0xbfc>)
 801797e:	4a83      	ldr	r2, [pc, #524]	; (8017b8c <_strtod_l+0xc04>)
 8017980:	4019      	ands	r1, r3
 8017982:	4291      	cmp	r1, r2
 8017984:	4682      	mov	sl, r0
 8017986:	d95e      	bls.n	8017a46 <_strtod_l+0xabe>
 8017988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801798a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801798e:	4293      	cmp	r3, r2
 8017990:	d103      	bne.n	801799a <_strtod_l+0xa12>
 8017992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017994:	3301      	adds	r3, #1
 8017996:	f43f ad43 	beq.w	8017420 <_strtod_l+0x498>
 801799a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017b98 <_strtod_l+0xc10>
 801799e:	f04f 3aff 	mov.w	sl, #4294967295
 80179a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179a4:	4620      	mov	r0, r4
 80179a6:	f001 fbff 	bl	80191a8 <_Bfree>
 80179aa:	9907      	ldr	r1, [sp, #28]
 80179ac:	4620      	mov	r0, r4
 80179ae:	f001 fbfb 	bl	80191a8 <_Bfree>
 80179b2:	4631      	mov	r1, r6
 80179b4:	4620      	mov	r0, r4
 80179b6:	f001 fbf7 	bl	80191a8 <_Bfree>
 80179ba:	4629      	mov	r1, r5
 80179bc:	4620      	mov	r0, r4
 80179be:	f001 fbf3 	bl	80191a8 <_Bfree>
 80179c2:	e613      	b.n	80175ec <_strtod_l+0x664>
 80179c4:	f1ba 0f00 	cmp.w	sl, #0
 80179c8:	d11b      	bne.n	8017a02 <_strtod_l+0xa7a>
 80179ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80179ce:	b9f3      	cbnz	r3, 8017a0e <_strtod_l+0xa86>
 80179d0:	4b6b      	ldr	r3, [pc, #428]	; (8017b80 <_strtod_l+0xbf8>)
 80179d2:	2200      	movs	r2, #0
 80179d4:	4640      	mov	r0, r8
 80179d6:	4649      	mov	r1, r9
 80179d8:	f7e9 f880 	bl	8000adc <__aeabi_dcmplt>
 80179dc:	b9d0      	cbnz	r0, 8017a14 <_strtod_l+0xa8c>
 80179de:	4640      	mov	r0, r8
 80179e0:	4649      	mov	r1, r9
 80179e2:	4b6b      	ldr	r3, [pc, #428]	; (8017b90 <_strtod_l+0xc08>)
 80179e4:	2200      	movs	r2, #0
 80179e6:	f7e8 fe07 	bl	80005f8 <__aeabi_dmul>
 80179ea:	4680      	mov	r8, r0
 80179ec:	4689      	mov	r9, r1
 80179ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80179f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80179f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80179f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80179fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017a00:	e79b      	b.n	801793a <_strtod_l+0x9b2>
 8017a02:	f1ba 0f01 	cmp.w	sl, #1
 8017a06:	d102      	bne.n	8017a0e <_strtod_l+0xa86>
 8017a08:	2f00      	cmp	r7, #0
 8017a0a:	f43f ad7e 	beq.w	801750a <_strtod_l+0x582>
 8017a0e:	4b61      	ldr	r3, [pc, #388]	; (8017b94 <_strtod_l+0xc0c>)
 8017a10:	2200      	movs	r2, #0
 8017a12:	e78c      	b.n	801792e <_strtod_l+0x9a6>
 8017a14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017b90 <_strtod_l+0xc08>
 8017a18:	f04f 0800 	mov.w	r8, #0
 8017a1c:	e7e7      	b.n	80179ee <_strtod_l+0xa66>
 8017a1e:	4b5c      	ldr	r3, [pc, #368]	; (8017b90 <_strtod_l+0xc08>)
 8017a20:	4640      	mov	r0, r8
 8017a22:	4649      	mov	r1, r9
 8017a24:	2200      	movs	r2, #0
 8017a26:	f7e8 fde7 	bl	80005f8 <__aeabi_dmul>
 8017a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a2c:	4680      	mov	r8, r0
 8017a2e:	4689      	mov	r9, r1
 8017a30:	b933      	cbnz	r3, 8017a40 <_strtod_l+0xab8>
 8017a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a36:	9012      	str	r0, [sp, #72]	; 0x48
 8017a38:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017a3e:	e7dd      	b.n	80179fc <_strtod_l+0xa74>
 8017a40:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017a44:	e7f9      	b.n	8017a3a <_strtod_l+0xab2>
 8017a46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017a4a:	9b04      	ldr	r3, [sp, #16]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d1a8      	bne.n	80179a2 <_strtod_l+0xa1a>
 8017a50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017a54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017a56:	0d1b      	lsrs	r3, r3, #20
 8017a58:	051b      	lsls	r3, r3, #20
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d1a1      	bne.n	80179a2 <_strtod_l+0xa1a>
 8017a5e:	4640      	mov	r0, r8
 8017a60:	4649      	mov	r1, r9
 8017a62:	f7e9 f929 	bl	8000cb8 <__aeabi_d2lz>
 8017a66:	f7e8 fd99 	bl	800059c <__aeabi_l2d>
 8017a6a:	4602      	mov	r2, r0
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	4640      	mov	r0, r8
 8017a70:	4649      	mov	r1, r9
 8017a72:	f7e8 fc09 	bl	8000288 <__aeabi_dsub>
 8017a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017a7c:	ea43 030a 	orr.w	r3, r3, sl
 8017a80:	4313      	orrs	r3, r2
 8017a82:	4680      	mov	r8, r0
 8017a84:	4689      	mov	r9, r1
 8017a86:	d053      	beq.n	8017b30 <_strtod_l+0xba8>
 8017a88:	a335      	add	r3, pc, #212	; (adr r3, 8017b60 <_strtod_l+0xbd8>)
 8017a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a8e:	f7e9 f825 	bl	8000adc <__aeabi_dcmplt>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	f47f acce 	bne.w	8017434 <_strtod_l+0x4ac>
 8017a98:	a333      	add	r3, pc, #204	; (adr r3, 8017b68 <_strtod_l+0xbe0>)
 8017a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a9e:	4640      	mov	r0, r8
 8017aa0:	4649      	mov	r1, r9
 8017aa2:	f7e9 f839 	bl	8000b18 <__aeabi_dcmpgt>
 8017aa6:	2800      	cmp	r0, #0
 8017aa8:	f43f af7b 	beq.w	80179a2 <_strtod_l+0xa1a>
 8017aac:	e4c2      	b.n	8017434 <_strtod_l+0x4ac>
 8017aae:	9b04      	ldr	r3, [sp, #16]
 8017ab0:	b333      	cbz	r3, 8017b00 <_strtod_l+0xb78>
 8017ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ab4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017ab8:	d822      	bhi.n	8017b00 <_strtod_l+0xb78>
 8017aba:	a32d      	add	r3, pc, #180	; (adr r3, 8017b70 <_strtod_l+0xbe8>)
 8017abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ac0:	4640      	mov	r0, r8
 8017ac2:	4649      	mov	r1, r9
 8017ac4:	f7e9 f814 	bl	8000af0 <__aeabi_dcmple>
 8017ac8:	b1a0      	cbz	r0, 8017af4 <_strtod_l+0xb6c>
 8017aca:	4649      	mov	r1, r9
 8017acc:	4640      	mov	r0, r8
 8017ace:	f7e9 f86b 	bl	8000ba8 <__aeabi_d2uiz>
 8017ad2:	2801      	cmp	r0, #1
 8017ad4:	bf38      	it	cc
 8017ad6:	2001      	movcc	r0, #1
 8017ad8:	f7e8 fd14 	bl	8000504 <__aeabi_ui2d>
 8017adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ade:	4680      	mov	r8, r0
 8017ae0:	4689      	mov	r9, r1
 8017ae2:	bb13      	cbnz	r3, 8017b2a <_strtod_l+0xba2>
 8017ae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ae8:	9014      	str	r0, [sp, #80]	; 0x50
 8017aea:	9315      	str	r3, [sp, #84]	; 0x54
 8017aec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017af0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017af4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017af6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017af8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017afc:	1a9b      	subs	r3, r3, r2
 8017afe:	930d      	str	r3, [sp, #52]	; 0x34
 8017b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b04:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017b08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b0c:	f001 fe78 	bl	8019800 <__ulp>
 8017b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b14:	ec53 2b10 	vmov	r2, r3, d0
 8017b18:	f7e8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8017b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017b20:	f7e8 fbb4 	bl	800028c <__adddf3>
 8017b24:	4682      	mov	sl, r0
 8017b26:	468b      	mov	fp, r1
 8017b28:	e78f      	b.n	8017a4a <_strtod_l+0xac2>
 8017b2a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8017b2e:	e7dd      	b.n	8017aec <_strtod_l+0xb64>
 8017b30:	a311      	add	r3, pc, #68	; (adr r3, 8017b78 <_strtod_l+0xbf0>)
 8017b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b36:	f7e8 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8017b3a:	e7b4      	b.n	8017aa6 <_strtod_l+0xb1e>
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	930e      	str	r3, [sp, #56]	; 0x38
 8017b40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017b42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b44:	6013      	str	r3, [r2, #0]
 8017b46:	f7ff ba65 	b.w	8017014 <_strtod_l+0x8c>
 8017b4a:	2b65      	cmp	r3, #101	; 0x65
 8017b4c:	f43f ab5d 	beq.w	801720a <_strtod_l+0x282>
 8017b50:	2b45      	cmp	r3, #69	; 0x45
 8017b52:	f43f ab5a 	beq.w	801720a <_strtod_l+0x282>
 8017b56:	2201      	movs	r2, #1
 8017b58:	f7ff bb92 	b.w	8017280 <_strtod_l+0x2f8>
 8017b5c:	f3af 8000 	nop.w
 8017b60:	94a03595 	.word	0x94a03595
 8017b64:	3fdfffff 	.word	0x3fdfffff
 8017b68:	35afe535 	.word	0x35afe535
 8017b6c:	3fe00000 	.word	0x3fe00000
 8017b70:	ffc00000 	.word	0xffc00000
 8017b74:	41dfffff 	.word	0x41dfffff
 8017b78:	94a03595 	.word	0x94a03595
 8017b7c:	3fcfffff 	.word	0x3fcfffff
 8017b80:	3ff00000 	.word	0x3ff00000
 8017b84:	7ff00000 	.word	0x7ff00000
 8017b88:	7fe00000 	.word	0x7fe00000
 8017b8c:	7c9fffff 	.word	0x7c9fffff
 8017b90:	3fe00000 	.word	0x3fe00000
 8017b94:	bff00000 	.word	0xbff00000
 8017b98:	7fefffff 	.word	0x7fefffff

08017b9c <_strtod_r>:
 8017b9c:	4b01      	ldr	r3, [pc, #4]	; (8017ba4 <_strtod_r+0x8>)
 8017b9e:	f7ff b9f3 	b.w	8016f88 <_strtod_l>
 8017ba2:	bf00      	nop
 8017ba4:	200002e0 	.word	0x200002e0

08017ba8 <_strtol_l.isra.0>:
 8017ba8:	2b01      	cmp	r3, #1
 8017baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bae:	d001      	beq.n	8017bb4 <_strtol_l.isra.0+0xc>
 8017bb0:	2b24      	cmp	r3, #36	; 0x24
 8017bb2:	d906      	bls.n	8017bc2 <_strtol_l.isra.0+0x1a>
 8017bb4:	f7fe fa7a 	bl	80160ac <__errno>
 8017bb8:	2316      	movs	r3, #22
 8017bba:	6003      	str	r3, [r0, #0]
 8017bbc:	2000      	movs	r0, #0
 8017bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bc2:	4f3a      	ldr	r7, [pc, #232]	; (8017cac <_strtol_l.isra.0+0x104>)
 8017bc4:	468e      	mov	lr, r1
 8017bc6:	4676      	mov	r6, lr
 8017bc8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017bcc:	5de5      	ldrb	r5, [r4, r7]
 8017bce:	f015 0508 	ands.w	r5, r5, #8
 8017bd2:	d1f8      	bne.n	8017bc6 <_strtol_l.isra.0+0x1e>
 8017bd4:	2c2d      	cmp	r4, #45	; 0x2d
 8017bd6:	d134      	bne.n	8017c42 <_strtol_l.isra.0+0x9a>
 8017bd8:	f89e 4000 	ldrb.w	r4, [lr]
 8017bdc:	f04f 0801 	mov.w	r8, #1
 8017be0:	f106 0e02 	add.w	lr, r6, #2
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d05c      	beq.n	8017ca2 <_strtol_l.isra.0+0xfa>
 8017be8:	2b10      	cmp	r3, #16
 8017bea:	d10c      	bne.n	8017c06 <_strtol_l.isra.0+0x5e>
 8017bec:	2c30      	cmp	r4, #48	; 0x30
 8017bee:	d10a      	bne.n	8017c06 <_strtol_l.isra.0+0x5e>
 8017bf0:	f89e 4000 	ldrb.w	r4, [lr]
 8017bf4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017bf8:	2c58      	cmp	r4, #88	; 0x58
 8017bfa:	d14d      	bne.n	8017c98 <_strtol_l.isra.0+0xf0>
 8017bfc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017c00:	2310      	movs	r3, #16
 8017c02:	f10e 0e02 	add.w	lr, lr, #2
 8017c06:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8017c0a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017c0e:	2600      	movs	r6, #0
 8017c10:	fbbc f9f3 	udiv	r9, ip, r3
 8017c14:	4635      	mov	r5, r6
 8017c16:	fb03 ca19 	mls	sl, r3, r9, ip
 8017c1a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017c1e:	2f09      	cmp	r7, #9
 8017c20:	d818      	bhi.n	8017c54 <_strtol_l.isra.0+0xac>
 8017c22:	463c      	mov	r4, r7
 8017c24:	42a3      	cmp	r3, r4
 8017c26:	dd24      	ble.n	8017c72 <_strtol_l.isra.0+0xca>
 8017c28:	2e00      	cmp	r6, #0
 8017c2a:	db1f      	blt.n	8017c6c <_strtol_l.isra.0+0xc4>
 8017c2c:	45a9      	cmp	r9, r5
 8017c2e:	d31d      	bcc.n	8017c6c <_strtol_l.isra.0+0xc4>
 8017c30:	d101      	bne.n	8017c36 <_strtol_l.isra.0+0x8e>
 8017c32:	45a2      	cmp	sl, r4
 8017c34:	db1a      	blt.n	8017c6c <_strtol_l.isra.0+0xc4>
 8017c36:	fb05 4503 	mla	r5, r5, r3, r4
 8017c3a:	2601      	movs	r6, #1
 8017c3c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017c40:	e7eb      	b.n	8017c1a <_strtol_l.isra.0+0x72>
 8017c42:	2c2b      	cmp	r4, #43	; 0x2b
 8017c44:	bf08      	it	eq
 8017c46:	f89e 4000 	ldrbeq.w	r4, [lr]
 8017c4a:	46a8      	mov	r8, r5
 8017c4c:	bf08      	it	eq
 8017c4e:	f106 0e02 	addeq.w	lr, r6, #2
 8017c52:	e7c7      	b.n	8017be4 <_strtol_l.isra.0+0x3c>
 8017c54:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017c58:	2f19      	cmp	r7, #25
 8017c5a:	d801      	bhi.n	8017c60 <_strtol_l.isra.0+0xb8>
 8017c5c:	3c37      	subs	r4, #55	; 0x37
 8017c5e:	e7e1      	b.n	8017c24 <_strtol_l.isra.0+0x7c>
 8017c60:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017c64:	2f19      	cmp	r7, #25
 8017c66:	d804      	bhi.n	8017c72 <_strtol_l.isra.0+0xca>
 8017c68:	3c57      	subs	r4, #87	; 0x57
 8017c6a:	e7db      	b.n	8017c24 <_strtol_l.isra.0+0x7c>
 8017c6c:	f04f 36ff 	mov.w	r6, #4294967295
 8017c70:	e7e4      	b.n	8017c3c <_strtol_l.isra.0+0x94>
 8017c72:	2e00      	cmp	r6, #0
 8017c74:	da05      	bge.n	8017c82 <_strtol_l.isra.0+0xda>
 8017c76:	2322      	movs	r3, #34	; 0x22
 8017c78:	6003      	str	r3, [r0, #0]
 8017c7a:	4665      	mov	r5, ip
 8017c7c:	b942      	cbnz	r2, 8017c90 <_strtol_l.isra.0+0xe8>
 8017c7e:	4628      	mov	r0, r5
 8017c80:	e79d      	b.n	8017bbe <_strtol_l.isra.0+0x16>
 8017c82:	f1b8 0f00 	cmp.w	r8, #0
 8017c86:	d000      	beq.n	8017c8a <_strtol_l.isra.0+0xe2>
 8017c88:	426d      	negs	r5, r5
 8017c8a:	2a00      	cmp	r2, #0
 8017c8c:	d0f7      	beq.n	8017c7e <_strtol_l.isra.0+0xd6>
 8017c8e:	b10e      	cbz	r6, 8017c94 <_strtol_l.isra.0+0xec>
 8017c90:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017c94:	6011      	str	r1, [r2, #0]
 8017c96:	e7f2      	b.n	8017c7e <_strtol_l.isra.0+0xd6>
 8017c98:	2430      	movs	r4, #48	; 0x30
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d1b3      	bne.n	8017c06 <_strtol_l.isra.0+0x5e>
 8017c9e:	2308      	movs	r3, #8
 8017ca0:	e7b1      	b.n	8017c06 <_strtol_l.isra.0+0x5e>
 8017ca2:	2c30      	cmp	r4, #48	; 0x30
 8017ca4:	d0a4      	beq.n	8017bf0 <_strtol_l.isra.0+0x48>
 8017ca6:	230a      	movs	r3, #10
 8017ca8:	e7ad      	b.n	8017c06 <_strtol_l.isra.0+0x5e>
 8017caa:	bf00      	nop
 8017cac:	0801cb19 	.word	0x0801cb19

08017cb0 <_strtol_r>:
 8017cb0:	f7ff bf7a 	b.w	8017ba8 <_strtol_l.isra.0>

08017cb4 <_write_r>:
 8017cb4:	b538      	push	{r3, r4, r5, lr}
 8017cb6:	4d07      	ldr	r5, [pc, #28]	; (8017cd4 <_write_r+0x20>)
 8017cb8:	4604      	mov	r4, r0
 8017cba:	4608      	mov	r0, r1
 8017cbc:	4611      	mov	r1, r2
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	602a      	str	r2, [r5, #0]
 8017cc2:	461a      	mov	r2, r3
 8017cc4:	f7f3 fdaf 	bl	800b826 <_write>
 8017cc8:	1c43      	adds	r3, r0, #1
 8017cca:	d102      	bne.n	8017cd2 <_write_r+0x1e>
 8017ccc:	682b      	ldr	r3, [r5, #0]
 8017cce:	b103      	cbz	r3, 8017cd2 <_write_r+0x1e>
 8017cd0:	6023      	str	r3, [r4, #0]
 8017cd2:	bd38      	pop	{r3, r4, r5, pc}
 8017cd4:	20008138 	.word	0x20008138

08017cd8 <_close_r>:
 8017cd8:	b538      	push	{r3, r4, r5, lr}
 8017cda:	4d06      	ldr	r5, [pc, #24]	; (8017cf4 <_close_r+0x1c>)
 8017cdc:	2300      	movs	r3, #0
 8017cde:	4604      	mov	r4, r0
 8017ce0:	4608      	mov	r0, r1
 8017ce2:	602b      	str	r3, [r5, #0]
 8017ce4:	f7f3 fdbb 	bl	800b85e <_close>
 8017ce8:	1c43      	adds	r3, r0, #1
 8017cea:	d102      	bne.n	8017cf2 <_close_r+0x1a>
 8017cec:	682b      	ldr	r3, [r5, #0]
 8017cee:	b103      	cbz	r3, 8017cf2 <_close_r+0x1a>
 8017cf0:	6023      	str	r3, [r4, #0]
 8017cf2:	bd38      	pop	{r3, r4, r5, pc}
 8017cf4:	20008138 	.word	0x20008138

08017cf8 <quorem>:
 8017cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cfc:	6903      	ldr	r3, [r0, #16]
 8017cfe:	690c      	ldr	r4, [r1, #16]
 8017d00:	42a3      	cmp	r3, r4
 8017d02:	4607      	mov	r7, r0
 8017d04:	f2c0 8081 	blt.w	8017e0a <quorem+0x112>
 8017d08:	3c01      	subs	r4, #1
 8017d0a:	f101 0814 	add.w	r8, r1, #20
 8017d0e:	f100 0514 	add.w	r5, r0, #20
 8017d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d16:	9301      	str	r3, [sp, #4]
 8017d18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017d1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d20:	3301      	adds	r3, #1
 8017d22:	429a      	cmp	r2, r3
 8017d24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017d28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017d2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017d30:	d331      	bcc.n	8017d96 <quorem+0x9e>
 8017d32:	f04f 0e00 	mov.w	lr, #0
 8017d36:	4640      	mov	r0, r8
 8017d38:	46ac      	mov	ip, r5
 8017d3a:	46f2      	mov	sl, lr
 8017d3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8017d40:	b293      	uxth	r3, r2
 8017d42:	fb06 e303 	mla	r3, r6, r3, lr
 8017d46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017d4a:	b29b      	uxth	r3, r3
 8017d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8017d50:	0c12      	lsrs	r2, r2, #16
 8017d52:	f8dc a000 	ldr.w	sl, [ip]
 8017d56:	fb06 e202 	mla	r2, r6, r2, lr
 8017d5a:	fa13 f38a 	uxtah	r3, r3, sl
 8017d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017d62:	fa1f fa82 	uxth.w	sl, r2
 8017d66:	f8dc 2000 	ldr.w	r2, [ip]
 8017d6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017d6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d78:	4581      	cmp	r9, r0
 8017d7a:	f84c 3b04 	str.w	r3, [ip], #4
 8017d7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017d82:	d2db      	bcs.n	8017d3c <quorem+0x44>
 8017d84:	f855 300b 	ldr.w	r3, [r5, fp]
 8017d88:	b92b      	cbnz	r3, 8017d96 <quorem+0x9e>
 8017d8a:	9b01      	ldr	r3, [sp, #4]
 8017d8c:	3b04      	subs	r3, #4
 8017d8e:	429d      	cmp	r5, r3
 8017d90:	461a      	mov	r2, r3
 8017d92:	d32e      	bcc.n	8017df2 <quorem+0xfa>
 8017d94:	613c      	str	r4, [r7, #16]
 8017d96:	4638      	mov	r0, r7
 8017d98:	f001 fc8e 	bl	80196b8 <__mcmp>
 8017d9c:	2800      	cmp	r0, #0
 8017d9e:	db24      	blt.n	8017dea <quorem+0xf2>
 8017da0:	3601      	adds	r6, #1
 8017da2:	4628      	mov	r0, r5
 8017da4:	f04f 0c00 	mov.w	ip, #0
 8017da8:	f858 2b04 	ldr.w	r2, [r8], #4
 8017dac:	f8d0 e000 	ldr.w	lr, [r0]
 8017db0:	b293      	uxth	r3, r2
 8017db2:	ebac 0303 	sub.w	r3, ip, r3
 8017db6:	0c12      	lsrs	r2, r2, #16
 8017db8:	fa13 f38e 	uxtah	r3, r3, lr
 8017dbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017dca:	45c1      	cmp	r9, r8
 8017dcc:	f840 3b04 	str.w	r3, [r0], #4
 8017dd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017dd4:	d2e8      	bcs.n	8017da8 <quorem+0xb0>
 8017dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017dde:	b922      	cbnz	r2, 8017dea <quorem+0xf2>
 8017de0:	3b04      	subs	r3, #4
 8017de2:	429d      	cmp	r5, r3
 8017de4:	461a      	mov	r2, r3
 8017de6:	d30a      	bcc.n	8017dfe <quorem+0x106>
 8017de8:	613c      	str	r4, [r7, #16]
 8017dea:	4630      	mov	r0, r6
 8017dec:	b003      	add	sp, #12
 8017dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df2:	6812      	ldr	r2, [r2, #0]
 8017df4:	3b04      	subs	r3, #4
 8017df6:	2a00      	cmp	r2, #0
 8017df8:	d1cc      	bne.n	8017d94 <quorem+0x9c>
 8017dfa:	3c01      	subs	r4, #1
 8017dfc:	e7c7      	b.n	8017d8e <quorem+0x96>
 8017dfe:	6812      	ldr	r2, [r2, #0]
 8017e00:	3b04      	subs	r3, #4
 8017e02:	2a00      	cmp	r2, #0
 8017e04:	d1f0      	bne.n	8017de8 <quorem+0xf0>
 8017e06:	3c01      	subs	r4, #1
 8017e08:	e7eb      	b.n	8017de2 <quorem+0xea>
 8017e0a:	2000      	movs	r0, #0
 8017e0c:	e7ee      	b.n	8017dec <quorem+0xf4>
	...

08017e10 <_dtoa_r>:
 8017e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e14:	ed2d 8b02 	vpush	{d8}
 8017e18:	ec57 6b10 	vmov	r6, r7, d0
 8017e1c:	b095      	sub	sp, #84	; 0x54
 8017e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017e24:	9105      	str	r1, [sp, #20]
 8017e26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8017e2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e30:	b975      	cbnz	r5, 8017e50 <_dtoa_r+0x40>
 8017e32:	2010      	movs	r0, #16
 8017e34:	f001 f95e 	bl	80190f4 <malloc>
 8017e38:	4602      	mov	r2, r0
 8017e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8017e3c:	b920      	cbnz	r0, 8017e48 <_dtoa_r+0x38>
 8017e3e:	4bb2      	ldr	r3, [pc, #712]	; (8018108 <_dtoa_r+0x2f8>)
 8017e40:	21ea      	movs	r1, #234	; 0xea
 8017e42:	48b2      	ldr	r0, [pc, #712]	; (801810c <_dtoa_r+0x2fc>)
 8017e44:	f002 fc9a 	bl	801a77c <__assert_func>
 8017e48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017e4c:	6005      	str	r5, [r0, #0]
 8017e4e:	60c5      	str	r5, [r0, #12]
 8017e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e52:	6819      	ldr	r1, [r3, #0]
 8017e54:	b151      	cbz	r1, 8017e6c <_dtoa_r+0x5c>
 8017e56:	685a      	ldr	r2, [r3, #4]
 8017e58:	604a      	str	r2, [r1, #4]
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	4093      	lsls	r3, r2
 8017e5e:	608b      	str	r3, [r1, #8]
 8017e60:	4620      	mov	r0, r4
 8017e62:	f001 f9a1 	bl	80191a8 <_Bfree>
 8017e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e68:	2200      	movs	r2, #0
 8017e6a:	601a      	str	r2, [r3, #0]
 8017e6c:	1e3b      	subs	r3, r7, #0
 8017e6e:	bfb9      	ittee	lt
 8017e70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017e74:	9303      	strlt	r3, [sp, #12]
 8017e76:	2300      	movge	r3, #0
 8017e78:	f8c8 3000 	strge.w	r3, [r8]
 8017e7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017e80:	4ba3      	ldr	r3, [pc, #652]	; (8018110 <_dtoa_r+0x300>)
 8017e82:	bfbc      	itt	lt
 8017e84:	2201      	movlt	r2, #1
 8017e86:	f8c8 2000 	strlt.w	r2, [r8]
 8017e8a:	ea33 0309 	bics.w	r3, r3, r9
 8017e8e:	d11b      	bne.n	8017ec8 <_dtoa_r+0xb8>
 8017e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017e92:	f242 730f 	movw	r3, #9999	; 0x270f
 8017e96:	6013      	str	r3, [r2, #0]
 8017e98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e9c:	4333      	orrs	r3, r6
 8017e9e:	f000 857a 	beq.w	8018996 <_dtoa_r+0xb86>
 8017ea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ea4:	b963      	cbnz	r3, 8017ec0 <_dtoa_r+0xb0>
 8017ea6:	4b9b      	ldr	r3, [pc, #620]	; (8018114 <_dtoa_r+0x304>)
 8017ea8:	e024      	b.n	8017ef4 <_dtoa_r+0xe4>
 8017eaa:	4b9b      	ldr	r3, [pc, #620]	; (8018118 <_dtoa_r+0x308>)
 8017eac:	9300      	str	r3, [sp, #0]
 8017eae:	3308      	adds	r3, #8
 8017eb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017eb2:	6013      	str	r3, [r2, #0]
 8017eb4:	9800      	ldr	r0, [sp, #0]
 8017eb6:	b015      	add	sp, #84	; 0x54
 8017eb8:	ecbd 8b02 	vpop	{d8}
 8017ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ec0:	4b94      	ldr	r3, [pc, #592]	; (8018114 <_dtoa_r+0x304>)
 8017ec2:	9300      	str	r3, [sp, #0]
 8017ec4:	3303      	adds	r3, #3
 8017ec6:	e7f3      	b.n	8017eb0 <_dtoa_r+0xa0>
 8017ec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017ecc:	2200      	movs	r2, #0
 8017ece:	ec51 0b17 	vmov	r0, r1, d7
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017ed8:	f7e8 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8017edc:	4680      	mov	r8, r0
 8017ede:	b158      	cbz	r0, 8017ef8 <_dtoa_r+0xe8>
 8017ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	6013      	str	r3, [r2, #0]
 8017ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	f000 8551 	beq.w	8018990 <_dtoa_r+0xb80>
 8017eee:	488b      	ldr	r0, [pc, #556]	; (801811c <_dtoa_r+0x30c>)
 8017ef0:	6018      	str	r0, [r3, #0]
 8017ef2:	1e43      	subs	r3, r0, #1
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	e7dd      	b.n	8017eb4 <_dtoa_r+0xa4>
 8017ef8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017efc:	aa12      	add	r2, sp, #72	; 0x48
 8017efe:	a913      	add	r1, sp, #76	; 0x4c
 8017f00:	4620      	mov	r0, r4
 8017f02:	f001 fcf9 	bl	80198f8 <__d2b>
 8017f06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017f0a:	4683      	mov	fp, r0
 8017f0c:	2d00      	cmp	r5, #0
 8017f0e:	d07c      	beq.n	801800a <_dtoa_r+0x1fa>
 8017f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017f1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017f22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017f2a:	4b7d      	ldr	r3, [pc, #500]	; (8018120 <_dtoa_r+0x310>)
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	4630      	mov	r0, r6
 8017f30:	4639      	mov	r1, r7
 8017f32:	f7e8 f9a9 	bl	8000288 <__aeabi_dsub>
 8017f36:	a36e      	add	r3, pc, #440	; (adr r3, 80180f0 <_dtoa_r+0x2e0>)
 8017f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f3c:	f7e8 fb5c 	bl	80005f8 <__aeabi_dmul>
 8017f40:	a36d      	add	r3, pc, #436	; (adr r3, 80180f8 <_dtoa_r+0x2e8>)
 8017f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f46:	f7e8 f9a1 	bl	800028c <__adddf3>
 8017f4a:	4606      	mov	r6, r0
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	460f      	mov	r7, r1
 8017f50:	f7e8 fae8 	bl	8000524 <__aeabi_i2d>
 8017f54:	a36a      	add	r3, pc, #424	; (adr r3, 8018100 <_dtoa_r+0x2f0>)
 8017f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f5a:	f7e8 fb4d 	bl	80005f8 <__aeabi_dmul>
 8017f5e:	4602      	mov	r2, r0
 8017f60:	460b      	mov	r3, r1
 8017f62:	4630      	mov	r0, r6
 8017f64:	4639      	mov	r1, r7
 8017f66:	f7e8 f991 	bl	800028c <__adddf3>
 8017f6a:	4606      	mov	r6, r0
 8017f6c:	460f      	mov	r7, r1
 8017f6e:	f7e8 fdf3 	bl	8000b58 <__aeabi_d2iz>
 8017f72:	2200      	movs	r2, #0
 8017f74:	4682      	mov	sl, r0
 8017f76:	2300      	movs	r3, #0
 8017f78:	4630      	mov	r0, r6
 8017f7a:	4639      	mov	r1, r7
 8017f7c:	f7e8 fdae 	bl	8000adc <__aeabi_dcmplt>
 8017f80:	b148      	cbz	r0, 8017f96 <_dtoa_r+0x186>
 8017f82:	4650      	mov	r0, sl
 8017f84:	f7e8 face 	bl	8000524 <__aeabi_i2d>
 8017f88:	4632      	mov	r2, r6
 8017f8a:	463b      	mov	r3, r7
 8017f8c:	f7e8 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f90:	b908      	cbnz	r0, 8017f96 <_dtoa_r+0x186>
 8017f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f96:	f1ba 0f16 	cmp.w	sl, #22
 8017f9a:	d854      	bhi.n	8018046 <_dtoa_r+0x236>
 8017f9c:	4b61      	ldr	r3, [pc, #388]	; (8018124 <_dtoa_r+0x314>)
 8017f9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017faa:	f7e8 fd97 	bl	8000adc <__aeabi_dcmplt>
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d04b      	beq.n	801804a <_dtoa_r+0x23a>
 8017fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	930e      	str	r3, [sp, #56]	; 0x38
 8017fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017fbc:	1b5d      	subs	r5, r3, r5
 8017fbe:	1e6b      	subs	r3, r5, #1
 8017fc0:	9304      	str	r3, [sp, #16]
 8017fc2:	bf43      	ittte	mi
 8017fc4:	2300      	movmi	r3, #0
 8017fc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8017fca:	9304      	strmi	r3, [sp, #16]
 8017fcc:	f04f 0800 	movpl.w	r8, #0
 8017fd0:	f1ba 0f00 	cmp.w	sl, #0
 8017fd4:	db3b      	blt.n	801804e <_dtoa_r+0x23e>
 8017fd6:	9b04      	ldr	r3, [sp, #16]
 8017fd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017fdc:	4453      	add	r3, sl
 8017fde:	9304      	str	r3, [sp, #16]
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	9306      	str	r3, [sp, #24]
 8017fe4:	9b05      	ldr	r3, [sp, #20]
 8017fe6:	2b09      	cmp	r3, #9
 8017fe8:	d869      	bhi.n	80180be <_dtoa_r+0x2ae>
 8017fea:	2b05      	cmp	r3, #5
 8017fec:	bfc4      	itt	gt
 8017fee:	3b04      	subgt	r3, #4
 8017ff0:	9305      	strgt	r3, [sp, #20]
 8017ff2:	9b05      	ldr	r3, [sp, #20]
 8017ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8017ff8:	bfcc      	ite	gt
 8017ffa:	2500      	movgt	r5, #0
 8017ffc:	2501      	movle	r5, #1
 8017ffe:	2b03      	cmp	r3, #3
 8018000:	d869      	bhi.n	80180d6 <_dtoa_r+0x2c6>
 8018002:	e8df f003 	tbb	[pc, r3]
 8018006:	4e2c      	.short	0x4e2c
 8018008:	5a4c      	.short	0x5a4c
 801800a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801800e:	441d      	add	r5, r3
 8018010:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018014:	2b20      	cmp	r3, #32
 8018016:	bfc1      	itttt	gt
 8018018:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801801c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018020:	fa09 f303 	lslgt.w	r3, r9, r3
 8018024:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018028:	bfda      	itte	le
 801802a:	f1c3 0320 	rsble	r3, r3, #32
 801802e:	fa06 f003 	lslle.w	r0, r6, r3
 8018032:	4318      	orrgt	r0, r3
 8018034:	f7e8 fa66 	bl	8000504 <__aeabi_ui2d>
 8018038:	2301      	movs	r3, #1
 801803a:	4606      	mov	r6, r0
 801803c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018040:	3d01      	subs	r5, #1
 8018042:	9310      	str	r3, [sp, #64]	; 0x40
 8018044:	e771      	b.n	8017f2a <_dtoa_r+0x11a>
 8018046:	2301      	movs	r3, #1
 8018048:	e7b6      	b.n	8017fb8 <_dtoa_r+0x1a8>
 801804a:	900e      	str	r0, [sp, #56]	; 0x38
 801804c:	e7b5      	b.n	8017fba <_dtoa_r+0x1aa>
 801804e:	f1ca 0300 	rsb	r3, sl, #0
 8018052:	9306      	str	r3, [sp, #24]
 8018054:	2300      	movs	r3, #0
 8018056:	eba8 080a 	sub.w	r8, r8, sl
 801805a:	930d      	str	r3, [sp, #52]	; 0x34
 801805c:	e7c2      	b.n	8017fe4 <_dtoa_r+0x1d4>
 801805e:	2300      	movs	r3, #0
 8018060:	9308      	str	r3, [sp, #32]
 8018062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018064:	2b00      	cmp	r3, #0
 8018066:	dc39      	bgt.n	80180dc <_dtoa_r+0x2cc>
 8018068:	f04f 0901 	mov.w	r9, #1
 801806c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018070:	464b      	mov	r3, r9
 8018072:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018076:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018078:	2200      	movs	r2, #0
 801807a:	6042      	str	r2, [r0, #4]
 801807c:	2204      	movs	r2, #4
 801807e:	f102 0614 	add.w	r6, r2, #20
 8018082:	429e      	cmp	r6, r3
 8018084:	6841      	ldr	r1, [r0, #4]
 8018086:	d92f      	bls.n	80180e8 <_dtoa_r+0x2d8>
 8018088:	4620      	mov	r0, r4
 801808a:	f001 f84d 	bl	8019128 <_Balloc>
 801808e:	9000      	str	r0, [sp, #0]
 8018090:	2800      	cmp	r0, #0
 8018092:	d14b      	bne.n	801812c <_dtoa_r+0x31c>
 8018094:	4b24      	ldr	r3, [pc, #144]	; (8018128 <_dtoa_r+0x318>)
 8018096:	4602      	mov	r2, r0
 8018098:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801809c:	e6d1      	b.n	8017e42 <_dtoa_r+0x32>
 801809e:	2301      	movs	r3, #1
 80180a0:	e7de      	b.n	8018060 <_dtoa_r+0x250>
 80180a2:	2300      	movs	r3, #0
 80180a4:	9308      	str	r3, [sp, #32]
 80180a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a8:	eb0a 0903 	add.w	r9, sl, r3
 80180ac:	f109 0301 	add.w	r3, r9, #1
 80180b0:	2b01      	cmp	r3, #1
 80180b2:	9301      	str	r3, [sp, #4]
 80180b4:	bfb8      	it	lt
 80180b6:	2301      	movlt	r3, #1
 80180b8:	e7dd      	b.n	8018076 <_dtoa_r+0x266>
 80180ba:	2301      	movs	r3, #1
 80180bc:	e7f2      	b.n	80180a4 <_dtoa_r+0x294>
 80180be:	2501      	movs	r5, #1
 80180c0:	2300      	movs	r3, #0
 80180c2:	9305      	str	r3, [sp, #20]
 80180c4:	9508      	str	r5, [sp, #32]
 80180c6:	f04f 39ff 	mov.w	r9, #4294967295
 80180ca:	2200      	movs	r2, #0
 80180cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80180d0:	2312      	movs	r3, #18
 80180d2:	9209      	str	r2, [sp, #36]	; 0x24
 80180d4:	e7cf      	b.n	8018076 <_dtoa_r+0x266>
 80180d6:	2301      	movs	r3, #1
 80180d8:	9308      	str	r3, [sp, #32]
 80180da:	e7f4      	b.n	80180c6 <_dtoa_r+0x2b6>
 80180dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80180e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80180e4:	464b      	mov	r3, r9
 80180e6:	e7c6      	b.n	8018076 <_dtoa_r+0x266>
 80180e8:	3101      	adds	r1, #1
 80180ea:	6041      	str	r1, [r0, #4]
 80180ec:	0052      	lsls	r2, r2, #1
 80180ee:	e7c6      	b.n	801807e <_dtoa_r+0x26e>
 80180f0:	636f4361 	.word	0x636f4361
 80180f4:	3fd287a7 	.word	0x3fd287a7
 80180f8:	8b60c8b3 	.word	0x8b60c8b3
 80180fc:	3fc68a28 	.word	0x3fc68a28
 8018100:	509f79fb 	.word	0x509f79fb
 8018104:	3fd34413 	.word	0x3fd34413
 8018108:	0801cc26 	.word	0x0801cc26
 801810c:	0801cc3d 	.word	0x0801cc3d
 8018110:	7ff00000 	.word	0x7ff00000
 8018114:	0801cc22 	.word	0x0801cc22
 8018118:	0801cc19 	.word	0x0801cc19
 801811c:	0801cea2 	.word	0x0801cea2
 8018120:	3ff80000 	.word	0x3ff80000
 8018124:	0801cdb8 	.word	0x0801cdb8
 8018128:	0801cc9c 	.word	0x0801cc9c
 801812c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801812e:	9a00      	ldr	r2, [sp, #0]
 8018130:	601a      	str	r2, [r3, #0]
 8018132:	9b01      	ldr	r3, [sp, #4]
 8018134:	2b0e      	cmp	r3, #14
 8018136:	f200 80ad 	bhi.w	8018294 <_dtoa_r+0x484>
 801813a:	2d00      	cmp	r5, #0
 801813c:	f000 80aa 	beq.w	8018294 <_dtoa_r+0x484>
 8018140:	f1ba 0f00 	cmp.w	sl, #0
 8018144:	dd36      	ble.n	80181b4 <_dtoa_r+0x3a4>
 8018146:	4ac3      	ldr	r2, [pc, #780]	; (8018454 <_dtoa_r+0x644>)
 8018148:	f00a 030f 	and.w	r3, sl, #15
 801814c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018150:	ed93 7b00 	vldr	d7, [r3]
 8018154:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018158:	ea4f 172a 	mov.w	r7, sl, asr #4
 801815c:	eeb0 8a47 	vmov.f32	s16, s14
 8018160:	eef0 8a67 	vmov.f32	s17, s15
 8018164:	d016      	beq.n	8018194 <_dtoa_r+0x384>
 8018166:	4bbc      	ldr	r3, [pc, #752]	; (8018458 <_dtoa_r+0x648>)
 8018168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801816c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018170:	f7e8 fb6c 	bl	800084c <__aeabi_ddiv>
 8018174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018178:	f007 070f 	and.w	r7, r7, #15
 801817c:	2503      	movs	r5, #3
 801817e:	4eb6      	ldr	r6, [pc, #728]	; (8018458 <_dtoa_r+0x648>)
 8018180:	b957      	cbnz	r7, 8018198 <_dtoa_r+0x388>
 8018182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018186:	ec53 2b18 	vmov	r2, r3, d8
 801818a:	f7e8 fb5f 	bl	800084c <__aeabi_ddiv>
 801818e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018192:	e029      	b.n	80181e8 <_dtoa_r+0x3d8>
 8018194:	2502      	movs	r5, #2
 8018196:	e7f2      	b.n	801817e <_dtoa_r+0x36e>
 8018198:	07f9      	lsls	r1, r7, #31
 801819a:	d508      	bpl.n	80181ae <_dtoa_r+0x39e>
 801819c:	ec51 0b18 	vmov	r0, r1, d8
 80181a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80181a4:	f7e8 fa28 	bl	80005f8 <__aeabi_dmul>
 80181a8:	ec41 0b18 	vmov	d8, r0, r1
 80181ac:	3501      	adds	r5, #1
 80181ae:	107f      	asrs	r7, r7, #1
 80181b0:	3608      	adds	r6, #8
 80181b2:	e7e5      	b.n	8018180 <_dtoa_r+0x370>
 80181b4:	f000 80a6 	beq.w	8018304 <_dtoa_r+0x4f4>
 80181b8:	f1ca 0600 	rsb	r6, sl, #0
 80181bc:	4ba5      	ldr	r3, [pc, #660]	; (8018454 <_dtoa_r+0x644>)
 80181be:	4fa6      	ldr	r7, [pc, #664]	; (8018458 <_dtoa_r+0x648>)
 80181c0:	f006 020f 	and.w	r2, r6, #15
 80181c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80181c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80181d0:	f7e8 fa12 	bl	80005f8 <__aeabi_dmul>
 80181d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181d8:	1136      	asrs	r6, r6, #4
 80181da:	2300      	movs	r3, #0
 80181dc:	2502      	movs	r5, #2
 80181de:	2e00      	cmp	r6, #0
 80181e0:	f040 8085 	bne.w	80182ee <_dtoa_r+0x4de>
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d1d2      	bne.n	801818e <_dtoa_r+0x37e>
 80181e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	f000 808c 	beq.w	8018308 <_dtoa_r+0x4f8>
 80181f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80181f4:	4b99      	ldr	r3, [pc, #612]	; (801845c <_dtoa_r+0x64c>)
 80181f6:	2200      	movs	r2, #0
 80181f8:	4630      	mov	r0, r6
 80181fa:	4639      	mov	r1, r7
 80181fc:	f7e8 fc6e 	bl	8000adc <__aeabi_dcmplt>
 8018200:	2800      	cmp	r0, #0
 8018202:	f000 8081 	beq.w	8018308 <_dtoa_r+0x4f8>
 8018206:	9b01      	ldr	r3, [sp, #4]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d07d      	beq.n	8018308 <_dtoa_r+0x4f8>
 801820c:	f1b9 0f00 	cmp.w	r9, #0
 8018210:	dd3c      	ble.n	801828c <_dtoa_r+0x47c>
 8018212:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018216:	9307      	str	r3, [sp, #28]
 8018218:	2200      	movs	r2, #0
 801821a:	4b91      	ldr	r3, [pc, #580]	; (8018460 <_dtoa_r+0x650>)
 801821c:	4630      	mov	r0, r6
 801821e:	4639      	mov	r1, r7
 8018220:	f7e8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8018224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018228:	3501      	adds	r5, #1
 801822a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801822e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018232:	4628      	mov	r0, r5
 8018234:	f7e8 f976 	bl	8000524 <__aeabi_i2d>
 8018238:	4632      	mov	r2, r6
 801823a:	463b      	mov	r3, r7
 801823c:	f7e8 f9dc 	bl	80005f8 <__aeabi_dmul>
 8018240:	4b88      	ldr	r3, [pc, #544]	; (8018464 <_dtoa_r+0x654>)
 8018242:	2200      	movs	r2, #0
 8018244:	f7e8 f822 	bl	800028c <__adddf3>
 8018248:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801824c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018250:	9303      	str	r3, [sp, #12]
 8018252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018254:	2b00      	cmp	r3, #0
 8018256:	d15c      	bne.n	8018312 <_dtoa_r+0x502>
 8018258:	4b83      	ldr	r3, [pc, #524]	; (8018468 <_dtoa_r+0x658>)
 801825a:	2200      	movs	r2, #0
 801825c:	4630      	mov	r0, r6
 801825e:	4639      	mov	r1, r7
 8018260:	f7e8 f812 	bl	8000288 <__aeabi_dsub>
 8018264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018268:	4606      	mov	r6, r0
 801826a:	460f      	mov	r7, r1
 801826c:	f7e8 fc54 	bl	8000b18 <__aeabi_dcmpgt>
 8018270:	2800      	cmp	r0, #0
 8018272:	f040 8296 	bne.w	80187a2 <_dtoa_r+0x992>
 8018276:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801827a:	4630      	mov	r0, r6
 801827c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018280:	4639      	mov	r1, r7
 8018282:	f7e8 fc2b 	bl	8000adc <__aeabi_dcmplt>
 8018286:	2800      	cmp	r0, #0
 8018288:	f040 8288 	bne.w	801879c <_dtoa_r+0x98c>
 801828c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018290:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018296:	2b00      	cmp	r3, #0
 8018298:	f2c0 8158 	blt.w	801854c <_dtoa_r+0x73c>
 801829c:	f1ba 0f0e 	cmp.w	sl, #14
 80182a0:	f300 8154 	bgt.w	801854c <_dtoa_r+0x73c>
 80182a4:	4b6b      	ldr	r3, [pc, #428]	; (8018454 <_dtoa_r+0x644>)
 80182a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80182aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80182ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	f280 80e3 	bge.w	801847c <_dtoa_r+0x66c>
 80182b6:	9b01      	ldr	r3, [sp, #4]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	f300 80df 	bgt.w	801847c <_dtoa_r+0x66c>
 80182be:	f040 826d 	bne.w	801879c <_dtoa_r+0x98c>
 80182c2:	4b69      	ldr	r3, [pc, #420]	; (8018468 <_dtoa_r+0x658>)
 80182c4:	2200      	movs	r2, #0
 80182c6:	4640      	mov	r0, r8
 80182c8:	4649      	mov	r1, r9
 80182ca:	f7e8 f995 	bl	80005f8 <__aeabi_dmul>
 80182ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182d2:	f7e8 fc17 	bl	8000b04 <__aeabi_dcmpge>
 80182d6:	9e01      	ldr	r6, [sp, #4]
 80182d8:	4637      	mov	r7, r6
 80182da:	2800      	cmp	r0, #0
 80182dc:	f040 8243 	bne.w	8018766 <_dtoa_r+0x956>
 80182e0:	9d00      	ldr	r5, [sp, #0]
 80182e2:	2331      	movs	r3, #49	; 0x31
 80182e4:	f805 3b01 	strb.w	r3, [r5], #1
 80182e8:	f10a 0a01 	add.w	sl, sl, #1
 80182ec:	e23f      	b.n	801876e <_dtoa_r+0x95e>
 80182ee:	07f2      	lsls	r2, r6, #31
 80182f0:	d505      	bpl.n	80182fe <_dtoa_r+0x4ee>
 80182f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80182f6:	f7e8 f97f 	bl	80005f8 <__aeabi_dmul>
 80182fa:	3501      	adds	r5, #1
 80182fc:	2301      	movs	r3, #1
 80182fe:	1076      	asrs	r6, r6, #1
 8018300:	3708      	adds	r7, #8
 8018302:	e76c      	b.n	80181de <_dtoa_r+0x3ce>
 8018304:	2502      	movs	r5, #2
 8018306:	e76f      	b.n	80181e8 <_dtoa_r+0x3d8>
 8018308:	9b01      	ldr	r3, [sp, #4]
 801830a:	f8cd a01c 	str.w	sl, [sp, #28]
 801830e:	930c      	str	r3, [sp, #48]	; 0x30
 8018310:	e78d      	b.n	801822e <_dtoa_r+0x41e>
 8018312:	9900      	ldr	r1, [sp, #0]
 8018314:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018318:	4b4e      	ldr	r3, [pc, #312]	; (8018454 <_dtoa_r+0x644>)
 801831a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801831e:	4401      	add	r1, r0
 8018320:	9102      	str	r1, [sp, #8]
 8018322:	9908      	ldr	r1, [sp, #32]
 8018324:	eeb0 8a47 	vmov.f32	s16, s14
 8018328:	eef0 8a67 	vmov.f32	s17, s15
 801832c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018330:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018334:	2900      	cmp	r1, #0
 8018336:	d045      	beq.n	80183c4 <_dtoa_r+0x5b4>
 8018338:	494c      	ldr	r1, [pc, #304]	; (801846c <_dtoa_r+0x65c>)
 801833a:	2000      	movs	r0, #0
 801833c:	f7e8 fa86 	bl	800084c <__aeabi_ddiv>
 8018340:	ec53 2b18 	vmov	r2, r3, d8
 8018344:	f7e7 ffa0 	bl	8000288 <__aeabi_dsub>
 8018348:	9d00      	ldr	r5, [sp, #0]
 801834a:	ec41 0b18 	vmov	d8, r0, r1
 801834e:	4639      	mov	r1, r7
 8018350:	4630      	mov	r0, r6
 8018352:	f7e8 fc01 	bl	8000b58 <__aeabi_d2iz>
 8018356:	900c      	str	r0, [sp, #48]	; 0x30
 8018358:	f7e8 f8e4 	bl	8000524 <__aeabi_i2d>
 801835c:	4602      	mov	r2, r0
 801835e:	460b      	mov	r3, r1
 8018360:	4630      	mov	r0, r6
 8018362:	4639      	mov	r1, r7
 8018364:	f7e7 ff90 	bl	8000288 <__aeabi_dsub>
 8018368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801836a:	3330      	adds	r3, #48	; 0x30
 801836c:	f805 3b01 	strb.w	r3, [r5], #1
 8018370:	ec53 2b18 	vmov	r2, r3, d8
 8018374:	4606      	mov	r6, r0
 8018376:	460f      	mov	r7, r1
 8018378:	f7e8 fbb0 	bl	8000adc <__aeabi_dcmplt>
 801837c:	2800      	cmp	r0, #0
 801837e:	d165      	bne.n	801844c <_dtoa_r+0x63c>
 8018380:	4632      	mov	r2, r6
 8018382:	463b      	mov	r3, r7
 8018384:	4935      	ldr	r1, [pc, #212]	; (801845c <_dtoa_r+0x64c>)
 8018386:	2000      	movs	r0, #0
 8018388:	f7e7 ff7e 	bl	8000288 <__aeabi_dsub>
 801838c:	ec53 2b18 	vmov	r2, r3, d8
 8018390:	f7e8 fba4 	bl	8000adc <__aeabi_dcmplt>
 8018394:	2800      	cmp	r0, #0
 8018396:	f040 80b9 	bne.w	801850c <_dtoa_r+0x6fc>
 801839a:	9b02      	ldr	r3, [sp, #8]
 801839c:	429d      	cmp	r5, r3
 801839e:	f43f af75 	beq.w	801828c <_dtoa_r+0x47c>
 80183a2:	4b2f      	ldr	r3, [pc, #188]	; (8018460 <_dtoa_r+0x650>)
 80183a4:	ec51 0b18 	vmov	r0, r1, d8
 80183a8:	2200      	movs	r2, #0
 80183aa:	f7e8 f925 	bl	80005f8 <__aeabi_dmul>
 80183ae:	4b2c      	ldr	r3, [pc, #176]	; (8018460 <_dtoa_r+0x650>)
 80183b0:	ec41 0b18 	vmov	d8, r0, r1
 80183b4:	2200      	movs	r2, #0
 80183b6:	4630      	mov	r0, r6
 80183b8:	4639      	mov	r1, r7
 80183ba:	f7e8 f91d 	bl	80005f8 <__aeabi_dmul>
 80183be:	4606      	mov	r6, r0
 80183c0:	460f      	mov	r7, r1
 80183c2:	e7c4      	b.n	801834e <_dtoa_r+0x53e>
 80183c4:	ec51 0b17 	vmov	r0, r1, d7
 80183c8:	f7e8 f916 	bl	80005f8 <__aeabi_dmul>
 80183cc:	9b02      	ldr	r3, [sp, #8]
 80183ce:	9d00      	ldr	r5, [sp, #0]
 80183d0:	930c      	str	r3, [sp, #48]	; 0x30
 80183d2:	ec41 0b18 	vmov	d8, r0, r1
 80183d6:	4639      	mov	r1, r7
 80183d8:	4630      	mov	r0, r6
 80183da:	f7e8 fbbd 	bl	8000b58 <__aeabi_d2iz>
 80183de:	9011      	str	r0, [sp, #68]	; 0x44
 80183e0:	f7e8 f8a0 	bl	8000524 <__aeabi_i2d>
 80183e4:	4602      	mov	r2, r0
 80183e6:	460b      	mov	r3, r1
 80183e8:	4630      	mov	r0, r6
 80183ea:	4639      	mov	r1, r7
 80183ec:	f7e7 ff4c 	bl	8000288 <__aeabi_dsub>
 80183f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80183f2:	3330      	adds	r3, #48	; 0x30
 80183f4:	f805 3b01 	strb.w	r3, [r5], #1
 80183f8:	9b02      	ldr	r3, [sp, #8]
 80183fa:	429d      	cmp	r5, r3
 80183fc:	4606      	mov	r6, r0
 80183fe:	460f      	mov	r7, r1
 8018400:	f04f 0200 	mov.w	r2, #0
 8018404:	d134      	bne.n	8018470 <_dtoa_r+0x660>
 8018406:	4b19      	ldr	r3, [pc, #100]	; (801846c <_dtoa_r+0x65c>)
 8018408:	ec51 0b18 	vmov	r0, r1, d8
 801840c:	f7e7 ff3e 	bl	800028c <__adddf3>
 8018410:	4602      	mov	r2, r0
 8018412:	460b      	mov	r3, r1
 8018414:	4630      	mov	r0, r6
 8018416:	4639      	mov	r1, r7
 8018418:	f7e8 fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 801841c:	2800      	cmp	r0, #0
 801841e:	d175      	bne.n	801850c <_dtoa_r+0x6fc>
 8018420:	ec53 2b18 	vmov	r2, r3, d8
 8018424:	4911      	ldr	r1, [pc, #68]	; (801846c <_dtoa_r+0x65c>)
 8018426:	2000      	movs	r0, #0
 8018428:	f7e7 ff2e 	bl	8000288 <__aeabi_dsub>
 801842c:	4602      	mov	r2, r0
 801842e:	460b      	mov	r3, r1
 8018430:	4630      	mov	r0, r6
 8018432:	4639      	mov	r1, r7
 8018434:	f7e8 fb52 	bl	8000adc <__aeabi_dcmplt>
 8018438:	2800      	cmp	r0, #0
 801843a:	f43f af27 	beq.w	801828c <_dtoa_r+0x47c>
 801843e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018440:	1e6b      	subs	r3, r5, #1
 8018442:	930c      	str	r3, [sp, #48]	; 0x30
 8018444:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018448:	2b30      	cmp	r3, #48	; 0x30
 801844a:	d0f8      	beq.n	801843e <_dtoa_r+0x62e>
 801844c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018450:	e04a      	b.n	80184e8 <_dtoa_r+0x6d8>
 8018452:	bf00      	nop
 8018454:	0801cdb8 	.word	0x0801cdb8
 8018458:	0801cd90 	.word	0x0801cd90
 801845c:	3ff00000 	.word	0x3ff00000
 8018460:	40240000 	.word	0x40240000
 8018464:	401c0000 	.word	0x401c0000
 8018468:	40140000 	.word	0x40140000
 801846c:	3fe00000 	.word	0x3fe00000
 8018470:	4baf      	ldr	r3, [pc, #700]	; (8018730 <_dtoa_r+0x920>)
 8018472:	f7e8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8018476:	4606      	mov	r6, r0
 8018478:	460f      	mov	r7, r1
 801847a:	e7ac      	b.n	80183d6 <_dtoa_r+0x5c6>
 801847c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018480:	9d00      	ldr	r5, [sp, #0]
 8018482:	4642      	mov	r2, r8
 8018484:	464b      	mov	r3, r9
 8018486:	4630      	mov	r0, r6
 8018488:	4639      	mov	r1, r7
 801848a:	f7e8 f9df 	bl	800084c <__aeabi_ddiv>
 801848e:	f7e8 fb63 	bl	8000b58 <__aeabi_d2iz>
 8018492:	9002      	str	r0, [sp, #8]
 8018494:	f7e8 f846 	bl	8000524 <__aeabi_i2d>
 8018498:	4642      	mov	r2, r8
 801849a:	464b      	mov	r3, r9
 801849c:	f7e8 f8ac 	bl	80005f8 <__aeabi_dmul>
 80184a0:	4602      	mov	r2, r0
 80184a2:	460b      	mov	r3, r1
 80184a4:	4630      	mov	r0, r6
 80184a6:	4639      	mov	r1, r7
 80184a8:	f7e7 feee 	bl	8000288 <__aeabi_dsub>
 80184ac:	9e02      	ldr	r6, [sp, #8]
 80184ae:	9f01      	ldr	r7, [sp, #4]
 80184b0:	3630      	adds	r6, #48	; 0x30
 80184b2:	f805 6b01 	strb.w	r6, [r5], #1
 80184b6:	9e00      	ldr	r6, [sp, #0]
 80184b8:	1bae      	subs	r6, r5, r6
 80184ba:	42b7      	cmp	r7, r6
 80184bc:	4602      	mov	r2, r0
 80184be:	460b      	mov	r3, r1
 80184c0:	d137      	bne.n	8018532 <_dtoa_r+0x722>
 80184c2:	f7e7 fee3 	bl	800028c <__adddf3>
 80184c6:	4642      	mov	r2, r8
 80184c8:	464b      	mov	r3, r9
 80184ca:	4606      	mov	r6, r0
 80184cc:	460f      	mov	r7, r1
 80184ce:	f7e8 fb23 	bl	8000b18 <__aeabi_dcmpgt>
 80184d2:	b9c8      	cbnz	r0, 8018508 <_dtoa_r+0x6f8>
 80184d4:	4642      	mov	r2, r8
 80184d6:	464b      	mov	r3, r9
 80184d8:	4630      	mov	r0, r6
 80184da:	4639      	mov	r1, r7
 80184dc:	f7e8 faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80184e0:	b110      	cbz	r0, 80184e8 <_dtoa_r+0x6d8>
 80184e2:	9b02      	ldr	r3, [sp, #8]
 80184e4:	07d9      	lsls	r1, r3, #31
 80184e6:	d40f      	bmi.n	8018508 <_dtoa_r+0x6f8>
 80184e8:	4620      	mov	r0, r4
 80184ea:	4659      	mov	r1, fp
 80184ec:	f000 fe5c 	bl	80191a8 <_Bfree>
 80184f0:	2300      	movs	r3, #0
 80184f2:	702b      	strb	r3, [r5, #0]
 80184f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80184f6:	f10a 0001 	add.w	r0, sl, #1
 80184fa:	6018      	str	r0, [r3, #0]
 80184fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184fe:	2b00      	cmp	r3, #0
 8018500:	f43f acd8 	beq.w	8017eb4 <_dtoa_r+0xa4>
 8018504:	601d      	str	r5, [r3, #0]
 8018506:	e4d5      	b.n	8017eb4 <_dtoa_r+0xa4>
 8018508:	f8cd a01c 	str.w	sl, [sp, #28]
 801850c:	462b      	mov	r3, r5
 801850e:	461d      	mov	r5, r3
 8018510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018514:	2a39      	cmp	r2, #57	; 0x39
 8018516:	d108      	bne.n	801852a <_dtoa_r+0x71a>
 8018518:	9a00      	ldr	r2, [sp, #0]
 801851a:	429a      	cmp	r2, r3
 801851c:	d1f7      	bne.n	801850e <_dtoa_r+0x6fe>
 801851e:	9a07      	ldr	r2, [sp, #28]
 8018520:	9900      	ldr	r1, [sp, #0]
 8018522:	3201      	adds	r2, #1
 8018524:	9207      	str	r2, [sp, #28]
 8018526:	2230      	movs	r2, #48	; 0x30
 8018528:	700a      	strb	r2, [r1, #0]
 801852a:	781a      	ldrb	r2, [r3, #0]
 801852c:	3201      	adds	r2, #1
 801852e:	701a      	strb	r2, [r3, #0]
 8018530:	e78c      	b.n	801844c <_dtoa_r+0x63c>
 8018532:	4b7f      	ldr	r3, [pc, #508]	; (8018730 <_dtoa_r+0x920>)
 8018534:	2200      	movs	r2, #0
 8018536:	f7e8 f85f 	bl	80005f8 <__aeabi_dmul>
 801853a:	2200      	movs	r2, #0
 801853c:	2300      	movs	r3, #0
 801853e:	4606      	mov	r6, r0
 8018540:	460f      	mov	r7, r1
 8018542:	f7e8 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8018546:	2800      	cmp	r0, #0
 8018548:	d09b      	beq.n	8018482 <_dtoa_r+0x672>
 801854a:	e7cd      	b.n	80184e8 <_dtoa_r+0x6d8>
 801854c:	9a08      	ldr	r2, [sp, #32]
 801854e:	2a00      	cmp	r2, #0
 8018550:	f000 80c4 	beq.w	80186dc <_dtoa_r+0x8cc>
 8018554:	9a05      	ldr	r2, [sp, #20]
 8018556:	2a01      	cmp	r2, #1
 8018558:	f300 80a8 	bgt.w	80186ac <_dtoa_r+0x89c>
 801855c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801855e:	2a00      	cmp	r2, #0
 8018560:	f000 80a0 	beq.w	80186a4 <_dtoa_r+0x894>
 8018564:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018568:	9e06      	ldr	r6, [sp, #24]
 801856a:	4645      	mov	r5, r8
 801856c:	9a04      	ldr	r2, [sp, #16]
 801856e:	2101      	movs	r1, #1
 8018570:	441a      	add	r2, r3
 8018572:	4620      	mov	r0, r4
 8018574:	4498      	add	r8, r3
 8018576:	9204      	str	r2, [sp, #16]
 8018578:	f000 ff1c 	bl	80193b4 <__i2b>
 801857c:	4607      	mov	r7, r0
 801857e:	2d00      	cmp	r5, #0
 8018580:	dd0b      	ble.n	801859a <_dtoa_r+0x78a>
 8018582:	9b04      	ldr	r3, [sp, #16]
 8018584:	2b00      	cmp	r3, #0
 8018586:	dd08      	ble.n	801859a <_dtoa_r+0x78a>
 8018588:	42ab      	cmp	r3, r5
 801858a:	9a04      	ldr	r2, [sp, #16]
 801858c:	bfa8      	it	ge
 801858e:	462b      	movge	r3, r5
 8018590:	eba8 0803 	sub.w	r8, r8, r3
 8018594:	1aed      	subs	r5, r5, r3
 8018596:	1ad3      	subs	r3, r2, r3
 8018598:	9304      	str	r3, [sp, #16]
 801859a:	9b06      	ldr	r3, [sp, #24]
 801859c:	b1fb      	cbz	r3, 80185de <_dtoa_r+0x7ce>
 801859e:	9b08      	ldr	r3, [sp, #32]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	f000 809f 	beq.w	80186e4 <_dtoa_r+0x8d4>
 80185a6:	2e00      	cmp	r6, #0
 80185a8:	dd11      	ble.n	80185ce <_dtoa_r+0x7be>
 80185aa:	4639      	mov	r1, r7
 80185ac:	4632      	mov	r2, r6
 80185ae:	4620      	mov	r0, r4
 80185b0:	f000 ffbc 	bl	801952c <__pow5mult>
 80185b4:	465a      	mov	r2, fp
 80185b6:	4601      	mov	r1, r0
 80185b8:	4607      	mov	r7, r0
 80185ba:	4620      	mov	r0, r4
 80185bc:	f000 ff10 	bl	80193e0 <__multiply>
 80185c0:	4659      	mov	r1, fp
 80185c2:	9007      	str	r0, [sp, #28]
 80185c4:	4620      	mov	r0, r4
 80185c6:	f000 fdef 	bl	80191a8 <_Bfree>
 80185ca:	9b07      	ldr	r3, [sp, #28]
 80185cc:	469b      	mov	fp, r3
 80185ce:	9b06      	ldr	r3, [sp, #24]
 80185d0:	1b9a      	subs	r2, r3, r6
 80185d2:	d004      	beq.n	80185de <_dtoa_r+0x7ce>
 80185d4:	4659      	mov	r1, fp
 80185d6:	4620      	mov	r0, r4
 80185d8:	f000 ffa8 	bl	801952c <__pow5mult>
 80185dc:	4683      	mov	fp, r0
 80185de:	2101      	movs	r1, #1
 80185e0:	4620      	mov	r0, r4
 80185e2:	f000 fee7 	bl	80193b4 <__i2b>
 80185e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	4606      	mov	r6, r0
 80185ec:	dd7c      	ble.n	80186e8 <_dtoa_r+0x8d8>
 80185ee:	461a      	mov	r2, r3
 80185f0:	4601      	mov	r1, r0
 80185f2:	4620      	mov	r0, r4
 80185f4:	f000 ff9a 	bl	801952c <__pow5mult>
 80185f8:	9b05      	ldr	r3, [sp, #20]
 80185fa:	2b01      	cmp	r3, #1
 80185fc:	4606      	mov	r6, r0
 80185fe:	dd76      	ble.n	80186ee <_dtoa_r+0x8de>
 8018600:	2300      	movs	r3, #0
 8018602:	9306      	str	r3, [sp, #24]
 8018604:	6933      	ldr	r3, [r6, #16]
 8018606:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801860a:	6918      	ldr	r0, [r3, #16]
 801860c:	f000 fe82 	bl	8019314 <__hi0bits>
 8018610:	f1c0 0020 	rsb	r0, r0, #32
 8018614:	9b04      	ldr	r3, [sp, #16]
 8018616:	4418      	add	r0, r3
 8018618:	f010 001f 	ands.w	r0, r0, #31
 801861c:	f000 8086 	beq.w	801872c <_dtoa_r+0x91c>
 8018620:	f1c0 0320 	rsb	r3, r0, #32
 8018624:	2b04      	cmp	r3, #4
 8018626:	dd7f      	ble.n	8018728 <_dtoa_r+0x918>
 8018628:	f1c0 001c 	rsb	r0, r0, #28
 801862c:	9b04      	ldr	r3, [sp, #16]
 801862e:	4403      	add	r3, r0
 8018630:	4480      	add	r8, r0
 8018632:	4405      	add	r5, r0
 8018634:	9304      	str	r3, [sp, #16]
 8018636:	f1b8 0f00 	cmp.w	r8, #0
 801863a:	dd05      	ble.n	8018648 <_dtoa_r+0x838>
 801863c:	4659      	mov	r1, fp
 801863e:	4642      	mov	r2, r8
 8018640:	4620      	mov	r0, r4
 8018642:	f000 ffcd 	bl	80195e0 <__lshift>
 8018646:	4683      	mov	fp, r0
 8018648:	9b04      	ldr	r3, [sp, #16]
 801864a:	2b00      	cmp	r3, #0
 801864c:	dd05      	ble.n	801865a <_dtoa_r+0x84a>
 801864e:	4631      	mov	r1, r6
 8018650:	461a      	mov	r2, r3
 8018652:	4620      	mov	r0, r4
 8018654:	f000 ffc4 	bl	80195e0 <__lshift>
 8018658:	4606      	mov	r6, r0
 801865a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801865c:	2b00      	cmp	r3, #0
 801865e:	d069      	beq.n	8018734 <_dtoa_r+0x924>
 8018660:	4631      	mov	r1, r6
 8018662:	4658      	mov	r0, fp
 8018664:	f001 f828 	bl	80196b8 <__mcmp>
 8018668:	2800      	cmp	r0, #0
 801866a:	da63      	bge.n	8018734 <_dtoa_r+0x924>
 801866c:	2300      	movs	r3, #0
 801866e:	4659      	mov	r1, fp
 8018670:	220a      	movs	r2, #10
 8018672:	4620      	mov	r0, r4
 8018674:	f000 fdba 	bl	80191ec <__multadd>
 8018678:	9b08      	ldr	r3, [sp, #32]
 801867a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801867e:	4683      	mov	fp, r0
 8018680:	2b00      	cmp	r3, #0
 8018682:	f000 818f 	beq.w	80189a4 <_dtoa_r+0xb94>
 8018686:	4639      	mov	r1, r7
 8018688:	2300      	movs	r3, #0
 801868a:	220a      	movs	r2, #10
 801868c:	4620      	mov	r0, r4
 801868e:	f000 fdad 	bl	80191ec <__multadd>
 8018692:	f1b9 0f00 	cmp.w	r9, #0
 8018696:	4607      	mov	r7, r0
 8018698:	f300 808e 	bgt.w	80187b8 <_dtoa_r+0x9a8>
 801869c:	9b05      	ldr	r3, [sp, #20]
 801869e:	2b02      	cmp	r3, #2
 80186a0:	dc50      	bgt.n	8018744 <_dtoa_r+0x934>
 80186a2:	e089      	b.n	80187b8 <_dtoa_r+0x9a8>
 80186a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80186a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80186aa:	e75d      	b.n	8018568 <_dtoa_r+0x758>
 80186ac:	9b01      	ldr	r3, [sp, #4]
 80186ae:	1e5e      	subs	r6, r3, #1
 80186b0:	9b06      	ldr	r3, [sp, #24]
 80186b2:	42b3      	cmp	r3, r6
 80186b4:	bfbf      	itttt	lt
 80186b6:	9b06      	ldrlt	r3, [sp, #24]
 80186b8:	9606      	strlt	r6, [sp, #24]
 80186ba:	1af2      	sublt	r2, r6, r3
 80186bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80186be:	bfb6      	itet	lt
 80186c0:	189b      	addlt	r3, r3, r2
 80186c2:	1b9e      	subge	r6, r3, r6
 80186c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80186c6:	9b01      	ldr	r3, [sp, #4]
 80186c8:	bfb8      	it	lt
 80186ca:	2600      	movlt	r6, #0
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	bfb5      	itete	lt
 80186d0:	eba8 0503 	sublt.w	r5, r8, r3
 80186d4:	9b01      	ldrge	r3, [sp, #4]
 80186d6:	2300      	movlt	r3, #0
 80186d8:	4645      	movge	r5, r8
 80186da:	e747      	b.n	801856c <_dtoa_r+0x75c>
 80186dc:	9e06      	ldr	r6, [sp, #24]
 80186de:	9f08      	ldr	r7, [sp, #32]
 80186e0:	4645      	mov	r5, r8
 80186e2:	e74c      	b.n	801857e <_dtoa_r+0x76e>
 80186e4:	9a06      	ldr	r2, [sp, #24]
 80186e6:	e775      	b.n	80185d4 <_dtoa_r+0x7c4>
 80186e8:	9b05      	ldr	r3, [sp, #20]
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	dc18      	bgt.n	8018720 <_dtoa_r+0x910>
 80186ee:	9b02      	ldr	r3, [sp, #8]
 80186f0:	b9b3      	cbnz	r3, 8018720 <_dtoa_r+0x910>
 80186f2:	9b03      	ldr	r3, [sp, #12]
 80186f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80186f8:	b9a3      	cbnz	r3, 8018724 <_dtoa_r+0x914>
 80186fa:	9b03      	ldr	r3, [sp, #12]
 80186fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018700:	0d1b      	lsrs	r3, r3, #20
 8018702:	051b      	lsls	r3, r3, #20
 8018704:	b12b      	cbz	r3, 8018712 <_dtoa_r+0x902>
 8018706:	9b04      	ldr	r3, [sp, #16]
 8018708:	3301      	adds	r3, #1
 801870a:	9304      	str	r3, [sp, #16]
 801870c:	f108 0801 	add.w	r8, r8, #1
 8018710:	2301      	movs	r3, #1
 8018712:	9306      	str	r3, [sp, #24]
 8018714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018716:	2b00      	cmp	r3, #0
 8018718:	f47f af74 	bne.w	8018604 <_dtoa_r+0x7f4>
 801871c:	2001      	movs	r0, #1
 801871e:	e779      	b.n	8018614 <_dtoa_r+0x804>
 8018720:	2300      	movs	r3, #0
 8018722:	e7f6      	b.n	8018712 <_dtoa_r+0x902>
 8018724:	9b02      	ldr	r3, [sp, #8]
 8018726:	e7f4      	b.n	8018712 <_dtoa_r+0x902>
 8018728:	d085      	beq.n	8018636 <_dtoa_r+0x826>
 801872a:	4618      	mov	r0, r3
 801872c:	301c      	adds	r0, #28
 801872e:	e77d      	b.n	801862c <_dtoa_r+0x81c>
 8018730:	40240000 	.word	0x40240000
 8018734:	9b01      	ldr	r3, [sp, #4]
 8018736:	2b00      	cmp	r3, #0
 8018738:	dc38      	bgt.n	80187ac <_dtoa_r+0x99c>
 801873a:	9b05      	ldr	r3, [sp, #20]
 801873c:	2b02      	cmp	r3, #2
 801873e:	dd35      	ble.n	80187ac <_dtoa_r+0x99c>
 8018740:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018744:	f1b9 0f00 	cmp.w	r9, #0
 8018748:	d10d      	bne.n	8018766 <_dtoa_r+0x956>
 801874a:	4631      	mov	r1, r6
 801874c:	464b      	mov	r3, r9
 801874e:	2205      	movs	r2, #5
 8018750:	4620      	mov	r0, r4
 8018752:	f000 fd4b 	bl	80191ec <__multadd>
 8018756:	4601      	mov	r1, r0
 8018758:	4606      	mov	r6, r0
 801875a:	4658      	mov	r0, fp
 801875c:	f000 ffac 	bl	80196b8 <__mcmp>
 8018760:	2800      	cmp	r0, #0
 8018762:	f73f adbd 	bgt.w	80182e0 <_dtoa_r+0x4d0>
 8018766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018768:	9d00      	ldr	r5, [sp, #0]
 801876a:	ea6f 0a03 	mvn.w	sl, r3
 801876e:	f04f 0800 	mov.w	r8, #0
 8018772:	4631      	mov	r1, r6
 8018774:	4620      	mov	r0, r4
 8018776:	f000 fd17 	bl	80191a8 <_Bfree>
 801877a:	2f00      	cmp	r7, #0
 801877c:	f43f aeb4 	beq.w	80184e8 <_dtoa_r+0x6d8>
 8018780:	f1b8 0f00 	cmp.w	r8, #0
 8018784:	d005      	beq.n	8018792 <_dtoa_r+0x982>
 8018786:	45b8      	cmp	r8, r7
 8018788:	d003      	beq.n	8018792 <_dtoa_r+0x982>
 801878a:	4641      	mov	r1, r8
 801878c:	4620      	mov	r0, r4
 801878e:	f000 fd0b 	bl	80191a8 <_Bfree>
 8018792:	4639      	mov	r1, r7
 8018794:	4620      	mov	r0, r4
 8018796:	f000 fd07 	bl	80191a8 <_Bfree>
 801879a:	e6a5      	b.n	80184e8 <_dtoa_r+0x6d8>
 801879c:	2600      	movs	r6, #0
 801879e:	4637      	mov	r7, r6
 80187a0:	e7e1      	b.n	8018766 <_dtoa_r+0x956>
 80187a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80187a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80187a8:	4637      	mov	r7, r6
 80187aa:	e599      	b.n	80182e0 <_dtoa_r+0x4d0>
 80187ac:	9b08      	ldr	r3, [sp, #32]
 80187ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	f000 80fd 	beq.w	80189b2 <_dtoa_r+0xba2>
 80187b8:	2d00      	cmp	r5, #0
 80187ba:	dd05      	ble.n	80187c8 <_dtoa_r+0x9b8>
 80187bc:	4639      	mov	r1, r7
 80187be:	462a      	mov	r2, r5
 80187c0:	4620      	mov	r0, r4
 80187c2:	f000 ff0d 	bl	80195e0 <__lshift>
 80187c6:	4607      	mov	r7, r0
 80187c8:	9b06      	ldr	r3, [sp, #24]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d05c      	beq.n	8018888 <_dtoa_r+0xa78>
 80187ce:	6879      	ldr	r1, [r7, #4]
 80187d0:	4620      	mov	r0, r4
 80187d2:	f000 fca9 	bl	8019128 <_Balloc>
 80187d6:	4605      	mov	r5, r0
 80187d8:	b928      	cbnz	r0, 80187e6 <_dtoa_r+0x9d6>
 80187da:	4b80      	ldr	r3, [pc, #512]	; (80189dc <_dtoa_r+0xbcc>)
 80187dc:	4602      	mov	r2, r0
 80187de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80187e2:	f7ff bb2e 	b.w	8017e42 <_dtoa_r+0x32>
 80187e6:	693a      	ldr	r2, [r7, #16]
 80187e8:	3202      	adds	r2, #2
 80187ea:	0092      	lsls	r2, r2, #2
 80187ec:	f107 010c 	add.w	r1, r7, #12
 80187f0:	300c      	adds	r0, #12
 80187f2:	f7fd fc85 	bl	8016100 <memcpy>
 80187f6:	2201      	movs	r2, #1
 80187f8:	4629      	mov	r1, r5
 80187fa:	4620      	mov	r0, r4
 80187fc:	f000 fef0 	bl	80195e0 <__lshift>
 8018800:	9b00      	ldr	r3, [sp, #0]
 8018802:	3301      	adds	r3, #1
 8018804:	9301      	str	r3, [sp, #4]
 8018806:	9b00      	ldr	r3, [sp, #0]
 8018808:	444b      	add	r3, r9
 801880a:	9307      	str	r3, [sp, #28]
 801880c:	9b02      	ldr	r3, [sp, #8]
 801880e:	f003 0301 	and.w	r3, r3, #1
 8018812:	46b8      	mov	r8, r7
 8018814:	9306      	str	r3, [sp, #24]
 8018816:	4607      	mov	r7, r0
 8018818:	9b01      	ldr	r3, [sp, #4]
 801881a:	4631      	mov	r1, r6
 801881c:	3b01      	subs	r3, #1
 801881e:	4658      	mov	r0, fp
 8018820:	9302      	str	r3, [sp, #8]
 8018822:	f7ff fa69 	bl	8017cf8 <quorem>
 8018826:	4603      	mov	r3, r0
 8018828:	3330      	adds	r3, #48	; 0x30
 801882a:	9004      	str	r0, [sp, #16]
 801882c:	4641      	mov	r1, r8
 801882e:	4658      	mov	r0, fp
 8018830:	9308      	str	r3, [sp, #32]
 8018832:	f000 ff41 	bl	80196b8 <__mcmp>
 8018836:	463a      	mov	r2, r7
 8018838:	4681      	mov	r9, r0
 801883a:	4631      	mov	r1, r6
 801883c:	4620      	mov	r0, r4
 801883e:	f000 ff57 	bl	80196f0 <__mdiff>
 8018842:	68c2      	ldr	r2, [r0, #12]
 8018844:	9b08      	ldr	r3, [sp, #32]
 8018846:	4605      	mov	r5, r0
 8018848:	bb02      	cbnz	r2, 801888c <_dtoa_r+0xa7c>
 801884a:	4601      	mov	r1, r0
 801884c:	4658      	mov	r0, fp
 801884e:	f000 ff33 	bl	80196b8 <__mcmp>
 8018852:	9b08      	ldr	r3, [sp, #32]
 8018854:	4602      	mov	r2, r0
 8018856:	4629      	mov	r1, r5
 8018858:	4620      	mov	r0, r4
 801885a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801885e:	f000 fca3 	bl	80191a8 <_Bfree>
 8018862:	9b05      	ldr	r3, [sp, #20]
 8018864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018866:	9d01      	ldr	r5, [sp, #4]
 8018868:	ea43 0102 	orr.w	r1, r3, r2
 801886c:	9b06      	ldr	r3, [sp, #24]
 801886e:	430b      	orrs	r3, r1
 8018870:	9b08      	ldr	r3, [sp, #32]
 8018872:	d10d      	bne.n	8018890 <_dtoa_r+0xa80>
 8018874:	2b39      	cmp	r3, #57	; 0x39
 8018876:	d029      	beq.n	80188cc <_dtoa_r+0xabc>
 8018878:	f1b9 0f00 	cmp.w	r9, #0
 801887c:	dd01      	ble.n	8018882 <_dtoa_r+0xa72>
 801887e:	9b04      	ldr	r3, [sp, #16]
 8018880:	3331      	adds	r3, #49	; 0x31
 8018882:	9a02      	ldr	r2, [sp, #8]
 8018884:	7013      	strb	r3, [r2, #0]
 8018886:	e774      	b.n	8018772 <_dtoa_r+0x962>
 8018888:	4638      	mov	r0, r7
 801888a:	e7b9      	b.n	8018800 <_dtoa_r+0x9f0>
 801888c:	2201      	movs	r2, #1
 801888e:	e7e2      	b.n	8018856 <_dtoa_r+0xa46>
 8018890:	f1b9 0f00 	cmp.w	r9, #0
 8018894:	db06      	blt.n	80188a4 <_dtoa_r+0xa94>
 8018896:	9905      	ldr	r1, [sp, #20]
 8018898:	ea41 0909 	orr.w	r9, r1, r9
 801889c:	9906      	ldr	r1, [sp, #24]
 801889e:	ea59 0101 	orrs.w	r1, r9, r1
 80188a2:	d120      	bne.n	80188e6 <_dtoa_r+0xad6>
 80188a4:	2a00      	cmp	r2, #0
 80188a6:	ddec      	ble.n	8018882 <_dtoa_r+0xa72>
 80188a8:	4659      	mov	r1, fp
 80188aa:	2201      	movs	r2, #1
 80188ac:	4620      	mov	r0, r4
 80188ae:	9301      	str	r3, [sp, #4]
 80188b0:	f000 fe96 	bl	80195e0 <__lshift>
 80188b4:	4631      	mov	r1, r6
 80188b6:	4683      	mov	fp, r0
 80188b8:	f000 fefe 	bl	80196b8 <__mcmp>
 80188bc:	2800      	cmp	r0, #0
 80188be:	9b01      	ldr	r3, [sp, #4]
 80188c0:	dc02      	bgt.n	80188c8 <_dtoa_r+0xab8>
 80188c2:	d1de      	bne.n	8018882 <_dtoa_r+0xa72>
 80188c4:	07da      	lsls	r2, r3, #31
 80188c6:	d5dc      	bpl.n	8018882 <_dtoa_r+0xa72>
 80188c8:	2b39      	cmp	r3, #57	; 0x39
 80188ca:	d1d8      	bne.n	801887e <_dtoa_r+0xa6e>
 80188cc:	9a02      	ldr	r2, [sp, #8]
 80188ce:	2339      	movs	r3, #57	; 0x39
 80188d0:	7013      	strb	r3, [r2, #0]
 80188d2:	462b      	mov	r3, r5
 80188d4:	461d      	mov	r5, r3
 80188d6:	3b01      	subs	r3, #1
 80188d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80188dc:	2a39      	cmp	r2, #57	; 0x39
 80188de:	d050      	beq.n	8018982 <_dtoa_r+0xb72>
 80188e0:	3201      	adds	r2, #1
 80188e2:	701a      	strb	r2, [r3, #0]
 80188e4:	e745      	b.n	8018772 <_dtoa_r+0x962>
 80188e6:	2a00      	cmp	r2, #0
 80188e8:	dd03      	ble.n	80188f2 <_dtoa_r+0xae2>
 80188ea:	2b39      	cmp	r3, #57	; 0x39
 80188ec:	d0ee      	beq.n	80188cc <_dtoa_r+0xabc>
 80188ee:	3301      	adds	r3, #1
 80188f0:	e7c7      	b.n	8018882 <_dtoa_r+0xa72>
 80188f2:	9a01      	ldr	r2, [sp, #4]
 80188f4:	9907      	ldr	r1, [sp, #28]
 80188f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80188fa:	428a      	cmp	r2, r1
 80188fc:	d02a      	beq.n	8018954 <_dtoa_r+0xb44>
 80188fe:	4659      	mov	r1, fp
 8018900:	2300      	movs	r3, #0
 8018902:	220a      	movs	r2, #10
 8018904:	4620      	mov	r0, r4
 8018906:	f000 fc71 	bl	80191ec <__multadd>
 801890a:	45b8      	cmp	r8, r7
 801890c:	4683      	mov	fp, r0
 801890e:	f04f 0300 	mov.w	r3, #0
 8018912:	f04f 020a 	mov.w	r2, #10
 8018916:	4641      	mov	r1, r8
 8018918:	4620      	mov	r0, r4
 801891a:	d107      	bne.n	801892c <_dtoa_r+0xb1c>
 801891c:	f000 fc66 	bl	80191ec <__multadd>
 8018920:	4680      	mov	r8, r0
 8018922:	4607      	mov	r7, r0
 8018924:	9b01      	ldr	r3, [sp, #4]
 8018926:	3301      	adds	r3, #1
 8018928:	9301      	str	r3, [sp, #4]
 801892a:	e775      	b.n	8018818 <_dtoa_r+0xa08>
 801892c:	f000 fc5e 	bl	80191ec <__multadd>
 8018930:	4639      	mov	r1, r7
 8018932:	4680      	mov	r8, r0
 8018934:	2300      	movs	r3, #0
 8018936:	220a      	movs	r2, #10
 8018938:	4620      	mov	r0, r4
 801893a:	f000 fc57 	bl	80191ec <__multadd>
 801893e:	4607      	mov	r7, r0
 8018940:	e7f0      	b.n	8018924 <_dtoa_r+0xb14>
 8018942:	f1b9 0f00 	cmp.w	r9, #0
 8018946:	9a00      	ldr	r2, [sp, #0]
 8018948:	bfcc      	ite	gt
 801894a:	464d      	movgt	r5, r9
 801894c:	2501      	movle	r5, #1
 801894e:	4415      	add	r5, r2
 8018950:	f04f 0800 	mov.w	r8, #0
 8018954:	4659      	mov	r1, fp
 8018956:	2201      	movs	r2, #1
 8018958:	4620      	mov	r0, r4
 801895a:	9301      	str	r3, [sp, #4]
 801895c:	f000 fe40 	bl	80195e0 <__lshift>
 8018960:	4631      	mov	r1, r6
 8018962:	4683      	mov	fp, r0
 8018964:	f000 fea8 	bl	80196b8 <__mcmp>
 8018968:	2800      	cmp	r0, #0
 801896a:	dcb2      	bgt.n	80188d2 <_dtoa_r+0xac2>
 801896c:	d102      	bne.n	8018974 <_dtoa_r+0xb64>
 801896e:	9b01      	ldr	r3, [sp, #4]
 8018970:	07db      	lsls	r3, r3, #31
 8018972:	d4ae      	bmi.n	80188d2 <_dtoa_r+0xac2>
 8018974:	462b      	mov	r3, r5
 8018976:	461d      	mov	r5, r3
 8018978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801897c:	2a30      	cmp	r2, #48	; 0x30
 801897e:	d0fa      	beq.n	8018976 <_dtoa_r+0xb66>
 8018980:	e6f7      	b.n	8018772 <_dtoa_r+0x962>
 8018982:	9a00      	ldr	r2, [sp, #0]
 8018984:	429a      	cmp	r2, r3
 8018986:	d1a5      	bne.n	80188d4 <_dtoa_r+0xac4>
 8018988:	f10a 0a01 	add.w	sl, sl, #1
 801898c:	2331      	movs	r3, #49	; 0x31
 801898e:	e779      	b.n	8018884 <_dtoa_r+0xa74>
 8018990:	4b13      	ldr	r3, [pc, #76]	; (80189e0 <_dtoa_r+0xbd0>)
 8018992:	f7ff baaf 	b.w	8017ef4 <_dtoa_r+0xe4>
 8018996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018998:	2b00      	cmp	r3, #0
 801899a:	f47f aa86 	bne.w	8017eaa <_dtoa_r+0x9a>
 801899e:	4b11      	ldr	r3, [pc, #68]	; (80189e4 <_dtoa_r+0xbd4>)
 80189a0:	f7ff baa8 	b.w	8017ef4 <_dtoa_r+0xe4>
 80189a4:	f1b9 0f00 	cmp.w	r9, #0
 80189a8:	dc03      	bgt.n	80189b2 <_dtoa_r+0xba2>
 80189aa:	9b05      	ldr	r3, [sp, #20]
 80189ac:	2b02      	cmp	r3, #2
 80189ae:	f73f aec9 	bgt.w	8018744 <_dtoa_r+0x934>
 80189b2:	9d00      	ldr	r5, [sp, #0]
 80189b4:	4631      	mov	r1, r6
 80189b6:	4658      	mov	r0, fp
 80189b8:	f7ff f99e 	bl	8017cf8 <quorem>
 80189bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80189c0:	f805 3b01 	strb.w	r3, [r5], #1
 80189c4:	9a00      	ldr	r2, [sp, #0]
 80189c6:	1aaa      	subs	r2, r5, r2
 80189c8:	4591      	cmp	r9, r2
 80189ca:	ddba      	ble.n	8018942 <_dtoa_r+0xb32>
 80189cc:	4659      	mov	r1, fp
 80189ce:	2300      	movs	r3, #0
 80189d0:	220a      	movs	r2, #10
 80189d2:	4620      	mov	r0, r4
 80189d4:	f000 fc0a 	bl	80191ec <__multadd>
 80189d8:	4683      	mov	fp, r0
 80189da:	e7eb      	b.n	80189b4 <_dtoa_r+0xba4>
 80189dc:	0801cc9c 	.word	0x0801cc9c
 80189e0:	0801cea1 	.word	0x0801cea1
 80189e4:	0801cc19 	.word	0x0801cc19

080189e8 <rshift>:
 80189e8:	6903      	ldr	r3, [r0, #16]
 80189ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80189ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80189f6:	f100 0414 	add.w	r4, r0, #20
 80189fa:	dd45      	ble.n	8018a88 <rshift+0xa0>
 80189fc:	f011 011f 	ands.w	r1, r1, #31
 8018a00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018a04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018a08:	d10c      	bne.n	8018a24 <rshift+0x3c>
 8018a0a:	f100 0710 	add.w	r7, r0, #16
 8018a0e:	4629      	mov	r1, r5
 8018a10:	42b1      	cmp	r1, r6
 8018a12:	d334      	bcc.n	8018a7e <rshift+0x96>
 8018a14:	1a9b      	subs	r3, r3, r2
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	1eea      	subs	r2, r5, #3
 8018a1a:	4296      	cmp	r6, r2
 8018a1c:	bf38      	it	cc
 8018a1e:	2300      	movcc	r3, #0
 8018a20:	4423      	add	r3, r4
 8018a22:	e015      	b.n	8018a50 <rshift+0x68>
 8018a24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018a28:	f1c1 0820 	rsb	r8, r1, #32
 8018a2c:	40cf      	lsrs	r7, r1
 8018a2e:	f105 0e04 	add.w	lr, r5, #4
 8018a32:	46a1      	mov	r9, r4
 8018a34:	4576      	cmp	r6, lr
 8018a36:	46f4      	mov	ip, lr
 8018a38:	d815      	bhi.n	8018a66 <rshift+0x7e>
 8018a3a:	1a9b      	subs	r3, r3, r2
 8018a3c:	009a      	lsls	r2, r3, #2
 8018a3e:	3a04      	subs	r2, #4
 8018a40:	3501      	adds	r5, #1
 8018a42:	42ae      	cmp	r6, r5
 8018a44:	bf38      	it	cc
 8018a46:	2200      	movcc	r2, #0
 8018a48:	18a3      	adds	r3, r4, r2
 8018a4a:	50a7      	str	r7, [r4, r2]
 8018a4c:	b107      	cbz	r7, 8018a50 <rshift+0x68>
 8018a4e:	3304      	adds	r3, #4
 8018a50:	1b1a      	subs	r2, r3, r4
 8018a52:	42a3      	cmp	r3, r4
 8018a54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018a58:	bf08      	it	eq
 8018a5a:	2300      	moveq	r3, #0
 8018a5c:	6102      	str	r2, [r0, #16]
 8018a5e:	bf08      	it	eq
 8018a60:	6143      	streq	r3, [r0, #20]
 8018a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a66:	f8dc c000 	ldr.w	ip, [ip]
 8018a6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8018a6e:	ea4c 0707 	orr.w	r7, ip, r7
 8018a72:	f849 7b04 	str.w	r7, [r9], #4
 8018a76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018a7a:	40cf      	lsrs	r7, r1
 8018a7c:	e7da      	b.n	8018a34 <rshift+0x4c>
 8018a7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018a82:	f847 cf04 	str.w	ip, [r7, #4]!
 8018a86:	e7c3      	b.n	8018a10 <rshift+0x28>
 8018a88:	4623      	mov	r3, r4
 8018a8a:	e7e1      	b.n	8018a50 <rshift+0x68>

08018a8c <__hexdig_fun>:
 8018a8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018a90:	2b09      	cmp	r3, #9
 8018a92:	d802      	bhi.n	8018a9a <__hexdig_fun+0xe>
 8018a94:	3820      	subs	r0, #32
 8018a96:	b2c0      	uxtb	r0, r0
 8018a98:	4770      	bx	lr
 8018a9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018a9e:	2b05      	cmp	r3, #5
 8018aa0:	d801      	bhi.n	8018aa6 <__hexdig_fun+0x1a>
 8018aa2:	3847      	subs	r0, #71	; 0x47
 8018aa4:	e7f7      	b.n	8018a96 <__hexdig_fun+0xa>
 8018aa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018aaa:	2b05      	cmp	r3, #5
 8018aac:	d801      	bhi.n	8018ab2 <__hexdig_fun+0x26>
 8018aae:	3827      	subs	r0, #39	; 0x27
 8018ab0:	e7f1      	b.n	8018a96 <__hexdig_fun+0xa>
 8018ab2:	2000      	movs	r0, #0
 8018ab4:	4770      	bx	lr
	...

08018ab8 <__gethex>:
 8018ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018abc:	ed2d 8b02 	vpush	{d8}
 8018ac0:	b089      	sub	sp, #36	; 0x24
 8018ac2:	ee08 0a10 	vmov	s16, r0
 8018ac6:	9304      	str	r3, [sp, #16]
 8018ac8:	4bbc      	ldr	r3, [pc, #752]	; (8018dbc <__gethex+0x304>)
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	9301      	str	r3, [sp, #4]
 8018ace:	4618      	mov	r0, r3
 8018ad0:	468b      	mov	fp, r1
 8018ad2:	4690      	mov	r8, r2
 8018ad4:	f7e7 fb7c 	bl	80001d0 <strlen>
 8018ad8:	9b01      	ldr	r3, [sp, #4]
 8018ada:	f8db 2000 	ldr.w	r2, [fp]
 8018ade:	4403      	add	r3, r0
 8018ae0:	4682      	mov	sl, r0
 8018ae2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018ae6:	9305      	str	r3, [sp, #20]
 8018ae8:	1c93      	adds	r3, r2, #2
 8018aea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018aee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018af2:	32fe      	adds	r2, #254	; 0xfe
 8018af4:	18d1      	adds	r1, r2, r3
 8018af6:	461f      	mov	r7, r3
 8018af8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018afc:	9100      	str	r1, [sp, #0]
 8018afe:	2830      	cmp	r0, #48	; 0x30
 8018b00:	d0f8      	beq.n	8018af4 <__gethex+0x3c>
 8018b02:	f7ff ffc3 	bl	8018a8c <__hexdig_fun>
 8018b06:	4604      	mov	r4, r0
 8018b08:	2800      	cmp	r0, #0
 8018b0a:	d13a      	bne.n	8018b82 <__gethex+0xca>
 8018b0c:	9901      	ldr	r1, [sp, #4]
 8018b0e:	4652      	mov	r2, sl
 8018b10:	4638      	mov	r0, r7
 8018b12:	f001 fd5b 	bl	801a5cc <strncmp>
 8018b16:	4605      	mov	r5, r0
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	d168      	bne.n	8018bee <__gethex+0x136>
 8018b1c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018b20:	eb07 060a 	add.w	r6, r7, sl
 8018b24:	f7ff ffb2 	bl	8018a8c <__hexdig_fun>
 8018b28:	2800      	cmp	r0, #0
 8018b2a:	d062      	beq.n	8018bf2 <__gethex+0x13a>
 8018b2c:	4633      	mov	r3, r6
 8018b2e:	7818      	ldrb	r0, [r3, #0]
 8018b30:	2830      	cmp	r0, #48	; 0x30
 8018b32:	461f      	mov	r7, r3
 8018b34:	f103 0301 	add.w	r3, r3, #1
 8018b38:	d0f9      	beq.n	8018b2e <__gethex+0x76>
 8018b3a:	f7ff ffa7 	bl	8018a8c <__hexdig_fun>
 8018b3e:	2301      	movs	r3, #1
 8018b40:	fab0 f480 	clz	r4, r0
 8018b44:	0964      	lsrs	r4, r4, #5
 8018b46:	4635      	mov	r5, r6
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	463a      	mov	r2, r7
 8018b4c:	4616      	mov	r6, r2
 8018b4e:	3201      	adds	r2, #1
 8018b50:	7830      	ldrb	r0, [r6, #0]
 8018b52:	f7ff ff9b 	bl	8018a8c <__hexdig_fun>
 8018b56:	2800      	cmp	r0, #0
 8018b58:	d1f8      	bne.n	8018b4c <__gethex+0x94>
 8018b5a:	9901      	ldr	r1, [sp, #4]
 8018b5c:	4652      	mov	r2, sl
 8018b5e:	4630      	mov	r0, r6
 8018b60:	f001 fd34 	bl	801a5cc <strncmp>
 8018b64:	b980      	cbnz	r0, 8018b88 <__gethex+0xd0>
 8018b66:	b94d      	cbnz	r5, 8018b7c <__gethex+0xc4>
 8018b68:	eb06 050a 	add.w	r5, r6, sl
 8018b6c:	462a      	mov	r2, r5
 8018b6e:	4616      	mov	r6, r2
 8018b70:	3201      	adds	r2, #1
 8018b72:	7830      	ldrb	r0, [r6, #0]
 8018b74:	f7ff ff8a 	bl	8018a8c <__hexdig_fun>
 8018b78:	2800      	cmp	r0, #0
 8018b7a:	d1f8      	bne.n	8018b6e <__gethex+0xb6>
 8018b7c:	1bad      	subs	r5, r5, r6
 8018b7e:	00ad      	lsls	r5, r5, #2
 8018b80:	e004      	b.n	8018b8c <__gethex+0xd4>
 8018b82:	2400      	movs	r4, #0
 8018b84:	4625      	mov	r5, r4
 8018b86:	e7e0      	b.n	8018b4a <__gethex+0x92>
 8018b88:	2d00      	cmp	r5, #0
 8018b8a:	d1f7      	bne.n	8018b7c <__gethex+0xc4>
 8018b8c:	7833      	ldrb	r3, [r6, #0]
 8018b8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018b92:	2b50      	cmp	r3, #80	; 0x50
 8018b94:	d13b      	bne.n	8018c0e <__gethex+0x156>
 8018b96:	7873      	ldrb	r3, [r6, #1]
 8018b98:	2b2b      	cmp	r3, #43	; 0x2b
 8018b9a:	d02c      	beq.n	8018bf6 <__gethex+0x13e>
 8018b9c:	2b2d      	cmp	r3, #45	; 0x2d
 8018b9e:	d02e      	beq.n	8018bfe <__gethex+0x146>
 8018ba0:	1c71      	adds	r1, r6, #1
 8018ba2:	f04f 0900 	mov.w	r9, #0
 8018ba6:	7808      	ldrb	r0, [r1, #0]
 8018ba8:	f7ff ff70 	bl	8018a8c <__hexdig_fun>
 8018bac:	1e43      	subs	r3, r0, #1
 8018bae:	b2db      	uxtb	r3, r3
 8018bb0:	2b18      	cmp	r3, #24
 8018bb2:	d82c      	bhi.n	8018c0e <__gethex+0x156>
 8018bb4:	f1a0 0210 	sub.w	r2, r0, #16
 8018bb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018bbc:	f7ff ff66 	bl	8018a8c <__hexdig_fun>
 8018bc0:	1e43      	subs	r3, r0, #1
 8018bc2:	b2db      	uxtb	r3, r3
 8018bc4:	2b18      	cmp	r3, #24
 8018bc6:	d91d      	bls.n	8018c04 <__gethex+0x14c>
 8018bc8:	f1b9 0f00 	cmp.w	r9, #0
 8018bcc:	d000      	beq.n	8018bd0 <__gethex+0x118>
 8018bce:	4252      	negs	r2, r2
 8018bd0:	4415      	add	r5, r2
 8018bd2:	f8cb 1000 	str.w	r1, [fp]
 8018bd6:	b1e4      	cbz	r4, 8018c12 <__gethex+0x15a>
 8018bd8:	9b00      	ldr	r3, [sp, #0]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	bf14      	ite	ne
 8018bde:	2700      	movne	r7, #0
 8018be0:	2706      	moveq	r7, #6
 8018be2:	4638      	mov	r0, r7
 8018be4:	b009      	add	sp, #36	; 0x24
 8018be6:	ecbd 8b02 	vpop	{d8}
 8018bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bee:	463e      	mov	r6, r7
 8018bf0:	4625      	mov	r5, r4
 8018bf2:	2401      	movs	r4, #1
 8018bf4:	e7ca      	b.n	8018b8c <__gethex+0xd4>
 8018bf6:	f04f 0900 	mov.w	r9, #0
 8018bfa:	1cb1      	adds	r1, r6, #2
 8018bfc:	e7d3      	b.n	8018ba6 <__gethex+0xee>
 8018bfe:	f04f 0901 	mov.w	r9, #1
 8018c02:	e7fa      	b.n	8018bfa <__gethex+0x142>
 8018c04:	230a      	movs	r3, #10
 8018c06:	fb03 0202 	mla	r2, r3, r2, r0
 8018c0a:	3a10      	subs	r2, #16
 8018c0c:	e7d4      	b.n	8018bb8 <__gethex+0x100>
 8018c0e:	4631      	mov	r1, r6
 8018c10:	e7df      	b.n	8018bd2 <__gethex+0x11a>
 8018c12:	1bf3      	subs	r3, r6, r7
 8018c14:	3b01      	subs	r3, #1
 8018c16:	4621      	mov	r1, r4
 8018c18:	2b07      	cmp	r3, #7
 8018c1a:	dc0b      	bgt.n	8018c34 <__gethex+0x17c>
 8018c1c:	ee18 0a10 	vmov	r0, s16
 8018c20:	f000 fa82 	bl	8019128 <_Balloc>
 8018c24:	4604      	mov	r4, r0
 8018c26:	b940      	cbnz	r0, 8018c3a <__gethex+0x182>
 8018c28:	4b65      	ldr	r3, [pc, #404]	; (8018dc0 <__gethex+0x308>)
 8018c2a:	4602      	mov	r2, r0
 8018c2c:	21de      	movs	r1, #222	; 0xde
 8018c2e:	4865      	ldr	r0, [pc, #404]	; (8018dc4 <__gethex+0x30c>)
 8018c30:	f001 fda4 	bl	801a77c <__assert_func>
 8018c34:	3101      	adds	r1, #1
 8018c36:	105b      	asrs	r3, r3, #1
 8018c38:	e7ee      	b.n	8018c18 <__gethex+0x160>
 8018c3a:	f100 0914 	add.w	r9, r0, #20
 8018c3e:	f04f 0b00 	mov.w	fp, #0
 8018c42:	f1ca 0301 	rsb	r3, sl, #1
 8018c46:	f8cd 9008 	str.w	r9, [sp, #8]
 8018c4a:	f8cd b000 	str.w	fp, [sp]
 8018c4e:	9306      	str	r3, [sp, #24]
 8018c50:	42b7      	cmp	r7, r6
 8018c52:	d340      	bcc.n	8018cd6 <__gethex+0x21e>
 8018c54:	9802      	ldr	r0, [sp, #8]
 8018c56:	9b00      	ldr	r3, [sp, #0]
 8018c58:	f840 3b04 	str.w	r3, [r0], #4
 8018c5c:	eba0 0009 	sub.w	r0, r0, r9
 8018c60:	1080      	asrs	r0, r0, #2
 8018c62:	0146      	lsls	r6, r0, #5
 8018c64:	6120      	str	r0, [r4, #16]
 8018c66:	4618      	mov	r0, r3
 8018c68:	f000 fb54 	bl	8019314 <__hi0bits>
 8018c6c:	1a30      	subs	r0, r6, r0
 8018c6e:	f8d8 6000 	ldr.w	r6, [r8]
 8018c72:	42b0      	cmp	r0, r6
 8018c74:	dd63      	ble.n	8018d3e <__gethex+0x286>
 8018c76:	1b87      	subs	r7, r0, r6
 8018c78:	4639      	mov	r1, r7
 8018c7a:	4620      	mov	r0, r4
 8018c7c:	f000 feee 	bl	8019a5c <__any_on>
 8018c80:	4682      	mov	sl, r0
 8018c82:	b1a8      	cbz	r0, 8018cb0 <__gethex+0x1f8>
 8018c84:	1e7b      	subs	r3, r7, #1
 8018c86:	1159      	asrs	r1, r3, #5
 8018c88:	f003 021f 	and.w	r2, r3, #31
 8018c8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018c90:	f04f 0a01 	mov.w	sl, #1
 8018c94:	fa0a f202 	lsl.w	r2, sl, r2
 8018c98:	420a      	tst	r2, r1
 8018c9a:	d009      	beq.n	8018cb0 <__gethex+0x1f8>
 8018c9c:	4553      	cmp	r3, sl
 8018c9e:	dd05      	ble.n	8018cac <__gethex+0x1f4>
 8018ca0:	1eb9      	subs	r1, r7, #2
 8018ca2:	4620      	mov	r0, r4
 8018ca4:	f000 feda 	bl	8019a5c <__any_on>
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	d145      	bne.n	8018d38 <__gethex+0x280>
 8018cac:	f04f 0a02 	mov.w	sl, #2
 8018cb0:	4639      	mov	r1, r7
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f7ff fe98 	bl	80189e8 <rshift>
 8018cb8:	443d      	add	r5, r7
 8018cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018cbe:	42ab      	cmp	r3, r5
 8018cc0:	da4c      	bge.n	8018d5c <__gethex+0x2a4>
 8018cc2:	ee18 0a10 	vmov	r0, s16
 8018cc6:	4621      	mov	r1, r4
 8018cc8:	f000 fa6e 	bl	80191a8 <_Bfree>
 8018ccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018cce:	2300      	movs	r3, #0
 8018cd0:	6013      	str	r3, [r2, #0]
 8018cd2:	27a3      	movs	r7, #163	; 0xa3
 8018cd4:	e785      	b.n	8018be2 <__gethex+0x12a>
 8018cd6:	1e73      	subs	r3, r6, #1
 8018cd8:	9a05      	ldr	r2, [sp, #20]
 8018cda:	9303      	str	r3, [sp, #12]
 8018cdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018ce0:	4293      	cmp	r3, r2
 8018ce2:	d019      	beq.n	8018d18 <__gethex+0x260>
 8018ce4:	f1bb 0f20 	cmp.w	fp, #32
 8018ce8:	d107      	bne.n	8018cfa <__gethex+0x242>
 8018cea:	9b02      	ldr	r3, [sp, #8]
 8018cec:	9a00      	ldr	r2, [sp, #0]
 8018cee:	f843 2b04 	str.w	r2, [r3], #4
 8018cf2:	9302      	str	r3, [sp, #8]
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	9300      	str	r3, [sp, #0]
 8018cf8:	469b      	mov	fp, r3
 8018cfa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018cfe:	f7ff fec5 	bl	8018a8c <__hexdig_fun>
 8018d02:	9b00      	ldr	r3, [sp, #0]
 8018d04:	f000 000f 	and.w	r0, r0, #15
 8018d08:	fa00 f00b 	lsl.w	r0, r0, fp
 8018d0c:	4303      	orrs	r3, r0
 8018d0e:	9300      	str	r3, [sp, #0]
 8018d10:	f10b 0b04 	add.w	fp, fp, #4
 8018d14:	9b03      	ldr	r3, [sp, #12]
 8018d16:	e00d      	b.n	8018d34 <__gethex+0x27c>
 8018d18:	9b03      	ldr	r3, [sp, #12]
 8018d1a:	9a06      	ldr	r2, [sp, #24]
 8018d1c:	4413      	add	r3, r2
 8018d1e:	42bb      	cmp	r3, r7
 8018d20:	d3e0      	bcc.n	8018ce4 <__gethex+0x22c>
 8018d22:	4618      	mov	r0, r3
 8018d24:	9901      	ldr	r1, [sp, #4]
 8018d26:	9307      	str	r3, [sp, #28]
 8018d28:	4652      	mov	r2, sl
 8018d2a:	f001 fc4f 	bl	801a5cc <strncmp>
 8018d2e:	9b07      	ldr	r3, [sp, #28]
 8018d30:	2800      	cmp	r0, #0
 8018d32:	d1d7      	bne.n	8018ce4 <__gethex+0x22c>
 8018d34:	461e      	mov	r6, r3
 8018d36:	e78b      	b.n	8018c50 <__gethex+0x198>
 8018d38:	f04f 0a03 	mov.w	sl, #3
 8018d3c:	e7b8      	b.n	8018cb0 <__gethex+0x1f8>
 8018d3e:	da0a      	bge.n	8018d56 <__gethex+0x29e>
 8018d40:	1a37      	subs	r7, r6, r0
 8018d42:	4621      	mov	r1, r4
 8018d44:	ee18 0a10 	vmov	r0, s16
 8018d48:	463a      	mov	r2, r7
 8018d4a:	f000 fc49 	bl	80195e0 <__lshift>
 8018d4e:	1bed      	subs	r5, r5, r7
 8018d50:	4604      	mov	r4, r0
 8018d52:	f100 0914 	add.w	r9, r0, #20
 8018d56:	f04f 0a00 	mov.w	sl, #0
 8018d5a:	e7ae      	b.n	8018cba <__gethex+0x202>
 8018d5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018d60:	42a8      	cmp	r0, r5
 8018d62:	dd72      	ble.n	8018e4a <__gethex+0x392>
 8018d64:	1b45      	subs	r5, r0, r5
 8018d66:	42ae      	cmp	r6, r5
 8018d68:	dc36      	bgt.n	8018dd8 <__gethex+0x320>
 8018d6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018d6e:	2b02      	cmp	r3, #2
 8018d70:	d02a      	beq.n	8018dc8 <__gethex+0x310>
 8018d72:	2b03      	cmp	r3, #3
 8018d74:	d02c      	beq.n	8018dd0 <__gethex+0x318>
 8018d76:	2b01      	cmp	r3, #1
 8018d78:	d115      	bne.n	8018da6 <__gethex+0x2ee>
 8018d7a:	42ae      	cmp	r6, r5
 8018d7c:	d113      	bne.n	8018da6 <__gethex+0x2ee>
 8018d7e:	2e01      	cmp	r6, #1
 8018d80:	d10b      	bne.n	8018d9a <__gethex+0x2e2>
 8018d82:	9a04      	ldr	r2, [sp, #16]
 8018d84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018d88:	6013      	str	r3, [r2, #0]
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	6123      	str	r3, [r4, #16]
 8018d8e:	f8c9 3000 	str.w	r3, [r9]
 8018d92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018d94:	2762      	movs	r7, #98	; 0x62
 8018d96:	601c      	str	r4, [r3, #0]
 8018d98:	e723      	b.n	8018be2 <__gethex+0x12a>
 8018d9a:	1e71      	subs	r1, r6, #1
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	f000 fe5d 	bl	8019a5c <__any_on>
 8018da2:	2800      	cmp	r0, #0
 8018da4:	d1ed      	bne.n	8018d82 <__gethex+0x2ca>
 8018da6:	ee18 0a10 	vmov	r0, s16
 8018daa:	4621      	mov	r1, r4
 8018dac:	f000 f9fc 	bl	80191a8 <_Bfree>
 8018db0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018db2:	2300      	movs	r3, #0
 8018db4:	6013      	str	r3, [r2, #0]
 8018db6:	2750      	movs	r7, #80	; 0x50
 8018db8:	e713      	b.n	8018be2 <__gethex+0x12a>
 8018dba:	bf00      	nop
 8018dbc:	0801cd18 	.word	0x0801cd18
 8018dc0:	0801cc9c 	.word	0x0801cc9c
 8018dc4:	0801ccad 	.word	0x0801ccad
 8018dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d1eb      	bne.n	8018da6 <__gethex+0x2ee>
 8018dce:	e7d8      	b.n	8018d82 <__gethex+0x2ca>
 8018dd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d1d5      	bne.n	8018d82 <__gethex+0x2ca>
 8018dd6:	e7e6      	b.n	8018da6 <__gethex+0x2ee>
 8018dd8:	1e6f      	subs	r7, r5, #1
 8018dda:	f1ba 0f00 	cmp.w	sl, #0
 8018dde:	d131      	bne.n	8018e44 <__gethex+0x38c>
 8018de0:	b127      	cbz	r7, 8018dec <__gethex+0x334>
 8018de2:	4639      	mov	r1, r7
 8018de4:	4620      	mov	r0, r4
 8018de6:	f000 fe39 	bl	8019a5c <__any_on>
 8018dea:	4682      	mov	sl, r0
 8018dec:	117b      	asrs	r3, r7, #5
 8018dee:	2101      	movs	r1, #1
 8018df0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018df4:	f007 071f 	and.w	r7, r7, #31
 8018df8:	fa01 f707 	lsl.w	r7, r1, r7
 8018dfc:	421f      	tst	r7, r3
 8018dfe:	4629      	mov	r1, r5
 8018e00:	4620      	mov	r0, r4
 8018e02:	bf18      	it	ne
 8018e04:	f04a 0a02 	orrne.w	sl, sl, #2
 8018e08:	1b76      	subs	r6, r6, r5
 8018e0a:	f7ff fded 	bl	80189e8 <rshift>
 8018e0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018e12:	2702      	movs	r7, #2
 8018e14:	f1ba 0f00 	cmp.w	sl, #0
 8018e18:	d048      	beq.n	8018eac <__gethex+0x3f4>
 8018e1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018e1e:	2b02      	cmp	r3, #2
 8018e20:	d015      	beq.n	8018e4e <__gethex+0x396>
 8018e22:	2b03      	cmp	r3, #3
 8018e24:	d017      	beq.n	8018e56 <__gethex+0x39e>
 8018e26:	2b01      	cmp	r3, #1
 8018e28:	d109      	bne.n	8018e3e <__gethex+0x386>
 8018e2a:	f01a 0f02 	tst.w	sl, #2
 8018e2e:	d006      	beq.n	8018e3e <__gethex+0x386>
 8018e30:	f8d9 0000 	ldr.w	r0, [r9]
 8018e34:	ea4a 0a00 	orr.w	sl, sl, r0
 8018e38:	f01a 0f01 	tst.w	sl, #1
 8018e3c:	d10e      	bne.n	8018e5c <__gethex+0x3a4>
 8018e3e:	f047 0710 	orr.w	r7, r7, #16
 8018e42:	e033      	b.n	8018eac <__gethex+0x3f4>
 8018e44:	f04f 0a01 	mov.w	sl, #1
 8018e48:	e7d0      	b.n	8018dec <__gethex+0x334>
 8018e4a:	2701      	movs	r7, #1
 8018e4c:	e7e2      	b.n	8018e14 <__gethex+0x35c>
 8018e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e50:	f1c3 0301 	rsb	r3, r3, #1
 8018e54:	9315      	str	r3, [sp, #84]	; 0x54
 8018e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d0f0      	beq.n	8018e3e <__gethex+0x386>
 8018e5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018e60:	f104 0314 	add.w	r3, r4, #20
 8018e64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018e68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018e6c:	f04f 0c00 	mov.w	ip, #0
 8018e70:	4618      	mov	r0, r3
 8018e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018e7a:	d01c      	beq.n	8018eb6 <__gethex+0x3fe>
 8018e7c:	3201      	adds	r2, #1
 8018e7e:	6002      	str	r2, [r0, #0]
 8018e80:	2f02      	cmp	r7, #2
 8018e82:	f104 0314 	add.w	r3, r4, #20
 8018e86:	d13f      	bne.n	8018f08 <__gethex+0x450>
 8018e88:	f8d8 2000 	ldr.w	r2, [r8]
 8018e8c:	3a01      	subs	r2, #1
 8018e8e:	42b2      	cmp	r2, r6
 8018e90:	d10a      	bne.n	8018ea8 <__gethex+0x3f0>
 8018e92:	1171      	asrs	r1, r6, #5
 8018e94:	2201      	movs	r2, #1
 8018e96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018e9a:	f006 061f 	and.w	r6, r6, #31
 8018e9e:	fa02 f606 	lsl.w	r6, r2, r6
 8018ea2:	421e      	tst	r6, r3
 8018ea4:	bf18      	it	ne
 8018ea6:	4617      	movne	r7, r2
 8018ea8:	f047 0720 	orr.w	r7, r7, #32
 8018eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018eae:	601c      	str	r4, [r3, #0]
 8018eb0:	9b04      	ldr	r3, [sp, #16]
 8018eb2:	601d      	str	r5, [r3, #0]
 8018eb4:	e695      	b.n	8018be2 <__gethex+0x12a>
 8018eb6:	4299      	cmp	r1, r3
 8018eb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8018ebc:	d8d8      	bhi.n	8018e70 <__gethex+0x3b8>
 8018ebe:	68a3      	ldr	r3, [r4, #8]
 8018ec0:	459b      	cmp	fp, r3
 8018ec2:	db19      	blt.n	8018ef8 <__gethex+0x440>
 8018ec4:	6861      	ldr	r1, [r4, #4]
 8018ec6:	ee18 0a10 	vmov	r0, s16
 8018eca:	3101      	adds	r1, #1
 8018ecc:	f000 f92c 	bl	8019128 <_Balloc>
 8018ed0:	4681      	mov	r9, r0
 8018ed2:	b918      	cbnz	r0, 8018edc <__gethex+0x424>
 8018ed4:	4b1a      	ldr	r3, [pc, #104]	; (8018f40 <__gethex+0x488>)
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	2184      	movs	r1, #132	; 0x84
 8018eda:	e6a8      	b.n	8018c2e <__gethex+0x176>
 8018edc:	6922      	ldr	r2, [r4, #16]
 8018ede:	3202      	adds	r2, #2
 8018ee0:	f104 010c 	add.w	r1, r4, #12
 8018ee4:	0092      	lsls	r2, r2, #2
 8018ee6:	300c      	adds	r0, #12
 8018ee8:	f7fd f90a 	bl	8016100 <memcpy>
 8018eec:	4621      	mov	r1, r4
 8018eee:	ee18 0a10 	vmov	r0, s16
 8018ef2:	f000 f959 	bl	80191a8 <_Bfree>
 8018ef6:	464c      	mov	r4, r9
 8018ef8:	6923      	ldr	r3, [r4, #16]
 8018efa:	1c5a      	adds	r2, r3, #1
 8018efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018f00:	6122      	str	r2, [r4, #16]
 8018f02:	2201      	movs	r2, #1
 8018f04:	615a      	str	r2, [r3, #20]
 8018f06:	e7bb      	b.n	8018e80 <__gethex+0x3c8>
 8018f08:	6922      	ldr	r2, [r4, #16]
 8018f0a:	455a      	cmp	r2, fp
 8018f0c:	dd0b      	ble.n	8018f26 <__gethex+0x46e>
 8018f0e:	2101      	movs	r1, #1
 8018f10:	4620      	mov	r0, r4
 8018f12:	f7ff fd69 	bl	80189e8 <rshift>
 8018f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018f1a:	3501      	adds	r5, #1
 8018f1c:	42ab      	cmp	r3, r5
 8018f1e:	f6ff aed0 	blt.w	8018cc2 <__gethex+0x20a>
 8018f22:	2701      	movs	r7, #1
 8018f24:	e7c0      	b.n	8018ea8 <__gethex+0x3f0>
 8018f26:	f016 061f 	ands.w	r6, r6, #31
 8018f2a:	d0fa      	beq.n	8018f22 <__gethex+0x46a>
 8018f2c:	449a      	add	sl, r3
 8018f2e:	f1c6 0620 	rsb	r6, r6, #32
 8018f32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018f36:	f000 f9ed 	bl	8019314 <__hi0bits>
 8018f3a:	42b0      	cmp	r0, r6
 8018f3c:	dbe7      	blt.n	8018f0e <__gethex+0x456>
 8018f3e:	e7f0      	b.n	8018f22 <__gethex+0x46a>
 8018f40:	0801cc9c 	.word	0x0801cc9c

08018f44 <L_shift>:
 8018f44:	f1c2 0208 	rsb	r2, r2, #8
 8018f48:	0092      	lsls	r2, r2, #2
 8018f4a:	b570      	push	{r4, r5, r6, lr}
 8018f4c:	f1c2 0620 	rsb	r6, r2, #32
 8018f50:	6843      	ldr	r3, [r0, #4]
 8018f52:	6804      	ldr	r4, [r0, #0]
 8018f54:	fa03 f506 	lsl.w	r5, r3, r6
 8018f58:	432c      	orrs	r4, r5
 8018f5a:	40d3      	lsrs	r3, r2
 8018f5c:	6004      	str	r4, [r0, #0]
 8018f5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018f62:	4288      	cmp	r0, r1
 8018f64:	d3f4      	bcc.n	8018f50 <L_shift+0xc>
 8018f66:	bd70      	pop	{r4, r5, r6, pc}

08018f68 <__match>:
 8018f68:	b530      	push	{r4, r5, lr}
 8018f6a:	6803      	ldr	r3, [r0, #0]
 8018f6c:	3301      	adds	r3, #1
 8018f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f72:	b914      	cbnz	r4, 8018f7a <__match+0x12>
 8018f74:	6003      	str	r3, [r0, #0]
 8018f76:	2001      	movs	r0, #1
 8018f78:	bd30      	pop	{r4, r5, pc}
 8018f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018f82:	2d19      	cmp	r5, #25
 8018f84:	bf98      	it	ls
 8018f86:	3220      	addls	r2, #32
 8018f88:	42a2      	cmp	r2, r4
 8018f8a:	d0f0      	beq.n	8018f6e <__match+0x6>
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	e7f3      	b.n	8018f78 <__match+0x10>

08018f90 <__hexnan>:
 8018f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f94:	680b      	ldr	r3, [r1, #0]
 8018f96:	6801      	ldr	r1, [r0, #0]
 8018f98:	115e      	asrs	r6, r3, #5
 8018f9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018f9e:	f013 031f 	ands.w	r3, r3, #31
 8018fa2:	b087      	sub	sp, #28
 8018fa4:	bf18      	it	ne
 8018fa6:	3604      	addne	r6, #4
 8018fa8:	2500      	movs	r5, #0
 8018faa:	1f37      	subs	r7, r6, #4
 8018fac:	4682      	mov	sl, r0
 8018fae:	4690      	mov	r8, r2
 8018fb0:	9301      	str	r3, [sp, #4]
 8018fb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8018fb6:	46b9      	mov	r9, r7
 8018fb8:	463c      	mov	r4, r7
 8018fba:	9502      	str	r5, [sp, #8]
 8018fbc:	46ab      	mov	fp, r5
 8018fbe:	784a      	ldrb	r2, [r1, #1]
 8018fc0:	1c4b      	adds	r3, r1, #1
 8018fc2:	9303      	str	r3, [sp, #12]
 8018fc4:	b342      	cbz	r2, 8019018 <__hexnan+0x88>
 8018fc6:	4610      	mov	r0, r2
 8018fc8:	9105      	str	r1, [sp, #20]
 8018fca:	9204      	str	r2, [sp, #16]
 8018fcc:	f7ff fd5e 	bl	8018a8c <__hexdig_fun>
 8018fd0:	2800      	cmp	r0, #0
 8018fd2:	d14f      	bne.n	8019074 <__hexnan+0xe4>
 8018fd4:	9a04      	ldr	r2, [sp, #16]
 8018fd6:	9905      	ldr	r1, [sp, #20]
 8018fd8:	2a20      	cmp	r2, #32
 8018fda:	d818      	bhi.n	801900e <__hexnan+0x7e>
 8018fdc:	9b02      	ldr	r3, [sp, #8]
 8018fde:	459b      	cmp	fp, r3
 8018fe0:	dd13      	ble.n	801900a <__hexnan+0x7a>
 8018fe2:	454c      	cmp	r4, r9
 8018fe4:	d206      	bcs.n	8018ff4 <__hexnan+0x64>
 8018fe6:	2d07      	cmp	r5, #7
 8018fe8:	dc04      	bgt.n	8018ff4 <__hexnan+0x64>
 8018fea:	462a      	mov	r2, r5
 8018fec:	4649      	mov	r1, r9
 8018fee:	4620      	mov	r0, r4
 8018ff0:	f7ff ffa8 	bl	8018f44 <L_shift>
 8018ff4:	4544      	cmp	r4, r8
 8018ff6:	d950      	bls.n	801909a <__hexnan+0x10a>
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	f1a4 0904 	sub.w	r9, r4, #4
 8018ffe:	f844 3c04 	str.w	r3, [r4, #-4]
 8019002:	f8cd b008 	str.w	fp, [sp, #8]
 8019006:	464c      	mov	r4, r9
 8019008:	461d      	mov	r5, r3
 801900a:	9903      	ldr	r1, [sp, #12]
 801900c:	e7d7      	b.n	8018fbe <__hexnan+0x2e>
 801900e:	2a29      	cmp	r2, #41	; 0x29
 8019010:	d156      	bne.n	80190c0 <__hexnan+0x130>
 8019012:	3102      	adds	r1, #2
 8019014:	f8ca 1000 	str.w	r1, [sl]
 8019018:	f1bb 0f00 	cmp.w	fp, #0
 801901c:	d050      	beq.n	80190c0 <__hexnan+0x130>
 801901e:	454c      	cmp	r4, r9
 8019020:	d206      	bcs.n	8019030 <__hexnan+0xa0>
 8019022:	2d07      	cmp	r5, #7
 8019024:	dc04      	bgt.n	8019030 <__hexnan+0xa0>
 8019026:	462a      	mov	r2, r5
 8019028:	4649      	mov	r1, r9
 801902a:	4620      	mov	r0, r4
 801902c:	f7ff ff8a 	bl	8018f44 <L_shift>
 8019030:	4544      	cmp	r4, r8
 8019032:	d934      	bls.n	801909e <__hexnan+0x10e>
 8019034:	f1a8 0204 	sub.w	r2, r8, #4
 8019038:	4623      	mov	r3, r4
 801903a:	f853 1b04 	ldr.w	r1, [r3], #4
 801903e:	f842 1f04 	str.w	r1, [r2, #4]!
 8019042:	429f      	cmp	r7, r3
 8019044:	d2f9      	bcs.n	801903a <__hexnan+0xaa>
 8019046:	1b3b      	subs	r3, r7, r4
 8019048:	f023 0303 	bic.w	r3, r3, #3
 801904c:	3304      	adds	r3, #4
 801904e:	3401      	adds	r4, #1
 8019050:	3e03      	subs	r6, #3
 8019052:	42b4      	cmp	r4, r6
 8019054:	bf88      	it	hi
 8019056:	2304      	movhi	r3, #4
 8019058:	4443      	add	r3, r8
 801905a:	2200      	movs	r2, #0
 801905c:	f843 2b04 	str.w	r2, [r3], #4
 8019060:	429f      	cmp	r7, r3
 8019062:	d2fb      	bcs.n	801905c <__hexnan+0xcc>
 8019064:	683b      	ldr	r3, [r7, #0]
 8019066:	b91b      	cbnz	r3, 8019070 <__hexnan+0xe0>
 8019068:	4547      	cmp	r7, r8
 801906a:	d127      	bne.n	80190bc <__hexnan+0x12c>
 801906c:	2301      	movs	r3, #1
 801906e:	603b      	str	r3, [r7, #0]
 8019070:	2005      	movs	r0, #5
 8019072:	e026      	b.n	80190c2 <__hexnan+0x132>
 8019074:	3501      	adds	r5, #1
 8019076:	2d08      	cmp	r5, #8
 8019078:	f10b 0b01 	add.w	fp, fp, #1
 801907c:	dd06      	ble.n	801908c <__hexnan+0xfc>
 801907e:	4544      	cmp	r4, r8
 8019080:	d9c3      	bls.n	801900a <__hexnan+0x7a>
 8019082:	2300      	movs	r3, #0
 8019084:	f844 3c04 	str.w	r3, [r4, #-4]
 8019088:	2501      	movs	r5, #1
 801908a:	3c04      	subs	r4, #4
 801908c:	6822      	ldr	r2, [r4, #0]
 801908e:	f000 000f 	and.w	r0, r0, #15
 8019092:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019096:	6022      	str	r2, [r4, #0]
 8019098:	e7b7      	b.n	801900a <__hexnan+0x7a>
 801909a:	2508      	movs	r5, #8
 801909c:	e7b5      	b.n	801900a <__hexnan+0x7a>
 801909e:	9b01      	ldr	r3, [sp, #4]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d0df      	beq.n	8019064 <__hexnan+0xd4>
 80190a4:	f04f 32ff 	mov.w	r2, #4294967295
 80190a8:	f1c3 0320 	rsb	r3, r3, #32
 80190ac:	fa22 f303 	lsr.w	r3, r2, r3
 80190b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80190b4:	401a      	ands	r2, r3
 80190b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80190ba:	e7d3      	b.n	8019064 <__hexnan+0xd4>
 80190bc:	3f04      	subs	r7, #4
 80190be:	e7d1      	b.n	8019064 <__hexnan+0xd4>
 80190c0:	2004      	movs	r0, #4
 80190c2:	b007      	add	sp, #28
 80190c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190c8 <_localeconv_r>:
 80190c8:	4800      	ldr	r0, [pc, #0]	; (80190cc <_localeconv_r+0x4>)
 80190ca:	4770      	bx	lr
 80190cc:	200003d0 	.word	0x200003d0

080190d0 <_lseek_r>:
 80190d0:	b538      	push	{r3, r4, r5, lr}
 80190d2:	4d07      	ldr	r5, [pc, #28]	; (80190f0 <_lseek_r+0x20>)
 80190d4:	4604      	mov	r4, r0
 80190d6:	4608      	mov	r0, r1
 80190d8:	4611      	mov	r1, r2
 80190da:	2200      	movs	r2, #0
 80190dc:	602a      	str	r2, [r5, #0]
 80190de:	461a      	mov	r2, r3
 80190e0:	f7f2 fbe4 	bl	800b8ac <_lseek>
 80190e4:	1c43      	adds	r3, r0, #1
 80190e6:	d102      	bne.n	80190ee <_lseek_r+0x1e>
 80190e8:	682b      	ldr	r3, [r5, #0]
 80190ea:	b103      	cbz	r3, 80190ee <_lseek_r+0x1e>
 80190ec:	6023      	str	r3, [r4, #0]
 80190ee:	bd38      	pop	{r3, r4, r5, pc}
 80190f0:	20008138 	.word	0x20008138

080190f4 <malloc>:
 80190f4:	4b02      	ldr	r3, [pc, #8]	; (8019100 <malloc+0xc>)
 80190f6:	4601      	mov	r1, r0
 80190f8:	6818      	ldr	r0, [r3, #0]
 80190fa:	f000 bd2f 	b.w	8019b5c <_malloc_r>
 80190fe:	bf00      	nop
 8019100:	20000278 	.word	0x20000278

08019104 <__ascii_mbtowc>:
 8019104:	b082      	sub	sp, #8
 8019106:	b901      	cbnz	r1, 801910a <__ascii_mbtowc+0x6>
 8019108:	a901      	add	r1, sp, #4
 801910a:	b142      	cbz	r2, 801911e <__ascii_mbtowc+0x1a>
 801910c:	b14b      	cbz	r3, 8019122 <__ascii_mbtowc+0x1e>
 801910e:	7813      	ldrb	r3, [r2, #0]
 8019110:	600b      	str	r3, [r1, #0]
 8019112:	7812      	ldrb	r2, [r2, #0]
 8019114:	1e10      	subs	r0, r2, #0
 8019116:	bf18      	it	ne
 8019118:	2001      	movne	r0, #1
 801911a:	b002      	add	sp, #8
 801911c:	4770      	bx	lr
 801911e:	4610      	mov	r0, r2
 8019120:	e7fb      	b.n	801911a <__ascii_mbtowc+0x16>
 8019122:	f06f 0001 	mvn.w	r0, #1
 8019126:	e7f8      	b.n	801911a <__ascii_mbtowc+0x16>

08019128 <_Balloc>:
 8019128:	b570      	push	{r4, r5, r6, lr}
 801912a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801912c:	4604      	mov	r4, r0
 801912e:	460d      	mov	r5, r1
 8019130:	b976      	cbnz	r6, 8019150 <_Balloc+0x28>
 8019132:	2010      	movs	r0, #16
 8019134:	f7ff ffde 	bl	80190f4 <malloc>
 8019138:	4602      	mov	r2, r0
 801913a:	6260      	str	r0, [r4, #36]	; 0x24
 801913c:	b920      	cbnz	r0, 8019148 <_Balloc+0x20>
 801913e:	4b18      	ldr	r3, [pc, #96]	; (80191a0 <_Balloc+0x78>)
 8019140:	4818      	ldr	r0, [pc, #96]	; (80191a4 <_Balloc+0x7c>)
 8019142:	2166      	movs	r1, #102	; 0x66
 8019144:	f001 fb1a 	bl	801a77c <__assert_func>
 8019148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801914c:	6006      	str	r6, [r0, #0]
 801914e:	60c6      	str	r6, [r0, #12]
 8019150:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019152:	68f3      	ldr	r3, [r6, #12]
 8019154:	b183      	cbz	r3, 8019178 <_Balloc+0x50>
 8019156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019158:	68db      	ldr	r3, [r3, #12]
 801915a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801915e:	b9b8      	cbnz	r0, 8019190 <_Balloc+0x68>
 8019160:	2101      	movs	r1, #1
 8019162:	fa01 f605 	lsl.w	r6, r1, r5
 8019166:	1d72      	adds	r2, r6, #5
 8019168:	0092      	lsls	r2, r2, #2
 801916a:	4620      	mov	r0, r4
 801916c:	f000 fc97 	bl	8019a9e <_calloc_r>
 8019170:	b160      	cbz	r0, 801918c <_Balloc+0x64>
 8019172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019176:	e00e      	b.n	8019196 <_Balloc+0x6e>
 8019178:	2221      	movs	r2, #33	; 0x21
 801917a:	2104      	movs	r1, #4
 801917c:	4620      	mov	r0, r4
 801917e:	f000 fc8e 	bl	8019a9e <_calloc_r>
 8019182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019184:	60f0      	str	r0, [r6, #12]
 8019186:	68db      	ldr	r3, [r3, #12]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d1e4      	bne.n	8019156 <_Balloc+0x2e>
 801918c:	2000      	movs	r0, #0
 801918e:	bd70      	pop	{r4, r5, r6, pc}
 8019190:	6802      	ldr	r2, [r0, #0]
 8019192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019196:	2300      	movs	r3, #0
 8019198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801919c:	e7f7      	b.n	801918e <_Balloc+0x66>
 801919e:	bf00      	nop
 80191a0:	0801cc26 	.word	0x0801cc26
 80191a4:	0801cd2c 	.word	0x0801cd2c

080191a8 <_Bfree>:
 80191a8:	b570      	push	{r4, r5, r6, lr}
 80191aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80191ac:	4605      	mov	r5, r0
 80191ae:	460c      	mov	r4, r1
 80191b0:	b976      	cbnz	r6, 80191d0 <_Bfree+0x28>
 80191b2:	2010      	movs	r0, #16
 80191b4:	f7ff ff9e 	bl	80190f4 <malloc>
 80191b8:	4602      	mov	r2, r0
 80191ba:	6268      	str	r0, [r5, #36]	; 0x24
 80191bc:	b920      	cbnz	r0, 80191c8 <_Bfree+0x20>
 80191be:	4b09      	ldr	r3, [pc, #36]	; (80191e4 <_Bfree+0x3c>)
 80191c0:	4809      	ldr	r0, [pc, #36]	; (80191e8 <_Bfree+0x40>)
 80191c2:	218a      	movs	r1, #138	; 0x8a
 80191c4:	f001 fada 	bl	801a77c <__assert_func>
 80191c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80191cc:	6006      	str	r6, [r0, #0]
 80191ce:	60c6      	str	r6, [r0, #12]
 80191d0:	b13c      	cbz	r4, 80191e2 <_Bfree+0x3a>
 80191d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80191d4:	6862      	ldr	r2, [r4, #4]
 80191d6:	68db      	ldr	r3, [r3, #12]
 80191d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80191dc:	6021      	str	r1, [r4, #0]
 80191de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80191e2:	bd70      	pop	{r4, r5, r6, pc}
 80191e4:	0801cc26 	.word	0x0801cc26
 80191e8:	0801cd2c 	.word	0x0801cd2c

080191ec <__multadd>:
 80191ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191f0:	690e      	ldr	r6, [r1, #16]
 80191f2:	4607      	mov	r7, r0
 80191f4:	4698      	mov	r8, r3
 80191f6:	460c      	mov	r4, r1
 80191f8:	f101 0014 	add.w	r0, r1, #20
 80191fc:	2300      	movs	r3, #0
 80191fe:	6805      	ldr	r5, [r0, #0]
 8019200:	b2a9      	uxth	r1, r5
 8019202:	fb02 8101 	mla	r1, r2, r1, r8
 8019206:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801920a:	0c2d      	lsrs	r5, r5, #16
 801920c:	fb02 c505 	mla	r5, r2, r5, ip
 8019210:	b289      	uxth	r1, r1
 8019212:	3301      	adds	r3, #1
 8019214:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019218:	429e      	cmp	r6, r3
 801921a:	f840 1b04 	str.w	r1, [r0], #4
 801921e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019222:	dcec      	bgt.n	80191fe <__multadd+0x12>
 8019224:	f1b8 0f00 	cmp.w	r8, #0
 8019228:	d022      	beq.n	8019270 <__multadd+0x84>
 801922a:	68a3      	ldr	r3, [r4, #8]
 801922c:	42b3      	cmp	r3, r6
 801922e:	dc19      	bgt.n	8019264 <__multadd+0x78>
 8019230:	6861      	ldr	r1, [r4, #4]
 8019232:	4638      	mov	r0, r7
 8019234:	3101      	adds	r1, #1
 8019236:	f7ff ff77 	bl	8019128 <_Balloc>
 801923a:	4605      	mov	r5, r0
 801923c:	b928      	cbnz	r0, 801924a <__multadd+0x5e>
 801923e:	4602      	mov	r2, r0
 8019240:	4b0d      	ldr	r3, [pc, #52]	; (8019278 <__multadd+0x8c>)
 8019242:	480e      	ldr	r0, [pc, #56]	; (801927c <__multadd+0x90>)
 8019244:	21b5      	movs	r1, #181	; 0xb5
 8019246:	f001 fa99 	bl	801a77c <__assert_func>
 801924a:	6922      	ldr	r2, [r4, #16]
 801924c:	3202      	adds	r2, #2
 801924e:	f104 010c 	add.w	r1, r4, #12
 8019252:	0092      	lsls	r2, r2, #2
 8019254:	300c      	adds	r0, #12
 8019256:	f7fc ff53 	bl	8016100 <memcpy>
 801925a:	4621      	mov	r1, r4
 801925c:	4638      	mov	r0, r7
 801925e:	f7ff ffa3 	bl	80191a8 <_Bfree>
 8019262:	462c      	mov	r4, r5
 8019264:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019268:	3601      	adds	r6, #1
 801926a:	f8c3 8014 	str.w	r8, [r3, #20]
 801926e:	6126      	str	r6, [r4, #16]
 8019270:	4620      	mov	r0, r4
 8019272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019276:	bf00      	nop
 8019278:	0801cc9c 	.word	0x0801cc9c
 801927c:	0801cd2c 	.word	0x0801cd2c

08019280 <__s2b>:
 8019280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019284:	460c      	mov	r4, r1
 8019286:	4615      	mov	r5, r2
 8019288:	461f      	mov	r7, r3
 801928a:	2209      	movs	r2, #9
 801928c:	3308      	adds	r3, #8
 801928e:	4606      	mov	r6, r0
 8019290:	fb93 f3f2 	sdiv	r3, r3, r2
 8019294:	2100      	movs	r1, #0
 8019296:	2201      	movs	r2, #1
 8019298:	429a      	cmp	r2, r3
 801929a:	db09      	blt.n	80192b0 <__s2b+0x30>
 801929c:	4630      	mov	r0, r6
 801929e:	f7ff ff43 	bl	8019128 <_Balloc>
 80192a2:	b940      	cbnz	r0, 80192b6 <__s2b+0x36>
 80192a4:	4602      	mov	r2, r0
 80192a6:	4b19      	ldr	r3, [pc, #100]	; (801930c <__s2b+0x8c>)
 80192a8:	4819      	ldr	r0, [pc, #100]	; (8019310 <__s2b+0x90>)
 80192aa:	21ce      	movs	r1, #206	; 0xce
 80192ac:	f001 fa66 	bl	801a77c <__assert_func>
 80192b0:	0052      	lsls	r2, r2, #1
 80192b2:	3101      	adds	r1, #1
 80192b4:	e7f0      	b.n	8019298 <__s2b+0x18>
 80192b6:	9b08      	ldr	r3, [sp, #32]
 80192b8:	6143      	str	r3, [r0, #20]
 80192ba:	2d09      	cmp	r5, #9
 80192bc:	f04f 0301 	mov.w	r3, #1
 80192c0:	6103      	str	r3, [r0, #16]
 80192c2:	dd16      	ble.n	80192f2 <__s2b+0x72>
 80192c4:	f104 0909 	add.w	r9, r4, #9
 80192c8:	46c8      	mov	r8, r9
 80192ca:	442c      	add	r4, r5
 80192cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80192d0:	4601      	mov	r1, r0
 80192d2:	3b30      	subs	r3, #48	; 0x30
 80192d4:	220a      	movs	r2, #10
 80192d6:	4630      	mov	r0, r6
 80192d8:	f7ff ff88 	bl	80191ec <__multadd>
 80192dc:	45a0      	cmp	r8, r4
 80192de:	d1f5      	bne.n	80192cc <__s2b+0x4c>
 80192e0:	f1a5 0408 	sub.w	r4, r5, #8
 80192e4:	444c      	add	r4, r9
 80192e6:	1b2d      	subs	r5, r5, r4
 80192e8:	1963      	adds	r3, r4, r5
 80192ea:	42bb      	cmp	r3, r7
 80192ec:	db04      	blt.n	80192f8 <__s2b+0x78>
 80192ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192f2:	340a      	adds	r4, #10
 80192f4:	2509      	movs	r5, #9
 80192f6:	e7f6      	b.n	80192e6 <__s2b+0x66>
 80192f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80192fc:	4601      	mov	r1, r0
 80192fe:	3b30      	subs	r3, #48	; 0x30
 8019300:	220a      	movs	r2, #10
 8019302:	4630      	mov	r0, r6
 8019304:	f7ff ff72 	bl	80191ec <__multadd>
 8019308:	e7ee      	b.n	80192e8 <__s2b+0x68>
 801930a:	bf00      	nop
 801930c:	0801cc9c 	.word	0x0801cc9c
 8019310:	0801cd2c 	.word	0x0801cd2c

08019314 <__hi0bits>:
 8019314:	0c03      	lsrs	r3, r0, #16
 8019316:	041b      	lsls	r3, r3, #16
 8019318:	b9d3      	cbnz	r3, 8019350 <__hi0bits+0x3c>
 801931a:	0400      	lsls	r0, r0, #16
 801931c:	2310      	movs	r3, #16
 801931e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019322:	bf04      	itt	eq
 8019324:	0200      	lsleq	r0, r0, #8
 8019326:	3308      	addeq	r3, #8
 8019328:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801932c:	bf04      	itt	eq
 801932e:	0100      	lsleq	r0, r0, #4
 8019330:	3304      	addeq	r3, #4
 8019332:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019336:	bf04      	itt	eq
 8019338:	0080      	lsleq	r0, r0, #2
 801933a:	3302      	addeq	r3, #2
 801933c:	2800      	cmp	r0, #0
 801933e:	db05      	blt.n	801934c <__hi0bits+0x38>
 8019340:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019344:	f103 0301 	add.w	r3, r3, #1
 8019348:	bf08      	it	eq
 801934a:	2320      	moveq	r3, #32
 801934c:	4618      	mov	r0, r3
 801934e:	4770      	bx	lr
 8019350:	2300      	movs	r3, #0
 8019352:	e7e4      	b.n	801931e <__hi0bits+0xa>

08019354 <__lo0bits>:
 8019354:	6803      	ldr	r3, [r0, #0]
 8019356:	f013 0207 	ands.w	r2, r3, #7
 801935a:	4601      	mov	r1, r0
 801935c:	d00b      	beq.n	8019376 <__lo0bits+0x22>
 801935e:	07da      	lsls	r2, r3, #31
 8019360:	d424      	bmi.n	80193ac <__lo0bits+0x58>
 8019362:	0798      	lsls	r0, r3, #30
 8019364:	bf49      	itett	mi
 8019366:	085b      	lsrmi	r3, r3, #1
 8019368:	089b      	lsrpl	r3, r3, #2
 801936a:	2001      	movmi	r0, #1
 801936c:	600b      	strmi	r3, [r1, #0]
 801936e:	bf5c      	itt	pl
 8019370:	600b      	strpl	r3, [r1, #0]
 8019372:	2002      	movpl	r0, #2
 8019374:	4770      	bx	lr
 8019376:	b298      	uxth	r0, r3
 8019378:	b9b0      	cbnz	r0, 80193a8 <__lo0bits+0x54>
 801937a:	0c1b      	lsrs	r3, r3, #16
 801937c:	2010      	movs	r0, #16
 801937e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019382:	bf04      	itt	eq
 8019384:	0a1b      	lsreq	r3, r3, #8
 8019386:	3008      	addeq	r0, #8
 8019388:	071a      	lsls	r2, r3, #28
 801938a:	bf04      	itt	eq
 801938c:	091b      	lsreq	r3, r3, #4
 801938e:	3004      	addeq	r0, #4
 8019390:	079a      	lsls	r2, r3, #30
 8019392:	bf04      	itt	eq
 8019394:	089b      	lsreq	r3, r3, #2
 8019396:	3002      	addeq	r0, #2
 8019398:	07da      	lsls	r2, r3, #31
 801939a:	d403      	bmi.n	80193a4 <__lo0bits+0x50>
 801939c:	085b      	lsrs	r3, r3, #1
 801939e:	f100 0001 	add.w	r0, r0, #1
 80193a2:	d005      	beq.n	80193b0 <__lo0bits+0x5c>
 80193a4:	600b      	str	r3, [r1, #0]
 80193a6:	4770      	bx	lr
 80193a8:	4610      	mov	r0, r2
 80193aa:	e7e8      	b.n	801937e <__lo0bits+0x2a>
 80193ac:	2000      	movs	r0, #0
 80193ae:	4770      	bx	lr
 80193b0:	2020      	movs	r0, #32
 80193b2:	4770      	bx	lr

080193b4 <__i2b>:
 80193b4:	b510      	push	{r4, lr}
 80193b6:	460c      	mov	r4, r1
 80193b8:	2101      	movs	r1, #1
 80193ba:	f7ff feb5 	bl	8019128 <_Balloc>
 80193be:	4602      	mov	r2, r0
 80193c0:	b928      	cbnz	r0, 80193ce <__i2b+0x1a>
 80193c2:	4b05      	ldr	r3, [pc, #20]	; (80193d8 <__i2b+0x24>)
 80193c4:	4805      	ldr	r0, [pc, #20]	; (80193dc <__i2b+0x28>)
 80193c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80193ca:	f001 f9d7 	bl	801a77c <__assert_func>
 80193ce:	2301      	movs	r3, #1
 80193d0:	6144      	str	r4, [r0, #20]
 80193d2:	6103      	str	r3, [r0, #16]
 80193d4:	bd10      	pop	{r4, pc}
 80193d6:	bf00      	nop
 80193d8:	0801cc9c 	.word	0x0801cc9c
 80193dc:	0801cd2c 	.word	0x0801cd2c

080193e0 <__multiply>:
 80193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e4:	4614      	mov	r4, r2
 80193e6:	690a      	ldr	r2, [r1, #16]
 80193e8:	6923      	ldr	r3, [r4, #16]
 80193ea:	429a      	cmp	r2, r3
 80193ec:	bfb8      	it	lt
 80193ee:	460b      	movlt	r3, r1
 80193f0:	460d      	mov	r5, r1
 80193f2:	bfbc      	itt	lt
 80193f4:	4625      	movlt	r5, r4
 80193f6:	461c      	movlt	r4, r3
 80193f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80193fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019400:	68ab      	ldr	r3, [r5, #8]
 8019402:	6869      	ldr	r1, [r5, #4]
 8019404:	eb0a 0709 	add.w	r7, sl, r9
 8019408:	42bb      	cmp	r3, r7
 801940a:	b085      	sub	sp, #20
 801940c:	bfb8      	it	lt
 801940e:	3101      	addlt	r1, #1
 8019410:	f7ff fe8a 	bl	8019128 <_Balloc>
 8019414:	b930      	cbnz	r0, 8019424 <__multiply+0x44>
 8019416:	4602      	mov	r2, r0
 8019418:	4b42      	ldr	r3, [pc, #264]	; (8019524 <__multiply+0x144>)
 801941a:	4843      	ldr	r0, [pc, #268]	; (8019528 <__multiply+0x148>)
 801941c:	f240 115d 	movw	r1, #349	; 0x15d
 8019420:	f001 f9ac 	bl	801a77c <__assert_func>
 8019424:	f100 0614 	add.w	r6, r0, #20
 8019428:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801942c:	4633      	mov	r3, r6
 801942e:	2200      	movs	r2, #0
 8019430:	4543      	cmp	r3, r8
 8019432:	d31e      	bcc.n	8019472 <__multiply+0x92>
 8019434:	f105 0c14 	add.w	ip, r5, #20
 8019438:	f104 0314 	add.w	r3, r4, #20
 801943c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019440:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019444:	9202      	str	r2, [sp, #8]
 8019446:	ebac 0205 	sub.w	r2, ip, r5
 801944a:	3a15      	subs	r2, #21
 801944c:	f022 0203 	bic.w	r2, r2, #3
 8019450:	3204      	adds	r2, #4
 8019452:	f105 0115 	add.w	r1, r5, #21
 8019456:	458c      	cmp	ip, r1
 8019458:	bf38      	it	cc
 801945a:	2204      	movcc	r2, #4
 801945c:	9201      	str	r2, [sp, #4]
 801945e:	9a02      	ldr	r2, [sp, #8]
 8019460:	9303      	str	r3, [sp, #12]
 8019462:	429a      	cmp	r2, r3
 8019464:	d808      	bhi.n	8019478 <__multiply+0x98>
 8019466:	2f00      	cmp	r7, #0
 8019468:	dc55      	bgt.n	8019516 <__multiply+0x136>
 801946a:	6107      	str	r7, [r0, #16]
 801946c:	b005      	add	sp, #20
 801946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019472:	f843 2b04 	str.w	r2, [r3], #4
 8019476:	e7db      	b.n	8019430 <__multiply+0x50>
 8019478:	f8b3 a000 	ldrh.w	sl, [r3]
 801947c:	f1ba 0f00 	cmp.w	sl, #0
 8019480:	d020      	beq.n	80194c4 <__multiply+0xe4>
 8019482:	f105 0e14 	add.w	lr, r5, #20
 8019486:	46b1      	mov	r9, r6
 8019488:	2200      	movs	r2, #0
 801948a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801948e:	f8d9 b000 	ldr.w	fp, [r9]
 8019492:	b2a1      	uxth	r1, r4
 8019494:	fa1f fb8b 	uxth.w	fp, fp
 8019498:	fb0a b101 	mla	r1, sl, r1, fp
 801949c:	4411      	add	r1, r2
 801949e:	f8d9 2000 	ldr.w	r2, [r9]
 80194a2:	0c24      	lsrs	r4, r4, #16
 80194a4:	0c12      	lsrs	r2, r2, #16
 80194a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80194aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80194ae:	b289      	uxth	r1, r1
 80194b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80194b4:	45f4      	cmp	ip, lr
 80194b6:	f849 1b04 	str.w	r1, [r9], #4
 80194ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80194be:	d8e4      	bhi.n	801948a <__multiply+0xaa>
 80194c0:	9901      	ldr	r1, [sp, #4]
 80194c2:	5072      	str	r2, [r6, r1]
 80194c4:	9a03      	ldr	r2, [sp, #12]
 80194c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80194ca:	3304      	adds	r3, #4
 80194cc:	f1b9 0f00 	cmp.w	r9, #0
 80194d0:	d01f      	beq.n	8019512 <__multiply+0x132>
 80194d2:	6834      	ldr	r4, [r6, #0]
 80194d4:	f105 0114 	add.w	r1, r5, #20
 80194d8:	46b6      	mov	lr, r6
 80194da:	f04f 0a00 	mov.w	sl, #0
 80194de:	880a      	ldrh	r2, [r1, #0]
 80194e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80194e4:	fb09 b202 	mla	r2, r9, r2, fp
 80194e8:	4492      	add	sl, r2
 80194ea:	b2a4      	uxth	r4, r4
 80194ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80194f0:	f84e 4b04 	str.w	r4, [lr], #4
 80194f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80194f8:	f8be 2000 	ldrh.w	r2, [lr]
 80194fc:	0c24      	lsrs	r4, r4, #16
 80194fe:	fb09 2404 	mla	r4, r9, r4, r2
 8019502:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019506:	458c      	cmp	ip, r1
 8019508:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801950c:	d8e7      	bhi.n	80194de <__multiply+0xfe>
 801950e:	9a01      	ldr	r2, [sp, #4]
 8019510:	50b4      	str	r4, [r6, r2]
 8019512:	3604      	adds	r6, #4
 8019514:	e7a3      	b.n	801945e <__multiply+0x7e>
 8019516:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801951a:	2b00      	cmp	r3, #0
 801951c:	d1a5      	bne.n	801946a <__multiply+0x8a>
 801951e:	3f01      	subs	r7, #1
 8019520:	e7a1      	b.n	8019466 <__multiply+0x86>
 8019522:	bf00      	nop
 8019524:	0801cc9c 	.word	0x0801cc9c
 8019528:	0801cd2c 	.word	0x0801cd2c

0801952c <__pow5mult>:
 801952c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019530:	4615      	mov	r5, r2
 8019532:	f012 0203 	ands.w	r2, r2, #3
 8019536:	4606      	mov	r6, r0
 8019538:	460f      	mov	r7, r1
 801953a:	d007      	beq.n	801954c <__pow5mult+0x20>
 801953c:	4c25      	ldr	r4, [pc, #148]	; (80195d4 <__pow5mult+0xa8>)
 801953e:	3a01      	subs	r2, #1
 8019540:	2300      	movs	r3, #0
 8019542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019546:	f7ff fe51 	bl	80191ec <__multadd>
 801954a:	4607      	mov	r7, r0
 801954c:	10ad      	asrs	r5, r5, #2
 801954e:	d03d      	beq.n	80195cc <__pow5mult+0xa0>
 8019550:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019552:	b97c      	cbnz	r4, 8019574 <__pow5mult+0x48>
 8019554:	2010      	movs	r0, #16
 8019556:	f7ff fdcd 	bl	80190f4 <malloc>
 801955a:	4602      	mov	r2, r0
 801955c:	6270      	str	r0, [r6, #36]	; 0x24
 801955e:	b928      	cbnz	r0, 801956c <__pow5mult+0x40>
 8019560:	4b1d      	ldr	r3, [pc, #116]	; (80195d8 <__pow5mult+0xac>)
 8019562:	481e      	ldr	r0, [pc, #120]	; (80195dc <__pow5mult+0xb0>)
 8019564:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019568:	f001 f908 	bl	801a77c <__assert_func>
 801956c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019570:	6004      	str	r4, [r0, #0]
 8019572:	60c4      	str	r4, [r0, #12]
 8019574:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801957c:	b94c      	cbnz	r4, 8019592 <__pow5mult+0x66>
 801957e:	f240 2171 	movw	r1, #625	; 0x271
 8019582:	4630      	mov	r0, r6
 8019584:	f7ff ff16 	bl	80193b4 <__i2b>
 8019588:	2300      	movs	r3, #0
 801958a:	f8c8 0008 	str.w	r0, [r8, #8]
 801958e:	4604      	mov	r4, r0
 8019590:	6003      	str	r3, [r0, #0]
 8019592:	f04f 0900 	mov.w	r9, #0
 8019596:	07eb      	lsls	r3, r5, #31
 8019598:	d50a      	bpl.n	80195b0 <__pow5mult+0x84>
 801959a:	4639      	mov	r1, r7
 801959c:	4622      	mov	r2, r4
 801959e:	4630      	mov	r0, r6
 80195a0:	f7ff ff1e 	bl	80193e0 <__multiply>
 80195a4:	4639      	mov	r1, r7
 80195a6:	4680      	mov	r8, r0
 80195a8:	4630      	mov	r0, r6
 80195aa:	f7ff fdfd 	bl	80191a8 <_Bfree>
 80195ae:	4647      	mov	r7, r8
 80195b0:	106d      	asrs	r5, r5, #1
 80195b2:	d00b      	beq.n	80195cc <__pow5mult+0xa0>
 80195b4:	6820      	ldr	r0, [r4, #0]
 80195b6:	b938      	cbnz	r0, 80195c8 <__pow5mult+0x9c>
 80195b8:	4622      	mov	r2, r4
 80195ba:	4621      	mov	r1, r4
 80195bc:	4630      	mov	r0, r6
 80195be:	f7ff ff0f 	bl	80193e0 <__multiply>
 80195c2:	6020      	str	r0, [r4, #0]
 80195c4:	f8c0 9000 	str.w	r9, [r0]
 80195c8:	4604      	mov	r4, r0
 80195ca:	e7e4      	b.n	8019596 <__pow5mult+0x6a>
 80195cc:	4638      	mov	r0, r7
 80195ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195d2:	bf00      	nop
 80195d4:	0801ce80 	.word	0x0801ce80
 80195d8:	0801cc26 	.word	0x0801cc26
 80195dc:	0801cd2c 	.word	0x0801cd2c

080195e0 <__lshift>:
 80195e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195e4:	460c      	mov	r4, r1
 80195e6:	6849      	ldr	r1, [r1, #4]
 80195e8:	6923      	ldr	r3, [r4, #16]
 80195ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80195ee:	68a3      	ldr	r3, [r4, #8]
 80195f0:	4607      	mov	r7, r0
 80195f2:	4691      	mov	r9, r2
 80195f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80195f8:	f108 0601 	add.w	r6, r8, #1
 80195fc:	42b3      	cmp	r3, r6
 80195fe:	db0b      	blt.n	8019618 <__lshift+0x38>
 8019600:	4638      	mov	r0, r7
 8019602:	f7ff fd91 	bl	8019128 <_Balloc>
 8019606:	4605      	mov	r5, r0
 8019608:	b948      	cbnz	r0, 801961e <__lshift+0x3e>
 801960a:	4602      	mov	r2, r0
 801960c:	4b28      	ldr	r3, [pc, #160]	; (80196b0 <__lshift+0xd0>)
 801960e:	4829      	ldr	r0, [pc, #164]	; (80196b4 <__lshift+0xd4>)
 8019610:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019614:	f001 f8b2 	bl	801a77c <__assert_func>
 8019618:	3101      	adds	r1, #1
 801961a:	005b      	lsls	r3, r3, #1
 801961c:	e7ee      	b.n	80195fc <__lshift+0x1c>
 801961e:	2300      	movs	r3, #0
 8019620:	f100 0114 	add.w	r1, r0, #20
 8019624:	f100 0210 	add.w	r2, r0, #16
 8019628:	4618      	mov	r0, r3
 801962a:	4553      	cmp	r3, sl
 801962c:	db33      	blt.n	8019696 <__lshift+0xb6>
 801962e:	6920      	ldr	r0, [r4, #16]
 8019630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019634:	f104 0314 	add.w	r3, r4, #20
 8019638:	f019 091f 	ands.w	r9, r9, #31
 801963c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019640:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019644:	d02b      	beq.n	801969e <__lshift+0xbe>
 8019646:	f1c9 0e20 	rsb	lr, r9, #32
 801964a:	468a      	mov	sl, r1
 801964c:	2200      	movs	r2, #0
 801964e:	6818      	ldr	r0, [r3, #0]
 8019650:	fa00 f009 	lsl.w	r0, r0, r9
 8019654:	4302      	orrs	r2, r0
 8019656:	f84a 2b04 	str.w	r2, [sl], #4
 801965a:	f853 2b04 	ldr.w	r2, [r3], #4
 801965e:	459c      	cmp	ip, r3
 8019660:	fa22 f20e 	lsr.w	r2, r2, lr
 8019664:	d8f3      	bhi.n	801964e <__lshift+0x6e>
 8019666:	ebac 0304 	sub.w	r3, ip, r4
 801966a:	3b15      	subs	r3, #21
 801966c:	f023 0303 	bic.w	r3, r3, #3
 8019670:	3304      	adds	r3, #4
 8019672:	f104 0015 	add.w	r0, r4, #21
 8019676:	4584      	cmp	ip, r0
 8019678:	bf38      	it	cc
 801967a:	2304      	movcc	r3, #4
 801967c:	50ca      	str	r2, [r1, r3]
 801967e:	b10a      	cbz	r2, 8019684 <__lshift+0xa4>
 8019680:	f108 0602 	add.w	r6, r8, #2
 8019684:	3e01      	subs	r6, #1
 8019686:	4638      	mov	r0, r7
 8019688:	612e      	str	r6, [r5, #16]
 801968a:	4621      	mov	r1, r4
 801968c:	f7ff fd8c 	bl	80191a8 <_Bfree>
 8019690:	4628      	mov	r0, r5
 8019692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019696:	f842 0f04 	str.w	r0, [r2, #4]!
 801969a:	3301      	adds	r3, #1
 801969c:	e7c5      	b.n	801962a <__lshift+0x4a>
 801969e:	3904      	subs	r1, #4
 80196a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80196a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80196a8:	459c      	cmp	ip, r3
 80196aa:	d8f9      	bhi.n	80196a0 <__lshift+0xc0>
 80196ac:	e7ea      	b.n	8019684 <__lshift+0xa4>
 80196ae:	bf00      	nop
 80196b0:	0801cc9c 	.word	0x0801cc9c
 80196b4:	0801cd2c 	.word	0x0801cd2c

080196b8 <__mcmp>:
 80196b8:	b530      	push	{r4, r5, lr}
 80196ba:	6902      	ldr	r2, [r0, #16]
 80196bc:	690c      	ldr	r4, [r1, #16]
 80196be:	1b12      	subs	r2, r2, r4
 80196c0:	d10e      	bne.n	80196e0 <__mcmp+0x28>
 80196c2:	f100 0314 	add.w	r3, r0, #20
 80196c6:	3114      	adds	r1, #20
 80196c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80196cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80196d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80196d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80196d8:	42a5      	cmp	r5, r4
 80196da:	d003      	beq.n	80196e4 <__mcmp+0x2c>
 80196dc:	d305      	bcc.n	80196ea <__mcmp+0x32>
 80196de:	2201      	movs	r2, #1
 80196e0:	4610      	mov	r0, r2
 80196e2:	bd30      	pop	{r4, r5, pc}
 80196e4:	4283      	cmp	r3, r0
 80196e6:	d3f3      	bcc.n	80196d0 <__mcmp+0x18>
 80196e8:	e7fa      	b.n	80196e0 <__mcmp+0x28>
 80196ea:	f04f 32ff 	mov.w	r2, #4294967295
 80196ee:	e7f7      	b.n	80196e0 <__mcmp+0x28>

080196f0 <__mdiff>:
 80196f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f4:	460c      	mov	r4, r1
 80196f6:	4606      	mov	r6, r0
 80196f8:	4611      	mov	r1, r2
 80196fa:	4620      	mov	r0, r4
 80196fc:	4617      	mov	r7, r2
 80196fe:	f7ff ffdb 	bl	80196b8 <__mcmp>
 8019702:	1e05      	subs	r5, r0, #0
 8019704:	d110      	bne.n	8019728 <__mdiff+0x38>
 8019706:	4629      	mov	r1, r5
 8019708:	4630      	mov	r0, r6
 801970a:	f7ff fd0d 	bl	8019128 <_Balloc>
 801970e:	b930      	cbnz	r0, 801971e <__mdiff+0x2e>
 8019710:	4b39      	ldr	r3, [pc, #228]	; (80197f8 <__mdiff+0x108>)
 8019712:	4602      	mov	r2, r0
 8019714:	f240 2132 	movw	r1, #562	; 0x232
 8019718:	4838      	ldr	r0, [pc, #224]	; (80197fc <__mdiff+0x10c>)
 801971a:	f001 f82f 	bl	801a77c <__assert_func>
 801971e:	2301      	movs	r3, #1
 8019720:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019728:	bfa4      	itt	ge
 801972a:	463b      	movge	r3, r7
 801972c:	4627      	movge	r7, r4
 801972e:	4630      	mov	r0, r6
 8019730:	6879      	ldr	r1, [r7, #4]
 8019732:	bfa6      	itte	ge
 8019734:	461c      	movge	r4, r3
 8019736:	2500      	movge	r5, #0
 8019738:	2501      	movlt	r5, #1
 801973a:	f7ff fcf5 	bl	8019128 <_Balloc>
 801973e:	b920      	cbnz	r0, 801974a <__mdiff+0x5a>
 8019740:	4b2d      	ldr	r3, [pc, #180]	; (80197f8 <__mdiff+0x108>)
 8019742:	4602      	mov	r2, r0
 8019744:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019748:	e7e6      	b.n	8019718 <__mdiff+0x28>
 801974a:	693e      	ldr	r6, [r7, #16]
 801974c:	60c5      	str	r5, [r0, #12]
 801974e:	6925      	ldr	r5, [r4, #16]
 8019750:	f107 0114 	add.w	r1, r7, #20
 8019754:	f104 0914 	add.w	r9, r4, #20
 8019758:	f100 0e14 	add.w	lr, r0, #20
 801975c:	f107 0210 	add.w	r2, r7, #16
 8019760:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019764:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019768:	46f2      	mov	sl, lr
 801976a:	2700      	movs	r7, #0
 801976c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019770:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019774:	fa1f f883 	uxth.w	r8, r3
 8019778:	fa17 f78b 	uxtah	r7, r7, fp
 801977c:	0c1b      	lsrs	r3, r3, #16
 801977e:	eba7 0808 	sub.w	r8, r7, r8
 8019782:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019786:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801978a:	fa1f f888 	uxth.w	r8, r8
 801978e:	141f      	asrs	r7, r3, #16
 8019790:	454d      	cmp	r5, r9
 8019792:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019796:	f84a 3b04 	str.w	r3, [sl], #4
 801979a:	d8e7      	bhi.n	801976c <__mdiff+0x7c>
 801979c:	1b2b      	subs	r3, r5, r4
 801979e:	3b15      	subs	r3, #21
 80197a0:	f023 0303 	bic.w	r3, r3, #3
 80197a4:	3304      	adds	r3, #4
 80197a6:	3415      	adds	r4, #21
 80197a8:	42a5      	cmp	r5, r4
 80197aa:	bf38      	it	cc
 80197ac:	2304      	movcc	r3, #4
 80197ae:	4419      	add	r1, r3
 80197b0:	4473      	add	r3, lr
 80197b2:	469e      	mov	lr, r3
 80197b4:	460d      	mov	r5, r1
 80197b6:	4565      	cmp	r5, ip
 80197b8:	d30e      	bcc.n	80197d8 <__mdiff+0xe8>
 80197ba:	f10c 0203 	add.w	r2, ip, #3
 80197be:	1a52      	subs	r2, r2, r1
 80197c0:	f022 0203 	bic.w	r2, r2, #3
 80197c4:	3903      	subs	r1, #3
 80197c6:	458c      	cmp	ip, r1
 80197c8:	bf38      	it	cc
 80197ca:	2200      	movcc	r2, #0
 80197cc:	441a      	add	r2, r3
 80197ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80197d2:	b17b      	cbz	r3, 80197f4 <__mdiff+0x104>
 80197d4:	6106      	str	r6, [r0, #16]
 80197d6:	e7a5      	b.n	8019724 <__mdiff+0x34>
 80197d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80197dc:	fa17 f488 	uxtah	r4, r7, r8
 80197e0:	1422      	asrs	r2, r4, #16
 80197e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80197e6:	b2a4      	uxth	r4, r4
 80197e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80197ec:	f84e 4b04 	str.w	r4, [lr], #4
 80197f0:	1417      	asrs	r7, r2, #16
 80197f2:	e7e0      	b.n	80197b6 <__mdiff+0xc6>
 80197f4:	3e01      	subs	r6, #1
 80197f6:	e7ea      	b.n	80197ce <__mdiff+0xde>
 80197f8:	0801cc9c 	.word	0x0801cc9c
 80197fc:	0801cd2c 	.word	0x0801cd2c

08019800 <__ulp>:
 8019800:	b082      	sub	sp, #8
 8019802:	ed8d 0b00 	vstr	d0, [sp]
 8019806:	9b01      	ldr	r3, [sp, #4]
 8019808:	4912      	ldr	r1, [pc, #72]	; (8019854 <__ulp+0x54>)
 801980a:	4019      	ands	r1, r3
 801980c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019810:	2900      	cmp	r1, #0
 8019812:	dd05      	ble.n	8019820 <__ulp+0x20>
 8019814:	2200      	movs	r2, #0
 8019816:	460b      	mov	r3, r1
 8019818:	ec43 2b10 	vmov	d0, r2, r3
 801981c:	b002      	add	sp, #8
 801981e:	4770      	bx	lr
 8019820:	4249      	negs	r1, r1
 8019822:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019826:	ea4f 5021 	mov.w	r0, r1, asr #20
 801982a:	f04f 0200 	mov.w	r2, #0
 801982e:	f04f 0300 	mov.w	r3, #0
 8019832:	da04      	bge.n	801983e <__ulp+0x3e>
 8019834:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019838:	fa41 f300 	asr.w	r3, r1, r0
 801983c:	e7ec      	b.n	8019818 <__ulp+0x18>
 801983e:	f1a0 0114 	sub.w	r1, r0, #20
 8019842:	291e      	cmp	r1, #30
 8019844:	bfda      	itte	le
 8019846:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801984a:	fa20 f101 	lsrle.w	r1, r0, r1
 801984e:	2101      	movgt	r1, #1
 8019850:	460a      	mov	r2, r1
 8019852:	e7e1      	b.n	8019818 <__ulp+0x18>
 8019854:	7ff00000 	.word	0x7ff00000

08019858 <__b2d>:
 8019858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801985a:	6905      	ldr	r5, [r0, #16]
 801985c:	f100 0714 	add.w	r7, r0, #20
 8019860:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019864:	1f2e      	subs	r6, r5, #4
 8019866:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801986a:	4620      	mov	r0, r4
 801986c:	f7ff fd52 	bl	8019314 <__hi0bits>
 8019870:	f1c0 0320 	rsb	r3, r0, #32
 8019874:	280a      	cmp	r0, #10
 8019876:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80198f4 <__b2d+0x9c>
 801987a:	600b      	str	r3, [r1, #0]
 801987c:	dc14      	bgt.n	80198a8 <__b2d+0x50>
 801987e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019882:	fa24 f10e 	lsr.w	r1, r4, lr
 8019886:	42b7      	cmp	r7, r6
 8019888:	ea41 030c 	orr.w	r3, r1, ip
 801988c:	bf34      	ite	cc
 801988e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019892:	2100      	movcs	r1, #0
 8019894:	3015      	adds	r0, #21
 8019896:	fa04 f000 	lsl.w	r0, r4, r0
 801989a:	fa21 f10e 	lsr.w	r1, r1, lr
 801989e:	ea40 0201 	orr.w	r2, r0, r1
 80198a2:	ec43 2b10 	vmov	d0, r2, r3
 80198a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198a8:	42b7      	cmp	r7, r6
 80198aa:	bf3a      	itte	cc
 80198ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80198b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80198b4:	2100      	movcs	r1, #0
 80198b6:	380b      	subs	r0, #11
 80198b8:	d017      	beq.n	80198ea <__b2d+0x92>
 80198ba:	f1c0 0c20 	rsb	ip, r0, #32
 80198be:	fa04 f500 	lsl.w	r5, r4, r0
 80198c2:	42be      	cmp	r6, r7
 80198c4:	fa21 f40c 	lsr.w	r4, r1, ip
 80198c8:	ea45 0504 	orr.w	r5, r5, r4
 80198cc:	bf8c      	ite	hi
 80198ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80198d2:	2400      	movls	r4, #0
 80198d4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80198d8:	fa01 f000 	lsl.w	r0, r1, r0
 80198dc:	fa24 f40c 	lsr.w	r4, r4, ip
 80198e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80198e4:	ea40 0204 	orr.w	r2, r0, r4
 80198e8:	e7db      	b.n	80198a2 <__b2d+0x4a>
 80198ea:	ea44 030c 	orr.w	r3, r4, ip
 80198ee:	460a      	mov	r2, r1
 80198f0:	e7d7      	b.n	80198a2 <__b2d+0x4a>
 80198f2:	bf00      	nop
 80198f4:	3ff00000 	.word	0x3ff00000

080198f8 <__d2b>:
 80198f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80198fc:	4689      	mov	r9, r1
 80198fe:	2101      	movs	r1, #1
 8019900:	ec57 6b10 	vmov	r6, r7, d0
 8019904:	4690      	mov	r8, r2
 8019906:	f7ff fc0f 	bl	8019128 <_Balloc>
 801990a:	4604      	mov	r4, r0
 801990c:	b930      	cbnz	r0, 801991c <__d2b+0x24>
 801990e:	4602      	mov	r2, r0
 8019910:	4b25      	ldr	r3, [pc, #148]	; (80199a8 <__d2b+0xb0>)
 8019912:	4826      	ldr	r0, [pc, #152]	; (80199ac <__d2b+0xb4>)
 8019914:	f240 310a 	movw	r1, #778	; 0x30a
 8019918:	f000 ff30 	bl	801a77c <__assert_func>
 801991c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019924:	bb35      	cbnz	r5, 8019974 <__d2b+0x7c>
 8019926:	2e00      	cmp	r6, #0
 8019928:	9301      	str	r3, [sp, #4]
 801992a:	d028      	beq.n	801997e <__d2b+0x86>
 801992c:	4668      	mov	r0, sp
 801992e:	9600      	str	r6, [sp, #0]
 8019930:	f7ff fd10 	bl	8019354 <__lo0bits>
 8019934:	9900      	ldr	r1, [sp, #0]
 8019936:	b300      	cbz	r0, 801997a <__d2b+0x82>
 8019938:	9a01      	ldr	r2, [sp, #4]
 801993a:	f1c0 0320 	rsb	r3, r0, #32
 801993e:	fa02 f303 	lsl.w	r3, r2, r3
 8019942:	430b      	orrs	r3, r1
 8019944:	40c2      	lsrs	r2, r0
 8019946:	6163      	str	r3, [r4, #20]
 8019948:	9201      	str	r2, [sp, #4]
 801994a:	9b01      	ldr	r3, [sp, #4]
 801994c:	61a3      	str	r3, [r4, #24]
 801994e:	2b00      	cmp	r3, #0
 8019950:	bf14      	ite	ne
 8019952:	2202      	movne	r2, #2
 8019954:	2201      	moveq	r2, #1
 8019956:	6122      	str	r2, [r4, #16]
 8019958:	b1d5      	cbz	r5, 8019990 <__d2b+0x98>
 801995a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801995e:	4405      	add	r5, r0
 8019960:	f8c9 5000 	str.w	r5, [r9]
 8019964:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019968:	f8c8 0000 	str.w	r0, [r8]
 801996c:	4620      	mov	r0, r4
 801996e:	b003      	add	sp, #12
 8019970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019978:	e7d5      	b.n	8019926 <__d2b+0x2e>
 801997a:	6161      	str	r1, [r4, #20]
 801997c:	e7e5      	b.n	801994a <__d2b+0x52>
 801997e:	a801      	add	r0, sp, #4
 8019980:	f7ff fce8 	bl	8019354 <__lo0bits>
 8019984:	9b01      	ldr	r3, [sp, #4]
 8019986:	6163      	str	r3, [r4, #20]
 8019988:	2201      	movs	r2, #1
 801998a:	6122      	str	r2, [r4, #16]
 801998c:	3020      	adds	r0, #32
 801998e:	e7e3      	b.n	8019958 <__d2b+0x60>
 8019990:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019994:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019998:	f8c9 0000 	str.w	r0, [r9]
 801999c:	6918      	ldr	r0, [r3, #16]
 801999e:	f7ff fcb9 	bl	8019314 <__hi0bits>
 80199a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80199a6:	e7df      	b.n	8019968 <__d2b+0x70>
 80199a8:	0801cc9c 	.word	0x0801cc9c
 80199ac:	0801cd2c 	.word	0x0801cd2c

080199b0 <__ratio>:
 80199b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b4:	4688      	mov	r8, r1
 80199b6:	4669      	mov	r1, sp
 80199b8:	4681      	mov	r9, r0
 80199ba:	f7ff ff4d 	bl	8019858 <__b2d>
 80199be:	a901      	add	r1, sp, #4
 80199c0:	4640      	mov	r0, r8
 80199c2:	ec55 4b10 	vmov	r4, r5, d0
 80199c6:	f7ff ff47 	bl	8019858 <__b2d>
 80199ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80199ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80199d2:	eba3 0c02 	sub.w	ip, r3, r2
 80199d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80199da:	1a9b      	subs	r3, r3, r2
 80199dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80199e0:	ec51 0b10 	vmov	r0, r1, d0
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	bfd6      	itet	le
 80199e8:	460a      	movle	r2, r1
 80199ea:	462a      	movgt	r2, r5
 80199ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80199f0:	468b      	mov	fp, r1
 80199f2:	462f      	mov	r7, r5
 80199f4:	bfd4      	ite	le
 80199f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80199fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80199fe:	4620      	mov	r0, r4
 8019a00:	ee10 2a10 	vmov	r2, s0
 8019a04:	465b      	mov	r3, fp
 8019a06:	4639      	mov	r1, r7
 8019a08:	f7e6 ff20 	bl	800084c <__aeabi_ddiv>
 8019a0c:	ec41 0b10 	vmov	d0, r0, r1
 8019a10:	b003      	add	sp, #12
 8019a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a16 <__copybits>:
 8019a16:	3901      	subs	r1, #1
 8019a18:	b570      	push	{r4, r5, r6, lr}
 8019a1a:	1149      	asrs	r1, r1, #5
 8019a1c:	6914      	ldr	r4, [r2, #16]
 8019a1e:	3101      	adds	r1, #1
 8019a20:	f102 0314 	add.w	r3, r2, #20
 8019a24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019a28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019a2c:	1f05      	subs	r5, r0, #4
 8019a2e:	42a3      	cmp	r3, r4
 8019a30:	d30c      	bcc.n	8019a4c <__copybits+0x36>
 8019a32:	1aa3      	subs	r3, r4, r2
 8019a34:	3b11      	subs	r3, #17
 8019a36:	f023 0303 	bic.w	r3, r3, #3
 8019a3a:	3211      	adds	r2, #17
 8019a3c:	42a2      	cmp	r2, r4
 8019a3e:	bf88      	it	hi
 8019a40:	2300      	movhi	r3, #0
 8019a42:	4418      	add	r0, r3
 8019a44:	2300      	movs	r3, #0
 8019a46:	4288      	cmp	r0, r1
 8019a48:	d305      	bcc.n	8019a56 <__copybits+0x40>
 8019a4a:	bd70      	pop	{r4, r5, r6, pc}
 8019a4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019a50:	f845 6f04 	str.w	r6, [r5, #4]!
 8019a54:	e7eb      	b.n	8019a2e <__copybits+0x18>
 8019a56:	f840 3b04 	str.w	r3, [r0], #4
 8019a5a:	e7f4      	b.n	8019a46 <__copybits+0x30>

08019a5c <__any_on>:
 8019a5c:	f100 0214 	add.w	r2, r0, #20
 8019a60:	6900      	ldr	r0, [r0, #16]
 8019a62:	114b      	asrs	r3, r1, #5
 8019a64:	4298      	cmp	r0, r3
 8019a66:	b510      	push	{r4, lr}
 8019a68:	db11      	blt.n	8019a8e <__any_on+0x32>
 8019a6a:	dd0a      	ble.n	8019a82 <__any_on+0x26>
 8019a6c:	f011 011f 	ands.w	r1, r1, #31
 8019a70:	d007      	beq.n	8019a82 <__any_on+0x26>
 8019a72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019a76:	fa24 f001 	lsr.w	r0, r4, r1
 8019a7a:	fa00 f101 	lsl.w	r1, r0, r1
 8019a7e:	428c      	cmp	r4, r1
 8019a80:	d10b      	bne.n	8019a9a <__any_on+0x3e>
 8019a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a86:	4293      	cmp	r3, r2
 8019a88:	d803      	bhi.n	8019a92 <__any_on+0x36>
 8019a8a:	2000      	movs	r0, #0
 8019a8c:	bd10      	pop	{r4, pc}
 8019a8e:	4603      	mov	r3, r0
 8019a90:	e7f7      	b.n	8019a82 <__any_on+0x26>
 8019a92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019a96:	2900      	cmp	r1, #0
 8019a98:	d0f5      	beq.n	8019a86 <__any_on+0x2a>
 8019a9a:	2001      	movs	r0, #1
 8019a9c:	e7f6      	b.n	8019a8c <__any_on+0x30>

08019a9e <_calloc_r>:
 8019a9e:	b513      	push	{r0, r1, r4, lr}
 8019aa0:	434a      	muls	r2, r1
 8019aa2:	4611      	mov	r1, r2
 8019aa4:	9201      	str	r2, [sp, #4]
 8019aa6:	f000 f859 	bl	8019b5c <_malloc_r>
 8019aaa:	4604      	mov	r4, r0
 8019aac:	b118      	cbz	r0, 8019ab6 <_calloc_r+0x18>
 8019aae:	9a01      	ldr	r2, [sp, #4]
 8019ab0:	2100      	movs	r1, #0
 8019ab2:	f7fc fb33 	bl	801611c <memset>
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	b002      	add	sp, #8
 8019aba:	bd10      	pop	{r4, pc}

08019abc <_free_r>:
 8019abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019abe:	2900      	cmp	r1, #0
 8019ac0:	d048      	beq.n	8019b54 <_free_r+0x98>
 8019ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ac6:	9001      	str	r0, [sp, #4]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	f1a1 0404 	sub.w	r4, r1, #4
 8019ace:	bfb8      	it	lt
 8019ad0:	18e4      	addlt	r4, r4, r3
 8019ad2:	f001 f857 	bl	801ab84 <__malloc_lock>
 8019ad6:	4a20      	ldr	r2, [pc, #128]	; (8019b58 <_free_r+0x9c>)
 8019ad8:	9801      	ldr	r0, [sp, #4]
 8019ada:	6813      	ldr	r3, [r2, #0]
 8019adc:	4615      	mov	r5, r2
 8019ade:	b933      	cbnz	r3, 8019aee <_free_r+0x32>
 8019ae0:	6063      	str	r3, [r4, #4]
 8019ae2:	6014      	str	r4, [r2, #0]
 8019ae4:	b003      	add	sp, #12
 8019ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019aea:	f001 b851 	b.w	801ab90 <__malloc_unlock>
 8019aee:	42a3      	cmp	r3, r4
 8019af0:	d90b      	bls.n	8019b0a <_free_r+0x4e>
 8019af2:	6821      	ldr	r1, [r4, #0]
 8019af4:	1862      	adds	r2, r4, r1
 8019af6:	4293      	cmp	r3, r2
 8019af8:	bf04      	itt	eq
 8019afa:	681a      	ldreq	r2, [r3, #0]
 8019afc:	685b      	ldreq	r3, [r3, #4]
 8019afe:	6063      	str	r3, [r4, #4]
 8019b00:	bf04      	itt	eq
 8019b02:	1852      	addeq	r2, r2, r1
 8019b04:	6022      	streq	r2, [r4, #0]
 8019b06:	602c      	str	r4, [r5, #0]
 8019b08:	e7ec      	b.n	8019ae4 <_free_r+0x28>
 8019b0a:	461a      	mov	r2, r3
 8019b0c:	685b      	ldr	r3, [r3, #4]
 8019b0e:	b10b      	cbz	r3, 8019b14 <_free_r+0x58>
 8019b10:	42a3      	cmp	r3, r4
 8019b12:	d9fa      	bls.n	8019b0a <_free_r+0x4e>
 8019b14:	6811      	ldr	r1, [r2, #0]
 8019b16:	1855      	adds	r5, r2, r1
 8019b18:	42a5      	cmp	r5, r4
 8019b1a:	d10b      	bne.n	8019b34 <_free_r+0x78>
 8019b1c:	6824      	ldr	r4, [r4, #0]
 8019b1e:	4421      	add	r1, r4
 8019b20:	1854      	adds	r4, r2, r1
 8019b22:	42a3      	cmp	r3, r4
 8019b24:	6011      	str	r1, [r2, #0]
 8019b26:	d1dd      	bne.n	8019ae4 <_free_r+0x28>
 8019b28:	681c      	ldr	r4, [r3, #0]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	6053      	str	r3, [r2, #4]
 8019b2e:	4421      	add	r1, r4
 8019b30:	6011      	str	r1, [r2, #0]
 8019b32:	e7d7      	b.n	8019ae4 <_free_r+0x28>
 8019b34:	d902      	bls.n	8019b3c <_free_r+0x80>
 8019b36:	230c      	movs	r3, #12
 8019b38:	6003      	str	r3, [r0, #0]
 8019b3a:	e7d3      	b.n	8019ae4 <_free_r+0x28>
 8019b3c:	6825      	ldr	r5, [r4, #0]
 8019b3e:	1961      	adds	r1, r4, r5
 8019b40:	428b      	cmp	r3, r1
 8019b42:	bf04      	itt	eq
 8019b44:	6819      	ldreq	r1, [r3, #0]
 8019b46:	685b      	ldreq	r3, [r3, #4]
 8019b48:	6063      	str	r3, [r4, #4]
 8019b4a:	bf04      	itt	eq
 8019b4c:	1949      	addeq	r1, r1, r5
 8019b4e:	6021      	streq	r1, [r4, #0]
 8019b50:	6054      	str	r4, [r2, #4]
 8019b52:	e7c7      	b.n	8019ae4 <_free_r+0x28>
 8019b54:	b003      	add	sp, #12
 8019b56:	bd30      	pop	{r4, r5, pc}
 8019b58:	20004d84 	.word	0x20004d84

08019b5c <_malloc_r>:
 8019b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b5e:	1ccd      	adds	r5, r1, #3
 8019b60:	f025 0503 	bic.w	r5, r5, #3
 8019b64:	3508      	adds	r5, #8
 8019b66:	2d0c      	cmp	r5, #12
 8019b68:	bf38      	it	cc
 8019b6a:	250c      	movcc	r5, #12
 8019b6c:	2d00      	cmp	r5, #0
 8019b6e:	4606      	mov	r6, r0
 8019b70:	db01      	blt.n	8019b76 <_malloc_r+0x1a>
 8019b72:	42a9      	cmp	r1, r5
 8019b74:	d903      	bls.n	8019b7e <_malloc_r+0x22>
 8019b76:	230c      	movs	r3, #12
 8019b78:	6033      	str	r3, [r6, #0]
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b7e:	f001 f801 	bl	801ab84 <__malloc_lock>
 8019b82:	4921      	ldr	r1, [pc, #132]	; (8019c08 <_malloc_r+0xac>)
 8019b84:	680a      	ldr	r2, [r1, #0]
 8019b86:	4614      	mov	r4, r2
 8019b88:	b99c      	cbnz	r4, 8019bb2 <_malloc_r+0x56>
 8019b8a:	4f20      	ldr	r7, [pc, #128]	; (8019c0c <_malloc_r+0xb0>)
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	b923      	cbnz	r3, 8019b9a <_malloc_r+0x3e>
 8019b90:	4621      	mov	r1, r4
 8019b92:	4630      	mov	r0, r6
 8019b94:	f000 fcd0 	bl	801a538 <_sbrk_r>
 8019b98:	6038      	str	r0, [r7, #0]
 8019b9a:	4629      	mov	r1, r5
 8019b9c:	4630      	mov	r0, r6
 8019b9e:	f000 fccb 	bl	801a538 <_sbrk_r>
 8019ba2:	1c43      	adds	r3, r0, #1
 8019ba4:	d123      	bne.n	8019bee <_malloc_r+0x92>
 8019ba6:	230c      	movs	r3, #12
 8019ba8:	6033      	str	r3, [r6, #0]
 8019baa:	4630      	mov	r0, r6
 8019bac:	f000 fff0 	bl	801ab90 <__malloc_unlock>
 8019bb0:	e7e3      	b.n	8019b7a <_malloc_r+0x1e>
 8019bb2:	6823      	ldr	r3, [r4, #0]
 8019bb4:	1b5b      	subs	r3, r3, r5
 8019bb6:	d417      	bmi.n	8019be8 <_malloc_r+0x8c>
 8019bb8:	2b0b      	cmp	r3, #11
 8019bba:	d903      	bls.n	8019bc4 <_malloc_r+0x68>
 8019bbc:	6023      	str	r3, [r4, #0]
 8019bbe:	441c      	add	r4, r3
 8019bc0:	6025      	str	r5, [r4, #0]
 8019bc2:	e004      	b.n	8019bce <_malloc_r+0x72>
 8019bc4:	6863      	ldr	r3, [r4, #4]
 8019bc6:	42a2      	cmp	r2, r4
 8019bc8:	bf0c      	ite	eq
 8019bca:	600b      	streq	r3, [r1, #0]
 8019bcc:	6053      	strne	r3, [r2, #4]
 8019bce:	4630      	mov	r0, r6
 8019bd0:	f000 ffde 	bl	801ab90 <__malloc_unlock>
 8019bd4:	f104 000b 	add.w	r0, r4, #11
 8019bd8:	1d23      	adds	r3, r4, #4
 8019bda:	f020 0007 	bic.w	r0, r0, #7
 8019bde:	1ac2      	subs	r2, r0, r3
 8019be0:	d0cc      	beq.n	8019b7c <_malloc_r+0x20>
 8019be2:	1a1b      	subs	r3, r3, r0
 8019be4:	50a3      	str	r3, [r4, r2]
 8019be6:	e7c9      	b.n	8019b7c <_malloc_r+0x20>
 8019be8:	4622      	mov	r2, r4
 8019bea:	6864      	ldr	r4, [r4, #4]
 8019bec:	e7cc      	b.n	8019b88 <_malloc_r+0x2c>
 8019bee:	1cc4      	adds	r4, r0, #3
 8019bf0:	f024 0403 	bic.w	r4, r4, #3
 8019bf4:	42a0      	cmp	r0, r4
 8019bf6:	d0e3      	beq.n	8019bc0 <_malloc_r+0x64>
 8019bf8:	1a21      	subs	r1, r4, r0
 8019bfa:	4630      	mov	r0, r6
 8019bfc:	f000 fc9c 	bl	801a538 <_sbrk_r>
 8019c00:	3001      	adds	r0, #1
 8019c02:	d1dd      	bne.n	8019bc0 <_malloc_r+0x64>
 8019c04:	e7cf      	b.n	8019ba6 <_malloc_r+0x4a>
 8019c06:	bf00      	nop
 8019c08:	20004d84 	.word	0x20004d84
 8019c0c:	20004d88 	.word	0x20004d88

08019c10 <__ssputs_r>:
 8019c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c14:	688e      	ldr	r6, [r1, #8]
 8019c16:	429e      	cmp	r6, r3
 8019c18:	4682      	mov	sl, r0
 8019c1a:	460c      	mov	r4, r1
 8019c1c:	4690      	mov	r8, r2
 8019c1e:	461f      	mov	r7, r3
 8019c20:	d838      	bhi.n	8019c94 <__ssputs_r+0x84>
 8019c22:	898a      	ldrh	r2, [r1, #12]
 8019c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c28:	d032      	beq.n	8019c90 <__ssputs_r+0x80>
 8019c2a:	6825      	ldr	r5, [r4, #0]
 8019c2c:	6909      	ldr	r1, [r1, #16]
 8019c2e:	eba5 0901 	sub.w	r9, r5, r1
 8019c32:	6965      	ldr	r5, [r4, #20]
 8019c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	444b      	add	r3, r9
 8019c40:	106d      	asrs	r5, r5, #1
 8019c42:	429d      	cmp	r5, r3
 8019c44:	bf38      	it	cc
 8019c46:	461d      	movcc	r5, r3
 8019c48:	0553      	lsls	r3, r2, #21
 8019c4a:	d531      	bpl.n	8019cb0 <__ssputs_r+0xa0>
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	f7ff ff85 	bl	8019b5c <_malloc_r>
 8019c52:	4606      	mov	r6, r0
 8019c54:	b950      	cbnz	r0, 8019c6c <__ssputs_r+0x5c>
 8019c56:	230c      	movs	r3, #12
 8019c58:	f8ca 3000 	str.w	r3, [sl]
 8019c5c:	89a3      	ldrh	r3, [r4, #12]
 8019c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c62:	81a3      	strh	r3, [r4, #12]
 8019c64:	f04f 30ff 	mov.w	r0, #4294967295
 8019c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c6c:	6921      	ldr	r1, [r4, #16]
 8019c6e:	464a      	mov	r2, r9
 8019c70:	f7fc fa46 	bl	8016100 <memcpy>
 8019c74:	89a3      	ldrh	r3, [r4, #12]
 8019c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c7e:	81a3      	strh	r3, [r4, #12]
 8019c80:	6126      	str	r6, [r4, #16]
 8019c82:	6165      	str	r5, [r4, #20]
 8019c84:	444e      	add	r6, r9
 8019c86:	eba5 0509 	sub.w	r5, r5, r9
 8019c8a:	6026      	str	r6, [r4, #0]
 8019c8c:	60a5      	str	r5, [r4, #8]
 8019c8e:	463e      	mov	r6, r7
 8019c90:	42be      	cmp	r6, r7
 8019c92:	d900      	bls.n	8019c96 <__ssputs_r+0x86>
 8019c94:	463e      	mov	r6, r7
 8019c96:	4632      	mov	r2, r6
 8019c98:	6820      	ldr	r0, [r4, #0]
 8019c9a:	4641      	mov	r1, r8
 8019c9c:	f000 ff58 	bl	801ab50 <memmove>
 8019ca0:	68a3      	ldr	r3, [r4, #8]
 8019ca2:	6822      	ldr	r2, [r4, #0]
 8019ca4:	1b9b      	subs	r3, r3, r6
 8019ca6:	4432      	add	r2, r6
 8019ca8:	60a3      	str	r3, [r4, #8]
 8019caa:	6022      	str	r2, [r4, #0]
 8019cac:	2000      	movs	r0, #0
 8019cae:	e7db      	b.n	8019c68 <__ssputs_r+0x58>
 8019cb0:	462a      	mov	r2, r5
 8019cb2:	f000 ff73 	bl	801ab9c <_realloc_r>
 8019cb6:	4606      	mov	r6, r0
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	d1e1      	bne.n	8019c80 <__ssputs_r+0x70>
 8019cbc:	6921      	ldr	r1, [r4, #16]
 8019cbe:	4650      	mov	r0, sl
 8019cc0:	f7ff fefc 	bl	8019abc <_free_r>
 8019cc4:	e7c7      	b.n	8019c56 <__ssputs_r+0x46>
	...

08019cc8 <_svfiprintf_r>:
 8019cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ccc:	4698      	mov	r8, r3
 8019cce:	898b      	ldrh	r3, [r1, #12]
 8019cd0:	061b      	lsls	r3, r3, #24
 8019cd2:	b09d      	sub	sp, #116	; 0x74
 8019cd4:	4607      	mov	r7, r0
 8019cd6:	460d      	mov	r5, r1
 8019cd8:	4614      	mov	r4, r2
 8019cda:	d50e      	bpl.n	8019cfa <_svfiprintf_r+0x32>
 8019cdc:	690b      	ldr	r3, [r1, #16]
 8019cde:	b963      	cbnz	r3, 8019cfa <_svfiprintf_r+0x32>
 8019ce0:	2140      	movs	r1, #64	; 0x40
 8019ce2:	f7ff ff3b 	bl	8019b5c <_malloc_r>
 8019ce6:	6028      	str	r0, [r5, #0]
 8019ce8:	6128      	str	r0, [r5, #16]
 8019cea:	b920      	cbnz	r0, 8019cf6 <_svfiprintf_r+0x2e>
 8019cec:	230c      	movs	r3, #12
 8019cee:	603b      	str	r3, [r7, #0]
 8019cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf4:	e0d1      	b.n	8019e9a <_svfiprintf_r+0x1d2>
 8019cf6:	2340      	movs	r3, #64	; 0x40
 8019cf8:	616b      	str	r3, [r5, #20]
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cfe:	2320      	movs	r3, #32
 8019d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d08:	2330      	movs	r3, #48	; 0x30
 8019d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019eb4 <_svfiprintf_r+0x1ec>
 8019d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d12:	f04f 0901 	mov.w	r9, #1
 8019d16:	4623      	mov	r3, r4
 8019d18:	469a      	mov	sl, r3
 8019d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d1e:	b10a      	cbz	r2, 8019d24 <_svfiprintf_r+0x5c>
 8019d20:	2a25      	cmp	r2, #37	; 0x25
 8019d22:	d1f9      	bne.n	8019d18 <_svfiprintf_r+0x50>
 8019d24:	ebba 0b04 	subs.w	fp, sl, r4
 8019d28:	d00b      	beq.n	8019d42 <_svfiprintf_r+0x7a>
 8019d2a:	465b      	mov	r3, fp
 8019d2c:	4622      	mov	r2, r4
 8019d2e:	4629      	mov	r1, r5
 8019d30:	4638      	mov	r0, r7
 8019d32:	f7ff ff6d 	bl	8019c10 <__ssputs_r>
 8019d36:	3001      	adds	r0, #1
 8019d38:	f000 80aa 	beq.w	8019e90 <_svfiprintf_r+0x1c8>
 8019d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d3e:	445a      	add	r2, fp
 8019d40:	9209      	str	r2, [sp, #36]	; 0x24
 8019d42:	f89a 3000 	ldrb.w	r3, [sl]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	f000 80a2 	beq.w	8019e90 <_svfiprintf_r+0x1c8>
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8019d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d56:	f10a 0a01 	add.w	sl, sl, #1
 8019d5a:	9304      	str	r3, [sp, #16]
 8019d5c:	9307      	str	r3, [sp, #28]
 8019d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d62:	931a      	str	r3, [sp, #104]	; 0x68
 8019d64:	4654      	mov	r4, sl
 8019d66:	2205      	movs	r2, #5
 8019d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d6c:	4851      	ldr	r0, [pc, #324]	; (8019eb4 <_svfiprintf_r+0x1ec>)
 8019d6e:	f7e6 fa37 	bl	80001e0 <memchr>
 8019d72:	9a04      	ldr	r2, [sp, #16]
 8019d74:	b9d8      	cbnz	r0, 8019dae <_svfiprintf_r+0xe6>
 8019d76:	06d0      	lsls	r0, r2, #27
 8019d78:	bf44      	itt	mi
 8019d7a:	2320      	movmi	r3, #32
 8019d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d80:	0711      	lsls	r1, r2, #28
 8019d82:	bf44      	itt	mi
 8019d84:	232b      	movmi	r3, #43	; 0x2b
 8019d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8019d90:	d015      	beq.n	8019dbe <_svfiprintf_r+0xf6>
 8019d92:	9a07      	ldr	r2, [sp, #28]
 8019d94:	4654      	mov	r4, sl
 8019d96:	2000      	movs	r0, #0
 8019d98:	f04f 0c0a 	mov.w	ip, #10
 8019d9c:	4621      	mov	r1, r4
 8019d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019da2:	3b30      	subs	r3, #48	; 0x30
 8019da4:	2b09      	cmp	r3, #9
 8019da6:	d94e      	bls.n	8019e46 <_svfiprintf_r+0x17e>
 8019da8:	b1b0      	cbz	r0, 8019dd8 <_svfiprintf_r+0x110>
 8019daa:	9207      	str	r2, [sp, #28]
 8019dac:	e014      	b.n	8019dd8 <_svfiprintf_r+0x110>
 8019dae:	eba0 0308 	sub.w	r3, r0, r8
 8019db2:	fa09 f303 	lsl.w	r3, r9, r3
 8019db6:	4313      	orrs	r3, r2
 8019db8:	9304      	str	r3, [sp, #16]
 8019dba:	46a2      	mov	sl, r4
 8019dbc:	e7d2      	b.n	8019d64 <_svfiprintf_r+0x9c>
 8019dbe:	9b03      	ldr	r3, [sp, #12]
 8019dc0:	1d19      	adds	r1, r3, #4
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	9103      	str	r1, [sp, #12]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	bfbb      	ittet	lt
 8019dca:	425b      	neglt	r3, r3
 8019dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8019dd0:	9307      	strge	r3, [sp, #28]
 8019dd2:	9307      	strlt	r3, [sp, #28]
 8019dd4:	bfb8      	it	lt
 8019dd6:	9204      	strlt	r2, [sp, #16]
 8019dd8:	7823      	ldrb	r3, [r4, #0]
 8019dda:	2b2e      	cmp	r3, #46	; 0x2e
 8019ddc:	d10c      	bne.n	8019df8 <_svfiprintf_r+0x130>
 8019dde:	7863      	ldrb	r3, [r4, #1]
 8019de0:	2b2a      	cmp	r3, #42	; 0x2a
 8019de2:	d135      	bne.n	8019e50 <_svfiprintf_r+0x188>
 8019de4:	9b03      	ldr	r3, [sp, #12]
 8019de6:	1d1a      	adds	r2, r3, #4
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	9203      	str	r2, [sp, #12]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	bfb8      	it	lt
 8019df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019df4:	3402      	adds	r4, #2
 8019df6:	9305      	str	r3, [sp, #20]
 8019df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019ec4 <_svfiprintf_r+0x1fc>
 8019dfc:	7821      	ldrb	r1, [r4, #0]
 8019dfe:	2203      	movs	r2, #3
 8019e00:	4650      	mov	r0, sl
 8019e02:	f7e6 f9ed 	bl	80001e0 <memchr>
 8019e06:	b140      	cbz	r0, 8019e1a <_svfiprintf_r+0x152>
 8019e08:	2340      	movs	r3, #64	; 0x40
 8019e0a:	eba0 000a 	sub.w	r0, r0, sl
 8019e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8019e12:	9b04      	ldr	r3, [sp, #16]
 8019e14:	4303      	orrs	r3, r0
 8019e16:	3401      	adds	r4, #1
 8019e18:	9304      	str	r3, [sp, #16]
 8019e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e1e:	4826      	ldr	r0, [pc, #152]	; (8019eb8 <_svfiprintf_r+0x1f0>)
 8019e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e24:	2206      	movs	r2, #6
 8019e26:	f7e6 f9db 	bl	80001e0 <memchr>
 8019e2a:	2800      	cmp	r0, #0
 8019e2c:	d038      	beq.n	8019ea0 <_svfiprintf_r+0x1d8>
 8019e2e:	4b23      	ldr	r3, [pc, #140]	; (8019ebc <_svfiprintf_r+0x1f4>)
 8019e30:	bb1b      	cbnz	r3, 8019e7a <_svfiprintf_r+0x1b2>
 8019e32:	9b03      	ldr	r3, [sp, #12]
 8019e34:	3307      	adds	r3, #7
 8019e36:	f023 0307 	bic.w	r3, r3, #7
 8019e3a:	3308      	adds	r3, #8
 8019e3c:	9303      	str	r3, [sp, #12]
 8019e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e40:	4433      	add	r3, r6
 8019e42:	9309      	str	r3, [sp, #36]	; 0x24
 8019e44:	e767      	b.n	8019d16 <_svfiprintf_r+0x4e>
 8019e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e4a:	460c      	mov	r4, r1
 8019e4c:	2001      	movs	r0, #1
 8019e4e:	e7a5      	b.n	8019d9c <_svfiprintf_r+0xd4>
 8019e50:	2300      	movs	r3, #0
 8019e52:	3401      	adds	r4, #1
 8019e54:	9305      	str	r3, [sp, #20]
 8019e56:	4619      	mov	r1, r3
 8019e58:	f04f 0c0a 	mov.w	ip, #10
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e62:	3a30      	subs	r2, #48	; 0x30
 8019e64:	2a09      	cmp	r2, #9
 8019e66:	d903      	bls.n	8019e70 <_svfiprintf_r+0x1a8>
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d0c5      	beq.n	8019df8 <_svfiprintf_r+0x130>
 8019e6c:	9105      	str	r1, [sp, #20]
 8019e6e:	e7c3      	b.n	8019df8 <_svfiprintf_r+0x130>
 8019e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e74:	4604      	mov	r4, r0
 8019e76:	2301      	movs	r3, #1
 8019e78:	e7f0      	b.n	8019e5c <_svfiprintf_r+0x194>
 8019e7a:	ab03      	add	r3, sp, #12
 8019e7c:	9300      	str	r3, [sp, #0]
 8019e7e:	462a      	mov	r2, r5
 8019e80:	4b0f      	ldr	r3, [pc, #60]	; (8019ec0 <_svfiprintf_r+0x1f8>)
 8019e82:	a904      	add	r1, sp, #16
 8019e84:	4638      	mov	r0, r7
 8019e86:	f7fc f9f1 	bl	801626c <_printf_float>
 8019e8a:	1c42      	adds	r2, r0, #1
 8019e8c:	4606      	mov	r6, r0
 8019e8e:	d1d6      	bne.n	8019e3e <_svfiprintf_r+0x176>
 8019e90:	89ab      	ldrh	r3, [r5, #12]
 8019e92:	065b      	lsls	r3, r3, #25
 8019e94:	f53f af2c 	bmi.w	8019cf0 <_svfiprintf_r+0x28>
 8019e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e9a:	b01d      	add	sp, #116	; 0x74
 8019e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ea0:	ab03      	add	r3, sp, #12
 8019ea2:	9300      	str	r3, [sp, #0]
 8019ea4:	462a      	mov	r2, r5
 8019ea6:	4b06      	ldr	r3, [pc, #24]	; (8019ec0 <_svfiprintf_r+0x1f8>)
 8019ea8:	a904      	add	r1, sp, #16
 8019eaa:	4638      	mov	r0, r7
 8019eac:	f7fc fc82 	bl	80167b4 <_printf_i>
 8019eb0:	e7eb      	b.n	8019e8a <_svfiprintf_r+0x1c2>
 8019eb2:	bf00      	nop
 8019eb4:	0801ce8c 	.word	0x0801ce8c
 8019eb8:	0801ce96 	.word	0x0801ce96
 8019ebc:	0801626d 	.word	0x0801626d
 8019ec0:	08019c11 	.word	0x08019c11
 8019ec4:	0801ce92 	.word	0x0801ce92

08019ec8 <_sungetc_r>:
 8019ec8:	b538      	push	{r3, r4, r5, lr}
 8019eca:	1c4b      	adds	r3, r1, #1
 8019ecc:	4614      	mov	r4, r2
 8019ece:	d103      	bne.n	8019ed8 <_sungetc_r+0x10>
 8019ed0:	f04f 35ff 	mov.w	r5, #4294967295
 8019ed4:	4628      	mov	r0, r5
 8019ed6:	bd38      	pop	{r3, r4, r5, pc}
 8019ed8:	8993      	ldrh	r3, [r2, #12]
 8019eda:	f023 0320 	bic.w	r3, r3, #32
 8019ede:	8193      	strh	r3, [r2, #12]
 8019ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019ee2:	6852      	ldr	r2, [r2, #4]
 8019ee4:	b2cd      	uxtb	r5, r1
 8019ee6:	b18b      	cbz	r3, 8019f0c <_sungetc_r+0x44>
 8019ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019eea:	4293      	cmp	r3, r2
 8019eec:	dd08      	ble.n	8019f00 <_sungetc_r+0x38>
 8019eee:	6823      	ldr	r3, [r4, #0]
 8019ef0:	1e5a      	subs	r2, r3, #1
 8019ef2:	6022      	str	r2, [r4, #0]
 8019ef4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019ef8:	6863      	ldr	r3, [r4, #4]
 8019efa:	3301      	adds	r3, #1
 8019efc:	6063      	str	r3, [r4, #4]
 8019efe:	e7e9      	b.n	8019ed4 <_sungetc_r+0xc>
 8019f00:	4621      	mov	r1, r4
 8019f02:	f000 fbf3 	bl	801a6ec <__submore>
 8019f06:	2800      	cmp	r0, #0
 8019f08:	d0f1      	beq.n	8019eee <_sungetc_r+0x26>
 8019f0a:	e7e1      	b.n	8019ed0 <_sungetc_r+0x8>
 8019f0c:	6921      	ldr	r1, [r4, #16]
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	b151      	cbz	r1, 8019f28 <_sungetc_r+0x60>
 8019f12:	4299      	cmp	r1, r3
 8019f14:	d208      	bcs.n	8019f28 <_sungetc_r+0x60>
 8019f16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019f1a:	42a9      	cmp	r1, r5
 8019f1c:	d104      	bne.n	8019f28 <_sungetc_r+0x60>
 8019f1e:	3b01      	subs	r3, #1
 8019f20:	3201      	adds	r2, #1
 8019f22:	6023      	str	r3, [r4, #0]
 8019f24:	6062      	str	r2, [r4, #4]
 8019f26:	e7d5      	b.n	8019ed4 <_sungetc_r+0xc>
 8019f28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f30:	6363      	str	r3, [r4, #52]	; 0x34
 8019f32:	2303      	movs	r3, #3
 8019f34:	63a3      	str	r3, [r4, #56]	; 0x38
 8019f36:	4623      	mov	r3, r4
 8019f38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019f3c:	6023      	str	r3, [r4, #0]
 8019f3e:	2301      	movs	r3, #1
 8019f40:	e7dc      	b.n	8019efc <_sungetc_r+0x34>

08019f42 <__ssrefill_r>:
 8019f42:	b510      	push	{r4, lr}
 8019f44:	460c      	mov	r4, r1
 8019f46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019f48:	b169      	cbz	r1, 8019f66 <__ssrefill_r+0x24>
 8019f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f4e:	4299      	cmp	r1, r3
 8019f50:	d001      	beq.n	8019f56 <__ssrefill_r+0x14>
 8019f52:	f7ff fdb3 	bl	8019abc <_free_r>
 8019f56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f58:	6063      	str	r3, [r4, #4]
 8019f5a:	2000      	movs	r0, #0
 8019f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8019f5e:	b113      	cbz	r3, 8019f66 <__ssrefill_r+0x24>
 8019f60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019f62:	6023      	str	r3, [r4, #0]
 8019f64:	bd10      	pop	{r4, pc}
 8019f66:	6923      	ldr	r3, [r4, #16]
 8019f68:	6023      	str	r3, [r4, #0]
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	6063      	str	r3, [r4, #4]
 8019f6e:	89a3      	ldrh	r3, [r4, #12]
 8019f70:	f043 0320 	orr.w	r3, r3, #32
 8019f74:	81a3      	strh	r3, [r4, #12]
 8019f76:	f04f 30ff 	mov.w	r0, #4294967295
 8019f7a:	e7f3      	b.n	8019f64 <__ssrefill_r+0x22>

08019f7c <__ssvfiscanf_r>:
 8019f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f80:	460c      	mov	r4, r1
 8019f82:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019f86:	2100      	movs	r1, #0
 8019f88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019f8c:	49b2      	ldr	r1, [pc, #712]	; (801a258 <__ssvfiscanf_r+0x2dc>)
 8019f8e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019f90:	f10d 0804 	add.w	r8, sp, #4
 8019f94:	49b1      	ldr	r1, [pc, #708]	; (801a25c <__ssvfiscanf_r+0x2e0>)
 8019f96:	4fb2      	ldr	r7, [pc, #712]	; (801a260 <__ssvfiscanf_r+0x2e4>)
 8019f98:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801a264 <__ssvfiscanf_r+0x2e8>
 8019f9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019fa0:	4606      	mov	r6, r0
 8019fa2:	91a1      	str	r1, [sp, #644]	; 0x284
 8019fa4:	9300      	str	r3, [sp, #0]
 8019fa6:	f892 a000 	ldrb.w	sl, [r2]
 8019faa:	f1ba 0f00 	cmp.w	sl, #0
 8019fae:	f000 8151 	beq.w	801a254 <__ssvfiscanf_r+0x2d8>
 8019fb2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8019fb6:	f013 0308 	ands.w	r3, r3, #8
 8019fba:	f102 0501 	add.w	r5, r2, #1
 8019fbe:	d019      	beq.n	8019ff4 <__ssvfiscanf_r+0x78>
 8019fc0:	6863      	ldr	r3, [r4, #4]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	dd0f      	ble.n	8019fe6 <__ssvfiscanf_r+0x6a>
 8019fc6:	6823      	ldr	r3, [r4, #0]
 8019fc8:	781a      	ldrb	r2, [r3, #0]
 8019fca:	5cba      	ldrb	r2, [r7, r2]
 8019fcc:	0712      	lsls	r2, r2, #28
 8019fce:	d401      	bmi.n	8019fd4 <__ssvfiscanf_r+0x58>
 8019fd0:	462a      	mov	r2, r5
 8019fd2:	e7e8      	b.n	8019fa6 <__ssvfiscanf_r+0x2a>
 8019fd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019fd6:	3201      	adds	r2, #1
 8019fd8:	9245      	str	r2, [sp, #276]	; 0x114
 8019fda:	6862      	ldr	r2, [r4, #4]
 8019fdc:	3301      	adds	r3, #1
 8019fde:	3a01      	subs	r2, #1
 8019fe0:	6062      	str	r2, [r4, #4]
 8019fe2:	6023      	str	r3, [r4, #0]
 8019fe4:	e7ec      	b.n	8019fc0 <__ssvfiscanf_r+0x44>
 8019fe6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019fe8:	4621      	mov	r1, r4
 8019fea:	4630      	mov	r0, r6
 8019fec:	4798      	blx	r3
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	d0e9      	beq.n	8019fc6 <__ssvfiscanf_r+0x4a>
 8019ff2:	e7ed      	b.n	8019fd0 <__ssvfiscanf_r+0x54>
 8019ff4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8019ff8:	f040 8083 	bne.w	801a102 <__ssvfiscanf_r+0x186>
 8019ffc:	9341      	str	r3, [sp, #260]	; 0x104
 8019ffe:	9343      	str	r3, [sp, #268]	; 0x10c
 801a000:	7853      	ldrb	r3, [r2, #1]
 801a002:	2b2a      	cmp	r3, #42	; 0x2a
 801a004:	bf02      	ittt	eq
 801a006:	2310      	moveq	r3, #16
 801a008:	1c95      	addeq	r5, r2, #2
 801a00a:	9341      	streq	r3, [sp, #260]	; 0x104
 801a00c:	220a      	movs	r2, #10
 801a00e:	46ab      	mov	fp, r5
 801a010:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801a014:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801a018:	2b09      	cmp	r3, #9
 801a01a:	d91d      	bls.n	801a058 <__ssvfiscanf_r+0xdc>
 801a01c:	4891      	ldr	r0, [pc, #580]	; (801a264 <__ssvfiscanf_r+0x2e8>)
 801a01e:	2203      	movs	r2, #3
 801a020:	f7e6 f8de 	bl	80001e0 <memchr>
 801a024:	b140      	cbz	r0, 801a038 <__ssvfiscanf_r+0xbc>
 801a026:	2301      	movs	r3, #1
 801a028:	eba0 0009 	sub.w	r0, r0, r9
 801a02c:	fa03 f000 	lsl.w	r0, r3, r0
 801a030:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a032:	4318      	orrs	r0, r3
 801a034:	9041      	str	r0, [sp, #260]	; 0x104
 801a036:	465d      	mov	r5, fp
 801a038:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a03c:	2b78      	cmp	r3, #120	; 0x78
 801a03e:	d806      	bhi.n	801a04e <__ssvfiscanf_r+0xd2>
 801a040:	2b57      	cmp	r3, #87	; 0x57
 801a042:	d810      	bhi.n	801a066 <__ssvfiscanf_r+0xea>
 801a044:	2b25      	cmp	r3, #37	; 0x25
 801a046:	d05c      	beq.n	801a102 <__ssvfiscanf_r+0x186>
 801a048:	d856      	bhi.n	801a0f8 <__ssvfiscanf_r+0x17c>
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d074      	beq.n	801a138 <__ssvfiscanf_r+0x1bc>
 801a04e:	2303      	movs	r3, #3
 801a050:	9347      	str	r3, [sp, #284]	; 0x11c
 801a052:	230a      	movs	r3, #10
 801a054:	9342      	str	r3, [sp, #264]	; 0x108
 801a056:	e081      	b.n	801a15c <__ssvfiscanf_r+0x1e0>
 801a058:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a05a:	fb02 1303 	mla	r3, r2, r3, r1
 801a05e:	3b30      	subs	r3, #48	; 0x30
 801a060:	9343      	str	r3, [sp, #268]	; 0x10c
 801a062:	465d      	mov	r5, fp
 801a064:	e7d3      	b.n	801a00e <__ssvfiscanf_r+0x92>
 801a066:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801a06a:	2a20      	cmp	r2, #32
 801a06c:	d8ef      	bhi.n	801a04e <__ssvfiscanf_r+0xd2>
 801a06e:	a101      	add	r1, pc, #4	; (adr r1, 801a074 <__ssvfiscanf_r+0xf8>)
 801a070:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a074:	0801a147 	.word	0x0801a147
 801a078:	0801a04f 	.word	0x0801a04f
 801a07c:	0801a04f 	.word	0x0801a04f
 801a080:	0801a1a5 	.word	0x0801a1a5
 801a084:	0801a04f 	.word	0x0801a04f
 801a088:	0801a04f 	.word	0x0801a04f
 801a08c:	0801a04f 	.word	0x0801a04f
 801a090:	0801a04f 	.word	0x0801a04f
 801a094:	0801a04f 	.word	0x0801a04f
 801a098:	0801a04f 	.word	0x0801a04f
 801a09c:	0801a04f 	.word	0x0801a04f
 801a0a0:	0801a1bb 	.word	0x0801a1bb
 801a0a4:	0801a191 	.word	0x0801a191
 801a0a8:	0801a0ff 	.word	0x0801a0ff
 801a0ac:	0801a0ff 	.word	0x0801a0ff
 801a0b0:	0801a0ff 	.word	0x0801a0ff
 801a0b4:	0801a04f 	.word	0x0801a04f
 801a0b8:	0801a195 	.word	0x0801a195
 801a0bc:	0801a04f 	.word	0x0801a04f
 801a0c0:	0801a04f 	.word	0x0801a04f
 801a0c4:	0801a04f 	.word	0x0801a04f
 801a0c8:	0801a04f 	.word	0x0801a04f
 801a0cc:	0801a1cb 	.word	0x0801a1cb
 801a0d0:	0801a19d 	.word	0x0801a19d
 801a0d4:	0801a13f 	.word	0x0801a13f
 801a0d8:	0801a04f 	.word	0x0801a04f
 801a0dc:	0801a04f 	.word	0x0801a04f
 801a0e0:	0801a1c7 	.word	0x0801a1c7
 801a0e4:	0801a04f 	.word	0x0801a04f
 801a0e8:	0801a191 	.word	0x0801a191
 801a0ec:	0801a04f 	.word	0x0801a04f
 801a0f0:	0801a04f 	.word	0x0801a04f
 801a0f4:	0801a147 	.word	0x0801a147
 801a0f8:	3b45      	subs	r3, #69	; 0x45
 801a0fa:	2b02      	cmp	r3, #2
 801a0fc:	d8a7      	bhi.n	801a04e <__ssvfiscanf_r+0xd2>
 801a0fe:	2305      	movs	r3, #5
 801a100:	e02b      	b.n	801a15a <__ssvfiscanf_r+0x1de>
 801a102:	6863      	ldr	r3, [r4, #4]
 801a104:	2b00      	cmp	r3, #0
 801a106:	dd0d      	ble.n	801a124 <__ssvfiscanf_r+0x1a8>
 801a108:	6823      	ldr	r3, [r4, #0]
 801a10a:	781a      	ldrb	r2, [r3, #0]
 801a10c:	4552      	cmp	r2, sl
 801a10e:	f040 80a1 	bne.w	801a254 <__ssvfiscanf_r+0x2d8>
 801a112:	3301      	adds	r3, #1
 801a114:	6862      	ldr	r2, [r4, #4]
 801a116:	6023      	str	r3, [r4, #0]
 801a118:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801a11a:	3a01      	subs	r2, #1
 801a11c:	3301      	adds	r3, #1
 801a11e:	6062      	str	r2, [r4, #4]
 801a120:	9345      	str	r3, [sp, #276]	; 0x114
 801a122:	e755      	b.n	8019fd0 <__ssvfiscanf_r+0x54>
 801a124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a126:	4621      	mov	r1, r4
 801a128:	4630      	mov	r0, r6
 801a12a:	4798      	blx	r3
 801a12c:	2800      	cmp	r0, #0
 801a12e:	d0eb      	beq.n	801a108 <__ssvfiscanf_r+0x18c>
 801a130:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a132:	2800      	cmp	r0, #0
 801a134:	f040 8084 	bne.w	801a240 <__ssvfiscanf_r+0x2c4>
 801a138:	f04f 30ff 	mov.w	r0, #4294967295
 801a13c:	e086      	b.n	801a24c <__ssvfiscanf_r+0x2d0>
 801a13e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a140:	f042 0220 	orr.w	r2, r2, #32
 801a144:	9241      	str	r2, [sp, #260]	; 0x104
 801a146:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a14c:	9241      	str	r2, [sp, #260]	; 0x104
 801a14e:	2210      	movs	r2, #16
 801a150:	2b6f      	cmp	r3, #111	; 0x6f
 801a152:	9242      	str	r2, [sp, #264]	; 0x108
 801a154:	bf34      	ite	cc
 801a156:	2303      	movcc	r3, #3
 801a158:	2304      	movcs	r3, #4
 801a15a:	9347      	str	r3, [sp, #284]	; 0x11c
 801a15c:	6863      	ldr	r3, [r4, #4]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	dd41      	ble.n	801a1e6 <__ssvfiscanf_r+0x26a>
 801a162:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a164:	0659      	lsls	r1, r3, #25
 801a166:	d404      	bmi.n	801a172 <__ssvfiscanf_r+0x1f6>
 801a168:	6823      	ldr	r3, [r4, #0]
 801a16a:	781a      	ldrb	r2, [r3, #0]
 801a16c:	5cba      	ldrb	r2, [r7, r2]
 801a16e:	0712      	lsls	r2, r2, #28
 801a170:	d440      	bmi.n	801a1f4 <__ssvfiscanf_r+0x278>
 801a172:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a174:	2b02      	cmp	r3, #2
 801a176:	dc4f      	bgt.n	801a218 <__ssvfiscanf_r+0x29c>
 801a178:	466b      	mov	r3, sp
 801a17a:	4622      	mov	r2, r4
 801a17c:	a941      	add	r1, sp, #260	; 0x104
 801a17e:	4630      	mov	r0, r6
 801a180:	f000 f874 	bl	801a26c <_scanf_chars>
 801a184:	2801      	cmp	r0, #1
 801a186:	d065      	beq.n	801a254 <__ssvfiscanf_r+0x2d8>
 801a188:	2802      	cmp	r0, #2
 801a18a:	f47f af21 	bne.w	8019fd0 <__ssvfiscanf_r+0x54>
 801a18e:	e7cf      	b.n	801a130 <__ssvfiscanf_r+0x1b4>
 801a190:	220a      	movs	r2, #10
 801a192:	e7dd      	b.n	801a150 <__ssvfiscanf_r+0x1d4>
 801a194:	2300      	movs	r3, #0
 801a196:	9342      	str	r3, [sp, #264]	; 0x108
 801a198:	2303      	movs	r3, #3
 801a19a:	e7de      	b.n	801a15a <__ssvfiscanf_r+0x1de>
 801a19c:	2308      	movs	r3, #8
 801a19e:	9342      	str	r3, [sp, #264]	; 0x108
 801a1a0:	2304      	movs	r3, #4
 801a1a2:	e7da      	b.n	801a15a <__ssvfiscanf_r+0x1de>
 801a1a4:	4629      	mov	r1, r5
 801a1a6:	4640      	mov	r0, r8
 801a1a8:	f000 f9d6 	bl	801a558 <__sccl>
 801a1ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1b2:	9341      	str	r3, [sp, #260]	; 0x104
 801a1b4:	4605      	mov	r5, r0
 801a1b6:	2301      	movs	r3, #1
 801a1b8:	e7cf      	b.n	801a15a <__ssvfiscanf_r+0x1de>
 801a1ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1c0:	9341      	str	r3, [sp, #260]	; 0x104
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	e7c9      	b.n	801a15a <__ssvfiscanf_r+0x1de>
 801a1c6:	2302      	movs	r3, #2
 801a1c8:	e7c7      	b.n	801a15a <__ssvfiscanf_r+0x1de>
 801a1ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a1cc:	06c3      	lsls	r3, r0, #27
 801a1ce:	f53f aeff 	bmi.w	8019fd0 <__ssvfiscanf_r+0x54>
 801a1d2:	9b00      	ldr	r3, [sp, #0]
 801a1d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a1d6:	1d19      	adds	r1, r3, #4
 801a1d8:	9100      	str	r1, [sp, #0]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	07c0      	lsls	r0, r0, #31
 801a1de:	bf4c      	ite	mi
 801a1e0:	801a      	strhmi	r2, [r3, #0]
 801a1e2:	601a      	strpl	r2, [r3, #0]
 801a1e4:	e6f4      	b.n	8019fd0 <__ssvfiscanf_r+0x54>
 801a1e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a1e8:	4621      	mov	r1, r4
 801a1ea:	4630      	mov	r0, r6
 801a1ec:	4798      	blx	r3
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	d0b7      	beq.n	801a162 <__ssvfiscanf_r+0x1e6>
 801a1f2:	e79d      	b.n	801a130 <__ssvfiscanf_r+0x1b4>
 801a1f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a1f6:	3201      	adds	r2, #1
 801a1f8:	9245      	str	r2, [sp, #276]	; 0x114
 801a1fa:	6862      	ldr	r2, [r4, #4]
 801a1fc:	3a01      	subs	r2, #1
 801a1fe:	2a00      	cmp	r2, #0
 801a200:	6062      	str	r2, [r4, #4]
 801a202:	dd02      	ble.n	801a20a <__ssvfiscanf_r+0x28e>
 801a204:	3301      	adds	r3, #1
 801a206:	6023      	str	r3, [r4, #0]
 801a208:	e7ae      	b.n	801a168 <__ssvfiscanf_r+0x1ec>
 801a20a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a20c:	4621      	mov	r1, r4
 801a20e:	4630      	mov	r0, r6
 801a210:	4798      	blx	r3
 801a212:	2800      	cmp	r0, #0
 801a214:	d0a8      	beq.n	801a168 <__ssvfiscanf_r+0x1ec>
 801a216:	e78b      	b.n	801a130 <__ssvfiscanf_r+0x1b4>
 801a218:	2b04      	cmp	r3, #4
 801a21a:	dc06      	bgt.n	801a22a <__ssvfiscanf_r+0x2ae>
 801a21c:	466b      	mov	r3, sp
 801a21e:	4622      	mov	r2, r4
 801a220:	a941      	add	r1, sp, #260	; 0x104
 801a222:	4630      	mov	r0, r6
 801a224:	f000 f87a 	bl	801a31c <_scanf_i>
 801a228:	e7ac      	b.n	801a184 <__ssvfiscanf_r+0x208>
 801a22a:	4b0f      	ldr	r3, [pc, #60]	; (801a268 <__ssvfiscanf_r+0x2ec>)
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	f43f aecf 	beq.w	8019fd0 <__ssvfiscanf_r+0x54>
 801a232:	466b      	mov	r3, sp
 801a234:	4622      	mov	r2, r4
 801a236:	a941      	add	r1, sp, #260	; 0x104
 801a238:	4630      	mov	r0, r6
 801a23a:	f7fc fbe1 	bl	8016a00 <_scanf_float>
 801a23e:	e7a1      	b.n	801a184 <__ssvfiscanf_r+0x208>
 801a240:	89a3      	ldrh	r3, [r4, #12]
 801a242:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a246:	bf18      	it	ne
 801a248:	f04f 30ff 	movne.w	r0, #4294967295
 801a24c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a254:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a256:	e7f9      	b.n	801a24c <__ssvfiscanf_r+0x2d0>
 801a258:	08019ec9 	.word	0x08019ec9
 801a25c:	08019f43 	.word	0x08019f43
 801a260:	0801cb19 	.word	0x0801cb19
 801a264:	0801ce92 	.word	0x0801ce92
 801a268:	08016a01 	.word	0x08016a01

0801a26c <_scanf_chars>:
 801a26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a270:	4615      	mov	r5, r2
 801a272:	688a      	ldr	r2, [r1, #8]
 801a274:	4680      	mov	r8, r0
 801a276:	460c      	mov	r4, r1
 801a278:	b932      	cbnz	r2, 801a288 <_scanf_chars+0x1c>
 801a27a:	698a      	ldr	r2, [r1, #24]
 801a27c:	2a00      	cmp	r2, #0
 801a27e:	bf0c      	ite	eq
 801a280:	2201      	moveq	r2, #1
 801a282:	f04f 32ff 	movne.w	r2, #4294967295
 801a286:	608a      	str	r2, [r1, #8]
 801a288:	6822      	ldr	r2, [r4, #0]
 801a28a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801a318 <_scanf_chars+0xac>
 801a28e:	06d1      	lsls	r1, r2, #27
 801a290:	bf5f      	itttt	pl
 801a292:	681a      	ldrpl	r2, [r3, #0]
 801a294:	1d11      	addpl	r1, r2, #4
 801a296:	6019      	strpl	r1, [r3, #0]
 801a298:	6816      	ldrpl	r6, [r2, #0]
 801a29a:	2700      	movs	r7, #0
 801a29c:	69a0      	ldr	r0, [r4, #24]
 801a29e:	b188      	cbz	r0, 801a2c4 <_scanf_chars+0x58>
 801a2a0:	2801      	cmp	r0, #1
 801a2a2:	d107      	bne.n	801a2b4 <_scanf_chars+0x48>
 801a2a4:	682b      	ldr	r3, [r5, #0]
 801a2a6:	781a      	ldrb	r2, [r3, #0]
 801a2a8:	6963      	ldr	r3, [r4, #20]
 801a2aa:	5c9b      	ldrb	r3, [r3, r2]
 801a2ac:	b953      	cbnz	r3, 801a2c4 <_scanf_chars+0x58>
 801a2ae:	bb27      	cbnz	r7, 801a2fa <_scanf_chars+0x8e>
 801a2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2b4:	2802      	cmp	r0, #2
 801a2b6:	d120      	bne.n	801a2fa <_scanf_chars+0x8e>
 801a2b8:	682b      	ldr	r3, [r5, #0]
 801a2ba:	781b      	ldrb	r3, [r3, #0]
 801a2bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a2c0:	071b      	lsls	r3, r3, #28
 801a2c2:	d41a      	bmi.n	801a2fa <_scanf_chars+0x8e>
 801a2c4:	6823      	ldr	r3, [r4, #0]
 801a2c6:	06da      	lsls	r2, r3, #27
 801a2c8:	bf5e      	ittt	pl
 801a2ca:	682b      	ldrpl	r3, [r5, #0]
 801a2cc:	781b      	ldrbpl	r3, [r3, #0]
 801a2ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a2d2:	682a      	ldr	r2, [r5, #0]
 801a2d4:	686b      	ldr	r3, [r5, #4]
 801a2d6:	3201      	adds	r2, #1
 801a2d8:	602a      	str	r2, [r5, #0]
 801a2da:	68a2      	ldr	r2, [r4, #8]
 801a2dc:	3b01      	subs	r3, #1
 801a2de:	3a01      	subs	r2, #1
 801a2e0:	606b      	str	r3, [r5, #4]
 801a2e2:	3701      	adds	r7, #1
 801a2e4:	60a2      	str	r2, [r4, #8]
 801a2e6:	b142      	cbz	r2, 801a2fa <_scanf_chars+0x8e>
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	dcd7      	bgt.n	801a29c <_scanf_chars+0x30>
 801a2ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a2f0:	4629      	mov	r1, r5
 801a2f2:	4640      	mov	r0, r8
 801a2f4:	4798      	blx	r3
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	d0d0      	beq.n	801a29c <_scanf_chars+0x30>
 801a2fa:	6823      	ldr	r3, [r4, #0]
 801a2fc:	f013 0310 	ands.w	r3, r3, #16
 801a300:	d105      	bne.n	801a30e <_scanf_chars+0xa2>
 801a302:	68e2      	ldr	r2, [r4, #12]
 801a304:	3201      	adds	r2, #1
 801a306:	60e2      	str	r2, [r4, #12]
 801a308:	69a2      	ldr	r2, [r4, #24]
 801a30a:	b102      	cbz	r2, 801a30e <_scanf_chars+0xa2>
 801a30c:	7033      	strb	r3, [r6, #0]
 801a30e:	6923      	ldr	r3, [r4, #16]
 801a310:	441f      	add	r7, r3
 801a312:	6127      	str	r7, [r4, #16]
 801a314:	2000      	movs	r0, #0
 801a316:	e7cb      	b.n	801a2b0 <_scanf_chars+0x44>
 801a318:	0801cb19 	.word	0x0801cb19

0801a31c <_scanf_i>:
 801a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a320:	4698      	mov	r8, r3
 801a322:	4b74      	ldr	r3, [pc, #464]	; (801a4f4 <_scanf_i+0x1d8>)
 801a324:	460c      	mov	r4, r1
 801a326:	4682      	mov	sl, r0
 801a328:	4616      	mov	r6, r2
 801a32a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a32e:	b087      	sub	sp, #28
 801a330:	ab03      	add	r3, sp, #12
 801a332:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a336:	4b70      	ldr	r3, [pc, #448]	; (801a4f8 <_scanf_i+0x1dc>)
 801a338:	69a1      	ldr	r1, [r4, #24]
 801a33a:	4a70      	ldr	r2, [pc, #448]	; (801a4fc <_scanf_i+0x1e0>)
 801a33c:	2903      	cmp	r1, #3
 801a33e:	bf18      	it	ne
 801a340:	461a      	movne	r2, r3
 801a342:	68a3      	ldr	r3, [r4, #8]
 801a344:	9201      	str	r2, [sp, #4]
 801a346:	1e5a      	subs	r2, r3, #1
 801a348:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a34c:	bf88      	it	hi
 801a34e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a352:	4627      	mov	r7, r4
 801a354:	bf82      	ittt	hi
 801a356:	eb03 0905 	addhi.w	r9, r3, r5
 801a35a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a35e:	60a3      	strhi	r3, [r4, #8]
 801a360:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a364:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a368:	bf98      	it	ls
 801a36a:	f04f 0900 	movls.w	r9, #0
 801a36e:	6023      	str	r3, [r4, #0]
 801a370:	463d      	mov	r5, r7
 801a372:	f04f 0b00 	mov.w	fp, #0
 801a376:	6831      	ldr	r1, [r6, #0]
 801a378:	ab03      	add	r3, sp, #12
 801a37a:	7809      	ldrb	r1, [r1, #0]
 801a37c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a380:	2202      	movs	r2, #2
 801a382:	f7e5 ff2d 	bl	80001e0 <memchr>
 801a386:	b328      	cbz	r0, 801a3d4 <_scanf_i+0xb8>
 801a388:	f1bb 0f01 	cmp.w	fp, #1
 801a38c:	d159      	bne.n	801a442 <_scanf_i+0x126>
 801a38e:	6862      	ldr	r2, [r4, #4]
 801a390:	b92a      	cbnz	r2, 801a39e <_scanf_i+0x82>
 801a392:	6822      	ldr	r2, [r4, #0]
 801a394:	2308      	movs	r3, #8
 801a396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a39a:	6063      	str	r3, [r4, #4]
 801a39c:	6022      	str	r2, [r4, #0]
 801a39e:	6822      	ldr	r2, [r4, #0]
 801a3a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a3a4:	6022      	str	r2, [r4, #0]
 801a3a6:	68a2      	ldr	r2, [r4, #8]
 801a3a8:	1e51      	subs	r1, r2, #1
 801a3aa:	60a1      	str	r1, [r4, #8]
 801a3ac:	b192      	cbz	r2, 801a3d4 <_scanf_i+0xb8>
 801a3ae:	6832      	ldr	r2, [r6, #0]
 801a3b0:	1c51      	adds	r1, r2, #1
 801a3b2:	6031      	str	r1, [r6, #0]
 801a3b4:	7812      	ldrb	r2, [r2, #0]
 801a3b6:	f805 2b01 	strb.w	r2, [r5], #1
 801a3ba:	6872      	ldr	r2, [r6, #4]
 801a3bc:	3a01      	subs	r2, #1
 801a3be:	2a00      	cmp	r2, #0
 801a3c0:	6072      	str	r2, [r6, #4]
 801a3c2:	dc07      	bgt.n	801a3d4 <_scanf_i+0xb8>
 801a3c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a3c8:	4631      	mov	r1, r6
 801a3ca:	4650      	mov	r0, sl
 801a3cc:	4790      	blx	r2
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	f040 8085 	bne.w	801a4de <_scanf_i+0x1c2>
 801a3d4:	f10b 0b01 	add.w	fp, fp, #1
 801a3d8:	f1bb 0f03 	cmp.w	fp, #3
 801a3dc:	d1cb      	bne.n	801a376 <_scanf_i+0x5a>
 801a3de:	6863      	ldr	r3, [r4, #4]
 801a3e0:	b90b      	cbnz	r3, 801a3e6 <_scanf_i+0xca>
 801a3e2:	230a      	movs	r3, #10
 801a3e4:	6063      	str	r3, [r4, #4]
 801a3e6:	6863      	ldr	r3, [r4, #4]
 801a3e8:	4945      	ldr	r1, [pc, #276]	; (801a500 <_scanf_i+0x1e4>)
 801a3ea:	6960      	ldr	r0, [r4, #20]
 801a3ec:	1ac9      	subs	r1, r1, r3
 801a3ee:	f000 f8b3 	bl	801a558 <__sccl>
 801a3f2:	f04f 0b00 	mov.w	fp, #0
 801a3f6:	68a3      	ldr	r3, [r4, #8]
 801a3f8:	6822      	ldr	r2, [r4, #0]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d03d      	beq.n	801a47a <_scanf_i+0x15e>
 801a3fe:	6831      	ldr	r1, [r6, #0]
 801a400:	6960      	ldr	r0, [r4, #20]
 801a402:	f891 c000 	ldrb.w	ip, [r1]
 801a406:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a40a:	2800      	cmp	r0, #0
 801a40c:	d035      	beq.n	801a47a <_scanf_i+0x15e>
 801a40e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a412:	d124      	bne.n	801a45e <_scanf_i+0x142>
 801a414:	0510      	lsls	r0, r2, #20
 801a416:	d522      	bpl.n	801a45e <_scanf_i+0x142>
 801a418:	f10b 0b01 	add.w	fp, fp, #1
 801a41c:	f1b9 0f00 	cmp.w	r9, #0
 801a420:	d003      	beq.n	801a42a <_scanf_i+0x10e>
 801a422:	3301      	adds	r3, #1
 801a424:	f109 39ff 	add.w	r9, r9, #4294967295
 801a428:	60a3      	str	r3, [r4, #8]
 801a42a:	6873      	ldr	r3, [r6, #4]
 801a42c:	3b01      	subs	r3, #1
 801a42e:	2b00      	cmp	r3, #0
 801a430:	6073      	str	r3, [r6, #4]
 801a432:	dd1b      	ble.n	801a46c <_scanf_i+0x150>
 801a434:	6833      	ldr	r3, [r6, #0]
 801a436:	3301      	adds	r3, #1
 801a438:	6033      	str	r3, [r6, #0]
 801a43a:	68a3      	ldr	r3, [r4, #8]
 801a43c:	3b01      	subs	r3, #1
 801a43e:	60a3      	str	r3, [r4, #8]
 801a440:	e7d9      	b.n	801a3f6 <_scanf_i+0xda>
 801a442:	f1bb 0f02 	cmp.w	fp, #2
 801a446:	d1ae      	bne.n	801a3a6 <_scanf_i+0x8a>
 801a448:	6822      	ldr	r2, [r4, #0]
 801a44a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a44e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a452:	d1bf      	bne.n	801a3d4 <_scanf_i+0xb8>
 801a454:	2310      	movs	r3, #16
 801a456:	6063      	str	r3, [r4, #4]
 801a458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a45c:	e7a2      	b.n	801a3a4 <_scanf_i+0x88>
 801a45e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a462:	6022      	str	r2, [r4, #0]
 801a464:	780b      	ldrb	r3, [r1, #0]
 801a466:	f805 3b01 	strb.w	r3, [r5], #1
 801a46a:	e7de      	b.n	801a42a <_scanf_i+0x10e>
 801a46c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a470:	4631      	mov	r1, r6
 801a472:	4650      	mov	r0, sl
 801a474:	4798      	blx	r3
 801a476:	2800      	cmp	r0, #0
 801a478:	d0df      	beq.n	801a43a <_scanf_i+0x11e>
 801a47a:	6823      	ldr	r3, [r4, #0]
 801a47c:	05d9      	lsls	r1, r3, #23
 801a47e:	d50d      	bpl.n	801a49c <_scanf_i+0x180>
 801a480:	42bd      	cmp	r5, r7
 801a482:	d909      	bls.n	801a498 <_scanf_i+0x17c>
 801a484:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a48c:	4632      	mov	r2, r6
 801a48e:	4650      	mov	r0, sl
 801a490:	4798      	blx	r3
 801a492:	f105 39ff 	add.w	r9, r5, #4294967295
 801a496:	464d      	mov	r5, r9
 801a498:	42bd      	cmp	r5, r7
 801a49a:	d028      	beq.n	801a4ee <_scanf_i+0x1d2>
 801a49c:	6822      	ldr	r2, [r4, #0]
 801a49e:	f012 0210 	ands.w	r2, r2, #16
 801a4a2:	d113      	bne.n	801a4cc <_scanf_i+0x1b0>
 801a4a4:	702a      	strb	r2, [r5, #0]
 801a4a6:	6863      	ldr	r3, [r4, #4]
 801a4a8:	9e01      	ldr	r6, [sp, #4]
 801a4aa:	4639      	mov	r1, r7
 801a4ac:	4650      	mov	r0, sl
 801a4ae:	47b0      	blx	r6
 801a4b0:	f8d8 3000 	ldr.w	r3, [r8]
 801a4b4:	6821      	ldr	r1, [r4, #0]
 801a4b6:	1d1a      	adds	r2, r3, #4
 801a4b8:	f8c8 2000 	str.w	r2, [r8]
 801a4bc:	f011 0f20 	tst.w	r1, #32
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	d00f      	beq.n	801a4e4 <_scanf_i+0x1c8>
 801a4c4:	6018      	str	r0, [r3, #0]
 801a4c6:	68e3      	ldr	r3, [r4, #12]
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	60e3      	str	r3, [r4, #12]
 801a4cc:	1bed      	subs	r5, r5, r7
 801a4ce:	44ab      	add	fp, r5
 801a4d0:	6925      	ldr	r5, [r4, #16]
 801a4d2:	445d      	add	r5, fp
 801a4d4:	6125      	str	r5, [r4, #16]
 801a4d6:	2000      	movs	r0, #0
 801a4d8:	b007      	add	sp, #28
 801a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4de:	f04f 0b00 	mov.w	fp, #0
 801a4e2:	e7ca      	b.n	801a47a <_scanf_i+0x15e>
 801a4e4:	07ca      	lsls	r2, r1, #31
 801a4e6:	bf4c      	ite	mi
 801a4e8:	8018      	strhmi	r0, [r3, #0]
 801a4ea:	6018      	strpl	r0, [r3, #0]
 801a4ec:	e7eb      	b.n	801a4c6 <_scanf_i+0x1aa>
 801a4ee:	2001      	movs	r0, #1
 801a4f0:	e7f2      	b.n	801a4d8 <_scanf_i+0x1bc>
 801a4f2:	bf00      	nop
 801a4f4:	0801ca68 	.word	0x0801ca68
 801a4f8:	0801a6e9 	.word	0x0801a6e9
 801a4fc:	08017cb1 	.word	0x08017cb1
 801a500:	0801ceb6 	.word	0x0801ceb6

0801a504 <_read_r>:
 801a504:	b538      	push	{r3, r4, r5, lr}
 801a506:	4d07      	ldr	r5, [pc, #28]	; (801a524 <_read_r+0x20>)
 801a508:	4604      	mov	r4, r0
 801a50a:	4608      	mov	r0, r1
 801a50c:	4611      	mov	r1, r2
 801a50e:	2200      	movs	r2, #0
 801a510:	602a      	str	r2, [r5, #0]
 801a512:	461a      	mov	r2, r3
 801a514:	f7f1 f96a 	bl	800b7ec <_read>
 801a518:	1c43      	adds	r3, r0, #1
 801a51a:	d102      	bne.n	801a522 <_read_r+0x1e>
 801a51c:	682b      	ldr	r3, [r5, #0]
 801a51e:	b103      	cbz	r3, 801a522 <_read_r+0x1e>
 801a520:	6023      	str	r3, [r4, #0]
 801a522:	bd38      	pop	{r3, r4, r5, pc}
 801a524:	20008138 	.word	0x20008138

0801a528 <nan>:
 801a528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a530 <nan+0x8>
 801a52c:	4770      	bx	lr
 801a52e:	bf00      	nop
 801a530:	00000000 	.word	0x00000000
 801a534:	7ff80000 	.word	0x7ff80000

0801a538 <_sbrk_r>:
 801a538:	b538      	push	{r3, r4, r5, lr}
 801a53a:	4d06      	ldr	r5, [pc, #24]	; (801a554 <_sbrk_r+0x1c>)
 801a53c:	2300      	movs	r3, #0
 801a53e:	4604      	mov	r4, r0
 801a540:	4608      	mov	r0, r1
 801a542:	602b      	str	r3, [r5, #0]
 801a544:	f7f1 f9c0 	bl	800b8c8 <_sbrk>
 801a548:	1c43      	adds	r3, r0, #1
 801a54a:	d102      	bne.n	801a552 <_sbrk_r+0x1a>
 801a54c:	682b      	ldr	r3, [r5, #0]
 801a54e:	b103      	cbz	r3, 801a552 <_sbrk_r+0x1a>
 801a550:	6023      	str	r3, [r4, #0]
 801a552:	bd38      	pop	{r3, r4, r5, pc}
 801a554:	20008138 	.word	0x20008138

0801a558 <__sccl>:
 801a558:	b570      	push	{r4, r5, r6, lr}
 801a55a:	780b      	ldrb	r3, [r1, #0]
 801a55c:	4604      	mov	r4, r0
 801a55e:	2b5e      	cmp	r3, #94	; 0x5e
 801a560:	bf0b      	itete	eq
 801a562:	784b      	ldrbeq	r3, [r1, #1]
 801a564:	1c48      	addne	r0, r1, #1
 801a566:	1c88      	addeq	r0, r1, #2
 801a568:	2200      	movne	r2, #0
 801a56a:	bf08      	it	eq
 801a56c:	2201      	moveq	r2, #1
 801a56e:	1e61      	subs	r1, r4, #1
 801a570:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a574:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a578:	42a9      	cmp	r1, r5
 801a57a:	d1fb      	bne.n	801a574 <__sccl+0x1c>
 801a57c:	b90b      	cbnz	r3, 801a582 <__sccl+0x2a>
 801a57e:	3801      	subs	r0, #1
 801a580:	bd70      	pop	{r4, r5, r6, pc}
 801a582:	f082 0101 	eor.w	r1, r2, #1
 801a586:	54e1      	strb	r1, [r4, r3]
 801a588:	1c42      	adds	r2, r0, #1
 801a58a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801a58e:	2d2d      	cmp	r5, #45	; 0x2d
 801a590:	f102 36ff 	add.w	r6, r2, #4294967295
 801a594:	4610      	mov	r0, r2
 801a596:	d006      	beq.n	801a5a6 <__sccl+0x4e>
 801a598:	2d5d      	cmp	r5, #93	; 0x5d
 801a59a:	d0f1      	beq.n	801a580 <__sccl+0x28>
 801a59c:	b90d      	cbnz	r5, 801a5a2 <__sccl+0x4a>
 801a59e:	4630      	mov	r0, r6
 801a5a0:	e7ee      	b.n	801a580 <__sccl+0x28>
 801a5a2:	462b      	mov	r3, r5
 801a5a4:	e7ef      	b.n	801a586 <__sccl+0x2e>
 801a5a6:	7816      	ldrb	r6, [r2, #0]
 801a5a8:	2e5d      	cmp	r6, #93	; 0x5d
 801a5aa:	d0fa      	beq.n	801a5a2 <__sccl+0x4a>
 801a5ac:	42b3      	cmp	r3, r6
 801a5ae:	dcf8      	bgt.n	801a5a2 <__sccl+0x4a>
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	3001      	adds	r0, #1
 801a5b4:	4286      	cmp	r6, r0
 801a5b6:	5421      	strb	r1, [r4, r0]
 801a5b8:	dcfb      	bgt.n	801a5b2 <__sccl+0x5a>
 801a5ba:	43d8      	mvns	r0, r3
 801a5bc:	4430      	add	r0, r6
 801a5be:	1c5d      	adds	r5, r3, #1
 801a5c0:	42b3      	cmp	r3, r6
 801a5c2:	bfa8      	it	ge
 801a5c4:	2000      	movge	r0, #0
 801a5c6:	182b      	adds	r3, r5, r0
 801a5c8:	3202      	adds	r2, #2
 801a5ca:	e7de      	b.n	801a58a <__sccl+0x32>

0801a5cc <strncmp>:
 801a5cc:	b510      	push	{r4, lr}
 801a5ce:	b16a      	cbz	r2, 801a5ec <strncmp+0x20>
 801a5d0:	3901      	subs	r1, #1
 801a5d2:	1884      	adds	r4, r0, r2
 801a5d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a5d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a5dc:	4293      	cmp	r3, r2
 801a5de:	d103      	bne.n	801a5e8 <strncmp+0x1c>
 801a5e0:	42a0      	cmp	r0, r4
 801a5e2:	d001      	beq.n	801a5e8 <strncmp+0x1c>
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d1f5      	bne.n	801a5d4 <strncmp+0x8>
 801a5e8:	1a98      	subs	r0, r3, r2
 801a5ea:	bd10      	pop	{r4, pc}
 801a5ec:	4610      	mov	r0, r2
 801a5ee:	e7fc      	b.n	801a5ea <strncmp+0x1e>

0801a5f0 <_strtoul_l.isra.0>:
 801a5f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5f4:	4e3b      	ldr	r6, [pc, #236]	; (801a6e4 <_strtoul_l.isra.0+0xf4>)
 801a5f6:	4686      	mov	lr, r0
 801a5f8:	468c      	mov	ip, r1
 801a5fa:	4660      	mov	r0, ip
 801a5fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a600:	5da5      	ldrb	r5, [r4, r6]
 801a602:	f015 0508 	ands.w	r5, r5, #8
 801a606:	d1f8      	bne.n	801a5fa <_strtoul_l.isra.0+0xa>
 801a608:	2c2d      	cmp	r4, #45	; 0x2d
 801a60a:	d134      	bne.n	801a676 <_strtoul_l.isra.0+0x86>
 801a60c:	f89c 4000 	ldrb.w	r4, [ip]
 801a610:	f04f 0801 	mov.w	r8, #1
 801a614:	f100 0c02 	add.w	ip, r0, #2
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d05e      	beq.n	801a6da <_strtoul_l.isra.0+0xea>
 801a61c:	2b10      	cmp	r3, #16
 801a61e:	d10c      	bne.n	801a63a <_strtoul_l.isra.0+0x4a>
 801a620:	2c30      	cmp	r4, #48	; 0x30
 801a622:	d10a      	bne.n	801a63a <_strtoul_l.isra.0+0x4a>
 801a624:	f89c 0000 	ldrb.w	r0, [ip]
 801a628:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a62c:	2858      	cmp	r0, #88	; 0x58
 801a62e:	d14f      	bne.n	801a6d0 <_strtoul_l.isra.0+0xe0>
 801a630:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801a634:	2310      	movs	r3, #16
 801a636:	f10c 0c02 	add.w	ip, ip, #2
 801a63a:	f04f 37ff 	mov.w	r7, #4294967295
 801a63e:	2500      	movs	r5, #0
 801a640:	fbb7 f7f3 	udiv	r7, r7, r3
 801a644:	fb03 f907 	mul.w	r9, r3, r7
 801a648:	ea6f 0909 	mvn.w	r9, r9
 801a64c:	4628      	mov	r0, r5
 801a64e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801a652:	2e09      	cmp	r6, #9
 801a654:	d818      	bhi.n	801a688 <_strtoul_l.isra.0+0x98>
 801a656:	4634      	mov	r4, r6
 801a658:	42a3      	cmp	r3, r4
 801a65a:	dd24      	ble.n	801a6a6 <_strtoul_l.isra.0+0xb6>
 801a65c:	2d00      	cmp	r5, #0
 801a65e:	db1f      	blt.n	801a6a0 <_strtoul_l.isra.0+0xb0>
 801a660:	4287      	cmp	r7, r0
 801a662:	d31d      	bcc.n	801a6a0 <_strtoul_l.isra.0+0xb0>
 801a664:	d101      	bne.n	801a66a <_strtoul_l.isra.0+0x7a>
 801a666:	45a1      	cmp	r9, r4
 801a668:	db1a      	blt.n	801a6a0 <_strtoul_l.isra.0+0xb0>
 801a66a:	fb00 4003 	mla	r0, r0, r3, r4
 801a66e:	2501      	movs	r5, #1
 801a670:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a674:	e7eb      	b.n	801a64e <_strtoul_l.isra.0+0x5e>
 801a676:	2c2b      	cmp	r4, #43	; 0x2b
 801a678:	bf08      	it	eq
 801a67a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801a67e:	46a8      	mov	r8, r5
 801a680:	bf08      	it	eq
 801a682:	f100 0c02 	addeq.w	ip, r0, #2
 801a686:	e7c7      	b.n	801a618 <_strtoul_l.isra.0+0x28>
 801a688:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801a68c:	2e19      	cmp	r6, #25
 801a68e:	d801      	bhi.n	801a694 <_strtoul_l.isra.0+0xa4>
 801a690:	3c37      	subs	r4, #55	; 0x37
 801a692:	e7e1      	b.n	801a658 <_strtoul_l.isra.0+0x68>
 801a694:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801a698:	2e19      	cmp	r6, #25
 801a69a:	d804      	bhi.n	801a6a6 <_strtoul_l.isra.0+0xb6>
 801a69c:	3c57      	subs	r4, #87	; 0x57
 801a69e:	e7db      	b.n	801a658 <_strtoul_l.isra.0+0x68>
 801a6a0:	f04f 35ff 	mov.w	r5, #4294967295
 801a6a4:	e7e4      	b.n	801a670 <_strtoul_l.isra.0+0x80>
 801a6a6:	2d00      	cmp	r5, #0
 801a6a8:	da07      	bge.n	801a6ba <_strtoul_l.isra.0+0xca>
 801a6aa:	2322      	movs	r3, #34	; 0x22
 801a6ac:	f8ce 3000 	str.w	r3, [lr]
 801a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a6b4:	b942      	cbnz	r2, 801a6c8 <_strtoul_l.isra.0+0xd8>
 801a6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6ba:	f1b8 0f00 	cmp.w	r8, #0
 801a6be:	d000      	beq.n	801a6c2 <_strtoul_l.isra.0+0xd2>
 801a6c0:	4240      	negs	r0, r0
 801a6c2:	2a00      	cmp	r2, #0
 801a6c4:	d0f7      	beq.n	801a6b6 <_strtoul_l.isra.0+0xc6>
 801a6c6:	b10d      	cbz	r5, 801a6cc <_strtoul_l.isra.0+0xdc>
 801a6c8:	f10c 31ff 	add.w	r1, ip, #4294967295
 801a6cc:	6011      	str	r1, [r2, #0]
 801a6ce:	e7f2      	b.n	801a6b6 <_strtoul_l.isra.0+0xc6>
 801a6d0:	2430      	movs	r4, #48	; 0x30
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d1b1      	bne.n	801a63a <_strtoul_l.isra.0+0x4a>
 801a6d6:	2308      	movs	r3, #8
 801a6d8:	e7af      	b.n	801a63a <_strtoul_l.isra.0+0x4a>
 801a6da:	2c30      	cmp	r4, #48	; 0x30
 801a6dc:	d0a2      	beq.n	801a624 <_strtoul_l.isra.0+0x34>
 801a6de:	230a      	movs	r3, #10
 801a6e0:	e7ab      	b.n	801a63a <_strtoul_l.isra.0+0x4a>
 801a6e2:	bf00      	nop
 801a6e4:	0801cb19 	.word	0x0801cb19

0801a6e8 <_strtoul_r>:
 801a6e8:	f7ff bf82 	b.w	801a5f0 <_strtoul_l.isra.0>

0801a6ec <__submore>:
 801a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a6f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6f8:	4299      	cmp	r1, r3
 801a6fa:	d11d      	bne.n	801a738 <__submore+0x4c>
 801a6fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a700:	f7ff fa2c 	bl	8019b5c <_malloc_r>
 801a704:	b918      	cbnz	r0, 801a70e <__submore+0x22>
 801a706:	f04f 30ff 	mov.w	r0, #4294967295
 801a70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a712:	63a3      	str	r3, [r4, #56]	; 0x38
 801a714:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a718:	6360      	str	r0, [r4, #52]	; 0x34
 801a71a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a71e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a722:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a726:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a72a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a72e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a732:	6020      	str	r0, [r4, #0]
 801a734:	2000      	movs	r0, #0
 801a736:	e7e8      	b.n	801a70a <__submore+0x1e>
 801a738:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a73a:	0077      	lsls	r7, r6, #1
 801a73c:	463a      	mov	r2, r7
 801a73e:	f000 fa2d 	bl	801ab9c <_realloc_r>
 801a742:	4605      	mov	r5, r0
 801a744:	2800      	cmp	r0, #0
 801a746:	d0de      	beq.n	801a706 <__submore+0x1a>
 801a748:	eb00 0806 	add.w	r8, r0, r6
 801a74c:	4601      	mov	r1, r0
 801a74e:	4632      	mov	r2, r6
 801a750:	4640      	mov	r0, r8
 801a752:	f7fb fcd5 	bl	8016100 <memcpy>
 801a756:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a75a:	f8c4 8000 	str.w	r8, [r4]
 801a75e:	e7e9      	b.n	801a734 <__submore+0x48>

0801a760 <__ascii_wctomb>:
 801a760:	b149      	cbz	r1, 801a776 <__ascii_wctomb+0x16>
 801a762:	2aff      	cmp	r2, #255	; 0xff
 801a764:	bf85      	ittet	hi
 801a766:	238a      	movhi	r3, #138	; 0x8a
 801a768:	6003      	strhi	r3, [r0, #0]
 801a76a:	700a      	strbls	r2, [r1, #0]
 801a76c:	f04f 30ff 	movhi.w	r0, #4294967295
 801a770:	bf98      	it	ls
 801a772:	2001      	movls	r0, #1
 801a774:	4770      	bx	lr
 801a776:	4608      	mov	r0, r1
 801a778:	4770      	bx	lr
	...

0801a77c <__assert_func>:
 801a77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a77e:	4614      	mov	r4, r2
 801a780:	461a      	mov	r2, r3
 801a782:	4b09      	ldr	r3, [pc, #36]	; (801a7a8 <__assert_func+0x2c>)
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	4605      	mov	r5, r0
 801a788:	68d8      	ldr	r0, [r3, #12]
 801a78a:	b14c      	cbz	r4, 801a7a0 <__assert_func+0x24>
 801a78c:	4b07      	ldr	r3, [pc, #28]	; (801a7ac <__assert_func+0x30>)
 801a78e:	9100      	str	r1, [sp, #0]
 801a790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a794:	4906      	ldr	r1, [pc, #24]	; (801a7b0 <__assert_func+0x34>)
 801a796:	462b      	mov	r3, r5
 801a798:	f000 f9a6 	bl	801aae8 <fiprintf>
 801a79c:	f000 fc3e 	bl	801b01c <abort>
 801a7a0:	4b04      	ldr	r3, [pc, #16]	; (801a7b4 <__assert_func+0x38>)
 801a7a2:	461c      	mov	r4, r3
 801a7a4:	e7f3      	b.n	801a78e <__assert_func+0x12>
 801a7a6:	bf00      	nop
 801a7a8:	20000278 	.word	0x20000278
 801a7ac:	0801ceb8 	.word	0x0801ceb8
 801a7b0:	0801cec5 	.word	0x0801cec5
 801a7b4:	0801cef3 	.word	0x0801cef3

0801a7b8 <__sflush_r>:
 801a7b8:	898a      	ldrh	r2, [r1, #12]
 801a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7be:	4605      	mov	r5, r0
 801a7c0:	0710      	lsls	r0, r2, #28
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	d458      	bmi.n	801a878 <__sflush_r+0xc0>
 801a7c6:	684b      	ldr	r3, [r1, #4]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	dc05      	bgt.n	801a7d8 <__sflush_r+0x20>
 801a7cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	dc02      	bgt.n	801a7d8 <__sflush_r+0x20>
 801a7d2:	2000      	movs	r0, #0
 801a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a7da:	2e00      	cmp	r6, #0
 801a7dc:	d0f9      	beq.n	801a7d2 <__sflush_r+0x1a>
 801a7de:	2300      	movs	r3, #0
 801a7e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a7e4:	682f      	ldr	r7, [r5, #0]
 801a7e6:	602b      	str	r3, [r5, #0]
 801a7e8:	d032      	beq.n	801a850 <__sflush_r+0x98>
 801a7ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a7ec:	89a3      	ldrh	r3, [r4, #12]
 801a7ee:	075a      	lsls	r2, r3, #29
 801a7f0:	d505      	bpl.n	801a7fe <__sflush_r+0x46>
 801a7f2:	6863      	ldr	r3, [r4, #4]
 801a7f4:	1ac0      	subs	r0, r0, r3
 801a7f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a7f8:	b10b      	cbz	r3, 801a7fe <__sflush_r+0x46>
 801a7fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a7fc:	1ac0      	subs	r0, r0, r3
 801a7fe:	2300      	movs	r3, #0
 801a800:	4602      	mov	r2, r0
 801a802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a804:	6a21      	ldr	r1, [r4, #32]
 801a806:	4628      	mov	r0, r5
 801a808:	47b0      	blx	r6
 801a80a:	1c43      	adds	r3, r0, #1
 801a80c:	89a3      	ldrh	r3, [r4, #12]
 801a80e:	d106      	bne.n	801a81e <__sflush_r+0x66>
 801a810:	6829      	ldr	r1, [r5, #0]
 801a812:	291d      	cmp	r1, #29
 801a814:	d82c      	bhi.n	801a870 <__sflush_r+0xb8>
 801a816:	4a2a      	ldr	r2, [pc, #168]	; (801a8c0 <__sflush_r+0x108>)
 801a818:	40ca      	lsrs	r2, r1
 801a81a:	07d6      	lsls	r6, r2, #31
 801a81c:	d528      	bpl.n	801a870 <__sflush_r+0xb8>
 801a81e:	2200      	movs	r2, #0
 801a820:	6062      	str	r2, [r4, #4]
 801a822:	04d9      	lsls	r1, r3, #19
 801a824:	6922      	ldr	r2, [r4, #16]
 801a826:	6022      	str	r2, [r4, #0]
 801a828:	d504      	bpl.n	801a834 <__sflush_r+0x7c>
 801a82a:	1c42      	adds	r2, r0, #1
 801a82c:	d101      	bne.n	801a832 <__sflush_r+0x7a>
 801a82e:	682b      	ldr	r3, [r5, #0]
 801a830:	b903      	cbnz	r3, 801a834 <__sflush_r+0x7c>
 801a832:	6560      	str	r0, [r4, #84]	; 0x54
 801a834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a836:	602f      	str	r7, [r5, #0]
 801a838:	2900      	cmp	r1, #0
 801a83a:	d0ca      	beq.n	801a7d2 <__sflush_r+0x1a>
 801a83c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a840:	4299      	cmp	r1, r3
 801a842:	d002      	beq.n	801a84a <__sflush_r+0x92>
 801a844:	4628      	mov	r0, r5
 801a846:	f7ff f939 	bl	8019abc <_free_r>
 801a84a:	2000      	movs	r0, #0
 801a84c:	6360      	str	r0, [r4, #52]	; 0x34
 801a84e:	e7c1      	b.n	801a7d4 <__sflush_r+0x1c>
 801a850:	6a21      	ldr	r1, [r4, #32]
 801a852:	2301      	movs	r3, #1
 801a854:	4628      	mov	r0, r5
 801a856:	47b0      	blx	r6
 801a858:	1c41      	adds	r1, r0, #1
 801a85a:	d1c7      	bne.n	801a7ec <__sflush_r+0x34>
 801a85c:	682b      	ldr	r3, [r5, #0]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d0c4      	beq.n	801a7ec <__sflush_r+0x34>
 801a862:	2b1d      	cmp	r3, #29
 801a864:	d001      	beq.n	801a86a <__sflush_r+0xb2>
 801a866:	2b16      	cmp	r3, #22
 801a868:	d101      	bne.n	801a86e <__sflush_r+0xb6>
 801a86a:	602f      	str	r7, [r5, #0]
 801a86c:	e7b1      	b.n	801a7d2 <__sflush_r+0x1a>
 801a86e:	89a3      	ldrh	r3, [r4, #12]
 801a870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a874:	81a3      	strh	r3, [r4, #12]
 801a876:	e7ad      	b.n	801a7d4 <__sflush_r+0x1c>
 801a878:	690f      	ldr	r7, [r1, #16]
 801a87a:	2f00      	cmp	r7, #0
 801a87c:	d0a9      	beq.n	801a7d2 <__sflush_r+0x1a>
 801a87e:	0793      	lsls	r3, r2, #30
 801a880:	680e      	ldr	r6, [r1, #0]
 801a882:	bf08      	it	eq
 801a884:	694b      	ldreq	r3, [r1, #20]
 801a886:	600f      	str	r7, [r1, #0]
 801a888:	bf18      	it	ne
 801a88a:	2300      	movne	r3, #0
 801a88c:	eba6 0807 	sub.w	r8, r6, r7
 801a890:	608b      	str	r3, [r1, #8]
 801a892:	f1b8 0f00 	cmp.w	r8, #0
 801a896:	dd9c      	ble.n	801a7d2 <__sflush_r+0x1a>
 801a898:	6a21      	ldr	r1, [r4, #32]
 801a89a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a89c:	4643      	mov	r3, r8
 801a89e:	463a      	mov	r2, r7
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	47b0      	blx	r6
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	dc06      	bgt.n	801a8b6 <__sflush_r+0xfe>
 801a8a8:	89a3      	ldrh	r3, [r4, #12]
 801a8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8ae:	81a3      	strh	r3, [r4, #12]
 801a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a8b4:	e78e      	b.n	801a7d4 <__sflush_r+0x1c>
 801a8b6:	4407      	add	r7, r0
 801a8b8:	eba8 0800 	sub.w	r8, r8, r0
 801a8bc:	e7e9      	b.n	801a892 <__sflush_r+0xda>
 801a8be:	bf00      	nop
 801a8c0:	20400001 	.word	0x20400001

0801a8c4 <_fflush_r>:
 801a8c4:	b538      	push	{r3, r4, r5, lr}
 801a8c6:	690b      	ldr	r3, [r1, #16]
 801a8c8:	4605      	mov	r5, r0
 801a8ca:	460c      	mov	r4, r1
 801a8cc:	b913      	cbnz	r3, 801a8d4 <_fflush_r+0x10>
 801a8ce:	2500      	movs	r5, #0
 801a8d0:	4628      	mov	r0, r5
 801a8d2:	bd38      	pop	{r3, r4, r5, pc}
 801a8d4:	b118      	cbz	r0, 801a8de <_fflush_r+0x1a>
 801a8d6:	6983      	ldr	r3, [r0, #24]
 801a8d8:	b90b      	cbnz	r3, 801a8de <_fflush_r+0x1a>
 801a8da:	f000 f887 	bl	801a9ec <__sinit>
 801a8de:	4b14      	ldr	r3, [pc, #80]	; (801a930 <_fflush_r+0x6c>)
 801a8e0:	429c      	cmp	r4, r3
 801a8e2:	d11b      	bne.n	801a91c <_fflush_r+0x58>
 801a8e4:	686c      	ldr	r4, [r5, #4]
 801a8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d0ef      	beq.n	801a8ce <_fflush_r+0xa>
 801a8ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a8f0:	07d0      	lsls	r0, r2, #31
 801a8f2:	d404      	bmi.n	801a8fe <_fflush_r+0x3a>
 801a8f4:	0599      	lsls	r1, r3, #22
 801a8f6:	d402      	bmi.n	801a8fe <_fflush_r+0x3a>
 801a8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8fa:	f000 f927 	bl	801ab4c <__retarget_lock_acquire_recursive>
 801a8fe:	4628      	mov	r0, r5
 801a900:	4621      	mov	r1, r4
 801a902:	f7ff ff59 	bl	801a7b8 <__sflush_r>
 801a906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a908:	07da      	lsls	r2, r3, #31
 801a90a:	4605      	mov	r5, r0
 801a90c:	d4e0      	bmi.n	801a8d0 <_fflush_r+0xc>
 801a90e:	89a3      	ldrh	r3, [r4, #12]
 801a910:	059b      	lsls	r3, r3, #22
 801a912:	d4dd      	bmi.n	801a8d0 <_fflush_r+0xc>
 801a914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a916:	f000 f91a 	bl	801ab4e <__retarget_lock_release_recursive>
 801a91a:	e7d9      	b.n	801a8d0 <_fflush_r+0xc>
 801a91c:	4b05      	ldr	r3, [pc, #20]	; (801a934 <_fflush_r+0x70>)
 801a91e:	429c      	cmp	r4, r3
 801a920:	d101      	bne.n	801a926 <_fflush_r+0x62>
 801a922:	68ac      	ldr	r4, [r5, #8]
 801a924:	e7df      	b.n	801a8e6 <_fflush_r+0x22>
 801a926:	4b04      	ldr	r3, [pc, #16]	; (801a938 <_fflush_r+0x74>)
 801a928:	429c      	cmp	r4, r3
 801a92a:	bf08      	it	eq
 801a92c:	68ec      	ldreq	r4, [r5, #12]
 801a92e:	e7da      	b.n	801a8e6 <_fflush_r+0x22>
 801a930:	0801cf14 	.word	0x0801cf14
 801a934:	0801cf34 	.word	0x0801cf34
 801a938:	0801cef4 	.word	0x0801cef4

0801a93c <std>:
 801a93c:	2300      	movs	r3, #0
 801a93e:	b510      	push	{r4, lr}
 801a940:	4604      	mov	r4, r0
 801a942:	e9c0 3300 	strd	r3, r3, [r0]
 801a946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a94a:	6083      	str	r3, [r0, #8]
 801a94c:	8181      	strh	r1, [r0, #12]
 801a94e:	6643      	str	r3, [r0, #100]	; 0x64
 801a950:	81c2      	strh	r2, [r0, #14]
 801a952:	6183      	str	r3, [r0, #24]
 801a954:	4619      	mov	r1, r3
 801a956:	2208      	movs	r2, #8
 801a958:	305c      	adds	r0, #92	; 0x5c
 801a95a:	f7fb fbdf 	bl	801611c <memset>
 801a95e:	4b05      	ldr	r3, [pc, #20]	; (801a974 <std+0x38>)
 801a960:	6263      	str	r3, [r4, #36]	; 0x24
 801a962:	4b05      	ldr	r3, [pc, #20]	; (801a978 <std+0x3c>)
 801a964:	62a3      	str	r3, [r4, #40]	; 0x28
 801a966:	4b05      	ldr	r3, [pc, #20]	; (801a97c <std+0x40>)
 801a968:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a96a:	4b05      	ldr	r3, [pc, #20]	; (801a980 <std+0x44>)
 801a96c:	6224      	str	r4, [r4, #32]
 801a96e:	6323      	str	r3, [r4, #48]	; 0x30
 801a970:	bd10      	pop	{r4, pc}
 801a972:	bf00      	nop
 801a974:	08016ec5 	.word	0x08016ec5
 801a978:	08016eeb 	.word	0x08016eeb
 801a97c:	08016f23 	.word	0x08016f23
 801a980:	08016f47 	.word	0x08016f47

0801a984 <_cleanup_r>:
 801a984:	4901      	ldr	r1, [pc, #4]	; (801a98c <_cleanup_r+0x8>)
 801a986:	f000 b8c1 	b.w	801ab0c <_fwalk_reent>
 801a98a:	bf00      	nop
 801a98c:	0801a8c5 	.word	0x0801a8c5

0801a990 <__sfmoreglue>:
 801a990:	b570      	push	{r4, r5, r6, lr}
 801a992:	1e4a      	subs	r2, r1, #1
 801a994:	2568      	movs	r5, #104	; 0x68
 801a996:	4355      	muls	r5, r2
 801a998:	460e      	mov	r6, r1
 801a99a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a99e:	f7ff f8dd 	bl	8019b5c <_malloc_r>
 801a9a2:	4604      	mov	r4, r0
 801a9a4:	b140      	cbz	r0, 801a9b8 <__sfmoreglue+0x28>
 801a9a6:	2100      	movs	r1, #0
 801a9a8:	e9c0 1600 	strd	r1, r6, [r0]
 801a9ac:	300c      	adds	r0, #12
 801a9ae:	60a0      	str	r0, [r4, #8]
 801a9b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a9b4:	f7fb fbb2 	bl	801611c <memset>
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	bd70      	pop	{r4, r5, r6, pc}

0801a9bc <__sfp_lock_acquire>:
 801a9bc:	4801      	ldr	r0, [pc, #4]	; (801a9c4 <__sfp_lock_acquire+0x8>)
 801a9be:	f000 b8c5 	b.w	801ab4c <__retarget_lock_acquire_recursive>
 801a9c2:	bf00      	nop
 801a9c4:	20008144 	.word	0x20008144

0801a9c8 <__sfp_lock_release>:
 801a9c8:	4801      	ldr	r0, [pc, #4]	; (801a9d0 <__sfp_lock_release+0x8>)
 801a9ca:	f000 b8c0 	b.w	801ab4e <__retarget_lock_release_recursive>
 801a9ce:	bf00      	nop
 801a9d0:	20008144 	.word	0x20008144

0801a9d4 <__sinit_lock_acquire>:
 801a9d4:	4801      	ldr	r0, [pc, #4]	; (801a9dc <__sinit_lock_acquire+0x8>)
 801a9d6:	f000 b8b9 	b.w	801ab4c <__retarget_lock_acquire_recursive>
 801a9da:	bf00      	nop
 801a9dc:	2000813f 	.word	0x2000813f

0801a9e0 <__sinit_lock_release>:
 801a9e0:	4801      	ldr	r0, [pc, #4]	; (801a9e8 <__sinit_lock_release+0x8>)
 801a9e2:	f000 b8b4 	b.w	801ab4e <__retarget_lock_release_recursive>
 801a9e6:	bf00      	nop
 801a9e8:	2000813f 	.word	0x2000813f

0801a9ec <__sinit>:
 801a9ec:	b510      	push	{r4, lr}
 801a9ee:	4604      	mov	r4, r0
 801a9f0:	f7ff fff0 	bl	801a9d4 <__sinit_lock_acquire>
 801a9f4:	69a3      	ldr	r3, [r4, #24]
 801a9f6:	b11b      	cbz	r3, 801aa00 <__sinit+0x14>
 801a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9fc:	f7ff bff0 	b.w	801a9e0 <__sinit_lock_release>
 801aa00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aa04:	6523      	str	r3, [r4, #80]	; 0x50
 801aa06:	4b13      	ldr	r3, [pc, #76]	; (801aa54 <__sinit+0x68>)
 801aa08:	4a13      	ldr	r2, [pc, #76]	; (801aa58 <__sinit+0x6c>)
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	62a2      	str	r2, [r4, #40]	; 0x28
 801aa0e:	42a3      	cmp	r3, r4
 801aa10:	bf04      	itt	eq
 801aa12:	2301      	moveq	r3, #1
 801aa14:	61a3      	streq	r3, [r4, #24]
 801aa16:	4620      	mov	r0, r4
 801aa18:	f000 f820 	bl	801aa5c <__sfp>
 801aa1c:	6060      	str	r0, [r4, #4]
 801aa1e:	4620      	mov	r0, r4
 801aa20:	f000 f81c 	bl	801aa5c <__sfp>
 801aa24:	60a0      	str	r0, [r4, #8]
 801aa26:	4620      	mov	r0, r4
 801aa28:	f000 f818 	bl	801aa5c <__sfp>
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	60e0      	str	r0, [r4, #12]
 801aa30:	2104      	movs	r1, #4
 801aa32:	6860      	ldr	r0, [r4, #4]
 801aa34:	f7ff ff82 	bl	801a93c <std>
 801aa38:	68a0      	ldr	r0, [r4, #8]
 801aa3a:	2201      	movs	r2, #1
 801aa3c:	2109      	movs	r1, #9
 801aa3e:	f7ff ff7d 	bl	801a93c <std>
 801aa42:	68e0      	ldr	r0, [r4, #12]
 801aa44:	2202      	movs	r2, #2
 801aa46:	2112      	movs	r1, #18
 801aa48:	f7ff ff78 	bl	801a93c <std>
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	61a3      	str	r3, [r4, #24]
 801aa50:	e7d2      	b.n	801a9f8 <__sinit+0xc>
 801aa52:	bf00      	nop
 801aa54:	0801ca8c 	.word	0x0801ca8c
 801aa58:	0801a985 	.word	0x0801a985

0801aa5c <__sfp>:
 801aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa5e:	4607      	mov	r7, r0
 801aa60:	f7ff ffac 	bl	801a9bc <__sfp_lock_acquire>
 801aa64:	4b1e      	ldr	r3, [pc, #120]	; (801aae0 <__sfp+0x84>)
 801aa66:	681e      	ldr	r6, [r3, #0]
 801aa68:	69b3      	ldr	r3, [r6, #24]
 801aa6a:	b913      	cbnz	r3, 801aa72 <__sfp+0x16>
 801aa6c:	4630      	mov	r0, r6
 801aa6e:	f7ff ffbd 	bl	801a9ec <__sinit>
 801aa72:	3648      	adds	r6, #72	; 0x48
 801aa74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aa78:	3b01      	subs	r3, #1
 801aa7a:	d503      	bpl.n	801aa84 <__sfp+0x28>
 801aa7c:	6833      	ldr	r3, [r6, #0]
 801aa7e:	b30b      	cbz	r3, 801aac4 <__sfp+0x68>
 801aa80:	6836      	ldr	r6, [r6, #0]
 801aa82:	e7f7      	b.n	801aa74 <__sfp+0x18>
 801aa84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aa88:	b9d5      	cbnz	r5, 801aac0 <__sfp+0x64>
 801aa8a:	4b16      	ldr	r3, [pc, #88]	; (801aae4 <__sfp+0x88>)
 801aa8c:	60e3      	str	r3, [r4, #12]
 801aa8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aa92:	6665      	str	r5, [r4, #100]	; 0x64
 801aa94:	f000 f859 	bl	801ab4a <__retarget_lock_init_recursive>
 801aa98:	f7ff ff96 	bl	801a9c8 <__sfp_lock_release>
 801aa9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aaa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aaa4:	6025      	str	r5, [r4, #0]
 801aaa6:	61a5      	str	r5, [r4, #24]
 801aaa8:	2208      	movs	r2, #8
 801aaaa:	4629      	mov	r1, r5
 801aaac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aab0:	f7fb fb34 	bl	801611c <memset>
 801aab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aabc:	4620      	mov	r0, r4
 801aabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aac0:	3468      	adds	r4, #104	; 0x68
 801aac2:	e7d9      	b.n	801aa78 <__sfp+0x1c>
 801aac4:	2104      	movs	r1, #4
 801aac6:	4638      	mov	r0, r7
 801aac8:	f7ff ff62 	bl	801a990 <__sfmoreglue>
 801aacc:	4604      	mov	r4, r0
 801aace:	6030      	str	r0, [r6, #0]
 801aad0:	2800      	cmp	r0, #0
 801aad2:	d1d5      	bne.n	801aa80 <__sfp+0x24>
 801aad4:	f7ff ff78 	bl	801a9c8 <__sfp_lock_release>
 801aad8:	230c      	movs	r3, #12
 801aada:	603b      	str	r3, [r7, #0]
 801aadc:	e7ee      	b.n	801aabc <__sfp+0x60>
 801aade:	bf00      	nop
 801aae0:	0801ca8c 	.word	0x0801ca8c
 801aae4:	ffff0001 	.word	0xffff0001

0801aae8 <fiprintf>:
 801aae8:	b40e      	push	{r1, r2, r3}
 801aaea:	b503      	push	{r0, r1, lr}
 801aaec:	4601      	mov	r1, r0
 801aaee:	ab03      	add	r3, sp, #12
 801aaf0:	4805      	ldr	r0, [pc, #20]	; (801ab08 <fiprintf+0x20>)
 801aaf2:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaf6:	6800      	ldr	r0, [r0, #0]
 801aaf8:	9301      	str	r3, [sp, #4]
 801aafa:	f000 f89f 	bl	801ac3c <_vfiprintf_r>
 801aafe:	b002      	add	sp, #8
 801ab00:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab04:	b003      	add	sp, #12
 801ab06:	4770      	bx	lr
 801ab08:	20000278 	.word	0x20000278

0801ab0c <_fwalk_reent>:
 801ab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab10:	4606      	mov	r6, r0
 801ab12:	4688      	mov	r8, r1
 801ab14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ab18:	2700      	movs	r7, #0
 801ab1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab1e:	f1b9 0901 	subs.w	r9, r9, #1
 801ab22:	d505      	bpl.n	801ab30 <_fwalk_reent+0x24>
 801ab24:	6824      	ldr	r4, [r4, #0]
 801ab26:	2c00      	cmp	r4, #0
 801ab28:	d1f7      	bne.n	801ab1a <_fwalk_reent+0xe>
 801ab2a:	4638      	mov	r0, r7
 801ab2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab30:	89ab      	ldrh	r3, [r5, #12]
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	d907      	bls.n	801ab46 <_fwalk_reent+0x3a>
 801ab36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	d003      	beq.n	801ab46 <_fwalk_reent+0x3a>
 801ab3e:	4629      	mov	r1, r5
 801ab40:	4630      	mov	r0, r6
 801ab42:	47c0      	blx	r8
 801ab44:	4307      	orrs	r7, r0
 801ab46:	3568      	adds	r5, #104	; 0x68
 801ab48:	e7e9      	b.n	801ab1e <_fwalk_reent+0x12>

0801ab4a <__retarget_lock_init_recursive>:
 801ab4a:	4770      	bx	lr

0801ab4c <__retarget_lock_acquire_recursive>:
 801ab4c:	4770      	bx	lr

0801ab4e <__retarget_lock_release_recursive>:
 801ab4e:	4770      	bx	lr

0801ab50 <memmove>:
 801ab50:	4288      	cmp	r0, r1
 801ab52:	b510      	push	{r4, lr}
 801ab54:	eb01 0402 	add.w	r4, r1, r2
 801ab58:	d902      	bls.n	801ab60 <memmove+0x10>
 801ab5a:	4284      	cmp	r4, r0
 801ab5c:	4623      	mov	r3, r4
 801ab5e:	d807      	bhi.n	801ab70 <memmove+0x20>
 801ab60:	1e43      	subs	r3, r0, #1
 801ab62:	42a1      	cmp	r1, r4
 801ab64:	d008      	beq.n	801ab78 <memmove+0x28>
 801ab66:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab6e:	e7f8      	b.n	801ab62 <memmove+0x12>
 801ab70:	4402      	add	r2, r0
 801ab72:	4601      	mov	r1, r0
 801ab74:	428a      	cmp	r2, r1
 801ab76:	d100      	bne.n	801ab7a <memmove+0x2a>
 801ab78:	bd10      	pop	{r4, pc}
 801ab7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab82:	e7f7      	b.n	801ab74 <memmove+0x24>

0801ab84 <__malloc_lock>:
 801ab84:	4801      	ldr	r0, [pc, #4]	; (801ab8c <__malloc_lock+0x8>)
 801ab86:	f7ff bfe1 	b.w	801ab4c <__retarget_lock_acquire_recursive>
 801ab8a:	bf00      	nop
 801ab8c:	20008140 	.word	0x20008140

0801ab90 <__malloc_unlock>:
 801ab90:	4801      	ldr	r0, [pc, #4]	; (801ab98 <__malloc_unlock+0x8>)
 801ab92:	f7ff bfdc 	b.w	801ab4e <__retarget_lock_release_recursive>
 801ab96:	bf00      	nop
 801ab98:	20008140 	.word	0x20008140

0801ab9c <_realloc_r>:
 801ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab9e:	4607      	mov	r7, r0
 801aba0:	4614      	mov	r4, r2
 801aba2:	460e      	mov	r6, r1
 801aba4:	b921      	cbnz	r1, 801abb0 <_realloc_r+0x14>
 801aba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801abaa:	4611      	mov	r1, r2
 801abac:	f7fe bfd6 	b.w	8019b5c <_malloc_r>
 801abb0:	b922      	cbnz	r2, 801abbc <_realloc_r+0x20>
 801abb2:	f7fe ff83 	bl	8019abc <_free_r>
 801abb6:	4625      	mov	r5, r4
 801abb8:	4628      	mov	r0, r5
 801abba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abbc:	f000 fa9a 	bl	801b0f4 <_malloc_usable_size_r>
 801abc0:	42a0      	cmp	r0, r4
 801abc2:	d20f      	bcs.n	801abe4 <_realloc_r+0x48>
 801abc4:	4621      	mov	r1, r4
 801abc6:	4638      	mov	r0, r7
 801abc8:	f7fe ffc8 	bl	8019b5c <_malloc_r>
 801abcc:	4605      	mov	r5, r0
 801abce:	2800      	cmp	r0, #0
 801abd0:	d0f2      	beq.n	801abb8 <_realloc_r+0x1c>
 801abd2:	4631      	mov	r1, r6
 801abd4:	4622      	mov	r2, r4
 801abd6:	f7fb fa93 	bl	8016100 <memcpy>
 801abda:	4631      	mov	r1, r6
 801abdc:	4638      	mov	r0, r7
 801abde:	f7fe ff6d 	bl	8019abc <_free_r>
 801abe2:	e7e9      	b.n	801abb8 <_realloc_r+0x1c>
 801abe4:	4635      	mov	r5, r6
 801abe6:	e7e7      	b.n	801abb8 <_realloc_r+0x1c>

0801abe8 <__sfputc_r>:
 801abe8:	6893      	ldr	r3, [r2, #8]
 801abea:	3b01      	subs	r3, #1
 801abec:	2b00      	cmp	r3, #0
 801abee:	b410      	push	{r4}
 801abf0:	6093      	str	r3, [r2, #8]
 801abf2:	da08      	bge.n	801ac06 <__sfputc_r+0x1e>
 801abf4:	6994      	ldr	r4, [r2, #24]
 801abf6:	42a3      	cmp	r3, r4
 801abf8:	db01      	blt.n	801abfe <__sfputc_r+0x16>
 801abfa:	290a      	cmp	r1, #10
 801abfc:	d103      	bne.n	801ac06 <__sfputc_r+0x1e>
 801abfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac02:	f000 b94b 	b.w	801ae9c <__swbuf_r>
 801ac06:	6813      	ldr	r3, [r2, #0]
 801ac08:	1c58      	adds	r0, r3, #1
 801ac0a:	6010      	str	r0, [r2, #0]
 801ac0c:	7019      	strb	r1, [r3, #0]
 801ac0e:	4608      	mov	r0, r1
 801ac10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac14:	4770      	bx	lr

0801ac16 <__sfputs_r>:
 801ac16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac18:	4606      	mov	r6, r0
 801ac1a:	460f      	mov	r7, r1
 801ac1c:	4614      	mov	r4, r2
 801ac1e:	18d5      	adds	r5, r2, r3
 801ac20:	42ac      	cmp	r4, r5
 801ac22:	d101      	bne.n	801ac28 <__sfputs_r+0x12>
 801ac24:	2000      	movs	r0, #0
 801ac26:	e007      	b.n	801ac38 <__sfputs_r+0x22>
 801ac28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac2c:	463a      	mov	r2, r7
 801ac2e:	4630      	mov	r0, r6
 801ac30:	f7ff ffda 	bl	801abe8 <__sfputc_r>
 801ac34:	1c43      	adds	r3, r0, #1
 801ac36:	d1f3      	bne.n	801ac20 <__sfputs_r+0xa>
 801ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ac3c <_vfiprintf_r>:
 801ac3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac40:	460d      	mov	r5, r1
 801ac42:	b09d      	sub	sp, #116	; 0x74
 801ac44:	4614      	mov	r4, r2
 801ac46:	4698      	mov	r8, r3
 801ac48:	4606      	mov	r6, r0
 801ac4a:	b118      	cbz	r0, 801ac54 <_vfiprintf_r+0x18>
 801ac4c:	6983      	ldr	r3, [r0, #24]
 801ac4e:	b90b      	cbnz	r3, 801ac54 <_vfiprintf_r+0x18>
 801ac50:	f7ff fecc 	bl	801a9ec <__sinit>
 801ac54:	4b89      	ldr	r3, [pc, #548]	; (801ae7c <_vfiprintf_r+0x240>)
 801ac56:	429d      	cmp	r5, r3
 801ac58:	d11b      	bne.n	801ac92 <_vfiprintf_r+0x56>
 801ac5a:	6875      	ldr	r5, [r6, #4]
 801ac5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ac5e:	07d9      	lsls	r1, r3, #31
 801ac60:	d405      	bmi.n	801ac6e <_vfiprintf_r+0x32>
 801ac62:	89ab      	ldrh	r3, [r5, #12]
 801ac64:	059a      	lsls	r2, r3, #22
 801ac66:	d402      	bmi.n	801ac6e <_vfiprintf_r+0x32>
 801ac68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ac6a:	f7ff ff6f 	bl	801ab4c <__retarget_lock_acquire_recursive>
 801ac6e:	89ab      	ldrh	r3, [r5, #12]
 801ac70:	071b      	lsls	r3, r3, #28
 801ac72:	d501      	bpl.n	801ac78 <_vfiprintf_r+0x3c>
 801ac74:	692b      	ldr	r3, [r5, #16]
 801ac76:	b9eb      	cbnz	r3, 801acb4 <_vfiprintf_r+0x78>
 801ac78:	4629      	mov	r1, r5
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	f000 f960 	bl	801af40 <__swsetup_r>
 801ac80:	b1c0      	cbz	r0, 801acb4 <_vfiprintf_r+0x78>
 801ac82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ac84:	07dc      	lsls	r4, r3, #31
 801ac86:	d50e      	bpl.n	801aca6 <_vfiprintf_r+0x6a>
 801ac88:	f04f 30ff 	mov.w	r0, #4294967295
 801ac8c:	b01d      	add	sp, #116	; 0x74
 801ac8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac92:	4b7b      	ldr	r3, [pc, #492]	; (801ae80 <_vfiprintf_r+0x244>)
 801ac94:	429d      	cmp	r5, r3
 801ac96:	d101      	bne.n	801ac9c <_vfiprintf_r+0x60>
 801ac98:	68b5      	ldr	r5, [r6, #8]
 801ac9a:	e7df      	b.n	801ac5c <_vfiprintf_r+0x20>
 801ac9c:	4b79      	ldr	r3, [pc, #484]	; (801ae84 <_vfiprintf_r+0x248>)
 801ac9e:	429d      	cmp	r5, r3
 801aca0:	bf08      	it	eq
 801aca2:	68f5      	ldreq	r5, [r6, #12]
 801aca4:	e7da      	b.n	801ac5c <_vfiprintf_r+0x20>
 801aca6:	89ab      	ldrh	r3, [r5, #12]
 801aca8:	0598      	lsls	r0, r3, #22
 801acaa:	d4ed      	bmi.n	801ac88 <_vfiprintf_r+0x4c>
 801acac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acae:	f7ff ff4e 	bl	801ab4e <__retarget_lock_release_recursive>
 801acb2:	e7e9      	b.n	801ac88 <_vfiprintf_r+0x4c>
 801acb4:	2300      	movs	r3, #0
 801acb6:	9309      	str	r3, [sp, #36]	; 0x24
 801acb8:	2320      	movs	r3, #32
 801acba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801acbe:	f8cd 800c 	str.w	r8, [sp, #12]
 801acc2:	2330      	movs	r3, #48	; 0x30
 801acc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ae88 <_vfiprintf_r+0x24c>
 801acc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801accc:	f04f 0901 	mov.w	r9, #1
 801acd0:	4623      	mov	r3, r4
 801acd2:	469a      	mov	sl, r3
 801acd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acd8:	b10a      	cbz	r2, 801acde <_vfiprintf_r+0xa2>
 801acda:	2a25      	cmp	r2, #37	; 0x25
 801acdc:	d1f9      	bne.n	801acd2 <_vfiprintf_r+0x96>
 801acde:	ebba 0b04 	subs.w	fp, sl, r4
 801ace2:	d00b      	beq.n	801acfc <_vfiprintf_r+0xc0>
 801ace4:	465b      	mov	r3, fp
 801ace6:	4622      	mov	r2, r4
 801ace8:	4629      	mov	r1, r5
 801acea:	4630      	mov	r0, r6
 801acec:	f7ff ff93 	bl	801ac16 <__sfputs_r>
 801acf0:	3001      	adds	r0, #1
 801acf2:	f000 80aa 	beq.w	801ae4a <_vfiprintf_r+0x20e>
 801acf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801acf8:	445a      	add	r2, fp
 801acfa:	9209      	str	r2, [sp, #36]	; 0x24
 801acfc:	f89a 3000 	ldrb.w	r3, [sl]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	f000 80a2 	beq.w	801ae4a <_vfiprintf_r+0x20e>
 801ad06:	2300      	movs	r3, #0
 801ad08:	f04f 32ff 	mov.w	r2, #4294967295
 801ad0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad10:	f10a 0a01 	add.w	sl, sl, #1
 801ad14:	9304      	str	r3, [sp, #16]
 801ad16:	9307      	str	r3, [sp, #28]
 801ad18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad1c:	931a      	str	r3, [sp, #104]	; 0x68
 801ad1e:	4654      	mov	r4, sl
 801ad20:	2205      	movs	r2, #5
 801ad22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad26:	4858      	ldr	r0, [pc, #352]	; (801ae88 <_vfiprintf_r+0x24c>)
 801ad28:	f7e5 fa5a 	bl	80001e0 <memchr>
 801ad2c:	9a04      	ldr	r2, [sp, #16]
 801ad2e:	b9d8      	cbnz	r0, 801ad68 <_vfiprintf_r+0x12c>
 801ad30:	06d1      	lsls	r1, r2, #27
 801ad32:	bf44      	itt	mi
 801ad34:	2320      	movmi	r3, #32
 801ad36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad3a:	0713      	lsls	r3, r2, #28
 801ad3c:	bf44      	itt	mi
 801ad3e:	232b      	movmi	r3, #43	; 0x2b
 801ad40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad44:	f89a 3000 	ldrb.w	r3, [sl]
 801ad48:	2b2a      	cmp	r3, #42	; 0x2a
 801ad4a:	d015      	beq.n	801ad78 <_vfiprintf_r+0x13c>
 801ad4c:	9a07      	ldr	r2, [sp, #28]
 801ad4e:	4654      	mov	r4, sl
 801ad50:	2000      	movs	r0, #0
 801ad52:	f04f 0c0a 	mov.w	ip, #10
 801ad56:	4621      	mov	r1, r4
 801ad58:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad5c:	3b30      	subs	r3, #48	; 0x30
 801ad5e:	2b09      	cmp	r3, #9
 801ad60:	d94e      	bls.n	801ae00 <_vfiprintf_r+0x1c4>
 801ad62:	b1b0      	cbz	r0, 801ad92 <_vfiprintf_r+0x156>
 801ad64:	9207      	str	r2, [sp, #28]
 801ad66:	e014      	b.n	801ad92 <_vfiprintf_r+0x156>
 801ad68:	eba0 0308 	sub.w	r3, r0, r8
 801ad6c:	fa09 f303 	lsl.w	r3, r9, r3
 801ad70:	4313      	orrs	r3, r2
 801ad72:	9304      	str	r3, [sp, #16]
 801ad74:	46a2      	mov	sl, r4
 801ad76:	e7d2      	b.n	801ad1e <_vfiprintf_r+0xe2>
 801ad78:	9b03      	ldr	r3, [sp, #12]
 801ad7a:	1d19      	adds	r1, r3, #4
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	9103      	str	r1, [sp, #12]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	bfbb      	ittet	lt
 801ad84:	425b      	neglt	r3, r3
 801ad86:	f042 0202 	orrlt.w	r2, r2, #2
 801ad8a:	9307      	strge	r3, [sp, #28]
 801ad8c:	9307      	strlt	r3, [sp, #28]
 801ad8e:	bfb8      	it	lt
 801ad90:	9204      	strlt	r2, [sp, #16]
 801ad92:	7823      	ldrb	r3, [r4, #0]
 801ad94:	2b2e      	cmp	r3, #46	; 0x2e
 801ad96:	d10c      	bne.n	801adb2 <_vfiprintf_r+0x176>
 801ad98:	7863      	ldrb	r3, [r4, #1]
 801ad9a:	2b2a      	cmp	r3, #42	; 0x2a
 801ad9c:	d135      	bne.n	801ae0a <_vfiprintf_r+0x1ce>
 801ad9e:	9b03      	ldr	r3, [sp, #12]
 801ada0:	1d1a      	adds	r2, r3, #4
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	9203      	str	r2, [sp, #12]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	bfb8      	it	lt
 801adaa:	f04f 33ff 	movlt.w	r3, #4294967295
 801adae:	3402      	adds	r4, #2
 801adb0:	9305      	str	r3, [sp, #20]
 801adb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ae98 <_vfiprintf_r+0x25c>
 801adb6:	7821      	ldrb	r1, [r4, #0]
 801adb8:	2203      	movs	r2, #3
 801adba:	4650      	mov	r0, sl
 801adbc:	f7e5 fa10 	bl	80001e0 <memchr>
 801adc0:	b140      	cbz	r0, 801add4 <_vfiprintf_r+0x198>
 801adc2:	2340      	movs	r3, #64	; 0x40
 801adc4:	eba0 000a 	sub.w	r0, r0, sl
 801adc8:	fa03 f000 	lsl.w	r0, r3, r0
 801adcc:	9b04      	ldr	r3, [sp, #16]
 801adce:	4303      	orrs	r3, r0
 801add0:	3401      	adds	r4, #1
 801add2:	9304      	str	r3, [sp, #16]
 801add4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801add8:	482c      	ldr	r0, [pc, #176]	; (801ae8c <_vfiprintf_r+0x250>)
 801adda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801adde:	2206      	movs	r2, #6
 801ade0:	f7e5 f9fe 	bl	80001e0 <memchr>
 801ade4:	2800      	cmp	r0, #0
 801ade6:	d03f      	beq.n	801ae68 <_vfiprintf_r+0x22c>
 801ade8:	4b29      	ldr	r3, [pc, #164]	; (801ae90 <_vfiprintf_r+0x254>)
 801adea:	bb1b      	cbnz	r3, 801ae34 <_vfiprintf_r+0x1f8>
 801adec:	9b03      	ldr	r3, [sp, #12]
 801adee:	3307      	adds	r3, #7
 801adf0:	f023 0307 	bic.w	r3, r3, #7
 801adf4:	3308      	adds	r3, #8
 801adf6:	9303      	str	r3, [sp, #12]
 801adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adfa:	443b      	add	r3, r7
 801adfc:	9309      	str	r3, [sp, #36]	; 0x24
 801adfe:	e767      	b.n	801acd0 <_vfiprintf_r+0x94>
 801ae00:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae04:	460c      	mov	r4, r1
 801ae06:	2001      	movs	r0, #1
 801ae08:	e7a5      	b.n	801ad56 <_vfiprintf_r+0x11a>
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	3401      	adds	r4, #1
 801ae0e:	9305      	str	r3, [sp, #20]
 801ae10:	4619      	mov	r1, r3
 801ae12:	f04f 0c0a 	mov.w	ip, #10
 801ae16:	4620      	mov	r0, r4
 801ae18:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae1c:	3a30      	subs	r2, #48	; 0x30
 801ae1e:	2a09      	cmp	r2, #9
 801ae20:	d903      	bls.n	801ae2a <_vfiprintf_r+0x1ee>
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d0c5      	beq.n	801adb2 <_vfiprintf_r+0x176>
 801ae26:	9105      	str	r1, [sp, #20]
 801ae28:	e7c3      	b.n	801adb2 <_vfiprintf_r+0x176>
 801ae2a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae2e:	4604      	mov	r4, r0
 801ae30:	2301      	movs	r3, #1
 801ae32:	e7f0      	b.n	801ae16 <_vfiprintf_r+0x1da>
 801ae34:	ab03      	add	r3, sp, #12
 801ae36:	9300      	str	r3, [sp, #0]
 801ae38:	462a      	mov	r2, r5
 801ae3a:	4b16      	ldr	r3, [pc, #88]	; (801ae94 <_vfiprintf_r+0x258>)
 801ae3c:	a904      	add	r1, sp, #16
 801ae3e:	4630      	mov	r0, r6
 801ae40:	f7fb fa14 	bl	801626c <_printf_float>
 801ae44:	4607      	mov	r7, r0
 801ae46:	1c78      	adds	r0, r7, #1
 801ae48:	d1d6      	bne.n	801adf8 <_vfiprintf_r+0x1bc>
 801ae4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae4c:	07d9      	lsls	r1, r3, #31
 801ae4e:	d405      	bmi.n	801ae5c <_vfiprintf_r+0x220>
 801ae50:	89ab      	ldrh	r3, [r5, #12]
 801ae52:	059a      	lsls	r2, r3, #22
 801ae54:	d402      	bmi.n	801ae5c <_vfiprintf_r+0x220>
 801ae56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae58:	f7ff fe79 	bl	801ab4e <__retarget_lock_release_recursive>
 801ae5c:	89ab      	ldrh	r3, [r5, #12]
 801ae5e:	065b      	lsls	r3, r3, #25
 801ae60:	f53f af12 	bmi.w	801ac88 <_vfiprintf_r+0x4c>
 801ae64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae66:	e711      	b.n	801ac8c <_vfiprintf_r+0x50>
 801ae68:	ab03      	add	r3, sp, #12
 801ae6a:	9300      	str	r3, [sp, #0]
 801ae6c:	462a      	mov	r2, r5
 801ae6e:	4b09      	ldr	r3, [pc, #36]	; (801ae94 <_vfiprintf_r+0x258>)
 801ae70:	a904      	add	r1, sp, #16
 801ae72:	4630      	mov	r0, r6
 801ae74:	f7fb fc9e 	bl	80167b4 <_printf_i>
 801ae78:	e7e4      	b.n	801ae44 <_vfiprintf_r+0x208>
 801ae7a:	bf00      	nop
 801ae7c:	0801cf14 	.word	0x0801cf14
 801ae80:	0801cf34 	.word	0x0801cf34
 801ae84:	0801cef4 	.word	0x0801cef4
 801ae88:	0801ce8c 	.word	0x0801ce8c
 801ae8c:	0801ce96 	.word	0x0801ce96
 801ae90:	0801626d 	.word	0x0801626d
 801ae94:	0801ac17 	.word	0x0801ac17
 801ae98:	0801ce92 	.word	0x0801ce92

0801ae9c <__swbuf_r>:
 801ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae9e:	460e      	mov	r6, r1
 801aea0:	4614      	mov	r4, r2
 801aea2:	4605      	mov	r5, r0
 801aea4:	b118      	cbz	r0, 801aeae <__swbuf_r+0x12>
 801aea6:	6983      	ldr	r3, [r0, #24]
 801aea8:	b90b      	cbnz	r3, 801aeae <__swbuf_r+0x12>
 801aeaa:	f7ff fd9f 	bl	801a9ec <__sinit>
 801aeae:	4b21      	ldr	r3, [pc, #132]	; (801af34 <__swbuf_r+0x98>)
 801aeb0:	429c      	cmp	r4, r3
 801aeb2:	d12b      	bne.n	801af0c <__swbuf_r+0x70>
 801aeb4:	686c      	ldr	r4, [r5, #4]
 801aeb6:	69a3      	ldr	r3, [r4, #24]
 801aeb8:	60a3      	str	r3, [r4, #8]
 801aeba:	89a3      	ldrh	r3, [r4, #12]
 801aebc:	071a      	lsls	r2, r3, #28
 801aebe:	d52f      	bpl.n	801af20 <__swbuf_r+0x84>
 801aec0:	6923      	ldr	r3, [r4, #16]
 801aec2:	b36b      	cbz	r3, 801af20 <__swbuf_r+0x84>
 801aec4:	6923      	ldr	r3, [r4, #16]
 801aec6:	6820      	ldr	r0, [r4, #0]
 801aec8:	1ac0      	subs	r0, r0, r3
 801aeca:	6963      	ldr	r3, [r4, #20]
 801aecc:	b2f6      	uxtb	r6, r6
 801aece:	4283      	cmp	r3, r0
 801aed0:	4637      	mov	r7, r6
 801aed2:	dc04      	bgt.n	801aede <__swbuf_r+0x42>
 801aed4:	4621      	mov	r1, r4
 801aed6:	4628      	mov	r0, r5
 801aed8:	f7ff fcf4 	bl	801a8c4 <_fflush_r>
 801aedc:	bb30      	cbnz	r0, 801af2c <__swbuf_r+0x90>
 801aede:	68a3      	ldr	r3, [r4, #8]
 801aee0:	3b01      	subs	r3, #1
 801aee2:	60a3      	str	r3, [r4, #8]
 801aee4:	6823      	ldr	r3, [r4, #0]
 801aee6:	1c5a      	adds	r2, r3, #1
 801aee8:	6022      	str	r2, [r4, #0]
 801aeea:	701e      	strb	r6, [r3, #0]
 801aeec:	6963      	ldr	r3, [r4, #20]
 801aeee:	3001      	adds	r0, #1
 801aef0:	4283      	cmp	r3, r0
 801aef2:	d004      	beq.n	801aefe <__swbuf_r+0x62>
 801aef4:	89a3      	ldrh	r3, [r4, #12]
 801aef6:	07db      	lsls	r3, r3, #31
 801aef8:	d506      	bpl.n	801af08 <__swbuf_r+0x6c>
 801aefa:	2e0a      	cmp	r6, #10
 801aefc:	d104      	bne.n	801af08 <__swbuf_r+0x6c>
 801aefe:	4621      	mov	r1, r4
 801af00:	4628      	mov	r0, r5
 801af02:	f7ff fcdf 	bl	801a8c4 <_fflush_r>
 801af06:	b988      	cbnz	r0, 801af2c <__swbuf_r+0x90>
 801af08:	4638      	mov	r0, r7
 801af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af0c:	4b0a      	ldr	r3, [pc, #40]	; (801af38 <__swbuf_r+0x9c>)
 801af0e:	429c      	cmp	r4, r3
 801af10:	d101      	bne.n	801af16 <__swbuf_r+0x7a>
 801af12:	68ac      	ldr	r4, [r5, #8]
 801af14:	e7cf      	b.n	801aeb6 <__swbuf_r+0x1a>
 801af16:	4b09      	ldr	r3, [pc, #36]	; (801af3c <__swbuf_r+0xa0>)
 801af18:	429c      	cmp	r4, r3
 801af1a:	bf08      	it	eq
 801af1c:	68ec      	ldreq	r4, [r5, #12]
 801af1e:	e7ca      	b.n	801aeb6 <__swbuf_r+0x1a>
 801af20:	4621      	mov	r1, r4
 801af22:	4628      	mov	r0, r5
 801af24:	f000 f80c 	bl	801af40 <__swsetup_r>
 801af28:	2800      	cmp	r0, #0
 801af2a:	d0cb      	beq.n	801aec4 <__swbuf_r+0x28>
 801af2c:	f04f 37ff 	mov.w	r7, #4294967295
 801af30:	e7ea      	b.n	801af08 <__swbuf_r+0x6c>
 801af32:	bf00      	nop
 801af34:	0801cf14 	.word	0x0801cf14
 801af38:	0801cf34 	.word	0x0801cf34
 801af3c:	0801cef4 	.word	0x0801cef4

0801af40 <__swsetup_r>:
 801af40:	4b32      	ldr	r3, [pc, #200]	; (801b00c <__swsetup_r+0xcc>)
 801af42:	b570      	push	{r4, r5, r6, lr}
 801af44:	681d      	ldr	r5, [r3, #0]
 801af46:	4606      	mov	r6, r0
 801af48:	460c      	mov	r4, r1
 801af4a:	b125      	cbz	r5, 801af56 <__swsetup_r+0x16>
 801af4c:	69ab      	ldr	r3, [r5, #24]
 801af4e:	b913      	cbnz	r3, 801af56 <__swsetup_r+0x16>
 801af50:	4628      	mov	r0, r5
 801af52:	f7ff fd4b 	bl	801a9ec <__sinit>
 801af56:	4b2e      	ldr	r3, [pc, #184]	; (801b010 <__swsetup_r+0xd0>)
 801af58:	429c      	cmp	r4, r3
 801af5a:	d10f      	bne.n	801af7c <__swsetup_r+0x3c>
 801af5c:	686c      	ldr	r4, [r5, #4]
 801af5e:	89a3      	ldrh	r3, [r4, #12]
 801af60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af64:	0719      	lsls	r1, r3, #28
 801af66:	d42c      	bmi.n	801afc2 <__swsetup_r+0x82>
 801af68:	06dd      	lsls	r5, r3, #27
 801af6a:	d411      	bmi.n	801af90 <__swsetup_r+0x50>
 801af6c:	2309      	movs	r3, #9
 801af6e:	6033      	str	r3, [r6, #0]
 801af70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801af74:	81a3      	strh	r3, [r4, #12]
 801af76:	f04f 30ff 	mov.w	r0, #4294967295
 801af7a:	e03e      	b.n	801affa <__swsetup_r+0xba>
 801af7c:	4b25      	ldr	r3, [pc, #148]	; (801b014 <__swsetup_r+0xd4>)
 801af7e:	429c      	cmp	r4, r3
 801af80:	d101      	bne.n	801af86 <__swsetup_r+0x46>
 801af82:	68ac      	ldr	r4, [r5, #8]
 801af84:	e7eb      	b.n	801af5e <__swsetup_r+0x1e>
 801af86:	4b24      	ldr	r3, [pc, #144]	; (801b018 <__swsetup_r+0xd8>)
 801af88:	429c      	cmp	r4, r3
 801af8a:	bf08      	it	eq
 801af8c:	68ec      	ldreq	r4, [r5, #12]
 801af8e:	e7e6      	b.n	801af5e <__swsetup_r+0x1e>
 801af90:	0758      	lsls	r0, r3, #29
 801af92:	d512      	bpl.n	801afba <__swsetup_r+0x7a>
 801af94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af96:	b141      	cbz	r1, 801afaa <__swsetup_r+0x6a>
 801af98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af9c:	4299      	cmp	r1, r3
 801af9e:	d002      	beq.n	801afa6 <__swsetup_r+0x66>
 801afa0:	4630      	mov	r0, r6
 801afa2:	f7fe fd8b 	bl	8019abc <_free_r>
 801afa6:	2300      	movs	r3, #0
 801afa8:	6363      	str	r3, [r4, #52]	; 0x34
 801afaa:	89a3      	ldrh	r3, [r4, #12]
 801afac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afb0:	81a3      	strh	r3, [r4, #12]
 801afb2:	2300      	movs	r3, #0
 801afb4:	6063      	str	r3, [r4, #4]
 801afb6:	6923      	ldr	r3, [r4, #16]
 801afb8:	6023      	str	r3, [r4, #0]
 801afba:	89a3      	ldrh	r3, [r4, #12]
 801afbc:	f043 0308 	orr.w	r3, r3, #8
 801afc0:	81a3      	strh	r3, [r4, #12]
 801afc2:	6923      	ldr	r3, [r4, #16]
 801afc4:	b94b      	cbnz	r3, 801afda <__swsetup_r+0x9a>
 801afc6:	89a3      	ldrh	r3, [r4, #12]
 801afc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801afcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801afd0:	d003      	beq.n	801afda <__swsetup_r+0x9a>
 801afd2:	4621      	mov	r1, r4
 801afd4:	4630      	mov	r0, r6
 801afd6:	f000 f84d 	bl	801b074 <__smakebuf_r>
 801afda:	89a0      	ldrh	r0, [r4, #12]
 801afdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afe0:	f010 0301 	ands.w	r3, r0, #1
 801afe4:	d00a      	beq.n	801affc <__swsetup_r+0xbc>
 801afe6:	2300      	movs	r3, #0
 801afe8:	60a3      	str	r3, [r4, #8]
 801afea:	6963      	ldr	r3, [r4, #20]
 801afec:	425b      	negs	r3, r3
 801afee:	61a3      	str	r3, [r4, #24]
 801aff0:	6923      	ldr	r3, [r4, #16]
 801aff2:	b943      	cbnz	r3, 801b006 <__swsetup_r+0xc6>
 801aff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801aff8:	d1ba      	bne.n	801af70 <__swsetup_r+0x30>
 801affa:	bd70      	pop	{r4, r5, r6, pc}
 801affc:	0781      	lsls	r1, r0, #30
 801affe:	bf58      	it	pl
 801b000:	6963      	ldrpl	r3, [r4, #20]
 801b002:	60a3      	str	r3, [r4, #8]
 801b004:	e7f4      	b.n	801aff0 <__swsetup_r+0xb0>
 801b006:	2000      	movs	r0, #0
 801b008:	e7f7      	b.n	801affa <__swsetup_r+0xba>
 801b00a:	bf00      	nop
 801b00c:	20000278 	.word	0x20000278
 801b010:	0801cf14 	.word	0x0801cf14
 801b014:	0801cf34 	.word	0x0801cf34
 801b018:	0801cef4 	.word	0x0801cef4

0801b01c <abort>:
 801b01c:	b508      	push	{r3, lr}
 801b01e:	2006      	movs	r0, #6
 801b020:	f000 f898 	bl	801b154 <raise>
 801b024:	2001      	movs	r0, #1
 801b026:	f7f0 fbd7 	bl	800b7d8 <_exit>

0801b02a <__swhatbuf_r>:
 801b02a:	b570      	push	{r4, r5, r6, lr}
 801b02c:	460e      	mov	r6, r1
 801b02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b032:	2900      	cmp	r1, #0
 801b034:	b096      	sub	sp, #88	; 0x58
 801b036:	4614      	mov	r4, r2
 801b038:	461d      	mov	r5, r3
 801b03a:	da07      	bge.n	801b04c <__swhatbuf_r+0x22>
 801b03c:	2300      	movs	r3, #0
 801b03e:	602b      	str	r3, [r5, #0]
 801b040:	89b3      	ldrh	r3, [r6, #12]
 801b042:	061a      	lsls	r2, r3, #24
 801b044:	d410      	bmi.n	801b068 <__swhatbuf_r+0x3e>
 801b046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b04a:	e00e      	b.n	801b06a <__swhatbuf_r+0x40>
 801b04c:	466a      	mov	r2, sp
 801b04e:	f000 f89d 	bl	801b18c <_fstat_r>
 801b052:	2800      	cmp	r0, #0
 801b054:	dbf2      	blt.n	801b03c <__swhatbuf_r+0x12>
 801b056:	9a01      	ldr	r2, [sp, #4]
 801b058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b05c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b060:	425a      	negs	r2, r3
 801b062:	415a      	adcs	r2, r3
 801b064:	602a      	str	r2, [r5, #0]
 801b066:	e7ee      	b.n	801b046 <__swhatbuf_r+0x1c>
 801b068:	2340      	movs	r3, #64	; 0x40
 801b06a:	2000      	movs	r0, #0
 801b06c:	6023      	str	r3, [r4, #0]
 801b06e:	b016      	add	sp, #88	; 0x58
 801b070:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b074 <__smakebuf_r>:
 801b074:	898b      	ldrh	r3, [r1, #12]
 801b076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b078:	079d      	lsls	r5, r3, #30
 801b07a:	4606      	mov	r6, r0
 801b07c:	460c      	mov	r4, r1
 801b07e:	d507      	bpl.n	801b090 <__smakebuf_r+0x1c>
 801b080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b084:	6023      	str	r3, [r4, #0]
 801b086:	6123      	str	r3, [r4, #16]
 801b088:	2301      	movs	r3, #1
 801b08a:	6163      	str	r3, [r4, #20]
 801b08c:	b002      	add	sp, #8
 801b08e:	bd70      	pop	{r4, r5, r6, pc}
 801b090:	ab01      	add	r3, sp, #4
 801b092:	466a      	mov	r2, sp
 801b094:	f7ff ffc9 	bl	801b02a <__swhatbuf_r>
 801b098:	9900      	ldr	r1, [sp, #0]
 801b09a:	4605      	mov	r5, r0
 801b09c:	4630      	mov	r0, r6
 801b09e:	f7fe fd5d 	bl	8019b5c <_malloc_r>
 801b0a2:	b948      	cbnz	r0, 801b0b8 <__smakebuf_r+0x44>
 801b0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0a8:	059a      	lsls	r2, r3, #22
 801b0aa:	d4ef      	bmi.n	801b08c <__smakebuf_r+0x18>
 801b0ac:	f023 0303 	bic.w	r3, r3, #3
 801b0b0:	f043 0302 	orr.w	r3, r3, #2
 801b0b4:	81a3      	strh	r3, [r4, #12]
 801b0b6:	e7e3      	b.n	801b080 <__smakebuf_r+0xc>
 801b0b8:	4b0d      	ldr	r3, [pc, #52]	; (801b0f0 <__smakebuf_r+0x7c>)
 801b0ba:	62b3      	str	r3, [r6, #40]	; 0x28
 801b0bc:	89a3      	ldrh	r3, [r4, #12]
 801b0be:	6020      	str	r0, [r4, #0]
 801b0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0c4:	81a3      	strh	r3, [r4, #12]
 801b0c6:	9b00      	ldr	r3, [sp, #0]
 801b0c8:	6163      	str	r3, [r4, #20]
 801b0ca:	9b01      	ldr	r3, [sp, #4]
 801b0cc:	6120      	str	r0, [r4, #16]
 801b0ce:	b15b      	cbz	r3, 801b0e8 <__smakebuf_r+0x74>
 801b0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	f000 f86b 	bl	801b1b0 <_isatty_r>
 801b0da:	b128      	cbz	r0, 801b0e8 <__smakebuf_r+0x74>
 801b0dc:	89a3      	ldrh	r3, [r4, #12]
 801b0de:	f023 0303 	bic.w	r3, r3, #3
 801b0e2:	f043 0301 	orr.w	r3, r3, #1
 801b0e6:	81a3      	strh	r3, [r4, #12]
 801b0e8:	89a0      	ldrh	r0, [r4, #12]
 801b0ea:	4305      	orrs	r5, r0
 801b0ec:	81a5      	strh	r5, [r4, #12]
 801b0ee:	e7cd      	b.n	801b08c <__smakebuf_r+0x18>
 801b0f0:	0801a985 	.word	0x0801a985

0801b0f4 <_malloc_usable_size_r>:
 801b0f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b0f8:	1f18      	subs	r0, r3, #4
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	bfbc      	itt	lt
 801b0fe:	580b      	ldrlt	r3, [r1, r0]
 801b100:	18c0      	addlt	r0, r0, r3
 801b102:	4770      	bx	lr

0801b104 <_raise_r>:
 801b104:	291f      	cmp	r1, #31
 801b106:	b538      	push	{r3, r4, r5, lr}
 801b108:	4604      	mov	r4, r0
 801b10a:	460d      	mov	r5, r1
 801b10c:	d904      	bls.n	801b118 <_raise_r+0x14>
 801b10e:	2316      	movs	r3, #22
 801b110:	6003      	str	r3, [r0, #0]
 801b112:	f04f 30ff 	mov.w	r0, #4294967295
 801b116:	bd38      	pop	{r3, r4, r5, pc}
 801b118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b11a:	b112      	cbz	r2, 801b122 <_raise_r+0x1e>
 801b11c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b120:	b94b      	cbnz	r3, 801b136 <_raise_r+0x32>
 801b122:	4620      	mov	r0, r4
 801b124:	f000 f830 	bl	801b188 <_getpid_r>
 801b128:	462a      	mov	r2, r5
 801b12a:	4601      	mov	r1, r0
 801b12c:	4620      	mov	r0, r4
 801b12e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b132:	f000 b817 	b.w	801b164 <_kill_r>
 801b136:	2b01      	cmp	r3, #1
 801b138:	d00a      	beq.n	801b150 <_raise_r+0x4c>
 801b13a:	1c59      	adds	r1, r3, #1
 801b13c:	d103      	bne.n	801b146 <_raise_r+0x42>
 801b13e:	2316      	movs	r3, #22
 801b140:	6003      	str	r3, [r0, #0]
 801b142:	2001      	movs	r0, #1
 801b144:	e7e7      	b.n	801b116 <_raise_r+0x12>
 801b146:	2400      	movs	r4, #0
 801b148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b14c:	4628      	mov	r0, r5
 801b14e:	4798      	blx	r3
 801b150:	2000      	movs	r0, #0
 801b152:	e7e0      	b.n	801b116 <_raise_r+0x12>

0801b154 <raise>:
 801b154:	4b02      	ldr	r3, [pc, #8]	; (801b160 <raise+0xc>)
 801b156:	4601      	mov	r1, r0
 801b158:	6818      	ldr	r0, [r3, #0]
 801b15a:	f7ff bfd3 	b.w	801b104 <_raise_r>
 801b15e:	bf00      	nop
 801b160:	20000278 	.word	0x20000278

0801b164 <_kill_r>:
 801b164:	b538      	push	{r3, r4, r5, lr}
 801b166:	4d07      	ldr	r5, [pc, #28]	; (801b184 <_kill_r+0x20>)
 801b168:	2300      	movs	r3, #0
 801b16a:	4604      	mov	r4, r0
 801b16c:	4608      	mov	r0, r1
 801b16e:	4611      	mov	r1, r2
 801b170:	602b      	str	r3, [r5, #0]
 801b172:	f7f0 fb21 	bl	800b7b8 <_kill>
 801b176:	1c43      	adds	r3, r0, #1
 801b178:	d102      	bne.n	801b180 <_kill_r+0x1c>
 801b17a:	682b      	ldr	r3, [r5, #0]
 801b17c:	b103      	cbz	r3, 801b180 <_kill_r+0x1c>
 801b17e:	6023      	str	r3, [r4, #0]
 801b180:	bd38      	pop	{r3, r4, r5, pc}
 801b182:	bf00      	nop
 801b184:	20008138 	.word	0x20008138

0801b188 <_getpid_r>:
 801b188:	f7f0 bb0e 	b.w	800b7a8 <_getpid>

0801b18c <_fstat_r>:
 801b18c:	b538      	push	{r3, r4, r5, lr}
 801b18e:	4d07      	ldr	r5, [pc, #28]	; (801b1ac <_fstat_r+0x20>)
 801b190:	2300      	movs	r3, #0
 801b192:	4604      	mov	r4, r0
 801b194:	4608      	mov	r0, r1
 801b196:	4611      	mov	r1, r2
 801b198:	602b      	str	r3, [r5, #0]
 801b19a:	f7f0 fb6c 	bl	800b876 <_fstat>
 801b19e:	1c43      	adds	r3, r0, #1
 801b1a0:	d102      	bne.n	801b1a8 <_fstat_r+0x1c>
 801b1a2:	682b      	ldr	r3, [r5, #0]
 801b1a4:	b103      	cbz	r3, 801b1a8 <_fstat_r+0x1c>
 801b1a6:	6023      	str	r3, [r4, #0]
 801b1a8:	bd38      	pop	{r3, r4, r5, pc}
 801b1aa:	bf00      	nop
 801b1ac:	20008138 	.word	0x20008138

0801b1b0 <_isatty_r>:
 801b1b0:	b538      	push	{r3, r4, r5, lr}
 801b1b2:	4d06      	ldr	r5, [pc, #24]	; (801b1cc <_isatty_r+0x1c>)
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	4608      	mov	r0, r1
 801b1ba:	602b      	str	r3, [r5, #0]
 801b1bc:	f7f0 fb6b 	bl	800b896 <_isatty>
 801b1c0:	1c43      	adds	r3, r0, #1
 801b1c2:	d102      	bne.n	801b1ca <_isatty_r+0x1a>
 801b1c4:	682b      	ldr	r3, [r5, #0]
 801b1c6:	b103      	cbz	r3, 801b1ca <_isatty_r+0x1a>
 801b1c8:	6023      	str	r3, [r4, #0]
 801b1ca:	bd38      	pop	{r3, r4, r5, pc}
 801b1cc:	20008138 	.word	0x20008138

0801b1d0 <atanf>:
 801b1d0:	b538      	push	{r3, r4, r5, lr}
 801b1d2:	ee10 5a10 	vmov	r5, s0
 801b1d6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b1da:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b1de:	eef0 7a40 	vmov.f32	s15, s0
 801b1e2:	db10      	blt.n	801b206 <atanf+0x36>
 801b1e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b1e8:	dd04      	ble.n	801b1f4 <atanf+0x24>
 801b1ea:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b1ee:	eeb0 0a67 	vmov.f32	s0, s15
 801b1f2:	bd38      	pop	{r3, r4, r5, pc}
 801b1f4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b32c <atanf+0x15c>
 801b1f8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801b330 <atanf+0x160>
 801b1fc:	2d00      	cmp	r5, #0
 801b1fe:	bfd8      	it	le
 801b200:	eef0 7a40 	vmovle.f32	s15, s0
 801b204:	e7f3      	b.n	801b1ee <atanf+0x1e>
 801b206:	4b4b      	ldr	r3, [pc, #300]	; (801b334 <atanf+0x164>)
 801b208:	429c      	cmp	r4, r3
 801b20a:	dc10      	bgt.n	801b22e <atanf+0x5e>
 801b20c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b210:	da0a      	bge.n	801b228 <atanf+0x58>
 801b212:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b338 <atanf+0x168>
 801b216:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b21e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b226:	dce2      	bgt.n	801b1ee <atanf+0x1e>
 801b228:	f04f 33ff 	mov.w	r3, #4294967295
 801b22c:	e013      	b.n	801b256 <atanf+0x86>
 801b22e:	f000 f8e3 	bl	801b3f8 <fabsf>
 801b232:	4b42      	ldr	r3, [pc, #264]	; (801b33c <atanf+0x16c>)
 801b234:	429c      	cmp	r4, r3
 801b236:	dc4f      	bgt.n	801b2d8 <atanf+0x108>
 801b238:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b23c:	429c      	cmp	r4, r3
 801b23e:	dc41      	bgt.n	801b2c4 <atanf+0xf4>
 801b240:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b244:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b248:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b24c:	2300      	movs	r3, #0
 801b24e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b252:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b256:	1c5a      	adds	r2, r3, #1
 801b258:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801b25c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b340 <atanf+0x170>
 801b260:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801b344 <atanf+0x174>
 801b264:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b348 <atanf+0x178>
 801b268:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801b34c <atanf+0x17c>
 801b26c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801b270:	eea7 6a25 	vfma.f32	s12, s14, s11
 801b274:	eddf 5a36 	vldr	s11, [pc, #216]	; 801b350 <atanf+0x180>
 801b278:	eee6 5a07 	vfma.f32	s11, s12, s14
 801b27c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801b354 <atanf+0x184>
 801b280:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b284:	eddf 5a34 	vldr	s11, [pc, #208]	; 801b358 <atanf+0x188>
 801b288:	eee6 5a07 	vfma.f32	s11, s12, s14
 801b28c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801b35c <atanf+0x18c>
 801b290:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b294:	eddf 5a32 	vldr	s11, [pc, #200]	; 801b360 <atanf+0x190>
 801b298:	eee7 5a05 	vfma.f32	s11, s14, s10
 801b29c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801b364 <atanf+0x194>
 801b2a0:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b2a4:	eddf 5a30 	vldr	s11, [pc, #192]	; 801b368 <atanf+0x198>
 801b2a8:	eee5 5a07 	vfma.f32	s11, s10, s14
 801b2ac:	eea5 0a87 	vfma.f32	s0, s11, s14
 801b2b0:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b2b4:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b2b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b2bc:	d121      	bne.n	801b302 <atanf+0x132>
 801b2be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b2c2:	e794      	b.n	801b1ee <atanf+0x1e>
 801b2c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b2c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b2cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b2d6:	e7be      	b.n	801b256 <atanf+0x86>
 801b2d8:	4b24      	ldr	r3, [pc, #144]	; (801b36c <atanf+0x19c>)
 801b2da:	429c      	cmp	r4, r3
 801b2dc:	dc0b      	bgt.n	801b2f6 <atanf+0x126>
 801b2de:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b2e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2e6:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b2ea:	2302      	movs	r3, #2
 801b2ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b2f4:	e7af      	b.n	801b256 <atanf+0x86>
 801b2f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b2fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b2fe:	2303      	movs	r3, #3
 801b300:	e7a9      	b.n	801b256 <atanf+0x86>
 801b302:	4a1b      	ldr	r2, [pc, #108]	; (801b370 <atanf+0x1a0>)
 801b304:	491b      	ldr	r1, [pc, #108]	; (801b374 <atanf+0x1a4>)
 801b306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b30a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b30e:	ed93 7a00 	vldr	s14, [r3]
 801b312:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b316:	2d00      	cmp	r5, #0
 801b318:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b31c:	ed92 0a00 	vldr	s0, [r2]
 801b320:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b324:	bfb8      	it	lt
 801b326:	eef1 7a67 	vneglt.f32	s15, s15
 801b32a:	e760      	b.n	801b1ee <atanf+0x1e>
 801b32c:	3fc90fdb 	.word	0x3fc90fdb
 801b330:	bfc90fdb 	.word	0xbfc90fdb
 801b334:	3edfffff 	.word	0x3edfffff
 801b338:	7149f2ca 	.word	0x7149f2ca
 801b33c:	3f97ffff 	.word	0x3f97ffff
 801b340:	3c8569d7 	.word	0x3c8569d7
 801b344:	3d4bda59 	.word	0x3d4bda59
 801b348:	bd15a221 	.word	0xbd15a221
 801b34c:	be4ccccd 	.word	0xbe4ccccd
 801b350:	3d886b35 	.word	0x3d886b35
 801b354:	3dba2e6e 	.word	0x3dba2e6e
 801b358:	3e124925 	.word	0x3e124925
 801b35c:	3eaaaaab 	.word	0x3eaaaaab
 801b360:	bd6ef16b 	.word	0xbd6ef16b
 801b364:	bd9d8795 	.word	0xbd9d8795
 801b368:	bde38e38 	.word	0xbde38e38
 801b36c:	401bffff 	.word	0x401bffff
 801b370:	0801cf54 	.word	0x0801cf54
 801b374:	0801cf64 	.word	0x0801cf64

0801b378 <cosf>:
 801b378:	ee10 3a10 	vmov	r3, s0
 801b37c:	b507      	push	{r0, r1, r2, lr}
 801b37e:	4a1c      	ldr	r2, [pc, #112]	; (801b3f0 <cosf+0x78>)
 801b380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b384:	4293      	cmp	r3, r2
 801b386:	dc04      	bgt.n	801b392 <cosf+0x1a>
 801b388:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801b3f4 <cosf+0x7c>
 801b38c:	f000 fdb8 	bl	801bf00 <__kernel_cosf>
 801b390:	e004      	b.n	801b39c <cosf+0x24>
 801b392:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b396:	db04      	blt.n	801b3a2 <cosf+0x2a>
 801b398:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b39c:	b003      	add	sp, #12
 801b39e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b3a2:	4668      	mov	r0, sp
 801b3a4:	f000 fc6c 	bl	801bc80 <__ieee754_rem_pio2f>
 801b3a8:	f000 0003 	and.w	r0, r0, #3
 801b3ac:	2801      	cmp	r0, #1
 801b3ae:	d007      	beq.n	801b3c0 <cosf+0x48>
 801b3b0:	2802      	cmp	r0, #2
 801b3b2:	d00e      	beq.n	801b3d2 <cosf+0x5a>
 801b3b4:	b9a0      	cbnz	r0, 801b3e0 <cosf+0x68>
 801b3b6:	eddd 0a01 	vldr	s1, [sp, #4]
 801b3ba:	ed9d 0a00 	vldr	s0, [sp]
 801b3be:	e7e5      	b.n	801b38c <cosf+0x14>
 801b3c0:	eddd 0a01 	vldr	s1, [sp, #4]
 801b3c4:	ed9d 0a00 	vldr	s0, [sp]
 801b3c8:	f001 f884 	bl	801c4d4 <__kernel_sinf>
 801b3cc:	eeb1 0a40 	vneg.f32	s0, s0
 801b3d0:	e7e4      	b.n	801b39c <cosf+0x24>
 801b3d2:	eddd 0a01 	vldr	s1, [sp, #4]
 801b3d6:	ed9d 0a00 	vldr	s0, [sp]
 801b3da:	f000 fd91 	bl	801bf00 <__kernel_cosf>
 801b3de:	e7f5      	b.n	801b3cc <cosf+0x54>
 801b3e0:	eddd 0a01 	vldr	s1, [sp, #4]
 801b3e4:	ed9d 0a00 	vldr	s0, [sp]
 801b3e8:	2001      	movs	r0, #1
 801b3ea:	f001 f873 	bl	801c4d4 <__kernel_sinf>
 801b3ee:	e7d5      	b.n	801b39c <cosf+0x24>
 801b3f0:	3f490fd8 	.word	0x3f490fd8
 801b3f4:	00000000 	.word	0x00000000

0801b3f8 <fabsf>:
 801b3f8:	ee10 3a10 	vmov	r3, s0
 801b3fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b400:	ee00 3a10 	vmov	s0, r3
 801b404:	4770      	bx	lr
	...

0801b408 <sinf>:
 801b408:	ee10 3a10 	vmov	r3, s0
 801b40c:	b507      	push	{r0, r1, r2, lr}
 801b40e:	4a1d      	ldr	r2, [pc, #116]	; (801b484 <sinf+0x7c>)
 801b410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b414:	4293      	cmp	r3, r2
 801b416:	dc05      	bgt.n	801b424 <sinf+0x1c>
 801b418:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801b488 <sinf+0x80>
 801b41c:	2000      	movs	r0, #0
 801b41e:	f001 f859 	bl	801c4d4 <__kernel_sinf>
 801b422:	e004      	b.n	801b42e <sinf+0x26>
 801b424:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b428:	db04      	blt.n	801b434 <sinf+0x2c>
 801b42a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b42e:	b003      	add	sp, #12
 801b430:	f85d fb04 	ldr.w	pc, [sp], #4
 801b434:	4668      	mov	r0, sp
 801b436:	f000 fc23 	bl	801bc80 <__ieee754_rem_pio2f>
 801b43a:	f000 0003 	and.w	r0, r0, #3
 801b43e:	2801      	cmp	r0, #1
 801b440:	d008      	beq.n	801b454 <sinf+0x4c>
 801b442:	2802      	cmp	r0, #2
 801b444:	d00d      	beq.n	801b462 <sinf+0x5a>
 801b446:	b9b0      	cbnz	r0, 801b476 <sinf+0x6e>
 801b448:	eddd 0a01 	vldr	s1, [sp, #4]
 801b44c:	ed9d 0a00 	vldr	s0, [sp]
 801b450:	2001      	movs	r0, #1
 801b452:	e7e4      	b.n	801b41e <sinf+0x16>
 801b454:	eddd 0a01 	vldr	s1, [sp, #4]
 801b458:	ed9d 0a00 	vldr	s0, [sp]
 801b45c:	f000 fd50 	bl	801bf00 <__kernel_cosf>
 801b460:	e7e5      	b.n	801b42e <sinf+0x26>
 801b462:	eddd 0a01 	vldr	s1, [sp, #4]
 801b466:	ed9d 0a00 	vldr	s0, [sp]
 801b46a:	2001      	movs	r0, #1
 801b46c:	f001 f832 	bl	801c4d4 <__kernel_sinf>
 801b470:	eeb1 0a40 	vneg.f32	s0, s0
 801b474:	e7db      	b.n	801b42e <sinf+0x26>
 801b476:	eddd 0a01 	vldr	s1, [sp, #4]
 801b47a:	ed9d 0a00 	vldr	s0, [sp]
 801b47e:	f000 fd3f 	bl	801bf00 <__kernel_cosf>
 801b482:	e7f5      	b.n	801b470 <sinf+0x68>
 801b484:	3f490fd8 	.word	0x3f490fd8
 801b488:	00000000 	.word	0x00000000

0801b48c <atan2f>:
 801b48c:	f000 b898 	b.w	801b5c0 <__ieee754_atan2f>

0801b490 <powf>:
 801b490:	b508      	push	{r3, lr}
 801b492:	ed2d 8b04 	vpush	{d8-d9}
 801b496:	eeb0 9a40 	vmov.f32	s18, s0
 801b49a:	eef0 8a60 	vmov.f32	s17, s1
 801b49e:	f000 f92f 	bl	801b700 <__ieee754_powf>
 801b4a2:	4b43      	ldr	r3, [pc, #268]	; (801b5b0 <powf+0x120>)
 801b4a4:	f993 3000 	ldrsb.w	r3, [r3]
 801b4a8:	3301      	adds	r3, #1
 801b4aa:	eeb0 8a40 	vmov.f32	s16, s0
 801b4ae:	d012      	beq.n	801b4d6 <powf+0x46>
 801b4b0:	eef4 8a68 	vcmp.f32	s17, s17
 801b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4b8:	d60d      	bvs.n	801b4d6 <powf+0x46>
 801b4ba:	eeb4 9a49 	vcmp.f32	s18, s18
 801b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4c2:	d70d      	bvc.n	801b4e0 <powf+0x50>
 801b4c4:	eef5 8a40 	vcmp.f32	s17, #0.0
 801b4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b4d0:	bf08      	it	eq
 801b4d2:	eeb0 8a67 	vmoveq.f32	s16, s15
 801b4d6:	eeb0 0a48 	vmov.f32	s0, s16
 801b4da:	ecbd 8b04 	vpop	{d8-d9}
 801b4de:	bd08      	pop	{r3, pc}
 801b4e0:	eddf 9a34 	vldr	s19, [pc, #208]	; 801b5b4 <powf+0x124>
 801b4e4:	eeb4 9a69 	vcmp.f32	s18, s19
 801b4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ec:	d116      	bne.n	801b51c <powf+0x8c>
 801b4ee:	eef4 8a69 	vcmp.f32	s17, s19
 801b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4f6:	d057      	beq.n	801b5a8 <powf+0x118>
 801b4f8:	eeb0 0a68 	vmov.f32	s0, s17
 801b4fc:	f001 f832 	bl	801c564 <finitef>
 801b500:	2800      	cmp	r0, #0
 801b502:	d0e8      	beq.n	801b4d6 <powf+0x46>
 801b504:	eef4 8ae9 	vcmpe.f32	s17, s19
 801b508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b50c:	d5e3      	bpl.n	801b4d6 <powf+0x46>
 801b50e:	f7fa fdcd 	bl	80160ac <__errno>
 801b512:	2321      	movs	r3, #33	; 0x21
 801b514:	6003      	str	r3, [r0, #0]
 801b516:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801b5b8 <powf+0x128>
 801b51a:	e7dc      	b.n	801b4d6 <powf+0x46>
 801b51c:	f001 f822 	bl	801c564 <finitef>
 801b520:	bb50      	cbnz	r0, 801b578 <powf+0xe8>
 801b522:	eeb0 0a49 	vmov.f32	s0, s18
 801b526:	f001 f81d 	bl	801c564 <finitef>
 801b52a:	b328      	cbz	r0, 801b578 <powf+0xe8>
 801b52c:	eeb0 0a68 	vmov.f32	s0, s17
 801b530:	f001 f818 	bl	801c564 <finitef>
 801b534:	b300      	cbz	r0, 801b578 <powf+0xe8>
 801b536:	eeb4 8a48 	vcmp.f32	s16, s16
 801b53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b53e:	d706      	bvc.n	801b54e <powf+0xbe>
 801b540:	f7fa fdb4 	bl	80160ac <__errno>
 801b544:	2321      	movs	r3, #33	; 0x21
 801b546:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801b54a:	6003      	str	r3, [r0, #0]
 801b54c:	e7c3      	b.n	801b4d6 <powf+0x46>
 801b54e:	f7fa fdad 	bl	80160ac <__errno>
 801b552:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801b556:	2322      	movs	r3, #34	; 0x22
 801b558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b55c:	6003      	str	r3, [r0, #0]
 801b55e:	d508      	bpl.n	801b572 <powf+0xe2>
 801b560:	eeb0 0a68 	vmov.f32	s0, s17
 801b564:	f001 f84e 	bl	801c604 <rintf>
 801b568:	eeb4 0a68 	vcmp.f32	s0, s17
 801b56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b570:	d1d1      	bne.n	801b516 <powf+0x86>
 801b572:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801b5bc <powf+0x12c>
 801b576:	e7ae      	b.n	801b4d6 <powf+0x46>
 801b578:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b580:	d1a9      	bne.n	801b4d6 <powf+0x46>
 801b582:	eeb0 0a49 	vmov.f32	s0, s18
 801b586:	f000 ffed 	bl	801c564 <finitef>
 801b58a:	2800      	cmp	r0, #0
 801b58c:	d0a3      	beq.n	801b4d6 <powf+0x46>
 801b58e:	eeb0 0a68 	vmov.f32	s0, s17
 801b592:	f000 ffe7 	bl	801c564 <finitef>
 801b596:	2800      	cmp	r0, #0
 801b598:	d09d      	beq.n	801b4d6 <powf+0x46>
 801b59a:	f7fa fd87 	bl	80160ac <__errno>
 801b59e:	2322      	movs	r3, #34	; 0x22
 801b5a0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801b5b4 <powf+0x124>
 801b5a4:	6003      	str	r3, [r0, #0]
 801b5a6:	e796      	b.n	801b4d6 <powf+0x46>
 801b5a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801b5ac:	e793      	b.n	801b4d6 <powf+0x46>
 801b5ae:	bf00      	nop
 801b5b0:	2000044c 	.word	0x2000044c
 801b5b4:	00000000 	.word	0x00000000
 801b5b8:	ff800000 	.word	0xff800000
 801b5bc:	7f800000 	.word	0x7f800000

0801b5c0 <__ieee754_atan2f>:
 801b5c0:	ee10 2a90 	vmov	r2, s1
 801b5c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801b5c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b5cc:	b510      	push	{r4, lr}
 801b5ce:	eef0 7a40 	vmov.f32	s15, s0
 801b5d2:	dc06      	bgt.n	801b5e2 <__ieee754_atan2f+0x22>
 801b5d4:	ee10 0a10 	vmov	r0, s0
 801b5d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801b5dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b5e0:	dd04      	ble.n	801b5ec <__ieee754_atan2f+0x2c>
 801b5e2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801b5e6:	eeb0 0a67 	vmov.f32	s0, s15
 801b5ea:	bd10      	pop	{r4, pc}
 801b5ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801b5f0:	d103      	bne.n	801b5fa <__ieee754_atan2f+0x3a>
 801b5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5f6:	f7ff bdeb 	b.w	801b1d0 <atanf>
 801b5fa:	1794      	asrs	r4, r2, #30
 801b5fc:	f004 0402 	and.w	r4, r4, #2
 801b600:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801b604:	b943      	cbnz	r3, 801b618 <__ieee754_atan2f+0x58>
 801b606:	2c02      	cmp	r4, #2
 801b608:	d05e      	beq.n	801b6c8 <__ieee754_atan2f+0x108>
 801b60a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b6dc <__ieee754_atan2f+0x11c>
 801b60e:	2c03      	cmp	r4, #3
 801b610:	bf08      	it	eq
 801b612:	eef0 7a47 	vmoveq.f32	s15, s14
 801b616:	e7e6      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b618:	b941      	cbnz	r1, 801b62c <__ieee754_atan2f+0x6c>
 801b61a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801b6e0 <__ieee754_atan2f+0x120>
 801b61e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801b6e4 <__ieee754_atan2f+0x124>
 801b622:	2800      	cmp	r0, #0
 801b624:	bfb8      	it	lt
 801b626:	eef0 7a40 	vmovlt.f32	s15, s0
 801b62a:	e7dc      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b62c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b630:	d110      	bne.n	801b654 <__ieee754_atan2f+0x94>
 801b632:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b636:	f104 34ff 	add.w	r4, r4, #4294967295
 801b63a:	d107      	bne.n	801b64c <__ieee754_atan2f+0x8c>
 801b63c:	2c02      	cmp	r4, #2
 801b63e:	d846      	bhi.n	801b6ce <__ieee754_atan2f+0x10e>
 801b640:	4b29      	ldr	r3, [pc, #164]	; (801b6e8 <__ieee754_atan2f+0x128>)
 801b642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b646:	edd4 7a00 	vldr	s15, [r4]
 801b64a:	e7cc      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b64c:	2c02      	cmp	r4, #2
 801b64e:	d841      	bhi.n	801b6d4 <__ieee754_atan2f+0x114>
 801b650:	4b26      	ldr	r3, [pc, #152]	; (801b6ec <__ieee754_atan2f+0x12c>)
 801b652:	e7f6      	b.n	801b642 <__ieee754_atan2f+0x82>
 801b654:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b658:	d0df      	beq.n	801b61a <__ieee754_atan2f+0x5a>
 801b65a:	1a5b      	subs	r3, r3, r1
 801b65c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801b660:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801b664:	da1a      	bge.n	801b69c <__ieee754_atan2f+0xdc>
 801b666:	2a00      	cmp	r2, #0
 801b668:	da01      	bge.n	801b66e <__ieee754_atan2f+0xae>
 801b66a:	313c      	adds	r1, #60	; 0x3c
 801b66c:	db19      	blt.n	801b6a2 <__ieee754_atan2f+0xe2>
 801b66e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801b672:	f7ff fec1 	bl	801b3f8 <fabsf>
 801b676:	f7ff fdab 	bl	801b1d0 <atanf>
 801b67a:	eef0 7a40 	vmov.f32	s15, s0
 801b67e:	2c01      	cmp	r4, #1
 801b680:	d012      	beq.n	801b6a8 <__ieee754_atan2f+0xe8>
 801b682:	2c02      	cmp	r4, #2
 801b684:	d017      	beq.n	801b6b6 <__ieee754_atan2f+0xf6>
 801b686:	2c00      	cmp	r4, #0
 801b688:	d0ad      	beq.n	801b5e6 <__ieee754_atan2f+0x26>
 801b68a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801b6f0 <__ieee754_atan2f+0x130>
 801b68e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b692:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801b6f4 <__ieee754_atan2f+0x134>
 801b696:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b69a:	e7a4      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b69c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801b6e0 <__ieee754_atan2f+0x120>
 801b6a0:	e7ed      	b.n	801b67e <__ieee754_atan2f+0xbe>
 801b6a2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801b6f8 <__ieee754_atan2f+0x138>
 801b6a6:	e7ea      	b.n	801b67e <__ieee754_atan2f+0xbe>
 801b6a8:	ee17 3a90 	vmov	r3, s15
 801b6ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b6b0:	ee07 3a90 	vmov	s15, r3
 801b6b4:	e797      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b6b6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801b6f0 <__ieee754_atan2f+0x130>
 801b6ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b6be:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801b6f4 <__ieee754_atan2f+0x134>
 801b6c2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b6c6:	e78e      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b6c8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801b6f4 <__ieee754_atan2f+0x134>
 801b6cc:	e78b      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b6ce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801b6fc <__ieee754_atan2f+0x13c>
 801b6d2:	e788      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b6d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b6f8 <__ieee754_atan2f+0x138>
 801b6d8:	e785      	b.n	801b5e6 <__ieee754_atan2f+0x26>
 801b6da:	bf00      	nop
 801b6dc:	c0490fdb 	.word	0xc0490fdb
 801b6e0:	3fc90fdb 	.word	0x3fc90fdb
 801b6e4:	bfc90fdb 	.word	0xbfc90fdb
 801b6e8:	0801cf74 	.word	0x0801cf74
 801b6ec:	0801cf80 	.word	0x0801cf80
 801b6f0:	33bbbd2e 	.word	0x33bbbd2e
 801b6f4:	40490fdb 	.word	0x40490fdb
 801b6f8:	00000000 	.word	0x00000000
 801b6fc:	3f490fdb 	.word	0x3f490fdb

0801b700 <__ieee754_powf>:
 801b700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b704:	ee10 5a90 	vmov	r5, s1
 801b708:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801b70c:	ed2d 8b02 	vpush	{d8}
 801b710:	eeb0 8a40 	vmov.f32	s16, s0
 801b714:	eef0 8a60 	vmov.f32	s17, s1
 801b718:	f000 8291 	beq.w	801bc3e <__ieee754_powf+0x53e>
 801b71c:	ee10 8a10 	vmov	r8, s0
 801b720:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801b724:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b728:	dc06      	bgt.n	801b738 <__ieee754_powf+0x38>
 801b72a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801b72e:	dd0a      	ble.n	801b746 <__ieee754_powf+0x46>
 801b730:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801b734:	f000 8283 	beq.w	801bc3e <__ieee754_powf+0x53e>
 801b738:	ecbd 8b02 	vpop	{d8}
 801b73c:	48d8      	ldr	r0, [pc, #864]	; (801baa0 <__ieee754_powf+0x3a0>)
 801b73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b742:	f7fb bb6d 	b.w	8016e20 <nanf>
 801b746:	f1b8 0f00 	cmp.w	r8, #0
 801b74a:	da1f      	bge.n	801b78c <__ieee754_powf+0x8c>
 801b74c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801b750:	da2e      	bge.n	801b7b0 <__ieee754_powf+0xb0>
 801b752:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801b756:	f2c0 827b 	blt.w	801bc50 <__ieee754_powf+0x550>
 801b75a:	15fb      	asrs	r3, r7, #23
 801b75c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801b760:	fa47 f603 	asr.w	r6, r7, r3
 801b764:	fa06 f303 	lsl.w	r3, r6, r3
 801b768:	42bb      	cmp	r3, r7
 801b76a:	f040 8271 	bne.w	801bc50 <__ieee754_powf+0x550>
 801b76e:	f006 0601 	and.w	r6, r6, #1
 801b772:	f1c6 0602 	rsb	r6, r6, #2
 801b776:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801b77a:	d120      	bne.n	801b7be <__ieee754_powf+0xbe>
 801b77c:	2d00      	cmp	r5, #0
 801b77e:	f280 8264 	bge.w	801bc4a <__ieee754_powf+0x54a>
 801b782:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b786:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801b78a:	e00d      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b78c:	2600      	movs	r6, #0
 801b78e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801b792:	d1f0      	bne.n	801b776 <__ieee754_powf+0x76>
 801b794:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801b798:	f000 8251 	beq.w	801bc3e <__ieee754_powf+0x53e>
 801b79c:	dd0a      	ble.n	801b7b4 <__ieee754_powf+0xb4>
 801b79e:	2d00      	cmp	r5, #0
 801b7a0:	f280 8250 	bge.w	801bc44 <__ieee754_powf+0x544>
 801b7a4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801baa4 <__ieee754_powf+0x3a4>
 801b7a8:	ecbd 8b02 	vpop	{d8}
 801b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7b0:	2602      	movs	r6, #2
 801b7b2:	e7ec      	b.n	801b78e <__ieee754_powf+0x8e>
 801b7b4:	2d00      	cmp	r5, #0
 801b7b6:	daf5      	bge.n	801b7a4 <__ieee754_powf+0xa4>
 801b7b8:	eeb1 0a68 	vneg.f32	s0, s17
 801b7bc:	e7f4      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b7be:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801b7c2:	d102      	bne.n	801b7ca <__ieee754_powf+0xca>
 801b7c4:	ee28 0a08 	vmul.f32	s0, s16, s16
 801b7c8:	e7ee      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b7ca:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801b7ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b7d2:	d108      	bne.n	801b7e6 <__ieee754_powf+0xe6>
 801b7d4:	f1b8 0f00 	cmp.w	r8, #0
 801b7d8:	db05      	blt.n	801b7e6 <__ieee754_powf+0xe6>
 801b7da:	ecbd 8b02 	vpop	{d8}
 801b7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7e2:	f000 bb89 	b.w	801bef8 <__ieee754_sqrtf>
 801b7e6:	f7ff fe07 	bl	801b3f8 <fabsf>
 801b7ea:	b124      	cbz	r4, 801b7f6 <__ieee754_powf+0xf6>
 801b7ec:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801b7f0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801b7f4:	d117      	bne.n	801b826 <__ieee754_powf+0x126>
 801b7f6:	2d00      	cmp	r5, #0
 801b7f8:	bfbc      	itt	lt
 801b7fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801b7fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801b802:	f1b8 0f00 	cmp.w	r8, #0
 801b806:	dacf      	bge.n	801b7a8 <__ieee754_powf+0xa8>
 801b808:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801b80c:	ea54 0306 	orrs.w	r3, r4, r6
 801b810:	d104      	bne.n	801b81c <__ieee754_powf+0x11c>
 801b812:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b816:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801b81a:	e7c5      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b81c:	2e01      	cmp	r6, #1
 801b81e:	d1c3      	bne.n	801b7a8 <__ieee754_powf+0xa8>
 801b820:	eeb1 0a40 	vneg.f32	s0, s0
 801b824:	e7c0      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b826:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801b82a:	3801      	subs	r0, #1
 801b82c:	ea56 0300 	orrs.w	r3, r6, r0
 801b830:	d104      	bne.n	801b83c <__ieee754_powf+0x13c>
 801b832:	ee38 8a48 	vsub.f32	s16, s16, s16
 801b836:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801b83a:	e7b5      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b83c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801b840:	dd6b      	ble.n	801b91a <__ieee754_powf+0x21a>
 801b842:	4b99      	ldr	r3, [pc, #612]	; (801baa8 <__ieee754_powf+0x3a8>)
 801b844:	429c      	cmp	r4, r3
 801b846:	dc06      	bgt.n	801b856 <__ieee754_powf+0x156>
 801b848:	2d00      	cmp	r5, #0
 801b84a:	daab      	bge.n	801b7a4 <__ieee754_powf+0xa4>
 801b84c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801baac <__ieee754_powf+0x3ac>
 801b850:	ee20 0a00 	vmul.f32	s0, s0, s0
 801b854:	e7a8      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b856:	4b96      	ldr	r3, [pc, #600]	; (801bab0 <__ieee754_powf+0x3b0>)
 801b858:	429c      	cmp	r4, r3
 801b85a:	dd02      	ble.n	801b862 <__ieee754_powf+0x162>
 801b85c:	2d00      	cmp	r5, #0
 801b85e:	dcf5      	bgt.n	801b84c <__ieee754_powf+0x14c>
 801b860:	e7a0      	b.n	801b7a4 <__ieee754_powf+0xa4>
 801b862:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b866:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b86a:	eddf 6a92 	vldr	s13, [pc, #584]	; 801bab4 <__ieee754_powf+0x3b4>
 801b86e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801b872:	eee0 6a67 	vfms.f32	s13, s0, s15
 801b876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b87a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801b87e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b882:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b886:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801bab8 <__ieee754_powf+0x3b8>
 801b88a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801b88e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801babc <__ieee754_powf+0x3bc>
 801b892:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b896:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801bac0 <__ieee754_powf+0x3c0>
 801b89a:	eef0 6a67 	vmov.f32	s13, s15
 801b89e:	eee0 6a07 	vfma.f32	s13, s0, s14
 801b8a2:	ee16 3a90 	vmov	r3, s13
 801b8a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b8aa:	f023 030f 	bic.w	r3, r3, #15
 801b8ae:	ee00 3a90 	vmov	s1, r3
 801b8b2:	eee0 0a47 	vfms.f32	s1, s0, s14
 801b8b6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b8ba:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801b8be:	f025 050f 	bic.w	r5, r5, #15
 801b8c2:	ee07 5a10 	vmov	s14, r5
 801b8c6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801b8ca:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801b8ce:	ee07 3a90 	vmov	s15, r3
 801b8d2:	eee7 0a27 	vfma.f32	s1, s14, s15
 801b8d6:	3e01      	subs	r6, #1
 801b8d8:	ea56 0200 	orrs.w	r2, r6, r0
 801b8dc:	ee07 5a10 	vmov	s14, r5
 801b8e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b8e4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801b8e8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801b8ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801b8f0:	ee17 4a10 	vmov	r4, s14
 801b8f4:	bf08      	it	eq
 801b8f6:	eeb0 8a40 	vmoveq.f32	s16, s0
 801b8fa:	2c00      	cmp	r4, #0
 801b8fc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b900:	f340 8184 	ble.w	801bc0c <__ieee754_powf+0x50c>
 801b904:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801b908:	f340 80fc 	ble.w	801bb04 <__ieee754_powf+0x404>
 801b90c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801baac <__ieee754_powf+0x3ac>
 801b910:	ee28 0a27 	vmul.f32	s0, s16, s15
 801b914:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b918:	e746      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801b91a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801b91e:	bf01      	itttt	eq
 801b920:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801bac4 <__ieee754_powf+0x3c4>
 801b924:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801b928:	f06f 0217 	mvneq.w	r2, #23
 801b92c:	ee17 4a90 	vmoveq	r4, s15
 801b930:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801b934:	bf18      	it	ne
 801b936:	2200      	movne	r2, #0
 801b938:	3b7f      	subs	r3, #127	; 0x7f
 801b93a:	4413      	add	r3, r2
 801b93c:	4a62      	ldr	r2, [pc, #392]	; (801bac8 <__ieee754_powf+0x3c8>)
 801b93e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801b942:	4294      	cmp	r4, r2
 801b944:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801b948:	dd06      	ble.n	801b958 <__ieee754_powf+0x258>
 801b94a:	4a60      	ldr	r2, [pc, #384]	; (801bacc <__ieee754_powf+0x3cc>)
 801b94c:	4294      	cmp	r4, r2
 801b94e:	f340 80a4 	ble.w	801ba9a <__ieee754_powf+0x39a>
 801b952:	3301      	adds	r3, #1
 801b954:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801b958:	2400      	movs	r4, #0
 801b95a:	4a5d      	ldr	r2, [pc, #372]	; (801bad0 <__ieee754_powf+0x3d0>)
 801b95c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801b960:	ee07 1a90 	vmov	s15, r1
 801b964:	ed92 7a00 	vldr	s14, [r2]
 801b968:	4a5a      	ldr	r2, [pc, #360]	; (801bad4 <__ieee754_powf+0x3d4>)
 801b96a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801b96e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b972:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801b976:	1049      	asrs	r1, r1, #1
 801b978:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801b97c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801b980:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801b984:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801b988:	ee06 1a10 	vmov	s12, r1
 801b98c:	ee65 4a26 	vmul.f32	s9, s10, s13
 801b990:	ee36 7a47 	vsub.f32	s14, s12, s14
 801b994:	ee14 7a90 	vmov	r7, s9
 801b998:	4017      	ands	r7, r2
 801b99a:	ee05 7a90 	vmov	s11, r7
 801b99e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801b9a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b9a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801bad8 <__ieee754_powf+0x3d8>
 801b9aa:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801b9ae:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801b9b2:	ee25 6a26 	vmul.f32	s12, s10, s13
 801b9b6:	eddf 6a49 	vldr	s13, [pc, #292]	; 801badc <__ieee754_powf+0x3dc>
 801b9ba:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801b9be:	eddf 6a48 	vldr	s13, [pc, #288]	; 801bae0 <__ieee754_powf+0x3e0>
 801b9c2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b9c6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801bab4 <__ieee754_powf+0x3b4>
 801b9ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b9ce:	eddf 6a45 	vldr	s13, [pc, #276]	; 801bae4 <__ieee754_powf+0x3e4>
 801b9d2:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b9d6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801bae8 <__ieee754_powf+0x3e8>
 801b9da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b9de:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801b9e2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801b9e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b9ea:	eee5 6a07 	vfma.f32	s13, s10, s14
 801b9ee:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801b9f2:	eef0 7a45 	vmov.f32	s15, s10
 801b9f6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801b9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b9fe:	ee17 1a90 	vmov	r1, s15
 801ba02:	4011      	ands	r1, r2
 801ba04:	ee07 1a90 	vmov	s15, r1
 801ba08:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801ba0c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801ba10:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801ba14:	ee27 7a24 	vmul.f32	s14, s14, s9
 801ba18:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ba1c:	eeb0 6a47 	vmov.f32	s12, s14
 801ba20:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ba24:	ee16 1a10 	vmov	r1, s12
 801ba28:	4011      	ands	r1, r2
 801ba2a:	ee06 1a90 	vmov	s13, r1
 801ba2e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801ba32:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801baec <__ieee754_powf+0x3ec>
 801ba36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801baf0 <__ieee754_powf+0x3f0>
 801ba3a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ba3e:	ee06 1a10 	vmov	s12, r1
 801ba42:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ba46:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801baf4 <__ieee754_powf+0x3f4>
 801ba4a:	492b      	ldr	r1, [pc, #172]	; (801baf8 <__ieee754_powf+0x3f8>)
 801ba4c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ba50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ba54:	edd1 7a00 	vldr	s15, [r1]
 801ba58:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ba5c:	ee07 3a90 	vmov	s15, r3
 801ba60:	4b26      	ldr	r3, [pc, #152]	; (801bafc <__ieee754_powf+0x3fc>)
 801ba62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ba66:	eef0 7a47 	vmov.f32	s15, s14
 801ba6a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ba6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ba72:	edd4 0a00 	vldr	s1, [r4]
 801ba76:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ba7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ba7e:	ee17 3a90 	vmov	r3, s15
 801ba82:	4013      	ands	r3, r2
 801ba84:	ee07 3a90 	vmov	s15, r3
 801ba88:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801ba8c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801ba90:	eee6 6a65 	vfms.f32	s13, s12, s11
 801ba94:	ee77 7a66 	vsub.f32	s15, s14, s13
 801ba98:	e70f      	b.n	801b8ba <__ieee754_powf+0x1ba>
 801ba9a:	2401      	movs	r4, #1
 801ba9c:	e75d      	b.n	801b95a <__ieee754_powf+0x25a>
 801ba9e:	bf00      	nop
 801baa0:	0801cef3 	.word	0x0801cef3
 801baa4:	00000000 	.word	0x00000000
 801baa8:	3f7ffff7 	.word	0x3f7ffff7
 801baac:	7149f2ca 	.word	0x7149f2ca
 801bab0:	3f800007 	.word	0x3f800007
 801bab4:	3eaaaaab 	.word	0x3eaaaaab
 801bab8:	3fb8aa3b 	.word	0x3fb8aa3b
 801babc:	36eca570 	.word	0x36eca570
 801bac0:	3fb8aa00 	.word	0x3fb8aa00
 801bac4:	4b800000 	.word	0x4b800000
 801bac8:	001cc471 	.word	0x001cc471
 801bacc:	005db3d6 	.word	0x005db3d6
 801bad0:	0801cf8c 	.word	0x0801cf8c
 801bad4:	fffff000 	.word	0xfffff000
 801bad8:	3e6c3255 	.word	0x3e6c3255
 801badc:	3e53f142 	.word	0x3e53f142
 801bae0:	3e8ba305 	.word	0x3e8ba305
 801bae4:	3edb6db7 	.word	0x3edb6db7
 801bae8:	3f19999a 	.word	0x3f19999a
 801baec:	3f76384f 	.word	0x3f76384f
 801baf0:	3f763800 	.word	0x3f763800
 801baf4:	369dc3a0 	.word	0x369dc3a0
 801baf8:	0801cf9c 	.word	0x0801cf9c
 801bafc:	0801cf94 	.word	0x0801cf94
 801bb00:	3338aa3c 	.word	0x3338aa3c
 801bb04:	f040 8092 	bne.w	801bc2c <__ieee754_powf+0x52c>
 801bb08:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801bb00 <__ieee754_powf+0x400>
 801bb0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb10:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801bb14:	eef4 6ac7 	vcmpe.f32	s13, s14
 801bb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb1c:	f73f aef6 	bgt.w	801b90c <__ieee754_powf+0x20c>
 801bb20:	15db      	asrs	r3, r3, #23
 801bb22:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801bb26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801bb2a:	4103      	asrs	r3, r0
 801bb2c:	4423      	add	r3, r4
 801bb2e:	4949      	ldr	r1, [pc, #292]	; (801bc54 <__ieee754_powf+0x554>)
 801bb30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801bb34:	3a7f      	subs	r2, #127	; 0x7f
 801bb36:	4111      	asrs	r1, r2
 801bb38:	ea23 0101 	bic.w	r1, r3, r1
 801bb3c:	ee07 1a10 	vmov	s14, r1
 801bb40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801bb44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801bb48:	f1c2 0217 	rsb	r2, r2, #23
 801bb4c:	4110      	asrs	r0, r2
 801bb4e:	2c00      	cmp	r4, #0
 801bb50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bb54:	bfb8      	it	lt
 801bb56:	4240      	neglt	r0, r0
 801bb58:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801bb5c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801bc58 <__ieee754_powf+0x558>
 801bb60:	ee17 3a10 	vmov	r3, s14
 801bb64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801bb68:	f023 030f 	bic.w	r3, r3, #15
 801bb6c:	ee07 3a10 	vmov	s14, r3
 801bb70:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bb74:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801bb78:	eddf 7a38 	vldr	s15, [pc, #224]	; 801bc5c <__ieee754_powf+0x55c>
 801bb7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb80:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801bb84:	eddf 6a36 	vldr	s13, [pc, #216]	; 801bc60 <__ieee754_powf+0x560>
 801bb88:	eeb0 0a67 	vmov.f32	s0, s15
 801bb8c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801bb90:	eeb0 6a40 	vmov.f32	s12, s0
 801bb94:	eea7 6a66 	vfms.f32	s12, s14, s13
 801bb98:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bb9c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801bba0:	eddf 6a30 	vldr	s13, [pc, #192]	; 801bc64 <__ieee754_powf+0x564>
 801bba4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801bc68 <__ieee754_powf+0x568>
 801bba8:	eea7 6a26 	vfma.f32	s12, s14, s13
 801bbac:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801bc6c <__ieee754_powf+0x56c>
 801bbb0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801bbb4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801bc70 <__ieee754_powf+0x570>
 801bbb8:	eea6 6a87 	vfma.f32	s12, s13, s14
 801bbbc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801bc74 <__ieee754_powf+0x574>
 801bbc0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801bbc4:	eeb0 6a40 	vmov.f32	s12, s0
 801bbc8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801bbcc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801bbd0:	eeb0 7a46 	vmov.f32	s14, s12
 801bbd4:	ee77 6a66 	vsub.f32	s13, s14, s13
 801bbd8:	ee20 6a06 	vmul.f32	s12, s0, s12
 801bbdc:	eee0 7a27 	vfma.f32	s15, s0, s15
 801bbe0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801bbe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bbe8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801bbec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bbf0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801bbf4:	ee10 3a10 	vmov	r3, s0
 801bbf8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801bbfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bc00:	da1a      	bge.n	801bc38 <__ieee754_powf+0x538>
 801bc02:	f000 fd5b 	bl	801c6bc <scalbnf>
 801bc06:	ee20 0a08 	vmul.f32	s0, s0, s16
 801bc0a:	e5cd      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801bc0c:	4a1a      	ldr	r2, [pc, #104]	; (801bc78 <__ieee754_powf+0x578>)
 801bc0e:	4293      	cmp	r3, r2
 801bc10:	dd02      	ble.n	801bc18 <__ieee754_powf+0x518>
 801bc12:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801bc7c <__ieee754_powf+0x57c>
 801bc16:	e67b      	b.n	801b910 <__ieee754_powf+0x210>
 801bc18:	d108      	bne.n	801bc2c <__ieee754_powf+0x52c>
 801bc1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bc1e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc26:	f6ff af7b 	blt.w	801bb20 <__ieee754_powf+0x420>
 801bc2a:	e7f2      	b.n	801bc12 <__ieee754_powf+0x512>
 801bc2c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801bc30:	f73f af76 	bgt.w	801bb20 <__ieee754_powf+0x420>
 801bc34:	2000      	movs	r0, #0
 801bc36:	e78f      	b.n	801bb58 <__ieee754_powf+0x458>
 801bc38:	ee00 3a10 	vmov	s0, r3
 801bc3c:	e7e3      	b.n	801bc06 <__ieee754_powf+0x506>
 801bc3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bc42:	e5b1      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801bc44:	eeb0 0a68 	vmov.f32	s0, s17
 801bc48:	e5ae      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801bc4a:	eeb0 0a48 	vmov.f32	s0, s16
 801bc4e:	e5ab      	b.n	801b7a8 <__ieee754_powf+0xa8>
 801bc50:	2600      	movs	r6, #0
 801bc52:	e590      	b.n	801b776 <__ieee754_powf+0x76>
 801bc54:	007fffff 	.word	0x007fffff
 801bc58:	3f317218 	.word	0x3f317218
 801bc5c:	35bfbe8c 	.word	0x35bfbe8c
 801bc60:	3f317200 	.word	0x3f317200
 801bc64:	3331bb4c 	.word	0x3331bb4c
 801bc68:	b5ddea0e 	.word	0xb5ddea0e
 801bc6c:	388ab355 	.word	0x388ab355
 801bc70:	bb360b61 	.word	0xbb360b61
 801bc74:	3e2aaaab 	.word	0x3e2aaaab
 801bc78:	43160000 	.word	0x43160000
 801bc7c:	0da24260 	.word	0x0da24260

0801bc80 <__ieee754_rem_pio2f>:
 801bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc82:	ee10 6a10 	vmov	r6, s0
 801bc86:	4b8e      	ldr	r3, [pc, #568]	; (801bec0 <__ieee754_rem_pio2f+0x240>)
 801bc88:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801bc8c:	429d      	cmp	r5, r3
 801bc8e:	b087      	sub	sp, #28
 801bc90:	eef0 7a40 	vmov.f32	s15, s0
 801bc94:	4604      	mov	r4, r0
 801bc96:	dc05      	bgt.n	801bca4 <__ieee754_rem_pio2f+0x24>
 801bc98:	2300      	movs	r3, #0
 801bc9a:	ed80 0a00 	vstr	s0, [r0]
 801bc9e:	6043      	str	r3, [r0, #4]
 801bca0:	2000      	movs	r0, #0
 801bca2:	e01a      	b.n	801bcda <__ieee754_rem_pio2f+0x5a>
 801bca4:	4b87      	ldr	r3, [pc, #540]	; (801bec4 <__ieee754_rem_pio2f+0x244>)
 801bca6:	429d      	cmp	r5, r3
 801bca8:	dc46      	bgt.n	801bd38 <__ieee754_rem_pio2f+0xb8>
 801bcaa:	2e00      	cmp	r6, #0
 801bcac:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801bec8 <__ieee754_rem_pio2f+0x248>
 801bcb0:	4b86      	ldr	r3, [pc, #536]	; (801becc <__ieee754_rem_pio2f+0x24c>)
 801bcb2:	f025 050f 	bic.w	r5, r5, #15
 801bcb6:	dd1f      	ble.n	801bcf8 <__ieee754_rem_pio2f+0x78>
 801bcb8:	429d      	cmp	r5, r3
 801bcba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801bcbe:	d00e      	beq.n	801bcde <__ieee754_rem_pio2f+0x5e>
 801bcc0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801bed0 <__ieee754_rem_pio2f+0x250>
 801bcc4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801bcc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801bccc:	ed80 0a00 	vstr	s0, [r0]
 801bcd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bcd4:	2001      	movs	r0, #1
 801bcd6:	edc4 7a01 	vstr	s15, [r4, #4]
 801bcda:	b007      	add	sp, #28
 801bcdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcde:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801bed4 <__ieee754_rem_pio2f+0x254>
 801bce2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801bed8 <__ieee754_rem_pio2f+0x258>
 801bce6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801bcea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801bcee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bcf2:	edc0 6a00 	vstr	s13, [r0]
 801bcf6:	e7eb      	b.n	801bcd0 <__ieee754_rem_pio2f+0x50>
 801bcf8:	429d      	cmp	r5, r3
 801bcfa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801bcfe:	d00e      	beq.n	801bd1e <__ieee754_rem_pio2f+0x9e>
 801bd00:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801bed0 <__ieee754_rem_pio2f+0x250>
 801bd04:	ee37 0a87 	vadd.f32	s0, s15, s14
 801bd08:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801bd0c:	ed80 0a00 	vstr	s0, [r0]
 801bd10:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bd14:	f04f 30ff 	mov.w	r0, #4294967295
 801bd18:	edc4 7a01 	vstr	s15, [r4, #4]
 801bd1c:	e7dd      	b.n	801bcda <__ieee754_rem_pio2f+0x5a>
 801bd1e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801bed4 <__ieee754_rem_pio2f+0x254>
 801bd22:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801bed8 <__ieee754_rem_pio2f+0x258>
 801bd26:	ee77 7a80 	vadd.f32	s15, s15, s0
 801bd2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801bd2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd32:	edc0 6a00 	vstr	s13, [r0]
 801bd36:	e7eb      	b.n	801bd10 <__ieee754_rem_pio2f+0x90>
 801bd38:	4b68      	ldr	r3, [pc, #416]	; (801bedc <__ieee754_rem_pio2f+0x25c>)
 801bd3a:	429d      	cmp	r5, r3
 801bd3c:	dc72      	bgt.n	801be24 <__ieee754_rem_pio2f+0x1a4>
 801bd3e:	f7ff fb5b 	bl	801b3f8 <fabsf>
 801bd42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801bee0 <__ieee754_rem_pio2f+0x260>
 801bd46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bd4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801bd4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bd52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bd56:	ee17 0a90 	vmov	r0, s15
 801bd5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801bec8 <__ieee754_rem_pio2f+0x248>
 801bd5e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801bd62:	281f      	cmp	r0, #31
 801bd64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801bed0 <__ieee754_rem_pio2f+0x250>
 801bd68:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd6c:	eeb1 6a47 	vneg.f32	s12, s14
 801bd70:	ee70 6a67 	vsub.f32	s13, s0, s15
 801bd74:	ee16 2a90 	vmov	r2, s13
 801bd78:	dc1c      	bgt.n	801bdb4 <__ieee754_rem_pio2f+0x134>
 801bd7a:	495a      	ldr	r1, [pc, #360]	; (801bee4 <__ieee754_rem_pio2f+0x264>)
 801bd7c:	1e47      	subs	r7, r0, #1
 801bd7e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801bd82:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801bd86:	428b      	cmp	r3, r1
 801bd88:	d014      	beq.n	801bdb4 <__ieee754_rem_pio2f+0x134>
 801bd8a:	6022      	str	r2, [r4, #0]
 801bd8c:	ed94 7a00 	vldr	s14, [r4]
 801bd90:	ee30 0a47 	vsub.f32	s0, s0, s14
 801bd94:	2e00      	cmp	r6, #0
 801bd96:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bd9a:	ed84 0a01 	vstr	s0, [r4, #4]
 801bd9e:	da9c      	bge.n	801bcda <__ieee754_rem_pio2f+0x5a>
 801bda0:	eeb1 7a47 	vneg.f32	s14, s14
 801bda4:	eeb1 0a40 	vneg.f32	s0, s0
 801bda8:	ed84 7a00 	vstr	s14, [r4]
 801bdac:	ed84 0a01 	vstr	s0, [r4, #4]
 801bdb0:	4240      	negs	r0, r0
 801bdb2:	e792      	b.n	801bcda <__ieee754_rem_pio2f+0x5a>
 801bdb4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801bdb8:	15eb      	asrs	r3, r5, #23
 801bdba:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801bdbe:	2d08      	cmp	r5, #8
 801bdc0:	dde3      	ble.n	801bd8a <__ieee754_rem_pio2f+0x10a>
 801bdc2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801bed4 <__ieee754_rem_pio2f+0x254>
 801bdc6:	eef0 6a40 	vmov.f32	s13, s0
 801bdca:	eee6 6a27 	vfma.f32	s13, s12, s15
 801bdce:	ee30 0a66 	vsub.f32	s0, s0, s13
 801bdd2:	eea6 0a27 	vfma.f32	s0, s12, s15
 801bdd6:	eddf 7a40 	vldr	s15, [pc, #256]	; 801bed8 <__ieee754_rem_pio2f+0x258>
 801bdda:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801bdde:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801bde2:	eef0 7a40 	vmov.f32	s15, s0
 801bde6:	ee15 2a90 	vmov	r2, s11
 801bdea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801bdee:	1a5b      	subs	r3, r3, r1
 801bdf0:	2b19      	cmp	r3, #25
 801bdf2:	dc04      	bgt.n	801bdfe <__ieee754_rem_pio2f+0x17e>
 801bdf4:	edc4 5a00 	vstr	s11, [r4]
 801bdf8:	eeb0 0a66 	vmov.f32	s0, s13
 801bdfc:	e7c6      	b.n	801bd8c <__ieee754_rem_pio2f+0x10c>
 801bdfe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801bee8 <__ieee754_rem_pio2f+0x268>
 801be02:	eeb0 0a66 	vmov.f32	s0, s13
 801be06:	eea6 0a25 	vfma.f32	s0, s12, s11
 801be0a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801be0e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801beec <__ieee754_rem_pio2f+0x26c>
 801be12:	eee6 7a25 	vfma.f32	s15, s12, s11
 801be16:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801be1a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801be1e:	ed84 7a00 	vstr	s14, [r4]
 801be22:	e7b3      	b.n	801bd8c <__ieee754_rem_pio2f+0x10c>
 801be24:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801be28:	db06      	blt.n	801be38 <__ieee754_rem_pio2f+0x1b8>
 801be2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801be2e:	edc0 7a01 	vstr	s15, [r0, #4]
 801be32:	edc0 7a00 	vstr	s15, [r0]
 801be36:	e733      	b.n	801bca0 <__ieee754_rem_pio2f+0x20>
 801be38:	15ea      	asrs	r2, r5, #23
 801be3a:	3a86      	subs	r2, #134	; 0x86
 801be3c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801be40:	ee07 3a90 	vmov	s15, r3
 801be44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801be48:	eddf 6a29 	vldr	s13, [pc, #164]	; 801bef0 <__ieee754_rem_pio2f+0x270>
 801be4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be54:	ed8d 7a03 	vstr	s14, [sp, #12]
 801be58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801be5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801be60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be68:	ed8d 7a04 	vstr	s14, [sp, #16]
 801be6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801be70:	eef5 7a40 	vcmp.f32	s15, #0.0
 801be74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be78:	edcd 7a05 	vstr	s15, [sp, #20]
 801be7c:	d11e      	bne.n	801bebc <__ieee754_rem_pio2f+0x23c>
 801be7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801be82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be86:	bf14      	ite	ne
 801be88:	2302      	movne	r3, #2
 801be8a:	2301      	moveq	r3, #1
 801be8c:	4919      	ldr	r1, [pc, #100]	; (801bef4 <__ieee754_rem_pio2f+0x274>)
 801be8e:	9101      	str	r1, [sp, #4]
 801be90:	2102      	movs	r1, #2
 801be92:	9100      	str	r1, [sp, #0]
 801be94:	a803      	add	r0, sp, #12
 801be96:	4621      	mov	r1, r4
 801be98:	f000 f892 	bl	801bfc0 <__kernel_rem_pio2f>
 801be9c:	2e00      	cmp	r6, #0
 801be9e:	f6bf af1c 	bge.w	801bcda <__ieee754_rem_pio2f+0x5a>
 801bea2:	edd4 7a00 	vldr	s15, [r4]
 801bea6:	eef1 7a67 	vneg.f32	s15, s15
 801beaa:	edc4 7a00 	vstr	s15, [r4]
 801beae:	edd4 7a01 	vldr	s15, [r4, #4]
 801beb2:	eef1 7a67 	vneg.f32	s15, s15
 801beb6:	edc4 7a01 	vstr	s15, [r4, #4]
 801beba:	e779      	b.n	801bdb0 <__ieee754_rem_pio2f+0x130>
 801bebc:	2303      	movs	r3, #3
 801bebe:	e7e5      	b.n	801be8c <__ieee754_rem_pio2f+0x20c>
 801bec0:	3f490fd8 	.word	0x3f490fd8
 801bec4:	4016cbe3 	.word	0x4016cbe3
 801bec8:	3fc90f80 	.word	0x3fc90f80
 801becc:	3fc90fd0 	.word	0x3fc90fd0
 801bed0:	37354443 	.word	0x37354443
 801bed4:	37354400 	.word	0x37354400
 801bed8:	2e85a308 	.word	0x2e85a308
 801bedc:	43490f80 	.word	0x43490f80
 801bee0:	3f22f984 	.word	0x3f22f984
 801bee4:	0801cfa4 	.word	0x0801cfa4
 801bee8:	2e85a300 	.word	0x2e85a300
 801beec:	248d3132 	.word	0x248d3132
 801bef0:	43800000 	.word	0x43800000
 801bef4:	0801d024 	.word	0x0801d024

0801bef8 <__ieee754_sqrtf>:
 801bef8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801befc:	4770      	bx	lr
	...

0801bf00 <__kernel_cosf>:
 801bf00:	ee10 3a10 	vmov	r3, s0
 801bf04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf08:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801bf0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801bf10:	da05      	bge.n	801bf1e <__kernel_cosf+0x1e>
 801bf12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bf16:	ee17 2a90 	vmov	r2, s15
 801bf1a:	2a00      	cmp	r2, #0
 801bf1c:	d03d      	beq.n	801bf9a <__kernel_cosf+0x9a>
 801bf1e:	ee60 5a00 	vmul.f32	s11, s0, s0
 801bf22:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801bfa0 <__kernel_cosf+0xa0>
 801bf26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801bfa4 <__kernel_cosf+0xa4>
 801bf2a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801bfa8 <__kernel_cosf+0xa8>
 801bf2e:	4a1f      	ldr	r2, [pc, #124]	; (801bfac <__kernel_cosf+0xac>)
 801bf30:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801bf34:	4293      	cmp	r3, r2
 801bf36:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801bfb0 <__kernel_cosf+0xb0>
 801bf3a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801bf3e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801bfb4 <__kernel_cosf+0xb4>
 801bf42:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801bf46:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801bfb8 <__kernel_cosf+0xb8>
 801bf4a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801bf4e:	eeb0 7a66 	vmov.f32	s14, s13
 801bf52:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801bf56:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801bf5a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801bf5e:	ee67 6a25 	vmul.f32	s13, s14, s11
 801bf62:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801bf66:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801bf6a:	dc04      	bgt.n	801bf76 <__kernel_cosf+0x76>
 801bf6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801bf70:	ee36 0a47 	vsub.f32	s0, s12, s14
 801bf74:	4770      	bx	lr
 801bf76:	4a11      	ldr	r2, [pc, #68]	; (801bfbc <__kernel_cosf+0xbc>)
 801bf78:	4293      	cmp	r3, r2
 801bf7a:	bfda      	itte	le
 801bf7c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801bf80:	ee06 3a90 	vmovle	s13, r3
 801bf84:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801bf88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bf8c:	ee36 0a66 	vsub.f32	s0, s12, s13
 801bf90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bf94:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bf98:	4770      	bx	lr
 801bf9a:	eeb0 0a46 	vmov.f32	s0, s12
 801bf9e:	4770      	bx	lr
 801bfa0:	ad47d74e 	.word	0xad47d74e
 801bfa4:	310f74f6 	.word	0x310f74f6
 801bfa8:	3d2aaaab 	.word	0x3d2aaaab
 801bfac:	3e999999 	.word	0x3e999999
 801bfb0:	b493f27c 	.word	0xb493f27c
 801bfb4:	37d00d01 	.word	0x37d00d01
 801bfb8:	bab60b61 	.word	0xbab60b61
 801bfbc:	3f480000 	.word	0x3f480000

0801bfc0 <__kernel_rem_pio2f>:
 801bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfc4:	ed2d 8b04 	vpush	{d8-d9}
 801bfc8:	b0d7      	sub	sp, #348	; 0x15c
 801bfca:	4616      	mov	r6, r2
 801bfcc:	4698      	mov	r8, r3
 801bfce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bfd0:	4bbb      	ldr	r3, [pc, #748]	; (801c2c0 <__kernel_rem_pio2f+0x300>)
 801bfd2:	9001      	str	r0, [sp, #4]
 801bfd4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801bfd8:	1d33      	adds	r3, r6, #4
 801bfda:	460d      	mov	r5, r1
 801bfdc:	f108 39ff 	add.w	r9, r8, #4294967295
 801bfe0:	db29      	blt.n	801c036 <__kernel_rem_pio2f+0x76>
 801bfe2:	1ef1      	subs	r1, r6, #3
 801bfe4:	bf48      	it	mi
 801bfe6:	1d31      	addmi	r1, r6, #4
 801bfe8:	10c9      	asrs	r1, r1, #3
 801bfea:	1c4c      	adds	r4, r1, #1
 801bfec:	00e3      	lsls	r3, r4, #3
 801bfee:	9302      	str	r3, [sp, #8]
 801bff0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801bff2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801bff6:	eba1 0009 	sub.w	r0, r1, r9
 801bffa:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801bffe:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801c002:	eb07 0c09 	add.w	ip, r7, r9
 801c006:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801c00a:	2300      	movs	r3, #0
 801c00c:	4563      	cmp	r3, ip
 801c00e:	dd14      	ble.n	801c03a <__kernel_rem_pio2f+0x7a>
 801c010:	ab1a      	add	r3, sp, #104	; 0x68
 801c012:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801c016:	46cc      	mov	ip, r9
 801c018:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801c01c:	f1c8 0b01 	rsb	fp, r8, #1
 801c020:	eb0b 020c 	add.w	r2, fp, ip
 801c024:	4297      	cmp	r7, r2
 801c026:	db27      	blt.n	801c078 <__kernel_rem_pio2f+0xb8>
 801c028:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c02c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801c030:	4618      	mov	r0, r3
 801c032:	2200      	movs	r2, #0
 801c034:	e016      	b.n	801c064 <__kernel_rem_pio2f+0xa4>
 801c036:	2100      	movs	r1, #0
 801c038:	e7d7      	b.n	801bfea <__kernel_rem_pio2f+0x2a>
 801c03a:	42d8      	cmn	r0, r3
 801c03c:	bf5d      	ittte	pl
 801c03e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801c042:	ee07 2a90 	vmovpl	s15, r2
 801c046:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c04a:	eef0 7a47 	vmovmi.f32	s15, s14
 801c04e:	ecea 7a01 	vstmia	sl!, {s15}
 801c052:	3301      	adds	r3, #1
 801c054:	e7da      	b.n	801c00c <__kernel_rem_pio2f+0x4c>
 801c056:	ecfe 6a01 	vldmia	lr!, {s13}
 801c05a:	ed90 7a00 	vldr	s14, [r0]
 801c05e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c062:	3201      	adds	r2, #1
 801c064:	454a      	cmp	r2, r9
 801c066:	f1a0 0004 	sub.w	r0, r0, #4
 801c06a:	ddf4      	ble.n	801c056 <__kernel_rem_pio2f+0x96>
 801c06c:	ecea 7a01 	vstmia	sl!, {s15}
 801c070:	3304      	adds	r3, #4
 801c072:	f10c 0c01 	add.w	ip, ip, #1
 801c076:	e7d3      	b.n	801c020 <__kernel_rem_pio2f+0x60>
 801c078:	ab06      	add	r3, sp, #24
 801c07a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801c07e:	9304      	str	r3, [sp, #16]
 801c080:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801c082:	eddf 8a92 	vldr	s17, [pc, #584]	; 801c2cc <__kernel_rem_pio2f+0x30c>
 801c086:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801c2c8 <__kernel_rem_pio2f+0x308>
 801c08a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801c08e:	9303      	str	r3, [sp, #12]
 801c090:	46ba      	mov	sl, r7
 801c092:	ab56      	add	r3, sp, #344	; 0x158
 801c094:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801c098:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801c09c:	ab06      	add	r3, sp, #24
 801c09e:	4618      	mov	r0, r3
 801c0a0:	4652      	mov	r2, sl
 801c0a2:	2a00      	cmp	r2, #0
 801c0a4:	dc51      	bgt.n	801c14a <__kernel_rem_pio2f+0x18a>
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	9305      	str	r3, [sp, #20]
 801c0aa:	f000 fb07 	bl	801c6bc <scalbnf>
 801c0ae:	eeb0 8a40 	vmov.f32	s16, s0
 801c0b2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801c0b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801c0ba:	f000 fa61 	bl	801c580 <floorf>
 801c0be:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801c0c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801c0c6:	2c00      	cmp	r4, #0
 801c0c8:	9b05      	ldr	r3, [sp, #20]
 801c0ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c0ce:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801c0d2:	edcd 7a00 	vstr	s15, [sp]
 801c0d6:	ee38 8a40 	vsub.f32	s16, s16, s0
 801c0da:	dd4b      	ble.n	801c174 <__kernel_rem_pio2f+0x1b4>
 801c0dc:	f10a 3cff 	add.w	ip, sl, #4294967295
 801c0e0:	aa06      	add	r2, sp, #24
 801c0e2:	f1c4 0e08 	rsb	lr, r4, #8
 801c0e6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801c0ea:	ee17 1a90 	vmov	r1, s15
 801c0ee:	fa42 f00e 	asr.w	r0, r2, lr
 801c0f2:	4401      	add	r1, r0
 801c0f4:	9100      	str	r1, [sp, #0]
 801c0f6:	fa00 f00e 	lsl.w	r0, r0, lr
 801c0fa:	a906      	add	r1, sp, #24
 801c0fc:	1a12      	subs	r2, r2, r0
 801c0fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801c102:	f1c4 0007 	rsb	r0, r4, #7
 801c106:	fa42 fb00 	asr.w	fp, r2, r0
 801c10a:	f1bb 0f00 	cmp.w	fp, #0
 801c10e:	dd43      	ble.n	801c198 <__kernel_rem_pio2f+0x1d8>
 801c110:	9a00      	ldr	r2, [sp, #0]
 801c112:	f04f 0e00 	mov.w	lr, #0
 801c116:	3201      	adds	r2, #1
 801c118:	9200      	str	r2, [sp, #0]
 801c11a:	4670      	mov	r0, lr
 801c11c:	45f2      	cmp	sl, lr
 801c11e:	dc6c      	bgt.n	801c1fa <__kernel_rem_pio2f+0x23a>
 801c120:	2c00      	cmp	r4, #0
 801c122:	dd04      	ble.n	801c12e <__kernel_rem_pio2f+0x16e>
 801c124:	2c01      	cmp	r4, #1
 801c126:	d079      	beq.n	801c21c <__kernel_rem_pio2f+0x25c>
 801c128:	2c02      	cmp	r4, #2
 801c12a:	f000 8082 	beq.w	801c232 <__kernel_rem_pio2f+0x272>
 801c12e:	f1bb 0f02 	cmp.w	fp, #2
 801c132:	d131      	bne.n	801c198 <__kernel_rem_pio2f+0x1d8>
 801c134:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c138:	ee30 8a48 	vsub.f32	s16, s0, s16
 801c13c:	b360      	cbz	r0, 801c198 <__kernel_rem_pio2f+0x1d8>
 801c13e:	4620      	mov	r0, r4
 801c140:	f000 fabc 	bl	801c6bc <scalbnf>
 801c144:	ee38 8a40 	vsub.f32	s16, s16, s0
 801c148:	e026      	b.n	801c198 <__kernel_rem_pio2f+0x1d8>
 801c14a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801c14e:	3a01      	subs	r2, #1
 801c150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c154:	a942      	add	r1, sp, #264	; 0x108
 801c156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c15a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801c15e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801c162:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c166:	eca0 0a01 	vstmia	r0!, {s0}
 801c16a:	ed9c 0a00 	vldr	s0, [ip]
 801c16e:	ee37 0a80 	vadd.f32	s0, s15, s0
 801c172:	e796      	b.n	801c0a2 <__kernel_rem_pio2f+0xe2>
 801c174:	d107      	bne.n	801c186 <__kernel_rem_pio2f+0x1c6>
 801c176:	f10a 32ff 	add.w	r2, sl, #4294967295
 801c17a:	a906      	add	r1, sp, #24
 801c17c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801c180:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801c184:	e7c1      	b.n	801c10a <__kernel_rem_pio2f+0x14a>
 801c186:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c18a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c192:	da2f      	bge.n	801c1f4 <__kernel_rem_pio2f+0x234>
 801c194:	f04f 0b00 	mov.w	fp, #0
 801c198:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1a0:	f040 8098 	bne.w	801c2d4 <__kernel_rem_pio2f+0x314>
 801c1a4:	f10a 33ff 	add.w	r3, sl, #4294967295
 801c1a8:	469c      	mov	ip, r3
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	45bc      	cmp	ip, r7
 801c1ae:	da48      	bge.n	801c242 <__kernel_rem_pio2f+0x282>
 801c1b0:	2a00      	cmp	r2, #0
 801c1b2:	d05f      	beq.n	801c274 <__kernel_rem_pio2f+0x2b4>
 801c1b4:	aa06      	add	r2, sp, #24
 801c1b6:	3c08      	subs	r4, #8
 801c1b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801c1bc:	2900      	cmp	r1, #0
 801c1be:	d07d      	beq.n	801c2bc <__kernel_rem_pio2f+0x2fc>
 801c1c0:	4620      	mov	r0, r4
 801c1c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c1c6:	9301      	str	r3, [sp, #4]
 801c1c8:	f000 fa78 	bl	801c6bc <scalbnf>
 801c1cc:	9b01      	ldr	r3, [sp, #4]
 801c1ce:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801c2cc <__kernel_rem_pio2f+0x30c>
 801c1d2:	4619      	mov	r1, r3
 801c1d4:	2900      	cmp	r1, #0
 801c1d6:	f280 80af 	bge.w	801c338 <__kernel_rem_pio2f+0x378>
 801c1da:	4618      	mov	r0, r3
 801c1dc:	2400      	movs	r4, #0
 801c1de:	2800      	cmp	r0, #0
 801c1e0:	f2c0 80d0 	blt.w	801c384 <__kernel_rem_pio2f+0x3c4>
 801c1e4:	a942      	add	r1, sp, #264	; 0x108
 801c1e6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801c1ea:	4a36      	ldr	r2, [pc, #216]	; (801c2c4 <__kernel_rem_pio2f+0x304>)
 801c1ec:	eddf 7a38 	vldr	s15, [pc, #224]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801c1f0:	2100      	movs	r1, #0
 801c1f2:	e0bb      	b.n	801c36c <__kernel_rem_pio2f+0x3ac>
 801c1f4:	f04f 0b02 	mov.w	fp, #2
 801c1f8:	e78a      	b.n	801c110 <__kernel_rem_pio2f+0x150>
 801c1fa:	681a      	ldr	r2, [r3, #0]
 801c1fc:	b948      	cbnz	r0, 801c212 <__kernel_rem_pio2f+0x252>
 801c1fe:	b11a      	cbz	r2, 801c208 <__kernel_rem_pio2f+0x248>
 801c200:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c204:	601a      	str	r2, [r3, #0]
 801c206:	2201      	movs	r2, #1
 801c208:	f10e 0e01 	add.w	lr, lr, #1
 801c20c:	3304      	adds	r3, #4
 801c20e:	4610      	mov	r0, r2
 801c210:	e784      	b.n	801c11c <__kernel_rem_pio2f+0x15c>
 801c212:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801c216:	601a      	str	r2, [r3, #0]
 801c218:	4602      	mov	r2, r0
 801c21a:	e7f5      	b.n	801c208 <__kernel_rem_pio2f+0x248>
 801c21c:	f10a 3cff 	add.w	ip, sl, #4294967295
 801c220:	ab06      	add	r3, sp, #24
 801c222:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c22a:	aa06      	add	r2, sp, #24
 801c22c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801c230:	e77d      	b.n	801c12e <__kernel_rem_pio2f+0x16e>
 801c232:	f10a 3cff 	add.w	ip, sl, #4294967295
 801c236:	ab06      	add	r3, sp, #24
 801c238:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c23c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c240:	e7f3      	b.n	801c22a <__kernel_rem_pio2f+0x26a>
 801c242:	a906      	add	r1, sp, #24
 801c244:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801c248:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c24c:	4302      	orrs	r2, r0
 801c24e:	e7ad      	b.n	801c1ac <__kernel_rem_pio2f+0x1ec>
 801c250:	3001      	adds	r0, #1
 801c252:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c256:	2a00      	cmp	r2, #0
 801c258:	d0fa      	beq.n	801c250 <__kernel_rem_pio2f+0x290>
 801c25a:	a91a      	add	r1, sp, #104	; 0x68
 801c25c:	eb0a 0208 	add.w	r2, sl, r8
 801c260:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c264:	f10a 0301 	add.w	r3, sl, #1
 801c268:	eb0a 0100 	add.w	r1, sl, r0
 801c26c:	4299      	cmp	r1, r3
 801c26e:	da04      	bge.n	801c27a <__kernel_rem_pio2f+0x2ba>
 801c270:	468a      	mov	sl, r1
 801c272:	e70e      	b.n	801c092 <__kernel_rem_pio2f+0xd2>
 801c274:	9b04      	ldr	r3, [sp, #16]
 801c276:	2001      	movs	r0, #1
 801c278:	e7eb      	b.n	801c252 <__kernel_rem_pio2f+0x292>
 801c27a:	9803      	ldr	r0, [sp, #12]
 801c27c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c280:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801c284:	9000      	str	r0, [sp, #0]
 801c286:	ee07 0a90 	vmov	s15, r0
 801c28a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c28e:	2000      	movs	r0, #0
 801c290:	ece2 7a01 	vstmia	r2!, {s15}
 801c294:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801c298:	4696      	mov	lr, r2
 801c29a:	4548      	cmp	r0, r9
 801c29c:	dd06      	ble.n	801c2ac <__kernel_rem_pio2f+0x2ec>
 801c29e:	a842      	add	r0, sp, #264	; 0x108
 801c2a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c2a4:	edc0 7a00 	vstr	s15, [r0]
 801c2a8:	3301      	adds	r3, #1
 801c2aa:	e7df      	b.n	801c26c <__kernel_rem_pio2f+0x2ac>
 801c2ac:	ecfc 6a01 	vldmia	ip!, {s13}
 801c2b0:	ed3e 7a01 	vldmdb	lr!, {s14}
 801c2b4:	3001      	adds	r0, #1
 801c2b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c2ba:	e7ee      	b.n	801c29a <__kernel_rem_pio2f+0x2da>
 801c2bc:	3b01      	subs	r3, #1
 801c2be:	e779      	b.n	801c1b4 <__kernel_rem_pio2f+0x1f4>
 801c2c0:	0801d368 	.word	0x0801d368
 801c2c4:	0801d33c 	.word	0x0801d33c
 801c2c8:	43800000 	.word	0x43800000
 801c2cc:	3b800000 	.word	0x3b800000
 801c2d0:	00000000 	.word	0x00000000
 801c2d4:	9b02      	ldr	r3, [sp, #8]
 801c2d6:	eeb0 0a48 	vmov.f32	s0, s16
 801c2da:	1b98      	subs	r0, r3, r6
 801c2dc:	f000 f9ee 	bl	801c6bc <scalbnf>
 801c2e0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801c2c8 <__kernel_rem_pio2f+0x308>
 801c2e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801c2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ec:	db1b      	blt.n	801c326 <__kernel_rem_pio2f+0x366>
 801c2ee:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801c2cc <__kernel_rem_pio2f+0x30c>
 801c2f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c2f6:	aa06      	add	r2, sp, #24
 801c2f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c2fc:	a906      	add	r1, sp, #24
 801c2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c302:	3408      	adds	r4, #8
 801c304:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801c308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c30c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c310:	ee10 3a10 	vmov	r3, s0
 801c314:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801c318:	ee17 2a90 	vmov	r2, s15
 801c31c:	f10a 0301 	add.w	r3, sl, #1
 801c320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801c324:	e74c      	b.n	801c1c0 <__kernel_rem_pio2f+0x200>
 801c326:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c32a:	aa06      	add	r2, sp, #24
 801c32c:	ee10 3a10 	vmov	r3, s0
 801c330:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801c334:	4653      	mov	r3, sl
 801c336:	e743      	b.n	801c1c0 <__kernel_rem_pio2f+0x200>
 801c338:	aa42      	add	r2, sp, #264	; 0x108
 801c33a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801c33e:	aa06      	add	r2, sp, #24
 801c340:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801c344:	9201      	str	r2, [sp, #4]
 801c346:	ee07 2a90 	vmov	s15, r2
 801c34a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c34e:	3901      	subs	r1, #1
 801c350:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c354:	ee20 0a07 	vmul.f32	s0, s0, s14
 801c358:	edc0 7a00 	vstr	s15, [r0]
 801c35c:	e73a      	b.n	801c1d4 <__kernel_rem_pio2f+0x214>
 801c35e:	ecf2 6a01 	vldmia	r2!, {s13}
 801c362:	ecb6 7a01 	vldmia	r6!, {s14}
 801c366:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c36a:	3101      	adds	r1, #1
 801c36c:	42b9      	cmp	r1, r7
 801c36e:	dc01      	bgt.n	801c374 <__kernel_rem_pio2f+0x3b4>
 801c370:	428c      	cmp	r4, r1
 801c372:	daf4      	bge.n	801c35e <__kernel_rem_pio2f+0x39e>
 801c374:	aa56      	add	r2, sp, #344	; 0x158
 801c376:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801c37a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801c37e:	3801      	subs	r0, #1
 801c380:	3401      	adds	r4, #1
 801c382:	e72c      	b.n	801c1de <__kernel_rem_pio2f+0x21e>
 801c384:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c386:	2a02      	cmp	r2, #2
 801c388:	dc0a      	bgt.n	801c3a0 <__kernel_rem_pio2f+0x3e0>
 801c38a:	2a00      	cmp	r2, #0
 801c38c:	dc61      	bgt.n	801c452 <__kernel_rem_pio2f+0x492>
 801c38e:	d03c      	beq.n	801c40a <__kernel_rem_pio2f+0x44a>
 801c390:	9b00      	ldr	r3, [sp, #0]
 801c392:	f003 0007 	and.w	r0, r3, #7
 801c396:	b057      	add	sp, #348	; 0x15c
 801c398:	ecbd 8b04 	vpop	{d8-d9}
 801c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3a0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c3a2:	2a03      	cmp	r2, #3
 801c3a4:	d1f4      	bne.n	801c390 <__kernel_rem_pio2f+0x3d0>
 801c3a6:	aa2e      	add	r2, sp, #184	; 0xb8
 801c3a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801c3ac:	4608      	mov	r0, r1
 801c3ae:	461c      	mov	r4, r3
 801c3b0:	2c00      	cmp	r4, #0
 801c3b2:	f1a0 0004 	sub.w	r0, r0, #4
 801c3b6:	dc59      	bgt.n	801c46c <__kernel_rem_pio2f+0x4ac>
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	2801      	cmp	r0, #1
 801c3bc:	f1a1 0104 	sub.w	r1, r1, #4
 801c3c0:	dc64      	bgt.n	801c48c <__kernel_rem_pio2f+0x4cc>
 801c3c2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801c3c6:	2b01      	cmp	r3, #1
 801c3c8:	dc70      	bgt.n	801c4ac <__kernel_rem_pio2f+0x4ec>
 801c3ca:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801c3ce:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801c3d2:	f1bb 0f00 	cmp.w	fp, #0
 801c3d6:	d172      	bne.n	801c4be <__kernel_rem_pio2f+0x4fe>
 801c3d8:	edc5 6a00 	vstr	s13, [r5]
 801c3dc:	ed85 7a01 	vstr	s14, [r5, #4]
 801c3e0:	edc5 7a02 	vstr	s15, [r5, #8]
 801c3e4:	e7d4      	b.n	801c390 <__kernel_rem_pio2f+0x3d0>
 801c3e6:	aa2e      	add	r2, sp, #184	; 0xb8
 801c3e8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801c3ec:	ed91 7a00 	vldr	s14, [r1]
 801c3f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c3f4:	3b01      	subs	r3, #1
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	daf5      	bge.n	801c3e6 <__kernel_rem_pio2f+0x426>
 801c3fa:	f1bb 0f00 	cmp.w	fp, #0
 801c3fe:	d001      	beq.n	801c404 <__kernel_rem_pio2f+0x444>
 801c400:	eef1 7a67 	vneg.f32	s15, s15
 801c404:	edc5 7a00 	vstr	s15, [r5]
 801c408:	e7c2      	b.n	801c390 <__kernel_rem_pio2f+0x3d0>
 801c40a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801c40e:	e7f2      	b.n	801c3f6 <__kernel_rem_pio2f+0x436>
 801c410:	aa2e      	add	r2, sp, #184	; 0xb8
 801c412:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801c416:	edd0 7a00 	vldr	s15, [r0]
 801c41a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c41e:	3901      	subs	r1, #1
 801c420:	2900      	cmp	r1, #0
 801c422:	daf5      	bge.n	801c410 <__kernel_rem_pio2f+0x450>
 801c424:	f1bb 0f00 	cmp.w	fp, #0
 801c428:	d017      	beq.n	801c45a <__kernel_rem_pio2f+0x49a>
 801c42a:	eef1 7a47 	vneg.f32	s15, s14
 801c42e:	edc5 7a00 	vstr	s15, [r5]
 801c432:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801c436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c43a:	a82f      	add	r0, sp, #188	; 0xbc
 801c43c:	2101      	movs	r1, #1
 801c43e:	428b      	cmp	r3, r1
 801c440:	da0e      	bge.n	801c460 <__kernel_rem_pio2f+0x4a0>
 801c442:	f1bb 0f00 	cmp.w	fp, #0
 801c446:	d001      	beq.n	801c44c <__kernel_rem_pio2f+0x48c>
 801c448:	eef1 7a67 	vneg.f32	s15, s15
 801c44c:	edc5 7a01 	vstr	s15, [r5, #4]
 801c450:	e79e      	b.n	801c390 <__kernel_rem_pio2f+0x3d0>
 801c452:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801c2d0 <__kernel_rem_pio2f+0x310>
 801c456:	4619      	mov	r1, r3
 801c458:	e7e2      	b.n	801c420 <__kernel_rem_pio2f+0x460>
 801c45a:	eef0 7a47 	vmov.f32	s15, s14
 801c45e:	e7e6      	b.n	801c42e <__kernel_rem_pio2f+0x46e>
 801c460:	ecb0 7a01 	vldmia	r0!, {s14}
 801c464:	3101      	adds	r1, #1
 801c466:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c46a:	e7e8      	b.n	801c43e <__kernel_rem_pio2f+0x47e>
 801c46c:	edd0 7a00 	vldr	s15, [r0]
 801c470:	edd0 6a01 	vldr	s13, [r0, #4]
 801c474:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c478:	3c01      	subs	r4, #1
 801c47a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c47e:	ed80 7a00 	vstr	s14, [r0]
 801c482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c486:	edc0 7a01 	vstr	s15, [r0, #4]
 801c48a:	e791      	b.n	801c3b0 <__kernel_rem_pio2f+0x3f0>
 801c48c:	edd1 7a00 	vldr	s15, [r1]
 801c490:	edd1 6a01 	vldr	s13, [r1, #4]
 801c494:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801c498:	3801      	subs	r0, #1
 801c49a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c49e:	ed81 7a00 	vstr	s14, [r1]
 801c4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c4a6:	edc1 7a01 	vstr	s15, [r1, #4]
 801c4aa:	e786      	b.n	801c3ba <__kernel_rem_pio2f+0x3fa>
 801c4ac:	aa2e      	add	r2, sp, #184	; 0xb8
 801c4ae:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801c4b2:	ed91 7a00 	vldr	s14, [r1]
 801c4b6:	3b01      	subs	r3, #1
 801c4b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c4bc:	e783      	b.n	801c3c6 <__kernel_rem_pio2f+0x406>
 801c4be:	eef1 6a66 	vneg.f32	s13, s13
 801c4c2:	eeb1 7a47 	vneg.f32	s14, s14
 801c4c6:	edc5 6a00 	vstr	s13, [r5]
 801c4ca:	ed85 7a01 	vstr	s14, [r5, #4]
 801c4ce:	eef1 7a67 	vneg.f32	s15, s15
 801c4d2:	e785      	b.n	801c3e0 <__kernel_rem_pio2f+0x420>

0801c4d4 <__kernel_sinf>:
 801c4d4:	ee10 3a10 	vmov	r3, s0
 801c4d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c4dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c4e0:	da04      	bge.n	801c4ec <__kernel_sinf+0x18>
 801c4e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c4e6:	ee17 3a90 	vmov	r3, s15
 801c4ea:	b35b      	cbz	r3, 801c544 <__kernel_sinf+0x70>
 801c4ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c4f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801c548 <__kernel_sinf+0x74>
 801c4f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801c54c <__kernel_sinf+0x78>
 801c4f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c4fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801c550 <__kernel_sinf+0x7c>
 801c500:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c504:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801c554 <__kernel_sinf+0x80>
 801c508:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c50c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c558 <__kernel_sinf+0x84>
 801c510:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c514:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c518:	b930      	cbnz	r0, 801c528 <__kernel_sinf+0x54>
 801c51a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801c55c <__kernel_sinf+0x88>
 801c51e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c522:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c526:	4770      	bx	lr
 801c528:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c52c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c530:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c534:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c538:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c560 <__kernel_sinf+0x8c>
 801c53c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c540:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c544:	4770      	bx	lr
 801c546:	bf00      	nop
 801c548:	2f2ec9d3 	.word	0x2f2ec9d3
 801c54c:	b2d72f34 	.word	0xb2d72f34
 801c550:	3638ef1b 	.word	0x3638ef1b
 801c554:	b9500d01 	.word	0xb9500d01
 801c558:	3c088889 	.word	0x3c088889
 801c55c:	be2aaaab 	.word	0xbe2aaaab
 801c560:	3e2aaaab 	.word	0x3e2aaaab

0801c564 <finitef>:
 801c564:	b082      	sub	sp, #8
 801c566:	ed8d 0a01 	vstr	s0, [sp, #4]
 801c56a:	9801      	ldr	r0, [sp, #4]
 801c56c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c570:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801c574:	bfac      	ite	ge
 801c576:	2000      	movge	r0, #0
 801c578:	2001      	movlt	r0, #1
 801c57a:	b002      	add	sp, #8
 801c57c:	4770      	bx	lr
	...

0801c580 <floorf>:
 801c580:	ee10 3a10 	vmov	r3, s0
 801c584:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c588:	3a7f      	subs	r2, #127	; 0x7f
 801c58a:	2a16      	cmp	r2, #22
 801c58c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c590:	dc2a      	bgt.n	801c5e8 <floorf+0x68>
 801c592:	2a00      	cmp	r2, #0
 801c594:	da11      	bge.n	801c5ba <floorf+0x3a>
 801c596:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c5f8 <floorf+0x78>
 801c59a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c59e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5a6:	dd05      	ble.n	801c5b4 <floorf+0x34>
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	da23      	bge.n	801c5f4 <floorf+0x74>
 801c5ac:	4a13      	ldr	r2, [pc, #76]	; (801c5fc <floorf+0x7c>)
 801c5ae:	2900      	cmp	r1, #0
 801c5b0:	bf18      	it	ne
 801c5b2:	4613      	movne	r3, r2
 801c5b4:	ee00 3a10 	vmov	s0, r3
 801c5b8:	4770      	bx	lr
 801c5ba:	4911      	ldr	r1, [pc, #68]	; (801c600 <floorf+0x80>)
 801c5bc:	4111      	asrs	r1, r2
 801c5be:	420b      	tst	r3, r1
 801c5c0:	d0fa      	beq.n	801c5b8 <floorf+0x38>
 801c5c2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c5f8 <floorf+0x78>
 801c5c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c5ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5d2:	ddef      	ble.n	801c5b4 <floorf+0x34>
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	bfbe      	ittt	lt
 801c5d8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801c5dc:	fa40 f202 	asrlt.w	r2, r0, r2
 801c5e0:	189b      	addlt	r3, r3, r2
 801c5e2:	ea23 0301 	bic.w	r3, r3, r1
 801c5e6:	e7e5      	b.n	801c5b4 <floorf+0x34>
 801c5e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c5ec:	d3e4      	bcc.n	801c5b8 <floorf+0x38>
 801c5ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c5f2:	4770      	bx	lr
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	e7dd      	b.n	801c5b4 <floorf+0x34>
 801c5f8:	7149f2ca 	.word	0x7149f2ca
 801c5fc:	bf800000 	.word	0xbf800000
 801c600:	007fffff 	.word	0x007fffff

0801c604 <rintf>:
 801c604:	ee10 2a10 	vmov	r2, s0
 801c608:	b513      	push	{r0, r1, r4, lr}
 801c60a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c60e:	397f      	subs	r1, #127	; 0x7f
 801c610:	2916      	cmp	r1, #22
 801c612:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801c616:	dc47      	bgt.n	801c6a8 <rintf+0xa4>
 801c618:	b32b      	cbz	r3, 801c666 <rintf+0x62>
 801c61a:	2900      	cmp	r1, #0
 801c61c:	ee10 3a10 	vmov	r3, s0
 801c620:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801c624:	da21      	bge.n	801c66a <rintf+0x66>
 801c626:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801c62a:	425b      	negs	r3, r3
 801c62c:	4921      	ldr	r1, [pc, #132]	; (801c6b4 <rintf+0xb0>)
 801c62e:	0a5b      	lsrs	r3, r3, #9
 801c630:	0d12      	lsrs	r2, r2, #20
 801c632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c636:	0512      	lsls	r2, r2, #20
 801c638:	4313      	orrs	r3, r2
 801c63a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801c63e:	ee07 3a90 	vmov	s15, r3
 801c642:	edd1 6a00 	vldr	s13, [r1]
 801c646:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801c64a:	ed8d 7a01 	vstr	s14, [sp, #4]
 801c64e:	eddd 7a01 	vldr	s15, [sp, #4]
 801c652:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c656:	ee17 3a90 	vmov	r3, s15
 801c65a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c65e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801c662:	ee00 3a10 	vmov	s0, r3
 801c666:	b002      	add	sp, #8
 801c668:	bd10      	pop	{r4, pc}
 801c66a:	4a13      	ldr	r2, [pc, #76]	; (801c6b8 <rintf+0xb4>)
 801c66c:	410a      	asrs	r2, r1
 801c66e:	4213      	tst	r3, r2
 801c670:	d0f9      	beq.n	801c666 <rintf+0x62>
 801c672:	0854      	lsrs	r4, r2, #1
 801c674:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801c678:	d006      	beq.n	801c688 <rintf+0x84>
 801c67a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801c67e:	ea23 0304 	bic.w	r3, r3, r4
 801c682:	fa42 f101 	asr.w	r1, r2, r1
 801c686:	430b      	orrs	r3, r1
 801c688:	4a0a      	ldr	r2, [pc, #40]	; (801c6b4 <rintf+0xb0>)
 801c68a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801c68e:	ed90 7a00 	vldr	s14, [r0]
 801c692:	ee07 3a90 	vmov	s15, r3
 801c696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c69a:	edcd 7a01 	vstr	s15, [sp, #4]
 801c69e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801c6a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c6a6:	e7de      	b.n	801c666 <rintf+0x62>
 801c6a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c6ac:	d3db      	bcc.n	801c666 <rintf+0x62>
 801c6ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c6b2:	e7d8      	b.n	801c666 <rintf+0x62>
 801c6b4:	0801d374 	.word	0x0801d374
 801c6b8:	007fffff 	.word	0x007fffff

0801c6bc <scalbnf>:
 801c6bc:	ee10 3a10 	vmov	r3, s0
 801c6c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c6c4:	d025      	beq.n	801c712 <scalbnf+0x56>
 801c6c6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c6ca:	d302      	bcc.n	801c6d2 <scalbnf+0x16>
 801c6cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c6d0:	4770      	bx	lr
 801c6d2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c6d6:	d122      	bne.n	801c71e <scalbnf+0x62>
 801c6d8:	4b2a      	ldr	r3, [pc, #168]	; (801c784 <scalbnf+0xc8>)
 801c6da:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801c788 <scalbnf+0xcc>
 801c6de:	4298      	cmp	r0, r3
 801c6e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c6e4:	db16      	blt.n	801c714 <scalbnf+0x58>
 801c6e6:	ee10 3a10 	vmov	r3, s0
 801c6ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c6ee:	3a19      	subs	r2, #25
 801c6f0:	4402      	add	r2, r0
 801c6f2:	2afe      	cmp	r2, #254	; 0xfe
 801c6f4:	dd15      	ble.n	801c722 <scalbnf+0x66>
 801c6f6:	ee10 3a10 	vmov	r3, s0
 801c6fa:	eddf 7a24 	vldr	s15, [pc, #144]	; 801c78c <scalbnf+0xd0>
 801c6fe:	eddf 6a24 	vldr	s13, [pc, #144]	; 801c790 <scalbnf+0xd4>
 801c702:	2b00      	cmp	r3, #0
 801c704:	eeb0 7a67 	vmov.f32	s14, s15
 801c708:	bfb8      	it	lt
 801c70a:	eef0 7a66 	vmovlt.f32	s15, s13
 801c70e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801c712:	4770      	bx	lr
 801c714:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801c794 <scalbnf+0xd8>
 801c718:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c71c:	4770      	bx	lr
 801c71e:	0dd2      	lsrs	r2, r2, #23
 801c720:	e7e6      	b.n	801c6f0 <scalbnf+0x34>
 801c722:	2a00      	cmp	r2, #0
 801c724:	dd06      	ble.n	801c734 <scalbnf+0x78>
 801c726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c72a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c72e:	ee00 3a10 	vmov	s0, r3
 801c732:	4770      	bx	lr
 801c734:	f112 0f16 	cmn.w	r2, #22
 801c738:	da1a      	bge.n	801c770 <scalbnf+0xb4>
 801c73a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c73e:	4298      	cmp	r0, r3
 801c740:	ee10 3a10 	vmov	r3, s0
 801c744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c748:	dd0a      	ble.n	801c760 <scalbnf+0xa4>
 801c74a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801c78c <scalbnf+0xd0>
 801c74e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801c790 <scalbnf+0xd4>
 801c752:	eef0 7a40 	vmov.f32	s15, s0
 801c756:	2b00      	cmp	r3, #0
 801c758:	bf18      	it	ne
 801c75a:	eeb0 0a47 	vmovne.f32	s0, s14
 801c75e:	e7db      	b.n	801c718 <scalbnf+0x5c>
 801c760:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801c794 <scalbnf+0xd8>
 801c764:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801c798 <scalbnf+0xdc>
 801c768:	eef0 7a40 	vmov.f32	s15, s0
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	e7f3      	b.n	801c758 <scalbnf+0x9c>
 801c770:	3219      	adds	r2, #25
 801c772:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c776:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c77a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c79c <scalbnf+0xe0>
 801c77e:	ee07 3a10 	vmov	s14, r3
 801c782:	e7c4      	b.n	801c70e <scalbnf+0x52>
 801c784:	ffff3cb0 	.word	0xffff3cb0
 801c788:	4c000000 	.word	0x4c000000
 801c78c:	7149f2ca 	.word	0x7149f2ca
 801c790:	f149f2ca 	.word	0xf149f2ca
 801c794:	0da24260 	.word	0x0da24260
 801c798:	8da24260 	.word	0x8da24260
 801c79c:	33000000 	.word	0x33000000

0801c7a0 <_init>:
 801c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7a2:	bf00      	nop
 801c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7a6:	bc08      	pop	{r3}
 801c7a8:	469e      	mov	lr, r3
 801c7aa:	4770      	bx	lr

0801c7ac <_fini>:
 801c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ae:	bf00      	nop
 801c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7b2:	bc08      	pop	{r3}
 801c7b4:	469e      	mov	lr, r3
 801c7b6:	4770      	bx	lr
