
RNS 3.4.1 HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000231c  0801f868  0801f868  0002f868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021b84  08021b84  0004045c  2**0
                  CONTENTS
  4 .ARM          00000008  08021b84  08021b84  00031b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021b8c  08021b8c  0004045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021b8c  08021b8c  00031b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021b90  08021b90  00031b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000045c  20000000  08021b94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000098f8  2000045c  08021ff0  0004045c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009d54  08021ff0  00049d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004045c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066965  00000000  00000000  0004048c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008883  00000000  00000000  000a6df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002440  00000000  00000000  000af678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002138  00000000  00000000  000b1ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ead7  00000000  00000000  000b3bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034849  00000000  00000000  000e26c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0fcc  00000000  00000000  00116f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00207edc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad20  00000000  00000000  00207f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000045c 	.word	0x2000045c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f84c 	.word	0x0801f84c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000460 	.word	0x20000460
 80001cc:	0801f84c 	.word	0x0801f84c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <ABT>:

void ABT(ABT_t *filt)
{
 8001078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	float pos_residual;
	float pos_predict;
	float vel_predict;

	/* Predict position and velocity using previous sample values */
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 6a00 	vldr	s13, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	edd3 7a00 	vldr	s15, [r3]
	pos_predict = *(filt->pos_output) + filt->sample_time *
 8001098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	edd3 7a00 	vldr	s15, [r3]
								(*(filt->vel_output)) + filt->sample_time *
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	ee17 0a90 	vmov	r0, s15
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
								filt->sample_time * 0.5 * (*(filt->acc_output));
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b54      	ldr	r3, [pc, #336]	; (800121c <ABT+0x1a4>)
 80010ca:	f7ff fa95 	bl	80005f8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4690      	mov	r8, r2
 80010d4:	4699      	mov	r9, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4640      	mov	r0, r8
 80010e8:	4649      	mov	r1, r9
 80010ea:	f7ff fa85 	bl	80005f8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
								(*(filt->vel_output)) + filt->sample_time *
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f8c9 	bl	800028c <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
	pos_predict = *(filt->pos_output) + filt->sample_time *
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd71 	bl	8000be8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	617b      	str	r3, [r7, #20]
	vel_predict = *(filt->vel_output) + filt->sample_time * (*(filt->acc_output));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Calculate residue */
	pos_residual = *filt->input - pos_predict;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update estimate with weighted input (a - b - g) */
	*(filt->pos_output) = pos_predict + filt->alpha * pos_residual;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a01 	vldr	s14, [r3, #4]
 8001146:	edd7 7a03 	vldr	s15, [r7, #12]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	edd7 7a05 	vldr	s15, [r7, #20]
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	edc3 7a00 	vstr	s15, [r3]
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 6a02 	vldr	s13, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																* pos_residual;
 800116e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
	*(filt->vel_output) = vel_predict + (filt->beta / filt->sample_time)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	edd7 7a04 	vldr	s15, [r7, #16]
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	edc3 7a00 	vstr	s15, [r3]
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4604      	mov	r4, r0
 8001194:	460d      	mov	r5, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <ABT+0x1a4>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4690      	mov	r8, r2
 80011b0:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	ee17 0a90 	vmov	r0, s15
 80011c6:	f7ff f9bf 	bl	8000548 <__aeabi_f2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff fb3b 	bl	800084c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
						(filt->sample_time * filt->sample_time)) * pos_residual;
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fa04 	bl	80005f8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
	*(filt->acc_output) = *(filt->acc_output) + (filt->gamma * 0.5 /
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69dc      	ldr	r4, [r3, #28]
 8001208:	f7ff fcee 	bl	8000be8 <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	6023      	str	r3, [r4, #0]
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	3fe00000 	.word	0x3fe00000

08001220 <DMA2_Stream0_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream0_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <DMA2_Stream0_IRQHandler+0x1c>)
 8001226:	f00f fa01 	bl	801062c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc2);
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <DMA2_Stream0_IRQHandler+0x20>)
 800122c:	f00f f9fe 	bl	801062c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc3);
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <DMA2_Stream0_IRQHandler+0x24>)
 8001232:	f00f f9fb 	bl	801062c <HAL_DMA_IRQHandler>

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200055a0 	.word	0x200055a0
 8001240:	20005600 	.word	0x20005600
 8001244:	200054b0 	.word	0x200054b0

08001248 <DMA2_Stream1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void DMA2_Stream1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <DMA2_Stream1_IRQHandler+0x1c>)
 800124e:	f00f f9ed 	bl	801062c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc2);
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <DMA2_Stream1_IRQHandler+0x20>)
 8001254:	f00f f9ea 	bl	801062c <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_adc3);
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <DMA2_Stream1_IRQHandler+0x24>)
 800125a:	f00f f9e7 	bl	801062c <HAL_DMA_IRQHandler>

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200055a0 	.word	0x200055a0
 8001268:	20005600 	.word	0x20005600
 800126c:	200054b0 	.word	0x200054b0

08001270 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001270:	b408      	push	{r3}
 8001272:	b580      	push	{r7, lr}
 8001274:	b089      	sub	sp, #36	; 0x24
 8001276:	af02      	add	r7, sp, #8
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	621a      	str	r2, [r3, #32]
	bdc->Channel = Channel;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
	bdc->Dirpintype =  Dirpintype;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001290:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001296:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d12e      	bne.n	80012fe <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	1d1a      	adds	r2, r3, #4
 80012a4:	617a      	str	r2, [r7, #20]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	1d1a      	adds	r2, r3, #4
 80012b0:	617a      	str	r2, [r7, #20]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1d1a      	adds	r2, r3, #4
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	1d1a      	adds	r2, r3, #4
 80012ca:	617a      	str	r2, [r7, #20]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6858      	ldr	r0, [r3, #4]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8919      	ldrh	r1, [r3, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2302      	movs	r3, #2
 80012e2:	2201      	movs	r2, #1
 80012e4:	f000 f98a 	bl	80015fc <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	68d8      	ldr	r0, [r3, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8a19      	ldrh	r1, [r3, #16]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2302      	movs	r3, #2
 80012f6:	2201      	movs	r2, #1
 80012f8:	f000 f980 	bl	80015fc <GPIOPinsInit>
 80012fc:	e017      	b.n	800132e <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d113      	bne.n	800132e <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1d1a      	adds	r2, r3, #4
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	1d1a      	adds	r2, r3, #4
 8001316:	617a      	str	r2, [r7, #20]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1d1a      	adds	r2, r3, #4
 8001324:	617a      	str	r2, [r7, #20]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <BDCInit+0xd2>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001340:	e018      	b.n	8001374 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b04      	cmp	r3, #4
 8001348:	d105      	bne.n	8001356 <BDCInit+0xe6>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001354:	e00e      	b.n	8001374 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2b08      	cmp	r3, #8
 800135c:	d105      	bne.n	800136a <BDCInit+0xfa>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001368:	e004      	b.n	8001374 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001374:	bf00      	nop
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800137e:	b001      	add	sp, #4
 8001380:	4770      	bx	lr

08001382 <SwapBDC>:


void SwapBDC(BDC_t*bdc,int8_t swap){
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]

	bdc->swap=swap;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	769a      	strb	r2, [r3, #26]

}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

	bdc->buffer= pwm*bdc->swap;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80013b0:	461a      	mov	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	fb03 f202 	mul.w	r2, r3, r2
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	61da      	str	r2, [r3, #28]

	if(bdc->buffer >= 0){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db59      	blt.n	8001478 <WriteBDC+0xd8>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), bdc->buffer);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d106      	bne.n	80013da <WriteBDC+0x3a>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
 80013d8:	e01e      	b.n	8001418 <WriteBDC+0x78>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d107      	bne.n	80013f2 <WriteBDC+0x52>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69d9      	ldr	r1, [r3, #28]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	460b      	mov	r3, r1
 80013ee:	6393      	str	r3, [r2, #56]	; 0x38
 80013f0:	e012      	b.n	8001418 <WriteBDC+0x78>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d107      	bne.n	800140a <WriteBDC+0x6a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69d9      	ldr	r1, [r3, #28]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001408:	e006      	b.n	8001418 <WriteBDC+0x78>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69d9      	ldr	r1, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	460b      	mov	r3, r1
 8001416:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d110      	bne.n	8001442 <WriteBDC+0xa2>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6858      	ldr	r0, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	891b      	ldrh	r3, [r3, #8]
 8001428:	2201      	movs	r2, #1
 800142a:	4619      	mov	r1, r3
 800142c:	f00f fd2a 	bl	8010e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68d8      	ldr	r0, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	8a1b      	ldrh	r3, [r3, #16]
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	f00f fd22 	bl	8010e84 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001440:	e07b      	b.n	800153a <WriteBDC+0x19a>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d177      	bne.n	800153a <WriteBDC+0x19a>
			bdc->shiftreg->Byte |= bdc->dir1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1a      	ldrb	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	430a      	orrs	r2, r1
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7e5b      	ldrb	r3, [r3, #25]
 8001468:	43db      	mvns	r3, r3
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	400a      	ands	r2, r1
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
}
 8001476:	e060      	b.n	800153a <WriteBDC+0x19a>
	}else if (bdc->buffer < 0){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da5c      	bge.n	800153a <WriteBDC+0x19a>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), bdc->buffer*(-1));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <WriteBDC+0xf8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	425a      	negs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
 8001496:	e021      	b.n	80014dc <WriteBDC+0x13c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	2b04      	cmp	r3, #4
 800149e:	d108      	bne.n	80014b2 <WriteBDC+0x112>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4259      	negs	r1, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	460b      	mov	r3, r1
 80014ae:	6393      	str	r3, [r2, #56]	; 0x38
 80014b0:	e014      	b.n	80014dc <WriteBDC+0x13c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d108      	bne.n	80014cc <WriteBDC+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4259      	negs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	460b      	mov	r3, r1
 80014c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80014ca:	e007      	b.n	80014dc <WriteBDC+0x13c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	4259      	negs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	460b      	mov	r3, r1
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d110      	bne.n	8001506 <WriteBDC+0x166>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6858      	ldr	r0, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	891b      	ldrh	r3, [r3, #8]
 80014ec:	2200      	movs	r2, #0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f00f fcc8 	bl	8010e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68d8      	ldr	r0, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	8a1b      	ldrh	r3, [r3, #16]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f00f fcc0 	bl	8010e84 <HAL_GPIO_WritePin>
}
 8001504:	e019      	b.n	800153a <WriteBDC+0x19a>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d115      	bne.n	800153a <WriteBDC+0x19a>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	7819      	ldrb	r1, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	400a      	ands	r2, r1
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	7819      	ldrb	r1, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e5a      	ldrb	r2, [r3, #25]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	430a      	orrs	r2, r1
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <StopBDC>:
 * Function Return		: None
 * Function Example		: StopBDC(&BDC1);
 */

void StopBDC(BDC_t* bdc)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
//	*(bdc-> speed) = 0;
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <StopBDC+0x1c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
 800155c:	e018      	b.n	8001590 <StopBDC+0x4e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b04      	cmp	r3, #4
 8001564:	d105      	bne.n	8001572 <StopBDC+0x30>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	6393      	str	r3, [r2, #56]	; 0x38
 8001570:	e00e      	b.n	8001590 <StopBDC+0x4e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2b08      	cmp	r3, #8
 8001578:	d105      	bne.n	8001586 <StopBDC+0x44>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001584:	e004      	b.n	8001590 <StopBDC+0x4e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	6413      	str	r3, [r2, #64]	; 0x40

	if(bdc->Dirpintype == GPIO){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d110      	bne.n	80015ba <StopBDC+0x78>

		HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6858      	ldr	r0, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	891b      	ldrh	r3, [r3, #8]
 80015a0:	2200      	movs	r2, #0
 80015a2:	4619      	mov	r1, r3
 80015a4:	f00f fc6e 	bl	8010e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68d8      	ldr	r0, [r3, #12]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	8a1b      	ldrh	r3, [r3, #16]
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	f00f fc66 	bl	8010e84 <HAL_GPIO_WritePin>
	}else if(bdc->Dirpintype == SHIFTREG){

		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
	}
}
 80015b8:	e01b      	b.n	80015f2 <StopBDC+0xb0>
	}else if(bdc->Dirpintype == SHIFTREG){
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d117      	bne.n	80015f2 <StopBDC+0xb0>
		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	7819      	ldrb	r1, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	400a      	ands	r2, r1
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
		bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	7819      	ldrb	r1, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e5b      	ldrb	r3, [r3, #25]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	400a      	ands	r2, r1
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b092      	sub	sp, #72	; 0x48
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	460b      	mov	r3, r1
 800160a:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <GPIOPinsInit+0x1cc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	f000 80af 	beq.w	8001784 <GPIOPinsInit+0x188>
 8001626:	4a68      	ldr	r2, [pc, #416]	; (80017c8 <GPIOPinsInit+0x1cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	f200 80ba 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800162e:	4a67      	ldr	r2, [pc, #412]	; (80017cc <GPIOPinsInit+0x1d0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	f000 8098 	beq.w	8001766 <GPIOPinsInit+0x16a>
 8001636:	4a65      	ldr	r2, [pc, #404]	; (80017cc <GPIOPinsInit+0x1d0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	f200 80b2 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800163e:	4a64      	ldr	r2, [pc, #400]	; (80017d0 <GPIOPinsInit+0x1d4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f000 8081 	beq.w	8001748 <GPIOPinsInit+0x14c>
 8001646:	4a62      	ldr	r2, [pc, #392]	; (80017d0 <GPIOPinsInit+0x1d4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	f200 80aa 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800164e:	4a61      	ldr	r2, [pc, #388]	; (80017d4 <GPIOPinsInit+0x1d8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d06a      	beq.n	800172a <GPIOPinsInit+0x12e>
 8001654:	4a5f      	ldr	r2, [pc, #380]	; (80017d4 <GPIOPinsInit+0x1d8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	f200 80a3 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800165c:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <GPIOPinsInit+0x1dc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d054      	beq.n	800170c <GPIOPinsInit+0x110>
 8001662:	4a5d      	ldr	r2, [pc, #372]	; (80017d8 <GPIOPinsInit+0x1dc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	f200 809c 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 800166a:	4a5c      	ldr	r2, [pc, #368]	; (80017dc <GPIOPinsInit+0x1e0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d03e      	beq.n	80016ee <GPIOPinsInit+0xf2>
 8001670:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <GPIOPinsInit+0x1e0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	f200 8095 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 8001678:	4a59      	ldr	r2, [pc, #356]	; (80017e0 <GPIOPinsInit+0x1e4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d028      	beq.n	80016d0 <GPIOPinsInit+0xd4>
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <GPIOPinsInit+0x1e4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	f200 808e 	bhi.w	80017a2 <GPIOPinsInit+0x1a6>
 8001686:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <GPIOPinsInit+0x1e8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d003      	beq.n	8001694 <GPIOPinsInit+0x98>
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <GPIOPinsInit+0x1ec>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00f      	beq.n	80016b2 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001692:	e086      	b.n	80017a2 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <GPIOPinsInit+0x1f0>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a53      	ldr	r2, [pc, #332]	; (80017ec <GPIOPinsInit+0x1f0>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
 80016ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80016b0:	e078      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80016ce:	e069      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80016ec:	e05a      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a3d      	ldr	r2, [pc, #244]	; (80017ec <GPIOPinsInit+0x1f0>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800170a:	e04b      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a35      	ldr	r2, [pc, #212]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <GPIOPinsInit+0x1f0>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	6a3b      	ldr	r3, [r7, #32]
	break;
 8001728:	e03c      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <GPIOPinsInit+0x1f0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
	break;
 8001746:	e02d      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <GPIOPinsInit+0x1f0>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <GPIOPinsInit+0x1f0>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
	break;
 8001764:	e01e      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <GPIOPinsInit+0x1f0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
	break;
 8001782:	e00f      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <GPIOPinsInit+0x1f0>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <GPIOPinsInit+0x1f0>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001792:	6313      	str	r3, [r2, #48]	; 0x30
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <GPIOPinsInit+0x1f0>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
	break;
 80017a0:	e000      	b.n	80017a4 <GPIOPinsInit+0x1a8>
	default: break;
 80017a2:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80017a4:	897b      	ldrh	r3, [r7, #10]
 80017a6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80017ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b8:	4619      	mov	r1, r3
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f00f f9ae 	bl	8010b1c <HAL_GPIO_Init>

}
 80017c0:	bf00      	nop
 80017c2:	3748      	adds	r7, #72	; 0x48
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40022000 	.word	0x40022000
 80017cc:	40021c00 	.word	0x40021c00
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40020c00 	.word	0x40020c00
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40023800 	.word	0x40023800

080017f0 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a52      	ldr	r2, [pc, #328]	; (8001960 <PWMTimeBaseInit+0x170>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d103      	bne.n	8001824 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a51      	ldr	r2, [pc, #324]	; (8001964 <PWMTimeBaseInit+0x174>)
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e057      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a50      	ldr	r2, [pc, #320]	; (8001968 <PWMTimeBaseInit+0x178>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d104      	bne.n	8001836 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e04e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4a4c      	ldr	r2, [pc, #304]	; (800196c <PWMTimeBaseInit+0x17c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d103      	bne.n	8001846 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <PWMTimeBaseInit+0x180>)
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e046      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <PWMTimeBaseInit+0x184>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d103      	bne.n	8001856 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <PWMTimeBaseInit+0x188>)
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e03e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <PWMTimeBaseInit+0x18c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d103      	bne.n	8001866 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <PWMTimeBaseInit+0x190>)
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e036      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <PWMTimeBaseInit+0x194>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d103      	bne.n	8001876 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <PWMTimeBaseInit+0x198>)
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e02e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4a44      	ldr	r2, [pc, #272]	; (800198c <PWMTimeBaseInit+0x19c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d103      	bne.n	8001886 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a43      	ldr	r2, [pc, #268]	; (8001990 <PWMTimeBaseInit+0x1a0>)
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e026      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4a42      	ldr	r2, [pc, #264]	; (8001994 <PWMTimeBaseInit+0x1a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d103      	bne.n	8001896 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4a41      	ldr	r2, [pc, #260]	; (8001998 <PWMTimeBaseInit+0x1a8>)
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e01e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a40      	ldr	r2, [pc, #256]	; (800199c <PWMTimeBaseInit+0x1ac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d103      	bne.n	80018a6 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <PWMTimeBaseInit+0x1b0>)
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e016      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <PWMTimeBaseInit+0x1b4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d103      	bne.n	80018b6 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <PWMTimeBaseInit+0x1b8>)
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e00e      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <PWMTimeBaseInit+0x1bc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d103      	bne.n	80018c6 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <PWMTimeBaseInit+0x1c0>)
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e006      	b.n	80018d4 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <PWMTimeBaseInit+0x1c4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d102      	bne.n	80018d4 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a39      	ldr	r2, [pc, #228]	; (80019b8 <PWMTimeBaseInit+0x1c8>)
 80018d2:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f011 fd5a 	bl	80133b0 <HAL_TIM_Base_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001902:	f002 ff1f 	bl	8004744 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4619      	mov	r1, r3
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f012 f8c0 	bl	8013a98 <HAL_TIM_ConfigClockSource>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 800191e:	f002 ff11 	bl	8004744 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f011 fdb7 	bl	8013496 <HAL_TIM_PWM_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 800192e:	f002 ff09 	bl	8004744 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	4619      	mov	r1, r3
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f012 fca5 	bl	8014290 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 800194c:	f002 fefa 	bl	8004744 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f011 fd58 	bl	8013406 <HAL_TIM_Base_Start>

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20005164 	.word	0x20005164
 8001964:	40010000 	.word	0x40010000
 8001968:	20005268 	.word	0x20005268
 800196c:	20004f7c 	.word	0x20004f7c
 8001970:	40000400 	.word	0x40000400
 8001974:	20004e78 	.word	0x20004e78
 8001978:	40000800 	.word	0x40000800
 800197c:	20004f3c 	.word	0x20004f3c
 8001980:	40000c00 	.word	0x40000c00
 8001984:	20004e38 	.word	0x20004e38
 8001988:	40010400 	.word	0x40010400
 800198c:	200051a4 	.word	0x200051a4
 8001990:	40014000 	.word	0x40014000
 8001994:	20004ef8 	.word	0x20004ef8
 8001998:	40014400 	.word	0x40014400
 800199c:	200050e0 	.word	0x200050e0
 80019a0:	40014800 	.word	0x40014800
 80019a4:	20005388 	.word	0x20005388
 80019a8:	40001800 	.word	0x40001800
 80019ac:	20005060 	.word	0x20005060
 80019b0:	40001c00 	.word	0x40001c00
 80019b4:	20005348 	.word	0x20005348
 80019b8:	40002000 	.word	0x40002000

080019bc <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09a      	sub	sp, #104	; 0x68
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019ee:	2370      	movs	r3, #112	; 0x70
 80019f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80019f6:	2302      	movs	r3, #2
 80019f8:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80019fa:	2308      	movs	r3, #8
 80019fc:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001a0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f011 ff7a 	bl	801390c <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001a1e:	f002 fe91 	bl	8004744 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a95      	ldr	r2, [pc, #596]	; (8001c7c <PWMChannelConfig+0x2c0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f000 80af 	beq.w	8001b8a <PWMChannelConfig+0x1ce>
 8001a2c:	4a93      	ldr	r2, [pc, #588]	; (8001c7c <PWMChannelConfig+0x2c0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	f200 80ba 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a34:	4a92      	ldr	r2, [pc, #584]	; (8001c80 <PWMChannelConfig+0x2c4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f000 8098 	beq.w	8001b6c <PWMChannelConfig+0x1b0>
 8001a3c:	4a90      	ldr	r2, [pc, #576]	; (8001c80 <PWMChannelConfig+0x2c4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	f200 80b2 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a44:	4a8f      	ldr	r2, [pc, #572]	; (8001c84 <PWMChannelConfig+0x2c8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f000 8081 	beq.w	8001b4e <PWMChannelConfig+0x192>
 8001a4c:	4a8d      	ldr	r2, [pc, #564]	; (8001c84 <PWMChannelConfig+0x2c8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f200 80aa 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a54:	4a8c      	ldr	r2, [pc, #560]	; (8001c88 <PWMChannelConfig+0x2cc>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d06a      	beq.n	8001b30 <PWMChannelConfig+0x174>
 8001a5a:	4a8b      	ldr	r2, [pc, #556]	; (8001c88 <PWMChannelConfig+0x2cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f200 80a3 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a62:	4a8a      	ldr	r2, [pc, #552]	; (8001c8c <PWMChannelConfig+0x2d0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d054      	beq.n	8001b12 <PWMChannelConfig+0x156>
 8001a68:	4a88      	ldr	r2, [pc, #544]	; (8001c8c <PWMChannelConfig+0x2d0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f200 809c 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a70:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <PWMChannelConfig+0x2d4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d03e      	beq.n	8001af4 <PWMChannelConfig+0x138>
 8001a76:	4a86      	ldr	r2, [pc, #536]	; (8001c90 <PWMChannelConfig+0x2d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	f200 8095 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a7e:	4a85      	ldr	r2, [pc, #532]	; (8001c94 <PWMChannelConfig+0x2d8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d028      	beq.n	8001ad6 <PWMChannelConfig+0x11a>
 8001a84:	4a83      	ldr	r2, [pc, #524]	; (8001c94 <PWMChannelConfig+0x2d8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f200 808e 	bhi.w	8001ba8 <PWMChannelConfig+0x1ec>
 8001a8c:	4a82      	ldr	r2, [pc, #520]	; (8001c98 <PWMChannelConfig+0x2dc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d003      	beq.n	8001a9a <PWMChannelConfig+0xde>
 8001a92:	4a82      	ldr	r2, [pc, #520]	; (8001c9c <PWMChannelConfig+0x2e0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00f      	beq.n	8001ab8 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 8001a98:	e086      	b.n	8001ba8 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9e:	4b80      	ldr	r3, [pc, #512]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a7f      	ldr	r2, [pc, #508]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 8001ab6:	e078      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
 8001abc:	4b78      	ldr	r3, [pc, #480]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac8:	4b75      	ldr	r3, [pc, #468]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 8001ad4:	e069      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	4b71      	ldr	r3, [pc, #452]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a70      	ldr	r2, [pc, #448]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b6e      	ldr	r3, [pc, #440]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 8001af2:	e05a      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a68      	ldr	r2, [pc, #416]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001b10:	e04b      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b1c:	f043 0310 	orr.w	r3, r3, #16
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001b2e:	e03c      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a59      	ldr	r2, [pc, #356]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	623b      	str	r3, [r7, #32]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001b4c:	e02d      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
		break;
 8001b6a:	e01e      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7c:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]
		break;
 8001b88:	e00f      	b.n	8001baa <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a43      	ldr	r2, [pc, #268]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <PWMChannelConfig+0x2e4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697b      	ldr	r3, [r7, #20]
		break;
 8001ba6:	e000      	b.n	8001baa <PWMChannelConfig+0x1ee>
		default: break;
 8001ba8:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <PWMChannelConfig+0x2e8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d102      	bne.n	8001bc8 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bc6:	e04b      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a37      	ldr	r2, [pc, #220]	; (8001ca8 <PWMChannelConfig+0x2ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d102      	bne.n	8001bd6 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bd4:	e044      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a34      	ldr	r2, [pc, #208]	; (8001cac <PWMChannelConfig+0x2f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d102      	bne.n	8001be4 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bde:	2302      	movs	r3, #2
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001be2:	e03d      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <PWMChannelConfig+0x2f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bf0:	e036      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <PWMChannelConfig+0x2f8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d102      	bne.n	8001c00 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bfe:	e02f      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <PWMChannelConfig+0x2fc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c0c:	e028      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <PWMChannelConfig+0x300>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d102      	bne.n	8001c1c <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c16:	2303      	movs	r3, #3
 8001c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c1a:	e021      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <PWMChannelConfig+0x304>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c24:	2303      	movs	r3, #3
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c28:	e01a      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <PWMChannelConfig+0x308>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c32:	2303      	movs	r3, #3
 8001c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c36:	e013      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <PWMChannelConfig+0x30c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d102      	bne.n	8001c46 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c40:	2309      	movs	r3, #9
 8001c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c44:	e00c      	b.n	8001c60 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <PWMChannelConfig+0x310>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d102      	bne.n	8001c54 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001c4e:	2309      	movs	r3, #9
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c52:	e005      	b.n	8001c60 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <PWMChannelConfig+0x314>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f00e ff58 	bl	8010b1c <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f011 fc3c 	bl	80134ec <HAL_TIM_PWM_Start>

}
 8001c74:	bf00      	nop
 8001c76:	3768      	adds	r7, #104	; 0x68
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40021400 	.word	0x40021400
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	20005164 	.word	0x20005164
 8001ca8:	20005268 	.word	0x20005268
 8001cac:	20004f7c 	.word	0x20004f7c
 8001cb0:	20004e78 	.word	0x20004e78
 8001cb4:	20004f3c 	.word	0x20004f3c
 8001cb8:	20004e38 	.word	0x20004e38
 8001cbc:	200051a4 	.word	0x200051a4
 8001cc0:	20004ef8 	.word	0x20004ef8
 8001cc4:	200050e0 	.word	0x200050e0
 8001cc8:	20005388 	.word	0x20005388
 8001ccc:	20005060 	.word	0x20005060
 8001cd0:	20005348 	.word	0x20005348

08001cd4 <QEIInit>:
 * 						  						subpriority, then the one comes first in the program will be executed first.
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx, uint16_t preemptionpriority,uint16_t subpriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08e      	sub	sp, #56	; 0x38
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	803b      	strh	r3, [r7, #0]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2224      	movs	r2, #36	; 0x24
 8001cea:	2100      	movs	r1, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f017 fea5 	bl	8019a3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a53      	ldr	r2, [pc, #332]	; (8001e4c <QEIInit+0x178>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d106      	bne.n	8001d12 <QEIInit+0x3e>
		htimx->Instance = TIM1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <QEIInit+0x17c>)
 8001d08:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001d0a:	2319      	movs	r3, #25
 8001d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d10:	e036      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim2)	{
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <QEIInit+0x180>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d107      	bne.n	8001d2a <QEIInit+0x56>
		htimx->Instance = TIM2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d20:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001d22:	231c      	movs	r3, #28
 8001d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d28:	e02a      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim3)	{
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <QEIInit+0x184>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d106      	bne.n	8001d40 <QEIInit+0x6c>
		htimx->Instance = TIM3;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <QEIInit+0x188>)
 8001d36:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001d38:	231d      	movs	r3, #29
 8001d3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d3e:	e01f      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim4)	{
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <QEIInit+0x18c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d106      	bne.n	8001d56 <QEIInit+0x82>
		htimx->Instance = TIM4;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <QEIInit+0x190>)
 8001d4c:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001d4e:	231e      	movs	r3, #30
 8001d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d54:	e014      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim5)	{
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a43      	ldr	r2, [pc, #268]	; (8001e68 <QEIInit+0x194>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d106      	bne.n	8001d6c <QEIInit+0x98>
		htimx->Instance = TIM5;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <QEIInit+0x198>)
 8001d62:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001d64:	2332      	movs	r3, #50	; 0x32
 8001d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d6a:	e009      	b.n	8001d80 <QEIInit+0xac>
	}
	else if(htimx == &htim8)	{
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <QEIInit+0x19c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d105      	bne.n	8001d80 <QEIInit+0xac>
		htimx->Instance = TIM8;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3f      	ldr	r2, [pc, #252]	; (8001e74 <QEIInit+0x1a0>)
 8001d78:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001d7a:	232c      	movs	r3, #44	; 0x2c
 8001d7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d92:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da6:	2303      	movs	r3, #3
 8001da8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f011 fbc9 	bl	8013568 <HAL_TIM_Encoder_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <QEIInit+0x10c>
	{
		Error_Handler();
 8001ddc:	f002 fcb2 	bl	8004744 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f012 fa4e 	bl	8014290 <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <QEIInit+0x12a>
	{
		Error_Handler();
 8001dfa:	f002 fca3 	bl	8004744 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0201 	mvn.w	r2, #1
 8001e06:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]

	HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 8001e18:	8879      	ldrh	r1, [r7, #2]
 8001e1a:	883a      	ldrh	r2, [r7, #0]
 8001e1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00e faa3 	bl	801036c <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(nvic);
 8001e26:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00e fac8 	bl	80103c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(nvic);
 8001e30:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00e fab5 	bl	80103a4 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001e3a:	213c      	movs	r1, #60	; 0x3c
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f011 fc25 	bl	801368c <HAL_TIM_Encoder_Start>
}
 8001e42:	bf00      	nop
 8001e44:	3738      	adds	r7, #56	; 0x38
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20005164 	.word	0x20005164
 8001e50:	40010000 	.word	0x40010000
 8001e54:	20005268 	.word	0x20005268
 8001e58:	20004f7c 	.word	0x20004f7c
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	20004e78 	.word	0x20004e78
 8001e64:	40000800 	.word	0x40000800
 8001e68:	20004f3c 	.word	0x20004f3c
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	20004e38 	.word	0x20004e38
 8001e74:	40010400 	.word	0x40010400

08001e78 <QEIWrite>:
 * Function Return		: None
 * Function Example		: QEIWrite(QEI1, 10000);
 */

void QEIWrite(QEI_TypeDef QEIx, int32_t value)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d840      	bhi.n	8001f0e <QEIWrite+0x96>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <QEIWrite+0x1c>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ebd 	.word	0x08001ebd
 8001e9c:	08001ecf 	.word	0x08001ecf
 8001ea0:	08001edf 	.word	0x08001edf
 8001ea4:	08001eef 	.word	0x08001eef
 8001ea8:	08001eff 	.word	0x08001eff

	case QEI1:	BIOS_QEI1.count = value;
 8001eac:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <QEIWrite+0xa4>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6013      	str	r3, [r2, #0]
	TIM1->CNT = BIOS_QEI1.poscnt;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <QEIWrite+0xa4>)
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <QEIWrite+0xa8>)
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001eba:	e028      	b.n	8001f0e <QEIWrite+0x96>

	case QEI2:	BIOS_QEI2.count = value;
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <QEIWrite+0xac>)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6013      	str	r3, [r2, #0]
	TIM2->CNT = BIOS_QEI2.poscnt;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <QEIWrite+0xac>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001ecc:	e01f      	b.n	8001f0e <QEIWrite+0x96>

	case QEI3:  BIOS_QEI3.count = value;
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <QEIWrite+0xb0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6013      	str	r3, [r2, #0]
	TIM3->CNT = BIOS_QEI3.poscnt;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <QEIWrite+0xb0>)
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <QEIWrite+0xb4>)
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001edc:	e017      	b.n	8001f0e <QEIWrite+0x96>

	case QEI4:  BIOS_QEI4.count = value;
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <QEIWrite+0xb8>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6013      	str	r3, [r2, #0]
	TIM4->CNT = BIOS_QEI4.poscnt;
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <QEIWrite+0xb8>)
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <QEIWrite+0xbc>)
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001eec:	e00f      	b.n	8001f0e <QEIWrite+0x96>

	case QEI5:	BIOS_QEI5.count = value;
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <QEIWrite+0xc0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6013      	str	r3, [r2, #0]
	TIM5->CNT = BIOS_QEI5.poscnt;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <QEIWrite+0xc0>)
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <QEIWrite+0xc4>)
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001efc:	e007      	b.n	8001f0e <QEIWrite+0x96>

	case QEI6:	BIOS_QEI6.count = value;
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <QEIWrite+0xc8>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6013      	str	r3, [r2, #0]
	TIM8->CNT = BIOS_QEI6.poscnt;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <QEIWrite+0xc8>)
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <QEIWrite+0xcc>)
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001f0c:	bf00      	nop

	}

}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20005664 	.word	0x20005664
 8001f20:	40010000 	.word	0x40010000
 8001f24:	20005668 	.word	0x20005668
 8001f28:	20005660 	.word	0x20005660
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	20005688 	.word	0x20005688
 8001f34:	40000800 	.word	0x40000800
 8001f38:	20005684 	.word	0x20005684
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	2000568c 	.word	0x2000568c
 8001f44:	40010400 	.word	0x40010400

08001f48 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d839      	bhi.n	8001fce <QEIReset+0x86>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <QEIReset+0x18>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f79 	.word	0x08001f79
 8001f64:	08001f87 	.word	0x08001f87
 8001f68:	08001f97 	.word	0x08001f97
 8001f6c:	08001fa5 	.word	0x08001fa5
 8001f70:	08001fb3 	.word	0x08001fb3
 8001f74:	08001fc1 	.word	0x08001fc1

	case QEI1:	TIM1->CNT = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <QEIReset+0x94>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <QEIReset+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
	break;
 8001f84:	e023      	b.n	8001fce <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <QEIReset+0x9c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
	break;
 8001f94:	e01b      	b.n	8001fce <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <QEIReset+0xa0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <QEIReset+0xa4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
	break;
 8001fa2:	e014      	b.n	8001fce <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <QEIReset+0xa8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <QEIReset+0xac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
	break;
 8001fb0:	e00d      	b.n	8001fce <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <QEIReset+0xb0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <QEIReset+0xb4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
	break;
 8001fbe:	e006      	b.n	8001fce <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <QEIReset+0xb8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <QEIReset+0xbc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
	break;
 8001fcc:	bf00      	nop

	}
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	20005664 	.word	0x20005664
 8001fe4:	20005668 	.word	0x20005668
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	20005660 	.word	0x20005660
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	20005688 	.word	0x20005688
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	20005684 	.word	0x20005684
 8002000:	40010400 	.word	0x40010400
 8002004:	2000568c 	.word	0x2000568c

08002008 <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	3b01      	subs	r3, #1
 800201c:	2b05      	cmp	r3, #5
 800201e:	f200 80f6 	bhi.w	800220e <QEISwap+0x206>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <QEISwap+0x20>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002041 	.word	0x08002041
 800202c:	0800208f 	.word	0x0800208f
 8002030:	080020dd 	.word	0x080020dd
 8002034:	0800212b 	.word	0x0800212b
 8002038:	08002177 	.word	0x08002177
 800203c:	080021c3 	.word	0x080021c3

	case QEI1:	if(swap == QEI_No_Swap){
 8002040:	79bb      	ldrb	r3, [r7, #6]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10e      	bne.n	8002064 <QEISwap+0x5c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002046:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <QEISwap+0x228>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	4b78      	ldr	r3, [pc, #480]	; (8002230 <QEISwap+0x228>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 020a 	bic.w	r2, r2, #10
 8002054:	621a      	str	r2, [r3, #32]
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <QEISwap+0x228>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b75      	ldr	r3, [pc, #468]	; (8002230 <QEISwap+0x228>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a12      	ldr	r2, [r2, #32]
 8002060:	621a      	str	r2, [r3, #32]
	default: break;

	}

	}
}
 8002062:	e0df      	b.n	8002224 <QEISwap+0x21c>
	else if(swap == QEI_Swap){
 8002064:	79bb      	ldrb	r3, [r7, #6]
 8002066:	2b01      	cmp	r3, #1
 8002068:	f040 80dc 	bne.w	8002224 <QEISwap+0x21c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 800206c:	4b70      	ldr	r3, [pc, #448]	; (8002230 <QEISwap+0x228>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <QEISwap+0x228>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 020a 	bic.w	r2, r2, #10
 800207a:	621a      	str	r2, [r3, #32]
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <QEISwap+0x228>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <QEISwap+0x228>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0202 	orr.w	r2, r2, #2
 800208a:	621a      	str	r2, [r3, #32]
		break;
 800208c:	e0ca      	b.n	8002224 <QEISwap+0x21c>
	case QEI2:	if(swap == QEI_No_Swap){
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10e      	bne.n	80020b2 <QEISwap+0xaa>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002094:	4b67      	ldr	r3, [pc, #412]	; (8002234 <QEISwap+0x22c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <QEISwap+0x22c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020a 	bic.w	r2, r2, #10
 80020a2:	621a      	str	r2, [r3, #32]
 80020a4:	4b63      	ldr	r3, [pc, #396]	; (8002234 <QEISwap+0x22c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b62      	ldr	r3, [pc, #392]	; (8002234 <QEISwap+0x22c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a12      	ldr	r2, [r2, #32]
 80020ae:	621a      	str	r2, [r3, #32]
	break;
 80020b0:	e0af      	b.n	8002212 <QEISwap+0x20a>
	else if(swap == QEI_Swap){
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 80ac 	bne.w	8002212 <QEISwap+0x20a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <QEISwap+0x22c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <QEISwap+0x22c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 020a 	bic.w	r2, r2, #10
 80020c8:	621a      	str	r2, [r3, #32]
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <QEISwap+0x22c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <QEISwap+0x22c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0202 	orr.w	r2, r2, #2
 80020d8:	621a      	str	r2, [r3, #32]
	break;
 80020da:	e09a      	b.n	8002212 <QEISwap+0x20a>
	case QEI3:	if(swap == QEI_No_Swap){
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <QEISwap+0xf8>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 80020e2:	4b55      	ldr	r3, [pc, #340]	; (8002238 <QEISwap+0x230>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <QEISwap+0x230>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020a 	bic.w	r2, r2, #10
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	4b51      	ldr	r3, [pc, #324]	; (8002238 <QEISwap+0x230>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <QEISwap+0x230>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a12      	ldr	r2, [r2, #32]
 80020fc:	621a      	str	r2, [r3, #32]
	break;
 80020fe:	e08a      	b.n	8002216 <QEISwap+0x20e>
	else if(swap == QEI_Swap){
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 8087 	bne.w	8002216 <QEISwap+0x20e>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <QEISwap+0x230>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <QEISwap+0x230>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020a 	bic.w	r2, r2, #10
 8002116:	621a      	str	r2, [r3, #32]
 8002118:	4b47      	ldr	r3, [pc, #284]	; (8002238 <QEISwap+0x230>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <QEISwap+0x230>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0202 	orr.w	r2, r2, #2
 8002126:	621a      	str	r2, [r3, #32]
	break;
 8002128:	e075      	b.n	8002216 <QEISwap+0x20e>
	case QEI4:	if(swap == QEI_No_Swap){
 800212a:	79bb      	ldrb	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <QEISwap+0x146>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <QEISwap+0x234>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <QEISwap+0x234>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 020a 	bic.w	r2, r2, #10
 800213e:	621a      	str	r2, [r3, #32]
 8002140:	4b3e      	ldr	r3, [pc, #248]	; (800223c <QEISwap+0x234>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <QEISwap+0x234>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a12      	ldr	r2, [r2, #32]
 800214a:	621a      	str	r2, [r3, #32]
	break;
 800214c:	e065      	b.n	800221a <QEISwap+0x212>
	else if(swap == QEI_Swap){
 800214e:	79bb      	ldrb	r3, [r7, #6]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d162      	bne.n	800221a <QEISwap+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <QEISwap+0x234>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a1a      	ldr	r2, [r3, #32]
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <QEISwap+0x234>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020a 	bic.w	r2, r2, #10
 8002162:	621a      	str	r2, [r3, #32]
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <QEISwap+0x234>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <QEISwap+0x234>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0202 	orr.w	r2, r2, #2
 8002172:	621a      	str	r2, [r3, #32]
	break;
 8002174:	e051      	b.n	800221a <QEISwap+0x212>
	case QEI5:	if(swap == QEI_No_Swap){
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10e      	bne.n	800219a <QEISwap+0x192>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <QEISwap+0x238>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <QEISwap+0x238>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 020a 	bic.w	r2, r2, #10
 800218a:	621a      	str	r2, [r3, #32]
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <QEISwap+0x238>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <QEISwap+0x238>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a12      	ldr	r2, [r2, #32]
 8002196:	621a      	str	r2, [r3, #32]
	break;
 8002198:	e041      	b.n	800221e <QEISwap+0x216>
	else if(swap == QEI_Swap){
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d13e      	bne.n	800221e <QEISwap+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <QEISwap+0x238>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a1a      	ldr	r2, [r3, #32]
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <QEISwap+0x238>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020a 	bic.w	r2, r2, #10
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <QEISwap+0x238>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <QEISwap+0x238>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0202 	orr.w	r2, r2, #2
 80021be:	621a      	str	r2, [r3, #32]
	break;
 80021c0:	e02d      	b.n	800221e <QEISwap+0x216>
	case QEI6:	if(swap == QEI_No_Swap){
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10e      	bne.n	80021e6 <QEISwap+0x1de>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <QEISwap+0x23c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <QEISwap+0x23c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 020a 	bic.w	r2, r2, #10
 80021d6:	621a      	str	r2, [r3, #32]
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <QEISwap+0x23c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <QEISwap+0x23c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a12      	ldr	r2, [r2, #32]
 80021e2:	621a      	str	r2, [r3, #32]
	break;
 80021e4:	e01d      	b.n	8002222 <QEISwap+0x21a>
	else if(swap == QEI_Swap){
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11a      	bne.n	8002222 <QEISwap+0x21a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <QEISwap+0x23c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <QEISwap+0x23c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 020a 	bic.w	r2, r2, #10
 80021fa:	621a      	str	r2, [r3, #32]
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <QEISwap+0x23c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <QEISwap+0x23c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0202 	orr.w	r2, r2, #2
 800220a:	621a      	str	r2, [r3, #32]
	break;
 800220c:	e009      	b.n	8002222 <QEISwap+0x21a>
	default: break;
 800220e:	bf00      	nop
 8002210:	e008      	b.n	8002224 <QEISwap+0x21c>
	break;
 8002212:	bf00      	nop
 8002214:	e006      	b.n	8002224 <QEISwap+0x21c>
	break;
 8002216:	bf00      	nop
 8002218:	e004      	b.n	8002224 <QEISwap+0x21c>
	break;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <QEISwap+0x21c>
	break;
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <QEISwap+0x21c>
	break;
 8002222:	bf00      	nop
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	20005164 	.word	0x20005164
 8002234:	20005268 	.word	0x20005268
 8002238:	20004f7c 	.word	0x20004f7c
 800223c:	20004e78 	.word	0x20004e78
 8002240:	20004f3c 	.word	0x20004f3c
 8002244:	20004e38 	.word	0x20004e38

08002248 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	461a      	mov	r2, r3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 800225e:	e002      	b.n	8002266 <QEIDelay+0x1e>
	{
		currentvalues++;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	3301      	adds	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d3f8      	bcc.n	8002260 <QEIDelay+0x18>
	}
	currentvalues = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	3b01      	subs	r3, #1
 800228e:	2b05      	cmp	r3, #5
 8002290:	d845      	bhi.n	800231e <QEIRead+0x9e>
 8002292:	a201      	add	r2, pc, #4	; (adr r2, 8002298 <QEIRead+0x18>)
 8002294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002298:	080022b1 	.word	0x080022b1
 800229c:	080022c3 	.word	0x080022c3
 80022a0:	080022d7 	.word	0x080022d7
 80022a4:	080022e9 	.word	0x080022e9
 80022a8:	080022fb 	.word	0x080022fb
 80022ac:	0800230d 	.word	0x0800230d

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <QEIRead+0xb0>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <QEIRead+0xb4>)
 80022b8:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <QEIRead+0xb4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
	break;
 80022c0:	e02e      	b.n	8002320 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 80022c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <QEIRead+0xb8>)
 80022cc:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <QEIRead+0xb8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
	break;
 80022d4:	e024      	b.n	8002320 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <QEIRead+0xbc>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <QEIRead+0xc0>)
 80022de:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <QEIRead+0xc0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
	break;
 80022e6:	e01b      	b.n	8002320 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <QEIRead+0xc4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <QEIRead+0xc8>)
 80022f0:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <QEIRead+0xc8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]
	break;
 80022f8:	e012      	b.n	8002320 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <QEIRead+0xcc>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <QEIRead+0xd0>)
 8002302:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <QEIRead+0xd0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
	break;
 800230a:	e009      	b.n	8002320 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <QEIRead+0xd4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <QEIRead+0xd8>)
 8002314:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <QEIRead+0xd8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
	break;
 800231c:	e000      	b.n	8002320 <QEIRead+0xa0>

	default: break;
 800231e:	bf00      	nop
	}

	return value;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	20005664 	.word	0x20005664
 8002338:	20005668 	.word	0x20005668
 800233c:	40000400 	.word	0x40000400
 8002340:	20005660 	.word	0x20005660
 8002344:	40000800 	.word	0x40000800
 8002348:	20005688 	.word	0x20005688
 800234c:	40000c00 	.word	0x40000c00
 8002350:	20005684 	.word	0x20005684
 8002354:	40010400 	.word	0x40010400
 8002358:	2000568c 	.word	0x2000568c

0800235c <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	460b      	mov	r3, r1
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	4613      	mov	r3, r2
 800236e:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	7afa      	ldrb	r2, [r7, #11]
 8002374:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8bba      	ldrh	r2, [r7, #28]
 800238c:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002398:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8899      	ldrh	r1, [r3, #4]
 80023a2:	2301      	movs	r3, #1
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2302      	movs	r3, #2
 80023a8:	2201      	movs	r2, #1
 80023aa:	f7ff f927 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6898      	ldr	r0, [r3, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8999      	ldrh	r1, [r3, #12]
 80023b6:	2301      	movs	r3, #1
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2302      	movs	r3, #2
 80023bc:	2201      	movs	r2, #1
 80023be:	f7ff f91d 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6918      	ldr	r0, [r3, #16]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8a99      	ldrh	r1, [r3, #20]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2302      	movs	r3, #2
 80023d0:	2201      	movs	r2, #1
 80023d2:	f7ff f913 	bl	80015fc <GPIOPinsInit>

}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7d9b      	ldrb	r3, [r3, #22]
 80023ea:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	889b      	ldrh	r3, [r3, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	f00e fd44 	bl	8010e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6898      	ldr	r0, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	899b      	ldrh	r3, [r3, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	f00e fd3c 	bl	8010e84 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 800240c:	7bba      	ldrb	r2, [r7, #14]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3206      	adds	r2, #6
 8002412:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002416:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8002418:	2308      	movs	r3, #8
 800241a:	737b      	strb	r3, [r7, #13]
 800241c:	e02a      	b.n	8002474 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da08      	bge.n	8002438 <SHIFTREGShift+0x5a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6918      	ldr	r0, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8a9b      	ldrh	r3, [r3, #20]
 800242e:	2201      	movs	r2, #1
 8002430:	4619      	mov	r1, r3
 8002432:	f00e fd27 	bl	8010e84 <HAL_GPIO_WritePin>
 8002436:	e007      	b.n	8002448 <SHIFTREGShift+0x6a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6918      	ldr	r0, [r3, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8a9b      	ldrh	r3, [r3, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	f00e fd1e 	bl	8010e84 <HAL_GPIO_WritePin>
			out <<= 1;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	4619      	mov	r1, r3
 800245a:	f00e fd13 	bl	8010e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	4619      	mov	r1, r3
 800246a:	f00e fd0b 	bl	8010e84 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 800246e:	7b7b      	ldrb	r3, [r7, #13]
 8002470:	3b01      	subs	r3, #1
 8002472:	737b      	strb	r3, [r7, #13]
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1d1      	bne.n	800241e <SHIFTREGShift+0x40>
		}
	}while(i--);
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	73ba      	strb	r2, [r7, #14]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1c3      	bne.n	800240c <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6898      	ldr	r0, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	899b      	ldrh	r3, [r3, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	4619      	mov	r1, r3
 8002490:	f00e fcf8 	bl	8010e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6898      	ldr	r0, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	899b      	ldrh	r3, [r3, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	4619      	mov	r1, r3
 80024a0:	f00e fcf0 	bl	8010e84 <HAL_GPIO_WritePin>

}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_MspInit+0x54>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a11      	ldr	r2, [pc, #68]	; (8002500 <HAL_MspInit+0x54>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_MspInit+0x54>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_MspInit+0x54>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_MspInit+0x54>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_MspInit+0x54>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	210f      	movs	r1, #15
 80024ee:	f06f 0001 	mvn.w	r0, #1
 80024f2:	f00d ff3b 	bl	801036c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a42      	ldr	r2, [pc, #264]	; (800262c <HAL_CAN_MspInit+0x128>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d135      	bne.n	8002592 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002526:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a40      	ldr	r2, [pc, #256]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 800252e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10d      	bne.n	8002554 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <HAL_CAN_MspInit+0x130>)
 8002542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002546:	6413      	str	r3, [r2, #64]	; 0x40
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a35      	ldr	r2, [pc, #212]	; (8002634 <HAL_CAN_MspInit+0x130>)
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <HAL_CAN_MspInit+0x130>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002570:	2303      	movs	r3, #3
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002580:	2309      	movs	r3, #9
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	482b      	ldr	r0, [pc, #172]	; (8002638 <HAL_CAN_MspInit+0x134>)
 800258c:	f00e fac6 	bl	8010b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002590:	e048      	b.n	8002624 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_CAN_MspInit+0x138>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d143      	bne.n	8002624 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 80025c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_CAN_MspInit+0x12c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10d      	bne.n	80025e6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_CAN_MspInit+0x130>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002602:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002614:	2309      	movs	r3, #9
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4619      	mov	r1, r3
 800261e:	4808      	ldr	r0, [pc, #32]	; (8002640 <HAL_CAN_MspInit+0x13c>)
 8002620:	f00e fa7c 	bl	8010b1c <HAL_GPIO_Init>
}
 8002624:	bf00      	nop
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40006400 	.word	0x40006400
 8002630:	20000478 	.word	0x20000478
 8002634:	40023800 	.word	0x40023800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40006800 	.word	0x40006800
 8002640:	40020400 	.word	0x40020400

08002644 <HAL_TIM_PWM_MspInit>:

}


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002644:	b480      	push	{r7}
 8002646:	b091      	sub	sp, #68	; 0x44
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8d      	ldr	r2, [pc, #564]	; (8002888 <HAL_TIM_PWM_MspInit+0x244>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265a:	4b8c      	ldr	r3, [pc, #560]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a8b      	ldr	r2, [pc, #556]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b89      	ldr	r3, [pc, #548]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8002672:	e102      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267c:	d10e      	bne.n	800269c <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
 8002682:	4b82      	ldr	r3, [pc, #520]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a81      	ldr	r2, [pc, #516]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	63bb      	str	r3, [r7, #56]	; 0x38
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800269a:	e0ee      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7b      	ldr	r2, [pc, #492]	; (8002890 <HAL_TIM_PWM_MspInit+0x24c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
 80026aa:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026c2:	e0da      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a72      	ldr	r2, [pc, #456]	; (8002894 <HAL_TIM_PWM_MspInit+0x250>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b6b      	ldr	r3, [pc, #428]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026ea:	e0c6      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a69      	ldr	r2, [pc, #420]	; (8002898 <HAL_TIM_PWM_MspInit+0x254>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002712:	e0b2      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a60      	ldr	r2, [pc, #384]	; (800289c <HAL_TIM_PWM_MspInit+0x258>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10e      	bne.n	800273c <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a59      	ldr	r2, [pc, #356]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b57      	ldr	r3, [pc, #348]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800273a:	e09e      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a57      	ldr	r2, [pc, #348]	; (80028a0 <HAL_TIM_PWM_MspInit+0x25c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
 800274a:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a4f      	ldr	r2, [pc, #316]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002750:	f043 0320 	orr.w	r3, r3, #32
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b4d      	ldr	r3, [pc, #308]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002762:	e08a      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_TIM_PWM_MspInit+0x260>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10e      	bne.n	800278c <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a45      	ldr	r2, [pc, #276]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	6a3b      	ldr	r3, [r7, #32]
}
 800278a:	e076      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_TIM_PWM_MspInit+0x264>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
}
 80027b2:	e062      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <HAL_TIM_PWM_MspInit+0x268>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]
}
 80027da:	e04e      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a33      	ldr	r2, [pc, #204]	; (80028b0 <HAL_TIM_PWM_MspInit+0x26c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	4a27      	ldr	r2, [pc, #156]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6453      	str	r3, [r2, #68]	; 0x44
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
}
 8002802:	e03a      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2a      	ldr	r2, [pc, #168]	; (80028b4 <HAL_TIM_PWM_MspInit+0x270>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10e      	bne.n	800282c <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]
}
 800282a:	e026      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_TIM_PWM_MspInit+0x274>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10e      	bne.n	8002854 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	e012      	b.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_TIM_PWM_MspInit+0x278>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10d      	bne.n	800287a <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_TIM_PWM_MspInit+0x248>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
}
 800287a:	bf00      	nop
 800287c:	3744      	adds	r7, #68	; 0x44
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40023800 	.word	0x40023800
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40001000 	.word	0x40001000
 80028a0:	40001400 	.word	0x40001400
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800
 80028b4:	40001800 	.word	0x40001800
 80028b8:	40001c00 	.word	0x40001c00
 80028bc:	40002000 	.word	0x40002000

080028c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b091      	sub	sp, #68	; 0x44
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a8d      	ldr	r2, [pc, #564]	; (8002b04 <HAL_TIM_Base_MspInit+0x244>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d6:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a8b      	ldr	r2, [pc, #556]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80028ee:	e102      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d10e      	bne.n	8002918 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a81      	ldr	r2, [pc, #516]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b7f      	ldr	r3, [pc, #508]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002916:	e0ee      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7b      	ldr	r2, [pc, #492]	; (8002b0c <HAL_TIM_Base_MspInit+0x24c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	4b78      	ldr	r3, [pc, #480]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a77      	ldr	r2, [pc, #476]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800293e:	e0da      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_TIM_Base_MspInit+0x250>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a6d      	ldr	r2, [pc, #436]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b6b      	ldr	r3, [pc, #428]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002966:	e0c6      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a69      	ldr	r2, [pc, #420]	; (8002b14 <HAL_TIM_Base_MspInit+0x254>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a63      	ldr	r2, [pc, #396]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800298e:	e0b2      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a60      	ldr	r2, [pc, #384]	; (8002b18 <HAL_TIM_Base_MspInit+0x258>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80029b6:	e09e      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_TIM_Base_MspInit+0x25c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029de:	e08a      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_TIM_Base_MspInit+0x260>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10e      	bne.n	8002a08 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	4b46      	ldr	r3, [pc, #280]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a45      	ldr	r2, [pc, #276]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
}
 8002a06:	e076      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_TIM_Base_MspInit+0x264>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	4b3c      	ldr	r3, [pc, #240]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
}
 8002a2e:	e062      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_TIM_Base_MspInit+0x268>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	69bb      	ldr	r3, [r7, #24]
}
 8002a56:	e04e      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	; (8002b2c <HAL_TIM_Base_MspInit+0x26c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
}
 8002a7e:	e03a      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <HAL_TIM_Base_MspInit+0x270>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
}
 8002aa6:	e026      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_TIM_Base_MspInit+0x274>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	e012      	b.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_TIM_Base_MspInit+0x278>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10d      	bne.n	8002af6 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_TIM_Base_MspInit+0x248>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
}
 8002af6:	bf00      	nop
 8002af8:	3744      	adds	r7, #68	; 0x44
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40001000 	.word	0x40001000
 8002b1c:	40001400 	.word	0x40001400
 8002b20:	40010400 	.word	0x40010400
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	40001800 	.word	0x40001800
 8002b34:	40001c00 	.word	0x40001c00
 8002b38:	40002000 	.word	0x40002000

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b094      	sub	sp, #80	; 0x50
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a8c      	ldr	r2, [pc, #560]	; (8002d8c <HAL_UART_MspInit+0x250>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d12d      	bne.n	8002bba <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b68:	f043 0310 	orr.w	r3, r3, #16
 8002b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b7e:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4878      	ldr	r0, [pc, #480]	; (8002d94 <HAL_UART_MspInit+0x258>)
 8002bb4:	f00d ffb2 	bl	8010b1c <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002bb8:	e12b      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <HAL_UART_MspInit+0x25c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d12c      	bne.n	8002c1e <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc8:	4b71      	ldr	r3, [pc, #452]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	4a70      	ldr	r2, [pc, #448]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd4:	4b6e      	ldr	r3, [pc, #440]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be4:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	4a69      	ldr	r2, [pc, #420]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf0:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bfc:	2360      	movs	r3, #96	; 0x60
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c0c:	2307      	movs	r3, #7
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c14:	4619      	mov	r1, r3
 8002c16:	4861      	ldr	r0, [pc, #388]	; (8002d9c <HAL_UART_MspInit+0x260>)
 8002c18:	f00d ff80 	bl	8010b1c <HAL_GPIO_Init>
}
 8002c1c:	e0f9      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5f      	ldr	r2, [pc, #380]	; (8002da0 <HAL_UART_MspInit+0x264>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d12d      	bne.n	8002c84 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c2c:	4b58      	ldr	r3, [pc, #352]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	4a57      	ldr	r2, [pc, #348]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c36:	6413      	str	r3, [r2, #64]	; 0x40
 8002c38:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
 8002c48:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c4e:	f043 0308 	orr.w	r3, r3, #8
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c72:	2307      	movs	r3, #7
 8002c74:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4847      	ldr	r0, [pc, #284]	; (8002d9c <HAL_UART_MspInit+0x260>)
 8002c7e:	f00d ff4d 	bl	8010b1c <HAL_GPIO_Init>
}
 8002c82:	e0c6      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a46      	ldr	r2, [pc, #280]	; (8002da4 <HAL_UART_MspInit+0x268>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12d      	bne.n	8002cea <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002c98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a37      	ldr	r2, [pc, #220]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cc6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cd8:	2308      	movs	r3, #8
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4831      	ldr	r0, [pc, #196]	; (8002da8 <HAL_UART_MspInit+0x26c>)
 8002ce4:	f00d ff1a 	bl	8010b1c <HAL_GPIO_Init>
}
 8002ce8:	e093      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <HAL_UART_MspInit+0x270>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d15d      	bne.n	8002db0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	4a24      	ldr	r2, [pc, #144]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	6413      	str	r3, [r2, #64]	; 0x40
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d36:	f043 0308 	orr.w	r3, r3, #8
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_UART_MspInit+0x254>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d62:	4619      	mov	r1, r3
 8002d64:	4810      	ldr	r0, [pc, #64]	; (8002da8 <HAL_UART_MspInit+0x26c>)
 8002d66:	f00d fed9 	bl	8010b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d82:	4619      	mov	r1, r3
 8002d84:	4805      	ldr	r0, [pc, #20]	; (8002d9c <HAL_UART_MspInit+0x260>)
 8002d86:	f00d fec9 	bl	8010b1c <HAL_GPIO_Init>
}
 8002d8a:	e042      	b.n	8002e12 <HAL_UART_MspInit+0x2d6>
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40004400 	.word	0x40004400
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40004c00 	.word	0x40004c00
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <HAL_UART_MspInit+0x2e0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d12b      	bne.n	8002e12 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002dc4:	f043 0320 	orr.w	r3, r3, #32
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_UART_MspInit+0x2e4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002df2:	23c0      	movs	r3, #192	; 0xc0
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e02:	2308      	movs	r3, #8
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <HAL_UART_MspInit+0x2e8>)
 8002e0e:	f00d fe85 	bl	8010b1c <HAL_GPIO_Init>
}
 8002e12:	bf00      	nop
 8002e14:	3750      	adds	r7, #80	; 0x50
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40011400 	.word	0x40011400
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020800 	.word	0x40020800

08002e28 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b094      	sub	sp, #80	; 0x50
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a8c      	ldr	r2, [pc, #560]	; (8003078 <HAL_TIM_Encoder_MspInit+0x250>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12d      	bne.n	8002ea6 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6a:	4b84      	ldr	r3, [pc, #528]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a83      	ldr	r2, [pc, #524]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002e82:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e94:	2301      	movs	r3, #1
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4878      	ldr	r0, [pc, #480]	; (8003080 <HAL_TIM_Encoder_MspInit+0x258>)
 8002ea0:	f00d fe3c 	bl	8010b1c <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002ea4:	e12b      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d14b      	bne.n	8002f48 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb4:	4b71      	ldr	r3, [pc, #452]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a70      	ldr	r2, [pc, #448]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec0:	4b6e      	ldr	r3, [pc, #440]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a69      	ldr	r2, [pc, #420]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eec:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4a62      	ldr	r2, [pc, #392]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef8:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f16:	2301      	movs	r3, #1
 8002f18:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4858      	ldr	r0, [pc, #352]	; (8003084 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002f22:	f00d fdfb 	bl	8010b1c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f26:	2308      	movs	r3, #8
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f36:	2301      	movs	r3, #1
 8002f38:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4851      	ldr	r0, [pc, #324]	; (8003088 <HAL_TIM_Encoder_MspInit+0x260>)
 8002f42:	f00d fdeb 	bl	8010b1c <HAL_GPIO_Init>
}
 8002f46:	e0da      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	; (800308c <HAL_TIM_Encoder_MspInit+0x264>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12c      	bne.n	8002fac <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	4b49      	ldr	r3, [pc, #292]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a48      	ldr	r2, [pc, #288]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f8a:	23c0      	movs	r3, #192	; 0xc0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4837      	ldr	r0, [pc, #220]	; (8003084 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002fa6:	f00d fdb9 	bl	8010b1c <HAL_GPIO_Init>
}
 8002faa:	e0a8      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a37      	ldr	r2, [pc, #220]	; (8003090 <HAL_TIM_Encoder_MspInit+0x268>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d12d      	bne.n	8003012 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002fee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003000:	2302      	movs	r3, #2
 8003002:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003008:	4619      	mov	r1, r3
 800300a:	4822      	ldr	r0, [pc, #136]	; (8003094 <HAL_TIM_Encoder_MspInit+0x26c>)
 800300c:	f00d fd86 	bl	8010b1c <HAL_GPIO_Init>
}
 8003010:	e075      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_TIM_Encoder_MspInit+0x270>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d13f      	bne.n	800309c <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a0e      	ldr	r2, [pc, #56]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_TIM_Encoder_MspInit+0x254>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003054:	2303      	movs	r3, #3
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003064:	2302      	movs	r3, #2
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800306c:	4619      	mov	r1, r3
 800306e:	4805      	ldr	r0, [pc, #20]	; (8003084 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003070:	f00d fd54 	bl	8010b1c <HAL_GPIO_Init>
}
 8003074:	e043      	b.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40023800 	.word	0x40023800
 8003080:	40021000 	.word	0x40021000
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d12b      	bne.n	80030fe <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030ee:	2303      	movs	r3, #3
 80030f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030f6:	4619      	mov	r1, r3
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <HAL_TIM_Encoder_MspInit+0x2e8>)
 80030fa:	f00d fd0f 	bl	8010b1c <HAL_GPIO_Init>
}
 80030fe:	bf00      	nop
 8003100:	3750      	adds	r7, #80	; 0x50
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40010400 	.word	0x40010400
 800310c:	40023800 	.word	0x40023800
 8003110:	40020800 	.word	0x40020800

08003114 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b094      	sub	sp, #80	; 0x50
 8003118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800311a:	f107 0320 	add.w	r3, r7, #32
 800311e:	2230      	movs	r2, #48	; 0x30
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f016 fc8a 	bl	8019a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <SystemClock_Config+0xd0>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <SystemClock_Config+0xd0>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6413      	str	r3, [r2, #64]	; 0x40
 8003148:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <SystemClock_Config+0xd0>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <SystemClock_Config+0xd4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <SystemClock_Config+0xd4>)
 800315e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <SystemClock_Config+0xd4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003170:	2301      	movs	r3, #1
 8003172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317a:	2302      	movs	r3, #2
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800317e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003184:	2308      	movs	r3, #8
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003188:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800318e:	2302      	movs	r3, #2
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003192:	2304      	movs	r3, #4
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003196:	f107 0320 	add.w	r3, r7, #32
 800319a:	4618      	mov	r0, r3
 800319c:	f00f fb40 	bl	8012820 <HAL_RCC_OscConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80031a6:	f001 facd 	bl	8004744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031aa:	230f      	movs	r3, #15
 80031ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ae:	2302      	movs	r3, #2
 80031b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	2105      	movs	r1, #5
 80031c8:	4618      	mov	r0, r3
 80031ca:	f00f fd99 	bl	8012d00 <HAL_RCC_ClockConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80031d4:	f001 fab6 	bl	8004744 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80031d8:	f00f fe78 	bl	8012ecc <HAL_RCC_EnableCSS>
}
 80031dc:	bf00      	nop
 80031de:	3750      	adds	r7, #80	; 0x50
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40007000 	.word	0x40007000

080031ec <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84, 2, 0);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84, 2, 1); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler,uint16_t preemptionpriority,uint16_t subpriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
  int nvic = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]

  if(htimx == &htim1){
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a62      	ldr	r2, [pc, #392]	; (80033a0 <TIMxInit+0x1b4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d105      	bne.n	8003228 <TIMxInit+0x3c>
  		htimx->Instance = TIM1;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <TIMxInit+0x1b8>)
 8003220:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_UP_TIM10_IRQn;
 8003222:	2319      	movs	r3, #25
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e081      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim2)	{
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <TIMxInit+0x1bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d106      	bne.n	800323e <TIMxInit+0x52>
  		htimx->Instance = TIM2;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003236:	601a      	str	r2, [r3, #0]
  		nvic = TIM2_IRQn;
 8003238:	231c      	movs	r3, #28
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e076      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim3)	{
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a5a      	ldr	r2, [pc, #360]	; (80033ac <TIMxInit+0x1c0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d105      	bne.n	8003252 <TIMxInit+0x66>
  		htimx->Instance = TIM3;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a59      	ldr	r2, [pc, #356]	; (80033b0 <TIMxInit+0x1c4>)
 800324a:	601a      	str	r2, [r3, #0]
  		nvic = TIM3_IRQn;
 800324c:	231d      	movs	r3, #29
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	e06c      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim4)	{
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <TIMxInit+0x1c8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d105      	bne.n	8003266 <TIMxInit+0x7a>
  		htimx->Instance = TIM4;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <TIMxInit+0x1cc>)
 800325e:	601a      	str	r2, [r3, #0]
  		nvic = TIM4_IRQn;
 8003260:	231e      	movs	r3, #30
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	e062      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim5)	{
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4a54      	ldr	r2, [pc, #336]	; (80033bc <TIMxInit+0x1d0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d105      	bne.n	800327a <TIMxInit+0x8e>
  		htimx->Instance = TIM5;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a53      	ldr	r2, [pc, #332]	; (80033c0 <TIMxInit+0x1d4>)
 8003272:	601a      	str	r2, [r3, #0]
  		nvic = TIM5_IRQn;
 8003274:	2332      	movs	r3, #50	; 0x32
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e058      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim6)	{
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <TIMxInit+0x1d8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d105      	bne.n	800328e <TIMxInit+0xa2>
  		htimx->Instance = TIM6;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <TIMxInit+0x1dc>)
 8003286:	601a      	str	r2, [r3, #0]
  		nvic = TIM6_DAC_IRQn;
 8003288:	2336      	movs	r3, #54	; 0x36
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	e04e      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim7)	{
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a4e      	ldr	r2, [pc, #312]	; (80033cc <TIMxInit+0x1e0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d105      	bne.n	80032a2 <TIMxInit+0xb6>
  		htimx->Instance = TIM7;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a4d      	ldr	r2, [pc, #308]	; (80033d0 <TIMxInit+0x1e4>)
 800329a:	601a      	str	r2, [r3, #0]
  		nvic = TIM7_IRQn;
 800329c:	2337      	movs	r3, #55	; 0x37
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e044      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim8)	{
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <TIMxInit+0x1e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d105      	bne.n	80032b6 <TIMxInit+0xca>
  		htimx->Instance = TIM8;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <TIMxInit+0x1ec>)
 80032ae:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_CC_IRQn;
 80032b0:	232e      	movs	r3, #46	; 0x2e
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e03a      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim9)	{
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <TIMxInit+0x1f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d105      	bne.n	80032ca <TIMxInit+0xde>
  		htimx->Instance = TIM9;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <TIMxInit+0x1f4>)
 80032c2:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_BRK_TIM9_IRQn;
 80032c4:	2318      	movs	r3, #24
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	e030      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim10)	{
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a45      	ldr	r2, [pc, #276]	; (80033e4 <TIMxInit+0x1f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d105      	bne.n	80032de <TIMxInit+0xf2>
  		htimx->Instance = TIM10;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a44      	ldr	r2, [pc, #272]	; (80033e8 <TIMxInit+0x1fc>)
 80032d6:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_UP_TIM10_IRQn;
 80032d8:	2319      	movs	r3, #25
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e026      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim11)	{
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a42      	ldr	r2, [pc, #264]	; (80033ec <TIMxInit+0x200>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d105      	bne.n	80032f2 <TIMxInit+0x106>
  		htimx->Instance = TIM11;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a41      	ldr	r2, [pc, #260]	; (80033f0 <TIMxInit+0x204>)
 80032ea:	601a      	str	r2, [r3, #0]
  		nvic = TIM1_TRG_COM_TIM11_IRQn;
 80032ec:	231a      	movs	r3, #26
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	e01c      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim12)	{
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a3f      	ldr	r2, [pc, #252]	; (80033f4 <TIMxInit+0x208>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d105      	bne.n	8003306 <TIMxInit+0x11a>
  		htimx->Instance = TIM12;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a3e      	ldr	r2, [pc, #248]	; (80033f8 <TIMxInit+0x20c>)
 80032fe:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_BRK_TIM12_IRQn;
 8003300:	232b      	movs	r3, #43	; 0x2b
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e012      	b.n	800332c <TIMxInit+0x140>
  	}
  	else if(htimx == &htim13)	{
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <TIMxInit+0x210>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d105      	bne.n	800331a <TIMxInit+0x12e>
  		htimx->Instance = TIM13;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <TIMxInit+0x214>)
 8003312:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_UP_TIM13_IRQn;
 8003314:	232c      	movs	r3, #44	; 0x2c
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	e008      	b.n	800332c <TIMxInit+0x140>
  		}
  	else if(htimx == &htim14)	{
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a39      	ldr	r2, [pc, #228]	; (8003404 <TIMxInit+0x218>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d104      	bne.n	800332c <TIMxInit+0x140>
  		htimx->Instance = TIM14;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a38      	ldr	r2, [pc, #224]	; (8003408 <TIMxInit+0x21c>)
 8003326:	601a      	str	r2, [r3, #0]
  		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8003328:	232d      	movs	r3, #45	; 0x2d
 800332a:	61fb      	str	r3, [r7, #28]
  		}


  htimx->Init.Prescaler = prescaler;
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
  htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	609a      	str	r2, [r3, #8]
  htimx->Init.Period = period;
 8003338:	897a      	ldrh	r2, [r7, #10]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	60da      	str	r2, [r3, #12]
  htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f010 f833 	bl	80133b0 <HAL_TIM_Base_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <TIMxInit+0x168>
  {
    Error_Handler();
 8003350:	f001 f9f8 	bl	8004744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f010 ff94 	bl	8014290 <HAL_TIMEx_MasterConfigSynchronization>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <TIMxInit+0x186>
  {
    Error_Handler();
 800336e:	f001 f9e9 	bl	8004744 <Error_Handler>
  }


  HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	b25b      	sxtb	r3, r3
 8003376:	88f9      	ldrh	r1, [r7, #6]
 8003378:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800337a:	4618      	mov	r0, r3
 800337c:	f00c fff6 	bl	801036c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nvic);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	b25b      	sxtb	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	f00d f80d 	bl	80103a4 <HAL_NVIC_EnableIRQ>

  HAL_TIM_Base_Start(htimx);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f010 f83b 	bl	8013406 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(htimx);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f010 f85c 	bl	801344e <HAL_TIM_Base_Start_IT>

}
 8003396:	bf00      	nop
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20005164 	.word	0x20005164
 80033a4:	40010000 	.word	0x40010000
 80033a8:	20005268 	.word	0x20005268
 80033ac:	20004f7c 	.word	0x20004f7c
 80033b0:	40000400 	.word	0x40000400
 80033b4:	20004e78 	.word	0x20004e78
 80033b8:	40000800 	.word	0x40000800
 80033bc:	20004f3c 	.word	0x20004f3c
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	20005124 	.word	0x20005124
 80033c8:	40001000 	.word	0x40001000
 80033cc:	200053c8 	.word	0x200053c8
 80033d0:	40001400 	.word	0x40001400
 80033d4:	20004e38 	.word	0x20004e38
 80033d8:	40010400 	.word	0x40010400
 80033dc:	200051a4 	.word	0x200051a4
 80033e0:	40014000 	.word	0x40014000
 80033e4:	20004ef8 	.word	0x20004ef8
 80033e8:	40014400 	.word	0x40014400
 80033ec:	200050e0 	.word	0x200050e0
 80033f0:	40014800 	.word	0x40014800
 80033f4:	20005388 	.word	0x20005388
 80033f8:	40001800 	.word	0x40001800
 80033fc:	20005060 	.word	0x20005060
 8003400:	40001c00 	.word	0x40001c00
 8003404:	20005348 	.word	0x20005348
 8003408:	40002000 	.word	0x40002000

0800340c <UARTInit>:
 * 						  						 subpriority, then the one comes first in the program will be executed first.
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate, uint16_t preemptionpriority,uint16_t subpriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	460b      	mov	r3, r1
 800341c:	71fb      	strb	r3, [r7, #7]
 800341e:	4613      	mov	r3, r2
 8003420:	80bb      	strh	r3, [r7, #4]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a3c      	ldr	r2, [pc, #240]	; (8003518 <UARTInit+0x10c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d107      	bne.n	800343a <UARTInit+0x2e>
		huartx->Instance = USART1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <UARTInit+0x110>)
 800342e:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003430:	2325      	movs	r3, #37	; 0x25
 8003432:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <UARTInit+0x114>)
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e036      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart2){
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a39      	ldr	r2, [pc, #228]	; (8003524 <UARTInit+0x118>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d107      	bne.n	8003452 <UARTInit+0x46>
		huartx->Instance = USART2;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a38      	ldr	r2, [pc, #224]	; (8003528 <UARTInit+0x11c>)
 8003446:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003448:	2326      	movs	r3, #38	; 0x26
 800344a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <UARTInit+0x120>)
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e02a      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart3){
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a36      	ldr	r2, [pc, #216]	; (8003530 <UARTInit+0x124>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d107      	bne.n	800346a <UARTInit+0x5e>
		huartx->Instance = USART3;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a35      	ldr	r2, [pc, #212]	; (8003534 <UARTInit+0x128>)
 800345e:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003460:	2327      	movs	r3, #39	; 0x27
 8003462:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8003464:	4b34      	ldr	r3, [pc, #208]	; (8003538 <UARTInit+0x12c>)
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e01e      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart4){
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a33      	ldr	r2, [pc, #204]	; (800353c <UARTInit+0x130>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d107      	bne.n	8003482 <UARTInit+0x76>
		huartx->Instance = UART4;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a32      	ldr	r2, [pc, #200]	; (8003540 <UARTInit+0x134>)
 8003476:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003478:	2334      	movs	r3, #52	; 0x34
 800347a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <UARTInit+0x138>)
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e012      	b.n	80034a8 <UARTInit+0x9c>
	}else if(huartx == &huart5){
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a30      	ldr	r2, [pc, #192]	; (8003548 <UARTInit+0x13c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d107      	bne.n	800349a <UARTInit+0x8e>
		huartx->Instance = UART5;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a2f      	ldr	r2, [pc, #188]	; (800354c <UARTInit+0x140>)
 800348e:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003490:	2335      	movs	r3, #53	; 0x35
 8003492:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8003494:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <UARTInit+0x144>)
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	e006      	b.n	80034a8 <UARTInit+0x9c>
	}else{
		huartx->Instance = USART6;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <UARTInit+0x148>)
 800349e:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 80034a0:	2347      	movs	r3, #71	; 0x47
 80034a2:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <UARTInit+0x14c>)
 80034a6:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	220c      	movs	r2, #12
 80034c4:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f010 ff6c 	bl	80143b0 <HAL_UART_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <UARTInit+0xd6>
	{
		Error_Handler();
 80034de:	f001 f931 	bl	8004744 <Error_Handler>
	}

	HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 80034e2:	88b9      	ldrh	r1, [r7, #4]
 80034e4:	8c3a      	ldrh	r2, [r7, #32]
 80034e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00c ff3e 	bl	801036c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(nvic);
 80034f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f00c ff55 	bl	80103a4 <HAL_NVIC_EnableIRQ>

	if(rxstate == ENABLE){
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <UARTInit+0x104>
		__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0220 	orr.w	r2, r2, #32
 800350e:	60da      	str	r2, [r3, #12]
//		HAL_UART_Receive_IT(huartx,rcv_data,1);
	}
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	200050a0 	.word	0x200050a0
 800351c:	40011000 	.word	0x40011000
 8003520:	20004e34 	.word	0x20004e34
 8003524:	200052a8 	.word	0x200052a8
 8003528:	40004400 	.word	0x40004400
 800352c:	20005120 	.word	0x20005120
 8003530:	20004eb8 	.word	0x20004eb8
 8003534:	40004800 	.word	0x40004800
 8003538:	20004fbd 	.word	0x20004fbd
 800353c:	20005228 	.word	0x20005228
 8003540:	40004c00 	.word	0x40004c00
 8003544:	20005224 	.word	0x20005224
 8003548:	20004fc0 	.word	0x20004fc0
 800354c:	40005000 	.word	0x40005000
 8003550:	20004f38 	.word	0x20004f38
 8003554:	40011400 	.word	0x40011400
 8003558:	20004fbc 	.word	0x20004fbc

0800355c <UARTx_DMA_Tx_Init>:
	HAL_NVIC_ClearPendingIRQ(nvic);
	HAL_NVIC_EnableIRQ(nvic);
}

void UARTx_DMA_Tx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_tx, uint16_t preemptionpriority, uint16_t subpriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	460b      	mov	r3, r1
 800356c:	80fb      	strh	r3, [r7, #6]
 800356e:	4613      	mov	r3, r2
 8003570:	80bb      	strh	r3, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <UARTx_DMA_Tx_Init+0xd8>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <UARTx_DMA_Tx_Init+0xd8>)
 800357c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <UARTx_DMA_Tx_Init+0xd8>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
	IRQn_Type nvic;
	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	if(hdma_usart_tx == &hdma_usart2_tx){
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4a29      	ldr	r2, [pc, #164]	; (8003638 <UARTx_DMA_Tx_Init+0xdc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d105      	bne.n	80035a2 <UARTx_DMA_Tx_Init+0x46>
		nvic = DMA1_Stream6_IRQn;
 8003596:	2311      	movs	r3, #17
 8003598:	75fb      	strb	r3, [r7, #23]
		hdma_usart_tx->Instance = DMA1_Stream6;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <UARTx_DMA_Tx_Init+0xe0>)
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e008      	b.n	80035b4 <UARTx_DMA_Tx_Init+0x58>
	}else if(hdma_usart_tx == &hdma_uart5_tx){
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <UARTx_DMA_Tx_Init+0xe4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d104      	bne.n	80035b4 <UARTx_DMA_Tx_Init+0x58>
		nvic = DMA1_Stream7_IRQn;
 80035aa:	232f      	movs	r3, #47	; 0x2f
 80035ac:	75fb      	strb	r3, [r7, #23]
		hdma_usart_tx->Instance = DMA1_Stream7;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <UARTx_DMA_Tx_Init+0xe8>)
 80035b2:	601a      	str	r2, [r3, #0]
	}

	hdma_usart_tx->Init.Channel = DMA_CHANNEL_4;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ba:	605a      	str	r2, [r3, #4]
	hdma_usart_tx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	609a      	str	r2, [r3, #8]
	hdma_usart_tx->Init.PeriphInc = DMA_PINC_DISABLE;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
	hdma_usart_tx->Init.MemInc = DMA_MINC_ENABLE;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ce:	611a      	str	r2, [r3, #16]
	hdma_usart_tx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	615a      	str	r2, [r3, #20]
	hdma_usart_tx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
	hdma_usart_tx->Init.Mode = DMA_NORMAL;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
	hdma_usart_tx->Init.Priority = DMA_PRIORITY_LOW;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	621a      	str	r2, [r3, #32]
	hdma_usart_tx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2200      	movs	r2, #0
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_tx) != HAL_OK)
 80035ee:	68b8      	ldr	r0, [r7, #8]
 80035f0:	f00c fef4 	bl	80103dc <HAL_DMA_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <UARTx_DMA_Tx_Init+0xa2>
	{
		Error_Handler();
 80035fa:	f001 f8a3 	bl	8004744 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmatx, *hdma_usart_tx);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_NVIC_SetPriority(nvic, preemptionpriority, subpriority);
 800360a:	88f9      	ldrh	r1, [r7, #6]
 800360c:	88ba      	ldrh	r2, [r7, #4]
 800360e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003612:	4618      	mov	r0, r3
 8003614:	f00c feaa 	bl	801036c <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(nvic);
 8003618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800361c:	4618      	mov	r0, r3
 800361e:	f00c fecf 	bl	80103c0 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(nvic);
 8003622:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003626:	4618      	mov	r0, r3
 8003628:	f00c febc 	bl	80103a4 <HAL_NVIC_EnableIRQ>
}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	20005000 	.word	0x20005000
 800363c:	400260a0 	.word	0x400260a0
 8003640:	20005408 	.word	0x20005408
 8003644:	400260b8 	.word	0x400260b8

08003648 <UART_DMA_PrintString>:
void UARTPrintString(UART_HandleTypeDef* huartx, char s[])
{
	HAL_UART_Transmit(huartx, (uint8_t *)s, strlen(s), 10);
}
void UART_DMA_PrintString(UART_HandleTypeDef* huartx, char s[])
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(huartx, (uint8_t *)s, strlen(s));
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f7fc fdbc 	bl	80001d0 <strlen>
 8003658:	4603      	mov	r3, r0
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f010 ff47 	bl	80144f4 <HAL_UART_Transmit_DMA>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <USART1_IRQHandler>:
//}




void  USART1_IRQHandler(void){
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <USART1_IRQHandler+0x10>)
 8003676:	f010 ffa9 	bl	80145cc <HAL_UART_IRQHandler>
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200050a0 	.word	0x200050a0

08003684 <USART3_IRQHandler>:
//void  USART2_IRQHandler(void){
//
//	HAL_UART_IRQHandler(&huart2);
//}

void  USART3_IRQHandler(void){
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <USART3_IRQHandler+0x10>)
 800368a:	f010 ff9f 	bl	80145cc <HAL_UART_IRQHandler>
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20004eb8 	.word	0x20004eb8

08003698 <UART4_IRQHandler>:

void  UART4_IRQHandler(void){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <UART4_IRQHandler+0x10>)
 800369e:	f010 ff95 	bl	80145cc <HAL_UART_IRQHandler>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20005228 	.word	0x20005228

080036ac <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <UART5_IRQHandler+0x10>)
 80036b2:	f010 ff8b 	bl	80145cc <HAL_UART_IRQHandler>
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20004fc0 	.word	0x20004fc0

080036c0 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <USART6_IRQHandler+0x10>)
 80036c6:	f010 ff81 	bl	80145cc <HAL_UART_IRQHandler>
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200051e4 	.word	0x200051e4

080036d4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <DMA1_Stream6_IRQHandler+0x10>)
 80036da:	f00c ffa7 	bl	801062c <HAL_DMA_IRQHandler>
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20005000 	.word	0x20005000

080036e8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <DMA1_Stream5_IRQHandler+0x10>)
 80036ee:	f00c ff9d 	bl	801062c <HAL_DMA_IRQHandler>
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20004dd4 	.word	0x20004dd4

080036fc <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <DMA1_Stream7_IRQHandler+0x10>)
 8003702:	f00c ff93 	bl	801062c <HAL_DMA_IRQHandler>
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20005408 	.word	0x20005408

08003710 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003714:	4802      	ldr	r0, [pc, #8]	; (8003720 <DMA1_Stream0_IRQHandler+0x10>)
 8003716:	f00c ff89 	bl	801062c <HAL_DMA_IRQHandler>
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200052e8 	.word	0x200052e8

08003724 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber,uint8_t N_PPriority,uint8_t N_SPriority){
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	461a      	mov	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	817b      	strh	r3, [r7, #10]
 8003734:	4613      	mov	r3, r2
 8003736:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003738:	f107 0310 	add.w	r3, r7, #16
 800373c:	2228      	movs	r2, #40	; 0x28
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f016 f97b 	bl	8019a3c <memset>

	if(hcanx == &hcan1){
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a4f      	ldr	r2, [pc, #316]	; (8003888 <CANxInit+0x164>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d103      	bne.n	8003756 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a4e      	ldr	r2, [pc, #312]	; (800388c <CANxInit+0x168>)
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e002      	b.n	800375c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a4d      	ldr	r2, [pc, #308]	; (8003890 <CANxInit+0x16c>)
 800375a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800375c:	897a      	ldrh	r2, [r7, #10]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
	//500 Khz
	hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003774:	611a      	str	r2, [r3, #16]
	hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800377c:	615a      	str	r2, [r3, #20]
	//1000Khz
//	hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
//	hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
	hcanx->Init.TimeTriggeredMode = DISABLE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f00b fe7e 	bl	800f4a4 <HAL_CAN_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <CANxInit+0x8e>
	{
		Error_Handler();
 80037ae:	f000 ffc9 	bl	8004744 <Error_Handler>
	}


	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80037b6:	893b      	ldrh	r3, [r7, #8]
 80037b8:	015b      	lsls	r3, r3, #5
 80037ba:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80037c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037c4:	015b      	lsls	r3, r3, #5
 80037c6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80037cc:	2301      	movs	r3, #1
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterActivation=ENABLE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80037d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80037da:	f107 0310 	add.w	r3, r7, #16
 80037de:	4619      	mov	r1, r3
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f00b ff5b 	bl	800f69c <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a27      	ldr	r2, [pc, #156]	; (8003888 <CANxInit+0x164>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d122      	bne.n	8003834 <CANxInit+0x110>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10f      	bne.n	8003814 <CANxInit+0xf0>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, N_PPriority, N_SPriority);
 80037f4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80037f8:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80037fc:	4619      	mov	r1, r3
 80037fe:	2014      	movs	r0, #20
 8003800:	f00c fdb4 	bl	801036c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003804:	2014      	movs	r0, #20
 8003806:	f00c fdcd 	bl	80103a4 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800380a:	2102      	movs	r1, #2
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f00c fa8b 	bl	800fd28 <HAL_CAN_ActivateNotification>
 8003812:	e031      	b.n	8003878 <CANxInit+0x154>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, N_PPriority, N_SPriority);
 8003814:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003818:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800381c:	4619      	mov	r1, r3
 800381e:	2015      	movs	r0, #21
 8003820:	f00c fda4 	bl	801036c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003824:	2015      	movs	r0, #21
 8003826:	f00c fdbd 	bl	80103a4 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 800382a:	2110      	movs	r1, #16
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f00c fa7b 	bl	800fd28 <HAL_CAN_ActivateNotification>
 8003832:	e021      	b.n	8003878 <CANxInit+0x154>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10f      	bne.n	800385a <CANxInit+0x136>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, N_PPriority, N_SPriority);
 800383a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800383e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003842:	4619      	mov	r1, r3
 8003844:	2040      	movs	r0, #64	; 0x40
 8003846:	f00c fd91 	bl	801036c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800384a:	2040      	movs	r0, #64	; 0x40
 800384c:	f00c fdaa 	bl	80103a4 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003850:	2102      	movs	r1, #2
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f00c fa68 	bl	800fd28 <HAL_CAN_ActivateNotification>
 8003858:	e00e      	b.n	8003878 <CANxInit+0x154>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, N_PPriority, N_SPriority);
 800385a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800385e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8003862:	4619      	mov	r1, r3
 8003864:	2041      	movs	r0, #65	; 0x41
 8003866:	f00c fd81 	bl	801036c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800386a:	2041      	movs	r0, #65	; 0x41
 800386c:	f00c fd9a 	bl	80103a4 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003870:	2110      	movs	r1, #16
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f00c fa58 	bl	800fd28 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f00b ffef 	bl	800f85c <HAL_CAN_Start>

}
 800387e:	bf00      	nop
 8003880:	3738      	adds	r7, #56	; 0x38
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200056fc 	.word	0x200056fc
 800388c:	40006400 	.word	0x40006400
 8003890:	40006800 	.word	0x40006800

08003894 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b090      	sub	sp, #64	; 0x40
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80038a2:	bf00      	nop
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f00c f8f8 	bl	800fa9a <HAL_CAN_GetTxMailboxesFreeLevel>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f9      	beq.n	80038a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80038b4:	2300      	movs	r3, #0
 80038b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80038c4:	2300      	movs	r3, #0
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80038d2:	e01f      	b.n	8003914 <CAN_TxMsg+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80038d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80038dc:	1c51      	adds	r1, r2, #1
 80038de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80038e0:	4611      	mov	r1, r2
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e8:	440b      	add	r3, r1
 80038ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 80038ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d10f      	bne.n	8003914 <CAN_TxMsg+0x80>
			TxMessage.DLC=8;
 80038f4:	2308      	movs	r3, #8
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	f107 0214 	add.w	r2, r7, #20
 8003900:	f107 0120 	add.w	r1, r7, #32
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f00b ffed 	bl	800f8e4 <HAL_CAN_AddTxMessage>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <CAN_TxMsg+0x80>
				Error_Handler();
 8003910:	f000 ff18 	bl	8004744 <Error_Handler>
	while(datalen--)
 8003914:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	873a      	strh	r2, [r7, #56]	; 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1da      	bne.n	80038d4 <CAN_TxMsg+0x40>
			}
		}
	}
	if(i>0){
 800391e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00f      	beq.n	8003944 <CAN_TxMsg+0xb0>
		TxMessage.DLC = i;
 8003924:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	f107 0214 	add.w	r2, r7, #20
 8003930:	f107 0120 	add.w	r1, r7, #32
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f00b ffd5 	bl	800f8e4 <HAL_CAN_AddTxMessage>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <CAN_TxMsg+0xb0>
			Error_Handler();
 8003940:	f000 ff00 	bl	8004744 <Error_Handler>
		}

	}

	return(canMailbox);
 8003944:	69fb      	ldr	r3, [r7, #28]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3740      	adds	r7, #64	; 0x40
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <FuzzyPIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void FuzzyPIDSourceInit(float *in, float *out, FuzzyPID_t *fpid)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
	fpid->input = in;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]
	fpid->output = out;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	605a      	str	r2, [r3, #4]
	fpid->isfirst = 1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	66da      	str	r2, [r3, #108]	; 0x6c
	fpid->outp = 0.0;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	671a      	str	r2, [r3, #112]	; 0x70

}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <FuzzyPIDGainInit>:

void FuzzyPIDGainInit(float ku, float err_max, float errc_max, float errs_max,
					  float kp_base, float ki_base, float kd_base,
					  float kp_param, float ki_param, float kd_param, FuzzyPID_t *fpid)
{
 8003980:	b480      	push	{r7}
 8003982:	b08d      	sub	sp, #52	; 0x34
 8003984:	af00      	add	r7, sp, #0
 8003986:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800398a:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800398e:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 8003992:	edc7 1a08 	vstr	s3, [r7, #32]
 8003996:	ed87 2a07 	vstr	s4, [r7, #28]
 800399a:	edc7 2a06 	vstr	s5, [r7, #24]
 800399e:	ed87 3a05 	vstr	s6, [r7, #20]
 80039a2:	edc7 3a04 	vstr	s7, [r7, #16]
 80039a6:	ed87 4a03 	vstr	s8, [r7, #12]
 80039aa:	edc7 4a02 	vstr	s9, [r7, #8]
 80039ae:	6078      	str	r0, [r7, #4]
	fpid->K[U_MAX]  = ku;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
	fpid->K[E_MAX]  = err_max;	fpid->K[E_MIN] = -err_max;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80039bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039c0:	eef1 7a67 	vneg.f32	s15, s15
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	fpid->K[EC_MAX] = errc_max;	fpid->K[EC_MIN] = -errc_max;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
 80039d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039d4:	eef1 7a67 	vneg.f32	s15, s15
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	fpid->K[ES_MAX] = errs_max;	fpid->K[ES_MIN] = -errs_max;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	645a      	str	r2, [r3, #68]	; 0x44
 80039e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80039e8:	eef1 7a67 	vneg.f32	s15, s15
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	fpid->K[KP_B]   = kp_base;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
	fpid->K[KI_B]   = ki_base;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	659a      	str	r2, [r3, #88]	; 0x58
	fpid->K[KD_B]   = kd_base;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	65da      	str	r2, [r3, #92]	; 0x5c
	fpid->K[KP_P]   = kp_param;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	661a      	str	r2, [r3, #96]	; 0x60
	fpid->K[KI_P]   = ki_param;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	665a      	str	r2, [r3, #100]	; 0x64
	fpid->K[KD_P]   = kd_param;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a16:	bf00      	nop
 8003a18:	3734      	adds	r7, #52	; 0x34
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <FuzzyPIDGainSet>:

void FuzzyPIDGainSet(unsigned char parameter, float value, FuzzyPID_t *fpid)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a2e:	6079      	str	r1, [r7, #4]
 8003a30:	73fb      	strb	r3, [r7, #15]
	fpid->K[parameter] = value;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	330e      	adds	r3, #14
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <FuzzyPID>:

void FuzzyPID(FuzzyPID_t *fpid)
{
 8003a4c:	b5b0      	push	{r4, r5, r7, lr}
 8003a4e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	6018      	str	r0, [r3, #0]
//	static int isfirst = 1;
//	static float outp = 0.0;
	int Kp_Rules[7][7] =   {{PB,PB,PM,PM,PS,ZO,ZO},
 8003a58:	4ab2      	ldr	r2, [pc, #712]	; (8003d24 <FuzzyPID+0x2d8>)
 8003a5a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8003a5e:	4611      	mov	r1, r2
 8003a60:	22c4      	movs	r2, #196	; 0xc4
 8003a62:	4618      	mov	r0, r3
 8003a64:	f015 ffdc 	bl	8019a20 <memcpy>
							{PM,PM,PS,ZO,NS,NM,NM},
							{PS,PS,ZO,NS,NS,NM,NM},
							{PS,ZO,NS,NM,NM,NM,NB},
							{ZO,ZO,NM,NM,NM,NB,NB}};

	int Ki_Rules[7][7] =   {{NB,NB,NB,NB,NM,ZO,ZO},		//refer to document
 8003a68:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a6c:	4aae      	ldr	r2, [pc, #696]	; (8003d28 <FuzzyPID+0x2dc>)
 8003a6e:	4618      	mov	r0, r3
 8003a70:	4611      	mov	r1, r2
 8003a72:	23c4      	movs	r3, #196	; 0xc4
 8003a74:	461a      	mov	r2, r3
 8003a76:	f015 ffd3 	bl	8019a20 <memcpy>
							{NM,NM,NS,ZO,PS,PM,PM},
							{NS,NS,ZO,PM,PM,PM,PM},
							{ZO,ZO,PS,PS,PM,PB,PB},
							{ZO,ZO,PS,PM,PM,PB,PB}};

	int Kd_Rules[7][7] =   {{PS,NS,NB,NB,NB,NM,PS},
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	4aab      	ldr	r2, [pc, #684]	; (8003d2c <FuzzyPID+0x2e0>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	4611      	mov	r1, r2
 8003a84:	23c4      	movs	r3, #196	; 0xc4
 8003a86:	461a      	mov	r2, r3
 8003a88:	f015 ffca 	bl	8019a20 <memcpy>
							{ZO,NS,NS,NS,NS,NS,ZO},
							{ZO,ZO,ZO,ZO,ZO,ZO,ZO},
							{PB,NS,PS,PS,PS,PS,PB},
							{PB,PM,PM,PM,PS,PS,PB}};

	fpid->err	= *fpid->input;
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	609a      	str	r2, [r3, #8]
	fpid->errc 	= fpid->err - fpid->prev_err;
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	edc3 7a04 	vstr	s15, [r3, #16]
	fpid->prev_err = fpid->err;
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	1d3b      	adds	r3, r7, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60da      	str	r2, [r3, #12]

	if (fpid->isfirst){
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00f      	beq.n	8003aec <FuzzyPID+0xa0>
		fpid->errs = 0;
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
		*fpid->output = 0;
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
		fpid->isfirst = 0;
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	66da      	str	r2, [r3, #108]	; 0x6c

		if (fabs(fpid->outp) > fpid->K[U_MAX])
			(fpid->outp > 0) ? (fpid->outp = fpid->K[U_MAX]) : (fpid->outp = -fpid->K[U_MAX]);
		*fpid->output = fpid->outp;
	}
}
 8003aea:	e243      	b.n	8003f74 <FuzzyPID+0x528>
		fpid->errs 	+= fpid->err;
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	ed93 7a05 	vldr	s14, [r3, #20]
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	edc3 7a05 	vstr	s15, [r3, #20]
		if(fabs(fpid->err) > fpid->K[E_MAX])
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b10:	eeb0 7ae7 	vabs.f32	s14, s15
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	dd15      	ble.n	8003b52 <FuzzyPID+0x106>
			(fpid->err > 0)   ? (fpid->err = fpid->K[E_MAX])   : (fpid->err = fpid->K[E_MIN]);
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	dd06      	ble.n	8003b46 <FuzzyPID+0xfa>
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	e005      	b.n	8003b52 <FuzzyPID+0x106>
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	609a      	str	r2, [r3, #8]
		if(fabs(fpid->errc) > fpid->K[EC_MAX])
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b5a:	eeb0 7ae7 	vabs.f32	s14, s15
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	dd15      	ble.n	8003b9c <FuzzyPID+0x150>
			(fpid->errc > 0)  ? (fpid->errc = fpid->K[EC_MAX]) : (fpid->errc = fpid->K[EC_MIN]);
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	dd06      	ble.n	8003b90 <FuzzyPID+0x144>
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	e005      	b.n	8003b9c <FuzzyPID+0x150>
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	611a      	str	r2, [r3, #16]
		if(fabs(fpid->errs) > fpid->K[ES_MAX])
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ba4:	eeb0 7ae7 	vabs.f32	s14, s15
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	dd15      	ble.n	8003be6 <FuzzyPID+0x19a>
			(fpid->errs > 0)  ? (fpid->errs = fpid->K[ES_MAX]) : (fpid->errs = fpid->K[ES_MIN]);
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	dd06      	ble.n	8003bda <FuzzyPID+0x18e>
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	615a      	str	r2, [r3, #20]
 8003bd8:	e005      	b.n	8003be6 <FuzzyPID+0x19a>
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	615a      	str	r2, [r3, #20]
		(fpid->err > 0)	 ? (fpid->errCal  = (int)(fpid->err * 3.0  / fpid->K[E_MAX] + 0.5f))  : (fpid->errCal  = (int)(fpid->err * 3.0  / fpid->K[E_MAX] - 0.5f));
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf6:	dd2e      	ble.n	8003c56 <FuzzyPID+0x20a>
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fc fca2 	bl	8000548 <__aeabi_f2d>
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <FuzzyPID+0x2e4>)
 8003c0a:	f7fc fcf5 	bl	80005f8 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4614      	mov	r4, r2
 8003c14:	461d      	mov	r5, r3
 8003c16:	1d3b      	adds	r3, r7, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fc93 	bl	8000548 <__aeabi_f2d>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7fc fe0f 	bl	800084c <__aeabi_ddiv>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <FuzzyPID+0x2e8>)
 8003c3c:	f7fc fb26 	bl	800028c <__adddf3>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7fc ff86 	bl	8000b58 <__aeabi_d2iz>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	619a      	str	r2, [r3, #24]
 8003c54:	e02d      	b.n	8003cb2 <FuzzyPID+0x266>
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fc73 	bl	8000548 <__aeabi_f2d>
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <FuzzyPID+0x2e4>)
 8003c68:	f7fc fcc6 	bl	80005f8 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fc64 	bl	8000548 <__aeabi_f2d>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4620      	mov	r0, r4
 8003c86:	4629      	mov	r1, r5
 8003c88:	f7fc fde0 	bl	800084c <__aeabi_ddiv>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <FuzzyPID+0x2e8>)
 8003c9a:	f7fc faf5 	bl	8000288 <__aeabi_dsub>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f7fc ff57 	bl	8000b58 <__aeabi_d2iz>
 8003caa:	4602      	mov	r2, r0
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	619a      	str	r2, [r3, #24]
		(fpid->errc > 0) ? (fpid->errcCal = (int)(fpid->errc * 3.0 / fpid->K[EC_MAX] + 0.5f)) : (fpid->errcCal = (int)(fpid->errc * 3.0 / fpid->K[EC_MAX] - 0.5f));
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	dd39      	ble.n	8003d38 <FuzzyPID+0x2ec>
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc3c 	bl	8000548 <__aeabi_f2d>
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <FuzzyPID+0x2e4>)
 8003cd6:	f7fc fc8f 	bl	80005f8 <__aeabi_dmul>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4614      	mov	r4, r2
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	1d3b      	adds	r3, r7, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fc fc2d 	bl	8000548 <__aeabi_f2d>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7fc fda9 	bl	800084c <__aeabi_ddiv>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <FuzzyPID+0x2e8>)
 8003d08:	f7fc fac0 	bl	800028c <__adddf3>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f7fc ff20 	bl	8000b58 <__aeabi_d2iz>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	61da      	str	r2, [r3, #28]
 8003d20:	e038      	b.n	8003d94 <FuzzyPID+0x348>
 8003d22:	bf00      	nop
 8003d24:	0801f868 	.word	0x0801f868
 8003d28:	0801f92c 	.word	0x0801f92c
 8003d2c:	0801f9f0 	.word	0x0801f9f0
 8003d30:	40080000 	.word	0x40080000
 8003d34:	3fe00000 	.word	0x3fe00000
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fc02 	bl	8000548 <__aeabi_f2d>
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	4b8d      	ldr	r3, [pc, #564]	; (8003f80 <FuzzyPID+0x534>)
 8003d4a:	f7fc fc55 	bl	80005f8 <__aeabi_dmul>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4614      	mov	r4, r2
 8003d54:	461d      	mov	r5, r3
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fbf3 	bl	8000548 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc fd6f 	bl	800084c <__aeabi_ddiv>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	4b82      	ldr	r3, [pc, #520]	; (8003f84 <FuzzyPID+0x538>)
 8003d7c:	f7fc fa84 	bl	8000288 <__aeabi_dsub>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7fc fee6 	bl	8000b58 <__aeabi_d2iz>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61da      	str	r2, [r3, #28]
		fpid->set_Kp = Kp_Rules[fpid->errCal + 3][fpid->errcCal + 3];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	1cda      	adds	r2, r3, #3
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	1cd9      	adds	r1, r3, #3
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	440b      	add	r3, r1
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8003db2:	4413      	add	r3, r2
 8003db4:	f853 2cc4 	ldr.w	r2, [r3, #-196]
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	621a      	str	r2, [r3, #32]
		fpid->set_Ki = Ki_Rules[fpid->errCal + 3][fpid->errcCal + 3];
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	1cda      	adds	r2, r3, #3
 8003dc6:	1d3b      	adds	r3, r7, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	1cd8      	adds	r0, r3, #3
 8003dce:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	4403      	add	r3, r0
 8003dda:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
		fpid->set_Kd = Kd_Rules[fpid->errCal + 3][fpid->errcCal + 3];
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	1cda      	adds	r2, r3, #3
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	1cd8      	adds	r0, r3, #3
 8003df4:	f107 010c 	add.w	r1, r7, #12
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	4403      	add	r3, r0
 8003e00:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
		fpid->Kp = fpid->K[KP_B] + fpid->set_Kp * fpid->K[KP_P];
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		fpid->Ki = fpid->K[KI_B] + fpid->set_Ki * fpid->K[KI_P];
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		fpid->Kd = fpid->K[KD_B] + fpid->set_Kd * fpid->K[KD_P];
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fpid->outp = (((fpid->err * fpid->Kp) + (fpid->errs * fpid->Ki) - (fpid->errc * fpid->Kd)) / fpid->K[E_MAX]);
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e9c:	1d3b      	adds	r3, r7, #4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	edd3 6a05 	vldr	s13, [r3, #20]
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	edd3 6a04 	vldr	s13, [r3, #16]
 8003ec8:	1d3b      	adds	r3, r7, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8003ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		fpid->outt = fpid->outp;
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef2:	1d3b      	adds	r3, r7, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	675a      	str	r2, [r3, #116]	; 0x74
		fpid->outp = fpid->outp * fpid->K[U_MAX];
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		if (fabs(fpid->outp) > fpid->K[U_MAX])
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f1c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f30:	dd19      	ble.n	8003f66 <FuzzyPID+0x51a>
			(fpid->outp > 0) ? (fpid->outp = fpid->K[U_MAX]) : (fpid->outp = -fpid->K[U_MAX]);
 8003f32:	1d3b      	adds	r3, r7, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	dd06      	ble.n	8003f52 <FuzzyPID+0x506>
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	671a      	str	r2, [r3, #112]	; 0x70
 8003f50:	e009      	b.n	8003f66 <FuzzyPID+0x51a>
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f5a:	eef1 7a67 	vneg.f32	s15, s15
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		*fpid->output = fpid->outp;
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	1d3a      	adds	r2, r7, #4
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40080000 	.word	0x40080000
 8003f84:	3fe00000 	.word	0x3fe00000

08003f88 <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <I2C1_EV_IRQHandler+0x10>)
 8003f8e:	f00c ff92 	bl	8010eb6 <HAL_I2C_EV_IRQHandler>

}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20005a24 	.word	0x20005a24

08003f9c <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <I2C2_EV_IRQHandler+0x10>)
 8003fa2:	f00c ff88 	bl	8010eb6 <HAL_I2C_EV_IRQHandler>


}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20005a78 	.word	0x20005a78

08003fb0 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003fb4:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <I2C2_ER_IRQHandler+0x10>)
 8003fb6:	f00d f8eb 	bl	8011190 <HAL_I2C_ER_IRQHandler>


}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20005a78 	.word	0x20005a78

08003fc4 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <I2C3_EV_IRQHandler+0x10>)
 8003fca:	f00c ff74 	bl	8010eb6 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200058cc 	.word	0x200058cc

08003fd8 <I2C3_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C3.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_ER_IRQHandler(void){
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c3);
 8003fdc:	4802      	ldr	r0, [pc, #8]	; (8003fe8 <I2C3_ER_IRQHandler+0x10>)
 8003fde:	f00d f8d7 	bl	8011190 <HAL_I2C_ER_IRQHandler>

}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200058cc 	.word	0x200058cc

08003fec <LSA_read>:
	lsa->S7_pin 	= S7GPIOPin;
	lsa->S8_GPIOx 	= S8GPIOx;
	lsa->S8_pin 	= S8GPIOPin;

}
void LSA_read(LSA_t* lsa){
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	lsa->LSA_bits.bit0 = lsa->S1 = HAL_GPIO_ReadPin(lsa->S1_GPIOx, lsa->S1_pin);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8b1b      	ldrh	r3, [r3, #24]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f00c ff28 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	b2d9      	uxtb	r1, r3
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8004020:	f361 0300 	bfi	r3, r1, #0, #1
 8004024:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit1 = lsa->S2 = HAL_GPIO_ReadPin(lsa->S2_GPIOx, lsa->S2_pin);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8c1b      	ldrh	r3, [r3, #32]
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f00c ff0e 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004038:	4603      	mov	r3, r0
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	b2d9      	uxtb	r1, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8004054:	f361 0341 	bfi	r3, r1, #1, #1
 8004058:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit2 = lsa->S3 = HAL_GPIO_ReadPin(lsa->S3_GPIOx, lsa->S3_pin);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f00c fef4 	bl	8010e54 <HAL_GPIO_ReadPin>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	b2d9      	uxtb	r1, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8004088:	f361 0382 	bfi	r3, r1, #2, #1
 800408c:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit3 = lsa->S4 = HAL_GPIO_ReadPin(lsa->S4_GPIOx, lsa->S4_pin);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f00c feda 	bl	8010e54 <HAL_GPIO_ReadPin>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	b2d9      	uxtb	r1, r3
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80040bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80040c0:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit4 = lsa->S5 = HAL_GPIO_ReadPin(lsa->S5_GPIOx, lsa->S5_pin);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f00c fec0 	bl	8010e54 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	b2d9      	uxtb	r1, r3
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 80040f0:	f361 1304 	bfi	r3, r1, #4, #1
 80040f4:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit5 = lsa->S6 = HAL_GPIO_ReadPin(lsa->S6_GPIOx, lsa->S6_pin);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f00c fea5 	bl	8010e54 <HAL_GPIO_ReadPin>
 800410a:	4603      	mov	r3, r0
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	b2d9      	uxtb	r1, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8004126:	f361 1345 	bfi	r3, r1, #5, #1
 800412a:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit6 = lsa->S7 = HAL_GPIO_ReadPin(lsa->S7_GPIOx, lsa->S7_pin);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f00c fe8a 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	b2d9      	uxtb	r1, r3
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 800415c:	f361 1386 	bfi	r3, r1, #6, #1
 8004160:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_bits.bit7 = lsa->S8 = HAL_GPIO_ReadPin(lsa->S8_GPIOx, lsa->S8_pin);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f00c fe6f 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2d9      	uxtb	r1, r3
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	f892 305c 	ldrb.w	r3, [r2, #92]	; 0x5c
 8004192:	f361 13c7 	bfi	r3, r1, #7, #1
 8004196:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
	lsa->LSA_T = lsa->S1 + lsa->S2 + lsa->S3 + lsa->S4 +lsa->S5 +lsa->S6 + lsa->S7 + lsa->S8;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80041a6:	4413      	add	r3, r2
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041b0:	4413      	add	r3, r2
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80041ba:	4413      	add	r3, r2
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80041c4:	4413      	add	r3, r2
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80041ce:	4413      	add	r3, r2
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041d8:	4413      	add	r3, r2
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041e2:	4413      	add	r3, r2
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <LSAErr_Handler>:
void LSAErr_Handler(LSA_t* lsa){
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	lsa->S1 = HAL_GPIO_ReadPin(lsa->S1_GPIOx, lsa->S1_pin);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8b1b      	ldrh	r3, [r3, #24]
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f00c fe24 	bl	8010e54 <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	lsa->S2 = HAL_GPIO_ReadPin(lsa->S2_GPIOx, lsa->S2_pin);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8c1b      	ldrh	r3, [r3, #32]
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f00c fe17 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	lsa->S3 = HAL_GPIO_ReadPin(lsa->S3_GPIOx, lsa->S3_pin);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f00c fe0a 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	lsa->S4 = HAL_GPIO_ReadPin(lsa->S4_GPIOx, lsa->S4_pin);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f00c fdfd 	bl	8010e54 <HAL_GPIO_ReadPin>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	lsa->S5 = HAL_GPIO_ReadPin(lsa->S5_GPIOx, lsa->S5_pin);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f00c fdf0 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	lsa->S6 = HAL_GPIO_ReadPin(lsa->S6_GPIOx, lsa->S6_pin);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f00c fde2 	bl	8010e54 <HAL_GPIO_ReadPin>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	lsa->S7 = HAL_GPIO_ReadPin(lsa->S7_GPIOx, lsa->S7_pin);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f00c fdd4 	bl	8010e54 <HAL_GPIO_ReadPin>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	lsa->S8 = HAL_GPIO_ReadPin(lsa->S8_GPIOx, lsa->S8_pin);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f00c fdc6 	bl	8010e54 <HAL_GPIO_ReadPin>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	lsa->LSA_T = lsa->S1 + lsa->S2 + lsa->S3 + lsa->S4 +lsa->S5 +lsa->S6 + lsa->S7 + lsa->S8;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80042de:	4413      	add	r3, r2
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042e8:	4413      	add	r3, r2
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80042f2:	4413      	add	r3, r2
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80042fc:	4413      	add	r3, r2
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8004306:	4413      	add	r3, r2
 8004308:	b2da      	uxtb	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004310:	4413      	add	r3, r2
 8004312:	b2da      	uxtb	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800431a:	4413      	add	r3, r2
 800431c:	b2da      	uxtb	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	if(lsa->LSA_T > 0){
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80ca 	beq.w	80044c4 <LSAErr_Handler+0x2d0>

		lsa->PosErr = (lsa->S1 * 1.0 + lsa->S2 * 2.0 + lsa->S3 * 3.0 + lsa->S4 * 4.0 + lsa->S5 * 5.0 +
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc f8f4 	bl	8000524 <__aeabi_i2d>
 800433c:	4604      	mov	r4, r0
 800433e:	460d      	mov	r5, r1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc f8ec 	bl	8000524 <__aeabi_i2d>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	f7fb ff9c 	bl	800028c <__adddf3>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4620      	mov	r0, r4
 800435a:	4629      	mov	r1, r5
 800435c:	f7fb ff96 	bl	800028c <__adddf3>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc f8d8 	bl	8000524 <__aeabi_i2d>
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	4b5a      	ldr	r3, [pc, #360]	; (80044e4 <LSAErr_Handler+0x2f0>)
 800437a:	f7fc f93d 	bl	80005f8 <__aeabi_dmul>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4620      	mov	r0, r4
 8004384:	4629      	mov	r1, r5
 8004386:	f7fb ff81 	bl	800028c <__adddf3>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4614      	mov	r4, r2
 8004390:	461d      	mov	r5, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc f8c3 	bl	8000524 <__aeabi_i2d>
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <LSAErr_Handler+0x2f4>)
 80043a4:	f7fc f928 	bl	80005f8 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4620      	mov	r0, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	f7fb ff6c 	bl	800028c <__adddf3>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4614      	mov	r4, r2
 80043ba:	461d      	mov	r5, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc f8ae 	bl	8000524 <__aeabi_i2d>
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	4b47      	ldr	r3, [pc, #284]	; (80044ec <LSAErr_Handler+0x2f8>)
 80043ce:	f7fc f913 	bl	80005f8 <__aeabi_dmul>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fb ff57 	bl	800028c <__adddf3>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
				lsa->S6 * 6.0 + lsa->S7 * 7.0 + lsa->S8 * 8.0 )/(lsa->LSA_T) - 4.5;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fc f899 	bl	8000524 <__aeabi_i2d>
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <LSAErr_Handler+0x2fc>)
 80043f8:	f7fc f8fe 	bl	80005f8 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
		lsa->PosErr = (lsa->S1 * 1.0 + lsa->S2 * 2.0 + lsa->S3 * 3.0 + lsa->S4 * 4.0 + lsa->S5 * 5.0 +
 8004400:	4620      	mov	r0, r4
 8004402:	4629      	mov	r1, r5
 8004404:	f7fb ff42 	bl	800028c <__adddf3>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
				lsa->S6 * 6.0 + lsa->S7 * 7.0 + lsa->S8 * 8.0 )/(lsa->LSA_T) - 4.5;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc f884 	bl	8000524 <__aeabi_i2d>
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <LSAErr_Handler+0x300>)
 8004422:	f7fc f8e9 	bl	80005f8 <__aeabi_dmul>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4620      	mov	r0, r4
 800442c:	4629      	mov	r1, r5
 800442e:	f7fb ff2d 	bl	800028c <__adddf3>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4614      	mov	r4, r2
 8004438:	461d      	mov	r5, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004440:	4618      	mov	r0, r3
 8004442:	f7fc f86f 	bl	8000524 <__aeabi_i2d>
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <LSAErr_Handler+0x304>)
 800444c:	f7fc f8d4 	bl	80005f8 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4620      	mov	r0, r4
 8004456:	4629      	mov	r1, r5
 8004458:	f7fb ff18 	bl	800028c <__adddf3>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc f85a 	bl	8000524 <__aeabi_i2d>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4620      	mov	r0, r4
 8004476:	4629      	mov	r1, r5
 8004478:	f7fc f9e8 	bl	800084c <__aeabi_ddiv>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <LSAErr_Handler+0x308>)
 800448a:	f7fb fefd 	bl	8000288 <__aeabi_dsub>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f7fc fba7 	bl	8000be8 <__aeabi_d2f>
 800449a:	4602      	mov	r2, r0
		lsa->PosErr = (lsa->S1 * 1.0 + lsa->S2 * 2.0 + lsa->S3 * 3.0 + lsa->S4 * 4.0 + lsa->S5 * 5.0 +
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
		(lsa->PosErr < 0.0)? (lsa->PosMemory = 0) : (lsa->PosMemory = 1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80044a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d504      	bpl.n	80044ba <LSAErr_Handler+0x2c6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	}else

		(lsa->PosMemory == 0)? (lsa->PosErr = -5) : (lsa->PosErr = 5);

}
 80044b8:	e010      	b.n	80044dc <LSAErr_Handler+0x2e8>
		(lsa->PosErr < 0.0)? (lsa->PosMemory = 0) : (lsa->PosMemory = 1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80044c2:	e00b      	b.n	80044dc <LSAErr_Handler+0x2e8>
		(lsa->PosMemory == 0)? (lsa->PosErr = -5) : (lsa->PosErr = 5);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <LSAErr_Handler+0x2e2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <LSAErr_Handler+0x30c>)
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80044d4:	e002      	b.n	80044dc <LSAErr_Handler+0x2e8>
		(lsa->PosMemory == 0)? (lsa->PosErr = -5) : (lsa->PosErr = 5);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <LSAErr_Handler+0x310>)
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bdb0      	pop	{r4, r5, r7, pc}
 80044e4:	40080000 	.word	0x40080000
 80044e8:	40100000 	.word	0x40100000
 80044ec:	40140000 	.word	0x40140000
 80044f0:	40180000 	.word	0x40180000
 80044f4:	401c0000 	.word	0x401c0000
 80044f8:	40200000 	.word	0x40200000
 80044fc:	40120000 	.word	0x40120000
 8004500:	c0a00000 	.word	0xc0a00000
 8004504:	40a00000 	.word	0x40a00000

08004508 <main>:
osSemaphoreId_t DebugSemaphore;
void Debug(void *argument);
#endif

int main(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b096      	sub	sp, #88	; 0x58
 800450c:	af00      	add	r7, sp, #0

	Initialize();
 800450e:	f006 f8a3 	bl	800a658 <Initialize>

	const osThreadAttr_t Calculation_Task_attributes = {
 8004512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f015 fa8e 	bl	8019a3c <memset>
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <main+0xa0>)
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
 8004524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004528:	64bb      	str	r3, [r7, #72]	; 0x48
 800452a:	2318      	movs	r3, #24
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
			.stack_size = 1024 *  4,
			.priority = (osPriority_t) osPriorityNormal,
	};


	const osThreadAttr_t STTChecker_Task_attributes = {
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f015 fa80 	bl	8019a3c <memset>
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <main+0xa4>)
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	2318      	movs	r3, #24
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
	};
	const osSemaphoreAttr_t DebugSemaphore_attributes = {
			.name = "DebugSemaphore"
	};
#endif
	const osSemaphoreAttr_t CalcSemaphore_attributes = {
 800454a:	463b      	mov	r3, r7
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <main+0xa8>)
 8004558:	603b      	str	r3, [r7, #0]
			.name = "InitSemaphore"
	};


	osKernelInitialize();
 800455a:	f010 feed 	bl	8015338 <osKernelInitialize>

	Calculation_Task_Handle = osThreadNew(Calculation, NULL, &Calculation_Task_attributes);
 800455e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004562:	461a      	mov	r2, r3
 8004564:	2100      	movs	r1, #0
 8004566:	4813      	ldr	r0, [pc, #76]	; (80045b4 <main+0xac>)
 8004568:	f010 ff30 	bl	80153cc <osThreadNew>
 800456c:	4603      	mov	r3, r0
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <main+0xb0>)
 8004570:	6013      	str	r3, [r2, #0]
	STTChecker_Task_Handle = osThreadNew(STTChecker, NULL, &STTChecker_Task_attributes);
 8004572:	f107 0310 	add.w	r3, r7, #16
 8004576:	461a      	mov	r2, r3
 8004578:	2100      	movs	r1, #0
 800457a:	4810      	ldr	r0, [pc, #64]	; (80045bc <main+0xb4>)
 800457c:	f010 ff26 	bl	80153cc <osThreadNew>
 8004580:	4603      	mov	r3, r0
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <main+0xb8>)
 8004584:	6013      	str	r3, [r2, #0]
#ifdef PLOT
	Debug_Task_Handle = osThreadNew(Debug, NULL, &Debug_Task_attributes);
	DebugSemaphore = osSemaphoreNew(1, 0, &DebugSemaphore_attributes);
#endif
	CalcSemaphore = osSemaphoreNew(1, 0, &CalcSemaphore_attributes);
 8004586:	463b      	mov	r3, r7
 8004588:	461a      	mov	r2, r3
 800458a:	2100      	movs	r1, #0
 800458c:	2001      	movs	r0, #1
 800458e:	f010 ffca 	bl	8015526 <osSemaphoreNew>
 8004592:	4603      	mov	r3, r0
 8004594:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <main+0xbc>)
 8004596:	6013      	str	r3, [r2, #0]

//	vTraceEnable(TRC_START);

	osKernelStart();
 8004598:	f010 fef2 	bl	8015380 <osKernelStart>
 800459c:	2300      	movs	r3, #0


}
 800459e:	4618      	mov	r0, r3
 80045a0:	3758      	adds	r7, #88	; 0x58
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	0801fab4 	.word	0x0801fab4
 80045ac:	0801fac8 	.word	0x0801fac8
 80045b0:	0801fad8 	.word	0x0801fad8
 80045b4:	080045f9 	.word	0x080045f9
 80045b8:	20006724 	.word	0x20006724
 80045bc:	0800470d 	.word	0x0800470d
 80045c0:	20008124 	.word	0x20008124
 80045c4:	200081b4 	.word	0x200081b4

080045c8 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	osSemaphoreRelease(CalcSemaphore);
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <TIM6_DAC_IRQHandler+0x24>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f011 f883 	bl	80156dc <osSemaphoreRelease>
	testCounter1 = testCounter1 + 1;
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <TIM6_DAC_IRQHandler+0x28>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <TIM6_DAC_IRQHandler+0x28>)
 80045de:	6013      	str	r3, [r2, #0]
//			sprintf(uartbuf, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",\
//					fuz_fleft_vel.K[KP_B], fuz_fleft_vel.K[KI_B], fuz_fleft_vel.K[KD_B],\
//					fuz_fleft_vel.K[KP_P], fuz_fleft_vel.K[KI_P], fuz_fleft_vel.K[KD_P]);
//		UART_DMA_PrintString(&huart5, uartbuf);
//	}
	HAL_TIM_IRQHandler(&htim6);
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <TIM6_DAC_IRQHandler+0x2c>)
 80045e2:	f00f f88b 	bl	80136fc <HAL_TIM_IRQHandler>
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200081b4 	.word	0x200081b4
 80045f0:	20007c9c 	.word	0x20007c9c
 80045f4:	20005124 	.word	0x20005124

080045f8 <Calculation>:



void Calculation(void *argument){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	6078      	str	r0, [r7, #4]
	int led=0;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]


	main_board_1_data_receive.common_instruction = RNS_PENDING;
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <Calculation+0xdc>)
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
	main_board_1_data_receive.common_buffer[0].data = 0;
 800460a:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <Calculation+0xdc>)
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
	main_board_1_data_receive.common_buffer[1].data = 0;
 8004612:	4b30      	ldr	r3, [pc, #192]	; (80046d4 <Calculation+0xdc>)
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
	main_board_1_data_receive.common_buffer[2].data = 0;
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <Calculation+0xdc>)
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
	main_board_1_data_receive.common_buffer[3].data = 0;
 8004622:	4b2c      	ldr	r3, [pc, #176]	; (80046d4 <Calculation+0xdc>)
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	611a      	str	r2, [r3, #16]


	fFPtd=fFKcd=fBPtd=fBKcd=xPtd=yPtd=1.0;
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <Calculation+0xe0>)
 800462c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <Calculation+0xe0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a29      	ldr	r2, [pc, #164]	; (80046dc <Calculation+0xe4>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <Calculation+0xe4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <Calculation+0xe8>)
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <Calculation+0xe8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <Calculation+0xec>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <Calculation+0xec>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <Calculation+0xf0>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <Calculation+0xf0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a25      	ldr	r2, [pc, #148]	; (80046ec <Calculation+0xf4>)
 8004658:	6013      	str	r3, [r2, #0]
	feedback_ins = 0;
 800465a:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <Calculation+0xf8>)
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
	sys.flag = 0;
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <Calculation+0xfc>)
 8004662:	2200      	movs	r2, #0
 8004664:	801a      	strh	r2, [r3, #0]
	fyaw=180.0;
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <Calculation+0x100>)
 8004668:	4a24      	ldr	r2, [pc, #144]	; (80046fc <Calculation+0x104>)
 800466a:	601a      	str	r2, [r3, #0]

	SYSSystemInit();
 800466c:	f007 fe0e 	bl	800c28c <SYSSystemInit>
	STTStateInit();
 8004670:	f006 ffd6 	bl	800b620 <STTStateInit>
	APPStop();
 8004674:	f005 fdbe 	bl	800a1f4 <APPStop>
	APPResetPos();
 8004678:	f004 f83a 	bl	80086f0 <APPResetPos>

	TIMxInit(&htim6, 5000, 84, 6, 0);
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2306      	movs	r3, #6
 8004682:	2254      	movs	r2, #84	; 0x54
 8004684:	f241 3188 	movw	r1, #5000	; 0x1388
 8004688:	481d      	ldr	r0, [pc, #116]	; (8004700 <Calculation+0x108>)
 800468a:	f7fe fdaf 	bl	80031ec <TIMxInit>


	while(1){
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <Calculation+0x10c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004696:	4618      	mov	r0, r3
 8004698:	f010 ffce 	bl	8015638 <osSemaphoreAcquire>
		SYSSystem5ms();
 800469c:	f008 f9d8 	bl	800ca50 <SYSSystem5ms>
		SYSSystemAct();
 80046a0:	f008 ffde 	bl	800d660 <SYSSystemAct>
		if (++led==4){
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d1ee      	bne.n	800468e <Calculation+0x96>
			//			if(APPPrintstatus()){
			//				APPPrinting(&uartbuff);
			//				UARTPrintString_IT(&huart5,uartbuf);
			//			}

			LED1=!LED1;
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <Calculation+0x110>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	4a13      	ldr	r2, [pc, #76]	; (8004708 <Calculation+0x110>)
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2d9      	uxtb	r1, r3
 80046c6:	7813      	ldrb	r3, [r2, #0]
 80046c8:	f361 1345 	bfi	r3, r1, #5, #1
 80046cc:	7013      	strb	r3, [r2, #0]
			led=0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
		osSemaphoreAcquire(CalcSemaphore,osWaitForever);
 80046d2:	e7dc      	b.n	800468e <Calculation+0x96>
 80046d4:	200081c8 	.word	0x200081c8
 80046d8:	20006ee4 	.word	0x20006ee4
 80046dc:	200065b8 	.word	0x200065b8
 80046e0:	20008128 	.word	0x20008128
 80046e4:	20006738 	.word	0x20006738
 80046e8:	20007b98 	.word	0x20007b98
 80046ec:	20006ee8 	.word	0x20006ee8
 80046f0:	20006740 	.word	0x20006740
 80046f4:	20006db0 	.word	0x20006db0
 80046f8:	20007ca0 	.word	0x20007ca0
 80046fc:	43340000 	.word	0x43340000
 8004700:	20005124 	.word	0x20005124
 8004704:	200081b4 	.word	0x200081b4
 8004708:	40020014 	.word	0x40020014

0800470c <STTChecker>:
	}

}


void STTChecker(void *argument){
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]

	while(1){
		STTEventChecker();
 8004714:	f006 ff90 	bl	800b638 <STTEventChecker>
		button();
 8004718:	f006 f8e6 	bl	800a8e8 <button>
		if(state != RNS_S_PENDING){
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <STTChecker+0x30>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <STTChecker+0x24>
			LED2=0;
 8004724:	4a06      	ldr	r2, [pc, #24]	; (8004740 <STTChecker+0x34>)
 8004726:	7813      	ldrb	r3, [r2, #0]
 8004728:	f36f 1345 	bfc	r3, #5, #1
 800472c:	7013      	strb	r3, [r2, #0]
 800472e:	e7f1      	b.n	8004714 <STTChecker+0x8>
		} else {
			LED2=1;
 8004730:	4a03      	ldr	r2, [pc, #12]	; (8004740 <STTChecker+0x34>)
 8004732:	7813      	ldrb	r3, [r2, #0]
 8004734:	f043 0320 	orr.w	r3, r3, #32
 8004738:	7013      	strb	r3, [r2, #0]
		STTEventChecker();
 800473a:	e7eb      	b.n	8004714 <STTChecker+0x8>
 800473c:	20006e60 	.word	0x20006e60
 8004740:	40020814 	.word	0x40020814

08004744 <Error_Handler>:
#endif
/**
 * @brief  This function is executed in case of error occurrence.
 */
void Error_Handler(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
	errorInit = errorInit + 1;
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <Error_Handler+0x18>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	4a03      	ldr	r2, [pc, #12]	; (800475c <Error_Handler+0x18>)
 8004750:	6013      	str	r3, [r2, #0]

}
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	20007b88 	.word	0x20007b88

08004760 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
	pid->error = in;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	; 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800478e:	edc7 0a08 	vstr	s1, [r7, #32]
 8004792:	ed87 1a07 	vstr	s2, [r7, #28]
 8004796:	edc7 1a06 	vstr	s3, [r7, #24]
 800479a:	ed87 2a05 	vstr	s4, [r7, #20]
 800479e:	edc7 2a04 	vstr	s5, [r7, #16]
 80047a2:	ed87 3a03 	vstr	s6, [r7, #12]
 80047a6:	edc7 3a02 	vstr	s7, [r7, #8]
 80047aa:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f81b 	bl	8004818 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80047e2:	bf00      	nop
 80047e4:	3728      	adds	r7, #40	; 0x28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	4603      	mov	r3, r0
 80047f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80047f6:	6079      	str	r1, [r7, #4]
 80047f8:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	3302      	adds	r3, #2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	3304      	adds	r3, #4
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f804 	bl	8004818 <PIDCoeffCalc>
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8004818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	edd3 7a08 	vldr	s15, [r3, #32]
 8004828:	eef5 7a40 	vcmp.f32	s15, #0.0
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	d013      	beq.n	800485a <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	ed93 7a03 	vldr	s14, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	edd3 7a08 	vldr	s15, [r3, #32]
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
 8004858:	e007      	b.n	800486a <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004870:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004878:	d108      	bne.n	800488c <PIDCoeffCalc+0x74>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004880:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004888:	f000 80ef 	beq.w	8004a6a <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489c:	ee17 0a90 	vmov	r0, s15
 80048a0:	f7fb fe52 	bl	8000548 <__aeabi_f2d>
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048ac:	f7fb fcec 	bl	8000288 <__aeabi_dsub>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80048c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c8:	ee17 0a90 	vmov	r0, s15
 80048cc:	f7fb fe3c 	bl	8000548 <__aeabi_f2d>
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048d8:	f7fb fcd8 	bl	800028c <__adddf3>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4620      	mov	r0, r4
 80048e2:	4629      	mov	r1, r5
 80048e4:	f7fb ffb2 	bl	800084c <__aeabi_ddiv>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	f7fc f97a 	bl	8000be8 <__aeabi_d2f>
 80048f4:	4603      	mov	r3, r0
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef1 7a67 	vneg.f32	s15, s15
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fe1d 	bl	8000548 <__aeabi_f2d>
 800490e:	4604      	mov	r4, r0
 8004910:	460d      	mov	r5, r1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	4618      	mov	r0, r3
 8004918:	f7fb fe16 	bl	8000548 <__aeabi_f2d>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	f7fb fcb4 	bl	800028c <__adddf3>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4690      	mov	r8, r2
 800492a:	4699      	mov	r9, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	4618      	mov	r0, r3
 8004932:	f7fb fe09 	bl	8000548 <__aeabi_f2d>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fb fe5b 	bl	80005f8 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4690      	mov	r8, r2
 8004948:	4699      	mov	r9, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	edd3 7a03 	vldr	s15, [r3, #12]
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	ee17 0a90 	vmov	r0, s15
 800495e:	f7fb fdf3 	bl	8000548 <__aeabi_f2d>
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800496a:	f7fb fc8f 	bl	800028c <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f7fb ff69 	bl	800084c <__aeabi_ddiv>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fb fc83 	bl	800028c <__adddf3>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4610      	mov	r0, r2
 800498c:	4619      	mov	r1, r3
 800498e:	f7fc f92b 	bl	8000be8 <__aeabi_d2f>
 8004992:	4602      	mov	r2, r0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80049a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a8:	ee17 0a90 	vmov	r0, s15
 80049ac:	f7fb fdcc 	bl	8000548 <__aeabi_f2d>
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049b8:	f7fb fc66 	bl	8000288 <__aeabi_dsub>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4614      	mov	r4, r2
 80049c2:	461d      	mov	r5, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fdbd 	bl	8000548 <__aeabi_f2d>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fe0f 	bl	80005f8 <__aeabi_dmul>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4614      	mov	r4, r2
 80049e0:	461d      	mov	r5, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fb fdae 	bl	8000548 <__aeabi_f2d>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	f7fb fc4c 	bl	800028c <__adddf3>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4690      	mov	r8, r2
 80049fa:	4699      	mov	r9, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fb fda1 	bl	8000548 <__aeabi_f2d>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	f7fb fdf3 	bl	80005f8 <__aeabi_dmul>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4620      	mov	r0, r4
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fb fc35 	bl	8000288 <__aeabi_dsub>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4614      	mov	r4, r2
 8004a24:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	ee17 0a90 	vmov	r0, s15
 8004a3a:	f7fb fd85 	bl	8000548 <__aeabi_f2d>
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a46:	f7fb fc21 	bl	800028c <__adddf3>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb fefb 	bl	800084c <__aeabi_ddiv>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f7fc f8c3 	bl	8000be8 <__aeabi_d2f>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a68:	e00c      	b.n	8004a84 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004a8e <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ae0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae8:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	edd3 7a08 	vldr	s15, [r3, #32]
 8004afa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b02:	d033      	beq.n	8004b6c <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8004b26:	e003      	b.n	8004b30 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b46:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004b72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7a:	d107      	bne.n	8004b8c <PID+0xc2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8a:	d02c      	beq.n	8004be6 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bf2:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	dd0f      	ble.n	8004c20 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	ed93 7a04 	vldr	s14, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c10:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	7813      	ldrb	r3, [r2, #0]
 8004c18:	f36f 0300 	bfc	r3, #0, #1
 8004c1c:	7013      	strb	r3, [r2, #0]
 8004c1e:	e02b      	b.n	8004c78 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c26:	eef1 7a67 	vneg.f32	s15, s15
 8004c2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c36:	d511      	bpl.n	8004c5c <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c48:	eef1 7a67 	vneg.f32	s15, s15
 8004c4c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	7813      	ldrb	r3, [r2, #0]
 8004c54:	f36f 0300 	bfc	r3, #0, #1
 8004c58:	7013      	strb	r3, [r2, #0]
 8004c5a:	e00d      	b.n	8004c78 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	7813      	ldrb	r3, [r2, #0]
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <PPInit>:
#include "PP.h"

void PPInit  (uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp){
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]

	pp->base_shape=base;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	pp->qeix = qeix;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
	pp->yaw = imu;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	f503 712f 	add.w	r1, r3, #700	; 0x2bc
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f7ff fd42 	bl	8004760 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8004ce8:	ed9f 3a46 	vldr	s6, [pc, #280]	; 8004e04 <PPInit+0x178>
 8004cec:	eddf 2a46 	vldr	s5, [pc, #280]	; 8004e08 <PPInit+0x17c>
 8004cf0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8004cf4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004cf8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004cfc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004d00:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8004e0c <PPInit+0x180>
 8004d04:	f7ff fd3e 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff febd 	bl	8004a8e <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004d26:	461a      	mov	r2, r3
 8004d28:	f7ff fd1a 	bl	8004760 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004d32:	4618      	mov	r0, r3
 8004d34:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8004d38:	ed9f 3a32 	vldr	s6, [pc, #200]	; 8004e04 <PPInit+0x178>
 8004d3c:	eddf 2a32 	vldr	s5, [pc, #200]	; 8004e08 <PPInit+0x17c>
 8004d40:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8004d44:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004d48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004d4c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004d50:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004e0c <PPInit+0x180>
 8004d54:	f7ff fd16 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fe95 	bl	8004a8e <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f503 7131 	add.w	r1, r3, #708	; 0x2c4
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004d76:	461a      	mov	r2, r3
 8004d78:	f7ff fcf2 	bl	8004760 <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004d82:	4618      	mov	r0, r3
 8004d84:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8004d88:	ed9f 3a21 	vldr	s6, [pc, #132]	; 8004e10 <PPInit+0x184>
 8004d8c:	eddf 2a20 	vldr	s5, [pc, #128]	; 8004e10 <PPInit+0x184>
 8004d90:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8004d94:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8004d98:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004e14 <PPInit+0x188>
 8004d9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004da0:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8004e0c <PPInit+0x180>
 8004da4:	f7ff fcee 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fe6d 	bl	8004a8e <PIDDelayInit>

	pp->tol_xy=0.20;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <PPInit+0x18c>)
 8004db8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	pp->tol_z=2.0;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dc2:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	pp->tol_xy_crv= 0.6;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <PPInit+0x190>)
 8004dca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

	pp->f_tol_xy=0.06;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <PPInit+0x194>)
 8004dd2:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
	pp->f_tol_z=1.0;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ddc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	pp->yaw_offset=*(pp->yaw);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24
	pp->prev_real_z = 0;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	615a      	str	r2, [r3, #20]
	pp->real_z = 0;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	3ecccccd 	.word	0x3ecccccd
 8004e08:	00000000 	.word	0x00000000
 8004e0c:	3ba3d70a 	.word	0x3ba3d70a
 8004e10:	3e4ccccd 	.word	0x3e4ccccd
 8004e14:	3d088889 	.word	0x3d088889
 8004e18:	3e4ccccd 	.word	0x3e4ccccd
 8004e1c:	3f19999a 	.word	0x3f19999a
 8004e20:	3d75c28f 	.word	0x3d75c28f

08004e24 <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004e32:	ed87 1a01 	vstr	s2, [r7, #4]
 8004e36:	6038      	str	r0, [r7, #0]

	pp->kp[0]=kp;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	pp->ki[0]=ki;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	pp->kd[0]=kd;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	PIDGainSet(KP,kp,&(pp->x));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004e56:	4619      	mov	r1, r3
 8004e58:	ed97 0a03 	vldr	s0, [r7, #12]
 8004e5c:	2004      	movs	r0, #4
 8004e5e:	f7ff fcc4 	bl	80047ea <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004e68:	4619      	mov	r1, r3
 8004e6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004e6e:	2005      	movs	r0, #5
 8004e70:	f7ff fcbb 	bl	80047ea <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e80:	2006      	movs	r0, #6
 8004e82:	f7ff fcb2 	bl	80047ea <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004e92:	2004      	movs	r0, #4
 8004e94:	f7ff fca9 	bl	80047ea <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	ed97 0a02 	vldr	s0, [r7, #8]
 8004ea4:	2005      	movs	r0, #5
 8004ea6:	f7ff fca0 	bl	80047ea <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004eb6:	2006      	movs	r0, #6
 8004eb8:	f7ff fc97 	bl	80047ea <PIDGainSet>
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	ed87 0a05 	vstr	s0, [r7, #20]
 8004ece:	edc7 0a04 	vstr	s1, [r7, #16]
 8004ed2:	ed87 1a03 	vstr	s2, [r7, #12]
 8004ed6:	edc7 1a02 	vstr	s3, [r7, #8]
 8004eda:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	ed97 0a05 	vldr	s0, [r7, #20]
 8004ee8:	2004      	movs	r0, #4
 8004eea:	f7ff fc7e 	bl	80047ea <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	ed97 0a04 	vldr	s0, [r7, #16]
 8004efa:	2005      	movs	r0, #5
 8004efc:	f7ff fc75 	bl	80047ea <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004f06:	4619      	mov	r1, r3
 8004f08:	ed97 0a03 	vldr	s0, [r7, #12]
 8004f0c:	2006      	movs	r0, #6
 8004f0e:	f7ff fc6c 	bl	80047ea <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8004f18:	4619      	mov	r1, r3
 8004f1a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f1e:	2003      	movs	r0, #3
 8004f20:	f7ff fc63 	bl	80047ea <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	601a      	str	r2, [r3, #0]

}
 8004f2e:	bf00      	nop
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <PP_PIDEndSet>:
void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp){
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f40:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f44:	ed87 1a01 	vstr	s2, [r7, #4]
 8004f48:	6038      	str	r0, [r7, #0]

	pp->kp[1]=kp;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	pp->ki[1]=ki;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	pp->kd[1]=kd;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PIDGainSet(KP,kp,&(pp->x));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004f68:	4619      	mov	r1, r3
 8004f6a:	ed97 0a03 	vldr	s0, [r7, #12]
 8004f6e:	2004      	movs	r0, #4
 8004f70:	f7ff fc3b 	bl	80047ea <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004f80:	2005      	movs	r0, #5
 8004f82:	f7ff fc32 	bl	80047ea <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004f92:	2006      	movs	r0, #6
 8004f94:	f7ff fc29 	bl	80047ea <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	ed97 0a03 	vldr	s0, [r7, #12]
 8004fa4:	2004      	movs	r0, #4
 8004fa6:	f7ff fc20 	bl	80047ea <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	ed97 0a02 	vldr	s0, [r7, #8]
 8004fb6:	2005      	movs	r0, #5
 8004fb8:	f7ff fc17 	bl	80047ea <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	ed97 0a01 	vldr	s0, [r7, #4]
 8004fc8:	2006      	movs	r0, #6
 8004fca:	f7ff fc0e 	bl	80047ea <PIDGainSet>
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp){
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	ed2d 8b02 	vpush	{d8}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]

	int i;
	for(i=0;i<no_point;i++){
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e106      	b.n	80051fa <PP_start+0x224>
		pp->target_vel[i] = point[i][0];
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	3374      	adds	r3, #116	; 0x74
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1];
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	461a      	mov	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	331a      	adds	r3, #26
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	601a      	str	r2, [r3, #0]
		pp->target_y[i] = point[i][2];
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	461a      	mov	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	3328      	adds	r3, #40	; 0x28
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3304      	adds	r3, #4
 8005046:	601a      	str	r2, [r3, #0]
		pp->target_accurate[i] = point[i][5];
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	461a      	mov	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3346      	adds	r3, #70	; 0x46
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3304      	adds	r3, #4
 8005066:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	461a      	mov	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3304      	adds	r3, #4
 8005088:	601a      	str	r2, [r3, #0]
		if(i == 0)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d11f      	bne.n	80050d0 <PP_start+0xfa>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	ed93 7a02 	vldr	s14, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800509c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050a0:	eeb0 7ae7 	vabs.f32	s14, s15
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80050b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80050b4:	eef0 7ae7 	vabs.f32	s15, s15
 80050b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050bc:	eeb0 0a66 	vmov.f32	s0, s13
 80050c0:	f019 f8dc 	bl	801e27c <atanf>
 80050c4:	eef0 7a40 	vmov.f32	s15, s0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
 80050ce:	e03f      	b.n	8005150 <PP_start+0x17a>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	3b1c      	subs	r3, #28
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80050f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	edd3 6a01 	vldr	s13, [r3, #4]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4613      	mov	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	3b1c      	subs	r3, #28
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	edd3 7a01 	vldr	s15, [r3, #4]
 8005128:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800512c:	eef0 7ae7 	vabs.f32	s15, s15
 8005130:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005134:	eeb0 0a66 	vmov.f32	s0, s13
 8005138:	f019 f8a0 	bl	801e27c <atanf>
 800513c:	eef0 7a40 	vmov.f32	s15, s0
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3364      	adds	r3, #100	; 0x64
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3338      	adds	r3, #56	; 0x38
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	461a      	mov	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	ed93 8a04 	vldr	s16, [r3, #16]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	3364      	adds	r3, #100	; 0x64
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	3304      	adds	r3, #4
 800518e:	edd3 7a00 	vldr	s15, [r3]
 8005192:	eeb0 0a67 	vmov.f32	s0, s15
 8005196:	f019 f945 	bl	801e424 <cosf>
 800519a:	eef0 7a40 	vmov.f32	s15, s0
 800519e:	ee68 7a27 	vmul.f32	s15, s16, s15
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3384      	adds	r3, #132	; 0x84
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	3304      	adds	r3, #4
 80051ae:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	461a      	mov	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	ed93 8a04 	vldr	s16, [r3, #16]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	3364      	adds	r3, #100	; 0x64
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	3304      	adds	r3, #4
 80051d2:	edd3 7a00 	vldr	s15, [r3]
 80051d6:	eeb0 0a67 	vmov.f32	s0, s15
 80051da:	f019 f96b 	bl	801e4b4 <sinf>
 80051de:	eef0 7a40 	vmov.f32	s15, s0
 80051e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3394      	adds	r3, #148	; 0x94
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++){
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3301      	adds	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	f6ff aef4 	blt.w	8004fec <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	if(fabs(pp->real_x - pp->target_x[0])){
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800521c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005224:	d017      	beq.n	8005256 <PP_start+0x280>
		PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8005232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005236:	eef0 7ae7 	vabs.f32	s15, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005248:	4619      	mov	r1, r3
 800524a:	eeb0 0a47 	vmov.f32	s0, s14
 800524e:	2002      	movs	r0, #2
 8005250:	f7ff facb 	bl	80047ea <PIDGainSet>
 8005254:	e008      	b.n	8005268 <PP_start+0x292>
	} else {
		PIDGainSet(KE,1.0,&(pp->x));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800525c:	4619      	mov	r1, r3
 800525e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005262:	2002      	movs	r0, #2
 8005264:	f7ff fac1 	bl	80047ea <PIDGainSet>
	}
	if(fabs(pp->real_y - pp->target_y[0])){
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005278:	eef5 7a40 	vcmp.f32	s15, #0.0
 800527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005280:	d017      	beq.n	80052b2 <PP_start+0x2dc>
		PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800528e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005292:	eef0 7ae7 	vabs.f32	s15, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80052a4:	4619      	mov	r1, r3
 80052a6:	eeb0 0a47 	vmov.f32	s0, s14
 80052aa:	2002      	movs	r0, #2
 80052ac:	f7ff fa9d 	bl	80047ea <PIDGainSet>
 80052b0:	e008      	b.n	80052c4 <PP_start+0x2ee>
	} else {
		PIDGainSet(KE,1.0,&(pp->y));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80052b8:	4619      	mov	r1, r3
 80052ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80052be:	2002      	movs	r0, #2
 80052c0:	f7ff fa93 	bl	80047ea <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80052d0:	4619      	mov	r1, r3
 80052d2:	eeb0 0a67 	vmov.f32	s0, s15
 80052d6:	2003      	movs	r0, #3
 80052d8:	f7ff fa87 	bl	80047ea <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80052e8:	4619      	mov	r1, r3
 80052ea:	eeb0 0a67 	vmov.f32	s0, s15
 80052ee:	2003      	movs	r0, #3
 80052f0:	f7ff fa7b 	bl	80047ea <PIDGainSet>

	pp->point_count=0;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	pp->crnt_crv_pt=0;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	pp->pp_crv_calc=0;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	pp->pp_start=1;
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->final_f=0;
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005320:	f36f 0382 	bfc	r3, #2, #1
 8005324:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	pp->rotate=0;
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800532e:	f36f 03c3 	bfc	r3, #3, #1
 8005332:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

}
 8005336:	bf00      	nop
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	ecbd 8b02 	vpop	{d8}
 8005340:	bd80      	pop	{r7, pc}

08005342 <PP_stop>:

void PP_stop (PathPlan_t *pp){
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]

	pp->pp_start=0;
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8005350:	f36f 0300 	bfc	r3, #0, #1
 8005354:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
	PIDDelayInit(&(pp->x));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fb95 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fb8f 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fb89 	bl	8004a8e <PIDDelayInit>

}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <PP_reset>:

void PP_reset (PathPlan_t *pp){
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c
	pp->pos_y = 0.0;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->prev_x = 0.0;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
	pp->prev_y = 0.0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_real_x = 0.0;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
	pp->prev_real_y = 0.0;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	649a      	str	r2, [r3, #72]	; 0x48
	pp->del_pos_x = 0.0;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->del_pos_y = 0.0;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	651a      	str	r2, [r3, #80]	; 0x50
	//	pp->yaw_constant = 0.0;
	//	pp->yaw_offset = *(pp->yaw);
	//	pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34
	pp->real_y=0.0;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	645a      	str	r2, [r3, #68]	; 0x44
	PIDDelayInit(&(pp->x));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fb53 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fb4d 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fb47 	bl	8004a8e <PIDDelayInit>

	QEIReset(QEI2);
 8005400:	2002      	movs	r0, #2
 8005402:	f7fc fda1 	bl	8001f48 <QEIReset>
	QEIReset(QEI5);
 8005406:	2005      	movs	r0, #5
 8005408:	f7fc fd9e 	bl	8001f48 <QEIReset>

	QEIWrite(QEI2, 500);
 800540c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005410:	2002      	movs	r0, #2
 8005412:	f7fc fd31 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI5, 500);
 8005416:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800541a:	2005      	movs	r0, #5
 800541c:	f7fc fd2c 	bl	8001e78 <QEIWrite>
	//	pp->real_z=0.0;
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp){
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005432:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]
	pp->yaw_constant=0;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	60da      	str	r2, [r3, #12]

}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp){
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]

	pp->pp_no_crv_pts = z;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530

}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <PathPlan>:

void PathPlan (PathPlan_t *pp){
 8005478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800547c:	ed2d 8b02 	vpush	{d8}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]

	// Called every 5ms

	if(pp->point_start){
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8174 	beq.w	8005780 <PathPlan+0x308>
		pp->pos_x=*(pp->qeix);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
		pp->pos_y=*(pp->qeiy);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c

		if(*(pp->yaw) < 50.0){
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80054f0 <PathPlan+0x78>
 80054b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	d518      	bpl.n	80054f4 <PathPlan+0x7c>
			if(pp->prev_yaw > 330.0){
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80054c8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80054ec <PathPlan+0x74>
 80054cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d4:	dd2d      	ble.n	8005532 <PathPlan+0xba>
				pp->yaw_constant++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80054dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 80054ea:	e022      	b.n	8005532 <PathPlan+0xba>
 80054ec:	43a50000 	.word	0x43a50000
 80054f0:	42480000 	.word	0x42480000
			}
		}else if(*(pp->yaw) > 330.0){
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	edd3 7a00 	vldr	s15, [r3]
 80054fc:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80054ec <PathPlan+0x74>
 8005500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	dd13      	ble.n	8005532 <PathPlan+0xba>
			if(pp->prev_yaw < 50.0){
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005510:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80054f0 <PathPlan+0x78>
 8005514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	d509      	bpl.n	8005532 <PathPlan+0xba>
				pp->yaw_constant--;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			}
		}

		pp->prev_yaw = *(pp->yaw);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb f800 	bl	8000548 <__aeabi_f2d>
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	4618      	mov	r0, r3
 8005552:	f7fa fff9 	bl	8000548 <__aeabi_f2d>
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	4b87      	ldr	r3, [pc, #540]	; (8005778 <PathPlan+0x300>)
 800555c:	f7fb f84c 	bl	80005f8 <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4620      	mov	r0, r4
 8005566:	4629      	mov	r1, r5
 8005568:	f7fa fe90 	bl	800028c <__adddf3>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4614      	mov	r4, r2
 8005572:	461d      	mov	r5, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f7fa ffe5 	bl	8000548 <__aeabi_f2d>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4620      	mov	r0, r4
 8005584:	4629      	mov	r1, r5
 8005586:	f7fa fe7f 	bl	8000288 <__aeabi_dsub>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4614      	mov	r4, r2
 8005590:	461d      	mov	r5, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa ffd6 	bl	8000548 <__aeabi_f2d>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	f7fa fe72 	bl	800028c <__adddf3>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7fb fb1a 	bl	8000be8 <__aeabi_d2f>
 80055b4:	4602      	mov	r2, r0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]
		pp->real_z_rad = (pp->real_z / 180.0) * 3.141593;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa ffc2 	bl	8000548 <__aeabi_f2d>
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	4b6c      	ldr	r3, [pc, #432]	; (800577c <PathPlan+0x304>)
 80055ca:	f7fb f93f 	bl	800084c <__aeabi_ddiv>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	a364      	add	r3, pc, #400	; (adr r3, 8005768 <PathPlan+0x2f0>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f80c 	bl	80005f8 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	f7fb fafe 	bl	8000be8 <__aeabi_d2f>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	619a      	str	r2, [r3, #24]

		pp->del_pos_x = pp->pos_x - pp->prev_x;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = pp->pos_y - pp->prev_y;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800562a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	edd3 7a06 	vldr	s15, [r3, #24]
 8005634:	eeb0 0a67 	vmov.f32	s0, s15
 8005638:	f018 fef4 	bl	801e424 <cosf>
 800563c:	eef0 7a40 	vmov.f32	s15, s0
 8005640:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005650:	ee77 8a67 	vsub.f32	s17, s14, s15
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	edd3 7a06 	vldr	s15, [r3, #24]
 800565a:	eeb0 0a67 	vmov.f32	s0, s15
 800565e:	f018 ff29 	bl	801e4b4 <sinf>
 8005662:	eef0 7a40 	vmov.f32	s15, s0
 8005666:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 800566a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005684:	eeb1 8a67 	vneg.f32	s16, s15
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	edd3 7a06 	vldr	s15, [r3, #24]
 800568e:	eeb0 0a67 	vmov.f32	s0, s15
 8005692:	f018 ff0f 	bl	801e4b4 <sinf>
 8005696:	eef0 7a40 	vmov.f32	s15, s0
 800569a:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80056aa:	ee77 8a67 	vsub.f32	s17, s14, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80056b4:	eeb0 0a67 	vmov.f32	s0, s15
 80056b8:	f018 feb4 	bl	801e424 <cosf>
 80056bc:	eef0 7a40 	vmov.f32	s15, s0
 80056c0:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80056c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		pp->real_x = pp->real_x + pp->del_pos_x;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80056da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		pp->real_y = pp->real_y + pp->del_pos_y;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80056f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

		pp->prev_x = pp->pos_x;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
		pp->prev_y = pp->pos_y;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

		pp->fWVel = (pp->real_z_rad - pp->prev_real_z_rad) / 0.005;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	edd3 7a07 	vldr	s15, [r3, #28]
 8005716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800571a:	ee17 0a90 	vmov	r0, s15
 800571e:	f7fa ff13 	bl	8000548 <__aeabi_f2d>
 8005722:	a313      	add	r3, pc, #76	; (adr r3, 8005770 <PathPlan+0x2f8>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fb f890 	bl	800084c <__aeabi_ddiv>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	f7fb fa58 	bl	8000be8 <__aeabi_d2f>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8005740:	601a      	str	r2, [r3, #0]

		pp->prev_real_x = pp->real_x;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
		pp->prev_real_y = pp->real_y;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	649a      	str	r2, [r3, #72]	; 0x48
		pp->prev_real_z= pp->real_z;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	615a      	str	r2, [r3, #20]
		pp->prev_real_z_rad = pp->real_z_rad;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	61da      	str	r2, [r3, #28]
 8005762:	e00d      	b.n	8005780 <PathPlan+0x308>
 8005764:	f3af 8000 	nop.w
 8005768:	82c2bd7f 	.word	0x82c2bd7f
 800576c:	400921fb 	.word	0x400921fb
 8005770:	47ae147b 	.word	0x47ae147b
 8005774:	3f747ae1 	.word	0x3f747ae1
 8005778:	40768000 	.word	0x40768000
 800577c:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	f002 866a 	beq.w	8008466 <PathPlan+0x2fee>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f002 8661 	beq.w	8008466 <PathPlan+0x2fee>

		if(pp->pp_crv_radius[pp->point_count]){
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	3304      	adds	r3, #4
 80057b6:	edd3 7a00 	vldr	s15, [r3]
 80057ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c2:	f001 838b 	beq.w	8006edc <PathPlan+0x1a64>


			if(!pp->pp_crv_calc){
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 8208 	bne.w	8005be2 <PathPlan+0x76a>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	331a      	adds	r3, #26
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	ed93 7a00 	vldr	s14, [r3]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80057ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80057f2:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	3304      	adds	r3, #4
 8005808:	edd3 8a00 	vldr	s17, [r3]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	3328      	adds	r3, #40	; 0x28
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	3304      	adds	r3, #4
 800581c:	ed93 7a00 	vldr	s14, [r3]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005826:	ee77 6a67 	vsub.f32	s13, s14, s15
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	331a      	adds	r3, #26
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	ed93 7a00 	vldr	s14, [r3]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005846:	eef0 0a67 	vmov.f32	s1, s15
 800584a:	eeb0 0a66 	vmov.f32	s0, s13
 800584e:	f018 fe73 	bl	801e538 <atan2f>
 8005852:	eef0 7a40 	vmov.f32	s15, s0
 8005856:	eeb0 0a67 	vmov.f32	s0, s15
 800585a:	f018 fe2b 	bl	801e4b4 <sinf>
 800585e:	eef0 7a40 	vmov.f32	s15, s0
 8005862:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005866:	ee78 7a27 	vadd.f32	s15, s16, s15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8005870:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	3328      	adds	r3, #40	; 0x28
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	3304      	adds	r3, #4
 8005884:	ed93 7a00 	vldr	s14, [r3]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800588e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005892:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005896:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	3304      	adds	r3, #4
 80058ac:	edd3 8a00 	vldr	s17, [r3]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	3328      	adds	r3, #40	; 0x28
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	3304      	adds	r3, #4
 80058c0:	ed93 7a00 	vldr	s14, [r3]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80058ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	331a      	adds	r3, #26
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	ed93 7a00 	vldr	s14, [r3]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80058e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ea:	eef0 0a67 	vmov.f32	s1, s15
 80058ee:	eeb0 0a66 	vmov.f32	s0, s13
 80058f2:	f018 fe21 	bl	801e538 <atan2f>
 80058f6:	eef0 7a40 	vmov.f32	s15, s0
 80058fa:	eeb0 0a67 	vmov.f32	s0, s15
 80058fe:	f018 fd91 	bl	801e424 <cosf>
 8005902:	eef0 7a40 	vmov.f32	s15, s0
 8005906:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800590a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8005914:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	3338      	adds	r3, #56	; 0x38
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	edd3 6a00 	vldr	s13, [r3]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800593e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005966:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 800596a:	2300      	movs	r3, #0
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	e12d      	b.n	8005bcc <PathPlan+0x754>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8005970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005974:	edd7 7a03 	vldr	s15, [r7, #12]
 8005978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800597c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005980:	eeb0 0a67 	vmov.f32	s0, s15
 8005984:	f018 fdda 	bl	801e53c <powf>
 8005988:	eeb0 7a40 	vmov.f32	s14, s0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	ee17 0a90 	vmov	r0, s15
 800599a:	f7fa fdd5 	bl	8000548 <__aeabi_f2d>
 800599e:	4604      	mov	r4, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80059aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ae:	ee17 0a90 	vmov	r0, s15
 80059b2:	f7fa fdc9 	bl	8000548 <__aeabi_f2d>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	f7fa fc67 	bl	800028c <__adddf3>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4690      	mov	r8, r2
 80059c4:	4699      	mov	r9, r3
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7fa fdbe 	bl	8000548 <__aeabi_f2d>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fa fe10 	bl	80005f8 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4690      	mov	r8, r2
 80059de:	4699      	mov	r9, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fa fdad 	bl	8000548 <__aeabi_f2d>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fa fdff 	bl	80005f8 <__aeabi_dmul>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4620      	mov	r0, r4
 8005a00:	4629      	mov	r1, r5
 8005a02:	f7fa fc43 	bl	800028c <__adddf3>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	461d      	mov	r5, r3
 8005a0e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005a12:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a16:	f018 fd91 	bl	801e53c <powf>
 8005a1a:	eeb0 7a40 	vmov.f32	s14, s0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	331a      	adds	r3, #26
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	edd3 7a00 	vldr	s15, [r3]
 8005a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a34:	ee17 0a90 	vmov	r0, s15
 8005a38:	f7fa fd86 	bl	8000548 <__aeabi_f2d>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4620      	mov	r0, r4
 8005a42:	4629      	mov	r1, r5
 8005a44:	f7fa fc22 	bl	800028c <__adddf3>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f7fb f8ca 	bl	8000be8 <__aeabi_d2f>
 8005a54:	4601      	mov	r1, r0
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 8005a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a70:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005a74:	eeb0 0a67 	vmov.f32	s0, s15
 8005a78:	f018 fd60 	bl	801e53c <powf>
 8005a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8a:	ee17 0a90 	vmov	r0, s15
 8005a8e:	f7fa fd5b 	bl	8000548 <__aeabi_f2d>
 8005a92:	4604      	mov	r4, r0
 8005a94:	460d      	mov	r5, r1
 8005a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aa2:	ee17 0a90 	vmov	r0, s15
 8005aa6:	f7fa fd4f 	bl	8000548 <__aeabi_f2d>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	f7fa fbed 	bl	800028c <__adddf3>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4690      	mov	r8, r2
 8005ab8:	4699      	mov	r9, r3
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7fa fd44 	bl	8000548 <__aeabi_f2d>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fa fd96 	bl	80005f8 <__aeabi_dmul>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4690      	mov	r8, r2
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fa fd33 	bl	8000548 <__aeabi_f2d>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	f7fa fd85 	bl	80005f8 <__aeabi_dmul>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	f7fa fbc9 	bl	800028c <__adddf3>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	461d      	mov	r5, r3
 8005b02:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8005b06:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b0a:	f018 fd17 	bl	801e53c <powf>
 8005b0e:	eeb0 7a40 	vmov.f32	s14, s0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	3328      	adds	r3, #40	; 0x28
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	edd3 7a00 	vldr	s15, [r3]
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	ee17 0a90 	vmov	r0, s15
 8005b2e:	f7fa fd0b 	bl	8000548 <__aeabi_f2d>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4620      	mov	r0, r4
 8005b38:	4629      	mov	r1, r5
 8005b3a:	f7fa fba7 	bl	800028c <__adddf3>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	f7fb f84f 	bl	8000be8 <__aeabi_d2f>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	ed93 7a00 	vldr	s14, [r3]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	edd3 6a00 	vldr	s13, [r3]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bba:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc2:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60bb      	str	r3, [r7, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	f6ff aecb 	blt.w	8005970 <PathPlan+0x4f8>
				}
//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	ed93 7a00 	vldr	s14, [r3]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	ed93 7a00 	vldr	s14, [r3]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	ed93 7a00 	vldr	s14, [r3]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d14a      	bne.n	8005cf6 <PathPlan+0x87e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8005c66:	eef0 7ae7 	vabs.f32	s15, s15
 8005c6a:	ee17 0a90 	vmov	r0, s15
 8005c6e:	f7fa fc6b 	bl	8000548 <__aeabi_f2d>
 8005c72:	4604      	mov	r4, r0
 8005c74:	460d      	mov	r5, r1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8005c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8005c80:	ee17 0a90 	vmov	r0, s15
 8005c84:	f7fa fc60 	bl	8000548 <__aeabi_f2d>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fafc 	bl	800028c <__adddf3>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ca4:	f7fa fdd2 	bl	800084c <__aeabi_ddiv>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4614      	mov	r4, r2
 8005cae:	461d      	mov	r5, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fc46 	bl	8000548 <__aeabi_f2d>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa ff0a 	bl	8000adc <__aeabi_dcmplt>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <PathPlan+0x87e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8005cd4:	eeb0 7ae7 	vabs.f32	s14, s15
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8005cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce6:	d506      	bpl.n	8005cf6 <PathPlan+0x87e>
				pp->pp_lck = 1.0;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005cee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	e005      	b.n	8005d02 <PathPlan+0x88a>
			else
				pp->pp_lck = 0.0;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005d08:	edd3 7a00 	vldr	s15, [r3]
 8005d0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005d1a:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8005fc0 <PathPlan+0xb48>
 8005d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d34:	d811      	bhi.n	8005d5a <PathPlan+0x8e2>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005d3c:	ed93 7a00 	vldr	s14, [r3]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005d54:	edc3 7a00 	vstr	s15, [r3]
 8005d58:	e034      	b.n	8005dc4 <PathPlan+0x94c>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005d60:	edd3 6a00 	vldr	s13, [r3]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005d6a:	ed93 7a00 	vldr	s14, [r3]
 8005d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005d78:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fa fbdf 	bl	8000548 <__aeabi_f2d>
 8005d8a:	a38b      	add	r3, pc, #556	; (adr r3, 8005fb8 <PathPlan+0xb40>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa feb8 	bl	8000b04 <__aeabi_dcmpge>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <PathPlan+0x92c>
					pp->pp_lck_enb = 1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8005da2:	e003      	b.n	8005dac <PathPlan+0x934>
				else
					pp->pp_lck_enb = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8005dca:	eef0 7ae7 	vabs.f32	s15, s15
 8005dce:	ee17 0a90 	vmov	r0, s15
 8005dd2:	f7fa fbb9 	bl	8000548 <__aeabi_f2d>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8005de0:	eef0 7ae7 	vabs.f32	s15, s15
 8005de4:	ee17 0a90 	vmov	r0, s15
 8005de8:	f7fa fbae 	bl	8000548 <__aeabi_f2d>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4620      	mov	r0, r4
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7fa fa4a 	bl	800028c <__adddf3>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e08:	f7fa fd20 	bl	800084c <__aeabi_ddiv>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	461d      	mov	r5, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa fb94 	bl	8000548 <__aeabi_f2d>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa fe58 	bl	8000adc <__aeabi_dcmplt>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8464 	beq.w	80066fc <PathPlan+0x1284>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8005e40:	3b01      	subs	r3, #1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	f280 8135 	bge.w	80060b2 <PathPlan+0xc3a>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8005e4e:	edd3 7a00 	vldr	s15, [r3]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8005e58:	4619      	mov	r1, r3
 8005e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e5e:	2004      	movs	r0, #4
 8005e60:	f7fe fcc3 	bl	80047ea <PIDGainSet>
					pp->crnt_crv_pt++;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	ed93 7a00 	vldr	s14, [r3]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	ed93 7a00 	vldr	s14, [r3]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	ed93 7a00 	vldr	s14, [r3]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8

					if(pp->target_x[pp->point_count]-pp->real_x){
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	331a      	adds	r3, #26
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	ed93 7a00 	vldr	s14, [r3]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005efa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f02:	d01d      	beq.n	8005f40 <PathPlan+0xac8>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	331a      	adds	r3, #26
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	ed93 7a00 	vldr	s14, [r3]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f20:	eef0 7ae7 	vabs.f32	s15, s15
 8005f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005f32:	4619      	mov	r1, r3
 8005f34:	eeb0 0a47 	vmov.f32	s0, s14
 8005f38:	2002      	movs	r0, #2
 8005f3a:	f7fe fc56 	bl	80047ea <PIDGainSet>
 8005f3e:	e008      	b.n	8005f52 <PathPlan+0xada>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005f46:	4619      	mov	r1, r3
 8005f48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005f4c:	2002      	movs	r0, #2
 8005f4e:	f7fe fc4c 	bl	80047ea <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	3328      	adds	r3, #40	; 0x28
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	ed93 7a00 	vldr	s14, [r3]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f78:	d024      	beq.n	8005fc4 <PathPlan+0xb4c>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	3328      	adds	r3, #40	; 0x28
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	3304      	adds	r3, #4
 8005f8a:	ed93 7a00 	vldr	s14, [r3]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f98:	eef0 7ae7 	vabs.f32	s15, s15
 8005f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005faa:	4619      	mov	r1, r3
 8005fac:	eeb0 0a47 	vmov.f32	s0, s14
 8005fb0:	2002      	movs	r0, #2
 8005fb2:	f7fe fc1a 	bl	80047ea <PIDGainSet>
 8005fb6:	e00e      	b.n	8005fd6 <PathPlan+0xb5e>
 8005fb8:	66666666 	.word	0x66666666
 8005fbc:	3fee6666 	.word	0x3fee6666
 8005fc0:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005fca:	4619      	mov	r1, r3
 8005fcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005fd0:	2002      	movs	r0, #2
 8005fd2:	f7fe fc0a 	bl	80047ea <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fe8:	2004      	movs	r0, #4
 8005fea:	f7fe fbfe 	bl	80047ea <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8006000:	2004      	movs	r0, #4
 8006002:	f7fe fbf2 	bl	80047ea <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006012:	4619      	mov	r1, r3
 8006014:	eeb0 0a67 	vmov.f32	s0, s15
 8006018:	2005      	movs	r0, #5
 800601a:	f7fe fbe6 	bl	80047ea <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800602a:	4619      	mov	r1, r3
 800602c:	eeb0 0a67 	vmov.f32	s0, s15
 8006030:	2005      	movs	r0, #5
 8006032:	f7fe fbda 	bl	80047ea <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006042:	4619      	mov	r1, r3
 8006044:	eeb0 0a67 	vmov.f32	s0, s15
 8006048:	2006      	movs	r0, #6
 800604a:	f7fe fbce 	bl	80047ea <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800605a:	4619      	mov	r1, r3
 800605c:	eeb0 0a67 	vmov.f32	s0, s15
 8006060:	2006      	movs	r0, #6
 8006062:	f7fe fbc2 	bl	80047ea <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	3384      	adds	r3, #132	; 0x84
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	3304      	adds	r3, #4
 8006076:	edd3 7a00 	vldr	s15, [r3]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006080:	4619      	mov	r1, r3
 8006082:	eeb0 0a67 	vmov.f32	s0, s15
 8006086:	2003      	movs	r0, #3
 8006088:	f7fe fbaf 	bl	80047ea <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	3394      	adds	r3, #148	; 0x94
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	edd3 7a00 	vldr	s15, [r3]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80060a4:	4619      	mov	r1, r3
 80060a6:	eeb0 0a67 	vmov.f32	s0, s15
 80060aa:	2003      	movs	r0, #3
 80060ac:	f7fe fb9d 	bl	80047ea <PIDGainSet>
 80060b0:	e324      	b.n	80066fc <PathPlan+0x1284>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 80060be:	3b01      	subs	r3, #1
 80060c0:	429a      	cmp	r2, r3
 80060c2:	f040 8252 	bne.w	800656a <PathPlan+0x10f2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80060d2:	3b01      	subs	r3, #1
 80060d4:	429a      	cmp	r2, r3
 80060d6:	f280 8248 	bge.w	800656a <PathPlan+0x10f2>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80060e0:	eef0 7ae7 	vabs.f32	s15, s15
 80060e4:	ee17 0a90 	vmov	r0, s15
 80060e8:	f7fa fa2e 	bl	8000548 <__aeabi_f2d>
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80060f6:	eef0 7ae7 	vabs.f32	s15, s15
 80060fa:	ee17 0a90 	vmov	r0, s15
 80060fe:	f7fa fa23 	bl	8000548 <__aeabi_f2d>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa f8bf 	bl	800028c <__adddf3>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800611e:	f7fa fb95 	bl	800084c <__aeabi_ddiv>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4614      	mov	r4, r2
 8006128:	461d      	mov	r5, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006130:	4618      	mov	r0, r3
 8006132:	f7fa fa09 	bl	8000548 <__aeabi_f2d>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4620      	mov	r0, r4
 800613c:	4629      	mov	r1, r5
 800613e:	f7fa fccd 	bl	8000adc <__aeabi_dcmplt>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 82d8 	beq.w	80066fa <PathPlan+0x1282>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006150:	eeb0 7ae7 	vabs.f32	s14, s15
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 800615a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800615e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006162:	d400      	bmi.n	8006166 <PathPlan+0xcee>
 8006164:	e2c9      	b.n	80066fa <PathPlan+0x1282>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	3346      	adds	r3, #70	; 0x46
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	3304      	adds	r3, #4
 8006176:	edd3 7a00 	vldr	s15, [r3]
 800617a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800617e:	eef4 7a47 	vcmp.f32	s15, s14
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	f040 80fd 	bne.w	8006384 <PathPlan+0xf0c>
							if(pp->pp_lck_enb == 1){
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 82b2 	bne.w	80066fa <PathPlan+0x1282>

								pp->point_count++;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
								if(pp->target_x[pp->point_count]-pp->real_x){
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	331a      	adds	r3, #26
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	ed93 7a00 	vldr	s14, [r3]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80061bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c8:	d01d      	beq.n	8006206 <PathPlan+0xd8e>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	331a      	adds	r3, #26
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	ed93 7a00 	vldr	s14, [r3]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80061e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e6:	eef0 7ae7 	vabs.f32	s15, s15
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80061f8:	4619      	mov	r1, r3
 80061fa:	eeb0 0a47 	vmov.f32	s0, s14
 80061fe:	2002      	movs	r0, #2
 8006200:	f7fe faf3 	bl	80047ea <PIDGainSet>
 8006204:	e008      	b.n	8006218 <PathPlan+0xda0>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800620c:	4619      	mov	r1, r3
 800620e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006212:	2002      	movs	r0, #2
 8006214:	f7fe fae9 	bl	80047ea <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	3328      	adds	r3, #40	; 0x28
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	3304      	adds	r3, #4
 8006228:	ed93 7a00 	vldr	s14, [r3]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006236:	eef5 7a40 	vcmp.f32	s15, #0.0
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	d01e      	beq.n	800627e <PathPlan+0xe06>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	3328      	adds	r3, #40	; 0x28
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	3304      	adds	r3, #4
 8006250:	ed93 7a00 	vldr	s14, [r3]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800625a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625e:	eef0 7ae7 	vabs.f32	s15, s15
 8006262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006270:	4619      	mov	r1, r3
 8006272:	eeb0 0a47 	vmov.f32	s0, s14
 8006276:	2002      	movs	r0, #2
 8006278:	f7fe fab7 	bl	80047ea <PIDGainSet>
 800627c:	e008      	b.n	8006290 <PathPlan+0xe18>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006284:	4619      	mov	r1, r3
 8006286:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800628a:	2002      	movs	r0, #2
 800628c:	f7fe faad 	bl	80047ea <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800629c:	4619      	mov	r1, r3
 800629e:	eeb0 0a67 	vmov.f32	s0, s15
 80062a2:	2004      	movs	r0, #4
 80062a4:	f7fe faa1 	bl	80047ea <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80062b4:	4619      	mov	r1, r3
 80062b6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ba:	2004      	movs	r0, #4
 80062bc:	f7fe fa95 	bl	80047ea <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80062cc:	4619      	mov	r1, r3
 80062ce:	eeb0 0a67 	vmov.f32	s0, s15
 80062d2:	2005      	movs	r0, #5
 80062d4:	f7fe fa89 	bl	80047ea <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80062e4:	4619      	mov	r1, r3
 80062e6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ea:	2005      	movs	r0, #5
 80062ec:	f7fe fa7d 	bl	80047ea <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80062fc:	4619      	mov	r1, r3
 80062fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006302:	2006      	movs	r0, #6
 8006304:	f7fe fa71 	bl	80047ea <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006314:	4619      	mov	r1, r3
 8006316:	eeb0 0a67 	vmov.f32	s0, s15
 800631a:	2006      	movs	r0, #6
 800631c:	f7fe fa65 	bl	80047ea <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	3384      	adds	r3, #132	; 0x84
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	3304      	adds	r3, #4
 8006330:	edd3 7a00 	vldr	s15, [r3]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800633a:	4619      	mov	r1, r3
 800633c:	eeb0 0a67 	vmov.f32	s0, s15
 8006340:	2003      	movs	r0, #3
 8006342:	f7fe fa52 	bl	80047ea <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	3394      	adds	r3, #148	; 0x94
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	edd3 7a00 	vldr	s15, [r3]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800635e:	4619      	mov	r1, r3
 8006360:	eeb0 0a67 	vmov.f32	s0, s15
 8006364:	2003      	movs	r0, #3
 8006366:	f7fe fa40 	bl	80047ea <PIDGainSet>
								pp->crnt_crv_pt=0;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528

								pp->pp_lck_enb = 0;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006382:	e1ba      	b.n	80066fa <PathPlan+0x1282>

							}
						}else{
							pp->point_count++;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							if(pp->target_x[pp->point_count]-pp->real_x){
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	331a      	adds	r3, #26
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	ed93 7a00 	vldr	s14, [r3]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	d01d      	beq.n	80063f4 <PathPlan+0xf7c>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	331a      	adds	r3, #26
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	ed93 7a00 	vldr	s14, [r3]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80063d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063d4:	eef0 7ae7 	vabs.f32	s15, s15
 80063d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80063e6:	4619      	mov	r1, r3
 80063e8:	eeb0 0a47 	vmov.f32	s0, s14
 80063ec:	2002      	movs	r0, #2
 80063ee:	f7fe f9fc 	bl	80047ea <PIDGainSet>
 80063f2:	e008      	b.n	8006406 <PathPlan+0xf8e>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80063fa:	4619      	mov	r1, r3
 80063fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006400:	2002      	movs	r0, #2
 8006402:	f7fe f9f2 	bl	80047ea <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	3328      	adds	r3, #40	; 0x28
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	3304      	adds	r3, #4
 8006416:	ed93 7a00 	vldr	s14, [r3]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642c:	d01e      	beq.n	800646c <PathPlan+0xff4>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	3328      	adds	r3, #40	; 0x28
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	ed93 7a00 	vldr	s14, [r3]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800644c:	eef0 7ae7 	vabs.f32	s15, s15
 8006450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800645e:	4619      	mov	r1, r3
 8006460:	eeb0 0a47 	vmov.f32	s0, s14
 8006464:	2002      	movs	r0, #2
 8006466:	f7fe f9c0 	bl	80047ea <PIDGainSet>
 800646a:	e008      	b.n	800647e <PathPlan+0x1006>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006472:	4619      	mov	r1, r3
 8006474:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006478:	2002      	movs	r0, #2
 800647a:	f7fe f9b6 	bl	80047ea <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800648a:	4619      	mov	r1, r3
 800648c:	eeb0 0a67 	vmov.f32	s0, s15
 8006490:	2004      	movs	r0, #4
 8006492:	f7fe f9aa 	bl	80047ea <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	edd3 7aa3 	vldr	s15, [r3, #652]	; 0x28c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80064a2:	4619      	mov	r1, r3
 80064a4:	eeb0 0a67 	vmov.f32	s0, s15
 80064a8:	2004      	movs	r0, #4
 80064aa:	f7fe f99e 	bl	80047ea <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80064ba:	4619      	mov	r1, r3
 80064bc:	eeb0 0a67 	vmov.f32	s0, s15
 80064c0:	2005      	movs	r0, #5
 80064c2:	f7fe f992 	bl	80047ea <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	edd3 7aa5 	vldr	s15, [r3, #660]	; 0x294
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80064d2:	4619      	mov	r1, r3
 80064d4:	eeb0 0a67 	vmov.f32	s0, s15
 80064d8:	2005      	movs	r0, #5
 80064da:	f7fe f986 	bl	80047ea <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80064ea:	4619      	mov	r1, r3
 80064ec:	eeb0 0a67 	vmov.f32	s0, s15
 80064f0:	2006      	movs	r0, #6
 80064f2:	f7fe f97a 	bl	80047ea <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006502:	4619      	mov	r1, r3
 8006504:	eeb0 0a67 	vmov.f32	s0, s15
 8006508:	2006      	movs	r0, #6
 800650a:	f7fe f96e 	bl	80047ea <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	3384      	adds	r3, #132	; 0x84
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	3304      	adds	r3, #4
 800651e:	edd3 7a00 	vldr	s15, [r3]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006528:	4619      	mov	r1, r3
 800652a:	eeb0 0a67 	vmov.f32	s0, s15
 800652e:	2003      	movs	r0, #3
 8006530:	f7fe f95b 	bl	80047ea <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	3394      	adds	r3, #148	; 0x94
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	edd3 7a00 	vldr	s15, [r3]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f503 7359 	add.w	r3, r3, #868	; 0x364
 800654c:	4619      	mov	r1, r3
 800654e:	eeb0 0a67 	vmov.f32	s0, s15
 8006552:	2003      	movs	r0, #3
 8006554:	f7fe f949 	bl	80047ea <PIDGainSet>
							pp->crnt_crv_pt=0;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006568:	e0c7      	b.n	80066fa <PathPlan+0x1282>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	; 0x524
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8006576:	3b01      	subs	r3, #1
 8006578:	429a      	cmp	r2, r3
 800657a:	f040 80bf 	bne.w	80066fc <PathPlan+0x1284>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800658a:	3b01      	subs	r3, #1
 800658c:	429a      	cmp	r2, r3
 800658e:	f040 80b5 	bne.w	80066fc <PathPlan+0x1284>

					if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006598:	eeb0 7ae7 	vabs.f32	s14, s15
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80065a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065aa:	f140 80a7 	bpl.w	80066fc <PathPlan+0x1284>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80065b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 80065be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c6:	f140 8099 	bpl.w	80066fc <PathPlan+0x1284>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 80065d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 80065de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e6:	f200 8089 	bhi.w	80066fc <PathPlan+0x1284>

						if(pp->target_accurate[pp->point_count] == 1.0){
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	3346      	adds	r3, #70	; 0x46
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	3304      	adds	r3, #4
 80065fa:	edd3 7a00 	vldr	s15, [r3]
 80065fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006602:	eef4 7a47 	vcmp.f32	s15, s14
 8006606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660a:	d13f      	bne.n	800668c <PathPlan+0x1214>
							if(pp->pp_lck_enb == 1){
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8006612:	2b01      	cmp	r3, #1
 8006614:	d172      	bne.n	80066fc <PathPlan+0x1284>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 800661c:	edd3 7a00 	vldr	s15, [r3]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8006626:	4619      	mov	r1, r3
 8006628:	eeb0 0a67 	vmov.f32	s0, s15
 800662c:	2004      	movs	r0, #4
 800662e:	f7fe f8dc 	bl	80047ea <PIDGainSet>
								APPStop();
 8006632:	f003 fddf 	bl	800a1f4 <APPStop>
								LED4 = 1;
 8006636:	4a80      	ldr	r2, [pc, #512]	; (8006838 <PathPlan+0x13c0>)
 8006638:	7853      	ldrb	r3, [r2, #1]
 800663a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663e:	7053      	strb	r3, [r2, #1]
								PIDDelayInit(&(pp->x));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fa21 	bl	8004a8e <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fa1b 	bl	8004a8e <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fa15 	bl	8004a8e <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
								pp->pp_crv_calc = 0;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
								pp->pp_start=0;
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800667a:	f36f 0300 	bfc	r3, #0, #1
 800667e:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
								pp->pp_lck_enb = 0;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 800668a:	e037      	b.n	80066fc <PathPlan+0x1284>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006692:	edd3 7a00 	vldr	s15, [r3]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 800669c:	4619      	mov	r1, r3
 800669e:	eeb0 0a67 	vmov.f32	s0, s15
 80066a2:	2004      	movs	r0, #4
 80066a4:	f7fe f8a1 	bl	80047ea <PIDGainSet>
							APPStop();
 80066a8:	f003 fda4 	bl	800a1f4 <APPStop>
							LED4 = 1;
 80066ac:	4a62      	ldr	r2, [pc, #392]	; (8006838 <PathPlan+0x13c0>)
 80066ae:	7853      	ldrb	r3, [r2, #1]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b4:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe f9e6 	bl	8004a8e <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe f9e0 	bl	8004a8e <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f9da 	bl	8004a8e <PIDDelayInit>
							pp->crnt_crv_pt=0;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
							pp->pp_crv_calc = 0;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
							pp->pp_start=0;
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 80066f0:	f36f 0300 	bfc	r3, #0, #1
 80066f4:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
 80066f8:	e000      	b.n	80066fc <PathPlan+0x1284>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80066fa:	bf00      	nop

				}
			}


			if(pp->pp_start){
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	f001 86ac 	beq.w	8008466 <PathPlan+0x2fee>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	ed93 7a00 	vldr	s14, [r3]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 3524 	ldr.w	r3, [r3, #1316]	; 0x524
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	ed93 7a00 	vldr	s14, [r3]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800674c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

				pp->rotate=0;
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 800675c:	f36f 03c3 	bfc	r3, #3, #1
 8006760:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800676a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006772:	d107      	bne.n	8006784 <PathPlan+0x130c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800677a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800677e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006782:	d021      	beq.n	80067c8 <PathPlan+0x1350>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800678a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006792:	d107      	bne.n	80067a4 <PathPlan+0x132c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800679a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800679e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a2:	d011      	beq.n	80067c8 <PathPlan+0x1350>
					pp->heading = atan2f(pp->dy, pp->dx);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80067b0:	eef0 0a47 	vmov.f32	s1, s14
 80067b4:	eeb0 0a67 	vmov.f32	s0, s15
 80067b8:	f017 febe 	bl	801e538 <atan2f>
 80067bc:	eef0 7a40 	vmov.f32	s15, s0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80067c6:	e048      	b.n	800685a <PathPlan+0x13e2>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80067ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d007      	beq.n	80067e8 <PathPlan+0x1370>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80067de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80067e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e6:	d10b      	bne.n	8006800 <PathPlan+0x1388>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80067ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f6:	d503      	bpl.n	8006800 <PathPlan+0x1388>
						pp->heading = 1.5708;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <PathPlan+0x13c4>)
 80067fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80067fe:	e02c      	b.n	800685a <PathPlan+0x13e2>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006806:	eef5 7a40 	vcmp.f32	s15, #0.0
 800680a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680e:	d007      	beq.n	8006820 <PathPlan+0x13a8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006816:	eef5 7a40 	vcmp.f32	s15, #0.0
 800681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681e:	d111      	bne.n	8006844 <PathPlan+0x13cc>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800682a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682e:	dd09      	ble.n	8006844 <PathPlan+0x13cc>
						pp->heading = -1.5708;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a03      	ldr	r2, [pc, #12]	; (8006840 <PathPlan+0x13c8>)
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
 8006836:	e010      	b.n	800685a <PathPlan+0x13e2>
 8006838:	40021014 	.word	0x40021014
 800683c:	3fc90ff9 	.word	0x3fc90ff9
 8006840:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8006852:	f043 0308 	orr.w	r3, r3, #8
 8006856:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	3374      	adds	r3, #116	; 0x74
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	ed93 8a00 	vldr	s16, [r3]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8006872:	eeb0 0a67 	vmov.f32	s0, s15
 8006876:	f017 fdd5 	bl	801e424 <cosf>
 800687a:	eef0 7a40 	vmov.f32	s15, s0
 800687e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	3374      	adds	r3, #116	; 0x74
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	ed93 8a00 	vldr	s16, [r3]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80068a0:	eeb0 0a67 	vmov.f32	s0, s15
 80068a4:	f017 fe06 	bl	801e4b4 <sinf>
 80068a8:	eef0 7a40 	vmov.f32	s15, s0
 80068ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

				if(pp->rotate){
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <PathPlan+0x145e>
					pp->vx = pp->vy = 0.0;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	665a      	str	r2, [r3, #100]	; 0x64
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	661a      	str	r2, [r3, #96]	; 0x60
				}

				PID(&(pp->x));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe f8f4 	bl	8004aca <PID>
				PID(&(pp->y));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe f8ee 	bl	8004aca <PID>
				PID(&(pp->z));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe f8e8 	bl	8004aca <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	edd3 7a06 	vldr	s15, [r3, #24]
 8006906:	eeb0 0a67 	vmov.f32	s0, s15
 800690a:	f017 fd8b 	bl	801e424 <cosf>
 800690e:	eef0 7a40 	vmov.f32	s15, s0
 8006912:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006922:	eeb0 0a67 	vmov.f32	s0, s15
 8006926:	f017 fdc5 	bl	801e4b4 <sinf>
 800692a:	eef0 7a40 	vmov.f32	s15, s0
 800692e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006932:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	edd3 7a06 	vldr	s15, [r3, #24]
 8006948:	eeb0 0a67 	vmov.f32	s0, s15
 800694c:	f017 fdb2 	bl	801e4b4 <sinf>
 8006950:	eef0 7a40 	vmov.f32	s15, s0
 8006954:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	edd3 7a06 	vldr	s15, [r3, #24]
 8006964:	eeb0 0a67 	vmov.f32	s0, s15
 8006968:	f017 fd5c 	bl	801e424 <cosf>
 800696c:	eef0 7a40 	vmov.f32	s15, s0
 8006970:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006974:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	edd3 7a06 	vldr	s15, [r3, #24]
 800698a:	eeb0 0a67 	vmov.f32	s0, s15
 800698e:	f017 fd49 	bl	801e424 <cosf>
 8006992:	eef0 7a40 	vmov.f32	s15, s0
 8006996:	ee28 8a27 	vmul.f32	s16, s16, s15
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80069a6:	eeb0 0a67 	vmov.f32	s0, s15
 80069aa:	f017 fd83 	bl	801e4b4 <sinf>
 80069ae:	eef0 7a40 	vmov.f32	s15, s0
 80069b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80069b6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80069cc:	eeb0 0a67 	vmov.f32	s0, s15
 80069d0:	f017 fd70 	bl	801e4b4 <sinf>
 80069d4:	eef0 7a40 	vmov.f32	s15, s0
 80069d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80069e8:	eeb0 0a67 	vmov.f32	s0, s15
 80069ec:	f017 fd1a 	bl	801e424 <cosf>
 80069f0:	eef0 7a40 	vmov.f32	s15, s0
 80069f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80069f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4

				if(pp->base_shape== fwd_omni){
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	f040 8161 	bne.w	8006cd0 <PathPlan+0x1858>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8006a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a1e:	ee17 0a90 	vmov	r0, s15
 8006a22:	f7f9 fd91 	bl	8000548 <__aeabi_f2d>
 8006a26:	f20f 6334 	addw	r3, pc, #1588	; 0x634
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4614      	mov	r4, r2
 8006a38:	461d      	mov	r5, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7f9 fd81 	bl	8000548 <__aeabi_f2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fc1b 	bl	8000288 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f7fa f8c5 	bl	8000be8 <__aeabi_d2f>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8006a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a76:	ee17 0a90 	vmov	r0, s15
 8006a7a:	f7f9 fd65 	bl	8000548 <__aeabi_f2d>
 8006a7e:	f20f 53dc 	addw	r3, pc, #1500	; 0x5dc
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4614      	mov	r4, r2
 8006a90:	461d      	mov	r5, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7f9 fd55 	bl	8000548 <__aeabi_f2d>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7f9 fbf1 	bl	800028c <__adddf3>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f7fa f899 	bl	8000be8 <__aeabi_d2f>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8006aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ace:	ee17 0a90 	vmov	r0, s15
 8006ad2:	f7f9 fd39 	bl	8000548 <__aeabi_f2d>
 8006ad6:	f20f 5384 	addw	r3, pc, #1412	; 0x584
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fd8b 	bl	80005f8 <__aeabi_dmul>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	461d      	mov	r5, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7f9 fd29 	bl	8000548 <__aeabi_f2d>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4620      	mov	r0, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	f7f9 fbc5 	bl	800028c <__adddf3>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	f7fa f86d 	bl	8000be8 <__aeabi_d2f>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8006b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b26:	ee17 0a90 	vmov	r0, s15
 8006b2a:	f7f9 fd0d 	bl	8000548 <__aeabi_f2d>
 8006b2e:	f20f 532c 	addw	r3, pc, #1324	; 0x52c
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fd5f 	bl	80005f8 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4614      	mov	r4, r2
 8006b40:	461d      	mov	r5, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7f9 fcfd 	bl	8000548 <__aeabi_f2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 fb97 	bl	8000288 <__aeabi_dsub>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fa f841 	bl	8000be8 <__aeabi_d2f>
 8006b66:	4602      	mov	r2, r0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8006b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b7e:	ee17 0a90 	vmov	r0, s15
 8006b82:	f7f9 fce1 	bl	8000548 <__aeabi_f2d>
 8006b86:	f20f 43d4 	addw	r3, pc, #1236	; 0x4d4
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 fd33 	bl	80005f8 <__aeabi_dmul>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4614      	mov	r4, r2
 8006b98:	461d      	mov	r5, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7f9 fcd1 	bl	8000548 <__aeabi_f2d>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4620      	mov	r0, r4
 8006bac:	4629      	mov	r1, r5
 8006bae:	f7f9 fb6d 	bl	800028c <__adddf3>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f7fa f815 	bl	8000be8 <__aeabi_d2f>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8006bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bd6:	ee17 0a90 	vmov	r0, s15
 8006bda:	f7f9 fcb5 	bl	8000548 <__aeabi_f2d>
 8006bde:	f20f 437c 	addw	r3, pc, #1148	; 0x47c
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fd07 	bl	80005f8 <__aeabi_dmul>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4614      	mov	r4, r2
 8006bf0:	461d      	mov	r5, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7f9 fca5 	bl	8000548 <__aeabi_f2d>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4620      	mov	r0, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	f7f9 fb41 	bl	800028c <__adddf3>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4619      	mov	r1, r3
 8006c12:	f7f9 ffe9 	bl	8000be8 <__aeabi_d2f>
 8006c16:	4602      	mov	r2, r0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8006c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c2e:	ee17 0a90 	vmov	r0, s15
 8006c32:	f7f9 fc89 	bl	8000548 <__aeabi_f2d>
 8006c36:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fcdb 	bl	80005f8 <__aeabi_dmul>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4614      	mov	r4, r2
 8006c48:	461d      	mov	r5, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7f9 fc79 	bl	8000548 <__aeabi_f2d>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	f7f9 fb15 	bl	800028c <__adddf3>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f7f9 ffbd 	bl	8000be8 <__aeabi_d2f>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8006c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c86:	ee17 0a90 	vmov	r0, s15
 8006c8a:	f7f9 fc5d 	bl	8000548 <__aeabi_f2d>
 8006c8e:	a3f3      	add	r3, pc, #972	; (adr r3, 800705c <PathPlan+0x1be4>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7f9 fc4e 	bl	8000548 <__aeabi_f2d>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 faea 	bl	800028c <__adddf3>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f7f9 ff92 	bl	8000be8 <__aeabi_d2f>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
				}

			}
		}
	}
}
 8006ccc:	f001 bbcb 	b.w	8008466 <PathPlan+0x2fee>
				} else if(pp->base_shape==tri_omni){
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	f041 83c5 	bne.w	8008466 <PathPlan+0x2fee>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7f9 fc30 	bl	8000548 <__aeabi_f2d>
 8006ce8:	a3d7      	add	r3, pc, #860	; (adr r3, 8007048 <PathPlan+0x1bd0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fc83 	bl	80005f8 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4614      	mov	r4, r2
 8006cf8:	461d      	mov	r5, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7f9 fc21 	bl	8000548 <__aeabi_f2d>
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	4bd1      	ldr	r3, [pc, #836]	; (8007050 <PathPlan+0x1bd8>)
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 fab6 	bl	8000288 <__aeabi_dsub>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4614      	mov	r4, r2
 8006d22:	461d      	mov	r5, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 fc0c 	bl	8000548 <__aeabi_f2d>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 faa8 	bl	800028c <__adddf3>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	f7f9 ff50 	bl	8000be8 <__aeabi_d2f>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7f9 fbf6 	bl	8000548 <__aeabi_f2d>
 8006d5c:	a3ba      	add	r3, pc, #744	; (adr r3, 8007048 <PathPlan+0x1bd0>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4614      	mov	r4, r2
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7f9 fbe7 	bl	8000548 <__aeabi_f2d>
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	4bb4      	ldr	r3, [pc, #720]	; (8007050 <PathPlan+0x1bd8>)
 8006d80:	f7f9 fc3a 	bl	80005f8 <__aeabi_dmul>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4620      	mov	r0, r4
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f7f9 fa7e 	bl	800028c <__adddf3>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4614      	mov	r4, r2
 8006d96:	461d      	mov	r5, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fbd2 	bl	8000548 <__aeabi_f2d>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4620      	mov	r0, r4
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7f9 fa6c 	bl	8000288 <__aeabi_dsub>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4610      	mov	r0, r2
 8006db6:	4619      	mov	r1, r3
 8006db8:	f7f9 ff16 	bl	8000be8 <__aeabi_d2f>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fbb1 	bl	8000548 <__aeabi_f2d>
 8006de6:	a398      	add	r3, pc, #608	; (adr r3, 8007048 <PathPlan+0x1bd0>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7f9 fba2 	bl	8000548 <__aeabi_f2d>
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	4b91      	ldr	r3, [pc, #580]	; (8007050 <PathPlan+0x1bd8>)
 8006e0a:	f7f9 fbf5 	bl	80005f8 <__aeabi_dmul>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4620      	mov	r0, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7f9 fa37 	bl	8000288 <__aeabi_dsub>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4614      	mov	r4, r2
 8006e20:	461d      	mov	r5, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7f9 fb8d 	bl	8000548 <__aeabi_f2d>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fa29 	bl	800028c <__adddf3>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	f7f9 fed1 	bl	8000be8 <__aeabi_d2f>
 8006e46:	4602      	mov	r2, r0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7f9 fb77 	bl	8000548 <__aeabi_f2d>
 8006e5a:	a37b      	add	r3, pc, #492	; (adr r3, 8007048 <PathPlan+0x1bd0>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 fbca 	bl	80005f8 <__aeabi_dmul>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4614      	mov	r4, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7f9 fb68 	bl	8000548 <__aeabi_f2d>
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	4b74      	ldr	r3, [pc, #464]	; (8007050 <PathPlan+0x1bd8>)
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 f9ff 	bl	800028c <__adddf3>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4614      	mov	r4, r2
 8006e94:	461d      	mov	r5, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7f9 fb53 	bl	8000548 <__aeabi_f2d>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 f9ef 	bl	800028c <__adddf3>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f7f9 fe97 	bl	8000be8 <__aeabi_d2f>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8006ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8006ed8:	f001 bac5 	b.w	8008466 <PathPlan+0x2fee>
			LED5=0;
 8006edc:	4a5d      	ldr	r2, [pc, #372]	; (8007054 <PathPlan+0x1bdc>)
 8006ede:	7853      	ldrb	r3, [r2, #1]
 8006ee0:	f36f 0382 	bfc	r3, #2, #1
 8006ee4:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	331a      	adds	r3, #26
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	ed93 7a00 	vldr	s14, [r3]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	3328      	adds	r3, #40	; 0x28
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	3304      	adds	r3, #4
 8006f18:	ed93 7a00 	vldr	s14, [r3]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	3338      	adds	r3, #56	; 0x38
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	ed93 7a00 	vldr	s14, [r3]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	edd3 7a04 	vldr	s15, [r3, #16]
 8006f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8006f54:	eef0 7ae7 	vabs.f32	s15, s15
 8006f58:	ee17 0a90 	vmov	r0, s15
 8006f5c:	f7f9 faf4 	bl	8000548 <__aeabi_f2d>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8006f6a:	eef0 7ae7 	vabs.f32	s15, s15
 8006f6e:	ee17 0a90 	vmov	r0, s15
 8006f72:	f7f9 fae9 	bl	8000548 <__aeabi_f2d>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 f985 	bl	800028c <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f92:	f7f9 fc5b 	bl	800084c <__aeabi_ddiv>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7f9 facf 	bl	8000548 <__aeabi_f2d>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	f7f9 fd93 	bl	8000adc <__aeabi_dcmplt>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d013      	beq.n	8006fe4 <PathPlan+0x1b6c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8006fc2:	eeb0 7ae7 	vabs.f32	s14, s15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8006fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd4:	d506      	bpl.n	8006fe4 <PathPlan+0x1b6c>
				pp->pp_lck = 1.0;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006fdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e005      	b.n	8006ff0 <PathPlan+0x1b78>
				pp->pp_lck = 0.0;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8006ff6:	edd3 7a00 	vldr	s15, [r3]
 8006ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007008:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_count <= 60.0)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007012:	edd3 7a00 	vldr	s15, [r3]
 8007016:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007058 <PathPlan+0x1be0>
 800701a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	d81f      	bhi.n	8007064 <PathPlan+0x1bec>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800702a:	ed93 7a00 	vldr	s14, [r3]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8007034:	edd3 7a00 	vldr	s15, [r3]
 8007038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007042:	edc3 7a00 	vstr	s15, [r3]
 8007046:	e043      	b.n	80070d0 <PathPlan+0x1c58>
 8007048:	a1cac083 	.word	0xa1cac083
 800704c:	3febb645 	.word	0x3febb645
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	40020c14 	.word	0x40020c14
 8007058:	42700000 	.word	0x42700000
 800705c:	dbf8b9bb 	.word	0xdbf8b9bb
 8007060:	3fe6a09e 	.word	0x3fe6a09e
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800706a:	edd3 6a00 	vldr	s13, [r3]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007074:	ed93 7a00 	vldr	s14, [r3]
 8007078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8007082:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7f9 fa5a 	bl	8000548 <__aeabi_f2d>
 8007094:	f20f 4390 	addw	r3, pc, #1168	; 0x490
 8007098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709c:	f7f9 fd32 	bl	8000b04 <__aeabi_dcmpge>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <PathPlan+0x1c38>
					pp->pp_lck_enb = 1;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80070ae:	e003      	b.n	80070b8 <PathPlan+0x1c40>
					pp->pp_lck_enb = 0;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
				pp->pp_lck_count = 0.0;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80070ca:	f04f 0200 	mov.w	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 80070d6:	eef0 7ae7 	vabs.f32	s15, s15
 80070da:	ee17 0a90 	vmov	r0, s15
 80070de:	f7f9 fa33 	bl	8000548 <__aeabi_f2d>
 80070e2:	4604      	mov	r4, r0
 80070e4:	460d      	mov	r5, r1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 80070ec:	eef0 7ae7 	vabs.f32	s15, s15
 80070f0:	ee17 0a90 	vmov	r0, s15
 80070f4:	f7f9 fa28 	bl	8000548 <__aeabi_f2d>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4620      	mov	r0, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	f7f9 f8c4 	bl	800028c <__adddf3>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4610      	mov	r0, r2
 800710a:	4619      	mov	r1, r3
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007114:	f7f9 fb9a 	bl	800084c <__aeabi_ddiv>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007126:	4618      	mov	r0, r3
 8007128:	f7f9 fa0e 	bl	8000548 <__aeabi_f2d>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4620      	mov	r0, r4
 8007132:	4629      	mov	r1, r5
 8007134:	f7f9 fcd2 	bl	8000adc <__aeabi_dcmplt>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 85aa 	beq.w	8007c94 <PathPlan+0x281c>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007146:	eeb0 7ae7 	vabs.f32	s14, s15
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	edd3 7abf 	vldr	s15, [r3, #764]	; 0x2fc
 8007150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007158:	f140 859c 	bpl.w	8007c94 <PathPlan+0x281c>
				if(pp->point_count < (pp->target_point - 2)){
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007168:	3b02      	subs	r3, #2
 800716a:	429a      	cmp	r2, r3
 800716c:	f280 8286 	bge.w	800767c <PathPlan+0x2204>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	3346      	adds	r3, #70	; 0x46
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	3304      	adds	r3, #4
 8007180:	edd3 7a00 	vldr	s15, [r3]
 8007184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007188:	eef4 7a47 	vcmp.f32	s15, s14
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	f040 813b 	bne.w	800740a <PathPlan+0x1f92>
						if(pp->pp_lck_enb == 1){
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800719a:	2b01      	cmp	r3, #1
 800719c:	f040 857a 	bne.w	8007c94 <PathPlan+0x281c>
							pp->point_count++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	331a      	adds	r3, #26
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	ed93 7a00 	vldr	s14, [r3]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80071c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	3328      	adds	r3, #40	; 0x28
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	3304      	adds	r3, #4
 80071e0:	ed93 7a00 	vldr	s14, [r3]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80071ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	3338      	adds	r3, #56	; 0x38
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	ed93 7a00 	vldr	s14, [r3]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	edd3 7a04 	vldr	s15, [r3, #16]
 800720c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	331a      	adds	r3, #26
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	ed93 7a00 	vldr	s14, [r3]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800722e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007232:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723a:	d03d      	beq.n	80072b8 <PathPlan+0x1e40>
											1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	331a      	adds	r3, #26
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	ed93 7a00 	vldr	s14, [r3]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007258:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800725c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
											pp->ku_x[pp->point_count],
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	3384      	adds	r3, #132	; 0x84
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	3304      	adds	r3, #4
 8007274:	edd3 7a00 	vldr	s15, [r3]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007290:	4618      	mov	r0, r3
 8007292:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007296:	eeb0 3a65 	vmov.f32	s6, s11
 800729a:	eef0 2a46 	vmov.f32	s5, s12
 800729e:	eeb0 2a66 	vmov.f32	s4, s13
 80072a2:	eef0 1a67 	vmov.f32	s3, s15
 80072a6:	eeb0 1a47 	vmov.f32	s2, s14
 80072aa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80072ae:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8007530 <PathPlan+0x20b8>
 80072b2:	f7fd fa67 	bl	8004784 <PIDGainInit>
 80072b6:	e028      	b.n	800730a <PathPlan+0x1e92>
											pp->ku_x[pp->point_count],
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	3384      	adds	r3, #132	; 0x84
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	3304      	adds	r3, #4
 80072c8:	edd3 7a00 	vldr	s15, [r3]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80072e4:	4618      	mov	r0, r3
 80072e6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80072ea:	eeb0 3a46 	vmov.f32	s6, s12
 80072ee:	eef0 2a66 	vmov.f32	s5, s13
 80072f2:	eeb0 2a47 	vmov.f32	s4, s14
 80072f6:	eef0 1a67 	vmov.f32	s3, s15
 80072fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80072fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007302:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8007530 <PathPlan+0x20b8>
 8007306:	f7fd fa3d 	bl	8004784 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	3328      	adds	r3, #40	; 0x28
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	3304      	adds	r3, #4
 800731a:	ed93 7a00 	vldr	s14, [r3]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007330:	d03d      	beq.n	80073ae <PathPlan+0x1f36>
											1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	3328      	adds	r3, #40	; 0x28
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	3304      	adds	r3, #4
 8007342:	ed93 7a00 	vldr	s14, [r3]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800734c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007350:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
											pp->ku_y[pp->point_count],
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	3394      	adds	r3, #148	; 0x94
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	edd3 7a00 	vldr	s15, [r3]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007386:	4618      	mov	r0, r3
 8007388:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800738c:	eeb0 3a65 	vmov.f32	s6, s11
 8007390:	eef0 2a46 	vmov.f32	s5, s12
 8007394:	eeb0 2a66 	vmov.f32	s4, s13
 8007398:	eef0 1a67 	vmov.f32	s3, s15
 800739c:	eeb0 1a47 	vmov.f32	s2, s14
 80073a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80073a4:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8007530 <PathPlan+0x20b8>
 80073a8:	f7fd f9ec 	bl	8004784 <PIDGainInit>
 80073ac:	e027      	b.n	80073fe <PathPlan+0x1f86>
											pp->ku_y[pp->point_count],
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	3394      	adds	r3, #148	; 0x94
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	edd3 7a00 	vldr	s15, [r3]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80073d8:	4618      	mov	r0, r3
 80073da:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80073de:	eeb0 3a46 	vmov.f32	s6, s12
 80073e2:	eef0 2a66 	vmov.f32	s5, s13
 80073e6:	eeb0 2a47 	vmov.f32	s4, s14
 80073ea:	eef0 1a67 	vmov.f32	s3, s15
 80073ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80073f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80073f6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8007530 <PathPlan+0x20b8>
 80073fa:	f7fd f9c3 	bl	8004784 <PIDGainInit>
							pp->pp_lck_enb = 0;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007406:	f000 bc45 	b.w	8007c94 <PathPlan+0x281c>
						pp->point_count++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	331a      	adds	r3, #26
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	ed93 7a00 	vldr	s14, [r3]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	3328      	adds	r3, #40	; 0x28
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	ed93 7a00 	vldr	s14, [r3]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	3338      	adds	r3, #56	; 0x38
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	ed93 7a00 	vldr	s14, [r3]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	edd3 7a04 	vldr	s15, [r3, #16]
 8007476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	331a      	adds	r3, #26
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	ed93 7a00 	vldr	s14, [r3]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800749c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a4:	d046      	beq.n	8007534 <PathPlan+0x20bc>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	331a      	adds	r3, #26
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	ed93 7a00 	vldr	s14, [r3]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80074be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074c2:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 80074c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	3384      	adds	r3, #132	; 0x84
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	3304      	adds	r3, #4
 80074de:	edd3 7a00 	vldr	s15, [r3]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80074fa:	4618      	mov	r0, r3
 80074fc:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007500:	eeb0 3a65 	vmov.f32	s6, s11
 8007504:	eef0 2a46 	vmov.f32	s5, s12
 8007508:	eeb0 2a66 	vmov.f32	s4, s13
 800750c:	eef0 1a67 	vmov.f32	s3, s15
 8007510:	eeb0 1a47 	vmov.f32	s2, s14
 8007514:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007518:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007530 <PathPlan+0x20b8>
 800751c:	f7fd f932 	bl	8004784 <PIDGainInit>
 8007520:	e031      	b.n	8007586 <PathPlan+0x210e>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	66666666 	.word	0x66666666
 800752c:	3fee6666 	.word	0x3fee6666
 8007530:	3ba3d70a 	.word	0x3ba3d70a
										pp->ku_x[pp->point_count],
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	3384      	adds	r3, #132	; 0x84
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	3304      	adds	r3, #4
 8007544:	edd3 7a00 	vldr	s15, [r3]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007560:	4618      	mov	r0, r3
 8007562:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007566:	eeb0 3a46 	vmov.f32	s6, s12
 800756a:	eef0 2a66 	vmov.f32	s5, s13
 800756e:	eeb0 2a47 	vmov.f32	s4, s14
 8007572:	eef0 1a67 	vmov.f32	s3, s15
 8007576:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800757a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800757e:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 8007530 <PathPlan+0x20b8>
 8007582:	f7fd f8ff 	bl	8004784 <PIDGainInit>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	3328      	adds	r3, #40	; 0x28
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	3304      	adds	r3, #4
 8007596:	ed93 7a00 	vldr	s14, [r3]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80075a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	d03d      	beq.n	800762a <PathPlan+0x21b2>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	3328      	adds	r3, #40	; 0x28
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	3304      	adds	r3, #4
 80075be:	ed93 7a00 	vldr	s14, [r3]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80075c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075cc:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 80075d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	3394      	adds	r3, #148	; 0x94
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	edd3 7a00 	vldr	s15, [r3]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	edd3 6aa3 	vldr	s13, [r3, #652]	; 0x28c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	ed93 6aa5 	vldr	s12, [r3, #660]	; 0x294
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	edd3 5aa7 	vldr	s11, [r3, #668]	; 0x29c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007602:	4618      	mov	r0, r3
 8007604:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007608:	eeb0 3a65 	vmov.f32	s6, s11
 800760c:	eef0 2a46 	vmov.f32	s5, s12
 8007610:	eeb0 2a66 	vmov.f32	s4, s13
 8007614:	eef0 1a67 	vmov.f32	s3, s15
 8007618:	eeb0 1a47 	vmov.f32	s2, s14
 800761c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007620:	ed1f 0a3d 	vldr	s0, [pc, #-244]	; 8007530 <PathPlan+0x20b8>
 8007624:	f7fd f8ae 	bl	8004784 <PIDGainInit>
 8007628:	e334      	b.n	8007c94 <PathPlan+0x281c>
										pp->ku_y[pp->point_count],
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	3394      	adds	r3, #148	; 0x94
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	edd3 7a00 	vldr	s15, [r3]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	ed93 7aa3 	vldr	s14, [r3, #652]	; 0x28c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	edd3 6aa5 	vldr	s13, [r3, #660]	; 0x294
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	ed93 6aa7 	vldr	s12, [r3, #668]	; 0x29c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007654:	4618      	mov	r0, r3
 8007656:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800765a:	eeb0 3a46 	vmov.f32	s6, s12
 800765e:	eef0 2a66 	vmov.f32	s5, s13
 8007662:	eeb0 2a47 	vmov.f32	s4, s14
 8007666:	eef0 1a67 	vmov.f32	s3, s15
 800766a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800766e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007672:	ed1f 0a51 	vldr	s0, [pc, #-324]	; 8007530 <PathPlan+0x20b8>
 8007676:	f7fd f885 	bl	8004784 <PIDGainInit>
 800767a:	e30b      	b.n	8007c94 <PathPlan+0x281c>
				} else if(pp->point_count == (pp->target_point - 2)){
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007688:	3b02      	subs	r3, #2
 800768a:	429a      	cmp	r2, r3
 800768c:	f040 827e 	bne.w	8007b8c <PathPlan+0x2714>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	3346      	adds	r3, #70	; 0x46
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	3304      	adds	r3, #4
 80076a0:	edd3 7a00 	vldr	s15, [r3]
 80076a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076a8:	eef4 7a47 	vcmp.f32	s15, s14
 80076ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b0:	f040 813a 	bne.w	8007928 <PathPlan+0x24b0>
						if(pp->pp_lck_enb == 1){
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	f040 82ea 	bne.w	8007c94 <PathPlan+0x281c>
							pp->point_count++;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	331a      	adds	r3, #26
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	ed93 7a00 	vldr	s14, [r3]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80076e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	3328      	adds	r3, #40	; 0x28
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	ed93 7a00 	vldr	s14, [r3]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800770a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	3338      	adds	r3, #56	; 0x38
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	ed93 7a00 	vldr	s14, [r3]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	edd3 7a04 	vldr	s15, [r3, #16]
 800772c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	331a      	adds	r3, #26
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	ed93 7a00 	vldr	s14, [r3]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800774e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007752:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775a:	d03d      	beq.n	80077d8 <PathPlan+0x2360>
											1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	331a      	adds	r3, #26
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	ed93 7a00 	vldr	s14, [r3]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007778:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800777c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
											pp->ku_x[pp->point_count],
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	3384      	adds	r3, #132	; 0x84
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	edd3 7a00 	vldr	s15, [r3]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f503 7344 	add.w	r3, r3, #784	; 0x310
 80077b0:	4618      	mov	r0, r3
 80077b2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80077b6:	eeb0 3a65 	vmov.f32	s6, s11
 80077ba:	eef0 2a46 	vmov.f32	s5, s12
 80077be:	eeb0 2a66 	vmov.f32	s4, s13
 80077c2:	eef0 1a67 	vmov.f32	s3, s15
 80077c6:	eeb0 1a47 	vmov.f32	s2, s14
 80077ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80077ce:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8007530 <PathPlan+0x20b8>
 80077d2:	f7fc ffd7 	bl	8004784 <PIDGainInit>
 80077d6:	e028      	b.n	800782a <PathPlan+0x23b2>
											pp->ku_x[pp->point_count],
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	3384      	adds	r3, #132	; 0x84
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	3304      	adds	r3, #4
 80077e8:	edd3 7a00 	vldr	s15, [r3]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007804:	4618      	mov	r0, r3
 8007806:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800780a:	eeb0 3a46 	vmov.f32	s6, s12
 800780e:	eef0 2a66 	vmov.f32	s5, s13
 8007812:	eeb0 2a47 	vmov.f32	s4, s14
 8007816:	eef0 1a67 	vmov.f32	s3, s15
 800781a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800781e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007822:	ed1f 0abd 	vldr	s0, [pc, #-756]	; 8007530 <PathPlan+0x20b8>
 8007826:	f7fc ffad 	bl	8004784 <PIDGainInit>
							if(pp->target_y[pp->point_count]-pp->real_y){
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	3328      	adds	r3, #40	; 0x28
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	3304      	adds	r3, #4
 800783a:	ed93 7a00 	vldr	s14, [r3]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	d03d      	beq.n	80078ce <PathPlan+0x2456>
											1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	3328      	adds	r3, #40	; 0x28
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	3304      	adds	r3, #4
 8007862:	ed93 7a00 	vldr	s14, [r3]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800786c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007870:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8007874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
											pp->ku_y[pp->point_count],
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	3394      	adds	r3, #148	; 0x94
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	edd3 7a00 	vldr	s15, [r3]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80078a6:	4618      	mov	r0, r3
 80078a8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80078ac:	eeb0 3a65 	vmov.f32	s6, s11
 80078b0:	eef0 2a46 	vmov.f32	s5, s12
 80078b4:	eeb0 2a66 	vmov.f32	s4, s13
 80078b8:	eef0 1a67 	vmov.f32	s3, s15
 80078bc:	eeb0 1a47 	vmov.f32	s2, s14
 80078c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80078c4:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8007b88 <PathPlan+0x2710>
 80078c8:	f7fc ff5c 	bl	8004784 <PIDGainInit>
 80078cc:	e027      	b.n	800791e <PathPlan+0x24a6>
											pp->ku_y[pp->point_count],
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
								PIDGainInit(0.005,
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	3394      	adds	r3, #148	; 0x94
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	edd3 7a00 	vldr	s15, [r3]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80078f8:	4618      	mov	r0, r3
 80078fa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80078fe:	eeb0 3a46 	vmov.f32	s6, s12
 8007902:	eef0 2a66 	vmov.f32	s5, s13
 8007906:	eeb0 2a47 	vmov.f32	s4, s14
 800790a:	eef0 1a67 	vmov.f32	s3, s15
 800790e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007912:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007916:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8007b88 <PathPlan+0x2710>
 800791a:	f7fc ff33 	bl	8004784 <PIDGainInit>
							pp->pp_lck_enb = 0;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007926:	e1b5      	b.n	8007c94 <PathPlan+0x281c>
						pp->point_count++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	331a      	adds	r3, #26
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	ed93 7a00 	vldr	s14, [r3]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800794e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	edc3 7aac 	vstr	s15, [r3, #688]	; 0x2b0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	3328      	adds	r3, #40	; 0x28
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	3304      	adds	r3, #4
 8007968:	ed93 7a00 	vldr	s14, [r3]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	edc3 7aad 	vstr	s15, [r3, #692]	; 0x2b4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	3338      	adds	r3, #56	; 0x38
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	ed93 7a00 	vldr	s14, [r3]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	edd3 7a04 	vldr	s15, [r3, #16]
 8007994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	edc3 7aae 	vstr	s15, [r3, #696]	; 0x2b8
						if(pp->target_x[pp->point_count]-pp->real_x){
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	331a      	adds	r3, #26
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	ed93 7a00 	vldr	s14, [r3]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80079b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80079be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c2:	d03d      	beq.n	8007a40 <PathPlan+0x25c8>
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	331a      	adds	r3, #26
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	ed93 7a00 	vldr	s14, [r3]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80079dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079e0:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 80079e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	3384      	adds	r3, #132	; 0x84
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	3304      	adds	r3, #4
 80079fc:	edd3 7a00 	vldr	s15, [r3]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007a18:	4618      	mov	r0, r3
 8007a1a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007a1e:	eeb0 3a65 	vmov.f32	s6, s11
 8007a22:	eef0 2a46 	vmov.f32	s5, s12
 8007a26:	eeb0 2a66 	vmov.f32	s4, s13
 8007a2a:	eef0 1a67 	vmov.f32	s3, s15
 8007a2e:	eeb0 1a47 	vmov.f32	s2, s14
 8007a32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007a36:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8007b88 <PathPlan+0x2710>
 8007a3a:	f7fc fea3 	bl	8004784 <PIDGainInit>
 8007a3e:	e028      	b.n	8007a92 <PathPlan+0x261a>
										pp->ku_x[pp->point_count],
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	3384      	adds	r3, #132	; 0x84
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3304      	adds	r3, #4
 8007a50:	edd3 7a00 	vldr	s15, [r3]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007a72:	eeb0 3a46 	vmov.f32	s6, s12
 8007a76:	eef0 2a66 	vmov.f32	s5, s13
 8007a7a:	eeb0 2a47 	vmov.f32	s4, s14
 8007a7e:	eef0 1a67 	vmov.f32	s3, s15
 8007a82:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007a86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007a8a:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8007b88 <PathPlan+0x2710>
 8007a8e:	f7fc fe79 	bl	8004784 <PIDGainInit>
						if(pp->target_y[pp->point_count]-pp->real_y){
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	3328      	adds	r3, #40	; 0x28
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	ed93 7a00 	vldr	s14, [r3]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab8:	d03d      	beq.n	8007b36 <PathPlan+0x26be>
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	3328      	adds	r3, #40	; 0x28
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	3304      	adds	r3, #4
 8007aca:	ed93 7a00 	vldr	s14, [r3]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ad8:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8007adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	3394      	adds	r3, #148	; 0x94
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	edd3 7a00 	vldr	s15, [r3]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	edd3 6aa4 	vldr	s13, [r3, #656]	; 0x290
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	ed93 6aa6 	vldr	s12, [r3, #664]	; 0x298
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	edd3 5aa8 	vldr	s11, [r3, #672]	; 0x2a0
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007b0e:	4618      	mov	r0, r3
 8007b10:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007b14:	eeb0 3a65 	vmov.f32	s6, s11
 8007b18:	eef0 2a46 	vmov.f32	s5, s12
 8007b1c:	eeb0 2a66 	vmov.f32	s4, s13
 8007b20:	eef0 1a67 	vmov.f32	s3, s15
 8007b24:	eeb0 1a47 	vmov.f32	s2, s14
 8007b28:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007b2c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007b88 <PathPlan+0x2710>
 8007b30:	f7fc fe28 	bl	8004784 <PIDGainInit>
 8007b34:	e0ae      	b.n	8007c94 <PathPlan+0x281c>
										pp->ku_y[pp->point_count],
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
							PIDGainInit(0.005,
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	3394      	adds	r3, #148	; 0x94
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	edd3 7a00 	vldr	s15, [r3]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	ed93 7aa4 	vldr	s14, [r3, #656]	; 0x290
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	edd3 6aa6 	vldr	s13, [r3, #664]	; 0x298
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	ed93 6aa8 	vldr	s12, [r3, #672]	; 0x2a0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007b60:	4618      	mov	r0, r3
 8007b62:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8007b66:	eeb0 3a46 	vmov.f32	s6, s12
 8007b6a:	eef0 2a66 	vmov.f32	s5, s13
 8007b6e:	eeb0 2a47 	vmov.f32	s4, s14
 8007b72:	eef0 1a67 	vmov.f32	s3, s15
 8007b76:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007b7a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007b7e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007b88 <PathPlan+0x2710>
 8007b82:	f7fc fdff 	bl	8004784 <PIDGainInit>
 8007b86:	e085      	b.n	8007c94 <PathPlan+0x281c>
 8007b88:	3ba3d70a 	.word	0x3ba3d70a
				}else if(fabs(pp->error_x)<pp->f_tol_xy && fabs(pp->error_y)<pp->f_tol_xy && (int)pp->error_z<=pp->f_tol_z){
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	edd3 7aac 	vldr	s15, [r3, #688]	; 0x2b0
 8007b92:	eeb0 7ae7 	vabs.f32	s14, s15
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8007b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba4:	d576      	bpl.n	8007c94 <PathPlan+0x281c>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	edd3 7aad 	vldr	s15, [r3, #692]	; 0x2b4
 8007bac:	eeb0 7ae7 	vabs.f32	s14, s15
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	edd3 7ac0 	vldr	s15, [r3, #768]	; 0x300
 8007bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbe:	d569      	bpl.n	8007c94 <PathPlan+0x281c>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	edd3 7aae 	vldr	s15, [r3, #696]	; 0x2b8
 8007bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	edd3 7ac1 	vldr	s15, [r3, #772]	; 0x304
 8007bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bdc:	d85a      	bhi.n	8007c94 <PathPlan+0x281c>
					if(pp->target_accurate[pp->point_count] == 1.0){
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	3346      	adds	r3, #70	; 0x46
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	3304      	adds	r3, #4
 8007bee:	edd3 7a00 	vldr	s15, [r3]
 8007bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bf6:	eef4 7a47 	vcmp.f32	s15, s14
 8007bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bfe:	d129      	bne.n	8007c54 <PathPlan+0x27dc>
						if(pp->pp_lck_enb == 1){
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d144      	bne.n	8007c94 <PathPlan+0x281c>
							APPStop();
 8007c0a:	f002 faf3 	bl	800a1f4 <APPStop>
							LED4 = 1;
 8007c0e:	4a70      	ldr	r2, [pc, #448]	; (8007dd0 <PathPlan+0x2958>)
 8007c10:	7853      	ldrb	r3, [r2, #1]
 8007c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c16:	7053      	strb	r3, [r2, #1]
							PIDDelayInit(&(pp->x));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fc ff35 	bl	8004a8e <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fc ff2f 	bl	8004a8e <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fc ff29 	bl	8004a8e <PIDDelayInit>
							pp->pp_start=0;
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007c42:	f36f 0300 	bfc	r3, #0, #1
 8007c46:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
							pp->pp_lck_enb = 0;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8007c52:	e01f      	b.n	8007c94 <PathPlan+0x281c>
						APPStop();
 8007c54:	f002 face 	bl	800a1f4 <APPStop>
						LED4 = 1;
 8007c58:	4a5d      	ldr	r2, [pc, #372]	; (8007dd0 <PathPlan+0x2958>)
 8007c5a:	7853      	ldrb	r3, [r2, #1]
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c60:	7053      	strb	r3, [r2, #1]
						PIDDelayInit(&(pp->x));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fc ff10 	bl	8004a8e <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fc ff0a 	bl	8004a8e <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fc ff04 	bl	8004a8e <PIDDelayInit>
						pp->pp_start=0;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007c8c:	f36f 0300 	bfc	r3, #0, #1
 8007c90:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
			if(pp->pp_start){
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 83e0 	beq.w	8008466 <PathPlan+0x2fee>
				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	331a      	adds	r3, #26
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	ed93 7a00 	vldr	s14, [r3]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	3328      	adds	r3, #40	; 0x28
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	ed93 7a00 	vldr	s14, [r3]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				pp->rotate=0;
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007cf2:	f36f 03c3 	bfc	r3, #3, #1
 8007cf6:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d08:	d107      	bne.n	8007d1a <PathPlan+0x28a2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d18:	d021      	beq.n	8007d5e <PathPlan+0x28e6>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007d20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d28:	d107      	bne.n	8007d3a <PathPlan+0x28c2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007d30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d38:	d011      	beq.n	8007d5e <PathPlan+0x28e6>
					pp->heading = atan2f(pp->dy, pp->dx);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007d46:	eef0 0a47 	vmov.f32	s1, s14
 8007d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007d4e:	f016 fbf3 	bl	801e538 <atan2f>
 8007d52:	eef0 7a40 	vmov.f32	s15, s0
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8007d5c:	e049      	b.n	8007df2 <PathPlan+0x297a>
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6c:	d007      	beq.n	8007d7e <PathPlan+0x2906>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7c:	d10b      	bne.n	8007d96 <PathPlan+0x291e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	d503      	bpl.n	8007d96 <PathPlan+0x291e>
						pp->heading = 1.5708;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <PathPlan+0x295c>)
 8007d92:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d94:	e02d      	b.n	8007df2 <PathPlan+0x297a>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007d9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da4:	d007      	beq.n	8007db6 <PathPlan+0x293e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007dac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db4:	d112      	bne.n	8007ddc <PathPlan+0x2964>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc4:	dd0a      	ble.n	8007ddc <PathPlan+0x2964>
						pp->heading = -1.5708;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a03      	ldr	r2, [pc, #12]	; (8007dd8 <PathPlan+0x2960>)
 8007dca:	65da      	str	r2, [r3, #92]	; 0x5c
 8007dcc:	e011      	b.n	8007df2 <PathPlan+0x297a>
 8007dce:	bf00      	nop
 8007dd0:	40021014 	.word	0x40021014
 8007dd4:	3fc90ff9 	.word	0x3fc90ff9
 8007dd8:	bfc90ff9 	.word	0xbfc90ff9
						pp->heading = 0.0;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c
						pp->rotate = 1;
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
 8007dea:	f043 0308 	orr.w	r3, r3, #8
 8007dee:	f882 3538 	strb.w	r3, [r2, #1336]	; 0x538
				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	3374      	adds	r3, #116	; 0x74
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	ed93 8a00 	vldr	s16, [r3]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007e0e:	f016 fb09 	bl	801e424 <cosf>
 8007e12:	eef0 7a40 	vmov.f32	s15, s0
 8007e16:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	3374      	adds	r3, #116	; 0x74
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	ed93 8a00 	vldr	s16, [r3]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007e38:	eeb0 0a67 	vmov.f32	s0, s15
 8007e3c:	f016 fb3a 	bl	801e4b4 <sinf>
 8007e40:	eef0 7a40 	vmov.f32	s15, s0
 8007e44:	ee68 7a27 	vmul.f32	s15, s16, s15
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				if(pp->rotate){
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <PathPlan+0x29f6>
					pp->vx = pp->vy = 0.0;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	665a      	str	r2, [r3, #100]	; 0x64
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	661a      	str	r2, [r3, #96]	; 0x60
				PID(&(pp->x));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fc fe28 	bl	8004aca <PID>
				PID(&(pp->y));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fc fe22 	bl	8004aca <PID>
				PID(&(pp->z));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fc fe1c 	bl	8004aca <PID>
				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007ea2:	f016 fabf 	bl	801e424 <cosf>
 8007ea6:	eef0 7a40 	vmov.f32	s15, s0
 8007eaa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	edd3 7a06 	vldr	s15, [r3, #24]
 8007eba:	eeb0 0a67 	vmov.f32	s0, s15
 8007ebe:	f016 faf9 	bl	801e4b4 <sinf>
 8007ec2:	eef0 7a40 	vmov.f32	s15, s0
 8007ec6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007eca:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	ed93 8aaf 	vldr	s16, [r3, #700]	; 0x2bc
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ee4:	f016 fae6 	bl	801e4b4 <sinf>
 8007ee8:	eef0 7a40 	vmov.f32	s15, s0
 8007eec:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	edd3 8ab0 	vldr	s17, [r3, #704]	; 0x2c0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	edd3 7a06 	vldr	s15, [r3, #24]
 8007efc:	eeb0 0a67 	vmov.f32	s0, s15
 8007f00:	f016 fa90 	bl	801e424 <cosf>
 8007f04:	eef0 7a40 	vmov.f32	s15, s0
 8007f08:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007f0c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	edc3 7ab3 	vstr	s15, [r3, #716]	; 0x2cc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f22:	eeb0 0a67 	vmov.f32	s0, s15
 8007f26:	f016 fa7d 	bl	801e424 <cosf>
 8007f2a:	eef0 7a40 	vmov.f32	s15, s0
 8007f2e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f42:	f016 fab7 	bl	801e4b4 <sinf>
 8007f46:	eef0 7a40 	vmov.f32	s15, s0
 8007f4a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007f4e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	edc3 7ab4 	vstr	s15, [r3, #720]	; 0x2d0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	ed93 8a18 	vldr	s16, [r3, #96]	; 0x60
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f64:	eeb0 0a67 	vmov.f32	s0, s15
 8007f68:	f016 faa4 	bl	801e4b4 <sinf>
 8007f6c:	eef0 7a40 	vmov.f32	s15, s0
 8007f70:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	edd3 8a19 	vldr	s17, [r3, #100]	; 0x64
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f80:	eeb0 0a67 	vmov.f32	s0, s15
 8007f84:	f016 fa4e 	bl	801e424 <cosf>
 8007f88:	eef0 7a40 	vmov.f32	s15, s0
 8007f8c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007f90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	edc3 7ab5 	vstr	s15, [r3, #724]	; 0x2d4
				if(pp->base_shape== fwd_omni){
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	f040 815c 	bne.w	800825e <PathPlan+0x2de6>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fb6:	ee17 0a90 	vmov	r0, s15
 8007fba:	f7f8 fac5 	bl	8000548 <__aeabi_f2d>
 8007fbe:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 fb17 	bl	80005f8 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4614      	mov	r4, r2
 8007fd0:	461d      	mov	r5, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7f8 fab5 	bl	8000548 <__aeabi_f2d>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	f7f8 f94f 	bl	8000288 <__aeabi_dsub>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	f7f8 fdf9 	bl	8000be8 <__aeabi_d2f>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800800a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800800e:	ee17 0a90 	vmov	r0, s15
 8008012:	f7f8 fa99 	bl	8000548 <__aeabi_f2d>
 8008016:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 faeb 	bl	80005f8 <__aeabi_dmul>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4614      	mov	r4, r2
 8008028:	461d      	mov	r5, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008030:	4618      	mov	r0, r3
 8008032:	f7f8 fa89 	bl	8000548 <__aeabi_f2d>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 f925 	bl	800028c <__adddf3>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4610      	mov	r0, r2
 8008048:	4619      	mov	r1, r3
 800804a:	f7f8 fdcd 	bl	8000be8 <__aeabi_d2f>
 800804e:	4602      	mov	r2, r0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008066:	ee17 0a90 	vmov	r0, s15
 800806a:	f7f8 fa6d 	bl	8000548 <__aeabi_f2d>
 800806e:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 fabf 	bl	80005f8 <__aeabi_dmul>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4614      	mov	r4, r2
 8008080:	461d      	mov	r5, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008088:	4618      	mov	r0, r3
 800808a:	f7f8 fa5d 	bl	8000548 <__aeabi_f2d>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4620      	mov	r0, r4
 8008094:	4629      	mov	r1, r5
 8008096:	f7f8 f8f9 	bl	800028c <__adddf3>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4610      	mov	r0, r2
 80080a0:	4619      	mov	r1, r3
 80080a2:	f7f8 fda1 	bl	8000be8 <__aeabi_d2f>
 80080a6:	4602      	mov	r2, r0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80080ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080be:	ee17 0a90 	vmov	r0, s15
 80080c2:	f7f8 fa41 	bl	8000548 <__aeabi_f2d>
 80080c6:	a3ef      	add	r3, pc, #956	; (adr r3, 8008484 <PathPlan+0x300c>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f7f8 fa94 	bl	80005f8 <__aeabi_dmul>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4614      	mov	r4, r2
 80080d6:	461d      	mov	r5, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080de:	4618      	mov	r0, r3
 80080e0:	f7f8 fa32 	bl	8000548 <__aeabi_f2d>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4620      	mov	r0, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	f7f8 f8cc 	bl	8000288 <__aeabi_dsub>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	f7f8 fd76 	bl	8000be8 <__aeabi_d2f>
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008114:	ee17 0a90 	vmov	r0, s15
 8008118:	f7f8 fa16 	bl	8000548 <__aeabi_f2d>
 800811c:	a3d9      	add	r3, pc, #868	; (adr r3, 8008484 <PathPlan+0x300c>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f7f8 fa69 	bl	80005f8 <__aeabi_dmul>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4614      	mov	r4, r2
 800812c:	461d      	mov	r5, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008134:	4618      	mov	r0, r3
 8008136:	f7f8 fa07 	bl	8000548 <__aeabi_f2d>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 f8a3 	bl	800028c <__adddf3>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4610      	mov	r0, r2
 800814c:	4619      	mov	r1, r3
 800814e:	f7f8 fd4b 	bl	8000be8 <__aeabi_d2f>
 8008152:	4602      	mov	r2, r0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800816a:	ee17 0a90 	vmov	r0, s15
 800816e:	f7f8 f9eb 	bl	8000548 <__aeabi_f2d>
 8008172:	a3c4      	add	r3, pc, #784	; (adr r3, 8008484 <PathPlan+0x300c>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 fa3e 	bl	80005f8 <__aeabi_dmul>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4614      	mov	r4, r2
 8008182:	461d      	mov	r5, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800818a:	4618      	mov	r0, r3
 800818c:	f7f8 f9dc 	bl	8000548 <__aeabi_f2d>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4620      	mov	r0, r4
 8008196:	4629      	mov	r1, r5
 8008198:	f7f8 f878 	bl	800028c <__adddf3>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	f7f8 fd20 	bl	8000be8 <__aeabi_d2f>
 80081a8:	4602      	mov	r2, r0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80081bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081c0:	ee17 0a90 	vmov	r0, s15
 80081c4:	f7f8 f9c0 	bl	8000548 <__aeabi_f2d>
 80081c8:	a3ae      	add	r3, pc, #696	; (adr r3, 8008484 <PathPlan+0x300c>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 fa13 	bl	80005f8 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4614      	mov	r4, r2
 80081d8:	461d      	mov	r5, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7f8 f9b1 	bl	8000548 <__aeabi_f2d>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4620      	mov	r0, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	f7f8 f84d 	bl	800028c <__adddf3>
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	f7f8 fcf5 	bl	8000be8 <__aeabi_d2f>
 80081fe:	4602      	mov	r2, r0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	ed93 7ab5 	vldr	s14, [r3, #724]	; 0x2d4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8008212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008216:	ee17 0a90 	vmov	r0, s15
 800821a:	f7f8 f995 	bl	8000548 <__aeabi_f2d>
 800821e:	a399      	add	r3, pc, #612	; (adr r3, 8008484 <PathPlan+0x300c>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f9e8 	bl	80005f8 <__aeabi_dmul>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008236:	4618      	mov	r0, r3
 8008238:	f7f8 f986 	bl	8000548 <__aeabi_f2d>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4620      	mov	r0, r4
 8008242:	4629      	mov	r1, r5
 8008244:	f7f8 f822 	bl	800028c <__adddf3>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	f7f8 fcca 	bl	8000be8 <__aeabi_d2f>
 8008254:	4602      	mov	r2, r0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 800825c:	e103      	b.n	8008466 <PathPlan+0x2fee>
				} else if(pp->base_shape==tri_omni){
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8008264:	2b01      	cmp	r3, #1
 8008266:	f040 80fe 	bne.w	8008466 <PathPlan+0x2fee>
					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008270:	4618      	mov	r0, r3
 8008272:	f7f8 f969 	bl	8000548 <__aeabi_f2d>
 8008276:	a380      	add	r3, pc, #512	; (adr r3, 8008478 <PathPlan+0x3000>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4614      	mov	r4, r2
 8008286:	461d      	mov	r5, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800828e:	4618      	mov	r0, r3
 8008290:	f7f8 f95a 	bl	8000548 <__aeabi_f2d>
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	4b79      	ldr	r3, [pc, #484]	; (8008480 <PathPlan+0x3008>)
 800829a:	f7f8 f9ad 	bl	80005f8 <__aeabi_dmul>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	4620      	mov	r0, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	f7f7 ffef 	bl	8000288 <__aeabi_dsub>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4614      	mov	r4, r2
 80082b0:	461d      	mov	r5, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7f8 f945 	bl	8000548 <__aeabi_f2d>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f7 ffe1 	bl	800028c <__adddf3>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4610      	mov	r0, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	f7f8 fc89 	bl	8000be8 <__aeabi_d2f>
 80082d6:	4602      	mov	r2, r0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7f8 f92f 	bl	8000548 <__aeabi_f2d>
 80082ea:	a363      	add	r3, pc, #396	; (adr r3, 8008478 <PathPlan+0x3000>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f8 f982 	bl	80005f8 <__aeabi_dmul>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4614      	mov	r4, r2
 80082fa:	461d      	mov	r5, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008302:	4618      	mov	r0, r3
 8008304:	f7f8 f920 	bl	8000548 <__aeabi_f2d>
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	4b5c      	ldr	r3, [pc, #368]	; (8008480 <PathPlan+0x3008>)
 800830e:	f7f8 f973 	bl	80005f8 <__aeabi_dmul>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f7 ffb7 	bl	800028c <__adddf3>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4614      	mov	r4, r2
 8008324:	461d      	mov	r5, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800832c:	4618      	mov	r0, r3
 800832e:	f7f8 f90b 	bl	8000548 <__aeabi_f2d>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f7 ffa5 	bl	8000288 <__aeabi_dsub>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4610      	mov	r0, r2
 8008344:	4619      	mov	r1, r3
 8008346:	f7f8 fc4f 	bl	8000be8 <__aeabi_d2f>
 800834a:	4602      	mov	r2, r0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	ed93 7ab2 	vldr	s14, [r3, #712]	; 0x2c8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800835e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800836e:	4618      	mov	r0, r3
 8008370:	f7f8 f8ea 	bl	8000548 <__aeabi_f2d>
 8008374:	a340      	add	r3, pc, #256	; (adr r3, 8008478 <PathPlan+0x3000>)
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f7f8 f93d 	bl	80005f8 <__aeabi_dmul>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4614      	mov	r4, r2
 8008384:	461d      	mov	r5, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800838c:	4618      	mov	r0, r3
 800838e:	f7f8 f8db 	bl	8000548 <__aeabi_f2d>
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	4b3a      	ldr	r3, [pc, #232]	; (8008480 <PathPlan+0x3008>)
 8008398:	f7f8 f92e 	bl	80005f8 <__aeabi_dmul>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4620      	mov	r0, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	f7f7 ff70 	bl	8000288 <__aeabi_dsub>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	461d      	mov	r5, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7f8 f8c6 	bl	8000548 <__aeabi_f2d>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4620      	mov	r0, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	f7f7 ff62 	bl	800028c <__adddf3>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	4610      	mov	r0, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	f7f8 fc0a 	bl	8000be8 <__aeabi_d2f>
 80083d4:	4602      	mov	r2, r0
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7f8 f8b0 	bl	8000548 <__aeabi_f2d>
 80083e8:	a323      	add	r3, pc, #140	; (adr r3, 8008478 <PathPlan+0x3000>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f7f8 f903 	bl	80005f8 <__aeabi_dmul>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4614      	mov	r4, r2
 80083f8:	461d      	mov	r5, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008400:	4618      	mov	r0, r3
 8008402:	f7f8 f8a1 	bl	8000548 <__aeabi_f2d>
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <PathPlan+0x3008>)
 800840c:	f7f8 f8f4 	bl	80005f8 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f7 ff38 	bl	800028c <__adddf3>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4614      	mov	r4, r2
 8008422:	461d      	mov	r5, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800842a:	4618      	mov	r0, r3
 800842c:	f7f8 f88c 	bl	8000548 <__aeabi_f2d>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f7 ff28 	bl	800028c <__adddf3>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	f7f8 fbd0 	bl	8000be8 <__aeabi_d2f>
 8008448:	4602      	mov	r2, r0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	ed93 7ab4 	vldr	s14, [r3, #720]	; 0x2d0
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800845c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	ecbd 8b02 	vpop	{d8}
 8008470:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008474:	f3af 8000 	nop.w
 8008478:	a1cac083 	.word	0xa1cac083
 800847c:	3febb645 	.word	0x3febb645
 8008480:	3fe00000 	.word	0x3fe00000
 8008484:	dbf8b9bb 	.word	0xdbf8b9bb
 8008488:	3fe6a09e 	.word	0x3fe6a09e

0800848c <PP_setXY>:

void PP_setXY (int x,int y,PathPlan_t *pp){
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]

	QEIWrite(QEI2,x);
 8008498:	68f9      	ldr	r1, [r7, #12]
 800849a:	2002      	movs	r0, #2
 800849c:	f7f9 fcec 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI5,y);
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	2005      	movs	r0, #5
 80084a4:	f7f9 fce8 	bl	8001e78 <QEIWrite>
	//pp->real_y=0.0;

	//	pp->prev_real_x=0.0;
	//	pp->prev_real_y=0.0;

}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <R6091U_Init>:
#include "../include.h"




void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	601a      	str	r2, [r3, #0]
	IMU->State = PENDING_SYNC;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3306      	adds	r3, #6
 80084ce:	2201      	movs	r2, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	f00b ffba 	bl	801444a <HAL_UART_Receive_IT>

}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <R6091U_Handler>:


void R6091U_Handler(R6091U_t* IMU){
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	791b      	ldrb	r3, [r3, #4]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d033      	beq.n	8008558 <R6091U_Handler+0x78>
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	f300 80ab 	bgt.w	800864c <R6091U_Handler+0x16c>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <R6091U_Handler+0x20>
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d010      	beq.n	8008520 <R6091U_Handler+0x40>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 80084fe:	e0a5      	b.n	800864c <R6091U_Handler+0x16c>
		if(IMU->Buffer[0] == 0xAA){
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	799b      	ldrb	r3, [r3, #6]
 8008504:	2baa      	cmp	r3, #170	; 0xaa
 8008506:	d102      	bne.n	800850e <R6091U_Handler+0x2e>
			IMU->State = CONFIRMING_SYNC;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3306      	adds	r3, #6
 8008516:	2201      	movs	r2, #1
 8008518:	4619      	mov	r1, r3
 800851a:	f00b ff96 	bl	801444a <HAL_UART_Receive_IT>
		break;
 800851e:	e095      	b.n	800864c <R6091U_Handler+0x16c>
		if(IMU->Buffer[0] == 0x00){
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	799b      	ldrb	r3, [r3, #6]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10b      	bne.n	8008540 <R6091U_Handler+0x60>
			IMU->State = IN_SYNC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	711a      	strb	r2, [r3, #4]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3306      	adds	r3, #6
 8008536:	220d      	movs	r2, #13
 8008538:	4619      	mov	r1, r3
 800853a:	f00b ff86 	bl	801444a <HAL_UART_Receive_IT>
		break;
 800853e:	e085      	b.n	800864c <R6091U_Handler+0x16c>
			IMU->State = PENDING_SYNC;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	711a      	strb	r2, [r3, #4]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3306      	adds	r3, #6
 800854e:	2201      	movs	r2, #1
 8008550:	4619      	mov	r1, r3
 8008552:	f00b ff7a 	bl	801444a <HAL_UART_Receive_IT>
		break;
 8008556:	e079      	b.n	800864c <R6091U_Handler+0x16c>
		IMU->checksum = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	715a      	strb	r2, [r3, #5]
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	799a      	ldrb	r2, [r3, #6]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	79db      	ldrb	r3, [r3, #7]
 8008566:	4413      	add	r3, r2
 8008568:	b2da      	uxtb	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7a1b      	ldrb	r3, [r3, #8]
 800856e:	4413      	add	r3, r2
 8008570:	b2da      	uxtb	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7a5b      	ldrb	r3, [r3, #9]
 8008576:	4413      	add	r3, r2
 8008578:	b2da      	uxtb	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7a9b      	ldrb	r3, [r3, #10]
 800857e:	4413      	add	r3, r2
 8008580:	b2da      	uxtb	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	7adb      	ldrb	r3, [r3, #11]
 8008586:	4413      	add	r3, r2
 8008588:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7b1b      	ldrb	r3, [r3, #12]
 800858e:	4413      	add	r3, r2
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	7b5b      	ldrb	r3, [r3, #13]
 8008596:	4413      	add	r3, r2
 8008598:	b2da      	uxtb	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	7b9b      	ldrb	r3, [r3, #14]
 800859e:	4413      	add	r3, r2
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7bdb      	ldrb	r3, [r3, #15]
 80085a6:	4413      	add	r3, r2
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	7c1b      	ldrb	r3, [r3, #16]
 80085ae:	4413      	add	r3, r2
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7c5b      	ldrb	r3, [r3, #17]
 80085b6:	4413      	add	r3, r2
 80085b8:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	715a      	strb	r2, [r3, #5]
		if( IMU->checksum == IMU->Buffer[12]){
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	795a      	ldrb	r2, [r3, #5]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	7c9b      	ldrb	r3, [r3, #18]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d12d      	bne.n	8008626 <R6091U_Handler+0x146>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3307      	adds	r3, #7
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 80085d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085de:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8008654 <R6091U_Handler+0x174>
 80085e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008658 <R6091U_Handler+0x178>
 80085ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085ee:	4b1b      	ldr	r3, [pc, #108]	; (800865c <R6091U_Handler+0x17c>)
 80085f0:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 80085f4:	4b1a      	ldr	r3, [pc, #104]	; (8008660 <R6091U_Handler+0x180>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b13      	cmp	r3, #19
 80085fa:	dd0f      	ble.n	800861c <R6091U_Handler+0x13c>
				LED3 = !LED3;
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <R6091U_Handler+0x184>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b25b      	sxtb	r3, r3
 8008602:	4a18      	ldr	r2, [pc, #96]	; (8008664 <R6091U_Handler+0x184>)
 8008604:	43db      	mvns	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	09db      	lsrs	r3, r3, #7
 800860a:	b2d9      	uxtb	r1, r3
 800860c:	7813      	ldrb	r3, [r2, #0]
 800860e:	f361 13c7 	bfi	r3, r1, #7, #1
 8008612:	7013      	strb	r3, [r2, #0]
				testCounter2 = 0;
 8008614:	4b12      	ldr	r3, [pc, #72]	; (8008660 <R6091U_Handler+0x180>)
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e004      	b.n	8008626 <R6091U_Handler+0x146>
				testCounter2 ++;
 800861c:	4b10      	ldr	r3, [pc, #64]	; (8008660 <R6091U_Handler+0x180>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	4a0f      	ldr	r2, [pc, #60]	; (8008660 <R6091U_Handler+0x180>)
 8008624:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3306      	adds	r3, #6
 800862a:	220d      	movs	r2, #13
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f011 fa04 	bl	8019a3c <memset>
		IMU->State = PENDING_SYNC;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3306      	adds	r3, #6
 8008642:	2201      	movs	r2, #1
 8008644:	4619      	mov	r1, r3
 8008646:	f00b ff00 	bl	801444a <HAL_UART_Receive_IT>
		break;
 800864a:	bf00      	nop
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	42c80000 	.word	0x42c80000
 8008658:	43340000 	.word	0x43340000
 800865c:	20007ca0 	.word	0x20007ca0
 8008660:	20006678 	.word	0x20006678
 8008664:	40021014 	.word	0x40021014

08008668 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0

    HAL_SPI_IRQHandler(&hspi1);
 800866c:	4802      	ldr	r0, [pc, #8]	; (8008678 <SPI1_IRQHandler+0x10>)
 800866e:	f00a fd81 	bl	8013174 <HAL_SPI_IRQHandler>

}
 8008672:	bf00      	nop
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20008300 	.word	0x20008300

0800867c <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0

    HAL_SPI_IRQHandler(&hspi2);
 8008680:	4802      	ldr	r0, [pc, #8]	; (800868c <SPI2_IRQHandler+0x10>)
 8008682:	f00a fd77 	bl	8013174 <HAL_SPI_IRQHandler>

}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200081ec 	.word	0x200081ec

08008690 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0

    HAL_SPI_IRQHandler(&hspi3);
 8008694:	4802      	ldr	r0, [pc, #8]	; (80086a0 <SPI3_IRQHandler+0x10>)
 8008696:	f00a fd6d 	bl	8013174 <HAL_SPI_IRQHandler>

}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20008244 	.word	0x20008244

080086a4 <S_FuzzyInit>:
#include "s_fuzzy_pid.h"



void S_FuzzyInit(S_Fuzzy_t *Fuzzy,PID_t *PID,float Max_KP,float Max_KI,float Max_KD, float Error_Scale){
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6178      	str	r0, [r7, #20]
 80086ac:	6139      	str	r1, [r7, #16]
 80086ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80086b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80086b6:	ed87 1a01 	vstr	s2, [r7, #4]
 80086ba:	edc7 1a00 	vstr	s3, [r7]

	Fuzzy->PID = PID;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	655a      	str	r2, [r3, #84]	; 0x54
	Fuzzy->MaxKP = Max_KP;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	601a      	str	r2, [r3, #0]
	Fuzzy->MaxKI = Max_KI;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	605a      	str	r2, [r3, #4]
	Fuzzy->MaxKD = Max_KD;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	609a      	str	r2, [r3, #8]
	Fuzzy->Error_scale = Error_Scale;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	60da      	str	r2, [r3, #12]
	Fuzzy->previous_error=0;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f04f 0200 	mov.w	r2, #0
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <APPResetPos>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

void APPResetPos(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
	sys.flag = 0;
 80086f4:	4b30      	ldr	r3, [pc, #192]	; (80087b8 <APPResetPos+0xc8>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	801a      	strh	r2, [r3, #0]

	QEIReset(QEI1);
 80086fa:	2001      	movs	r0, #1
 80086fc:	f7f9 fc24 	bl	8001f48 <QEIReset>
	QEIReset(QEI2);
 8008700:	2002      	movs	r0, #2
 8008702:	f7f9 fc21 	bl	8001f48 <QEIReset>
	QEIReset(QEI3);
 8008706:	2003      	movs	r0, #3
 8008708:	f7f9 fc1e 	bl	8001f48 <QEIReset>
	QEIReset(QEI4);
 800870c:	2004      	movs	r0, #4
 800870e:	f7f9 fc1b 	bl	8001f48 <QEIReset>
	QEIReset(QEI5);
 8008712:	2005      	movs	r0, #5
 8008714:	f7f9 fc18 	bl	8001f48 <QEIReset>
	QEIReset(QEI6);
 8008718:	2006      	movs	r0, #6
 800871a:	f7f9 fc15 	bl	8001f48 <QEIReset>

	QEIWrite(QEI1, MIN_POSCNT);
 800871e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008722:	2001      	movs	r0, #1
 8008724:	f7f9 fba8 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI2, MIN_POSCNT);
 8008728:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800872c:	2002      	movs	r0, #2
 800872e:	f7f9 fba3 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI3, MIN_POSCNT);
 8008732:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008736:	2003      	movs	r0, #3
 8008738:	f7f9 fb9e 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI4, MIN_POSCNT);
 800873c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008740:	2004      	movs	r0, #4
 8008742:	f7f9 fb99 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI5, MIN_POSCNT);
 8008746:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800874a:	2005      	movs	r0, #5
 800874c:	f7f9 fb94 	bl	8001e78 <QEIWrite>
	QEIWrite(QEI6, MIN_POSCNT);
 8008750:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008754:	2006      	movs	r0, #6
 8008756:	f7f9 fb8f 	bl	8001e78 <QEIWrite>

	fFLeftPosData = 0.0;
 800875a:	4b18      	ldr	r3, [pc, #96]	; (80087bc <APPResetPos+0xcc>)
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
	fFRightPosData = 0.0;
 8008762:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <APPResetPos+0xd0>)
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	601a      	str	r2, [r3, #0]

	fBLeftPosData = 0.0;
 800876a:	4b16      	ldr	r3, [pc, #88]	; (80087c4 <APPResetPos+0xd4>)
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
	fBRightPosData = 0.0;
 8008772:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <APPResetPos+0xd8>)
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	601a      	str	r2, [r3, #0]

	fXEncData = 0.0;
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <APPResetPos+0xdc>)
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
	fYEncData = 0.0;
 8008782:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <APPResetPos+0xe0>)
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	601a      	str	r2, [r3, #0]

	ABTEstimateInit(&fleft_pos_data);
 800878a:	4812      	ldr	r0, [pc, #72]	; (80087d4 <APPResetPos+0xe4>)
 800878c:	f7f8 fc5b 	bl	8001046 <ABTEstimateInit>
	ABTEstimateInit(&fright_pos_data);
 8008790:	4811      	ldr	r0, [pc, #68]	; (80087d8 <APPResetPos+0xe8>)
 8008792:	f7f8 fc58 	bl	8001046 <ABTEstimateInit>

	ABTEstimateInit(&bleft_pos_data);
 8008796:	4811      	ldr	r0, [pc, #68]	; (80087dc <APPResetPos+0xec>)
 8008798:	f7f8 fc55 	bl	8001046 <ABTEstimateInit>
	ABTEstimateInit(&bright_pos_data);
 800879c:	4810      	ldr	r0, [pc, #64]	; (80087e0 <APPResetPos+0xf0>)
 800879e:	f7f8 fc52 	bl	8001046 <ABTEstimateInit>

	ABTEstimateInit(&x_data);
 80087a2:	4810      	ldr	r0, [pc, #64]	; (80087e4 <APPResetPos+0xf4>)
 80087a4:	f7f8 fc4f 	bl	8001046 <ABTEstimateInit>
	ABTEstimateInit(&y_data);
 80087a8:	480f      	ldr	r0, [pc, #60]	; (80087e8 <APPResetPos+0xf8>)
 80087aa:	f7f8 fc4c 	bl	8001046 <ABTEstimateInit>

	junction_count = 0;
 80087ae:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <APPResetPos+0xfc>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	801a      	strh	r2, [r3, #0]

}
 80087b4:	bf00      	nop
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20006db0 	.word	0x20006db0
 80087bc:	2000796c 	.word	0x2000796c
 80087c0:	20006dac 	.word	0x20006dac
 80087c4:	20006dc0 	.word	0x20006dc0
 80087c8:	200081c0 	.word	0x200081c0
 80087cc:	200066a8 	.word	0x200066a8
 80087d0:	200080c0 	.word	0x200080c0
 80087d4:	20007a68 	.word	0x20007a68
 80087d8:	20007f28 	.word	0x20007f28
 80087dc:	20007748 	.word	0x20007748
 80087e0:	20007da8 	.word	0x20007da8
 80087e4:	200080a0 	.word	0x200080a0
 80087e8:	20006e6c 	.word	0x20006e6c
 80087ec:	200065b0 	.word	0x200065b0

080087f0 <APPSet>:

void APPSet(param_t *par)
{
 80087f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087f4:	b094      	sub	sp, #80	; 0x50
 80087f6:	af0c      	add	r7, sp, #48	; 0x30
 80087f8:	61f8      	str	r0, [r7, #28]
	static int i = 0;
	switch (par->parameter){
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	3b14      	subs	r3, #20
 8008800:	2b3f      	cmp	r3, #63	; 0x3f
 8008802:	f201 8226 	bhi.w	8009c52 <APPSet+0x1462>
 8008806:	a201      	add	r2, pc, #4	; (adr r2, 800880c <APPSet+0x1c>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	080095e9 	.word	0x080095e9
 8008810:	08009c53 	.word	0x08009c53
 8008814:	08008947 	.word	0x08008947
 8008818:	0800893d 	.word	0x0800893d
 800881c:	08009c53 	.word	0x08009c53
 8008820:	08008a3b 	.word	0x08008a3b
 8008824:	08008981 	.word	0x08008981
 8008828:	0800898d 	.word	0x0800898d
 800882c:	08008999 	.word	0x08008999
 8008830:	080089ad 	.word	0x080089ad
 8008834:	08009c53 	.word	0x08009c53
 8008838:	0800953d 	.word	0x0800953d
 800883c:	0800954f 	.word	0x0800954f
 8008840:	0800890d 	.word	0x0800890d
 8008844:	080089c5 	.word	0x080089c5
 8008848:	08009c53 	.word	0x08009c53
 800884c:	08009b07 	.word	0x08009b07
 8008850:	08008c87 	.word	0x08008c87
 8008854:	08008d23 	.word	0x08008d23
 8008858:	08008cd5 	.word	0x08008cd5
 800885c:	08008d71 	.word	0x08008d71
 8008860:	08009a6f 	.word	0x08009a6f
 8008864:	08009abb 	.word	0x08009abb
 8008868:	08008dbf 	.word	0x08008dbf
 800886c:	08008f7f 	.word	0x08008f7f
 8008870:	08008e63 	.word	0x08008e63
 8008874:	08009023 	.word	0x08009023
 8008878:	08008e11 	.word	0x08008e11
 800887c:	08008fd1 	.word	0x08008fd1
 8008880:	08008f2d 	.word	0x08008f2d
 8008884:	08009075 	.word	0x08009075
 8008888:	0800968f 	.word	0x0800968f
 800888c:	080096df 	.word	0x080096df
 8008890:	080095ef 	.word	0x080095ef
 8008894:	0800963f 	.word	0x0800963f
 8008898:	08009761 	.word	0x08009761
 800889c:	080097b1 	.word	0x080097b1
 80088a0:	08009801 	.word	0x08009801
 80088a4:	08009851 	.word	0x08009851
 80088a8:	08009c53 	.word	0x08009c53
 80088ac:	08009c53 	.word	0x08009c53
 80088b0:	08009133 	.word	0x08009133
 80088b4:	08009265 	.word	0x08009265
 80088b8:	08009375 	.word	0x08009375
 80088bc:	0800949d 	.word	0x0800949d
 80088c0:	08009185 	.word	0x08009185
 80088c4:	080092b7 	.word	0x080092b7
 80088c8:	080093c7 	.word	0x080093c7
 80088cc:	080094ed 	.word	0x080094ed
 80088d0:	08008a0f 	.word	0x08008a0f
 80088d4:	08008c05 	.word	0x08008c05
 80088d8:	08008c2d 	.word	0x08008c2d
 80088dc:	08009c53 	.word	0x08009c53
 80088e0:	08009561 	.word	0x08009561
 80088e4:	080090c7 	.word	0x080090c7
 80088e8:	080091f9 	.word	0x080091f9
 80088ec:	08009309 	.word	0x08009309
 80088f0:	08009419 	.word	0x08009419
 80088f4:	080098a1 	.word	0x080098a1
 80088f8:	08008c55 	.word	0x08008c55
 80088fc:	08009c53 	.word	0x08009c53
 8008900:	08009c53 	.word	0x08009c53
 8008904:	08009c53 	.word	0x08009c53
 8008908:	08008a67 	.word	0x08008a67

	case RNS_Printing:
		data = (uint8_t)par->param_buffer[0].data;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008916:	edc7 7a04 	vstr	s15, [r7, #16]
 800891a:	7c3b      	ldrb	r3, [r7, #16]
 800891c:	b2da      	uxtb	r2, r3
 800891e:	4ba9      	ldr	r3, [pc, #676]	; (8008bc4 <APPSet+0x3d4>)
 8008920:	701a      	strb	r2, [r3, #0]
		status = par->param_buffer[1].data;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	edd3 7a02 	vldr	s15, [r3, #8]
 8008928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800892c:	edc7 7a04 	vstr	s15, [r7, #16]
 8008930:	7c3b      	ldrb	r3, [r7, #16]
 8008932:	b2da      	uxtb	r2, r3
 8008934:	4ba4      	ldr	r3, [pc, #656]	; (8008bc8 <APPSet+0x3d8>)
 8008936:	701a      	strb	r2, [r3, #0]
		break;
 8008938:	f001 b994 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PP_Reset:
		PP_reset(&pp);
 800893c:	48a3      	ldr	r0, [pc, #652]	; (8008bcc <APPSet+0x3dc>)
 800893e:	f7fc fd21 	bl	8005384 <PP_reset>
		break;
 8008942:	f001 b98f 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPInit:
		if (dev_cfg.base_type == tri_omni){
 8008946:	4ba2      	ldr	r3, [pc, #648]	; (8008bd0 <APPSet+0x3e0>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d109      	bne.n	8008962 <APPSet+0x172>
			PPInit(tri_omni,&fXPos,&fYPos,&fyaw,&pp);
 800894e:	4b9f      	ldr	r3, [pc, #636]	; (8008bcc <APPSet+0x3dc>)
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4ba0      	ldr	r3, [pc, #640]	; (8008bd4 <APPSet+0x3e4>)
 8008954:	4aa0      	ldr	r2, [pc, #640]	; (8008bd8 <APPSet+0x3e8>)
 8008956:	49a1      	ldr	r1, [pc, #644]	; (8008bdc <APPSet+0x3ec>)
 8008958:	2001      	movs	r0, #1
 800895a:	f7fc f997 	bl	8004c8c <PPInit>
		} else if(dev_cfg.base_type == fwd_omni) {
			PPInit(fwd_omni,&fXPos,&fYPos,&fyaw,&pp);
		}
		break;
 800895e:	f001 b97a 	b.w	8009c56 <APPSet+0x1466>
		} else if(dev_cfg.base_type == fwd_omni) {
 8008962:	4b9b      	ldr	r3, [pc, #620]	; (8008bd0 <APPSet+0x3e0>)
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b02      	cmp	r3, #2
 8008968:	f041 8175 	bne.w	8009c56 <APPSet+0x1466>
			PPInit(fwd_omni,&fXPos,&fYPos,&fyaw,&pp);
 800896c:	4b97      	ldr	r3, [pc, #604]	; (8008bcc <APPSet+0x3dc>)
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	4b98      	ldr	r3, [pc, #608]	; (8008bd4 <APPSet+0x3e4>)
 8008972:	4a99      	ldr	r2, [pc, #612]	; (8008bd8 <APPSet+0x3e8>)
 8008974:	4999      	ldr	r1, [pc, #612]	; (8008bdc <APPSet+0x3ec>)
 8008976:	2002      	movs	r0, #2
 8008978:	f7fc f988 	bl	8004c8c <PPInit>
		break;
 800897c:	f001 b96b 	b.w	8009c56 <APPSet+0x1466>

	case RNS_PPSetX:
		pp.real_x=par->param_buffer[0].data;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4a91      	ldr	r2, [pc, #580]	; (8008bcc <APPSet+0x3dc>)
 8008986:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8008988:	f001 b96c 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPSetY:
		pp.real_y=par->param_buffer[0].data;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	4a8e      	ldr	r2, [pc, #568]	; (8008bcc <APPSet+0x3dc>)
 8008992:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 8008994:	f001 b966 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPSetZ:
		PP_SetZ(par->param_buffer[0].data,&pp);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	edd3 7a01 	vldr	s15, [r3, #4]
 800899e:	488b      	ldr	r0, [pc, #556]	; (8008bcc <APPSet+0x3dc>)
 80089a0:	eeb0 0a67 	vmov.f32	s0, s15
 80089a4:	f7fc fd40 	bl	8005428 <PP_SetZ>
		break;
 80089a8:	f001 b95c 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPSetCRV_PTS:
		PP_SetCrv_Points(par->param_buffer[0].data,&pp);
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80089b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089b6:	4985      	ldr	r1, [pc, #532]	; (8008bcc <APPSet+0x3dc>)
 80089b8:	ee17 0a90 	vmov	r0, s15
 80089bc:	f7fc fd4c 	bl	8005458 <PP_SetCrv_Points>
			break;
 80089c0:	f001 b950 	b.w	8009c64 <APPSet+0x1474>

	case RNS_SET_PP_XY:
		PP_setXY((int)(par->param_buffer[0].data/xPtd),(int)(par->param_buffer[1].data/yPtd),&pp);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80089ca:	4b85      	ldr	r3, [pc, #532]	; (8008be0 <APPSet+0x3f0>)
 80089cc:	ed93 7a00 	vldr	s14, [r3]
 80089d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d4:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	edd3 6a02 	vldr	s13, [r3, #8]
 80089de:	4b81      	ldr	r3, [pc, #516]	; (8008be4 <APPSet+0x3f4>)
 80089e0:	ed93 7a00 	vldr	s14, [r3]
 80089e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ec:	4a77      	ldr	r2, [pc, #476]	; (8008bcc <APPSet+0x3dc>)
 80089ee:	ee17 1a90 	vmov	r1, s15
 80089f2:	ee16 0a10 	vmov	r0, s12
 80089f6:	f7ff fd49 	bl	800848c <PP_setXY>
		pp.real_x=par->param_buffer[0].data;
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4a73      	ldr	r2, [pc, #460]	; (8008bcc <APPSet+0x3dc>)
 8008a00:	6353      	str	r3, [r2, #52]	; 0x34
		pp.real_y=par->param_buffer[1].data;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4a71      	ldr	r2, [pc, #452]	; (8008bcc <APPSet+0x3dc>)
 8008a08:	6453      	str	r3, [r2, #68]	; 0x44

		break;
 8008a0a:	f001 b92b 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPSetXYZerror:
		pp.tol_xy=par->param_buffer[0].data;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	4a6e      	ldr	r2, [pc, #440]	; (8008bcc <APPSet+0x3dc>)
 8008a14:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
		pp.tol_z=par->param_buffer[1].data;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	4a6b      	ldr	r2, [pc, #428]	; (8008bcc <APPSet+0x3dc>)
 8008a1e:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
		pp.f_tol_xy=par->param_buffer[2].data;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	4a69      	ldr	r2, [pc, #420]	; (8008bcc <APPSet+0x3dc>)
 8008a28:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
		pp.f_tol_z=par->param_buffer[3].data;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	4a66      	ldr	r2, [pc, #408]	; (8008bcc <APPSet+0x3dc>)
 8008a32:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		break;
 8008a36:	f001 b915 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPSend_num_Point:
		NumPoint = (int)par->param_buffer[0].data;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a44:	ee17 2a90 	vmov	r2, s15
 8008a48:	4b67      	ldr	r3, [pc, #412]	; (8008be8 <APPSet+0x3f8>)
 8008a4a:	601a      	str	r2, [r3, #0]

		sprintf(uartbuff,"Point_no: %d\n",NumPoint);
 8008a4c:	4b66      	ldr	r3, [pc, #408]	; (8008be8 <APPSet+0x3f8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	461a      	mov	r2, r3
 8008a52:	4966      	ldr	r1, [pc, #408]	; (8008bec <APPSet+0x3fc>)
 8008a54:	4866      	ldr	r0, [pc, #408]	; (8008bf0 <APPSet+0x400>)
 8008a56:	f011 fe79 	bl	801a74c <siprintf>
		UART_DMA_PrintString(&huart5,uartbuff);
 8008a5a:	4965      	ldr	r1, [pc, #404]	; (8008bf0 <APPSet+0x400>)
 8008a5c:	4865      	ldr	r0, [pc, #404]	; (8008bf4 <APPSet+0x404>)
 8008a5e:	f7fa fdf3 	bl	8003648 <UART_DMA_PrintString>
		break;
 8008a62:	f001 b8ff 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPSendPoint:
		rcvPoint[i][0].data = (float)par->param_buffer[0].data;
 8008a66:	4b64      	ldr	r3, [pc, #400]	; (8008bf8 <APPSet+0x408>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	6859      	ldr	r1, [r3, #4]
 8008a6e:	4863      	ldr	r0, [pc, #396]	; (8008bfc <APPSet+0x40c>)
 8008a70:	4613      	mov	r3, r2
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4403      	add	r3, r0
 8008a7a:	6019      	str	r1, [r3, #0]
		rcvPoint[i][1].data = (float)par->param_buffer[1].data;
 8008a7c:	4b5e      	ldr	r3, [pc, #376]	; (8008bf8 <APPSet+0x408>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	6899      	ldr	r1, [r3, #8]
 8008a84:	485d      	ldr	r0, [pc, #372]	; (8008bfc <APPSet+0x40c>)
 8008a86:	4613      	mov	r3, r2
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	1a9b      	subs	r3, r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4403      	add	r3, r0
 8008a90:	3304      	adds	r3, #4
 8008a92:	6019      	str	r1, [r3, #0]
		rcvPoint[i][2].data = (float)par->param_buffer[2].data;
 8008a94:	4b58      	ldr	r3, [pc, #352]	; (8008bf8 <APPSet+0x408>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	68d9      	ldr	r1, [r3, #12]
 8008a9c:	4857      	ldr	r0, [pc, #348]	; (8008bfc <APPSet+0x40c>)
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4403      	add	r3, r0
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	6019      	str	r1, [r3, #0]
		rcvPoint[i][3].data = (float)par->param_buffer[3].data;
 8008aac:	4b52      	ldr	r3, [pc, #328]	; (8008bf8 <APPSet+0x408>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	6919      	ldr	r1, [r3, #16]
 8008ab4:	4851      	ldr	r0, [pc, #324]	; (8008bfc <APPSet+0x40c>)
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4403      	add	r3, r0
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	6019      	str	r1, [r3, #0]
		rcvPoint[i][4].data = (float)par->param_buffer[4].data;
 8008ac4:	4b4c      	ldr	r3, [pc, #304]	; (8008bf8 <APPSet+0x408>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	6959      	ldr	r1, [r3, #20]
 8008acc:	484b      	ldr	r0, [pc, #300]	; (8008bfc <APPSet+0x40c>)
 8008ace:	4613      	mov	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4403      	add	r3, r0
 8008ad8:	3310      	adds	r3, #16
 8008ada:	6019      	str	r1, [r3, #0]
		rcvPoint[i][5].data = (float)par->param_buffer[5].data;
 8008adc:	4b46      	ldr	r3, [pc, #280]	; (8008bf8 <APPSet+0x408>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	6999      	ldr	r1, [r3, #24]
 8008ae4:	4845      	ldr	r0, [pc, #276]	; (8008bfc <APPSet+0x40c>)
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4403      	add	r3, r0
 8008af0:	3314      	adds	r3, #20
 8008af2:	6019      	str	r1, [r3, #0]
		rcvPoint[i][6].data = (float)par->param_buffer[6].data;//added
 8008af4:	4b40      	ldr	r3, [pc, #256]	; (8008bf8 <APPSet+0x408>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	69d9      	ldr	r1, [r3, #28]
 8008afc:	483f      	ldr	r0, [pc, #252]	; (8008bfc <APPSet+0x40c>)
 8008afe:	4613      	mov	r3, r2
 8008b00:	00db      	lsls	r3, r3, #3
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4403      	add	r3, r0
 8008b08:	3318      	adds	r3, #24
 8008b0a:	6019      	str	r1, [r3, #0]
		i++;
 8008b0c:	4b3a      	ldr	r3, [pc, #232]	; (8008bf8 <APPSet+0x408>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	4a39      	ldr	r2, [pc, #228]	; (8008bf8 <APPSet+0x408>)
 8008b14:	6013      	str	r3, [r2, #0]

		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",(float)par->param_buffer[0].data,(float)par->param_buffer[1].data,
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7f7 fd14 	bl	8000548 <__aeabi_f2d>
 8008b20:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7f7 fd0d 	bl	8000548 <__aeabi_f2d>
 8008b2e:	4680      	mov	r8, r0
 8008b30:	4689      	mov	r9, r1
				(float)par->param_buffer[2].data,(float)par->param_buffer[3].data,(float)par->param_buffer[4].data,
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	68db      	ldr	r3, [r3, #12]
		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",(float)par->param_buffer[0].data,(float)par->param_buffer[1].data,
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7f7 fd06 	bl	8000548 <__aeabi_f2d>
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	468b      	mov	fp, r1
				(float)par->param_buffer[2].data,(float)par->param_buffer[3].data,(float)par->param_buffer[4].data,
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	691b      	ldr	r3, [r3, #16]
		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",(float)par->param_buffer[0].data,(float)par->param_buffer[1].data,
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7f7 fcff 	bl	8000548 <__aeabi_f2d>
 8008b4a:	e9c7 0102 	strd	r0, r1, [r7, #8]
				(float)par->param_buffer[2].data,(float)par->param_buffer[3].data,(float)par->param_buffer[4].data,
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	695b      	ldr	r3, [r3, #20]
		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",(float)par->param_buffer[0].data,(float)par->param_buffer[1].data,
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7f7 fcf8 	bl	8000548 <__aeabi_f2d>
 8008b58:	e9c7 0100 	strd	r0, r1, [r7]
				(float)par->param_buffer[5].data,(float)par->param_buffer[6].data);
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	699b      	ldr	r3, [r3, #24]
		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",(float)par->param_buffer[0].data,(float)par->param_buffer[1].data,
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f7 fcf1 	bl	8000548 <__aeabi_f2d>
 8008b66:	4604      	mov	r4, r0
 8008b68:	460d      	mov	r5, r1
				(float)par->param_buffer[5].data,(float)par->param_buffer[6].data);
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	69db      	ldr	r3, [r3, #28]
		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",(float)par->param_buffer[0].data,(float)par->param_buffer[1].data,
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f7 fcea 	bl	8000548 <__aeabi_f2d>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b7c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008b80:	ed97 7b00 	vldr	d7, [r7]
 8008b84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b88:	ed97 7b02 	vldr	d7, [r7, #8]
 8008b8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b90:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8008b94:	e9cd 8900 	strd	r8, r9, [sp]
 8008b98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b9c:	4918      	ldr	r1, [pc, #96]	; (8008c00 <APPSet+0x410>)
 8008b9e:	4814      	ldr	r0, [pc, #80]	; (8008bf0 <APPSet+0x400>)
 8008ba0:	f011 fdd4 	bl	801a74c <siprintf>
		UART_DMA_PrintString(&huart5,uartbuff);
 8008ba4:	4912      	ldr	r1, [pc, #72]	; (8008bf0 <APPSet+0x400>)
 8008ba6:	4813      	ldr	r0, [pc, #76]	; (8008bf4 <APPSet+0x404>)
 8008ba8:	f7fa fd4e 	bl	8003648 <UART_DMA_PrintString>

		if (i == NumPoint)
 8008bac:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <APPSet+0x408>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <APPSet+0x3f8>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	f041 8050 	bne.w	8009c5a <APPSet+0x146a>
			i = 0;
 8008bba:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <APPSet+0x408>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]

		break;
 8008bc0:	f001 b84b 	b.w	8009c5a <APPSet+0x146a>
 8008bc4:	20007bfc 	.word	0x20007bfc
 8008bc8:	200081b0 	.word	0x200081b0
 8008bcc:	20006864 	.word	0x20006864
 8008bd0:	20007cc8 	.word	0x20007cc8
 8008bd4:	20007ca0 	.word	0x20007ca0
 8008bd8:	20007c00 	.word	0x20007c00
 8008bdc:	20007da4 	.word	0x20007da4
 8008be0:	200065b8 	.word	0x200065b8
 8008be4:	20006ee4 	.word	0x20006ee4
 8008be8:	20007d2c 	.word	0x20007d2c
 8008bec:	0801fae8 	.word	0x0801fae8
 8008bf0:	200079f8 	.word	0x200079f8
 8008bf4:	20004fc0 	.word	0x20004fc0
 8008bf8:	2000047c 	.word	0x2000047c
 8008bfc:	20006f58 	.word	0x20006f58
 8008c00:	0801faf8 	.word	0x0801faf8

	case RNS_PPPathPID:
		PP_PIDPathSet(par->param_buffer[0].data,par->param_buffer[1].data,par->param_buffer[2].data,&pp);
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	edd3 6a03 	vldr	s13, [r3, #12]
 8008c16:	48a7      	ldr	r0, [pc, #668]	; (8008eb4 <APPSet+0x6c4>)
 8008c18:	eeb0 1a66 	vmov.f32	s2, s13
 8008c1c:	eef0 0a47 	vmov.f32	s1, s14
 8008c20:	eeb0 0a67 	vmov.f32	s0, s15
 8008c24:	f7fc f8fe 	bl	8004e24 <PP_PIDPathSet>
		break;
 8008c28:	f001 b81c 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPEndPID:
		PP_PIDEndSet(par->param_buffer[0].data,par->param_buffer[1].data,par->param_buffer[2].data,&pp);
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8008c3e:	489d      	ldr	r0, [pc, #628]	; (8008eb4 <APPSet+0x6c4>)
 8008c40:	eeb0 1a66 	vmov.f32	s2, s13
 8008c44:	eef0 0a47 	vmov.f32	s1, s14
 8008c48:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4c:	f7fc f973 	bl	8004f36 <PP_PIDEndSet>
		break;
 8008c50:	f001 b808 	b.w	8009c64 <APPSet+0x1474>

	case RNS_PPZPID:
		PP_PIDZSet(par->param_buffer[0].data,par->param_buffer[1].data,par->param_buffer[2].data,
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	edd3 6a03 	vldr	s13, [r3, #12]
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	ed93 6a04 	vldr	s12, [r3, #16]
 8008c6c:	4891      	ldr	r0, [pc, #580]	; (8008eb4 <APPSet+0x6c4>)
 8008c6e:	eef0 1a46 	vmov.f32	s3, s12
 8008c72:	eeb0 1a66 	vmov.f32	s2, s13
 8008c76:	eef0 0a47 	vmov.f32	s1, s14
 8008c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c7e:	f7fc f921 	bl	8004ec4 <PP_PIDZSet>
																					par->param_buffer[3].data,&pp);
		break;
 8008c82:	f000 bfef 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_LEFT_ABT :
		fFLeftPosGain[0] = par->param_buffer[0].data;
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4a8b      	ldr	r2, [pc, #556]	; (8008eb8 <APPSet+0x6c8>)
 8008c8c:	6013      	str	r3, [r2, #0]
		fFLeftPosGain[1] = par->param_buffer[1].data;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	4a89      	ldr	r2, [pc, #548]	; (8008eb8 <APPSet+0x6c8>)
 8008c94:	6053      	str	r3, [r2, #4]
		fFLeftPosGain[2] = par->param_buffer[2].data;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	4a87      	ldr	r2, [pc, #540]	; (8008eb8 <APPSet+0x6c8>)
 8008c9c:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fFLeftPosGain[0], fFLeftPosGain[1], fFLeftPosGain[2],
 8008c9e:	4b86      	ldr	r3, [pc, #536]	; (8008eb8 <APPSet+0x6c8>)
 8008ca0:	edd3 7a00 	vldr	s15, [r3]
 8008ca4:	4b84      	ldr	r3, [pc, #528]	; (8008eb8 <APPSet+0x6c8>)
 8008ca6:	ed93 7a01 	vldr	s14, [r3, #4]
 8008caa:	4b83      	ldr	r3, [pc, #524]	; (8008eb8 <APPSet+0x6c8>)
 8008cac:	edd3 6a02 	vldr	s13, [r3, #8]
 8008cb0:	4b82      	ldr	r3, [pc, #520]	; (8008ebc <APPSet+0x6cc>)
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4b82      	ldr	r3, [pc, #520]	; (8008ec0 <APPSet+0x6d0>)
 8008cb6:	4a83      	ldr	r2, [pc, #524]	; (8008ec4 <APPSet+0x6d4>)
 8008cb8:	4983      	ldr	r1, [pc, #524]	; (8008ec8 <APPSet+0x6d8>)
 8008cba:	4884      	ldr	r0, [pc, #528]	; (8008ecc <APPSet+0x6dc>)
 8008cbc:	eef0 1a66 	vmov.f32	s3, s13
 8008cc0:	eeb0 1a47 	vmov.f32	s2, s14
 8008cc4:	eef0 0a67 	vmov.f32	s1, s15
 8008cc8:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8008ed0 <APPSet+0x6e0>
 8008ccc:	f7f8 f98e 	bl	8000fec <ABTInit>
				&fFLeftPosData, &fFLeftPos, &fFLeftVel, &fFLeftAcc, &fleft_pos_data);
		break;
 8008cd0:	f000 bfc8 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_LEFT_ABT :
		fBLeftPosGain[0] = par->param_buffer[0].data;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	4a7e      	ldr	r2, [pc, #504]	; (8008ed4 <APPSet+0x6e4>)
 8008cda:	6013      	str	r3, [r2, #0]
		fBLeftPosGain[1] = par->param_buffer[1].data;
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	4a7c      	ldr	r2, [pc, #496]	; (8008ed4 <APPSet+0x6e4>)
 8008ce2:	6053      	str	r3, [r2, #4]
		fBLeftPosGain[2] = par->param_buffer[2].data;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4a7a      	ldr	r2, [pc, #488]	; (8008ed4 <APPSet+0x6e4>)
 8008cea:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fBLeftPosGain[0], fBLeftPosGain[1], fBLeftPosGain[2],
 8008cec:	4b79      	ldr	r3, [pc, #484]	; (8008ed4 <APPSet+0x6e4>)
 8008cee:	edd3 7a00 	vldr	s15, [r3]
 8008cf2:	4b78      	ldr	r3, [pc, #480]	; (8008ed4 <APPSet+0x6e4>)
 8008cf4:	ed93 7a01 	vldr	s14, [r3, #4]
 8008cf8:	4b76      	ldr	r3, [pc, #472]	; (8008ed4 <APPSet+0x6e4>)
 8008cfa:	edd3 6a02 	vldr	s13, [r3, #8]
 8008cfe:	4b76      	ldr	r3, [pc, #472]	; (8008ed8 <APPSet+0x6e8>)
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4b76      	ldr	r3, [pc, #472]	; (8008edc <APPSet+0x6ec>)
 8008d04:	4a76      	ldr	r2, [pc, #472]	; (8008ee0 <APPSet+0x6f0>)
 8008d06:	4977      	ldr	r1, [pc, #476]	; (8008ee4 <APPSet+0x6f4>)
 8008d08:	4877      	ldr	r0, [pc, #476]	; (8008ee8 <APPSet+0x6f8>)
 8008d0a:	eef0 1a66 	vmov.f32	s3, s13
 8008d0e:	eeb0 1a47 	vmov.f32	s2, s14
 8008d12:	eef0 0a67 	vmov.f32	s1, s15
 8008d16:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8008ed0 <APPSet+0x6e0>
 8008d1a:	f7f8 f967 	bl	8000fec <ABTInit>
				&fBLeftPosData, &fBLeftPos, &fBLeftVel, &fBLeftAcc, &bleft_pos_data);
		break;
 8008d1e:	f000 bfa1 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_RIGHT_ABT :
		fFRightPosGain[0] = par->param_buffer[0].data;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4a71      	ldr	r2, [pc, #452]	; (8008eec <APPSet+0x6fc>)
 8008d28:	6013      	str	r3, [r2, #0]
		fFRightPosGain[1] = par->param_buffer[1].data;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	4a6f      	ldr	r2, [pc, #444]	; (8008eec <APPSet+0x6fc>)
 8008d30:	6053      	str	r3, [r2, #4]
		fFRightPosGain[2] = par->param_buffer[2].data;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	4a6d      	ldr	r2, [pc, #436]	; (8008eec <APPSet+0x6fc>)
 8008d38:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fFRightPosGain[0], fFRightPosGain[1], fFRightPosGain[2],
 8008d3a:	4b6c      	ldr	r3, [pc, #432]	; (8008eec <APPSet+0x6fc>)
 8008d3c:	edd3 7a00 	vldr	s15, [r3]
 8008d40:	4b6a      	ldr	r3, [pc, #424]	; (8008eec <APPSet+0x6fc>)
 8008d42:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d46:	4b69      	ldr	r3, [pc, #420]	; (8008eec <APPSet+0x6fc>)
 8008d48:	edd3 6a02 	vldr	s13, [r3, #8]
 8008d4c:	4b68      	ldr	r3, [pc, #416]	; (8008ef0 <APPSet+0x700>)
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	4b68      	ldr	r3, [pc, #416]	; (8008ef4 <APPSet+0x704>)
 8008d52:	4a69      	ldr	r2, [pc, #420]	; (8008ef8 <APPSet+0x708>)
 8008d54:	4969      	ldr	r1, [pc, #420]	; (8008efc <APPSet+0x70c>)
 8008d56:	486a      	ldr	r0, [pc, #424]	; (8008f00 <APPSet+0x710>)
 8008d58:	eef0 1a66 	vmov.f32	s3, s13
 8008d5c:	eeb0 1a47 	vmov.f32	s2, s14
 8008d60:	eef0 0a67 	vmov.f32	s1, s15
 8008d64:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8008ed0 <APPSet+0x6e0>
 8008d68:	f7f8 f940 	bl	8000fec <ABTInit>
				&fFRightPosData, &fFRightPos, &fFRightVel, &fFRightAcc, &fright_pos_data);
		break;
 8008d6c:	f000 bf7a 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_RIGHT_ABT :
		fBRightPosGain[0] = par->param_buffer[0].data;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	4a63      	ldr	r2, [pc, #396]	; (8008f04 <APPSet+0x714>)
 8008d76:	6013      	str	r3, [r2, #0]
		fBRightPosGain[1] = par->param_buffer[1].data;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	4a61      	ldr	r2, [pc, #388]	; (8008f04 <APPSet+0x714>)
 8008d7e:	6053      	str	r3, [r2, #4]
		fBRightPosGain[2] = par->param_buffer[2].data;
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4a5f      	ldr	r2, [pc, #380]	; (8008f04 <APPSet+0x714>)
 8008d86:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fBRightPosGain[0], fBRightPosGain[1], fBRightPosGain[2],
 8008d88:	4b5e      	ldr	r3, [pc, #376]	; (8008f04 <APPSet+0x714>)
 8008d8a:	edd3 7a00 	vldr	s15, [r3]
 8008d8e:	4b5d      	ldr	r3, [pc, #372]	; (8008f04 <APPSet+0x714>)
 8008d90:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d94:	4b5b      	ldr	r3, [pc, #364]	; (8008f04 <APPSet+0x714>)
 8008d96:	edd3 6a02 	vldr	s13, [r3, #8]
 8008d9a:	4b5b      	ldr	r3, [pc, #364]	; (8008f08 <APPSet+0x718>)
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4b5b      	ldr	r3, [pc, #364]	; (8008f0c <APPSet+0x71c>)
 8008da0:	4a5b      	ldr	r2, [pc, #364]	; (8008f10 <APPSet+0x720>)
 8008da2:	495c      	ldr	r1, [pc, #368]	; (8008f14 <APPSet+0x724>)
 8008da4:	485c      	ldr	r0, [pc, #368]	; (8008f18 <APPSet+0x728>)
 8008da6:	eef0 1a66 	vmov.f32	s3, s13
 8008daa:	eeb0 1a47 	vmov.f32	s2, s14
 8008dae:	eef0 0a67 	vmov.f32	s1, s15
 8008db2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8008ed0 <APPSet+0x6e0>
 8008db6:	f7f8 f919 	bl	8000fec <ABTInit>
				&fBRightPosData, &fBRightPos, &fBRightVel, &fBRightAcc, &bright_pos_data);
		break;
 8008dba:	f000 bf53 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_LEFT_VEL_SATEU :
		fFLeftVG[0] = par->param_buffer[0].data;
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4a56      	ldr	r2, [pc, #344]	; (8008f1c <APPSet+0x72c>)
 8008dc4:	6013      	str	r3, [r2, #0]
		fFLeftVG[1] = par->param_buffer[1].data;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	4a54      	ldr	r2, [pc, #336]	; (8008f1c <APPSet+0x72c>)
 8008dcc:	6053      	str	r3, [r2, #4]
		fFLeftVG[2] = par->param_buffer[2].data;
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	4a52      	ldr	r2, [pc, #328]	; (8008f1c <APPSet+0x72c>)
 8008dd4:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fFLeftVG[0], &fleft_vel);
 8008dd6:	4b51      	ldr	r3, [pc, #324]	; (8008f1c <APPSet+0x72c>)
 8008dd8:	edd3 7a00 	vldr	s15, [r3]
 8008ddc:	4950      	ldr	r1, [pc, #320]	; (8008f20 <APPSet+0x730>)
 8008dde:	eeb0 0a67 	vmov.f32	s0, s15
 8008de2:	2001      	movs	r0, #1
 8008de4:	f7fb fd01 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fFLeftVG[1], &fleft_vel);
 8008de8:	4b4c      	ldr	r3, [pc, #304]	; (8008f1c <APPSet+0x72c>)
 8008dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8008dee:	494c      	ldr	r1, [pc, #304]	; (8008f20 <APPSet+0x730>)
 8008df0:	eeb0 0a67 	vmov.f32	s0, s15
 8008df4:	2002      	movs	r0, #2
 8008df6:	f7fb fcf8 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fFLeftVG[2], &fleft_vel);
 8008dfa:	4b48      	ldr	r3, [pc, #288]	; (8008f1c <APPSet+0x72c>)
 8008dfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e00:	4947      	ldr	r1, [pc, #284]	; (8008f20 <APPSet+0x730>)
 8008e02:	eeb0 0a67 	vmov.f32	s0, s15
 8008e06:	2003      	movs	r0, #3
 8008e08:	f7fb fcef 	bl	80047ea <PIDGainSet>
		break;
 8008e0c:	f000 bf2a 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_LEFT_VEL_PID :
		fFLeftVG[3] = par->param_buffer[0].data;
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	4a41      	ldr	r2, [pc, #260]	; (8008f1c <APPSet+0x72c>)
 8008e16:	60d3      	str	r3, [r2, #12]
		fFLeftVG[4] = par->param_buffer[1].data;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	4a3f      	ldr	r2, [pc, #252]	; (8008f1c <APPSet+0x72c>)
 8008e1e:	6113      	str	r3, [r2, #16]
		fFLeftVG[5] = par->param_buffer[2].data;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	4a3d      	ldr	r2, [pc, #244]	; (8008f1c <APPSet+0x72c>)
 8008e26:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fFLeftVG[3], &fleft_vel);
 8008e28:	4b3c      	ldr	r3, [pc, #240]	; (8008f1c <APPSet+0x72c>)
 8008e2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e2e:	493c      	ldr	r1, [pc, #240]	; (8008f20 <APPSet+0x730>)
 8008e30:	eeb0 0a67 	vmov.f32	s0, s15
 8008e34:	2004      	movs	r0, #4
 8008e36:	f7fb fcd8 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fFLeftVG[4], &fleft_vel);
 8008e3a:	4b38      	ldr	r3, [pc, #224]	; (8008f1c <APPSet+0x72c>)
 8008e3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008e40:	4937      	ldr	r1, [pc, #220]	; (8008f20 <APPSet+0x730>)
 8008e42:	eeb0 0a67 	vmov.f32	s0, s15
 8008e46:	2005      	movs	r0, #5
 8008e48:	f7fb fccf 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fFLeftVG[5], &fleft_vel);
 8008e4c:	4b33      	ldr	r3, [pc, #204]	; (8008f1c <APPSet+0x72c>)
 8008e4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008e52:	4933      	ldr	r1, [pc, #204]	; (8008f20 <APPSet+0x730>)
 8008e54:	eeb0 0a67 	vmov.f32	s0, s15
 8008e58:	2006      	movs	r0, #6
 8008e5a:	f7fb fcc6 	bl	80047ea <PIDGainSet>
		break;
 8008e5e:	f000 bf01 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_LEFT_VEL_SATEU :
		fBLeftVG[0] = par->param_buffer[0].data;
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	4a2f      	ldr	r2, [pc, #188]	; (8008f24 <APPSet+0x734>)
 8008e68:	6013      	str	r3, [r2, #0]
		fBLeftVG[1] = par->param_buffer[1].data;
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	4a2d      	ldr	r2, [pc, #180]	; (8008f24 <APPSet+0x734>)
 8008e70:	6053      	str	r3, [r2, #4]
		fBLeftVG[2] = par->param_buffer[2].data;
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	4a2b      	ldr	r2, [pc, #172]	; (8008f24 <APPSet+0x734>)
 8008e78:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fBLeftVG[0], &bleft_vel);
 8008e7a:	4b2a      	ldr	r3, [pc, #168]	; (8008f24 <APPSet+0x734>)
 8008e7c:	edd3 7a00 	vldr	s15, [r3]
 8008e80:	4929      	ldr	r1, [pc, #164]	; (8008f28 <APPSet+0x738>)
 8008e82:	eeb0 0a67 	vmov.f32	s0, s15
 8008e86:	2001      	movs	r0, #1
 8008e88:	f7fb fcaf 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fBLeftVG[1], &bleft_vel);
 8008e8c:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <APPSet+0x734>)
 8008e8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008e92:	4925      	ldr	r1, [pc, #148]	; (8008f28 <APPSet+0x738>)
 8008e94:	eeb0 0a67 	vmov.f32	s0, s15
 8008e98:	2002      	movs	r0, #2
 8008e9a:	f7fb fca6 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fBLeftVG[2], &bleft_vel);
 8008e9e:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <APPSet+0x734>)
 8008ea0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ea4:	4920      	ldr	r1, [pc, #128]	; (8008f28 <APPSet+0x738>)
 8008ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8008eaa:	2003      	movs	r0, #3
 8008eac:	f7fb fc9d 	bl	80047ea <PIDGainSet>
		break;
 8008eb0:	f000 bed8 	b.w	8009c64 <APPSet+0x1474>
 8008eb4:	20006864 	.word	0x20006864
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	20007a68 	.word	0x20007a68
 8008ec0:	200065c4 	.word	0x200065c4
 8008ec4:	2000809c 	.word	0x2000809c
 8008ec8:	200080c8 	.word	0x200080c8
 8008ecc:	2000796c 	.word	0x2000796c
 8008ed0:	3ba3d70a 	.word	0x3ba3d70a
 8008ed4:	20000018 	.word	0x20000018
 8008ed8:	20007748 	.word	0x20007748
 8008edc:	20006e20 	.word	0x20006e20
 8008ee0:	20006e1c 	.word	0x20006e1c
 8008ee4:	2000812c 	.word	0x2000812c
 8008ee8:	20006dc0 	.word	0x20006dc0
 8008eec:	2000000c 	.word	0x2000000c
 8008ef0:	20007f28 	.word	0x20007f28
 8008ef4:	2000808c 	.word	0x2000808c
 8008ef8:	20006f54 	.word	0x20006f54
 8008efc:	20006f4c 	.word	0x20006f4c
 8008f00:	20006dac 	.word	0x20006dac
 8008f04:	20000024 	.word	0x20000024
 8008f08:	20007da8 	.word	0x20007da8
 8008f0c:	20007cd0 	.word	0x20007cd0
 8008f10:	20007450 	.word	0x20007450
 8008f14:	20006db8 	.word	0x20006db8
 8008f18:	200081c0 	.word	0x200081c0
 8008f1c:	200000e8 	.word	0x200000e8
 8008f20:	20006e90 	.word	0x20006e90
 8008f24:	20000120 	.word	0x20000120
 8008f28:	200066d0 	.word	0x200066d0

	case RNS_B_LEFT_VEL_PID :
		fBLeftVG[3] = par->param_buffer[0].data;
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	4aa9      	ldr	r2, [pc, #676]	; (80091d8 <APPSet+0x9e8>)
 8008f32:	60d3      	str	r3, [r2, #12]
		fBLeftVG[4] = par->param_buffer[1].data;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	4aa7      	ldr	r2, [pc, #668]	; (80091d8 <APPSet+0x9e8>)
 8008f3a:	6113      	str	r3, [r2, #16]
		fBLeftVG[5] = par->param_buffer[2].data;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4aa5      	ldr	r2, [pc, #660]	; (80091d8 <APPSet+0x9e8>)
 8008f42:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fBLeftVG[3], &bleft_vel);
 8008f44:	4ba4      	ldr	r3, [pc, #656]	; (80091d8 <APPSet+0x9e8>)
 8008f46:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f4a:	49a4      	ldr	r1, [pc, #656]	; (80091dc <APPSet+0x9ec>)
 8008f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f50:	2004      	movs	r0, #4
 8008f52:	f7fb fc4a 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fBLeftVG[4], &bleft_vel);
 8008f56:	4ba0      	ldr	r3, [pc, #640]	; (80091d8 <APPSet+0x9e8>)
 8008f58:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f5c:	499f      	ldr	r1, [pc, #636]	; (80091dc <APPSet+0x9ec>)
 8008f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f62:	2005      	movs	r0, #5
 8008f64:	f7fb fc41 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fBLeftVG[5], &bleft_vel);
 8008f68:	4b9b      	ldr	r3, [pc, #620]	; (80091d8 <APPSet+0x9e8>)
 8008f6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008f6e:	499b      	ldr	r1, [pc, #620]	; (80091dc <APPSet+0x9ec>)
 8008f70:	eeb0 0a67 	vmov.f32	s0, s15
 8008f74:	2006      	movs	r0, #6
 8008f76:	f7fb fc38 	bl	80047ea <PIDGainSet>
		break;
 8008f7a:	f000 be73 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_RIGHT_VEL_SATEU :
		fFRightVG[0] = par->param_buffer[0].data;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	4a97      	ldr	r2, [pc, #604]	; (80091e0 <APPSet+0x9f0>)
 8008f84:	6013      	str	r3, [r2, #0]
		fFRightVG[1] = par->param_buffer[1].data;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	4a95      	ldr	r2, [pc, #596]	; (80091e0 <APPSet+0x9f0>)
 8008f8c:	6053      	str	r3, [r2, #4]
		fFRightVG[2] = par->param_buffer[2].data;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	4a93      	ldr	r2, [pc, #588]	; (80091e0 <APPSet+0x9f0>)
 8008f94:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fFRightVG[0], &fright_vel);
 8008f96:	4b92      	ldr	r3, [pc, #584]	; (80091e0 <APPSet+0x9f0>)
 8008f98:	edd3 7a00 	vldr	s15, [r3]
 8008f9c:	4991      	ldr	r1, [pc, #580]	; (80091e4 <APPSet+0x9f4>)
 8008f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f7fb fc21 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fFRightVG[1], &fright_vel);
 8008fa8:	4b8d      	ldr	r3, [pc, #564]	; (80091e0 <APPSet+0x9f0>)
 8008faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fae:	498d      	ldr	r1, [pc, #564]	; (80091e4 <APPSet+0x9f4>)
 8008fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8008fb4:	2002      	movs	r0, #2
 8008fb6:	f7fb fc18 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fFRightVG[2], &fright_vel);
 8008fba:	4b89      	ldr	r3, [pc, #548]	; (80091e0 <APPSet+0x9f0>)
 8008fbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008fc0:	4988      	ldr	r1, [pc, #544]	; (80091e4 <APPSet+0x9f4>)
 8008fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc6:	2003      	movs	r0, #3
 8008fc8:	f7fb fc0f 	bl	80047ea <PIDGainSet>
		break;
 8008fcc:	f000 be4a 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_RIGHT_VEL_PID :
		fFRightVG[3] = par->param_buffer[0].data;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	4a82      	ldr	r2, [pc, #520]	; (80091e0 <APPSet+0x9f0>)
 8008fd6:	60d3      	str	r3, [r2, #12]
		fFRightVG[4] = par->param_buffer[1].data;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4a80      	ldr	r2, [pc, #512]	; (80091e0 <APPSet+0x9f0>)
 8008fde:	6113      	str	r3, [r2, #16]
		fFRightVG[5] = par->param_buffer[2].data;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	4a7e      	ldr	r2, [pc, #504]	; (80091e0 <APPSet+0x9f0>)
 8008fe6:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fFRightVG[3], &fright_vel);
 8008fe8:	4b7d      	ldr	r3, [pc, #500]	; (80091e0 <APPSet+0x9f0>)
 8008fea:	edd3 7a03 	vldr	s15, [r3, #12]
 8008fee:	497d      	ldr	r1, [pc, #500]	; (80091e4 <APPSet+0x9f4>)
 8008ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ff4:	2004      	movs	r0, #4
 8008ff6:	f7fb fbf8 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fFRightVG[4], &fright_vel);
 8008ffa:	4b79      	ldr	r3, [pc, #484]	; (80091e0 <APPSet+0x9f0>)
 8008ffc:	edd3 7a04 	vldr	s15, [r3, #16]
 8009000:	4978      	ldr	r1, [pc, #480]	; (80091e4 <APPSet+0x9f4>)
 8009002:	eeb0 0a67 	vmov.f32	s0, s15
 8009006:	2005      	movs	r0, #5
 8009008:	f7fb fbef 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fFRightVG[5], &fright_vel);
 800900c:	4b74      	ldr	r3, [pc, #464]	; (80091e0 <APPSet+0x9f0>)
 800900e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009012:	4974      	ldr	r1, [pc, #464]	; (80091e4 <APPSet+0x9f4>)
 8009014:	eeb0 0a67 	vmov.f32	s0, s15
 8009018:	2006      	movs	r0, #6
 800901a:	f7fb fbe6 	bl	80047ea <PIDGainSet>
		break;
 800901e:	f000 be21 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_RIGHT_VEL_SATEU :
		fBRightVG[0] = par->param_buffer[0].data;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4a70      	ldr	r2, [pc, #448]	; (80091e8 <APPSet+0x9f8>)
 8009028:	6013      	str	r3, [r2, #0]
		fBRightVG[1] = par->param_buffer[1].data;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	4a6e      	ldr	r2, [pc, #440]	; (80091e8 <APPSet+0x9f8>)
 8009030:	6053      	str	r3, [r2, #4]
		fBRightVG[2] = par->param_buffer[2].data;
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	4a6c      	ldr	r2, [pc, #432]	; (80091e8 <APPSet+0x9f8>)
 8009038:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fBRightVG[0], &bright_vel);
 800903a:	4b6b      	ldr	r3, [pc, #428]	; (80091e8 <APPSet+0x9f8>)
 800903c:	edd3 7a00 	vldr	s15, [r3]
 8009040:	496a      	ldr	r1, [pc, #424]	; (80091ec <APPSet+0x9fc>)
 8009042:	eeb0 0a67 	vmov.f32	s0, s15
 8009046:	2001      	movs	r0, #1
 8009048:	f7fb fbcf 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fBRightVG[1], &bright_vel);
 800904c:	4b66      	ldr	r3, [pc, #408]	; (80091e8 <APPSet+0x9f8>)
 800904e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009052:	4966      	ldr	r1, [pc, #408]	; (80091ec <APPSet+0x9fc>)
 8009054:	eeb0 0a67 	vmov.f32	s0, s15
 8009058:	2002      	movs	r0, #2
 800905a:	f7fb fbc6 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fBRightVG[2], &bright_vel);
 800905e:	4b62      	ldr	r3, [pc, #392]	; (80091e8 <APPSet+0x9f8>)
 8009060:	edd3 7a02 	vldr	s15, [r3, #8]
 8009064:	4961      	ldr	r1, [pc, #388]	; (80091ec <APPSet+0x9fc>)
 8009066:	eeb0 0a67 	vmov.f32	s0, s15
 800906a:	2003      	movs	r0, #3
 800906c:	f7fb fbbd 	bl	80047ea <PIDGainSet>
		break;
 8009070:	f000 bdf8 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_RIGHT_VEL_PID :
		fBRightVG[3] = par->param_buffer[0].data;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4a5b      	ldr	r2, [pc, #364]	; (80091e8 <APPSet+0x9f8>)
 800907a:	60d3      	str	r3, [r2, #12]
		fBRightVG[4] = par->param_buffer[1].data;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4a59      	ldr	r2, [pc, #356]	; (80091e8 <APPSet+0x9f8>)
 8009082:	6113      	str	r3, [r2, #16]
		fBRightVG[5] = par->param_buffer[2].data;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4a57      	ldr	r2, [pc, #348]	; (80091e8 <APPSet+0x9f8>)
 800908a:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fBRightVG[3], &bright_vel);
 800908c:	4b56      	ldr	r3, [pc, #344]	; (80091e8 <APPSet+0x9f8>)
 800908e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009092:	4956      	ldr	r1, [pc, #344]	; (80091ec <APPSet+0x9fc>)
 8009094:	eeb0 0a67 	vmov.f32	s0, s15
 8009098:	2004      	movs	r0, #4
 800909a:	f7fb fba6 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fBRightVG[4], &bright_vel);
 800909e:	4b52      	ldr	r3, [pc, #328]	; (80091e8 <APPSet+0x9f8>)
 80090a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80090a4:	4951      	ldr	r1, [pc, #324]	; (80091ec <APPSet+0x9fc>)
 80090a6:	eeb0 0a67 	vmov.f32	s0, s15
 80090aa:	2005      	movs	r0, #5
 80090ac:	f7fb fb9d 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fBRightVG[5], &bright_vel);
 80090b0:	4b4d      	ldr	r3, [pc, #308]	; (80091e8 <APPSet+0x9f8>)
 80090b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80090b6:	494d      	ldr	r1, [pc, #308]	; (80091ec <APPSet+0x9fc>)
 80090b8:	eeb0 0a67 	vmov.f32	s0, s15
 80090bc:	2006      	movs	r0, #6
 80090be:	f7fb fb94 	bl	80047ea <PIDGainSet>
		break;
 80090c2:	f000 bdcf 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_LEFT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzFLeftVG[0] = par->param_buffer[0].data;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	4a49      	ldr	r2, [pc, #292]	; (80091f0 <APPSet+0xa00>)
 80090cc:	6013      	str	r3, [r2, #0]
		fFuzFLeftVG[1] = par->param_buffer[1].data;
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	4a47      	ldr	r2, [pc, #284]	; (80091f0 <APPSet+0xa00>)
 80090d4:	6053      	str	r3, [r2, #4]
		fFuzFLeftVG[2] = par->param_buffer[2].data;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	4a45      	ldr	r2, [pc, #276]	; (80091f0 <APPSet+0xa00>)
 80090dc:	6093      	str	r3, [r2, #8]
		fFuzFLeftVG[3] = par->param_buffer[3].data;
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	4a43      	ldr	r2, [pc, #268]	; (80091f0 <APPSet+0xa00>)
 80090e4:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzFLeftVG[0], &fuz_fleft_vel);
 80090e6:	4b42      	ldr	r3, [pc, #264]	; (80091f0 <APPSet+0xa00>)
 80090e8:	edd3 7a00 	vldr	s15, [r3]
 80090ec:	4941      	ldr	r1, [pc, #260]	; (80091f4 <APPSet+0xa04>)
 80090ee:	eeb0 0a67 	vmov.f32	s0, s15
 80090f2:	2000      	movs	r0, #0
 80090f4:	f7fa fc95 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzFLeftVG[1], &fuz_fleft_vel);
 80090f8:	4b3d      	ldr	r3, [pc, #244]	; (80091f0 <APPSet+0xa00>)
 80090fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80090fe:	493d      	ldr	r1, [pc, #244]	; (80091f4 <APPSet+0xa04>)
 8009100:	eeb0 0a67 	vmov.f32	s0, s15
 8009104:	2001      	movs	r0, #1
 8009106:	f7fa fc8c 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzFLeftVG[2], &fuz_fleft_vel);
 800910a:	4b39      	ldr	r3, [pc, #228]	; (80091f0 <APPSet+0xa00>)
 800910c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009110:	4938      	ldr	r1, [pc, #224]	; (80091f4 <APPSet+0xa04>)
 8009112:	eeb0 0a67 	vmov.f32	s0, s15
 8009116:	2002      	movs	r0, #2
 8009118:	f7fa fc83 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzFLeftVG[3], &fuz_fleft_vel);
 800911c:	4b34      	ldr	r3, [pc, #208]	; (80091f0 <APPSet+0xa00>)
 800911e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009122:	4934      	ldr	r1, [pc, #208]	; (80091f4 <APPSet+0xa04>)
 8009124:	eeb0 0a67 	vmov.f32	s0, s15
 8009128:	2003      	movs	r0, #3
 800912a:	f7fa fc7a 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 800912e:	f000 bd99 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_LEFT_VEL_FUZZY_PID_BASE :
		fFuzFLeftVG[4] = par->param_buffer[0].data;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	4a2e      	ldr	r2, [pc, #184]	; (80091f0 <APPSet+0xa00>)
 8009138:	6113      	str	r3, [r2, #16]
		fFuzFLeftVG[5] = par->param_buffer[1].data;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	4a2c      	ldr	r2, [pc, #176]	; (80091f0 <APPSet+0xa00>)
 8009140:	6153      	str	r3, [r2, #20]
		fFuzFLeftVG[6] = par->param_buffer[2].data;
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	4a2a      	ldr	r2, [pc, #168]	; (80091f0 <APPSet+0xa00>)
 8009148:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzFLeftVG[4], &fuz_fleft_vel);
 800914a:	4b29      	ldr	r3, [pc, #164]	; (80091f0 <APPSet+0xa00>)
 800914c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009150:	4928      	ldr	r1, [pc, #160]	; (80091f4 <APPSet+0xa04>)
 8009152:	eeb0 0a67 	vmov.f32	s0, s15
 8009156:	2007      	movs	r0, #7
 8009158:	f7fa fc63 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzFLeftVG[5], &fuz_fleft_vel);
 800915c:	4b24      	ldr	r3, [pc, #144]	; (80091f0 <APPSet+0xa00>)
 800915e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009162:	4924      	ldr	r1, [pc, #144]	; (80091f4 <APPSet+0xa04>)
 8009164:	eeb0 0a67 	vmov.f32	s0, s15
 8009168:	2008      	movs	r0, #8
 800916a:	f7fa fc5a 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzFLeftVG[6], &fuz_fleft_vel);
 800916e:	4b20      	ldr	r3, [pc, #128]	; (80091f0 <APPSet+0xa00>)
 8009170:	edd3 7a06 	vldr	s15, [r3, #24]
 8009174:	491f      	ldr	r1, [pc, #124]	; (80091f4 <APPSet+0xa04>)
 8009176:	eeb0 0a67 	vmov.f32	s0, s15
 800917a:	2009      	movs	r0, #9
 800917c:	f7fa fc51 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 8009180:	f000 bd70 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_LEFT_VEL_FUZZY_PID_PARAM :
		fFuzFLeftVG[7] = par->param_buffer[0].data;
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	4a19      	ldr	r2, [pc, #100]	; (80091f0 <APPSet+0xa00>)
 800918a:	61d3      	str	r3, [r2, #28]
		fFuzFLeftVG[8] = par->param_buffer[1].data;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <APPSet+0xa00>)
 8009192:	6213      	str	r3, [r2, #32]
		fFuzFLeftVG[9] = par->param_buffer[2].data;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	4a15      	ldr	r2, [pc, #84]	; (80091f0 <APPSet+0xa00>)
 800919a:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzFLeftVG[7], &fuz_fleft_vel);
 800919c:	4b14      	ldr	r3, [pc, #80]	; (80091f0 <APPSet+0xa00>)
 800919e:	edd3 7a07 	vldr	s15, [r3, #28]
 80091a2:	4914      	ldr	r1, [pc, #80]	; (80091f4 <APPSet+0xa04>)
 80091a4:	eeb0 0a67 	vmov.f32	s0, s15
 80091a8:	200a      	movs	r0, #10
 80091aa:	f7fa fc3a 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzFLeftVG[8], &fuz_fleft_vel);
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <APPSet+0xa00>)
 80091b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80091b4:	490f      	ldr	r1, [pc, #60]	; (80091f4 <APPSet+0xa04>)
 80091b6:	eeb0 0a67 	vmov.f32	s0, s15
 80091ba:	200b      	movs	r0, #11
 80091bc:	f7fa fc31 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzFLeftVG[9], &fuz_fleft_vel);
 80091c0:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <APPSet+0xa00>)
 80091c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80091c6:	490b      	ldr	r1, [pc, #44]	; (80091f4 <APPSet+0xa04>)
 80091c8:	eeb0 0a67 	vmov.f32	s0, s15
 80091cc:	200c      	movs	r0, #12
 80091ce:	f7fa fc28 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 80091d2:	f000 bd47 	b.w	8009c64 <APPSet+0x1474>
 80091d6:	bf00      	nop
 80091d8:	20000120 	.word	0x20000120
 80091dc:	200066d0 	.word	0x200066d0
 80091e0:	20000104 	.word	0x20000104
 80091e4:	20006dc4 	.word	0x20006dc4
 80091e8:	2000013c 	.word	0x2000013c
 80091ec:	20007f5c 	.word	0x20007f5c
 80091f0:	20000048 	.word	0x20000048
 80091f4:	20007c24 	.word	0x20007c24

	case RNS_F_RIGHT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzFRightVG[0] = par->param_buffer[0].data;
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4aa1      	ldr	r2, [pc, #644]	; (8009484 <APPSet+0xc94>)
 80091fe:	6013      	str	r3, [r2, #0]
		fFuzFRightVG[1] = par->param_buffer[1].data;
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	4a9f      	ldr	r2, [pc, #636]	; (8009484 <APPSet+0xc94>)
 8009206:	6053      	str	r3, [r2, #4]
		fFuzFRightVG[2] = par->param_buffer[2].data;
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4a9d      	ldr	r2, [pc, #628]	; (8009484 <APPSet+0xc94>)
 800920e:	6093      	str	r3, [r2, #8]
		fFuzFRightVG[3] = par->param_buffer[3].data;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	4a9b      	ldr	r2, [pc, #620]	; (8009484 <APPSet+0xc94>)
 8009216:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzFRightVG[0], &fuz_fright_vel);
 8009218:	4b9a      	ldr	r3, [pc, #616]	; (8009484 <APPSet+0xc94>)
 800921a:	edd3 7a00 	vldr	s15, [r3]
 800921e:	499a      	ldr	r1, [pc, #616]	; (8009488 <APPSet+0xc98>)
 8009220:	eeb0 0a67 	vmov.f32	s0, s15
 8009224:	2000      	movs	r0, #0
 8009226:	f7fa fbfc 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzFRightVG[1], &fuz_fright_vel);
 800922a:	4b96      	ldr	r3, [pc, #600]	; (8009484 <APPSet+0xc94>)
 800922c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009230:	4995      	ldr	r1, [pc, #596]	; (8009488 <APPSet+0xc98>)
 8009232:	eeb0 0a67 	vmov.f32	s0, s15
 8009236:	2001      	movs	r0, #1
 8009238:	f7fa fbf3 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzFRightVG[2], &fuz_fright_vel);
 800923c:	4b91      	ldr	r3, [pc, #580]	; (8009484 <APPSet+0xc94>)
 800923e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009242:	4991      	ldr	r1, [pc, #580]	; (8009488 <APPSet+0xc98>)
 8009244:	eeb0 0a67 	vmov.f32	s0, s15
 8009248:	2002      	movs	r0, #2
 800924a:	f7fa fbea 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzFRightVG[3], &fuz_fright_vel);
 800924e:	4b8d      	ldr	r3, [pc, #564]	; (8009484 <APPSet+0xc94>)
 8009250:	edd3 7a03 	vldr	s15, [r3, #12]
 8009254:	498c      	ldr	r1, [pc, #560]	; (8009488 <APPSet+0xc98>)
 8009256:	eeb0 0a67 	vmov.f32	s0, s15
 800925a:	2003      	movs	r0, #3
 800925c:	f7fa fbe1 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 8009260:	f000 bd00 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_RIGHT_VEL_FUZZY_PID_BASE :
		fFuzFRightVG[4] = par->param_buffer[0].data;
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	4a86      	ldr	r2, [pc, #536]	; (8009484 <APPSet+0xc94>)
 800926a:	6113      	str	r3, [r2, #16]
		fFuzFRightVG[5] = par->param_buffer[1].data;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	4a84      	ldr	r2, [pc, #528]	; (8009484 <APPSet+0xc94>)
 8009272:	6153      	str	r3, [r2, #20]
		fFuzFRightVG[6] = par->param_buffer[2].data;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4a82      	ldr	r2, [pc, #520]	; (8009484 <APPSet+0xc94>)
 800927a:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzFRightVG[4], &fuz_fright_vel);
 800927c:	4b81      	ldr	r3, [pc, #516]	; (8009484 <APPSet+0xc94>)
 800927e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009282:	4981      	ldr	r1, [pc, #516]	; (8009488 <APPSet+0xc98>)
 8009284:	eeb0 0a67 	vmov.f32	s0, s15
 8009288:	2007      	movs	r0, #7
 800928a:	f7fa fbca 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzFRightVG[5], &fuz_fright_vel);
 800928e:	4b7d      	ldr	r3, [pc, #500]	; (8009484 <APPSet+0xc94>)
 8009290:	edd3 7a05 	vldr	s15, [r3, #20]
 8009294:	497c      	ldr	r1, [pc, #496]	; (8009488 <APPSet+0xc98>)
 8009296:	eeb0 0a67 	vmov.f32	s0, s15
 800929a:	2008      	movs	r0, #8
 800929c:	f7fa fbc1 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzFRightVG[6], &fuz_fright_vel);
 80092a0:	4b78      	ldr	r3, [pc, #480]	; (8009484 <APPSet+0xc94>)
 80092a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80092a6:	4978      	ldr	r1, [pc, #480]	; (8009488 <APPSet+0xc98>)
 80092a8:	eeb0 0a67 	vmov.f32	s0, s15
 80092ac:	2009      	movs	r0, #9
 80092ae:	f7fa fbb8 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 80092b2:	f000 bcd7 	b.w	8009c64 <APPSet+0x1474>

	case RNS_F_RIGHT_VEL_FUZZY_PID_PARAM :
		fFuzFRightVG[7] = par->param_buffer[0].data;
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	4a72      	ldr	r2, [pc, #456]	; (8009484 <APPSet+0xc94>)
 80092bc:	61d3      	str	r3, [r2, #28]
		fFuzFRightVG[8] = par->param_buffer[1].data;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	4a70      	ldr	r2, [pc, #448]	; (8009484 <APPSet+0xc94>)
 80092c4:	6213      	str	r3, [r2, #32]
		fFuzFRightVG[9] = par->param_buffer[2].data;
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	4a6e      	ldr	r2, [pc, #440]	; (8009484 <APPSet+0xc94>)
 80092cc:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzFRightVG[7], &fuz_fright_vel);
 80092ce:	4b6d      	ldr	r3, [pc, #436]	; (8009484 <APPSet+0xc94>)
 80092d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80092d4:	496c      	ldr	r1, [pc, #432]	; (8009488 <APPSet+0xc98>)
 80092d6:	eeb0 0a67 	vmov.f32	s0, s15
 80092da:	200a      	movs	r0, #10
 80092dc:	f7fa fba1 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzFRightVG[8], &fuz_fright_vel);
 80092e0:	4b68      	ldr	r3, [pc, #416]	; (8009484 <APPSet+0xc94>)
 80092e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80092e6:	4968      	ldr	r1, [pc, #416]	; (8009488 <APPSet+0xc98>)
 80092e8:	eeb0 0a67 	vmov.f32	s0, s15
 80092ec:	200b      	movs	r0, #11
 80092ee:	f7fa fb98 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzFRightVG[9], &fuz_fright_vel);
 80092f2:	4b64      	ldr	r3, [pc, #400]	; (8009484 <APPSet+0xc94>)
 80092f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80092f8:	4963      	ldr	r1, [pc, #396]	; (8009488 <APPSet+0xc98>)
 80092fa:	eeb0 0a67 	vmov.f32	s0, s15
 80092fe:	200c      	movs	r0, #12
 8009300:	f7fa fb8f 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 8009304:	f000 bcae 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_LEFT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzBLeftVG[0] = par->param_buffer[0].data;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	4a5f      	ldr	r2, [pc, #380]	; (800948c <APPSet+0xc9c>)
 800930e:	6013      	str	r3, [r2, #0]
		fFuzBLeftVG[1] = par->param_buffer[1].data;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	4a5d      	ldr	r2, [pc, #372]	; (800948c <APPSet+0xc9c>)
 8009316:	6053      	str	r3, [r2, #4]
		fFuzBLeftVG[2] = par->param_buffer[2].data;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	4a5b      	ldr	r2, [pc, #364]	; (800948c <APPSet+0xc9c>)
 800931e:	6093      	str	r3, [r2, #8]
		fFuzBLeftVG[3] = par->param_buffer[3].data;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	4a59      	ldr	r2, [pc, #356]	; (800948c <APPSet+0xc9c>)
 8009326:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzBLeftVG[0], &fuz_bleft_vel);
 8009328:	4b58      	ldr	r3, [pc, #352]	; (800948c <APPSet+0xc9c>)
 800932a:	edd3 7a00 	vldr	s15, [r3]
 800932e:	4958      	ldr	r1, [pc, #352]	; (8009490 <APPSet+0xca0>)
 8009330:	eeb0 0a67 	vmov.f32	s0, s15
 8009334:	2000      	movs	r0, #0
 8009336:	f7fa fb74 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzBLeftVG[1], &fuz_bleft_vel);
 800933a:	4b54      	ldr	r3, [pc, #336]	; (800948c <APPSet+0xc9c>)
 800933c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009340:	4953      	ldr	r1, [pc, #332]	; (8009490 <APPSet+0xca0>)
 8009342:	eeb0 0a67 	vmov.f32	s0, s15
 8009346:	2001      	movs	r0, #1
 8009348:	f7fa fb6b 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzBLeftVG[2], &fuz_bleft_vel);
 800934c:	4b4f      	ldr	r3, [pc, #316]	; (800948c <APPSet+0xc9c>)
 800934e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009352:	494f      	ldr	r1, [pc, #316]	; (8009490 <APPSet+0xca0>)
 8009354:	eeb0 0a67 	vmov.f32	s0, s15
 8009358:	2002      	movs	r0, #2
 800935a:	f7fa fb62 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzBLeftVG[3], &fuz_bleft_vel);
 800935e:	4b4b      	ldr	r3, [pc, #300]	; (800948c <APPSet+0xc9c>)
 8009360:	edd3 7a03 	vldr	s15, [r3, #12]
 8009364:	494a      	ldr	r1, [pc, #296]	; (8009490 <APPSet+0xca0>)
 8009366:	eeb0 0a67 	vmov.f32	s0, s15
 800936a:	2003      	movs	r0, #3
 800936c:	f7fa fb59 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 8009370:	f000 bc78 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_LEFT_VEL_FUZZY_PID_BASE :
		fFuzBLeftVG[4] = par->param_buffer[0].data;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4a44      	ldr	r2, [pc, #272]	; (800948c <APPSet+0xc9c>)
 800937a:	6113      	str	r3, [r2, #16]
		fFuzBLeftVG[5] = par->param_buffer[1].data;
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	4a42      	ldr	r2, [pc, #264]	; (800948c <APPSet+0xc9c>)
 8009382:	6153      	str	r3, [r2, #20]
		fFuzBLeftVG[6] = par->param_buffer[2].data;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	4a40      	ldr	r2, [pc, #256]	; (800948c <APPSet+0xc9c>)
 800938a:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzBLeftVG[4], &fuz_bleft_vel);
 800938c:	4b3f      	ldr	r3, [pc, #252]	; (800948c <APPSet+0xc9c>)
 800938e:	edd3 7a04 	vldr	s15, [r3, #16]
 8009392:	493f      	ldr	r1, [pc, #252]	; (8009490 <APPSet+0xca0>)
 8009394:	eeb0 0a67 	vmov.f32	s0, s15
 8009398:	2007      	movs	r0, #7
 800939a:	f7fa fb42 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzBLeftVG[5], &fuz_bleft_vel);
 800939e:	4b3b      	ldr	r3, [pc, #236]	; (800948c <APPSet+0xc9c>)
 80093a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80093a4:	493a      	ldr	r1, [pc, #232]	; (8009490 <APPSet+0xca0>)
 80093a6:	eeb0 0a67 	vmov.f32	s0, s15
 80093aa:	2008      	movs	r0, #8
 80093ac:	f7fa fb39 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzBLeftVG[6], &fuz_bleft_vel);
 80093b0:	4b36      	ldr	r3, [pc, #216]	; (800948c <APPSet+0xc9c>)
 80093b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80093b6:	4936      	ldr	r1, [pc, #216]	; (8009490 <APPSet+0xca0>)
 80093b8:	eeb0 0a67 	vmov.f32	s0, s15
 80093bc:	2009      	movs	r0, #9
 80093be:	f7fa fb30 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 80093c2:	f000 bc4f 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_LEFT_VEL_FUZZY_PID_PARAM :
		fFuzBLeftVG[7] = par->param_buffer[0].data;
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4a30      	ldr	r2, [pc, #192]	; (800948c <APPSet+0xc9c>)
 80093cc:	61d3      	str	r3, [r2, #28]
		fFuzBLeftVG[8] = par->param_buffer[1].data;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	4a2e      	ldr	r2, [pc, #184]	; (800948c <APPSet+0xc9c>)
 80093d4:	6213      	str	r3, [r2, #32]
		fFuzBLeftVG[9] = par->param_buffer[2].data;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	4a2c      	ldr	r2, [pc, #176]	; (800948c <APPSet+0xc9c>)
 80093dc:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzBLeftVG[7], &fuz_bleft_vel);
 80093de:	4b2b      	ldr	r3, [pc, #172]	; (800948c <APPSet+0xc9c>)
 80093e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80093e4:	492a      	ldr	r1, [pc, #168]	; (8009490 <APPSet+0xca0>)
 80093e6:	eeb0 0a67 	vmov.f32	s0, s15
 80093ea:	200a      	movs	r0, #10
 80093ec:	f7fa fb19 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzBLeftVG[8], &fuz_bleft_vel);
 80093f0:	4b26      	ldr	r3, [pc, #152]	; (800948c <APPSet+0xc9c>)
 80093f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80093f6:	4926      	ldr	r1, [pc, #152]	; (8009490 <APPSet+0xca0>)
 80093f8:	eeb0 0a67 	vmov.f32	s0, s15
 80093fc:	200b      	movs	r0, #11
 80093fe:	f7fa fb10 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzBLeftVG[9], &fuz_bleft_vel);
 8009402:	4b22      	ldr	r3, [pc, #136]	; (800948c <APPSet+0xc9c>)
 8009404:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009408:	4921      	ldr	r1, [pc, #132]	; (8009490 <APPSet+0xca0>)
 800940a:	eeb0 0a67 	vmov.f32	s0, s15
 800940e:	200c      	movs	r0, #12
 8009410:	f7fa fb07 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 8009414:	f000 bc26 	b.w	8009c64 <APPSet+0x1474>

	case RNS_B_RIGHT_VEL_FUZZY_PID_UEECES_MAX :
		fFuzBRightVG[0] = par->param_buffer[0].data;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	4a1d      	ldr	r2, [pc, #116]	; (8009494 <APPSet+0xca4>)
 800941e:	6013      	str	r3, [r2, #0]
		fFuzBRightVG[1] = par->param_buffer[1].data;
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	4a1b      	ldr	r2, [pc, #108]	; (8009494 <APPSet+0xca4>)
 8009426:	6053      	str	r3, [r2, #4]
		fFuzBRightVG[2] = par->param_buffer[2].data;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	4a19      	ldr	r2, [pc, #100]	; (8009494 <APPSet+0xca4>)
 800942e:	6093      	str	r3, [r2, #8]
		fFuzBRightVG[3] = par->param_buffer[3].data;
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	4a17      	ldr	r2, [pc, #92]	; (8009494 <APPSet+0xca4>)
 8009436:	60d3      	str	r3, [r2, #12]
		FuzzyPIDGainSet(U_MAX, fFuzBRightVG[0], &fuz_bright_vel);
 8009438:	4b16      	ldr	r3, [pc, #88]	; (8009494 <APPSet+0xca4>)
 800943a:	edd3 7a00 	vldr	s15, [r3]
 800943e:	4916      	ldr	r1, [pc, #88]	; (8009498 <APPSet+0xca8>)
 8009440:	eeb0 0a67 	vmov.f32	s0, s15
 8009444:	2000      	movs	r0, #0
 8009446:	f7fa faec 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(E_MAX, fFuzBRightVG[1], &fuz_bright_vel);
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <APPSet+0xca4>)
 800944c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009450:	4911      	ldr	r1, [pc, #68]	; (8009498 <APPSet+0xca8>)
 8009452:	eeb0 0a67 	vmov.f32	s0, s15
 8009456:	2001      	movs	r0, #1
 8009458:	f7fa fae3 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(EC_MAX, fFuzBRightVG[2], &fuz_bright_vel);
 800945c:	4b0d      	ldr	r3, [pc, #52]	; (8009494 <APPSet+0xca4>)
 800945e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009462:	490d      	ldr	r1, [pc, #52]	; (8009498 <APPSet+0xca8>)
 8009464:	eeb0 0a67 	vmov.f32	s0, s15
 8009468:	2002      	movs	r0, #2
 800946a:	f7fa fada 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(ES_MAX, fFuzBRightVG[3], &fuz_bright_vel);
 800946e:	4b09      	ldr	r3, [pc, #36]	; (8009494 <APPSet+0xca4>)
 8009470:	edd3 7a03 	vldr	s15, [r3, #12]
 8009474:	4908      	ldr	r1, [pc, #32]	; (8009498 <APPSet+0xca8>)
 8009476:	eeb0 0a67 	vmov.f32	s0, s15
 800947a:	2003      	movs	r0, #3
 800947c:	f7fa fad1 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 8009480:	e3f0      	b.n	8009c64 <APPSet+0x1474>
 8009482:	bf00      	nop
 8009484:	20000070 	.word	0x20000070
 8009488:	20007ae4 	.word	0x20007ae4
 800948c:	20000098 	.word	0x20000098
 8009490:	20007de0 	.word	0x20007de0
 8009494:	200000c0 	.word	0x200000c0
 8009498:	20008010 	.word	0x20008010

	case RNS_B_RIGHT_VEL_FUZZY_PID_BASE :
		fFuzBRightVG[4] = par->param_buffer[0].data;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4aa3      	ldr	r2, [pc, #652]	; (8009730 <APPSet+0xf40>)
 80094a2:	6113      	str	r3, [r2, #16]
		fFuzBRightVG[5] = par->param_buffer[1].data;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	4aa1      	ldr	r2, [pc, #644]	; (8009730 <APPSet+0xf40>)
 80094aa:	6153      	str	r3, [r2, #20]
		fFuzBRightVG[6] = par->param_buffer[2].data;
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	4a9f      	ldr	r2, [pc, #636]	; (8009730 <APPSet+0xf40>)
 80094b2:	6193      	str	r3, [r2, #24]
		FuzzyPIDGainSet(KP_B, fFuzBRightVG[4], &fuz_bright_vel);
 80094b4:	4b9e      	ldr	r3, [pc, #632]	; (8009730 <APPSet+0xf40>)
 80094b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80094ba:	499e      	ldr	r1, [pc, #632]	; (8009734 <APPSet+0xf44>)
 80094bc:	eeb0 0a67 	vmov.f32	s0, s15
 80094c0:	2007      	movs	r0, #7
 80094c2:	f7fa faae 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_B, fFuzBRightVG[5], &fuz_bright_vel);
 80094c6:	4b9a      	ldr	r3, [pc, #616]	; (8009730 <APPSet+0xf40>)
 80094c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80094cc:	4999      	ldr	r1, [pc, #612]	; (8009734 <APPSet+0xf44>)
 80094ce:	eeb0 0a67 	vmov.f32	s0, s15
 80094d2:	2008      	movs	r0, #8
 80094d4:	f7fa faa5 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_B, fFuzBRightVG[6], &fuz_bright_vel);
 80094d8:	4b95      	ldr	r3, [pc, #596]	; (8009730 <APPSet+0xf40>)
 80094da:	edd3 7a06 	vldr	s15, [r3, #24]
 80094de:	4995      	ldr	r1, [pc, #596]	; (8009734 <APPSet+0xf44>)
 80094e0:	eeb0 0a67 	vmov.f32	s0, s15
 80094e4:	2009      	movs	r0, #9
 80094e6:	f7fa fa9c 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 80094ea:	e3bb      	b.n	8009c64 <APPSet+0x1474>

	case RNS_B_RIGHT_VEL_FUZZY_PID_PARAM :
		fFuzBRightVG[7] = par->param_buffer[0].data;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	4a8f      	ldr	r2, [pc, #572]	; (8009730 <APPSet+0xf40>)
 80094f2:	61d3      	str	r3, [r2, #28]
		fFuzBRightVG[8] = par->param_buffer[1].data;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	4a8d      	ldr	r2, [pc, #564]	; (8009730 <APPSet+0xf40>)
 80094fa:	6213      	str	r3, [r2, #32]
		fFuzBRightVG[9] = par->param_buffer[2].data;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	4a8b      	ldr	r2, [pc, #556]	; (8009730 <APPSet+0xf40>)
 8009502:	6253      	str	r3, [r2, #36]	; 0x24
		FuzzyPIDGainSet(KP_P, fFuzBRightVG[7], &fuz_bright_vel);
 8009504:	4b8a      	ldr	r3, [pc, #552]	; (8009730 <APPSet+0xf40>)
 8009506:	edd3 7a07 	vldr	s15, [r3, #28]
 800950a:	498a      	ldr	r1, [pc, #552]	; (8009734 <APPSet+0xf44>)
 800950c:	eeb0 0a67 	vmov.f32	s0, s15
 8009510:	200a      	movs	r0, #10
 8009512:	f7fa fa86 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KI_P, fFuzBRightVG[8], &fuz_bright_vel);
 8009516:	4b86      	ldr	r3, [pc, #536]	; (8009730 <APPSet+0xf40>)
 8009518:	edd3 7a08 	vldr	s15, [r3, #32]
 800951c:	4985      	ldr	r1, [pc, #532]	; (8009734 <APPSet+0xf44>)
 800951e:	eeb0 0a67 	vmov.f32	s0, s15
 8009522:	200b      	movs	r0, #11
 8009524:	f7fa fa7d 	bl	8003a22 <FuzzyPIDGainSet>
		FuzzyPIDGainSet(KD_P, fFuzBRightVG[9], &fuz_bright_vel);
 8009528:	4b81      	ldr	r3, [pc, #516]	; (8009730 <APPSet+0xf40>)
 800952a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800952e:	4981      	ldr	r1, [pc, #516]	; (8009734 <APPSet+0xf44>)
 8009530:	eeb0 0a67 	vmov.f32	s0, s15
 8009534:	200c      	movs	r0, #12
 8009536:	f7fa fa74 	bl	8003a22 <FuzzyPIDGainSet>
		break;
 800953a:	e393      	b.n	8009c64 <APPSet+0x1474>

	case RNS_F_KCD_PTD :
		fFKcd = par->param_buffer[0].data;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	4a7d      	ldr	r2, [pc, #500]	; (8009738 <APPSet+0xf48>)
 8009542:	6013      	str	r3, [r2, #0]
		fFPtd = par->param_buffer[1].data;
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	4a7c      	ldr	r2, [pc, #496]	; (800973c <APPSet+0xf4c>)
 800954a:	6013      	str	r3, [r2, #0]

		break;
 800954c:	e38a      	b.n	8009c64 <APPSet+0x1474>

	case RNS_B_KCD_PTD :
		fBKcd = par->param_buffer[0].data;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	4a7b      	ldr	r2, [pc, #492]	; (8009740 <APPSet+0xf50>)
 8009554:	6013      	str	r3, [r2, #0]
		fBPtd = par->param_buffer[1].data;
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	4a7a      	ldr	r2, [pc, #488]	; (8009744 <APPSet+0xf54>)
 800955c:	6013      	str	r3, [r2, #0]
		break;
 800955e:	e381      	b.n	8009c64 <APPSet+0x1474>

	case RNS_X_Y_ENC_CONFIG :
		xPtd = par->param_buffer[0].data;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4a78      	ldr	r2, [pc, #480]	; (8009748 <APPSet+0xf58>)
 8009566:	6013      	str	r3, [r2, #0]
		yPtd = par->param_buffer[2].data;
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	4a77      	ldr	r2, [pc, #476]	; (800974c <APPSet+0xf5c>)
 800956e:	6013      	str	r3, [r2, #0]

		if(par->param_buffer[1].data == 1.0)
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	edd3 7a02 	vldr	s15, [r3, #8]
 8009576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800957a:	eef4 7a47 	vcmp.f32	s15, s14
 800957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009582:	d104      	bne.n	800958e <APPSet+0xd9e>
			QEISwap(QEI2,QEI_No_Swap);
 8009584:	2100      	movs	r1, #0
 8009586:	2002      	movs	r0, #2
 8009588:	f7f8 fd3e 	bl	8002008 <QEISwap>
 800958c:	e00d      	b.n	80095aa <APPSet+0xdba>
		else if(par->param_buffer[1].data == 2.0)
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	edd3 7a02 	vldr	s15, [r3, #8]
 8009594:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009598:	eef4 7a47 	vcmp.f32	s15, s14
 800959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a0:	d103      	bne.n	80095aa <APPSet+0xdba>
			QEISwap(QEI2,QEI_Swap);
 80095a2:	2101      	movs	r1, #1
 80095a4:	2002      	movs	r0, #2
 80095a6:	f7f8 fd2f 	bl	8002008 <QEISwap>

		if(par->param_buffer[3].data == 1.0)
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80095b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095b4:	eef4 7a47 	vcmp.f32	s15, s14
 80095b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095bc:	d104      	bne.n	80095c8 <APPSet+0xdd8>
			QEISwap(QEI5,QEI_No_Swap);
 80095be:	2100      	movs	r1, #0
 80095c0:	2005      	movs	r0, #5
 80095c2:	f7f8 fd21 	bl	8002008 <QEISwap>
		else if(par->param_buffer[3].data == 2.0)
			QEISwap(QEI5,QEI_Swap);

		break;
 80095c6:	e34a      	b.n	8009c5e <APPSet+0x146e>
		else if(par->param_buffer[3].data == 2.0)
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80095ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80095d2:	eef4 7a47 	vcmp.f32	s15, s14
 80095d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095da:	f040 8340 	bne.w	8009c5e <APPSet+0x146e>
			QEISwap(QEI5,QEI_Swap);
 80095de:	2101      	movs	r1, #1
 80095e0:	2005      	movs	r0, #5
 80095e2:	f7f8 fd11 	bl	8002008 <QEISwap>
		break;
 80095e6:	e33a      	b.n	8009c5e <APPSet+0x146e>

	case RNS_RESET_POS:
		APPResetPos();
 80095e8:	f7ff f882 	bl	80086f0 <APPResetPos>
		break;
 80095ec:	e33a      	b.n	8009c64 <APPSet+0x1474>

	case RNS_LF_DIST_SATEU:
		fLFDistG[0] = par->param_buffer[0].data;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	4a57      	ldr	r2, [pc, #348]	; (8009750 <APPSet+0xf60>)
 80095f4:	6013      	str	r3, [r2, #0]
		fLFDistG[1] = par->param_buffer[1].data;
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	4a55      	ldr	r2, [pc, #340]	; (8009750 <APPSet+0xf60>)
 80095fc:	6053      	str	r3, [r2, #4]
		fLFDistG[2] = par->param_buffer[2].data;
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	4a53      	ldr	r2, [pc, #332]	; (8009750 <APPSet+0xf60>)
 8009604:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fLFDistG[0], &lf_dist);
 8009606:	4b52      	ldr	r3, [pc, #328]	; (8009750 <APPSet+0xf60>)
 8009608:	edd3 7a00 	vldr	s15, [r3]
 800960c:	4951      	ldr	r1, [pc, #324]	; (8009754 <APPSet+0xf64>)
 800960e:	eeb0 0a67 	vmov.f32	s0, s15
 8009612:	2001      	movs	r0, #1
 8009614:	f7fb f8e9 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fLFDistG[1], &lf_dist);
 8009618:	4b4d      	ldr	r3, [pc, #308]	; (8009750 <APPSet+0xf60>)
 800961a:	edd3 7a01 	vldr	s15, [r3, #4]
 800961e:	494d      	ldr	r1, [pc, #308]	; (8009754 <APPSet+0xf64>)
 8009620:	eeb0 0a67 	vmov.f32	s0, s15
 8009624:	2002      	movs	r0, #2
 8009626:	f7fb f8e0 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fLFDistG[2], &lf_dist);
 800962a:	4b49      	ldr	r3, [pc, #292]	; (8009750 <APPSet+0xf60>)
 800962c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009630:	4948      	ldr	r1, [pc, #288]	; (8009754 <APPSet+0xf64>)
 8009632:	eeb0 0a67 	vmov.f32	s0, s15
 8009636:	2003      	movs	r0, #3
 8009638:	f7fb f8d7 	bl	80047ea <PIDGainSet>
		break;
 800963c:	e312      	b.n	8009c64 <APPSet+0x1474>

	case RNS_LF_DIST_PID:
		fLFDistG[3] = par->param_buffer[0].data;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	4a43      	ldr	r2, [pc, #268]	; (8009750 <APPSet+0xf60>)
 8009644:	60d3      	str	r3, [r2, #12]
		fLFDistG[4] = par->param_buffer[1].data;
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	4a41      	ldr	r2, [pc, #260]	; (8009750 <APPSet+0xf60>)
 800964c:	6113      	str	r3, [r2, #16]
		fLFDistG[5] = par->param_buffer[2].data;
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	4a3f      	ldr	r2, [pc, #252]	; (8009750 <APPSet+0xf60>)
 8009654:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fLFDistG[3], &lf_dist);
 8009656:	4b3e      	ldr	r3, [pc, #248]	; (8009750 <APPSet+0xf60>)
 8009658:	edd3 7a03 	vldr	s15, [r3, #12]
 800965c:	493d      	ldr	r1, [pc, #244]	; (8009754 <APPSet+0xf64>)
 800965e:	eeb0 0a67 	vmov.f32	s0, s15
 8009662:	2004      	movs	r0, #4
 8009664:	f7fb f8c1 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fLFDistG[4], &lf_dist);
 8009668:	4b39      	ldr	r3, [pc, #228]	; (8009750 <APPSet+0xf60>)
 800966a:	edd3 7a04 	vldr	s15, [r3, #16]
 800966e:	4939      	ldr	r1, [pc, #228]	; (8009754 <APPSet+0xf64>)
 8009670:	eeb0 0a67 	vmov.f32	s0, s15
 8009674:	2005      	movs	r0, #5
 8009676:	f7fb f8b8 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fLFDistG[5], &lf_dist);
 800967a:	4b35      	ldr	r3, [pc, #212]	; (8009750 <APPSet+0xf60>)
 800967c:	edd3 7a05 	vldr	s15, [r3, #20]
 8009680:	4934      	ldr	r1, [pc, #208]	; (8009754 <APPSet+0xf64>)
 8009682:	eeb0 0a67 	vmov.f32	s0, s15
 8009686:	2006      	movs	r0, #6
 8009688:	f7fb f8af 	bl	80047ea <PIDGainSet>
		break;
 800968c:	e2ea      	b.n	8009c64 <APPSet+0x1474>

	case RNS_ROTATE_SATEU:
		fAngleG[0] = par->param_buffer[0].data;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	4a31      	ldr	r2, [pc, #196]	; (8009758 <APPSet+0xf68>)
 8009694:	6013      	str	r3, [r2, #0]
		fAngleG[1] = par->param_buffer[1].data;
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	4a2f      	ldr	r2, [pc, #188]	; (8009758 <APPSet+0xf68>)
 800969c:	6053      	str	r3, [r2, #4]
		fAngleG[2] = par->param_buffer[2].data;
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	4a2d      	ldr	r2, [pc, #180]	; (8009758 <APPSet+0xf68>)
 80096a4:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fAngleG[0], &imu_rotate);
 80096a6:	4b2c      	ldr	r3, [pc, #176]	; (8009758 <APPSet+0xf68>)
 80096a8:	edd3 7a00 	vldr	s15, [r3]
 80096ac:	492b      	ldr	r1, [pc, #172]	; (800975c <APPSet+0xf6c>)
 80096ae:	eeb0 0a67 	vmov.f32	s0, s15
 80096b2:	2001      	movs	r0, #1
 80096b4:	f7fb f899 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fAngleG[1], &imu_rotate);
 80096b8:	4b27      	ldr	r3, [pc, #156]	; (8009758 <APPSet+0xf68>)
 80096ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80096be:	4927      	ldr	r1, [pc, #156]	; (800975c <APPSet+0xf6c>)
 80096c0:	eeb0 0a67 	vmov.f32	s0, s15
 80096c4:	2002      	movs	r0, #2
 80096c6:	f7fb f890 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fAngleG[2], &imu_rotate);
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <APPSet+0xf68>)
 80096cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80096d0:	4922      	ldr	r1, [pc, #136]	; (800975c <APPSet+0xf6c>)
 80096d2:	eeb0 0a67 	vmov.f32	s0, s15
 80096d6:	2003      	movs	r0, #3
 80096d8:	f7fb f887 	bl	80047ea <PIDGainSet>
		break;
 80096dc:	e2c2      	b.n	8009c64 <APPSet+0x1474>

	case RNS_ROTATE_PID:
		fAngleG[3] = par->param_buffer[0].data;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	4a1d      	ldr	r2, [pc, #116]	; (8009758 <APPSet+0xf68>)
 80096e4:	60d3      	str	r3, [r2, #12]
		fAngleG[4] = par->param_buffer[1].data;
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <APPSet+0xf68>)
 80096ec:	6113      	str	r3, [r2, #16]
		fAngleG[5] = par->param_buffer[2].data;
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	4a19      	ldr	r2, [pc, #100]	; (8009758 <APPSet+0xf68>)
 80096f4:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fAngleG[3], &imu_rotate);
 80096f6:	4b18      	ldr	r3, [pc, #96]	; (8009758 <APPSet+0xf68>)
 80096f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80096fc:	4917      	ldr	r1, [pc, #92]	; (800975c <APPSet+0xf6c>)
 80096fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009702:	2004      	movs	r0, #4
 8009704:	f7fb f871 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fAngleG[4], &imu_rotate);
 8009708:	4b13      	ldr	r3, [pc, #76]	; (8009758 <APPSet+0xf68>)
 800970a:	edd3 7a04 	vldr	s15, [r3, #16]
 800970e:	4913      	ldr	r1, [pc, #76]	; (800975c <APPSet+0xf6c>)
 8009710:	eeb0 0a67 	vmov.f32	s0, s15
 8009714:	2005      	movs	r0, #5
 8009716:	f7fb f868 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fAngleG[5], &imu_rotate);
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <APPSet+0xf68>)
 800971c:	edd3 7a05 	vldr	s15, [r3, #20]
 8009720:	490e      	ldr	r1, [pc, #56]	; (800975c <APPSet+0xf6c>)
 8009722:	eeb0 0a67 	vmov.f32	s0, s15
 8009726:	2006      	movs	r0, #6
 8009728:	f7fb f85f 	bl	80047ea <PIDGainSet>
		break;
 800972c:	e29a      	b.n	8009c64 <APPSet+0x1474>
 800972e:	bf00      	nop
 8009730:	200000c0 	.word	0x200000c0
 8009734:	20008010 	.word	0x20008010
 8009738:	20007b98 	.word	0x20007b98
 800973c:	20006ee8 	.word	0x20006ee8
 8009740:	20008128 	.word	0x20008128
 8009744:	20006738 	.word	0x20006738
 8009748:	200065b8 	.word	0x200065b8
 800974c:	20006ee4 	.word	0x20006ee4
 8009750:	20000158 	.word	0x20000158
 8009754:	20007fbc 	.word	0x20007fbc
 8009758:	200001ac 	.word	0x200001ac
 800975c:	200065c8 	.word	0x200065c8

	case RNS_LF_ROTATE_SATEU:
		fRotateG[0] = par->param_buffer[0].data;
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	4aa8      	ldr	r2, [pc, #672]	; (8009a08 <APPSet+0x1218>)
 8009766:	6013      	str	r3, [r2, #0]
		fRotateG[1] = par->param_buffer[1].data;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	4aa6      	ldr	r2, [pc, #664]	; (8009a08 <APPSet+0x1218>)
 800976e:	6053      	str	r3, [r2, #4]
		fRotateG[2] = par->param_buffer[2].data;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	4aa4      	ldr	r2, [pc, #656]	; (8009a08 <APPSet+0x1218>)
 8009776:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fRotateG[0], &lf_rotate);
 8009778:	4ba3      	ldr	r3, [pc, #652]	; (8009a08 <APPSet+0x1218>)
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	49a3      	ldr	r1, [pc, #652]	; (8009a0c <APPSet+0x121c>)
 8009780:	eeb0 0a67 	vmov.f32	s0, s15
 8009784:	2001      	movs	r0, #1
 8009786:	f7fb f830 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fRotateG[1], &lf_rotate);
 800978a:	4b9f      	ldr	r3, [pc, #636]	; (8009a08 <APPSet+0x1218>)
 800978c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009790:	499e      	ldr	r1, [pc, #632]	; (8009a0c <APPSet+0x121c>)
 8009792:	eeb0 0a67 	vmov.f32	s0, s15
 8009796:	2002      	movs	r0, #2
 8009798:	f7fb f827 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fRotateG[2], &lf_rotate);
 800979c:	4b9a      	ldr	r3, [pc, #616]	; (8009a08 <APPSet+0x1218>)
 800979e:	edd3 7a02 	vldr	s15, [r3, #8]
 80097a2:	499a      	ldr	r1, [pc, #616]	; (8009a0c <APPSet+0x121c>)
 80097a4:	eeb0 0a67 	vmov.f32	s0, s15
 80097a8:	2003      	movs	r0, #3
 80097aa:	f7fb f81e 	bl	80047ea <PIDGainSet>
		break;
 80097ae:	e259      	b.n	8009c64 <APPSet+0x1474>

	case RNS_LF_ROTATE_PID:
		fRotateG[3] = par->param_buffer[0].data;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	4a94      	ldr	r2, [pc, #592]	; (8009a08 <APPSet+0x1218>)
 80097b6:	60d3      	str	r3, [r2, #12]
		fRotateG[4] = par->param_buffer[1].data;
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	4a92      	ldr	r2, [pc, #584]	; (8009a08 <APPSet+0x1218>)
 80097be:	6113      	str	r3, [r2, #16]
		fRotateG[5] = par->param_buffer[2].data;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	4a90      	ldr	r2, [pc, #576]	; (8009a08 <APPSet+0x1218>)
 80097c6:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fRotateG[3], &lf_rotate);
 80097c8:	4b8f      	ldr	r3, [pc, #572]	; (8009a08 <APPSet+0x1218>)
 80097ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80097ce:	498f      	ldr	r1, [pc, #572]	; (8009a0c <APPSet+0x121c>)
 80097d0:	eeb0 0a67 	vmov.f32	s0, s15
 80097d4:	2004      	movs	r0, #4
 80097d6:	f7fb f808 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fRotateG[4], &lf_rotate);
 80097da:	4b8b      	ldr	r3, [pc, #556]	; (8009a08 <APPSet+0x1218>)
 80097dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80097e0:	498a      	ldr	r1, [pc, #552]	; (8009a0c <APPSet+0x121c>)
 80097e2:	eeb0 0a67 	vmov.f32	s0, s15
 80097e6:	2005      	movs	r0, #5
 80097e8:	f7fa ffff 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fRotateG[5], &lf_rotate);
 80097ec:	4b86      	ldr	r3, [pc, #536]	; (8009a08 <APPSet+0x1218>)
 80097ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80097f2:	4986      	ldr	r1, [pc, #536]	; (8009a0c <APPSet+0x121c>)
 80097f4:	eeb0 0a67 	vmov.f32	s0, s15
 80097f8:	2006      	movs	r0, #6
 80097fa:	f7fa fff6 	bl	80047ea <PIDGainSet>
		break;
 80097fe:	e231      	b.n	8009c64 <APPSet+0x1474>

	case RNS_LF_FWD_SATEU:
		fFwdG[0] = par->param_buffer[0].data;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	4a82      	ldr	r2, [pc, #520]	; (8009a10 <APPSet+0x1220>)
 8009806:	6013      	str	r3, [r2, #0]
		fFwdG[1] = par->param_buffer[1].data;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	4a80      	ldr	r2, [pc, #512]	; (8009a10 <APPSet+0x1220>)
 800980e:	6053      	str	r3, [r2, #4]
		fFwdG[2] = par->param_buffer[2].data;
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	4a7e      	ldr	r2, [pc, #504]	; (8009a10 <APPSet+0x1220>)
 8009816:	6093      	str	r3, [r2, #8]
		PIDGainSet(SAT, fFwdG[0], &lf_fwd);
 8009818:	4b7d      	ldr	r3, [pc, #500]	; (8009a10 <APPSet+0x1220>)
 800981a:	edd3 7a00 	vldr	s15, [r3]
 800981e:	497d      	ldr	r1, [pc, #500]	; (8009a14 <APPSet+0x1224>)
 8009820:	eeb0 0a67 	vmov.f32	s0, s15
 8009824:	2001      	movs	r0, #1
 8009826:	f7fa ffe0 	bl	80047ea <PIDGainSet>
		PIDGainSet(KE, fFwdG[1], &lf_fwd);
 800982a:	4b79      	ldr	r3, [pc, #484]	; (8009a10 <APPSet+0x1220>)
 800982c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009830:	4978      	ldr	r1, [pc, #480]	; (8009a14 <APPSet+0x1224>)
 8009832:	eeb0 0a67 	vmov.f32	s0, s15
 8009836:	2002      	movs	r0, #2
 8009838:	f7fa ffd7 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU, fFwdG[2], &lf_fwd);
 800983c:	4b74      	ldr	r3, [pc, #464]	; (8009a10 <APPSet+0x1220>)
 800983e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009842:	4974      	ldr	r1, [pc, #464]	; (8009a14 <APPSet+0x1224>)
 8009844:	eeb0 0a67 	vmov.f32	s0, s15
 8009848:	2003      	movs	r0, #3
 800984a:	f7fa ffce 	bl	80047ea <PIDGainSet>
		break;
 800984e:	e209      	b.n	8009c64 <APPSet+0x1474>

	case RNS_LF_FWD_PID:
		fFwdG[3] = par->param_buffer[0].data;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4a6e      	ldr	r2, [pc, #440]	; (8009a10 <APPSet+0x1220>)
 8009856:	60d3      	str	r3, [r2, #12]
		fFwdG[4] = par->param_buffer[1].data;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	4a6c      	ldr	r2, [pc, #432]	; (8009a10 <APPSet+0x1220>)
 800985e:	6113      	str	r3, [r2, #16]
		fFwdG[5] = par->param_buffer[2].data;
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	4a6a      	ldr	r2, [pc, #424]	; (8009a10 <APPSet+0x1220>)
 8009866:	6153      	str	r3, [r2, #20]
		PIDGainSet(KP, fFwdG[3], &lf_fwd);
 8009868:	4b69      	ldr	r3, [pc, #420]	; (8009a10 <APPSet+0x1220>)
 800986a:	edd3 7a03 	vldr	s15, [r3, #12]
 800986e:	4969      	ldr	r1, [pc, #420]	; (8009a14 <APPSet+0x1224>)
 8009870:	eeb0 0a67 	vmov.f32	s0, s15
 8009874:	2004      	movs	r0, #4
 8009876:	f7fa ffb8 	bl	80047ea <PIDGainSet>
		PIDGainSet(KI, fFwdG[4], &lf_fwd);
 800987a:	4b65      	ldr	r3, [pc, #404]	; (8009a10 <APPSet+0x1220>)
 800987c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009880:	4964      	ldr	r1, [pc, #400]	; (8009a14 <APPSet+0x1224>)
 8009882:	eeb0 0a67 	vmov.f32	s0, s15
 8009886:	2005      	movs	r0, #5
 8009888:	f7fa ffaf 	bl	80047ea <PIDGainSet>
		PIDGainSet(KD, fFwdG[5], &lf_fwd);
 800988c:	4b60      	ldr	r3, [pc, #384]	; (8009a10 <APPSet+0x1220>)
 800988e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009892:	4960      	ldr	r1, [pc, #384]	; (8009a14 <APPSet+0x1224>)
 8009894:	eeb0 0a67 	vmov.f32	s0, s15
 8009898:	2006      	movs	r0, #6
 800989a:	f7fa ffa6 	bl	80047ea <PIDGainSet>
		break;
 800989e:	e1e1      	b.n	8009c64 <APPSet+0x1474>

	case RNS_LF_LSA_POS :

		if((int)par->param_buffer[0].data == AT_FRONT)
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80098a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098aa:	ee17 3a90 	vmov	r3, s15
 80098ae:	2b0a      	cmp	r3, #10
 80098b0:	d103      	bne.n	80098ba <APPSet+0x10ca>
			 LSA_FRONT = &LSA_A;
 80098b2:	4b59      	ldr	r3, [pc, #356]	; (8009a18 <APPSet+0x1228>)
 80098b4:	4a59      	ldr	r2, [pc, #356]	; (8009a1c <APPSet+0x122c>)
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e025      	b.n	8009906 <APPSet+0x1116>
		else if((int)par->param_buffer[0].data == AT_BACK)
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80098c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098c4:	ee17 3a90 	vmov	r3, s15
 80098c8:	2b0b      	cmp	r3, #11
 80098ca:	d103      	bne.n	80098d4 <APPSet+0x10e4>
			 LSA_BACK = &LSA_A;
 80098cc:	4b54      	ldr	r3, [pc, #336]	; (8009a20 <APPSet+0x1230>)
 80098ce:	4a53      	ldr	r2, [pc, #332]	; (8009a1c <APPSet+0x122c>)
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e018      	b.n	8009906 <APPSet+0x1116>
		else if((int)par->param_buffer[0].data == AT_LEFT)
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80098da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098de:	ee17 3a90 	vmov	r3, s15
 80098e2:	2b0c      	cmp	r3, #12
 80098e4:	d103      	bne.n	80098ee <APPSet+0x10fe>
			 LSA_LEFT = &LSA_A;
 80098e6:	4b4f      	ldr	r3, [pc, #316]	; (8009a24 <APPSet+0x1234>)
 80098e8:	4a4c      	ldr	r2, [pc, #304]	; (8009a1c <APPSet+0x122c>)
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	e00b      	b.n	8009906 <APPSet+0x1116>
		else if((int)par->param_buffer[0].data == AT_RIGHT)
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80098f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098f8:	ee17 3a90 	vmov	r3, s15
 80098fc:	2b0d      	cmp	r3, #13
 80098fe:	d102      	bne.n	8009906 <APPSet+0x1116>
			 LSA_RIGHT = &LSA_A;
 8009900:	4b49      	ldr	r3, [pc, #292]	; (8009a28 <APPSet+0x1238>)
 8009902:	4a46      	ldr	r2, [pc, #280]	; (8009a1c <APPSet+0x122c>)
 8009904:	601a      	str	r2, [r3, #0]

		if((int)par->param_buffer[1].data == AT_FRONT)
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	edd3 7a02 	vldr	s15, [r3, #8]
 800990c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009910:	ee17 3a90 	vmov	r3, s15
 8009914:	2b0a      	cmp	r3, #10
 8009916:	d103      	bne.n	8009920 <APPSet+0x1130>
			LSA_FRONT = &LSA_B;
 8009918:	4b3f      	ldr	r3, [pc, #252]	; (8009a18 <APPSet+0x1228>)
 800991a:	4a44      	ldr	r2, [pc, #272]	; (8009a2c <APPSet+0x123c>)
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	e025      	b.n	800996c <APPSet+0x117c>
		else if((int)par->param_buffer[1].data == AT_BACK)
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	edd3 7a02 	vldr	s15, [r3, #8]
 8009926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800992a:	ee17 3a90 	vmov	r3, s15
 800992e:	2b0b      	cmp	r3, #11
 8009930:	d103      	bne.n	800993a <APPSet+0x114a>
			LSA_BACK = &LSA_B;
 8009932:	4b3b      	ldr	r3, [pc, #236]	; (8009a20 <APPSet+0x1230>)
 8009934:	4a3d      	ldr	r2, [pc, #244]	; (8009a2c <APPSet+0x123c>)
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e018      	b.n	800996c <APPSet+0x117c>
		else if((int)par->param_buffer[1].data == AT_LEFT)
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009944:	ee17 3a90 	vmov	r3, s15
 8009948:	2b0c      	cmp	r3, #12
 800994a:	d103      	bne.n	8009954 <APPSet+0x1164>
			LSA_LEFT = &LSA_B ;
 800994c:	4b35      	ldr	r3, [pc, #212]	; (8009a24 <APPSet+0x1234>)
 800994e:	4a37      	ldr	r2, [pc, #220]	; (8009a2c <APPSet+0x123c>)
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	e00b      	b.n	800996c <APPSet+0x117c>
		else if((int)par->param_buffer[1].data == AT_RIGHT)
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	edd3 7a02 	vldr	s15, [r3, #8]
 800995a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800995e:	ee17 3a90 	vmov	r3, s15
 8009962:	2b0d      	cmp	r3, #13
 8009964:	d102      	bne.n	800996c <APPSet+0x117c>
			LSA_RIGHT = &LSA_B;
 8009966:	4b30      	ldr	r3, [pc, #192]	; (8009a28 <APPSet+0x1238>)
 8009968:	4a30      	ldr	r2, [pc, #192]	; (8009a2c <APPSet+0x123c>)
 800996a:	601a      	str	r2, [r3, #0]

		if((int)par->param_buffer[2].data == AT_FRONT)
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009976:	ee17 3a90 	vmov	r3, s15
 800997a:	2b0a      	cmp	r3, #10
 800997c:	d103      	bne.n	8009986 <APPSet+0x1196>
			LSA_FRONT = &LSA_C;
 800997e:	4b26      	ldr	r3, [pc, #152]	; (8009a18 <APPSet+0x1228>)
 8009980:	4a2b      	ldr	r2, [pc, #172]	; (8009a30 <APPSet+0x1240>)
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	e025      	b.n	80099d2 <APPSet+0x11e2>
		else if((int)par->param_buffer[2].data == AT_BACK)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	edd3 7a03 	vldr	s15, [r3, #12]
 800998c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009990:	ee17 3a90 	vmov	r3, s15
 8009994:	2b0b      	cmp	r3, #11
 8009996:	d103      	bne.n	80099a0 <APPSet+0x11b0>
			LSA_BACK = &LSA_C;
 8009998:	4b21      	ldr	r3, [pc, #132]	; (8009a20 <APPSet+0x1230>)
 800999a:	4a25      	ldr	r2, [pc, #148]	; (8009a30 <APPSet+0x1240>)
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e018      	b.n	80099d2 <APPSet+0x11e2>
		else if((int)par->param_buffer[2].data == AT_LEFT)
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80099a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099aa:	ee17 3a90 	vmov	r3, s15
 80099ae:	2b0c      	cmp	r3, #12
 80099b0:	d103      	bne.n	80099ba <APPSet+0x11ca>
			LSA_LEFT = &LSA_C;
 80099b2:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <APPSet+0x1234>)
 80099b4:	4a1e      	ldr	r2, [pc, #120]	; (8009a30 <APPSet+0x1240>)
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	e00b      	b.n	80099d2 <APPSet+0x11e2>
		else if((int)par->param_buffer[2].data == AT_RIGHT)
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80099c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099c4:	ee17 3a90 	vmov	r3, s15
 80099c8:	2b0d      	cmp	r3, #13
 80099ca:	d102      	bne.n	80099d2 <APPSet+0x11e2>
			LSA_RIGHT = &LSA_C;
 80099cc:	4b16      	ldr	r3, [pc, #88]	; (8009a28 <APPSet+0x1238>)
 80099ce:	4a18      	ldr	r2, [pc, #96]	; (8009a30 <APPSet+0x1240>)
 80099d0:	601a      	str	r2, [r3, #0]

		if((int)par->param_buffer[3].data == AT_FRONT)
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80099d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099dc:	ee17 3a90 	vmov	r3, s15
 80099e0:	2b0a      	cmp	r3, #10
 80099e2:	d103      	bne.n	80099ec <APPSet+0x11fc>
			LSA_FRONT = &LSA_D;
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <APPSet+0x1228>)
 80099e6:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <APPSet+0x1244>)
 80099e8:	601a      	str	r2, [r3, #0]
		else if((int)par->param_buffer[3].data == AT_LEFT)
			LSA_LEFT = &LSA_D;
		else if((int)par->param_buffer[3].data == AT_RIGHT)
			LSA_RIGHT = &LSA_D;

		break;
 80099ea:	e13a      	b.n	8009c62 <APPSet+0x1472>
		else if((int)par->param_buffer[3].data == AT_BACK)
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80099f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099f6:	ee17 3a90 	vmov	r3, s15
 80099fa:	2b0b      	cmp	r3, #11
 80099fc:	d11c      	bne.n	8009a38 <APPSet+0x1248>
			LSA_BACK = &LSA_D ;
 80099fe:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <APPSet+0x1230>)
 8009a00:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <APPSet+0x1244>)
 8009a02:	601a      	str	r2, [r3, #0]
		break;
 8009a04:	e12d      	b.n	8009c62 <APPSet+0x1472>
 8009a06:	bf00      	nop
 8009a08:	20000174 	.word	0x20000174
 8009a0c:	20007b9c 	.word	0x20007b9c
 8009a10:	20000190 	.word	0x20000190
 8009a14:	20007cd8 	.word	0x20007cd8
 8009a18:	20006e24 	.word	0x20006e24
 8009a1c:	200073e8 	.word	0x200073e8
 8009a20:	20007b94 	.word	0x20007b94
 8009a24:	20007454 	.word	0x20007454
 8009a28:	20007c18 	.word	0x20007c18
 8009a2c:	200076d8 	.word	0x200076d8
 8009a30:	20007970 	.word	0x20007970
 8009a34:	20007d3c 	.word	0x20007d3c
		else if((int)par->param_buffer[3].data == AT_LEFT)
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8009a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a42:	ee17 3a90 	vmov	r3, s15
 8009a46:	2b0c      	cmp	r3, #12
 8009a48:	d103      	bne.n	8009a52 <APPSet+0x1262>
			LSA_LEFT = &LSA_D;
 8009a4a:	4b89      	ldr	r3, [pc, #548]	; (8009c70 <APPSet+0x1480>)
 8009a4c:	4a89      	ldr	r2, [pc, #548]	; (8009c74 <APPSet+0x1484>)
 8009a4e:	601a      	str	r2, [r3, #0]
		break;
 8009a50:	e107      	b.n	8009c62 <APPSet+0x1472>
		else if((int)par->param_buffer[3].data == AT_RIGHT)
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	edd3 7a04 	vldr	s15, [r3, #16]
 8009a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a5c:	ee17 3a90 	vmov	r3, s15
 8009a60:	2b0d      	cmp	r3, #13
 8009a62:	f040 80fe 	bne.w	8009c62 <APPSet+0x1472>
			LSA_RIGHT = &LSA_D;
 8009a66:	4b84      	ldr	r3, [pc, #528]	; (8009c78 <APPSet+0x1488>)
 8009a68:	4a82      	ldr	r2, [pc, #520]	; (8009c74 <APPSet+0x1484>)
 8009a6a:	601a      	str	r2, [r3, #0]
		break;
 8009a6c:	e0f9      	b.n	8009c62 <APPSet+0x1472>

	case RNS_X_ABT:
		fXPosGain[0] = par->param_buffer[0].data;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4a82      	ldr	r2, [pc, #520]	; (8009c7c <APPSet+0x148c>)
 8009a74:	6013      	str	r3, [r2, #0]
		fXPosGain[1] = par->param_buffer[1].data;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	4a80      	ldr	r2, [pc, #512]	; (8009c7c <APPSet+0x148c>)
 8009a7c:	6053      	str	r3, [r2, #4]
		fXPosGain[2] = par->param_buffer[2].data;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	4a7e      	ldr	r2, [pc, #504]	; (8009c7c <APPSet+0x148c>)
 8009a84:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 8009a86:	4b7d      	ldr	r3, [pc, #500]	; (8009c7c <APPSet+0x148c>)
 8009a88:	edd3 7a00 	vldr	s15, [r3]
 8009a8c:	4b7b      	ldr	r3, [pc, #492]	; (8009c7c <APPSet+0x148c>)
 8009a8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a92:	4b7a      	ldr	r3, [pc, #488]	; (8009c7c <APPSet+0x148c>)
 8009a94:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a98:	4b79      	ldr	r3, [pc, #484]	; (8009c80 <APPSet+0x1490>)
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4b79      	ldr	r3, [pc, #484]	; (8009c84 <APPSet+0x1494>)
 8009a9e:	4a7a      	ldr	r2, [pc, #488]	; (8009c88 <APPSet+0x1498>)
 8009aa0:	497a      	ldr	r1, [pc, #488]	; (8009c8c <APPSet+0x149c>)
 8009aa2:	487b      	ldr	r0, [pc, #492]	; (8009c90 <APPSet+0x14a0>)
 8009aa4:	eef0 1a66 	vmov.f32	s3, s13
 8009aa8:	eeb0 1a47 	vmov.f32	s2, s14
 8009aac:	eef0 0a67 	vmov.f32	s1, s15
 8009ab0:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8009c94 <APPSet+0x14a4>
 8009ab4:	f7f7 fa9a 	bl	8000fec <ABTInit>
		break;
 8009ab8:	e0d4      	b.n	8009c64 <APPSet+0x1474>

	case RNS_Y_ABT:
		fYPosGain[0] = par->param_buffer[0].data;
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4a76      	ldr	r2, [pc, #472]	; (8009c98 <APPSet+0x14a8>)
 8009ac0:	6013      	str	r3, [r2, #0]
		fYPosGain[1] = par->param_buffer[1].data;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	4a74      	ldr	r2, [pc, #464]	; (8009c98 <APPSet+0x14a8>)
 8009ac8:	6053      	str	r3, [r2, #4]
		fYPosGain[2] = par->param_buffer[2].data;
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	4a72      	ldr	r2, [pc, #456]	; (8009c98 <APPSet+0x14a8>)
 8009ad0:	6093      	str	r3, [r2, #8]
		ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 8009ad2:	4b71      	ldr	r3, [pc, #452]	; (8009c98 <APPSet+0x14a8>)
 8009ad4:	edd3 7a00 	vldr	s15, [r3]
 8009ad8:	4b6f      	ldr	r3, [pc, #444]	; (8009c98 <APPSet+0x14a8>)
 8009ada:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ade:	4b6e      	ldr	r3, [pc, #440]	; (8009c98 <APPSet+0x14a8>)
 8009ae0:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ae4:	4b6d      	ldr	r3, [pc, #436]	; (8009c9c <APPSet+0x14ac>)
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4b6d      	ldr	r3, [pc, #436]	; (8009ca0 <APPSet+0x14b0>)
 8009aea:	4a6e      	ldr	r2, [pc, #440]	; (8009ca4 <APPSet+0x14b4>)
 8009aec:	496e      	ldr	r1, [pc, #440]	; (8009ca8 <APPSet+0x14b8>)
 8009aee:	486f      	ldr	r0, [pc, #444]	; (8009cac <APPSet+0x14bc>)
 8009af0:	eef0 1a66 	vmov.f32	s3, s13
 8009af4:	eeb0 1a47 	vmov.f32	s2, s14
 8009af8:	eef0 0a67 	vmov.f32	s1, s15
 8009afc:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8009c94 <APPSet+0x14a4>
 8009b00:	f7f7 fa74 	bl	8000fec <ABTInit>
		break;
 8009b04:	e0ae      	b.n	8009c64 <APPSet+0x1474>

	case RNS_DEVICE_CONFIG :
		dev_cfg.motor_enc_dir = (uint8_t) par->param_buffer[0].data;
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b10:	edc7 7a04 	vstr	s15, [r7, #16]
 8009b14:	7c3b      	ldrb	r3, [r7, #16]
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	4b65      	ldr	r3, [pc, #404]	; (8009cb0 <APPSet+0x14c0>)
 8009b1a:	711a      	strb	r2, [r3, #4]
		dev_cfg.base_type = (unsigned char) par->param_buffer[1].data;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b26:	edc7 7a04 	vstr	s15, [r7, #16]
 8009b2a:	7c3b      	ldrb	r3, [r7, #16]
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	4b60      	ldr	r3, [pc, #384]	; (8009cb0 <APPSet+0x14c0>)
 8009b30:	701a      	strb	r2, [r3, #0]
		dev_cfg.PID_type = (unsigned char) par->param_buffer[2].data;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	edd3 7a03 	vldr	s15, [r3, #12]
 8009b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b3c:	edc7 7a04 	vstr	s15, [r7, #16]
 8009b40:	7c3b      	ldrb	r3, [r7, #16]
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	4b5a      	ldr	r3, [pc, #360]	; (8009cb0 <APPSet+0x14c0>)
 8009b46:	709a      	strb	r2, [r3, #2]

		if (dev_cfg.motor1_enc == 0){
 8009b48:	4b59      	ldr	r3, [pc, #356]	; (8009cb0 <APPSet+0x14c0>)
 8009b4a:	791b      	ldrb	r3, [r3, #4]
 8009b4c:	f003 0310 	and.w	r3, r3, #16
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d104      	bne.n	8009b60 <APPSet+0x1370>
			QEISwap(QEI6,QEI_No_Swap);
 8009b56:	2100      	movs	r1, #0
 8009b58:	2006      	movs	r0, #6
 8009b5a:	f7f8 fa55 	bl	8002008 <QEISwap>
 8009b5e:	e003      	b.n	8009b68 <APPSet+0x1378>
		}else
			QEISwap(QEI6,QEI_Swap);
 8009b60:	2101      	movs	r1, #1
 8009b62:	2006      	movs	r0, #6
 8009b64:	f7f8 fa50 	bl	8002008 <QEISwap>

		if (dev_cfg.motor2_enc == 0)
 8009b68:	4b51      	ldr	r3, [pc, #324]	; (8009cb0 <APPSet+0x14c0>)
 8009b6a:	791b      	ldrb	r3, [r3, #4]
 8009b6c:	f003 0320 	and.w	r3, r3, #32
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <APPSet+0x1390>
			QEISwap(QEI4,QEI_No_Swap);
 8009b76:	2100      	movs	r1, #0
 8009b78:	2004      	movs	r0, #4
 8009b7a:	f7f8 fa45 	bl	8002008 <QEISwap>
 8009b7e:	e003      	b.n	8009b88 <APPSet+0x1398>
		else
			QEISwap(QEI4,QEI_Swap);
 8009b80:	2101      	movs	r1, #1
 8009b82:	2004      	movs	r0, #4
 8009b84:	f7f8 fa40 	bl	8002008 <QEISwap>

		if (dev_cfg.motor3_enc == 0)
 8009b88:	4b49      	ldr	r3, [pc, #292]	; (8009cb0 <APPSet+0x14c0>)
 8009b8a:	791b      	ldrb	r3, [r3, #4]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <APPSet+0x13b0>
			QEISwap(QEI1,QEI_No_Swap);
 8009b96:	2100      	movs	r1, #0
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f7f8 fa35 	bl	8002008 <QEISwap>
 8009b9e:	e003      	b.n	8009ba8 <APPSet+0x13b8>
		else
			QEISwap(QEI1,QEI_Swap);
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	f7f8 fa30 	bl	8002008 <QEISwap>

		if (dev_cfg.motor4_enc == 0)
 8009ba8:	4b41      	ldr	r3, [pc, #260]	; (8009cb0 <APPSet+0x14c0>)
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <APPSet+0x13d0>
			QEISwap(QEI3,QEI_No_Swap);
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	2003      	movs	r0, #3
 8009bba:	f7f8 fa25 	bl	8002008 <QEISwap>
 8009bbe:	e003      	b.n	8009bc8 <APPSet+0x13d8>
		else
			QEISwap(QEI3,QEI_Swap);
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	2003      	movs	r0, #3
 8009bc4:	f7f8 fa20 	bl	8002008 <QEISwap>

		if(dev_cfg.motor1_dir == 1)
 8009bc8:	4b39      	ldr	r3, [pc, #228]	; (8009cb0 <APPSet+0x14c0>)
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d004      	beq.n	8009be0 <APPSet+0x13f0>
			SwapBDC(&BDC1,1);
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4836      	ldr	r0, [pc, #216]	; (8009cb4 <APPSet+0x14c4>)
 8009bda:	f7f7 fbd2 	bl	8001382 <SwapBDC>
 8009bde:	e004      	b.n	8009bea <APPSet+0x13fa>
		else
			SwapBDC(&BDC1,-1);
 8009be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009be4:	4833      	ldr	r0, [pc, #204]	; (8009cb4 <APPSet+0x14c4>)
 8009be6:	f7f7 fbcc 	bl	8001382 <SwapBDC>

		if(dev_cfg.motor2_dir == 1)
 8009bea:	4b31      	ldr	r3, [pc, #196]	; (8009cb0 <APPSet+0x14c0>)
 8009bec:	791b      	ldrb	r3, [r3, #4]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <APPSet+0x1412>
			SwapBDC(&BDC2,1);
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	482f      	ldr	r0, [pc, #188]	; (8009cb8 <APPSet+0x14c8>)
 8009bfc:	f7f7 fbc1 	bl	8001382 <SwapBDC>
 8009c00:	e004      	b.n	8009c0c <APPSet+0x141c>
		else
			SwapBDC(&BDC2,-1);
 8009c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c06:	482c      	ldr	r0, [pc, #176]	; (8009cb8 <APPSet+0x14c8>)
 8009c08:	f7f7 fbbb 	bl	8001382 <SwapBDC>
		if(dev_cfg.motor3_dir == 1)
 8009c0c:	4b28      	ldr	r3, [pc, #160]	; (8009cb0 <APPSet+0x14c0>)
 8009c0e:	791b      	ldrb	r3, [r3, #4]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <APPSet+0x1434>
			SwapBDC(&BDC3,1);
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	4827      	ldr	r0, [pc, #156]	; (8009cbc <APPSet+0x14cc>)
 8009c1e:	f7f7 fbb0 	bl	8001382 <SwapBDC>
 8009c22:	e004      	b.n	8009c2e <APPSet+0x143e>
		else
			SwapBDC(&BDC3,-1);
 8009c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c28:	4824      	ldr	r0, [pc, #144]	; (8009cbc <APPSet+0x14cc>)
 8009c2a:	f7f7 fbaa 	bl	8001382 <SwapBDC>

		if(dev_cfg.motor4_dir == 1)
 8009c2e:	4b20      	ldr	r3, [pc, #128]	; (8009cb0 <APPSet+0x14c0>)
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	f003 0308 	and.w	r3, r3, #8
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d004      	beq.n	8009c46 <APPSet+0x1456>
			SwapBDC(&BDC4,1);
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	4820      	ldr	r0, [pc, #128]	; (8009cc0 <APPSet+0x14d0>)
 8009c40:	f7f7 fb9f 	bl	8001382 <SwapBDC>
		else
			SwapBDC(&BDC4,-1);

		break;
 8009c44:	e00e      	b.n	8009c64 <APPSet+0x1474>
			SwapBDC(&BDC4,-1);
 8009c46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c4a:	481d      	ldr	r0, [pc, #116]	; (8009cc0 <APPSet+0x14d0>)
 8009c4c:	f7f7 fb99 	bl	8001382 <SwapBDC>
		break;
 8009c50:	e008      	b.n	8009c64 <APPSet+0x1474>

	default:
		break;
 8009c52:	bf00      	nop
 8009c54:	e006      	b.n	8009c64 <APPSet+0x1474>
		break;
 8009c56:	bf00      	nop
 8009c58:	e004      	b.n	8009c64 <APPSet+0x1474>
		break;
 8009c5a:	bf00      	nop
 8009c5c:	e002      	b.n	8009c64 <APPSet+0x1474>
		break;
 8009c5e:	bf00      	nop
 8009c60:	e000      	b.n	8009c64 <APPSet+0x1474>
		break;
 8009c62:	bf00      	nop
	}
}
 8009c64:	bf00      	nop
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c6e:	bf00      	nop
 8009c70:	20007454 	.word	0x20007454
 8009c74:	20007d3c 	.word	0x20007d3c
 8009c78:	20007c18 	.word	0x20007c18
 8009c7c:	20000030 	.word	0x20000030
 8009c80:	200080a0 	.word	0x200080a0
 8009c84:	20006674 	.word	0x20006674
 8009c88:	20007c0c 	.word	0x20007c0c
 8009c8c:	20007da4 	.word	0x20007da4
 8009c90:	200066a8 	.word	0x200066a8
 8009c94:	3ba3d70a 	.word	0x3ba3d70a
 8009c98:	2000003c 	.word	0x2000003c
 8009c9c:	20006e6c 	.word	0x20006e6c
 8009ca0:	20006da4 	.word	0x20006da4
 8009ca4:	20006818 	.word	0x20006818
 8009ca8:	20007c00 	.word	0x20007c00
 8009cac:	200080c0 	.word	0x200080c0
 8009cb0:	20007cc8 	.word	0x20007cc8
 8009cb4:	20008130 	.word	0x20008130
 8009cb8:	20006e38 	.word	0x20006e38
 8009cbc:	20006824 	.word	0x20006824
 8009cc0:	20007b5c 	.word	0x20007b5c

08009cc4 <APPApply>:

void APPApply(ins_t *pins)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	switch (pins->instruction){
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	3b05      	subs	r3, #5
 8009cd2:	2b0c      	cmp	r3, #12
 8009cd4:	f200 815c 	bhi.w	8009f90 <APPApply+0x2cc>
 8009cd8:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <APPApply+0x1c>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009d37 	.word	0x08009d37
 8009ce4:	08009d59 	.word	0x08009d59
 8009ce8:	08009d63 	.word	0x08009d63
 8009cec:	08009d6d 	.word	0x08009d6d
 8009cf0:	08009d77 	.word	0x08009d77
 8009cf4:	08009d81 	.word	0x08009d81
 8009cf8:	08009d15 	.word	0x08009d15
 8009cfc:	08009f91 	.word	0x08009f91
 8009d00:	08009dc7 	.word	0x08009dc7
 8009d04:	08009ed1 	.word	0x08009ed1
 8009d08:	08009f91 	.word	0x08009f91
 8009d0c:	08009f81 	.word	0x08009f81
 8009d10:	08009da3 	.word	0x08009da3

	case RNS_CONTROLLER:
		joy_x = main_board_1_data_receive.common_buffer[0].byte1;
 8009d14:	4ba1      	ldr	r3, [pc, #644]	; (8009f9c <APPApply+0x2d8>)
 8009d16:	791a      	ldrb	r2, [r3, #4]
 8009d18:	4ba1      	ldr	r3, [pc, #644]	; (8009fa0 <APPApply+0x2dc>)
 8009d1a:	701a      	strb	r2, [r3, #0]
		joy_y = main_board_1_data_receive.common_buffer[0].byte2;
 8009d1c:	4b9f      	ldr	r3, [pc, #636]	; (8009f9c <APPApply+0x2d8>)
 8009d1e:	795a      	ldrb	r2, [r3, #5]
 8009d20:	4ba0      	ldr	r3, [pc, #640]	; (8009fa4 <APPApply+0x2e0>)
 8009d22:	701a      	strb	r2, [r3, #0]
		an_L2 = main_board_1_data_receive.common_buffer[0].byte3;
 8009d24:	4b9d      	ldr	r3, [pc, #628]	; (8009f9c <APPApply+0x2d8>)
 8009d26:	799a      	ldrb	r2, [r3, #6]
 8009d28:	4b9f      	ldr	r3, [pc, #636]	; (8009fa8 <APPApply+0x2e4>)
 8009d2a:	701a      	strb	r2, [r3, #0]
		an_R2 = main_board_1_data_receive.common_buffer[0].byte4;
 8009d2c:	4b9b      	ldr	r3, [pc, #620]	; (8009f9c <APPApply+0x2d8>)
 8009d2e:	79da      	ldrb	r2, [r3, #7]
 8009d30:	4b9e      	ldr	r3, [pc, #632]	; (8009fac <APPApply+0x2e8>)
 8009d32:	701a      	strb	r2, [r3, #0]
		break;
 8009d34:	e12d      	b.n	8009f92 <APPApply+0x2ce>


	case RNS_VELOCITY:
		fFLeftVelR 	= pins->ins_buffer[0].data;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4a9d      	ldr	r2, [pc, #628]	; (8009fb0 <APPApply+0x2ec>)
 8009d3c:	6013      	str	r3, [r2, #0]
		fFRightVelR = pins->ins_buffer[1].data;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	4a9c      	ldr	r2, [pc, #624]	; (8009fb4 <APPApply+0x2f0>)
 8009d44:	6013      	str	r3, [r2, #0]
		fBLeftVelR 	= pins->ins_buffer[2].data;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	4a9b      	ldr	r2, [pc, #620]	; (8009fb8 <APPApply+0x2f4>)
 8009d4c:	6013      	str	r3, [r2, #0]
		fBRightVelR = pins->ins_buffer[3].data;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	4a9a      	ldr	r2, [pc, #616]	; (8009fbc <APPApply+0x2f8>)
 8009d54:	6013      	str	r3, [r2, #0]
		break;
 8009d56:	e11c      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_VELOCITY1:
		fFLeftVelR 	= pins->ins_buffer[0].data;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	4a94      	ldr	r2, [pc, #592]	; (8009fb0 <APPApply+0x2ec>)
 8009d5e:	6013      	str	r3, [r2, #0]
		break;
 8009d60:	e117      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_VELOCITY2:
		fFRightVelR = pins->ins_buffer[0].data;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4a93      	ldr	r2, [pc, #588]	; (8009fb4 <APPApply+0x2f0>)
 8009d68:	6013      	str	r3, [r2, #0]
		break;
 8009d6a:	e112      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_VELOCITY3:
		fBLeftVelR 	= pins->ins_buffer[0].data;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4a91      	ldr	r2, [pc, #580]	; (8009fb8 <APPApply+0x2f4>)
 8009d72:	6013      	str	r3, [r2, #0]
		break;
 8009d74:	e10d      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_VELOCITY4:
		fBRightVelR = pins->ins_buffer[0].data;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	4a90      	ldr	r2, [pc, #576]	; (8009fbc <APPApply+0x2f8>)
 8009d7c:	6013      	str	r3, [r2, #0]
		break;
 8009d7e:	e108      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_PDC:
		fFLeftVelU 	= pins->ins_buffer[0].data;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4a8e      	ldr	r2, [pc, #568]	; (8009fc0 <APPApply+0x2fc>)
 8009d86:	6013      	str	r3, [r2, #0]
		fFRightVelU = pins->ins_buffer[1].data;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	4a8d      	ldr	r2, [pc, #564]	; (8009fc4 <APPApply+0x300>)
 8009d8e:	6013      	str	r3, [r2, #0]
		fBLeftVelU 	= pins->ins_buffer[2].data;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	4a8c      	ldr	r2, [pc, #560]	; (8009fc8 <APPApply+0x304>)
 8009d96:	6013      	str	r3, [r2, #0]
		fBRightVelU = pins->ins_buffer[3].data;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	4a8b      	ldr	r2, [pc, #556]	; (8009fcc <APPApply+0x308>)
 8009d9e:	6013      	str	r3, [r2, #0]
		break;
 8009da0:	e0f7      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_ROTATE:
		AngleTargetDeg = (int)fyaw + (int)pins->ins_buffer[0].data; //+ve:clkwise,-ve:anti-clkwise,max:+-180
 8009da2:	4b8b      	ldr	r3, [pc, #556]	; (8009fd0 <APPApply+0x30c>)
 8009da4:	edd3 7a00 	vldr	s15, [r3]
 8009da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dac:	ee17 2a90 	vmov	r2, s15
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	edd3 7a01 	vldr	s15, [r3, #4]
 8009db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dba:	ee17 3a90 	vmov	r3, s15
 8009dbe:	4413      	add	r3, r2
 8009dc0:	4a84      	ldr	r2, [pc, #528]	; (8009fd4 <APPApply+0x310>)
 8009dc2:	6013      	str	r3, [r2, #0]
		break;
 8009dc4:	e0e5      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_LF_DIST:
		Dir = (int)pins->ins_buffer[0].data;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dd0:	ee17 2a90 	vmov	r2, s15
 8009dd4:	4b80      	ldr	r3, [pc, #512]	; (8009fd8 <APPApply+0x314>)
 8009dd6:	601a      	str	r2, [r3, #0]
		LF_vel = pins->ins_buffer[1].data;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	4a7f      	ldr	r2, [pc, #508]	; (8009fdc <APPApply+0x318>)
 8009dde:	6013      	str	r3, [r2, #0]
		LF_dist = pins->ins_buffer[2].data;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	4a7e      	ldr	r2, [pc, #504]	; (8009fe0 <APPApply+0x31c>)
 8009de6:	6013      	str	r3, [r2, #0]

		if (Dir == DIR_LEFT )
 8009de8:	4b7b      	ldr	r3, [pc, #492]	; (8009fd8 <APPApply+0x314>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b10      	cmp	r3, #16
 8009dee:	d10b      	bne.n	8009e08 <APPApply+0x144>
			LFtargetDist = fXEncData - LF_dist;
 8009df0:	4b7c      	ldr	r3, [pc, #496]	; (8009fe4 <APPApply+0x320>)
 8009df2:	ed93 7a00 	vldr	s14, [r3]
 8009df6:	4b7a      	ldr	r3, [pc, #488]	; (8009fe0 <APPApply+0x31c>)
 8009df8:	edd3 7a00 	vldr	s15, [r3]
 8009dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e00:	4b79      	ldr	r3, [pc, #484]	; (8009fe8 <APPApply+0x324>)
 8009e02:	edc3 7a00 	vstr	s15, [r3]
 8009e06:	e02e      	b.n	8009e66 <APPApply+0x1a2>
		else if ( Dir == DIR_RIGHT)
 8009e08:	4b73      	ldr	r3, [pc, #460]	; (8009fd8 <APPApply+0x314>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b11      	cmp	r3, #17
 8009e0e:	d10b      	bne.n	8009e28 <APPApply+0x164>
			LFtargetDist = fXEncData + LF_dist;
 8009e10:	4b74      	ldr	r3, [pc, #464]	; (8009fe4 <APPApply+0x320>)
 8009e12:	ed93 7a00 	vldr	s14, [r3]
 8009e16:	4b72      	ldr	r3, [pc, #456]	; (8009fe0 <APPApply+0x31c>)
 8009e18:	edd3 7a00 	vldr	s15, [r3]
 8009e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e20:	4b71      	ldr	r3, [pc, #452]	; (8009fe8 <APPApply+0x324>)
 8009e22:	edc3 7a00 	vstr	s15, [r3]
 8009e26:	e01e      	b.n	8009e66 <APPApply+0x1a2>
		else if (Dir == DIR_FRONT)
 8009e28:	4b6b      	ldr	r3, [pc, #428]	; (8009fd8 <APPApply+0x314>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b0e      	cmp	r3, #14
 8009e2e:	d10b      	bne.n	8009e48 <APPApply+0x184>
			LFtargetDist = fYEncData + LF_dist;
 8009e30:	4b6e      	ldr	r3, [pc, #440]	; (8009fec <APPApply+0x328>)
 8009e32:	ed93 7a00 	vldr	s14, [r3]
 8009e36:	4b6a      	ldr	r3, [pc, #424]	; (8009fe0 <APPApply+0x31c>)
 8009e38:	edd3 7a00 	vldr	s15, [r3]
 8009e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e40:	4b69      	ldr	r3, [pc, #420]	; (8009fe8 <APPApply+0x324>)
 8009e42:	edc3 7a00 	vstr	s15, [r3]
 8009e46:	e00e      	b.n	8009e66 <APPApply+0x1a2>
		else if (Dir == DIR_BACK)
 8009e48:	4b63      	ldr	r3, [pc, #396]	; (8009fd8 <APPApply+0x314>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b0f      	cmp	r3, #15
 8009e4e:	d10a      	bne.n	8009e66 <APPApply+0x1a2>
			LFtargetDist = fYEncData - LF_dist;
 8009e50:	4b66      	ldr	r3, [pc, #408]	; (8009fec <APPApply+0x328>)
 8009e52:	ed93 7a00 	vldr	s14, [r3]
 8009e56:	4b62      	ldr	r3, [pc, #392]	; (8009fe0 <APPApply+0x31c>)
 8009e58:	edd3 7a00 	vldr	s15, [r3]
 8009e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e60:	4b61      	ldr	r3, [pc, #388]	; (8009fe8 <APPApply+0x324>)
 8009e62:	edc3 7a00 	vstr	s15, [r3]

		if (Dir == DIR_LEFT || Dir == DIR_BACK)
 8009e66:	4b5c      	ldr	r3, [pc, #368]	; (8009fd8 <APPApply+0x314>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d003      	beq.n	8009e76 <APPApply+0x1b2>
 8009e6e:	4b5a      	ldr	r3, [pc, #360]	; (8009fd8 <APPApply+0x314>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b0f      	cmp	r3, #15
 8009e74:	d10d      	bne.n	8009e92 <APPApply+0x1ce>
			PIDGainSet(KE,-1/LF_dist,&lf_dist);
 8009e76:	4b5a      	ldr	r3, [pc, #360]	; (8009fe0 <APPApply+0x31c>)
 8009e78:	edd3 7a00 	vldr	s15, [r3]
 8009e7c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8009e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e84:	495a      	ldr	r1, [pc, #360]	; (8009ff0 <APPApply+0x32c>)
 8009e86:	eeb0 0a47 	vmov.f32	s0, s14
 8009e8a:	2002      	movs	r0, #2
 8009e8c:	f7fa fcad 	bl	80047ea <PIDGainSet>
 8009e90:	e014      	b.n	8009ebc <APPApply+0x1f8>
		else if(Dir == DIR_RIGHT || Dir == DIR_FRONT)
 8009e92:	4b51      	ldr	r3, [pc, #324]	; (8009fd8 <APPApply+0x314>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b11      	cmp	r3, #17
 8009e98:	d003      	beq.n	8009ea2 <APPApply+0x1de>
 8009e9a:	4b4f      	ldr	r3, [pc, #316]	; (8009fd8 <APPApply+0x314>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b0e      	cmp	r3, #14
 8009ea0:	d10c      	bne.n	8009ebc <APPApply+0x1f8>
			PIDGainSet(KE,1/LF_dist,&lf_dist);
 8009ea2:	4b4f      	ldr	r3, [pc, #316]	; (8009fe0 <APPApply+0x31c>)
 8009ea4:	edd3 7a00 	vldr	s15, [r3]
 8009ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb0:	494f      	ldr	r1, [pc, #316]	; (8009ff0 <APPApply+0x32c>)
 8009eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8009eb6:	2002      	movs	r0, #2
 8009eb8:	f7fa fc97 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU,LF_vel,&lf_dist);
 8009ebc:	4b47      	ldr	r3, [pc, #284]	; (8009fdc <APPApply+0x318>)
 8009ebe:	edd3 7a00 	vldr	s15, [r3]
 8009ec2:	494b      	ldr	r1, [pc, #300]	; (8009ff0 <APPApply+0x32c>)
 8009ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ec8:	2003      	movs	r0, #3
 8009eca:	f7fa fc8e 	bl	80047ea <PIDGainSet>
		break;
 8009ece:	e060      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_LF_JUNC:
		Dir = (int)pins->ins_buffer[0].data;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009eda:	ee17 2a90 	vmov	r2, s15
 8009ede:	4b3e      	ldr	r3, [pc, #248]	; (8009fd8 <APPApply+0x314>)
 8009ee0:	601a      	str	r2, [r3, #0]
		LF_vel = pins->ins_buffer[1].data;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	4a3d      	ldr	r2, [pc, #244]	; (8009fdc <APPApply+0x318>)
 8009ee8:	6013      	str	r3, [r2, #0]
		LF_dist = pins->ins_buffer[2].data;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	4a3c      	ldr	r2, [pc, #240]	; (8009fe0 <APPApply+0x31c>)
 8009ef0:	6013      	str	r3, [r2, #0]
		LF_junc = pins->ins_buffer[3].data;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	4a3f      	ldr	r2, [pc, #252]	; (8009ff4 <APPApply+0x330>)
 8009ef8:	6013      	str	r3, [r2, #0]
		LFtargetJunc = junction_count + (int)LF_junc;
 8009efa:	4b3e      	ldr	r3, [pc, #248]	; (8009ff4 <APPApply+0x330>)
 8009efc:	edd3 7a00 	vldr	s15, [r3]
 8009f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f04:	ee17 3a90 	vmov	r3, s15
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	4b3b      	ldr	r3, [pc, #236]	; (8009ff8 <APPApply+0x334>)
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	4413      	add	r3, r2
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	4b3a      	ldr	r3, [pc, #232]	; (8009ffc <APPApply+0x338>)
 8009f14:	801a      	strh	r2, [r3, #0]

		if (Dir == DIR_LEFT || Dir == DIR_BACK)
 8009f16:	4b30      	ldr	r3, [pc, #192]	; (8009fd8 <APPApply+0x314>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b10      	cmp	r3, #16
 8009f1c:	d003      	beq.n	8009f26 <APPApply+0x262>
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	; (8009fd8 <APPApply+0x314>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b0f      	cmp	r3, #15
 8009f24:	d10d      	bne.n	8009f42 <APPApply+0x27e>
			PIDGainSet(KE,-1/LF_dist,&lf_dist);
 8009f26:	4b2e      	ldr	r3, [pc, #184]	; (8009fe0 <APPApply+0x31c>)
 8009f28:	edd3 7a00 	vldr	s15, [r3]
 8009f2c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8009f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f34:	492e      	ldr	r1, [pc, #184]	; (8009ff0 <APPApply+0x32c>)
 8009f36:	eeb0 0a47 	vmov.f32	s0, s14
 8009f3a:	2002      	movs	r0, #2
 8009f3c:	f7fa fc55 	bl	80047ea <PIDGainSet>
 8009f40:	e014      	b.n	8009f6c <APPApply+0x2a8>
		else if(Dir == DIR_RIGHT || Dir == DIR_FRONT)
 8009f42:	4b25      	ldr	r3, [pc, #148]	; (8009fd8 <APPApply+0x314>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b11      	cmp	r3, #17
 8009f48:	d003      	beq.n	8009f52 <APPApply+0x28e>
 8009f4a:	4b23      	ldr	r3, [pc, #140]	; (8009fd8 <APPApply+0x314>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b0e      	cmp	r3, #14
 8009f50:	d10c      	bne.n	8009f6c <APPApply+0x2a8>
			PIDGainSet(KE,1/LF_dist,&lf_dist);
 8009f52:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <APPApply+0x31c>)
 8009f54:	edd3 7a00 	vldr	s15, [r3]
 8009f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f60:	4923      	ldr	r1, [pc, #140]	; (8009ff0 <APPApply+0x32c>)
 8009f62:	eeb0 0a47 	vmov.f32	s0, s14
 8009f66:	2002      	movs	r0, #2
 8009f68:	f7fa fc3f 	bl	80047ea <PIDGainSet>
		PIDGainSet(KU,LF_vel,&lf_dist);
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <APPApply+0x318>)
 8009f6e:	edd3 7a00 	vldr	s15, [r3]
 8009f72:	491f      	ldr	r1, [pc, #124]	; (8009ff0 <APPApply+0x32c>)
 8009f74:	eeb0 0a67 	vmov.f32	s0, s15
 8009f78:	2003      	movs	r0, #3
 8009f7a:	f7fa fc36 	bl	80047ea <PIDGainSet>
		break;
 8009f7e:	e008      	b.n	8009f92 <APPApply+0x2ce>

	case RNS_PPStart:
		PP_start(rcvPoint,NumPoint,&pp);
 8009f80:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <APPApply+0x33c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <APPApply+0x340>)
 8009f86:	4619      	mov	r1, r3
 8009f88:	481f      	ldr	r0, [pc, #124]	; (800a008 <APPApply+0x344>)
 8009f8a:	f7fb f824 	bl	8004fd6 <PP_start>
		break;
 8009f8e:	e000      	b.n	8009f92 <APPApply+0x2ce>

	default:
		break;
 8009f90:	bf00      	nop
	}
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200081c8 	.word	0x200081c8
 8009fa0:	20007ddc 	.word	0x20007ddc
 8009fa4:	20006f44 	.word	0x20006f44
 8009fa8:	200065bc 	.word	0x200065bc
 8009fac:	2000681c 	.word	0x2000681c
 8009fb0:	20006814 	.word	0x20006814
 8009fb4:	20007d38 	.word	0x20007d38
 8009fb8:	200081c4 	.word	0x200081c4
 8009fbc:	20007cc4 	.word	0x20007cc4
 8009fc0:	20006e8c 	.word	0x20006e8c
 8009fc4:	20006688 	.word	0x20006688
 8009fc8:	20006744 	.word	0x20006744
 8009fcc:	200065b4 	.word	0x200065b4
 8009fd0:	20007ca0 	.word	0x20007ca0
 8009fd4:	20007bf4 	.word	0x20007bf4
 8009fd8:	20007b8c 	.word	0x20007b8c
 8009fdc:	20007f20 	.word	0x20007f20
 8009fe0:	20007740 	.word	0x20007740
 8009fe4:	200066a8 	.word	0x200066a8
 8009fe8:	20007dcc 	.word	0x20007dcc
 8009fec:	200080c0 	.word	0x200080c0
 8009ff0:	20007fbc 	.word	0x20007fbc
 8009ff4:	20007fb8 	.word	0x20007fb8
 8009ff8:	200065b0 	.word	0x200065b0
 8009ffc:	200081bc 	.word	0x200081bc
 800a000:	20007d2c 	.word	0x20007d2c
 800a004:	20006864 	.word	0x20006864
 800a008:	20006f58 	.word	0x20006f58

0800a00c <APPStart>:

void APPStart(ins_t *pins)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

	switch (pins->instruction){
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	3b05      	subs	r3, #5
 800a01a:	2b0c      	cmp	r3, #12
 800a01c:	f200 80df 	bhi.w	800a1de <APPStart+0x1d2>
 800a020:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <APPStart+0x1c>)
 800a022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a026:	bf00      	nop
 800a028:	0800a073 	.word	0x0800a073
 800a02c:	0800a07f 	.word	0x0800a07f
 800a030:	0800a08b 	.word	0x0800a08b
 800a034:	0800a097 	.word	0x0800a097
 800a038:	0800a0a3 	.word	0x0800a0a3
 800a03c:	0800a1df 	.word	0x0800a1df
 800a040:	0800a05d 	.word	0x0800a05d
 800a044:	0800a1df 	.word	0x0800a1df
 800a048:	0800a0af 	.word	0x0800a0af
 800a04c:	0800a127 	.word	0x0800a127
 800a050:	0800a1df 	.word	0x0800a1df
 800a054:	0800a1bf 	.word	0x0800a1bf
 800a058:	0800a19f 	.word	0x0800a19f

	case RNS_CONTROLLER:
		sys.controller = 1;
 800a05c:	4a63      	ldr	r2, [pc, #396]	; (800a1ec <APPStart+0x1e0>)
 800a05e:	7853      	ldrb	r3, [r2, #1]
 800a060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a064:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 800a066:	4a61      	ldr	r2, [pc, #388]	; (800a1ec <APPStart+0x1e0>)
 800a068:	7813      	ldrb	r3, [r2, #0]
 800a06a:	f043 0304 	orr.w	r3, r3, #4
 800a06e:	7013      	strb	r3, [r2, #0]
		break;
 800a070:	e0b6      	b.n	800a1e0 <APPStart+0x1d4>

	case RNS_VELOCITY:
		sys.vel_flag = 1;
 800a072:	4a5e      	ldr	r2, [pc, #376]	; (800a1ec <APPStart+0x1e0>)
 800a074:	7813      	ldrb	r3, [r2, #0]
 800a076:	f043 0304 	orr.w	r3, r3, #4
 800a07a:	7013      	strb	r3, [r2, #0]
		break;
 800a07c:	e0b0      	b.n	800a1e0 <APPStart+0x1d4>

	case RNS_VELOCITY1:
			sys.vel_flag = 1;
 800a07e:	4a5b      	ldr	r2, [pc, #364]	; (800a1ec <APPStart+0x1e0>)
 800a080:	7813      	ldrb	r3, [r2, #0]
 800a082:	f043 0304 	orr.w	r3, r3, #4
 800a086:	7013      	strb	r3, [r2, #0]
			break;
 800a088:	e0aa      	b.n	800a1e0 <APPStart+0x1d4>
	case RNS_VELOCITY2:
			sys.vel_flag = 1;
 800a08a:	4a58      	ldr	r2, [pc, #352]	; (800a1ec <APPStart+0x1e0>)
 800a08c:	7813      	ldrb	r3, [r2, #0]
 800a08e:	f043 0304 	orr.w	r3, r3, #4
 800a092:	7013      	strb	r3, [r2, #0]
			break;
 800a094:	e0a4      	b.n	800a1e0 <APPStart+0x1d4>
	case RNS_VELOCITY3:
			sys.vel_flag = 1;
 800a096:	4a55      	ldr	r2, [pc, #340]	; (800a1ec <APPStart+0x1e0>)
 800a098:	7813      	ldrb	r3, [r2, #0]
 800a09a:	f043 0304 	orr.w	r3, r3, #4
 800a09e:	7013      	strb	r3, [r2, #0]
			break;
 800a0a0:	e09e      	b.n	800a1e0 <APPStart+0x1d4>
	case RNS_VELOCITY4:
			sys.vel_flag = 1;
 800a0a2:	4a52      	ldr	r2, [pc, #328]	; (800a1ec <APPStart+0x1e0>)
 800a0a4:	7813      	ldrb	r3, [r2, #0]
 800a0a6:	f043 0304 	orr.w	r3, r3, #4
 800a0aa:	7013      	strb	r3, [r2, #0]
			break;
 800a0ac:	e098      	b.n	800a1e0 <APPStart+0x1d4>
	case RNS_PDC:
		break;

	case RNS_LF_DIST:

		if(Dir == DIR_FRONT){
 800a0ae:	4b50      	ldr	r3, [pc, #320]	; (800a1f0 <APPStart+0x1e4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b0e      	cmp	r3, #14
 800a0b4:	d105      	bne.n	800a0c2 <APPStart+0xb6>
			sys.lf_front = 1;
 800a0b6:	4a4d      	ldr	r2, [pc, #308]	; (800a1ec <APPStart+0x1e0>)
 800a0b8:	7813      	ldrb	r3, [r2, #0]
 800a0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0be:	7013      	strb	r3, [r2, #0]
 800a0c0:	e01c      	b.n	800a0fc <APPStart+0xf0>
		}else if(Dir == DIR_BACK){
 800a0c2:	4b4b      	ldr	r3, [pc, #300]	; (800a1f0 <APPStart+0x1e4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b0f      	cmp	r3, #15
 800a0c8:	d105      	bne.n	800a0d6 <APPStart+0xca>
			sys.lf_back = 1;
 800a0ca:	4a48      	ldr	r2, [pc, #288]	; (800a1ec <APPStart+0x1e0>)
 800a0cc:	7853      	ldrb	r3, [r2, #1]
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	7053      	strb	r3, [r2, #1]
 800a0d4:	e012      	b.n	800a0fc <APPStart+0xf0>
		}else if(Dir == DIR_LEFT){
 800a0d6:	4b46      	ldr	r3, [pc, #280]	; (800a1f0 <APPStart+0x1e4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b10      	cmp	r3, #16
 800a0dc:	d105      	bne.n	800a0ea <APPStart+0xde>
			sys.lf_left = 1;
 800a0de:	4a43      	ldr	r2, [pc, #268]	; (800a1ec <APPStart+0x1e0>)
 800a0e0:	7853      	ldrb	r3, [r2, #1]
 800a0e2:	f043 0302 	orr.w	r3, r3, #2
 800a0e6:	7053      	strb	r3, [r2, #1]
 800a0e8:	e008      	b.n	800a0fc <APPStart+0xf0>
		}else if(Dir == DIR_RIGHT){
 800a0ea:	4b41      	ldr	r3, [pc, #260]	; (800a1f0 <APPStart+0x1e4>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b11      	cmp	r3, #17
 800a0f0:	d104      	bne.n	800a0fc <APPStart+0xf0>
			sys.lf_right = 1;
 800a0f2:	4a3e      	ldr	r2, [pc, #248]	; (800a1ec <APPStart+0x1e0>)
 800a0f4:	7853      	ldrb	r3, [r2, #1]
 800a0f6:	f043 0304 	orr.w	r3, r3, #4
 800a0fa:	7053      	strb	r3, [r2, #1]
		}

		sys.lf_flag= 1;
 800a0fc:	4a3b      	ldr	r2, [pc, #236]	; (800a1ec <APPStart+0x1e0>)
 800a0fe:	7813      	ldrb	r3, [r2, #0]
 800a100:	f043 0308 	orr.w	r3, r3, #8
 800a104:	7013      	strb	r3, [r2, #0]
		sys.dist_flag = 1;
 800a106:	4a39      	ldr	r2, [pc, #228]	; (800a1ec <APPStart+0x1e0>)
 800a108:	7813      	ldrb	r3, [r2, #0]
 800a10a:	f043 0320 	orr.w	r3, r3, #32
 800a10e:	7013      	strb	r3, [r2, #0]
		sys.vel_flag = 1;
 800a110:	4a36      	ldr	r2, [pc, #216]	; (800a1ec <APPStart+0x1e0>)
 800a112:	7813      	ldrb	r3, [r2, #0]
 800a114:	f043 0304 	orr.w	r3, r3, #4
 800a118:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 800a11a:	4a34      	ldr	r2, [pc, #208]	; (800a1ec <APPStart+0x1e0>)
 800a11c:	7813      	ldrb	r3, [r2, #0]
 800a11e:	f043 0302 	orr.w	r3, r3, #2
 800a122:	7013      	strb	r3, [r2, #0]

		break;
 800a124:	e05c      	b.n	800a1e0 <APPStart+0x1d4>

	case RNS_LF_JUNC:

		if(Dir == DIR_FRONT){
 800a126:	4b32      	ldr	r3, [pc, #200]	; (800a1f0 <APPStart+0x1e4>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b0e      	cmp	r3, #14
 800a12c:	d105      	bne.n	800a13a <APPStart+0x12e>
			sys.lf_front = 1;
 800a12e:	4a2f      	ldr	r2, [pc, #188]	; (800a1ec <APPStart+0x1e0>)
 800a130:	7813      	ldrb	r3, [r2, #0]
 800a132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a136:	7013      	strb	r3, [r2, #0]
 800a138:	e01c      	b.n	800a174 <APPStart+0x168>
		}else if(Dir == DIR_BACK){
 800a13a:	4b2d      	ldr	r3, [pc, #180]	; (800a1f0 <APPStart+0x1e4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b0f      	cmp	r3, #15
 800a140:	d105      	bne.n	800a14e <APPStart+0x142>
			sys.lf_back = 1;
 800a142:	4a2a      	ldr	r2, [pc, #168]	; (800a1ec <APPStart+0x1e0>)
 800a144:	7853      	ldrb	r3, [r2, #1]
 800a146:	f043 0301 	orr.w	r3, r3, #1
 800a14a:	7053      	strb	r3, [r2, #1]
 800a14c:	e012      	b.n	800a174 <APPStart+0x168>
		}else if(Dir == DIR_LEFT){
 800a14e:	4b28      	ldr	r3, [pc, #160]	; (800a1f0 <APPStart+0x1e4>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b10      	cmp	r3, #16
 800a154:	d105      	bne.n	800a162 <APPStart+0x156>
			sys.lf_left = 1;
 800a156:	4a25      	ldr	r2, [pc, #148]	; (800a1ec <APPStart+0x1e0>)
 800a158:	7853      	ldrb	r3, [r2, #1]
 800a15a:	f043 0302 	orr.w	r3, r3, #2
 800a15e:	7053      	strb	r3, [r2, #1]
 800a160:	e008      	b.n	800a174 <APPStart+0x168>
		}else if(Dir == DIR_RIGHT){
 800a162:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <APPStart+0x1e4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b11      	cmp	r3, #17
 800a168:	d104      	bne.n	800a174 <APPStart+0x168>
			sys.lf_right = 1;
 800a16a:	4a20      	ldr	r2, [pc, #128]	; (800a1ec <APPStart+0x1e0>)
 800a16c:	7853      	ldrb	r3, [r2, #1]
 800a16e:	f043 0304 	orr.w	r3, r3, #4
 800a172:	7053      	strb	r3, [r2, #1]
		}
		sys.lf_flag= 1;
 800a174:	4a1d      	ldr	r2, [pc, #116]	; (800a1ec <APPStart+0x1e0>)
 800a176:	7813      	ldrb	r3, [r2, #0]
 800a178:	f043 0308 	orr.w	r3, r3, #8
 800a17c:	7013      	strb	r3, [r2, #0]
		sys.lf_junc = 1;
 800a17e:	4a1b      	ldr	r2, [pc, #108]	; (800a1ec <APPStart+0x1e0>)
 800a180:	7813      	ldrb	r3, [r2, #0]
 800a182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a186:	7013      	strb	r3, [r2, #0]
		sys.vel_flag = 1;
 800a188:	4a18      	ldr	r2, [pc, #96]	; (800a1ec <APPStart+0x1e0>)
 800a18a:	7813      	ldrb	r3, [r2, #0]
 800a18c:	f043 0304 	orr.w	r3, r3, #4
 800a190:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 800a192:	4a16      	ldr	r2, [pc, #88]	; (800a1ec <APPStart+0x1e0>)
 800a194:	7813      	ldrb	r3, [r2, #0]
 800a196:	f043 0302 	orr.w	r3, r3, #2
 800a19a:	7013      	strb	r3, [r2, #0]
		break;
 800a19c:	e020      	b.n	800a1e0 <APPStart+0x1d4>

	case RNS_ROTATE:
		sys.rotate = 1;
 800a19e:	4a13      	ldr	r2, [pc, #76]	; (800a1ec <APPStart+0x1e0>)
 800a1a0:	7853      	ldrb	r3, [r2, #1]
 800a1a2:	f043 0308 	orr.w	r3, r3, #8
 800a1a6:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 800a1a8:	4a10      	ldr	r2, [pc, #64]	; (800a1ec <APPStart+0x1e0>)
 800a1aa:	7813      	ldrb	r3, [r2, #0]
 800a1ac:	f043 0304 	orr.w	r3, r3, #4
 800a1b0:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 800a1b2:	4a0e      	ldr	r2, [pc, #56]	; (800a1ec <APPStart+0x1e0>)
 800a1b4:	7813      	ldrb	r3, [r2, #0]
 800a1b6:	f043 0302 	orr.w	r3, r3, #2
 800a1ba:	7013      	strb	r3, [r2, #0]
		break;
 800a1bc:	e010      	b.n	800a1e0 <APPStart+0x1d4>

	case RNS_PPStart:
		sys.odnstart_flag = 1;
 800a1be:	4a0b      	ldr	r2, [pc, #44]	; (800a1ec <APPStart+0x1e0>)
 800a1c0:	7853      	ldrb	r3, [r2, #1]
 800a1c2:	f043 0310 	orr.w	r3, r3, #16
 800a1c6:	7053      	strb	r3, [r2, #1]
		sys.vel_flag = 1;
 800a1c8:	4a08      	ldr	r2, [pc, #32]	; (800a1ec <APPStart+0x1e0>)
 800a1ca:	7813      	ldrb	r3, [r2, #0]
 800a1cc:	f043 0304 	orr.w	r3, r3, #4
 800a1d0:	7013      	strb	r3, [r2, #0]
		sys.busy_flag = 1;
 800a1d2:	4a06      	ldr	r2, [pc, #24]	; (800a1ec <APPStart+0x1e0>)
 800a1d4:	7813      	ldrb	r3, [r2, #0]
 800a1d6:	f043 0302 	orr.w	r3, r3, #2
 800a1da:	7013      	strb	r3, [r2, #0]
		break;
 800a1dc:	e000      	b.n	800a1e0 <APPStart+0x1d4>

	default:
		break;
 800a1de:	bf00      	nop
	}
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	20006db0 	.word	0x20006db0
 800a1f0:	20007b8c 	.word	0x20007b8c

0800a1f4 <APPStop>:

void APPStop(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
	sys.flag = 0;	/* Reset system flag */
 800a1f8:	4b34      	ldr	r3, [pc, #208]	; (800a2cc <APPStop+0xd8>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	801a      	strh	r2, [r3, #0]

	PIDDelayInit(&fleft_vel);
 800a1fe:	4834      	ldr	r0, [pc, #208]	; (800a2d0 <APPStop+0xdc>)
 800a200:	f7fa fc45 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&fright_vel);
 800a204:	4833      	ldr	r0, [pc, #204]	; (800a2d4 <APPStop+0xe0>)
 800a206:	f7fa fc42 	bl	8004a8e <PIDDelayInit>

	PIDDelayInit(&bleft_vel);
 800a20a:	4833      	ldr	r0, [pc, #204]	; (800a2d8 <APPStop+0xe4>)
 800a20c:	f7fa fc3f 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&bright_vel);
 800a210:	4832      	ldr	r0, [pc, #200]	; (800a2dc <APPStop+0xe8>)
 800a212:	f7fa fc3c 	bl	8004a8e <PIDDelayInit>

	fFLeftVelR = 0.0;
 800a216:	4b32      	ldr	r3, [pc, #200]	; (800a2e0 <APPStop+0xec>)
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	601a      	str	r2, [r3, #0]
	fFLeftVelU = 0.0;
 800a21e:	4b31      	ldr	r3, [pc, #196]	; (800a2e4 <APPStop+0xf0>)
 800a220:	f04f 0200 	mov.w	r2, #0
 800a224:	601a      	str	r2, [r3, #0]

	fFRightVelR = 0.0;
 800a226:	4b30      	ldr	r3, [pc, #192]	; (800a2e8 <APPStop+0xf4>)
 800a228:	f04f 0200 	mov.w	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
	fFRightVelU = 0.0;
 800a22e:	4b2f      	ldr	r3, [pc, #188]	; (800a2ec <APPStop+0xf8>)
 800a230:	f04f 0200 	mov.w	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

	fBLeftVelR = 0.0;
 800a236:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <APPStop+0xfc>)
 800a238:	f04f 0200 	mov.w	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
	fBLeftVelU = 0.0;
 800a23e:	4b2d      	ldr	r3, [pc, #180]	; (800a2f4 <APPStop+0x100>)
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	601a      	str	r2, [r3, #0]

	fBRightVelR = 0.0;
 800a246:	4b2c      	ldr	r3, [pc, #176]	; (800a2f8 <APPStop+0x104>)
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
	fBRightVelU = 0.0;
 800a24e:	4b2b      	ldr	r3, [pc, #172]	; (800a2fc <APPStop+0x108>)
 800a250:	f04f 0200 	mov.w	r2, #0
 800a254:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&lf_dist);
 800a256:	482a      	ldr	r0, [pc, #168]	; (800a300 <APPStop+0x10c>)
 800a258:	f7fa fc19 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&lf_rotate);
 800a25c:	4829      	ldr	r0, [pc, #164]	; (800a304 <APPStop+0x110>)
 800a25e:	f7fa fc16 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&lf_fwd);
 800a262:	4829      	ldr	r0, [pc, #164]	; (800a308 <APPStop+0x114>)
 800a264:	f7fa fc13 	bl	8004a8e <PIDDelayInit>
	PIDDelayInit(&imu_rotate);
 800a268:	4828      	ldr	r0, [pc, #160]	; (800a30c <APPStop+0x118>)
 800a26a:	f7fa fc10 	bl	8004a8e <PIDDelayInit>

	fLFDistErr = 0;
 800a26e:	4b28      	ldr	r3, [pc, #160]	; (800a310 <APPStop+0x11c>)
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
	fLFDistU = 0;
 800a276:	4b27      	ldr	r3, [pc, #156]	; (800a314 <APPStop+0x120>)
 800a278:	f04f 0200 	mov.w	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]

	fRotateErr = 0;
 800a27e:	4b26      	ldr	r3, [pc, #152]	; (800a318 <APPStop+0x124>)
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
	fRotateU = 0;
 800a286:	4b25      	ldr	r3, [pc, #148]	; (800a31c <APPStop+0x128>)
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]

	fFwdErr = 0;
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <APPStop+0x12c>)
 800a290:	f04f 0200 	mov.w	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
	fFwdU = 0;
 800a296:	4b23      	ldr	r3, [pc, #140]	; (800a324 <APPStop+0x130>)
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]

	fAngleErr = 0;
 800a29e:	4b22      	ldr	r3, [pc, #136]	; (800a328 <APPStop+0x134>)
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]
	fAngleU = 0;
 800a2a6:	4b21      	ldr	r3, [pc, #132]	; (800a32c <APPStop+0x138>)
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]

	StopBDC(&BDC1);
 800a2ae:	4820      	ldr	r0, [pc, #128]	; (800a330 <APPStop+0x13c>)
 800a2b0:	f7f7 f947 	bl	8001542 <StopBDC>
	StopBDC(&BDC2);
 800a2b4:	481f      	ldr	r0, [pc, #124]	; (800a334 <APPStop+0x140>)
 800a2b6:	f7f7 f944 	bl	8001542 <StopBDC>
	StopBDC(&BDC3);
 800a2ba:	481f      	ldr	r0, [pc, #124]	; (800a338 <APPStop+0x144>)
 800a2bc:	f7f7 f941 	bl	8001542 <StopBDC>
	StopBDC(&BDC4);
 800a2c0:	481e      	ldr	r0, [pc, #120]	; (800a33c <APPStop+0x148>)
 800a2c2:	f7f7 f93e 	bl	8001542 <StopBDC>

}
 800a2c6:	bf00      	nop
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20006db0 	.word	0x20006db0
 800a2d0:	20006e90 	.word	0x20006e90
 800a2d4:	20006dc4 	.word	0x20006dc4
 800a2d8:	200066d0 	.word	0x200066d0
 800a2dc:	20007f5c 	.word	0x20007f5c
 800a2e0:	20006814 	.word	0x20006814
 800a2e4:	20006e8c 	.word	0x20006e8c
 800a2e8:	20007d38 	.word	0x20007d38
 800a2ec:	20006688 	.word	0x20006688
 800a2f0:	200081c4 	.word	0x200081c4
 800a2f4:	20006744 	.word	0x20006744
 800a2f8:	20007cc4 	.word	0x20007cc4
 800a2fc:	200065b4 	.word	0x200065b4
 800a300:	20007fbc 	.word	0x20007fbc
 800a304:	20007b9c 	.word	0x20007b9c
 800a308:	20007cd8 	.word	0x20007cd8
 800a30c:	200065c8 	.word	0x200065c8
 800a310:	200073e0 	.word	0x200073e0
 800a314:	20007a5c 	.word	0x20007a5c
 800a318:	20006da0 	.word	0x20006da0
 800a31c:	20007bf0 	.word	0x20007bf0
 800a320:	20006860 	.word	0x20006860
 800a324:	200080c4 	.word	0x200080c4
 800a328:	20007c20 	.word	0x20007c20
 800a32c:	20006730 	.word	0x20006730
 800a330:	20008130 	.word	0x20008130
 800a334:	20006e38 	.word	0x20006e38
 800a338:	20006824 	.word	0x20006824
 800a33c:	20007b5c 	.word	0x20007b5c

0800a340 <APPBusy>:

unsigned char APPBusy(ins_t *pins)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	switch (pins->instruction){
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b11      	cmp	r3, #17
 800a34e:	d009      	beq.n	800a364 <APPBusy+0x24>
 800a350:	2b11      	cmp	r3, #17
 800a352:	dc14      	bgt.n	800a37e <APPBusy+0x3e>
 800a354:	2b0e      	cmp	r3, #14
 800a356:	dc02      	bgt.n	800a35e <APPBusy+0x1e>
 800a358:	2b0d      	cmp	r3, #13
 800a35a:	da03      	bge.n	800a364 <APPBusy+0x24>

		return pp.pp_start;
		break;

	default:
		break;
 800a35c:	e00f      	b.n	800a37e <APPBusy+0x3e>
	switch (pins->instruction){
 800a35e:	2b10      	cmp	r3, #16
 800a360:	d006      	beq.n	800a370 <APPBusy+0x30>
		break;
 800a362:	e00c      	b.n	800a37e <APPBusy+0x3e>
		return sys.busy_flag;
 800a364:	4b0a      	ldr	r3, [pc, #40]	; (800a390 <APPBusy+0x50>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	e008      	b.n	800a382 <APPBusy+0x42>
		return pp.pp_start;
 800a370:	4b08      	ldr	r3, [pc, #32]	; (800a394 <APPBusy+0x54>)
 800a372:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800a376:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	e001      	b.n	800a382 <APPBusy+0x42>
		break;
 800a37e:	bf00      	nop
	}

	return 0;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	20006db0 	.word	0x20006db0
 800a394:	20006864 	.word	0x20006864

0800a398 <APPEnquire>:

void APPEnquire(enq_t *penq)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	switch (penq->enquiry){
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	3b56      	subs	r3, #86	; 0x56
 800a3a6:	2b0b      	cmp	r3, #11
 800a3a8:	f200 8122 	bhi.w	800a5f0 <APPEnquire+0x258>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <APPEnquire+0x1c>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3e5 	.word	0x0800a3e5
 800a3b8:	0800a407 	.word	0x0800a407
 800a3bc:	0800a429 	.word	0x0800a429
 800a3c0:	0800a5f1 	.word	0x0800a5f1
 800a3c4:	0800a44b 	.word	0x0800a44b
 800a3c8:	0800a471 	.word	0x0800a471
 800a3cc:	0800a4f5 	.word	0x0800a4f5
 800a3d0:	0800a577 	.word	0x0800a577
 800a3d4:	0800a5f1 	.word	0x0800a5f1
 800a3d8:	0800a58b 	.word	0x0800a58b
 800a3dc:	0800a5ad 	.word	0x0800a5ad
 800a3e0:	0800a5d7 	.word	0x0800a5d7

	case RNS_POS_BOTH :
		penq->enq_buffer[0].data = fFLeftPos;
 800a3e4:	4b84      	ldr	r3, [pc, #528]	; (800a5f8 <APPEnquire+0x260>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fFRightPos;
 800a3ec:	4b83      	ldr	r3, [pc, #524]	; (800a5fc <APPEnquire+0x264>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fBLeftPos;
 800a3f4:	4b82      	ldr	r3, [pc, #520]	; (800a600 <APPEnquire+0x268>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = fBRightPos;
 800a3fc:	4b81      	ldr	r3, [pc, #516]	; (800a604 <APPEnquire+0x26c>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	611a      	str	r2, [r3, #16]
		break;
 800a404:	e0f4      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_VEL_BOTH :
		penq->enq_buffer[0].data = fFLeftVel;
 800a406:	4b80      	ldr	r3, [pc, #512]	; (800a608 <APPEnquire+0x270>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fFRightVel;
 800a40e:	4b7f      	ldr	r3, [pc, #508]	; (800a60c <APPEnquire+0x274>)
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fBLeftVel;
 800a416:	4b7e      	ldr	r3, [pc, #504]	; (800a610 <APPEnquire+0x278>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = fBRightVel;
 800a41e:	4b7d      	ldr	r3, [pc, #500]	; (800a614 <APPEnquire+0x27c>)
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	611a      	str	r2, [r3, #16]
		break;
 800a426:	e0e3      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_PDC_BOTH :
		penq->enq_buffer[0].data = fFLeftVelU;
 800a428:	4b7b      	ldr	r3, [pc, #492]	; (800a618 <APPEnquire+0x280>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fFRightVelU;
 800a430:	4b7a      	ldr	r3, [pc, #488]	; (800a61c <APPEnquire+0x284>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fBLeftVelU;
 800a438:	4b79      	ldr	r3, [pc, #484]	; (800a620 <APPEnquire+0x288>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = fBRightVelU;
 800a440:	4b78      	ldr	r3, [pc, #480]	; (800a624 <APPEnquire+0x28c>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	611a      	str	r2, [r3, #16]
		break;
 800a448:	e0d2      	b.n	800a5f0 <APPEnquire+0x258>
//		penq->enq_buffer[0].data = pp.real_z_rad;
//		penq->enq_buffer[1].data = pp.fWVel;
//		break;

	case RNS_X_Y_RAW:
		penq->enq_buffer[0].data = (float)BIOS_QEI2.count;
 800a44a:	4b77      	ldr	r3, [pc, #476]	; (800a628 <APPEnquire+0x290>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	edc3 7a01 	vstr	s15, [r3, #4]
		penq->enq_buffer[1].data = (float)BIOS_QEI5.count;
 800a45c:	4b73      	ldr	r3, [pc, #460]	; (800a62c <APPEnquire+0x294>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	ee07 3a90 	vmov	s15, r3
 800a464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 800a46e:	e0bf      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_X_Y_IMU_LSA:
		LSA_read(LSA_FRONT);
 800a470:	4b6f      	ldr	r3, [pc, #444]	; (800a630 <APPEnquire+0x298>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f7f9 fdb9 	bl	8003fec <LSA_read>
		LsaData.lsa_F = LSA_FRONT->LSA_bits.Byte;
 800a47a:	4b6d      	ldr	r3, [pc, #436]	; (800a630 <APPEnquire+0x298>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800a482:	4b6c      	ldr	r3, [pc, #432]	; (800a634 <APPEnquire+0x29c>)
 800a484:	701a      	strb	r2, [r3, #0]
		LSA_read(LSA_BACK);
 800a486:	4b6c      	ldr	r3, [pc, #432]	; (800a638 <APPEnquire+0x2a0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7f9 fdae 	bl	8003fec <LSA_read>
		LsaData.lsa_B = LSA_BACK->LSA_bits.Byte;
 800a490:	4b69      	ldr	r3, [pc, #420]	; (800a638 <APPEnquire+0x2a0>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800a498:	4b66      	ldr	r3, [pc, #408]	; (800a634 <APPEnquire+0x29c>)
 800a49a:	705a      	strb	r2, [r3, #1]
		LSA_read(LSA_LEFT);
 800a49c:	4b67      	ldr	r3, [pc, #412]	; (800a63c <APPEnquire+0x2a4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7f9 fda3 	bl	8003fec <LSA_read>
		LsaData.lsa_L = LSA_LEFT->LSA_bits.Byte;
 800a4a6:	4b65      	ldr	r3, [pc, #404]	; (800a63c <APPEnquire+0x2a4>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800a4ae:	4b61      	ldr	r3, [pc, #388]	; (800a634 <APPEnquire+0x29c>)
 800a4b0:	709a      	strb	r2, [r3, #2]
		LSA_read(LSA_RIGHT);
 800a4b2:	4b63      	ldr	r3, [pc, #396]	; (800a640 <APPEnquire+0x2a8>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f9 fd98 	bl	8003fec <LSA_read>
		LsaData.lsa_R = LSA_RIGHT->LSA_bits.Byte;
 800a4bc:	4b60      	ldr	r3, [pc, #384]	; (800a640 <APPEnquire+0x2a8>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800a4c4:	4b5b      	ldr	r3, [pc, #364]	; (800a634 <APPEnquire+0x29c>)
 800a4c6:	70da      	strb	r2, [r3, #3]
		penq->enq_buffer[0].data = fyaw;
 800a4c8:	4b5e      	ldr	r3, [pc, #376]	; (800a644 <APPEnquire+0x2ac>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fXPos;
 800a4d0:	4b5d      	ldr	r3, [pc, #372]	; (800a648 <APPEnquire+0x2b0>)
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fYPos;
 800a4d8:	4b5c      	ldr	r3, [pc, #368]	; (800a64c <APPEnquire+0x2b4>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = LsaData.LSA_ALL;
 800a4e0:	4b54      	ldr	r3, [pc, #336]	; (800a634 <APPEnquire+0x29c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	ee07 3a90 	vmov	s15, r3
 800a4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 800a4f2:	e07d      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_LSA_ALL:
		LSA_read(LSA_FRONT);
 800a4f4:	4b4e      	ldr	r3, [pc, #312]	; (800a630 <APPEnquire+0x298>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7f9 fd77 	bl	8003fec <LSA_read>
		LSA_read(LSA_BACK);
 800a4fe:	4b4e      	ldr	r3, [pc, #312]	; (800a638 <APPEnquire+0x2a0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f7f9 fd72 	bl	8003fec <LSA_read>
		LSA_read(LSA_LEFT);
 800a508:	4b4c      	ldr	r3, [pc, #304]	; (800a63c <APPEnquire+0x2a4>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f9 fd6d 	bl	8003fec <LSA_read>
		LSA_read(LSA_RIGHT);
 800a512:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <APPEnquire+0x2a8>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4618      	mov	r0, r3
 800a518:	f7f9 fd68 	bl	8003fec <LSA_read>
		penq->enq_buffer[0].data = (float)LSA_FRONT->LSA_bits.Byte;
 800a51c:	4b44      	ldr	r3, [pc, #272]	; (800a630 <APPEnquire+0x298>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a524:	ee07 3a90 	vmov	s15, r3
 800a528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	edc3 7a01 	vstr	s15, [r3, #4]
		penq->enq_buffer[1].data = (float)LSA_BACK->LSA_bits.Byte;
 800a532:	4b41      	ldr	r3, [pc, #260]	; (800a638 <APPEnquire+0x2a0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a53a:	ee07 3a90 	vmov	s15, r3
 800a53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	edc3 7a02 	vstr	s15, [r3, #8]
		penq->enq_buffer[2].data = (float)LSA_LEFT->LSA_bits.Byte;
 800a548:	4b3c      	ldr	r3, [pc, #240]	; (800a63c <APPEnquire+0x2a4>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a550:	ee07 3a90 	vmov	s15, r3
 800a554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	edc3 7a03 	vstr	s15, [r3, #12]
		penq->enq_buffer[2].data = (float)LSA_RIGHT->LSA_bits.Byte;
 800a55e:	4b38      	ldr	r3, [pc, #224]	; (800a640 <APPEnquire+0x2a8>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a566:	ee07 3a90 	vmov	s15, r3
 800a56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 800a574:	e03c      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_LF_JUNCTION:
		penq->enq_buffer[0].data = (float)junction_count;
 800a576:	4b36      	ldr	r3, [pc, #216]	; (800a650 <APPEnquire+0x2b8>)
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	edc3 7a01 	vstr	s15, [r3, #4]
		break;
 800a588:	e032      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_COORDINATE_X_Y_Z_Zrad:
		penq->enq_buffer[0].data = pp.real_x;	//PathPlan.point3_p1.p.x;
 800a58a:	4b32      	ldr	r3, [pc, #200]	; (800a654 <APPEnquire+0x2bc>)
 800a58c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = pp.real_y;	//PathPlan.point3_p1.p.y;
 800a592:	4b30      	ldr	r3, [pc, #192]	; (800a654 <APPEnquire+0x2bc>)
 800a594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = pp.real_z;	//PathPlan.point3_p1.p.z;
 800a59a:	4b2e      	ldr	r3, [pc, #184]	; (800a654 <APPEnquire+0x2bc>)
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = pp.real_z_rad;
 800a5a2:	4b2c      	ldr	r3, [pc, #176]	; (800a654 <APPEnquire+0x2bc>)
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	611a      	str	r2, [r3, #16]
		break;
 800a5aa:	e021      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_PathPlan_VELOCITY:
		penq->enq_buffer[0].data = pp.v2;
 800a5ac:	4b29      	ldr	r3, [pc, #164]	; (800a654 <APPEnquire+0x2bc>)
 800a5ae:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = pp.v1;
 800a5b6:	4b27      	ldr	r3, [pc, #156]	; (800a654 <APPEnquire+0x2bc>)
 800a5b8:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = pp.v3;
 800a5c0:	4b24      	ldr	r3, [pc, #144]	; (800a654 <APPEnquire+0x2bc>)
 800a5c2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60da      	str	r2, [r3, #12]
		penq->enq_buffer[3].data = pp.v4;
 800a5ca:	4b22      	ldr	r3, [pc, #136]	; (800a654 <APPEnquire+0x2bc>)
 800a5cc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	611a      	str	r2, [r3, #16]
		break;
 800a5d4:	e00c      	b.n	800a5f0 <APPEnquire+0x258>

	case RNS_XYZ_RAW:
		penq->enq_buffer[0].data = fXPos;
 800a5d6:	4b1c      	ldr	r3, [pc, #112]	; (800a648 <APPEnquire+0x2b0>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	605a      	str	r2, [r3, #4]
		penq->enq_buffer[1].data = fYPos;
 800a5de:	4b1b      	ldr	r3, [pc, #108]	; (800a64c <APPEnquire+0x2b4>)
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	609a      	str	r2, [r3, #8]
		penq->enq_buffer[2].data = fyaw;
 800a5e6:	4b17      	ldr	r3, [pc, #92]	; (800a644 <APPEnquire+0x2ac>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60da      	str	r2, [r3, #12]
		break;
 800a5ee:	bf00      	nop

	}

}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	200080c8 	.word	0x200080c8
 800a5fc:	20006f4c 	.word	0x20006f4c
 800a600:	2000812c 	.word	0x2000812c
 800a604:	20006db8 	.word	0x20006db8
 800a608:	2000809c 	.word	0x2000809c
 800a60c:	20006f54 	.word	0x20006f54
 800a610:	20006e1c 	.word	0x20006e1c
 800a614:	20007450 	.word	0x20007450
 800a618:	20006e8c 	.word	0x20006e8c
 800a61c:	20006688 	.word	0x20006688
 800a620:	20006744 	.word	0x20006744
 800a624:	200065b4 	.word	0x200065b4
 800a628:	20005668 	.word	0x20005668
 800a62c:	20005684 	.word	0x20005684
 800a630:	20006e24 	.word	0x20006e24
 800a634:	20008088 	.word	0x20008088
 800a638:	20007b94 	.word	0x20007b94
 800a63c:	20007454 	.word	0x20007454
 800a640:	20007c18 	.word	0x20007c18
 800a644:	20007ca0 	.word	0x20007ca0
 800a648:	20007da4 	.word	0x20007da4
 800a64c:	20007c00 	.word	0x20007c00
 800a650:	200065b0 	.word	0x200065b0
 800a654:	20006864 	.word	0x20006864

0800a658 <Initialize>:
#include "include.h"

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a65e:	f004 fedf 	bl	800f420 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800a662:	f7f8 fd57 	bl	8003114 <SystemClock_Config>

	/* Initialize all configured peripherals */

	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a666:	2301      	movs	r3, #1
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	2302      	movs	r3, #2
 800a66c:	2201      	movs	r2, #1
 800a66e:	2120      	movs	r1, #32
 800a670:	4880      	ldr	r0, [pc, #512]	; (800a874 <Initialize+0x21c>)
 800a672:	f7f6 ffc3 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a676:	2301      	movs	r3, #1
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	2302      	movs	r3, #2
 800a67c:	2201      	movs	r2, #1
 800a67e:	2120      	movs	r1, #32
 800a680:	487d      	ldr	r0, [pc, #500]	; (800a878 <Initialize+0x220>)
 800a682:	f7f6 ffbb 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a686:	2301      	movs	r3, #1
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	2302      	movs	r3, #2
 800a68c:	2201      	movs	r2, #1
 800a68e:	2180      	movs	r1, #128	; 0x80
 800a690:	487a      	ldr	r0, [pc, #488]	; (800a87c <Initialize+0x224>)
 800a692:	f7f6 ffb3 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED4_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a696:	2301      	movs	r3, #1
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	2302      	movs	r3, #2
 800a69c:	2201      	movs	r2, #1
 800a69e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6a2:	4876      	ldr	r0, [pc, #472]	; (800a87c <Initialize+0x224>)
 800a6a4:	f7f6 ffaa 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (LED5_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6b4:	4872      	ldr	r0, [pc, #456]	; (800a880 <Initialize+0x228>)
 800a6b6:	f7f6 ffa1 	bl	80015fc <GPIOPinsInit>

	GPIOPinsInit (BUTTON1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	2302      	movs	r3, #2
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2110      	movs	r1, #16
 800a6c4:	486c      	ldr	r0, [pc, #432]	; (800a878 <Initialize+0x220>)
 800a6c6:	f7f6 ff99 	bl	80015fc <GPIOPinsInit>
	GPIOPinsInit (BUTTON2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6d6:	4869      	ldr	r0, [pc, #420]	; (800a87c <Initialize+0x224>)
 800a6d8:	f7f6 ff90 	bl	80015fc <GPIOPinsInit>

	LED1 = 1;
 800a6dc:	4a69      	ldr	r2, [pc, #420]	; (800a884 <Initialize+0x22c>)
 800a6de:	7813      	ldrb	r3, [r2, #0]
 800a6e0:	f043 0320 	orr.w	r3, r3, #32
 800a6e4:	7013      	strb	r3, [r2, #0]
	LED2 = 1;
 800a6e6:	4a68      	ldr	r2, [pc, #416]	; (800a888 <Initialize+0x230>)
 800a6e8:	7813      	ldrb	r3, [r2, #0]
 800a6ea:	f043 0320 	orr.w	r3, r3, #32
 800a6ee:	7013      	strb	r3, [r2, #0]
	LED3 = 1;
 800a6f0:	4a66      	ldr	r2, [pc, #408]	; (800a88c <Initialize+0x234>)
 800a6f2:	7813      	ldrb	r3, [r2, #0]
 800a6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f8:	7013      	strb	r3, [r2, #0]
	LED4 = 1;
 800a6fa:	4a64      	ldr	r2, [pc, #400]	; (800a88c <Initialize+0x234>)
 800a6fc:	7853      	ldrb	r3, [r2, #1]
 800a6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a702:	7053      	strb	r3, [r2, #1]
	LED5 = 1;
 800a704:	4a62      	ldr	r2, [pc, #392]	; (800a890 <Initialize+0x238>)
 800a706:	7853      	ldrb	r3, [r2, #1]
 800a708:	f043 0304 	orr.w	r3, r3, #4
 800a70c:	7053      	strb	r3, [r2, #1]

	SHIFTREGInit (&SR, NO_CASCADE, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800a70e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a712:	9303      	str	r3, [sp, #12]
 800a714:	4b58      	ldr	r3, [pc, #352]	; (800a878 <Initialize+0x220>)
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	4b55      	ldr	r3, [pc, #340]	; (800a874 <Initialize+0x21c>)
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a726:	4a53      	ldr	r2, [pc, #332]	; (800a874 <Initialize+0x21c>)
 800a728:	2100      	movs	r1, #0
 800a72a:	485a      	ldr	r0, [pc, #360]	; (800a894 <Initialize+0x23c>)
 800a72c:	f7f7 fe16 	bl	800235c <SHIFTREGInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,13,5,0);
 800a730:	2300      	movs	r3, #0
 800a732:	9303      	str	r3, [sp, #12]
 800a734:	2305      	movs	r3, #5
 800a736:	9302      	str	r3, [sp, #8]
 800a738:	230d      	movs	r3, #13
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	2300      	movs	r3, #0
 800a742:	2200      	movs	r2, #0
 800a744:	2104      	movs	r1, #4
 800a746:	4854      	ldr	r0, [pc, #336]	; (800a898 <Initialize+0x240>)
 800a748:	f7f8 ffec 	bl	8003724 <CANxInit>

	QEIInit(&htim1,6,2);//C
 800a74c:	2202      	movs	r2, #2
 800a74e:	2106      	movs	r1, #6
 800a750:	4852      	ldr	r0, [pc, #328]	; (800a89c <Initialize+0x244>)
 800a752:	f7f7 fabf 	bl	8001cd4 <QEIInit>
	QEIInit(&htim2,7,0);//X
 800a756:	2200      	movs	r2, #0
 800a758:	2107      	movs	r1, #7
 800a75a:	4851      	ldr	r0, [pc, #324]	; (800a8a0 <Initialize+0x248>)
 800a75c:	f7f7 faba 	bl	8001cd4 <QEIInit>
	QEIInit(&htim3,6,3);//D
 800a760:	2203      	movs	r2, #3
 800a762:	2106      	movs	r1, #6
 800a764:	484f      	ldr	r0, [pc, #316]	; (800a8a4 <Initialize+0x24c>)
 800a766:	f7f7 fab5 	bl	8001cd4 <QEIInit>
	QEIInit(&htim4,6,1);//B
 800a76a:	2201      	movs	r2, #1
 800a76c:	2106      	movs	r1, #6
 800a76e:	484e      	ldr	r0, [pc, #312]	; (800a8a8 <Initialize+0x250>)
 800a770:	f7f7 fab0 	bl	8001cd4 <QEIInit>
	QEIInit(&htim5,7,1);//Y
 800a774:	2201      	movs	r2, #1
 800a776:	2107      	movs	r1, #7
 800a778:	484c      	ldr	r0, [pc, #304]	; (800a8ac <Initialize+0x254>)
 800a77a:	f7f7 faab 	bl	8001cd4 <QEIInit>
	QEIInit(&htim8,6,0);//A
 800a77e:	2200      	movs	r2, #0
 800a780:	2106      	movs	r1, #6
 800a782:	484b      	ldr	r0, [pc, #300]	; (800a8b0 <Initialize+0x258>)
 800a784:	f7f7 faa6 	bl	8001cd4 <QEIInit>

//	CANxInit(&hcan1,3,CAN_FILTER_FIFO0,0,0,13,5,0);
	//	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,27,5,2);

	UARTInit(&huart2, 115200, ENABLE, 5,0);
 800a788:	2300      	movs	r3, #0
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	2305      	movs	r3, #5
 800a78e:	2201      	movs	r2, #1
 800a790:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a794:	4847      	ldr	r0, [pc, #284]	; (800a8b4 <Initialize+0x25c>)
 800a796:	f7f8 fe39 	bl	800340c <UARTInit>
	UARTInit(&huart5, 115200, ENABLE,5,0);
 800a79a:	2300      	movs	r3, #0
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	2305      	movs	r3, #5
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800a7a6:	4844      	ldr	r0, [pc, #272]	; (800a8b8 <Initialize+0x260>)
 800a7a8:	f7f8 fe30 	bl	800340c <UARTInit>
	UARTx_DMA_Tx_Init(&huart5, &hdma_uart5_tx, 5, 0);
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	2205      	movs	r2, #5
 800a7b0:	4942      	ldr	r1, [pc, #264]	; (800a8bc <Initialize+0x264>)
 800a7b2:	4841      	ldr	r0, [pc, #260]	; (800a8b8 <Initialize+0x260>)
 800a7b4:	f7f8 fed2 	bl	800355c <UARTx_DMA_Tx_Init>

	PWMTimeBaseInit(&htim9, 20000, 4);
 800a7b8:	2204      	movs	r2, #4
 800a7ba:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a7be:	4840      	ldr	r0, [pc, #256]	; (800a8c0 <Initialize+0x268>)
 800a7c0:	f7f7 f816 	bl	80017f0 <PWMTimeBaseInit>
	PWMTimeBaseInit(&htim12, 20000, 2);
 800a7c4:	2202      	movs	r2, #2
 800a7c6:	f644 6120 	movw	r1, #20000	; 0x4e20
 800a7ca:	483e      	ldr	r0, [pc, #248]	; (800a8c4 <Initialize+0x26c>)
 800a7cc:	f7f7 f810 	bl	80017f0 <PWMTimeBaseInit>

	PWMChannelConfig(&htim9, TIM_CHANNEL_1, PWM_TIM9_CH1_PIN);
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	4a28      	ldr	r2, [pc, #160]	; (800a874 <Initialize+0x21c>)
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	483a      	ldr	r0, [pc, #232]	; (800a8c0 <Initialize+0x268>)
 800a7d8:	f7f7 f8f0 	bl	80019bc <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, PWM_TIM9_CH2_PIN);
 800a7dc:	2308      	movs	r3, #8
 800a7de:	4a25      	ldr	r2, [pc, #148]	; (800a874 <Initialize+0x21c>)
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	4837      	ldr	r0, [pc, #220]	; (800a8c0 <Initialize+0x268>)
 800a7e4:	f7f7 f8ea 	bl	80019bc <PWMChannelConfig>
	PWMChannelConfig(&htim12, TIM_CHANNEL_1, PWM_TIM12_CH1_PIN);
 800a7e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7ec:	4a36      	ldr	r2, [pc, #216]	; (800a8c8 <Initialize+0x270>)
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	4834      	ldr	r0, [pc, #208]	; (800a8c4 <Initialize+0x26c>)
 800a7f2:	f7f7 f8e3 	bl	80019bc <PWMChannelConfig>
	PWMChannelConfig(&htim12, TIM_CHANNEL_2, PWM_TIM12_CH2_PIN);
 800a7f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7fa:	4a33      	ldr	r2, [pc, #204]	; (800a8c8 <Initialize+0x270>)
 800a7fc:	2104      	movs	r1, #4
 800a7fe:	4831      	ldr	r0, [pc, #196]	; (800a8c4 <Initialize+0x26c>)
 800a800:	f7f7 f8dc 	bl	80019bc <PWMChannelConfig>

	BDCInit(&BDC1, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit5);
 800a804:	2320      	movs	r3, #32
 800a806:	9302      	str	r3, [sp, #8]
 800a808:	2301      	movs	r3, #1
 800a80a:	9301      	str	r3, [sp, #4]
 800a80c:	4b2f      	ldr	r3, [pc, #188]	; (800a8cc <Initialize+0x274>)
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	2200      	movs	r2, #0
 800a814:	492a      	ldr	r1, [pc, #168]	; (800a8c0 <Initialize+0x268>)
 800a816:	482e      	ldr	r0, [pc, #184]	; (800a8d0 <Initialize+0x278>)
 800a818:	f7f6 fd2a 	bl	8001270 <BDCInit>
	BDCInit(&BDC2, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	9302      	str	r3, [sp, #8]
 800a820:	2340      	movs	r3, #64	; 0x40
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	4b29      	ldr	r3, [pc, #164]	; (800a8cc <Initialize+0x274>)
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	2204      	movs	r2, #4
 800a82c:	4924      	ldr	r1, [pc, #144]	; (800a8c0 <Initialize+0x268>)
 800a82e:	4829      	ldr	r0, [pc, #164]	; (800a8d4 <Initialize+0x27c>)
 800a830:	f7f6 fd1e 	bl	8001270 <BDCInit>
	BDCInit(&BDC3, &htim12, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit4, Bit3);
 800a834:	2308      	movs	r3, #8
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	2310      	movs	r3, #16
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	4b23      	ldr	r3, [pc, #140]	; (800a8cc <Initialize+0x274>)
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	2200      	movs	r2, #0
 800a844:	491f      	ldr	r1, [pc, #124]	; (800a8c4 <Initialize+0x26c>)
 800a846:	4824      	ldr	r0, [pc, #144]	; (800a8d8 <Initialize+0x280>)
 800a848:	f7f6 fd12 	bl	8001270 <BDCInit>
	BDCInit(&BDC4, &htim12, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit1, Bit2);
 800a84c:	2304      	movs	r3, #4
 800a84e:	9302      	str	r3, [sp, #8]
 800a850:	2302      	movs	r3, #2
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <Initialize+0x274>)
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2300      	movs	r3, #0
 800a85a:	2204      	movs	r2, #4
 800a85c:	4919      	ldr	r1, [pc, #100]	; (800a8c4 <Initialize+0x26c>)
 800a85e:	481f      	ldr	r0, [pc, #124]	; (800a8dc <Initialize+0x284>)
 800a860:	f7f6 fd06 	bl	8001270 <BDCInit>

	//	LSAInit(&LSA_A, S1_A_PIN, S2_A_PIN, S3_A_PIN, S4_A_PIN, S5_A_PIN, S6_A_PIN, S7_A_PIN, S8_A_PIN);
	//	LSAInit(&LSA_B, S1_B_PIN, S2_B_PIN, S3_B_PIN, S4_B_PIN, S5_B_PIN, S6_B_PIN, S7_B_PIN, S8_B_PIN);
	//	LSAInit(&LSA_C, S1_C_PIN, S2_C_PIN, S3_C_PIN, S4_C_PIN, S5_C_PIN, S6_C_PIN, S7_C_PIN, S8_C_PIN);
	//	LSAInit(&LSA_D, S1_D_PIN, S2_D_PIN, S3_D_PIN, S4_D_PIN, S5_D_PIN, S6_D_PIN, S7_D_PIN, S8_D_PIN);
	R6091U_Init(&IMU, &huart2);
 800a864:	4913      	ldr	r1, [pc, #76]	; (800a8b4 <Initialize+0x25c>)
 800a866:	481e      	ldr	r0, [pc, #120]	; (800a8e0 <Initialize+0x288>)
 800a868:	f7fd fe22 	bl	80084b0 <R6091U_Init>

}
 800a86c:	bf00      	nop
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40020000 	.word	0x40020000
 800a878:	40020800 	.word	0x40020800
 800a87c:	40021000 	.word	0x40021000
 800a880:	40020c00 	.word	0x40020c00
 800a884:	40020014 	.word	0x40020014
 800a888:	40020814 	.word	0x40020814
 800a88c:	40021014 	.word	0x40021014
 800a890:	40020c14 	.word	0x40020c14
 800a894:	20007a88 	.word	0x20007a88
 800a898:	200056fc 	.word	0x200056fc
 800a89c:	20005164 	.word	0x20005164
 800a8a0:	20005268 	.word	0x20005268
 800a8a4:	20004f7c 	.word	0x20004f7c
 800a8a8:	20004e78 	.word	0x20004e78
 800a8ac:	20004f3c 	.word	0x20004f3c
 800a8b0:	20004e38 	.word	0x20004e38
 800a8b4:	200052a8 	.word	0x200052a8
 800a8b8:	20004fc0 	.word	0x20004fc0
 800a8bc:	20005408 	.word	0x20005408
 800a8c0:	200051a4 	.word	0x200051a4
 800a8c4:	20005388 	.word	0x20005388
 800a8c8:	40020400 	.word	0x40020400
 800a8cc:	20007aa0 	.word	0x20007aa0
 800a8d0:	20008130 	.word	0x20008130
 800a8d4:	20006e38 	.word	0x20006e38
 800a8d8:	20006824 	.word	0x20006824
 800a8dc:	20007b5c 	.word	0x20007b5c
 800a8e0:	2000684c 	.word	0x2000684c
 800a8e4:	00000000 	.word	0x00000000

0800a8e8 <button>:


void button (void){
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	b091      	sub	sp, #68	; 0x44
 800a8ee:	af08      	add	r7, sp, #32

	if (BUTTON1 == 0){
 800a8f0:	4b95      	ldr	r3, [pc, #596]	; (800ab48 <button+0x260>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 0310 	and.w	r3, r3, #16
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f040 808c 	bne.w	800aa18 <button+0x130>
		LED2_ON;
 800a900:	4a92      	ldr	r2, [pc, #584]	; (800ab4c <button+0x264>)
 800a902:	7813      	ldrb	r3, [r2, #0]
 800a904:	f36f 1345 	bfc	r3, #5, #1
 800a908:	7013      	strb	r3, [r2, #0]
		mmode++;
 800a90a:	4b91      	ldr	r3, [pc, #580]	; (800ab50 <button+0x268>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	3301      	adds	r3, #1
 800a910:	b2da      	uxtb	r2, r3
 800a912:	4b8f      	ldr	r3, [pc, #572]	; (800ab50 <button+0x268>)
 800a914:	701a      	strb	r2, [r3, #0]
		while(BUTTON1 == 0) {
 800a916:	e004      	b.n	800a922 <button+0x3a>
			LED2_ON;
 800a918:	4a8c      	ldr	r2, [pc, #560]	; (800ab4c <button+0x264>)
 800a91a:	7813      	ldrb	r3, [r2, #0]
 800a91c:	f36f 1345 	bfc	r3, #5, #1
 800a920:	7013      	strb	r3, [r2, #0]
		while(BUTTON1 == 0) {
 800a922:	4b89      	ldr	r3, [pc, #548]	; (800ab48 <button+0x260>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f003 0310 	and.w	r3, r3, #16
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0f3      	beq.n	800a918 <button+0x30>
		}
		switch(mmode){
 800a930:	4b87      	ldr	r3, [pc, #540]	; (800ab50 <button+0x268>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	3b01      	subs	r3, #1
 800a936:	2b05      	cmp	r3, #5
 800a938:	d865      	bhi.n	800aa06 <button+0x11e>
 800a93a:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <button+0x58>)
 800a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a940:	0800a959 	.word	0x0800a959
 800a944:	0800a96b 	.word	0x0800a96b
 800a948:	0800a97d 	.word	0x0800a97d
 800a94c:	0800a98f 	.word	0x0800a98f
 800a950:	0800a9a1 	.word	0x0800a9a1
 800a954:	0800a9f5 	.word	0x0800a9f5
		case 1:
			sprintf(uartbuf, "Mode 1: Test all wheels forward direction, Press PB2 to start\r\n");
 800a958:	497e      	ldr	r1, [pc, #504]	; (800ab54 <button+0x26c>)
 800a95a:	487f      	ldr	r0, [pc, #508]	; (800ab58 <button+0x270>)
 800a95c:	f00f fef6 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a960:	497d      	ldr	r1, [pc, #500]	; (800ab58 <button+0x270>)
 800a962:	487e      	ldr	r0, [pc, #504]	; (800ab5c <button+0x274>)
 800a964:	f7f8 fe70 	bl	8003648 <UART_DMA_PrintString>
			break;
 800a968:	e050      	b.n	800aa0c <button+0x124>
		case 2:
			sprintf(uartbuf, "Mode 2: Test all wheels backward direction\r\n");
 800a96a:	497d      	ldr	r1, [pc, #500]	; (800ab60 <button+0x278>)
 800a96c:	487a      	ldr	r0, [pc, #488]	; (800ab58 <button+0x270>)
 800a96e:	f00f feed 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a972:	4979      	ldr	r1, [pc, #484]	; (800ab58 <button+0x270>)
 800a974:	4879      	ldr	r0, [pc, #484]	; (800ab5c <button+0x274>)
 800a976:	f7f8 fe67 	bl	8003648 <UART_DMA_PrintString>
			break;
 800a97a:	e047      	b.n	800aa0c <button+0x124>
		case 3:
			sprintf(uartbuf, "Mode 3: Stop all wheels\r\n");
 800a97c:	4979      	ldr	r1, [pc, #484]	; (800ab64 <button+0x27c>)
 800a97e:	4876      	ldr	r0, [pc, #472]	; (800ab58 <button+0x270>)
 800a980:	f00f fee4 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a984:	4974      	ldr	r1, [pc, #464]	; (800ab58 <button+0x270>)
 800a986:	4875      	ldr	r0, [pc, #468]	; (800ab5c <button+0x274>)
 800a988:	f7f8 fe5e 	bl	8003648 <UART_DMA_PrintString>
			break;
 800a98c:	e03e      	b.n	800aa0c <button+0x124>
		case 4:
			sprintf(uartbuf, "Mode 4: Print all wheels encoder value and angle\r\n");
 800a98e:	4976      	ldr	r1, [pc, #472]	; (800ab68 <button+0x280>)
 800a990:	4871      	ldr	r0, [pc, #452]	; (800ab58 <button+0x270>)
 800a992:	f00f fedb 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a996:	4970      	ldr	r1, [pc, #448]	; (800ab58 <button+0x270>)
 800a998:	4870      	ldr	r0, [pc, #448]	; (800ab5c <button+0x274>)
 800a99a:	f7f8 fe55 	bl	8003648 <UART_DMA_PrintString>
			break;
 800a99e:	e035      	b.n	800aa0c <button+0x124>
		case 5:
			sprintf(uartbuf, "Mode 5: Set KCD PTD. Turn all wheels in positive encoder value for 10 turns\r\n");
 800a9a0:	4972      	ldr	r1, [pc, #456]	; (800ab6c <button+0x284>)
 800a9a2:	486d      	ldr	r0, [pc, #436]	; (800ab58 <button+0x270>)
 800a9a4:	f00f fed2 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a9a8:	496b      	ldr	r1, [pc, #428]	; (800ab58 <button+0x270>)
 800a9aa:	486c      	ldr	r0, [pc, #432]	; (800ab5c <button+0x274>)
 800a9ac:	f7f8 fe4c 	bl	8003648 <UART_DMA_PrintString>
			osDelay(50);
 800a9b0:	2032      	movs	r0, #50	; 0x32
 800a9b2:	f00a fd9d 	bl	80154f0 <osDelay>
			sprintf(uartbuf, "short press PB2 to select wheel diameter 12.5cm\r\n");
 800a9b6:	496e      	ldr	r1, [pc, #440]	; (800ab70 <button+0x288>)
 800a9b8:	4867      	ldr	r0, [pc, #412]	; (800ab58 <button+0x270>)
 800a9ba:	f00f fec7 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a9be:	4966      	ldr	r1, [pc, #408]	; (800ab58 <button+0x270>)
 800a9c0:	4866      	ldr	r0, [pc, #408]	; (800ab5c <button+0x274>)
 800a9c2:	f7f8 fe41 	bl	8003648 <UART_DMA_PrintString>
			osDelay(50);
 800a9c6:	2032      	movs	r0, #50	; 0x32
 800a9c8:	f00a fd92 	bl	80154f0 <osDelay>
			sprintf(uartbuf, "or long press PB2 for more than 300ms to select wheel diameter 15cm\r\n");
 800a9cc:	4969      	ldr	r1, [pc, #420]	; (800ab74 <button+0x28c>)
 800a9ce:	4862      	ldr	r0, [pc, #392]	; (800ab58 <button+0x270>)
 800a9d0:	f00f febc 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a9d4:	4960      	ldr	r1, [pc, #384]	; (800ab58 <button+0x270>)
 800a9d6:	4861      	ldr	r0, [pc, #388]	; (800ab5c <button+0x274>)
 800a9d8:	f7f8 fe36 	bl	8003648 <UART_DMA_PrintString>
			osDelay(50);
 800a9dc:	2032      	movs	r0, #50	; 0x32
 800a9de:	f00a fd87 	bl	80154f0 <osDelay>
			sprintf(uartbuf, "Press PB2 again to set KCD PTD\r\n");
 800a9e2:	4965      	ldr	r1, [pc, #404]	; (800ab78 <button+0x290>)
 800a9e4:	485c      	ldr	r0, [pc, #368]	; (800ab58 <button+0x270>)
 800a9e6:	f00f feb1 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a9ea:	495b      	ldr	r1, [pc, #364]	; (800ab58 <button+0x270>)
 800a9ec:	485b      	ldr	r0, [pc, #364]	; (800ab5c <button+0x274>)
 800a9ee:	f7f8 fe2b 	bl	8003648 <UART_DMA_PrintString>
			break;
 800a9f2:	e00b      	b.n	800aa0c <button+0x124>
		case 6:
			sprintf(uartbuf, "\tMode 6: Print all wheels max speed\r\n");
 800a9f4:	4961      	ldr	r1, [pc, #388]	; (800ab7c <button+0x294>)
 800a9f6:	4858      	ldr	r0, [pc, #352]	; (800ab58 <button+0x270>)
 800a9f8:	f00f fea8 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800a9fc:	4956      	ldr	r1, [pc, #344]	; (800ab58 <button+0x270>)
 800a9fe:	4857      	ldr	r0, [pc, #348]	; (800ab5c <button+0x274>)
 800aa00:	f7f8 fe22 	bl	8003648 <UART_DMA_PrintString>
			break;
 800aa04:	e002      	b.n	800aa0c <button+0x124>
		default:
			mmode = 0;
 800aa06:	4b52      	ldr	r3, [pc, #328]	; (800ab50 <button+0x268>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	701a      	strb	r2, [r3, #0]
		}
		LED2_OFF;
 800aa0c:	4a4f      	ldr	r2, [pc, #316]	; (800ab4c <button+0x264>)
 800aa0e:	7813      	ldrb	r3, [r2, #0]
 800aa10:	f043 0320 	orr.w	r3, r3, #32
 800aa14:	7013      	strb	r3, [r2, #0]
		default:
			mmode = 0;
			break;
		}
	}
}
 800aa16:	e294      	b.n	800af42 <button+0x65a>
	} else if (BUTTON2 == 0) {
 800aa18:	4b59      	ldr	r3, [pc, #356]	; (800ab80 <button+0x298>)
 800aa1a:	785b      	ldrb	r3, [r3, #1]
 800aa1c:	f003 0304 	and.w	r3, r3, #4
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f040 828c 	bne.w	800af40 <button+0x658>
		float a, b, c, d, wheelDiameter; a=b=c=d=0.0;
 800aa28:	f04f 0300 	mov.w	r3, #0
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	617b      	str	r3, [r7, #20]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	61fb      	str	r3, [r7, #28]
		testCounter1 = 0;
 800aa3a:	4b52      	ldr	r3, [pc, #328]	; (800ab84 <button+0x29c>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]
		while(BUTTON2 == 0){
 800aa40:	e004      	b.n	800aa4c <button+0x164>
			LED2_ON;
 800aa42:	4a42      	ldr	r2, [pc, #264]	; (800ab4c <button+0x264>)
 800aa44:	7813      	ldrb	r3, [r2, #0]
 800aa46:	f36f 1345 	bfc	r3, #5, #1
 800aa4a:	7013      	strb	r3, [r2, #0]
		while(BUTTON2 == 0){
 800aa4c:	4b4c      	ldr	r3, [pc, #304]	; (800ab80 <button+0x298>)
 800aa4e:	785b      	ldrb	r3, [r3, #1]
 800aa50:	f003 0304 	and.w	r3, r3, #4
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0f3      	beq.n	800aa42 <button+0x15a>
		LED2_OFF;
 800aa5a:	4a3c      	ldr	r2, [pc, #240]	; (800ab4c <button+0x264>)
 800aa5c:	7813      	ldrb	r3, [r2, #0]
 800aa5e:	f043 0320 	orr.w	r3, r3, #32
 800aa62:	7013      	strb	r3, [r2, #0]
		switch(mmode){
 800aa64:	4b3a      	ldr	r3, [pc, #232]	; (800ab50 <button+0x268>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b06      	cmp	r3, #6
 800aa6a:	f200 8265 	bhi.w	800af38 <button+0x650>
 800aa6e:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <button+0x18c>)
 800aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa74:	0800aa91 	.word	0x0800aa91
 800aa78:	0800aa9d 	.word	0x0800aa9d
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800ab37 	.word	0x0800ab37
 800aa84:	0800ac0b 	.word	0x0800ac0b
 800aa88:	0800ac3b 	.word	0x0800ac3b
 800aa8c:	0800af09 	.word	0x0800af09
			LED2=1;
 800aa90:	4a2e      	ldr	r2, [pc, #184]	; (800ab4c <button+0x264>)
 800aa92:	7813      	ldrb	r3, [r2, #0]
 800aa94:	f043 0320 	orr.w	r3, r3, #32
 800aa98:	7013      	strb	r3, [r2, #0]
			break;
 800aa9a:	e252      	b.n	800af42 <button+0x65a>
			ins.instruction = RNS_VELOCITY;
 800aa9c:	4b3a      	ldr	r3, [pc, #232]	; (800ab88 <button+0x2a0>)
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	701a      	strb	r2, [r3, #0]
			ins.ins_buffer[0].data = 2;
 800aaa2:	4b39      	ldr	r3, [pc, #228]	; (800ab88 <button+0x2a0>)
 800aaa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aaa8:	605a      	str	r2, [r3, #4]
			ins.ins_buffer[1].data = 2;
 800aaaa:	4b37      	ldr	r3, [pc, #220]	; (800ab88 <button+0x2a0>)
 800aaac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aab0:	609a      	str	r2, [r3, #8]
			ins.ins_buffer[2].data = 2;
 800aab2:	4b35      	ldr	r3, [pc, #212]	; (800ab88 <button+0x2a0>)
 800aab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aab8:	60da      	str	r2, [r3, #12]
			ins.ins_buffer[3].data = 2;
 800aaba:	4b33      	ldr	r3, [pc, #204]	; (800ab88 <button+0x2a0>)
 800aabc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aac0:	611a      	str	r2, [r3, #16]
			APPApply(&ins);
 800aac2:	4831      	ldr	r0, [pc, #196]	; (800ab88 <button+0x2a0>)
 800aac4:	f7ff f8fe 	bl	8009cc4 <APPApply>
			APPStart(&ins);
 800aac8:	482f      	ldr	r0, [pc, #188]	; (800ab88 <button+0x2a0>)
 800aaca:	f7ff fa9f 	bl	800a00c <APPStart>
			sys.activate=1;
 800aace:	4a2f      	ldr	r2, [pc, #188]	; (800ab8c <button+0x2a4>)
 800aad0:	7813      	ldrb	r3, [r2, #0]
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	7013      	strb	r3, [r2, #0]
			LED3_ON;
 800aad8:	4a2d      	ldr	r2, [pc, #180]	; (800ab90 <button+0x2a8>)
 800aada:	7813      	ldrb	r3, [r2, #0]
 800aadc:	f36f 13c7 	bfc	r3, #7, #1
 800aae0:	7013      	strb	r3, [r2, #0]
			break;
 800aae2:	e22e      	b.n	800af42 <button+0x65a>
			ins.instruction = RNS_VELOCITY;
 800aae4:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <button+0x2a0>)
 800aae6:	2205      	movs	r2, #5
 800aae8:	701a      	strb	r2, [r3, #0]
			ins.ins_buffer[0].data = -2;
 800aaea:	4b27      	ldr	r3, [pc, #156]	; (800ab88 <button+0x2a0>)
 800aaec:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800aaf0:	605a      	str	r2, [r3, #4]
			ins.ins_buffer[1].data = -2;
 800aaf2:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <button+0x2a0>)
 800aaf4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800aaf8:	609a      	str	r2, [r3, #8]
			ins.ins_buffer[2].data = -2;
 800aafa:	4b23      	ldr	r3, [pc, #140]	; (800ab88 <button+0x2a0>)
 800aafc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800ab00:	60da      	str	r2, [r3, #12]
			ins.ins_buffer[3].data = -2;
 800ab02:	4b21      	ldr	r3, [pc, #132]	; (800ab88 <button+0x2a0>)
 800ab04:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800ab08:	611a      	str	r2, [r3, #16]
			APPApply(&ins);
 800ab0a:	481f      	ldr	r0, [pc, #124]	; (800ab88 <button+0x2a0>)
 800ab0c:	f7ff f8da 	bl	8009cc4 <APPApply>
			APPStart(&ins);
 800ab10:	481d      	ldr	r0, [pc, #116]	; (800ab88 <button+0x2a0>)
 800ab12:	f7ff fa7b 	bl	800a00c <APPStart>
			sys.activate=1;
 800ab16:	4a1d      	ldr	r2, [pc, #116]	; (800ab8c <button+0x2a4>)
 800ab18:	7813      	ldrb	r3, [r2, #0]
 800ab1a:	f043 0301 	orr.w	r3, r3, #1
 800ab1e:	7013      	strb	r3, [r2, #0]
			LED3_OFF;
 800ab20:	4a1b      	ldr	r2, [pc, #108]	; (800ab90 <button+0x2a8>)
 800ab22:	7813      	ldrb	r3, [r2, #0]
 800ab24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab28:	7013      	strb	r3, [r2, #0]
			LED4_ON;
 800ab2a:	4a19      	ldr	r2, [pc, #100]	; (800ab90 <button+0x2a8>)
 800ab2c:	7853      	ldrb	r3, [r2, #1]
 800ab2e:	f36f 1386 	bfc	r3, #6, #1
 800ab32:	7053      	strb	r3, [r2, #1]
			break;
 800ab34:	e205      	b.n	800af42 <button+0x65a>
			APPStop();
 800ab36:	f7ff fb5d 	bl	800a1f4 <APPStop>
			LED4_OFF;
 800ab3a:	4a15      	ldr	r2, [pc, #84]	; (800ab90 <button+0x2a8>)
 800ab3c:	7853      	ldrb	r3, [r2, #1]
 800ab3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab42:	7053      	strb	r3, [r2, #1]
			break;
 800ab44:	e1fd      	b.n	800af42 <button+0x65a>
 800ab46:	bf00      	nop
 800ab48:	40020810 	.word	0x40020810
 800ab4c:	40020814 	.word	0x40020814
 800ab50:	20006da8 	.word	0x20006da8
 800ab54:	0801fbcc 	.word	0x0801fbcc
 800ab58:	20007768 	.word	0x20007768
 800ab5c:	20004fc0 	.word	0x20004fc0
 800ab60:	0801fc0c 	.word	0x0801fc0c
 800ab64:	0801fc3c 	.word	0x0801fc3c
 800ab68:	0801fc58 	.word	0x0801fc58
 800ab6c:	0801fc8c 	.word	0x0801fc8c
 800ab70:	0801fcdc 	.word	0x0801fcdc
 800ab74:	0801fd10 	.word	0x0801fd10
 800ab78:	0801fd58 	.word	0x0801fd58
 800ab7c:	0801fd7c 	.word	0x0801fd7c
 800ab80:	40021010 	.word	0x40021010
 800ab84:	20007c9c 	.word	0x20007c9c
 800ab88:	20006694 	.word	0x20006694
 800ab8c:	20006db0 	.word	0x20006db0
 800ab90:	40021014 	.word	0x40021014
				sprintf(uartbuf,"x=%ld,y=%ld,A=%ld,B=%ld,C=%ld,D=%ld,w=%.2f,error=%d\r\n", // @suppress("Float formatting support")
 800ab94:	2002      	movs	r0, #2
 800ab96:	f7f7 fb73 	bl	8002280 <QEIRead>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	2005      	movs	r0, #5
 800ab9e:	f7f7 fb6f 	bl	8002280 <QEIRead>
 800aba2:	4681      	mov	r9, r0
 800aba4:	2006      	movs	r0, #6
 800aba6:	f7f7 fb6b 	bl	8002280 <QEIRead>
 800abaa:	4604      	mov	r4, r0
 800abac:	2004      	movs	r0, #4
 800abae:	f7f7 fb67 	bl	8002280 <QEIRead>
 800abb2:	4605      	mov	r5, r0
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7f7 fb63 	bl	8002280 <QEIRead>
 800abba:	4606      	mov	r6, r0
 800abbc:	2003      	movs	r0, #3
 800abbe:	f7f7 fb5f 	bl	8002280 <QEIRead>
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	4b8a      	ldr	r3, [pc, #552]	; (800adf0 <button+0x508>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f5 fcbd 	bl	8000548 <__aeabi_f2d>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4988      	ldr	r1, [pc, #544]	; (800adf4 <button+0x50c>)
 800abd4:	6809      	ldr	r1, [r1, #0]
 800abd6:	9106      	str	r1, [sp, #24]
 800abd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	9303      	str	r3, [sp, #12]
 800abe0:	9602      	str	r6, [sp, #8]
 800abe2:	9501      	str	r5, [sp, #4]
 800abe4:	9400      	str	r4, [sp, #0]
 800abe6:	464b      	mov	r3, r9
 800abe8:	4642      	mov	r2, r8
 800abea:	4983      	ldr	r1, [pc, #524]	; (800adf8 <button+0x510>)
 800abec:	4883      	ldr	r0, [pc, #524]	; (800adfc <button+0x514>)
 800abee:	f00f fdad 	bl	801a74c <siprintf>
				UART_DMA_PrintString(&huart5,uartbuf);
 800abf2:	4982      	ldr	r1, [pc, #520]	; (800adfc <button+0x514>)
 800abf4:	4882      	ldr	r0, [pc, #520]	; (800ae00 <button+0x518>)
 800abf6:	f7f8 fd27 	bl	8003648 <UART_DMA_PrintString>
				osDelay(50);
 800abfa:	2032      	movs	r0, #50	; 0x32
 800abfc:	f00a fc78 	bl	80154f0 <osDelay>
				LED5_ON;
 800ac00:	4a80      	ldr	r2, [pc, #512]	; (800ae04 <button+0x51c>)
 800ac02:	7853      	ldrb	r3, [r2, #1]
 800ac04:	f36f 0382 	bfc	r3, #2, #1
 800ac08:	7053      	strb	r3, [r2, #1]
			while(BUTTON2 == 1){
 800ac0a:	4b7f      	ldr	r3, [pc, #508]	; (800ae08 <button+0x520>)
 800ac0c:	785b      	ldrb	r3, [r3, #1]
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1bd      	bne.n	800ab94 <button+0x2ac>
			while(BUTTON2 == 0);
 800ac18:	bf00      	nop
 800ac1a:	4b7b      	ldr	r3, [pc, #492]	; (800ae08 <button+0x520>)
 800ac1c:	785b      	ldrb	r3, [r3, #1]
 800ac1e:	f003 0304 	and.w	r3, r3, #4
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0f8      	beq.n	800ac1a <button+0x332>
			mmode = 0;
 800ac28:	4b78      	ldr	r3, [pc, #480]	; (800ae0c <button+0x524>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	701a      	strb	r2, [r3, #0]
			LED5_OFF;
 800ac2e:	4a75      	ldr	r2, [pc, #468]	; (800ae04 <button+0x51c>)
 800ac30:	7853      	ldrb	r3, [r2, #1]
 800ac32:	f043 0304 	orr.w	r3, r3, #4
 800ac36:	7053      	strb	r3, [r2, #1]
			break;
 800ac38:	e183      	b.n	800af42 <button+0x65a>
			if(testCounter1 >= 60) wheelDiameter = 0.15;
 800ac3a:	4b75      	ldr	r3, [pc, #468]	; (800ae10 <button+0x528>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b3b      	cmp	r3, #59	; 0x3b
 800ac40:	dd02      	ble.n	800ac48 <button+0x360>
 800ac42:	4b74      	ldr	r3, [pc, #464]	; (800ae14 <button+0x52c>)
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e002      	b.n	800ac4e <button+0x366>
			else wheelDiameter = 0.125;
 800ac48:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800ac4c:	60fb      	str	r3, [r7, #12]
			sprintf(uartbuf, "Wheel of diameter %.2f selected\r\n", wheelDiameter);
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7f5 fc7a 	bl	8000548 <__aeabi_f2d>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	496f      	ldr	r1, [pc, #444]	; (800ae18 <button+0x530>)
 800ac5a:	4868      	ldr	r0, [pc, #416]	; (800adfc <button+0x514>)
 800ac5c:	f00f fd76 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5, uartbuf);
 800ac60:	4966      	ldr	r1, [pc, #408]	; (800adfc <button+0x514>)
 800ac62:	4867      	ldr	r0, [pc, #412]	; (800ae00 <button+0x518>)
 800ac64:	f7f8 fcf0 	bl	8003648 <UART_DMA_PrintString>
			osDelay(2000);
 800ac68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ac6c:	f00a fc40 	bl	80154f0 <osDelay>
			while(BUTTON2 == 1){
 800ac70:	e030      	b.n	800acd4 <button+0x3ec>
				sprintf(uartbuf,"A=%.2f,B=%.2f,C=%.2f,D=%.2f\r\n", // @suppress("Float formatting support")
 800ac72:	4b6a      	ldr	r3, [pc, #424]	; (800ae1c <button+0x534>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f5 fc66 	bl	8000548 <__aeabi_f2d>
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	468b      	mov	fp, r1
 800ac80:	4b67      	ldr	r3, [pc, #412]	; (800ae20 <button+0x538>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7f5 fc5f 	bl	8000548 <__aeabi_f2d>
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	460d      	mov	r5, r1
 800ac8e:	4b65      	ldr	r3, [pc, #404]	; (800ae24 <button+0x53c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f5 fc58 	bl	8000548 <__aeabi_f2d>
 800ac98:	4680      	mov	r8, r0
 800ac9a:	4689      	mov	r9, r1
 800ac9c:	4b62      	ldr	r3, [pc, #392]	; (800ae28 <button+0x540>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7f5 fc51 	bl	8000548 <__aeabi_f2d>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800acb2:	e9cd 4500 	strd	r4, r5, [sp]
 800acb6:	4652      	mov	r2, sl
 800acb8:	465b      	mov	r3, fp
 800acba:	495c      	ldr	r1, [pc, #368]	; (800ae2c <button+0x544>)
 800acbc:	484f      	ldr	r0, [pc, #316]	; (800adfc <button+0x514>)
 800acbe:	f00f fd45 	bl	801a74c <siprintf>
				UART_DMA_PrintString(&huart5,uartbuf);
 800acc2:	494e      	ldr	r1, [pc, #312]	; (800adfc <button+0x514>)
 800acc4:	484e      	ldr	r0, [pc, #312]	; (800ae00 <button+0x518>)
 800acc6:	f7f8 fcbf 	bl	8003648 <UART_DMA_PrintString>
				LED5_ON;
 800acca:	4a4e      	ldr	r2, [pc, #312]	; (800ae04 <button+0x51c>)
 800accc:	7853      	ldrb	r3, [r2, #1]
 800acce:	f36f 0382 	bfc	r3, #2, #1
 800acd2:	7053      	strb	r3, [r2, #1]
			while(BUTTON2 == 1){
 800acd4:	4b4c      	ldr	r3, [pc, #304]	; (800ae08 <button+0x520>)
 800acd6:	785b      	ldrb	r3, [r3, #1]
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1c7      	bne.n	800ac72 <button+0x38a>
			fFKcd = fFLeftPosData/fFRightPosData;
 800ace2:	4b4e      	ldr	r3, [pc, #312]	; (800ae1c <button+0x534>)
 800ace4:	edd3 6a00 	vldr	s13, [r3]
 800ace8:	4b4d      	ldr	r3, [pc, #308]	; (800ae20 <button+0x538>)
 800acea:	ed93 7a00 	vldr	s14, [r3]
 800acee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acf2:	4b4f      	ldr	r3, [pc, #316]	; (800ae30 <button+0x548>)
 800acf4:	edc3 7a00 	vstr	s15, [r3]
			fFPtd = wheelDiameter*3.142/(fFLeftPosData/10);
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f7f5 fc25 	bl	8000548 <__aeabi_f2d>
 800acfe:	a33a      	add	r3, pc, #232	; (adr r3, 800ade8 <button+0x500>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	f7f5 fc78 	bl	80005f8 <__aeabi_dmul>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4614      	mov	r4, r2
 800ad0e:	461d      	mov	r5, r3
 800ad10:	4b42      	ldr	r3, [pc, #264]	; (800ae1c <button+0x534>)
 800ad12:	edd3 7a00 	vldr	s15, [r3]
 800ad16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ad1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ad1e:	ee16 0a90 	vmov	r0, s13
 800ad22:	f7f5 fc11 	bl	8000548 <__aeabi_f2d>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7f5 fd8d 	bl	800084c <__aeabi_ddiv>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4610      	mov	r0, r2
 800ad38:	4619      	mov	r1, r3
 800ad3a:	f7f5 ff55 	bl	8000be8 <__aeabi_d2f>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	4a3c      	ldr	r2, [pc, #240]	; (800ae34 <button+0x54c>)
 800ad42:	6013      	str	r3, [r2, #0]
			fBKcd = fBLeftPosData/fBRightPosData;
 800ad44:	4b37      	ldr	r3, [pc, #220]	; (800ae24 <button+0x53c>)
 800ad46:	edd3 6a00 	vldr	s13, [r3]
 800ad4a:	4b37      	ldr	r3, [pc, #220]	; (800ae28 <button+0x540>)
 800ad4c:	ed93 7a00 	vldr	s14, [r3]
 800ad50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad54:	4b38      	ldr	r3, [pc, #224]	; (800ae38 <button+0x550>)
 800ad56:	edc3 7a00 	vstr	s15, [r3]
			fBPtd = wheelDiameter*3.142/(fBLeftPosData/10);
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f7f5 fbf4 	bl	8000548 <__aeabi_f2d>
 800ad60:	a321      	add	r3, pc, #132	; (adr r3, 800ade8 <button+0x500>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fc47 	bl	80005f8 <__aeabi_dmul>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4614      	mov	r4, r2
 800ad70:	461d      	mov	r5, r3
 800ad72:	4b2c      	ldr	r3, [pc, #176]	; (800ae24 <button+0x53c>)
 800ad74:	edd3 7a00 	vldr	s15, [r3]
 800ad78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ad7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ad80:	ee16 0a90 	vmov	r0, s13
 800ad84:	f7f5 fbe0 	bl	8000548 <__aeabi_f2d>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f7f5 fd5c 	bl	800084c <__aeabi_ddiv>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4610      	mov	r0, r2
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	f7f5 ff24 	bl	8000be8 <__aeabi_d2f>
 800ada0:	4603      	mov	r3, r0
 800ada2:	4a26      	ldr	r2, [pc, #152]	; (800ae3c <button+0x554>)
 800ada4:	6013      	str	r3, [r2, #0]
			sprintf(uartbuf,"KCD PTD set\r\n");
 800ada6:	4926      	ldr	r1, [pc, #152]	; (800ae40 <button+0x558>)
 800ada8:	4814      	ldr	r0, [pc, #80]	; (800adfc <button+0x514>)
 800adaa:	f00f fccf 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800adae:	4913      	ldr	r1, [pc, #76]	; (800adfc <button+0x514>)
 800adb0:	4813      	ldr	r0, [pc, #76]	; (800ae00 <button+0x518>)
 800adb2:	f7f8 fc49 	bl	8003648 <UART_DMA_PrintString>
			sprintf(uartbuf,"You may check maximum speed now\r\n");
 800adb6:	4923      	ldr	r1, [pc, #140]	; (800ae44 <button+0x55c>)
 800adb8:	4810      	ldr	r0, [pc, #64]	; (800adfc <button+0x514>)
 800adba:	f00f fcc7 	bl	801a74c <siprintf>
			UART_DMA_PrintString(&huart5,uartbuf);
 800adbe:	490f      	ldr	r1, [pc, #60]	; (800adfc <button+0x514>)
 800adc0:	480f      	ldr	r0, [pc, #60]	; (800ae00 <button+0x518>)
 800adc2:	f7f8 fc41 	bl	8003648 <UART_DMA_PrintString>
			while(BUTTON2 == 0);
 800adc6:	bf00      	nop
 800adc8:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <button+0x520>)
 800adca:	785b      	ldrb	r3, [r3, #1]
 800adcc:	f003 0304 	and.w	r3, r3, #4
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0f8      	beq.n	800adc8 <button+0x4e0>
			mmode = 6;
 800add6:	4b0d      	ldr	r3, [pc, #52]	; (800ae0c <button+0x524>)
 800add8:	2206      	movs	r2, #6
 800adda:	701a      	strb	r2, [r3, #0]
			LED5_OFF;
 800addc:	4a09      	ldr	r2, [pc, #36]	; (800ae04 <button+0x51c>)
 800adde:	7853      	ldrb	r3, [r2, #1]
 800ade0:	f043 0304 	orr.w	r3, r3, #4
 800ade4:	7053      	strb	r3, [r2, #1]
			while(BUTTON2 == 1){
 800ade6:	e08f      	b.n	800af08 <button+0x620>
 800ade8:	e5604189 	.word	0xe5604189
 800adec:	400922d0 	.word	0x400922d0
 800adf0:	20007ca0 	.word	0x20007ca0
 800adf4:	20007b88 	.word	0x20007b88
 800adf8:	0801fda4 	.word	0x0801fda4
 800adfc:	20007768 	.word	0x20007768
 800ae00:	20004fc0 	.word	0x20004fc0
 800ae04:	40020c14 	.word	0x40020c14
 800ae08:	40021010 	.word	0x40021010
 800ae0c:	20006da8 	.word	0x20006da8
 800ae10:	20007c9c 	.word	0x20007c9c
 800ae14:	3e19999a 	.word	0x3e19999a
 800ae18:	0801fddc 	.word	0x0801fddc
 800ae1c:	2000796c 	.word	0x2000796c
 800ae20:	20006dac 	.word	0x20006dac
 800ae24:	20006dc0 	.word	0x20006dc0
 800ae28:	200081c0 	.word	0x200081c0
 800ae2c:	0801fe00 	.word	0x0801fe00
 800ae30:	20007b98 	.word	0x20007b98
 800ae34:	20006ee8 	.word	0x20006ee8
 800ae38:	20008128 	.word	0x20008128
 800ae3c:	20006738 	.word	0x20006738
 800ae40:	0801fe20 	.word	0x0801fe20
 800ae44:	0801fe30 	.word	0x0801fe30
				if(fFLeftVel  > a) a = fFLeftVel;
 800ae48:	4b40      	ldr	r3, [pc, #256]	; (800af4c <button+0x664>)
 800ae4a:	edd3 7a00 	vldr	s15, [r3]
 800ae4e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	d502      	bpl.n	800ae62 <button+0x57a>
 800ae5c:	4b3b      	ldr	r3, [pc, #236]	; (800af4c <button+0x664>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	61fb      	str	r3, [r7, #28]
				if(fFRightVel > b) b = fFRightVel;
 800ae62:	4b3b      	ldr	r3, [pc, #236]	; (800af50 <button+0x668>)
 800ae64:	edd3 7a00 	vldr	s15, [r3]
 800ae68:	ed97 7a06 	vldr	s14, [r7, #24]
 800ae6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae74:	d502      	bpl.n	800ae7c <button+0x594>
 800ae76:	4b36      	ldr	r3, [pc, #216]	; (800af50 <button+0x668>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	61bb      	str	r3, [r7, #24]
				if(fBLeftVel  > c) c = fBLeftVel;
 800ae7c:	4b35      	ldr	r3, [pc, #212]	; (800af54 <button+0x66c>)
 800ae7e:	edd3 7a00 	vldr	s15, [r3]
 800ae82:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8e:	d502      	bpl.n	800ae96 <button+0x5ae>
 800ae90:	4b30      	ldr	r3, [pc, #192]	; (800af54 <button+0x66c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	617b      	str	r3, [r7, #20]
				if(fBRightVel > d) d = fBRightVel;
 800ae96:	4b30      	ldr	r3, [pc, #192]	; (800af58 <button+0x670>)
 800ae98:	edd3 7a00 	vldr	s15, [r3]
 800ae9c:	ed97 7a04 	vldr	s14, [r7, #16]
 800aea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea8:	d502      	bpl.n	800aeb0 <button+0x5c8>
 800aeaa:	4b2b      	ldr	r3, [pc, #172]	; (800af58 <button+0x670>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	613b      	str	r3, [r7, #16]
				sprintf(uartbuf,"A=%.2f,B=%.2f,C=%.2f,D=%.2f\r\n", a,b,c,d);//in meter
 800aeb0:	69f8      	ldr	r0, [r7, #28]
 800aeb2:	f7f5 fb49 	bl	8000548 <__aeabi_f2d>
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	468b      	mov	fp, r1
 800aeba:	69b8      	ldr	r0, [r7, #24]
 800aebc:	f7f5 fb44 	bl	8000548 <__aeabi_f2d>
 800aec0:	4604      	mov	r4, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	6978      	ldr	r0, [r7, #20]
 800aec6:	f7f5 fb3f 	bl	8000548 <__aeabi_f2d>
 800aeca:	4680      	mov	r8, r0
 800aecc:	4689      	mov	r9, r1
 800aece:	6938      	ldr	r0, [r7, #16]
 800aed0:	f7f5 fb3a 	bl	8000548 <__aeabi_f2d>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aedc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800aee0:	e9cd 4500 	strd	r4, r5, [sp]
 800aee4:	4652      	mov	r2, sl
 800aee6:	465b      	mov	r3, fp
 800aee8:	491c      	ldr	r1, [pc, #112]	; (800af5c <button+0x674>)
 800aeea:	481d      	ldr	r0, [pc, #116]	; (800af60 <button+0x678>)
 800aeec:	f00f fc2e 	bl	801a74c <siprintf>
				UART_DMA_PrintString(&huart5,uartbuf);
 800aef0:	491b      	ldr	r1, [pc, #108]	; (800af60 <button+0x678>)
 800aef2:	481c      	ldr	r0, [pc, #112]	; (800af64 <button+0x67c>)
 800aef4:	f7f8 fba8 	bl	8003648 <UART_DMA_PrintString>
				osDelay(50);
 800aef8:	2032      	movs	r0, #50	; 0x32
 800aefa:	f00a faf9 	bl	80154f0 <osDelay>
				LED5_ON;
 800aefe:	4a1a      	ldr	r2, [pc, #104]	; (800af68 <button+0x680>)
 800af00:	7853      	ldrb	r3, [r2, #1]
 800af02:	f36f 0382 	bfc	r3, #2, #1
 800af06:	7053      	strb	r3, [r2, #1]
			while(BUTTON2 == 1){
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <button+0x684>)
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	f003 0304 	and.w	r3, r3, #4
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d198      	bne.n	800ae48 <button+0x560>
			while(BUTTON2 == 0);
 800af16:	bf00      	nop
 800af18:	4b14      	ldr	r3, [pc, #80]	; (800af6c <button+0x684>)
 800af1a:	785b      	ldrb	r3, [r3, #1]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0f8      	beq.n	800af18 <button+0x630>
			mmode = 0;
 800af26:	4b12      	ldr	r3, [pc, #72]	; (800af70 <button+0x688>)
 800af28:	2200      	movs	r2, #0
 800af2a:	701a      	strb	r2, [r3, #0]
			LED5_OFF;
 800af2c:	4a0e      	ldr	r2, [pc, #56]	; (800af68 <button+0x680>)
 800af2e:	7853      	ldrb	r3, [r2, #1]
 800af30:	f043 0304 	orr.w	r3, r3, #4
 800af34:	7053      	strb	r3, [r2, #1]
			break;
 800af36:	e004      	b.n	800af42 <button+0x65a>
			mmode = 0;
 800af38:	4b0d      	ldr	r3, [pc, #52]	; (800af70 <button+0x688>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
			break;
 800af3e:	e000      	b.n	800af42 <button+0x65a>
	}
 800af40:	bf00      	nop
}
 800af42:	bf00      	nop
 800af44:	3724      	adds	r7, #36	; 0x24
 800af46:	46bd      	mov	sp, r7
 800af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4c:	2000809c 	.word	0x2000809c
 800af50:	20006f54 	.word	0x20006f54
 800af54:	20006e1c 	.word	0x20006e1c
 800af58:	20007450 	.word	0x20007450
 800af5c:	0801fe00 	.word	0x0801fe00
 800af60:	20007768 	.word	0x20007768
 800af64:	20004fc0 	.word	0x20004fc0
 800af68:	40020c14 	.word	0x40020c14
 800af6c:	40021010 	.word	0x40021010
 800af70:	20006da8 	.word	0x20006da8

0800af74 <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler()
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 800af78:	4802      	ldr	r0, [pc, #8]	; (800af84 <CAN1_RX0_IRQHandler+0x10>)
 800af7a:	f004 fefb 	bl	800fd74 <HAL_CAN_IRQHandler>

}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200056fc 	.word	0x200056fc

0800af88 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800af8c:	4802      	ldr	r0, [pc, #8]	; (800af98 <CAN2_RX1_IRQHandler+0x10>)
 800af8e:	f004 fef1 	bl	800fd74 <HAL_CAN_IRQHandler>

}
 800af92:	bf00      	nop
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	200056d4 	.word	0x200056d4

0800af9c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];

	if(hcan == &hcan1){
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a6b      	ldr	r2, [pc, #428]	; (800b154 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	f040 80cf 	bne.w	800b14c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4a69      	ldr	r2, [pc, #420]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f004 fda4 	bl	800fb04 <HAL_CAN_GetRxMessage>
		switch (CAN1RxMessage.StdId) {
 800afbc:	4b66      	ldr	r3, [pc, #408]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3b17      	subs	r3, #23
 800afc2:	2b06      	cmp	r3, #6
 800afc4:	d86d      	bhi.n	800b0a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afe9 	.word	0x0800afe9
 800afd0:	0800b001 	.word	0x0800b001
 800afd4:	0800b013 	.word	0x0800b013
 800afd8:	0800b02b 	.word	0x0800b02b
 800afdc:	0800b043 	.word	0x0800b043
 800afe0:	0800b0a3 	.word	0x0800b0a3
 800afe4:	0800b065 	.word	0x0800b065

		case mainboard_TO_RNS:
			memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800afe8:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	4619      	mov	r1, r3
 800aff2:	485a      	ldr	r0, [pc, #360]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800aff4:	f00e fd14 	bl	8019a20 <memcpy>
			rcv_buf_flag = 0;
 800aff8:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800affa:	2200      	movs	r2, #0
 800affc:	701a      	strb	r2, [r3, #0]
			break;
 800affe:	e051      	b.n	800b0a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf1:
			memcpy(&rcv_buf[0], &aData, CAN1RxMessage.DLC);
 800b000:	4b55      	ldr	r3, [pc, #340]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	f107 0308 	add.w	r3, r7, #8
 800b008:	4619      	mov	r1, r3
 800b00a:	4856      	ldr	r0, [pc, #344]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b00c:	f00e fd08 	bl	8019a20 <memcpy>
			break;
 800b010:	e048      	b.n	800b0a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf2:
			memcpy(&rcv_buf[2], &aData, CAN1RxMessage.DLC);
 800b012:	4b51      	ldr	r3, [pc, #324]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800b014:	691a      	ldr	r2, [r3, #16]
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	4619      	mov	r1, r3
 800b01c:	4852      	ldr	r0, [pc, #328]	; (800b168 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800b01e:	f00e fcff 	bl	8019a20 <memcpy>
			rcv_buf_flag = 1;
 800b022:	4b4f      	ldr	r3, [pc, #316]	; (800b160 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800b024:	2201      	movs	r2, #1
 800b026:	701a      	strb	r2, [r3, #0]
			break;
 800b028:	e03c      	b.n	800b0a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf3 :
			memcpy(&rcv_buf[4], &aData, CAN1RxMessage.DLC);
 800b02a:	4b4b      	ldr	r3, [pc, #300]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800b02c:	691a      	ldr	r2, [r3, #16]
 800b02e:	f107 0308 	add.w	r3, r7, #8
 800b032:	4619      	mov	r1, r3
 800b034:	484d      	ldr	r0, [pc, #308]	; (800b16c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800b036:	f00e fcf3 	bl	8019a20 <memcpy>
			rcv_buf_flag=2;
 800b03a:	4b49      	ldr	r3, [pc, #292]	; (800b160 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800b03c:	2202      	movs	r2, #2
 800b03e:	701a      	strb	r2, [r3, #0]
			break;
 800b040:	e030      	b.n	800b0a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf4 :
			memcpy(&rcv_buf[6], &aData, CAN1RxMessage.DLC);
 800b042:	4b45      	ldr	r3, [pc, #276]	; (800b158 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	4619      	mov	r1, r3
 800b04c:	4848      	ldr	r0, [pc, #288]	; (800b170 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800b04e:	f00e fce7 	bl	8019a20 <memcpy>
			rcv_buf_flag=3;
 800b052:	4b43      	ldr	r3, [pc, #268]	; (800b160 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800b054:	2203      	movs	r2, #3
 800b056:	701a      	strb	r2, [r3, #0]
			LED4=0;
 800b058:	4a46      	ldr	r2, [pc, #280]	; (800b174 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800b05a:	7853      	ldrb	r3, [r2, #1]
 800b05c:	f36f 1386 	bfc	r3, #6, #1
 800b060:	7053      	strb	r3, [r2, #1]
			break;
 800b062:	e01f      	b.n	800b0a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>


		case CONT_data:
			main_board_1_data_receive.common_instruction = RNS_CONTROLLER;
 800b064:	4b44      	ldr	r3, [pc, #272]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b066:	220b      	movs	r2, #11
 800b068:	701a      	strb	r2, [r3, #0]
			main_board_1_data_receive.common_buffer[0].byte1 = aData[0];
 800b06a:	7a3a      	ldrb	r2, [r7, #8]
 800b06c:	4b42      	ldr	r3, [pc, #264]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b06e:	711a      	strb	r2, [r3, #4]
			main_board_1_data_receive.common_buffer[0].byte2 = aData[1];
 800b070:	7a7a      	ldrb	r2, [r7, #9]
 800b072:	4b41      	ldr	r3, [pc, #260]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b074:	715a      	strb	r2, [r3, #5]
			main_board_1_data_receive.common_buffer[0].byte3 = aData[2];
 800b076:	7aba      	ldrb	r2, [r7, #10]
 800b078:	4b3f      	ldr	r3, [pc, #252]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b07a:	719a      	strb	r2, [r3, #6]
			main_board_1_data_receive.common_buffer[0].byte4 = aData[3];
 800b07c:	7afa      	ldrb	r2, [r7, #11]
 800b07e:	4b3e      	ldr	r3, [pc, #248]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b080:	71da      	strb	r2, [r3, #7]
			main_board_1_data_receive.common_buffer[1].data = 0;
 800b082:	4b3d      	ldr	r3, [pc, #244]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	609a      	str	r2, [r3, #8]
			main_board_1_data_receive.common_buffer[2].data = 0;
 800b08a:	4b3b      	ldr	r3, [pc, #236]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b08c:	f04f 0200 	mov.w	r2, #0
 800b090:	60da      	str	r2, [r3, #12]
			main_board_1_data_receive.common_buffer[3].data = 0;
 800b092:	4b39      	ldr	r3, [pc, #228]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b094:	f04f 0200 	mov.w	r2, #0
 800b098:	611a      	str	r2, [r3, #16]
			insData_receive[0]=19;
 800b09a:	4b30      	ldr	r3, [pc, #192]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b09c:	2213      	movs	r2, #19
 800b09e:	701a      	strb	r2, [r3, #0]

			break;
 800b0a0:	e000      	b.n	800b0a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>

		default:
			break;
 800b0a2:	bf00      	nop

		}

		if (insData_receive[0] == 1) {
 800b0a4:	4b2d      	ldr	r3, [pc, #180]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d103      	bne.n	800b0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
			main_board_1_data_receive.common_instruction = insData_receive[1];
 800b0ac:	4b2b      	ldr	r3, [pc, #172]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b0ae:	785a      	ldrb	r2, [r3, #1]
 800b0b0:	4b31      	ldr	r3, [pc, #196]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b0b2:	701a      	strb	r2, [r3, #0]
		}

		if (insData_receive[0] == 17) {
 800b0b4:	4b29      	ldr	r3, [pc, #164]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b11      	cmp	r3, #17
 800b0ba:	d143      	bne.n	800b144 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
			if (rcv_buf_flag == 1 && (insData_receive[1] < RNS_PARAM_5 || insData_receive[1]>RNS_INS_PARAM)) {
 800b0bc:	4b28      	ldr	r3, [pc, #160]	; (800b160 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d11b      	bne.n	800b0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 800b0c4:	4b25      	ldr	r3, [pc, #148]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	2b4f      	cmp	r3, #79	; 0x4f
 800b0ca:	d903      	bls.n	800b0d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 800b0cc:	4b23      	ldr	r3, [pc, #140]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b0ce:	785b      	ldrb	r3, [r3, #1]
 800b0d0:	2b55      	cmp	r3, #85	; 0x55
 800b0d2:	d913      	bls.n	800b0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800b0d4:	4b21      	ldr	r3, [pc, #132]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b0d6:	785a      	ldrb	r2, [r3, #1]
 800b0d8:	4b27      	ldr	r3, [pc, #156]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b0da:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800b0dc:	4b21      	ldr	r3, [pc, #132]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a25      	ldr	r2, [pc, #148]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b0e2:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800b0e4:	4b1f      	ldr	r3, [pc, #124]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a23      	ldr	r2, [pc, #140]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b0ea:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800b0ec:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	4a21      	ldr	r2, [pc, #132]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b0f2:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800b0f4:	4b1b      	ldr	r3, [pc, #108]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	4a1f      	ldr	r2, [pc, #124]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b0fa:	6113      	str	r3, [r2, #16]
			}
			if(rcv_buf_flag == 3){
 800b0fc:	4b18      	ldr	r3, [pc, #96]	; (800b160 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d11f      	bne.n	800b144 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800b104:	4b15      	ldr	r3, [pc, #84]	; (800b15c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800b106:	785a      	ldrb	r2, [r3, #1]
 800b108:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b10a:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800b10c:	4b15      	ldr	r3, [pc, #84]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a19      	ldr	r2, [pc, #100]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b112:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800b114:	4b13      	ldr	r3, [pc, #76]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	4a17      	ldr	r2, [pc, #92]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b11a:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	4a15      	ldr	r2, [pc, #84]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b122:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800b124:	4b0f      	ldr	r3, [pc, #60]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	4a13      	ldr	r2, [pc, #76]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b12a:	6113      	str	r3, [r2, #16]
				main_board_1_data_receive.common_buffer[4].data = rcv_buf[4].data;
 800b12c:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	4a11      	ldr	r2, [pc, #68]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b132:	6153      	str	r3, [r2, #20]
				main_board_1_data_receive.common_buffer[5].data = rcv_buf[5].data;
 800b134:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	4a0f      	ldr	r2, [pc, #60]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b13a:	6193      	str	r3, [r2, #24]
				main_board_1_data_receive.common_buffer[6].data = rcv_buf[6].data;
 800b13c:	4b09      	ldr	r3, [pc, #36]	; (800b164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	4a0d      	ldr	r2, [pc, #52]	; (800b178 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800b142:	61d3      	str	r3, [r2, #28]
			}
		}
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b144:	2110      	movs	r1, #16
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f004 fdee 	bl	800fd28 <HAL_CAN_ActivateNotification>
	}
}
 800b14c:	bf00      	nop
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	200056fc 	.word	0x200056fc
 800b158:	20005724 	.word	0x20005724
 800b15c:	2000672c 	.word	0x2000672c
 800b160:	20007c1c 	.word	0x20007c1c
 800b164:	200073bc 	.word	0x200073bc
 800b168:	200073c4 	.word	0x200073c4
 800b16c:	200073cc 	.word	0x200073cc
 800b170:	200073d4 	.word	0x200073d4
 800b174:	40021014 	.word	0x40021014
 800b178:	200081c8 	.word	0x200081c8

0800b17c <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];

	if(hcan == &hcan2){
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a6d      	ldr	r2, [pc, #436]	; (800b33c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	f040 80d3 	bne.w	800b334 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	4a6b      	ldr	r2, [pc, #428]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b194:	2101      	movs	r1, #1
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f004 fcb4 	bl	800fb04 <HAL_CAN_GetRxMessage>
		switch(CAN2RxMessage.StdId){
 800b19c:	4b68      	ldr	r3, [pc, #416]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3b17      	subs	r3, #23
 800b1a2:	2b06      	cmp	r3, #6
 800b1a4:	d86d      	bhi.n	800b282 <HAL_CAN_RxFifo1MsgPendingCallback+0x106>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1c9 	.word	0x0800b1c9
 800b1b0:	0800b1e1 	.word	0x0800b1e1
 800b1b4:	0800b1f3 	.word	0x0800b1f3
 800b1b8:	0800b20b 	.word	0x0800b20b
 800b1bc:	0800b223 	.word	0x0800b223
 800b1c0:	0800b283 	.word	0x0800b283
 800b1c4:	0800b245 	.word	0x0800b245

		case mainboard_TO_RNS:
			memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800b1c8:	4b5d      	ldr	r3, [pc, #372]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	f107 0308 	add.w	r3, r7, #8
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	485c      	ldr	r0, [pc, #368]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b1d4:	f00e fc24 	bl	8019a20 <memcpy>
			rcv_buf_flag2 = 0;
 800b1d8:	4b5b      	ldr	r3, [pc, #364]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]
			break;
 800b1de:	e051      	b.n	800b284 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf1:
			memcpy(&rcv_buf[0], &aData, CAN2RxMessage.DLC);
 800b1e0:	4b57      	ldr	r3, [pc, #348]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b1e2:	691a      	ldr	r2, [r3, #16]
 800b1e4:	f107 0308 	add.w	r3, r7, #8
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4858      	ldr	r0, [pc, #352]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b1ec:	f00e fc18 	bl	8019a20 <memcpy>
			break;
 800b1f0:	e048      	b.n	800b284 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf2:
			memcpy(&rcv_buf[2], &aData, CAN2RxMessage.DLC);
 800b1f2:	4b53      	ldr	r3, [pc, #332]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b1f4:	691a      	ldr	r2, [r3, #16]
 800b1f6:	f107 0308 	add.w	r3, r7, #8
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4854      	ldr	r0, [pc, #336]	; (800b350 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800b1fe:	f00e fc0f 	bl	8019a20 <memcpy>
			rcv_buf_flag2=1;
 800b202:	4b51      	ldr	r3, [pc, #324]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b204:	2201      	movs	r2, #1
 800b206:	701a      	strb	r2, [r3, #0]
			break;
 800b208:	e03c      	b.n	800b284 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf3 :
			memcpy(&rcv_buf[4], &aData, CAN2RxMessage.DLC);
 800b20a:	4b4d      	ldr	r3, [pc, #308]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	f107 0308 	add.w	r3, r7, #8
 800b212:	4619      	mov	r1, r3
 800b214:	484f      	ldr	r0, [pc, #316]	; (800b354 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800b216:	f00e fc03 	bl	8019a20 <memcpy>
			rcv_buf_flag2=2;
 800b21a:	4b4b      	ldr	r3, [pc, #300]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b21c:	2202      	movs	r2, #2
 800b21e:	701a      	strb	r2, [r3, #0]
			break;
 800b220:	e030      	b.n	800b284 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case mainboard_TO_RNS_buf4 :
			memcpy(&rcv_buf[6], &aData, CAN2RxMessage.DLC);
 800b222:	4b47      	ldr	r3, [pc, #284]	; (800b340 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	f107 0308 	add.w	r3, r7, #8
 800b22a:	4619      	mov	r1, r3
 800b22c:	484a      	ldr	r0, [pc, #296]	; (800b358 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800b22e:	f00e fbf7 	bl	8019a20 <memcpy>
			rcv_buf_flag2=3;
 800b232:	4b45      	ldr	r3, [pc, #276]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b234:	2203      	movs	r2, #3
 800b236:	701a      	strb	r2, [r3, #0]
			LED4=0;
 800b238:	4a48      	ldr	r2, [pc, #288]	; (800b35c <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800b23a:	7853      	ldrb	r3, [r2, #1]
 800b23c:	f36f 1386 	bfc	r3, #6, #1
 800b240:	7053      	strb	r3, [r2, #1]
			break;
 800b242:	e01f      	b.n	800b284 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		case CONT_data:
			main_board_1_data_receive.common_instruction = RNS_CONTROLLER;
 800b244:	4b46      	ldr	r3, [pc, #280]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b246:	220b      	movs	r2, #11
 800b248:	701a      	strb	r2, [r3, #0]
			main_board_1_data_receive.common_buffer[0].byte1 = aData[0];
 800b24a:	7a3a      	ldrb	r2, [r7, #8]
 800b24c:	4b44      	ldr	r3, [pc, #272]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b24e:	711a      	strb	r2, [r3, #4]
			main_board_1_data_receive.common_buffer[0].byte2 = aData[1];
 800b250:	7a7a      	ldrb	r2, [r7, #9]
 800b252:	4b43      	ldr	r3, [pc, #268]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b254:	715a      	strb	r2, [r3, #5]
			main_board_1_data_receive.common_buffer[0].byte3 = aData[2];
 800b256:	7aba      	ldrb	r2, [r7, #10]
 800b258:	4b41      	ldr	r3, [pc, #260]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b25a:	719a      	strb	r2, [r3, #6]
			main_board_1_data_receive.common_buffer[0].byte4 = aData[3];
 800b25c:	7afa      	ldrb	r2, [r7, #11]
 800b25e:	4b40      	ldr	r3, [pc, #256]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b260:	71da      	strb	r2, [r3, #7]
			main_board_1_data_receive.common_buffer[1].data = 0;
 800b262:	4b3f      	ldr	r3, [pc, #252]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b264:	f04f 0200 	mov.w	r2, #0
 800b268:	609a      	str	r2, [r3, #8]
			main_board_1_data_receive.common_buffer[2].data = 0;
 800b26a:	4b3d      	ldr	r3, [pc, #244]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	60da      	str	r2, [r3, #12]
			main_board_1_data_receive.common_buffer[3].data = 0;
 800b272:	4b3b      	ldr	r3, [pc, #236]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b274:	f04f 0200 	mov.w	r2, #0
 800b278:	611a      	str	r2, [r3, #16]
			insData_receive[0]=19;
 800b27a:	4b32      	ldr	r3, [pc, #200]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b27c:	2213      	movs	r2, #19
 800b27e:	701a      	strb	r2, [r3, #0]
			break;
 800b280:	e000      	b.n	800b284 <HAL_CAN_RxFifo1MsgPendingCallback+0x108>

		default:
			break;
 800b282:	bf00      	nop

		}

		if (insData_receive[0] == 1) {
 800b284:	4b2f      	ldr	r3, [pc, #188]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d103      	bne.n	800b294 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>
			main_board_1_data_receive.common_instruction = insData_receive[1];
 800b28c:	4b2d      	ldr	r3, [pc, #180]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b28e:	785a      	ldrb	r2, [r3, #1]
 800b290:	4b33      	ldr	r3, [pc, #204]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b292:	701a      	strb	r2, [r3, #0]

		}

		if (insData_receive[0] == 17) {
 800b294:	4b2b      	ldr	r3, [pc, #172]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b11      	cmp	r3, #17
 800b29a:	d147      	bne.n	800b32c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>
			if (rcv_buf_flag2 == 1 && (insData_receive[1] < RNS_PARAM_5 || insData_receive[1]>RNS_INS_PARAM)) {
 800b29c:	4b2a      	ldr	r3, [pc, #168]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d11b      	bne.n	800b2dc <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
 800b2a4:	4b27      	ldr	r3, [pc, #156]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b2a6:	785b      	ldrb	r3, [r3, #1]
 800b2a8:	2b4f      	cmp	r3, #79	; 0x4f
 800b2aa:	d903      	bls.n	800b2b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x138>
 800b2ac:	4b25      	ldr	r3, [pc, #148]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	2b55      	cmp	r3, #85	; 0x55
 800b2b2:	d913      	bls.n	800b2dc <HAL_CAN_RxFifo1MsgPendingCallback+0x160>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800b2b4:	4b23      	ldr	r3, [pc, #140]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b2b6:	785a      	ldrb	r2, [r3, #1]
 800b2b8:	4b29      	ldr	r3, [pc, #164]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2ba:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800b2bc:	4b23      	ldr	r3, [pc, #140]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a27      	ldr	r2, [pc, #156]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2c2:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800b2c4:	4b21      	ldr	r3, [pc, #132]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	4a25      	ldr	r2, [pc, #148]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2ca:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800b2cc:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	4a23      	ldr	r2, [pc, #140]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2d2:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800b2d4:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	4a21      	ldr	r2, [pc, #132]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2da:	6113      	str	r3, [r2, #16]
			}
			if(rcv_buf_flag2==3){
 800b2dc:	4b1a      	ldr	r3, [pc, #104]	; (800b348 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	2b03      	cmp	r3, #3
 800b2e2:	d123      	bne.n	800b32c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b0>
				main_board_1_data_receive.common_instruction = insData_receive[1];
 800b2e4:	4b17      	ldr	r3, [pc, #92]	; (800b344 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800b2e6:	785a      	ldrb	r2, [r3, #1]
 800b2e8:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2ea:	701a      	strb	r2, [r3, #0]
				main_board_1_data_receive.common_buffer[0].data = rcv_buf[0].data;
 800b2ec:	4b17      	ldr	r3, [pc, #92]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2f2:	6053      	str	r3, [r2, #4]
				main_board_1_data_receive.common_buffer[1].data = rcv_buf[1].data;
 800b2f4:	4b15      	ldr	r3, [pc, #84]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	4a19      	ldr	r2, [pc, #100]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b2fa:	6093      	str	r3, [r2, #8]
				main_board_1_data_receive.common_buffer[2].data = rcv_buf[2].data;
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	4a17      	ldr	r2, [pc, #92]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b302:	60d3      	str	r3, [r2, #12]
				main_board_1_data_receive.common_buffer[3].data = rcv_buf[3].data;
 800b304:	4b11      	ldr	r3, [pc, #68]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	4a15      	ldr	r2, [pc, #84]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b30a:	6113      	str	r3, [r2, #16]
				main_board_1_data_receive.common_buffer[4].data = rcv_buf[4].data;
 800b30c:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	4a13      	ldr	r2, [pc, #76]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b312:	6153      	str	r3, [r2, #20]
				main_board_1_data_receive.common_buffer[5].data = rcv_buf[5].data;
 800b314:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	4a11      	ldr	r2, [pc, #68]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b31a:	6193      	str	r3, [r2, #24]
				main_board_1_data_receive.common_buffer[6].data = rcv_buf[6].data;
 800b31c:	4b0b      	ldr	r3, [pc, #44]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	4a0f      	ldr	r2, [pc, #60]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b322:	61d3      	str	r3, [r2, #28]
				main_board_1_data_receive.common_buffer[7].data = rcv_buf[7].data;
 800b324:	4b09      	ldr	r3, [pc, #36]	; (800b34c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 800b326:	69db      	ldr	r3, [r3, #28]
 800b328:	4a0d      	ldr	r2, [pc, #52]	; (800b360 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e4>)
 800b32a:	6213      	str	r3, [r2, #32]
			}
		}

		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800b32c:	2110      	movs	r1, #16
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f004 fcfa 	bl	800fd28 <HAL_CAN_ActivateNotification>
	}

}
 800b334:	bf00      	nop
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	200056d4 	.word	0x200056d4
 800b340:	20005690 	.word	0x20005690
 800b344:	2000672c 	.word	0x2000672c
 800b348:	20007d34 	.word	0x20007d34
 800b34c:	200073bc 	.word	0x200073bc
 800b350:	200073c4 	.word	0x200073c4
 800b354:	200073cc 	.word	0x200073cc
 800b358:	200073d4 	.word	0x200073d4
 800b35c:	40021014 	.word	0x40021014
 800b360:	200081c8 	.word	0x200081c8

0800b364 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0

}
 800b368:	bf00      	nop
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800b372:	b480      	push	{r7}
 800b374:	af00      	add	r7, sp, #0

}
 800b376:	bf00      	nop
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800b380:	b480      	push	{r7}
 800b382:	af00      	add	r7, sp, #0

	while(1){
 800b384:	e7fe      	b.n	800b384 <MemManage_Handler+0x4>

0800b386 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800b386:	b480      	push	{r7}
 800b388:	af00      	add	r7, sp, #0

}
 800b38a:	bf00      	nop
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800b394:	b480      	push	{r7}
 800b396:	af00      	add	r7, sp, #0

}
 800b398:	bf00      	nop
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	af00      	add	r7, sp, #0

}
 800b3a6:	bf00      	nop
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <TIM8_UP_TIM13_IRQHandler>:
 */
//void PendSV_Handler(void)
//{
//
//}
void TIM8_UP_TIM13_IRQHandler(void){
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	af00      	add	r7, sp, #0
	//A

	if (TIM8 -> CR1 == 129)
 800b3b4:	4b11      	ldr	r3, [pc, #68]	; (800b3fc <TIM8_UP_TIM13_IRQHandler+0x4c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b81      	cmp	r3, #129	; 0x81
 800b3ba:	d109      	bne.n	800b3d0 <TIM8_UP_TIM13_IRQHandler+0x20>
		BIOS_QEI6.signbit += 1;
 800b3bc:	4b10      	ldr	r3, [pc, #64]	; (800b400 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b3be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	b21a      	sxth	r2, r3
 800b3ca:	4b0d      	ldr	r3, [pc, #52]	; (800b400 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b3cc:	805a      	strh	r2, [r3, #2]
 800b3ce:	e00c      	b.n	800b3ea <TIM8_UP_TIM13_IRQHandler+0x3a>
	else if (TIM8 ->CR1 == 145)
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <TIM8_UP_TIM13_IRQHandler+0x4c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b91      	cmp	r3, #145	; 0x91
 800b3d6:	d108      	bne.n	800b3ea <TIM8_UP_TIM13_IRQHandler+0x3a>
		BIOS_QEI6.signbit -= 1;
 800b3d8:	4b09      	ldr	r3, [pc, #36]	; (800b400 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b3da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	b21a      	sxth	r2, r3
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <TIM8_UP_TIM13_IRQHandler+0x50>)
 800b3e8:	805a      	strh	r2, [r3, #2]

	TIM8 -> SR = 0;
 800b3ea:	4b04      	ldr	r3, [pc, #16]	; (800b3fc <TIM8_UP_TIM13_IRQHandler+0x4c>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	611a      	str	r2, [r3, #16]
//	testCounter = testCounter + 1;
	QEIDelay(100);
 800b3f0:	2064      	movs	r0, #100	; 0x64
 800b3f2:	f7f6 ff29 	bl	8002248 <QEIDelay>
}
 800b3f6:	bf00      	nop
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	40010400 	.word	0x40010400
 800b400:	2000568c 	.word	0x2000568c

0800b404 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void){
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
	//B
	if (TIM4 -> CR1 == 129)
 800b408:	4b11      	ldr	r3, [pc, #68]	; (800b450 <TIM4_IRQHandler+0x4c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b81      	cmp	r3, #129	; 0x81
 800b40e:	d109      	bne.n	800b424 <TIM4_IRQHandler+0x20>
		BIOS_QEI4.signbit += 1;
 800b410:	4b10      	ldr	r3, [pc, #64]	; (800b454 <TIM4_IRQHandler+0x50>)
 800b412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b416:	b29b      	uxth	r3, r3
 800b418:	3301      	adds	r3, #1
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	b21a      	sxth	r2, r3
 800b41e:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <TIM4_IRQHandler+0x50>)
 800b420:	805a      	strh	r2, [r3, #2]
 800b422:	e00c      	b.n	800b43e <TIM4_IRQHandler+0x3a>
	else if (TIM4 ->CR1 == 145)
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <TIM4_IRQHandler+0x4c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b91      	cmp	r3, #145	; 0x91
 800b42a:	d108      	bne.n	800b43e <TIM4_IRQHandler+0x3a>
		BIOS_QEI4.signbit -= 1;
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <TIM4_IRQHandler+0x50>)
 800b42e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b432:	b29b      	uxth	r3, r3
 800b434:	3b01      	subs	r3, #1
 800b436:	b29b      	uxth	r3, r3
 800b438:	b21a      	sxth	r2, r3
 800b43a:	4b06      	ldr	r3, [pc, #24]	; (800b454 <TIM4_IRQHandler+0x50>)
 800b43c:	805a      	strh	r2, [r3, #2]

	TIM4 -> SR = 0;
 800b43e:	4b04      	ldr	r3, [pc, #16]	; (800b450 <TIM4_IRQHandler+0x4c>)
 800b440:	2200      	movs	r2, #0
 800b442:	611a      	str	r2, [r3, #16]
//	testCounter = testCounter + 1;
	QEIDelay(100);
 800b444:	2064      	movs	r0, #100	; 0x64
 800b446:	f7f6 feff 	bl	8002248 <QEIDelay>
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	40000800 	.word	0x40000800
 800b454:	20005688 	.word	0x20005688

0800b458 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void){
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
	//C
	if (TIM1 -> CR1 == 129)
 800b45c:	4b11      	ldr	r3, [pc, #68]	; (800b4a4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b81      	cmp	r3, #129	; 0x81
 800b462:	d109      	bne.n	800b478 <TIM1_UP_TIM10_IRQHandler+0x20>
		BIOS_QEI1.signbit += 1;
 800b464:	4b10      	ldr	r3, [pc, #64]	; (800b4a8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	3301      	adds	r3, #1
 800b46e:	b29b      	uxth	r3, r3
 800b470:	b21a      	sxth	r2, r3
 800b472:	4b0d      	ldr	r3, [pc, #52]	; (800b4a8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b474:	805a      	strh	r2, [r3, #2]
 800b476:	e00c      	b.n	800b492 <TIM1_UP_TIM10_IRQHandler+0x3a>
	else if (TIM1 ->CR1 == 145)
 800b478:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b91      	cmp	r3, #145	; 0x91
 800b47e:	d108      	bne.n	800b492 <TIM1_UP_TIM10_IRQHandler+0x3a>
		BIOS_QEI1.signbit -= 1;
 800b480:	4b09      	ldr	r3, [pc, #36]	; (800b4a8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b486:	b29b      	uxth	r3, r3
 800b488:	3b01      	subs	r3, #1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	b21a      	sxth	r2, r3
 800b48e:	4b06      	ldr	r3, [pc, #24]	; (800b4a8 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800b490:	805a      	strh	r2, [r3, #2]

	TIM1 -> SR = 0;
 800b492:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800b494:	2200      	movs	r2, #0
 800b496:	611a      	str	r2, [r3, #16]
//	testCounter = testCounter + 1;
	QEIDelay(100);
 800b498:	2064      	movs	r0, #100	; 0x64
 800b49a:	f7f6 fed5 	bl	8002248 <QEIDelay>
}
 800b49e:	bf00      	nop
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	40010000 	.word	0x40010000
 800b4a8:	20005664 	.word	0x20005664

0800b4ac <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	af00      	add	r7, sp, #0
	//D
	if (TIM3 -> CR1 == 129)
 800b4b0:	4b11      	ldr	r3, [pc, #68]	; (800b4f8 <TIM3_IRQHandler+0x4c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b81      	cmp	r3, #129	; 0x81
 800b4b6:	d109      	bne.n	800b4cc <TIM3_IRQHandler+0x20>
		BIOS_QEI3.signbit += 1;
 800b4b8:	4b10      	ldr	r3, [pc, #64]	; (800b4fc <TIM3_IRQHandler+0x50>)
 800b4ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	b21a      	sxth	r2, r3
 800b4c6:	4b0d      	ldr	r3, [pc, #52]	; (800b4fc <TIM3_IRQHandler+0x50>)
 800b4c8:	805a      	strh	r2, [r3, #2]
 800b4ca:	e00c      	b.n	800b4e6 <TIM3_IRQHandler+0x3a>
	else if (TIM3 ->CR1 == 145)
 800b4cc:	4b0a      	ldr	r3, [pc, #40]	; (800b4f8 <TIM3_IRQHandler+0x4c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b91      	cmp	r3, #145	; 0x91
 800b4d2:	d108      	bne.n	800b4e6 <TIM3_IRQHandler+0x3a>
		BIOS_QEI3.signbit -= 1;
 800b4d4:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <TIM3_IRQHandler+0x50>)
 800b4d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	b21a      	sxth	r2, r3
 800b4e2:	4b06      	ldr	r3, [pc, #24]	; (800b4fc <TIM3_IRQHandler+0x50>)
 800b4e4:	805a      	strh	r2, [r3, #2]

	TIM3 -> SR = 0;
 800b4e6:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <TIM3_IRQHandler+0x4c>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	611a      	str	r2, [r3, #16]
//	testCounter = testCounter + 1;
	QEIDelay(100);
 800b4ec:	2064      	movs	r0, #100	; 0x64
 800b4ee:	f7f6 feab 	bl	8002248 <QEIDelay>
}
 800b4f2:	bf00      	nop
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	40000400 	.word	0x40000400
 800b4fc:	20005660 	.word	0x20005660

0800b500 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void){
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
	//X
	if (TIM2 -> CR1 == 129)
 800b504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b81      	cmp	r3, #129	; 0x81
 800b50c:	d109      	bne.n	800b522 <TIM2_IRQHandler+0x22>
		BIOS_QEI2.signbit += 1;
 800b50e:	4b10      	ldr	r3, [pc, #64]	; (800b550 <TIM2_IRQHandler+0x50>)
 800b510:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b514:	b29b      	uxth	r3, r3
 800b516:	3301      	adds	r3, #1
 800b518:	b29b      	uxth	r3, r3
 800b51a:	b21a      	sxth	r2, r3
 800b51c:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <TIM2_IRQHandler+0x50>)
 800b51e:	805a      	strh	r2, [r3, #2]
 800b520:	e00d      	b.n	800b53e <TIM2_IRQHandler+0x3e>
	else if (TIM2 ->CR1 == 145)
 800b522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b91      	cmp	r3, #145	; 0x91
 800b52a:	d108      	bne.n	800b53e <TIM2_IRQHandler+0x3e>
		BIOS_QEI2.signbit -= 1;
 800b52c:	4b08      	ldr	r3, [pc, #32]	; (800b550 <TIM2_IRQHandler+0x50>)
 800b52e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b532:	b29b      	uxth	r3, r3
 800b534:	3b01      	subs	r3, #1
 800b536:	b29b      	uxth	r3, r3
 800b538:	b21a      	sxth	r2, r3
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <TIM2_IRQHandler+0x50>)
 800b53c:	805a      	strh	r2, [r3, #2]
	TIM2 -> SR = 0;
 800b53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b542:	2200      	movs	r2, #0
 800b544:	611a      	str	r2, [r3, #16]
//	testCounter = testCounter + 1;
	QEIDelay(100);
 800b546:	2064      	movs	r0, #100	; 0x64
 800b548:	f7f6 fe7e 	bl	8002248 <QEIDelay>
}
 800b54c:	bf00      	nop
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	20005668 	.word	0x20005668

0800b554 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void){
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
	//Y

	if (TIM5 -> CR1 == 129)
 800b558:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <TIM5_IRQHandler+0x4c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b81      	cmp	r3, #129	; 0x81
 800b55e:	d109      	bne.n	800b574 <TIM5_IRQHandler+0x20>
		BIOS_QEI5.signbit += 1;
 800b560:	4b10      	ldr	r3, [pc, #64]	; (800b5a4 <TIM5_IRQHandler+0x50>)
 800b562:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b566:	b29b      	uxth	r3, r3
 800b568:	3301      	adds	r3, #1
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	b21a      	sxth	r2, r3
 800b56e:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <TIM5_IRQHandler+0x50>)
 800b570:	805a      	strh	r2, [r3, #2]
 800b572:	e00c      	b.n	800b58e <TIM5_IRQHandler+0x3a>
	else if (TIM5 ->CR1 == 145)
 800b574:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <TIM5_IRQHandler+0x4c>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b91      	cmp	r3, #145	; 0x91
 800b57a:	d108      	bne.n	800b58e <TIM5_IRQHandler+0x3a>
		BIOS_QEI5.signbit -= 1;
 800b57c:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <TIM5_IRQHandler+0x50>)
 800b57e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b582:	b29b      	uxth	r3, r3
 800b584:	3b01      	subs	r3, #1
 800b586:	b29b      	uxth	r3, r3
 800b588:	b21a      	sxth	r2, r3
 800b58a:	4b06      	ldr	r3, [pc, #24]	; (800b5a4 <TIM5_IRQHandler+0x50>)
 800b58c:	805a      	strh	r2, [r3, #2]

	TIM5 -> SR = 0;
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <TIM5_IRQHandler+0x4c>)
 800b590:	2200      	movs	r2, #0
 800b592:	611a      	str	r2, [r3, #16]
//	testCounter = testCounter + 1;
	QEIDelay(100);
 800b594:	2064      	movs	r0, #100	; 0x64
 800b596:	f7f6 fe57 	bl	8002248 <QEIDelay>
}
 800b59a:	bf00      	nop
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40000c00 	.word	0x40000c00
 800b5a4:	20005684 	.word	0x20005684

0800b5a8 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim7);
 800b5ac:	4802      	ldr	r0, [pc, #8]	; (800b5b8 <TIM7_IRQHandler+0x10>)
 800b5ae:	f008 f8a5 	bl	80136fc <HAL_TIM_IRQHandler>
}
 800b5b2:	bf00      	nop
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200053c8 	.word	0x200053c8

0800b5bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a05      	ldr	r2, [pc, #20]	; (800b5e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d104      	bne.n	800b5d8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_IncTick();
 800b5ce:	f003 ff49 	bl	800f464 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800b5d2:	4804      	ldr	r0, [pc, #16]	; (800b5e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800b5d4:	f7f6 ff03 	bl	80023de <SHIFTREGShift>

	}
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	40001400 	.word	0x40001400
 800b5e4:	20007a88 	.word	0x20007a88

0800b5e8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
//	}else{
//		c[u2rx_count++] = rcvdata;
//	}

//	sprintf(uartbuf," %f \r\n",fyaw);
	HAL_UART_IRQHandler(&huart2);
 800b5ec:	4802      	ldr	r0, [pc, #8]	; (800b5f8 <USART2_IRQHandler+0x10>)
 800b5ee:	f008 ffed 	bl	80145cc <HAL_UART_IRQHandler>
//	UARTPrintString_IT(&huart5,uartbuf);
}
 800b5f2:	bf00      	nop
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200052a8 	.word	0x200052a8

0800b5fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	if(huart == IMU.huartx){
 800b604:	4b05      	ldr	r3, [pc, #20]	; (800b61c <HAL_UART_RxCpltCallback+0x20>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d102      	bne.n	800b614 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 800b60e:	4803      	ldr	r0, [pc, #12]	; (800b61c <HAL_UART_RxCpltCallback+0x20>)
 800b610:	f7fc ff66 	bl	80084e0 <R6091U_Handler>
	}
}
 800b614:	bf00      	nop
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	2000684c 	.word	0x2000684c

0800b620 <STTStateInit>:


/*********************************************/

void STTStateInit(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
	state = RNS_S_PENDING;
 800b624:	4b03      	ldr	r3, [pc, #12]	; (800b634 <STTStateInit+0x14>)
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]
}
 800b62a:	bf00      	nop
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	20006e60 	.word	0x20006e60

0800b638 <STTEventChecker>:

void STTEventChecker(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0

	if (main_board_1_data_receive.common_instruction != RNS_PENDING){
 800b63c:	4b4f      	ldr	r3, [pc, #316]	; (800b77c <STTEventChecker+0x144>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d05c      	beq.n	800b6fe <STTEventChecker+0xc6>

		sys.activate = 0;
 800b644:	4a4e      	ldr	r2, [pc, #312]	; (800b780 <STTEventChecker+0x148>)
 800b646:	7813      	ldrb	r3, [r2, #0]
 800b648:	f36f 0300 	bfc	r3, #0, #1
 800b64c:	7013      	strb	r3, [r2, #0]

		if (main_board_1_data_receive.common_instruction < RNS_INS_RESET)
 800b64e:	4b4b      	ldr	r3, [pc, #300]	; (800b77c <STTEventChecker+0x144>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b03      	cmp	r3, #3
 800b654:	d803      	bhi.n	800b65e <STTEventChecker+0x26>
			event = RNS_E_STOP;
 800b656:	4b4b      	ldr	r3, [pc, #300]	; (800b784 <STTEventChecker+0x14c>)
 800b658:	2200      	movs	r2, #0
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e02e      	b.n	800b6bc <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_VELOCITY)
 800b65e:	4b47      	ldr	r3, [pc, #284]	; (800b77c <STTEventChecker+0x144>)
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b0b      	cmp	r3, #11
 800b664:	d803      	bhi.n	800b66e <STTEventChecker+0x36>
			event = RNS_E_VELOCITY;
 800b666:	4b47      	ldr	r3, [pc, #284]	; (800b784 <STTEventChecker+0x14c>)
 800b668:	2201      	movs	r2, #1
 800b66a:	701a      	strb	r2, [r3, #0]
 800b66c:	e026      	b.n	800b6bc <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_LINE_FOLLOW)
 800b66e:	4b43      	ldr	r3, [pc, #268]	; (800b77c <STTEventChecker+0x144>)
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b0e      	cmp	r3, #14
 800b674:	d803      	bhi.n	800b67e <STTEventChecker+0x46>
			event = RNS_E_LINE_FOLLOW;
 800b676:	4b43      	ldr	r3, [pc, #268]	; (800b784 <STTEventChecker+0x14c>)
 800b678:	2202      	movs	r2, #2
 800b67a:	701a      	strb	r2, [r3, #0]
 800b67c:	e01e      	b.n	800b6bc <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_PATH_PLAN)
 800b67e:	4b3f      	ldr	r3, [pc, #252]	; (800b77c <STTEventChecker+0x144>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	2b11      	cmp	r3, #17
 800b684:	d803      	bhi.n	800b68e <STTEventChecker+0x56>
			event = RNS_E_PATH_PLAN;
 800b686:	4b3f      	ldr	r3, [pc, #252]	; (800b784 <STTEventChecker+0x14c>)
 800b688:	2203      	movs	r2, #3
 800b68a:	701a      	strb	r2, [r3, #0]
 800b68c:	e016      	b.n	800b6bc <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_PARAM)
 800b68e:	4b3b      	ldr	r3, [pc, #236]	; (800b77c <STTEventChecker+0x144>)
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b54      	cmp	r3, #84	; 0x54
 800b694:	d803      	bhi.n	800b69e <STTEventChecker+0x66>
			event = RNS_E_PARAM;
 800b696:	4b3b      	ldr	r3, [pc, #236]	; (800b784 <STTEventChecker+0x14c>)
 800b698:	2205      	movs	r2, #5
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	e00e      	b.n	800b6bc <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_ENQ)
 800b69e:	4b37      	ldr	r3, [pc, #220]	; (800b77c <STTEventChecker+0x144>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b62      	cmp	r3, #98	; 0x62
 800b6a4:	d803      	bhi.n	800b6ae <STTEventChecker+0x76>
			event = RNS_E_ENQ;
 800b6a6:	4b37      	ldr	r3, [pc, #220]	; (800b784 <STTEventChecker+0x14c>)
 800b6a8:	2206      	movs	r2, #6
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	e006      	b.n	800b6bc <STTEventChecker+0x84>
		else if (main_board_1_data_receive.common_instruction < RNS_INS_USER)
 800b6ae:	4b33      	ldr	r3, [pc, #204]	; (800b77c <STTEventChecker+0x144>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b63      	cmp	r3, #99	; 0x63
 800b6b4:	d802      	bhi.n	800b6bc <STTEventChecker+0x84>
			event = RNS_E_USER;
 800b6b6:	4b33      	ldr	r3, [pc, #204]	; (800b784 <STTEventChecker+0x14c>)
 800b6b8:	2204      	movs	r2, #4
 800b6ba:	701a      	strb	r2, [r3, #0]

		if(transition[state][event] != 0)
 800b6bc:	4b32      	ldr	r3, [pc, #200]	; (800b788 <STTEventChecker+0x150>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	4b30      	ldr	r3, [pc, #192]	; (800b784 <STTEventChecker+0x14c>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	4a30      	ldr	r2, [pc, #192]	; (800b78c <STTEventChecker+0x154>)
 800b6ca:	00c3      	lsls	r3, r0, #3
 800b6cc:	440b      	add	r3, r1
 800b6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <STTEventChecker+0xb6>
			(transition[state][event])();
 800b6d6:	4b2c      	ldr	r3, [pc, #176]	; (800b788 <STTEventChecker+0x150>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	4b29      	ldr	r3, [pc, #164]	; (800b784 <STTEventChecker+0x14c>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4a2a      	ldr	r2, [pc, #168]	; (800b78c <STTEventChecker+0x154>)
 800b6e4:	00c3      	lsls	r3, r0, #3
 800b6e6:	440b      	add	r3, r1
 800b6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ec:	4798      	blx	r3

		sys.activate = 1;
 800b6ee:	4a24      	ldr	r2, [pc, #144]	; (800b780 <STTEventChecker+0x148>)
 800b6f0:	7813      	ldrb	r3, [r2, #0]
 800b6f2:	f043 0301 	orr.w	r3, r3, #1
 800b6f6:	7013      	strb	r3, [r2, #0]
		main_board_1_data_receive.common_instruction = RNS_PENDING;
 800b6f8:	4b20      	ldr	r3, [pc, #128]	; (800b77c <STTEventChecker+0x144>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	701a      	strb	r2, [r3, #0]

	}

	if (state == RNS_S_LINE_FOLLOW || state == RNS_S_PATH_PLAN ){
 800b6fe:	4b22      	ldr	r3, [pc, #136]	; (800b788 <STTEventChecker+0x150>)
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d003      	beq.n	800b70e <STTEventChecker+0xd6>
 800b706:	4b20      	ldr	r3, [pc, #128]	; (800b788 <STTEventChecker+0x150>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d117      	bne.n	800b73e <STTEventChecker+0x106>
		if (!APPBusy(&ins)){
 800b70e:	4820      	ldr	r0, [pc, #128]	; (800b790 <STTEventChecker+0x158>)
 800b710:	f7fe fe16 	bl	800a340 <APPBusy>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d111      	bne.n	800b73e <STTEventChecker+0x106>
			event = RNS_E_FINISH;
 800b71a:	4b1a      	ldr	r3, [pc, #104]	; (800b784 <STTEventChecker+0x14c>)
 800b71c:	2207      	movs	r2, #7
 800b71e:	701a      	strb	r2, [r3, #0]
			(*transition[state][event])();
 800b720:	4b19      	ldr	r3, [pc, #100]	; (800b788 <STTEventChecker+0x150>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	4618      	mov	r0, r3
 800b726:	4b17      	ldr	r3, [pc, #92]	; (800b784 <STTEventChecker+0x14c>)
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	4619      	mov	r1, r3
 800b72c:	4a17      	ldr	r2, [pc, #92]	; (800b78c <STTEventChecker+0x154>)
 800b72e:	00c3      	lsls	r3, r0, #3
 800b730:	440b      	add	r3, r1
 800b732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b736:	4798      	blx	r3
			main_board_1_data_receive.common_instruction = RNS_PENDING;
 800b738:	4b10      	ldr	r3, [pc, #64]	; (800b77c <STTEventChecker+0x144>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (state == RNS_S_USER){
 800b73e:	4b12      	ldr	r3, [pc, #72]	; (800b788 <STTEventChecker+0x150>)
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	2b04      	cmp	r3, #4
 800b744:	d118      	bne.n	800b778 <STTEventChecker+0x140>
		if (UF.user == 0){
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <STTEventChecker+0x15c>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b00      	cmp	r3, #0
 800b752:	d111      	bne.n	800b778 <STTEventChecker+0x140>
			event = RNS_E_FINISH;
 800b754:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <STTEventChecker+0x14c>)
 800b756:	2207      	movs	r2, #7
 800b758:	701a      	strb	r2, [r3, #0]
			(*transition[state][event])();
 800b75a:	4b0b      	ldr	r3, [pc, #44]	; (800b788 <STTEventChecker+0x150>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	4b08      	ldr	r3, [pc, #32]	; (800b784 <STTEventChecker+0x14c>)
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	4619      	mov	r1, r3
 800b766:	4a09      	ldr	r2, [pc, #36]	; (800b78c <STTEventChecker+0x154>)
 800b768:	00c3      	lsls	r3, r0, #3
 800b76a:	440b      	add	r3, r1
 800b76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b770:	4798      	blx	r3
			main_board_1_data_receive.common_instruction = RNS_PENDING;
 800b772:	4b02      	ldr	r3, [pc, #8]	; (800b77c <STTEventChecker+0x144>)
 800b774:	2200      	movs	r2, #0
 800b776:	701a      	strb	r2, [r3, #0]
		}
	}


}
 800b778:	bf00      	nop
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200081c8 	.word	0x200081c8
 800b780:	20006db0 	.word	0x20006db0
 800b784:	20007c14 	.word	0x20007c14
 800b788:	20006e60 	.word	0x20006e60
 800b78c:	200001c8 	.word	0x200001c8
 800b790:	20006694 	.word	0x20006694
 800b794:	20006e30 	.word	0x20006e30

0800b798 <STTStop>:

void STTStop(void)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	af00      	add	r7, sp, #0
	APPStop();
 800b79c:	f7fe fd2a 	bl	800a1f4 <APPStop>
	state = RNS_S_PENDING;
 800b7a0:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <STTStop+0x2c>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b7a6:	4b08      	ldr	r3, [pc, #32]	; (800b7c8 <STTStop+0x30>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <STTStop+0x30>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	4a04      	ldr	r2, [pc, #16]	; (800b7c8 <STTStop+0x30>)
 800b7b6:	2114      	movs	r1, #20
 800b7b8:	4804      	ldr	r0, [pc, #16]	; (800b7cc <STTStop+0x34>)
 800b7ba:	f7f8 f86b 	bl	8003894 <CAN_TxMsg>

	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b7be:	bf00      	nop
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	20006e60 	.word	0x20006e60
 800b7c8:	2000667c 	.word	0x2000667c
 800b7cc:	200056fc 	.word	0x200056fc

0800b7d0 <STTPendingStateVelocity>:

void STTPendingStateVelocity(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction; // Velocity
 800b7d4:	4b15      	ldr	r3, [pc, #84]	; (800b82c <STTPendingStateVelocity+0x5c>)
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	4b15      	ldr	r3, [pc, #84]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b7da:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b7dc:	4b13      	ldr	r3, [pc, #76]	; (800b82c <STTPendingStateVelocity+0x5c>)
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	4a13      	ldr	r2, [pc, #76]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b7e2:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b7e4:	4b11      	ldr	r3, [pc, #68]	; (800b82c <STTPendingStateVelocity+0x5c>)
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	4a11      	ldr	r2, [pc, #68]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b7ea:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b7ec:	4b0f      	ldr	r3, [pc, #60]	; (800b82c <STTPendingStateVelocity+0x5c>)
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	4a0f      	ldr	r2, [pc, #60]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b7f2:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b7f4:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <STTPendingStateVelocity+0x5c>)
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	4a0d      	ldr	r2, [pc, #52]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b7fa:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b7fc:	480c      	ldr	r0, [pc, #48]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b7fe:	f7fe fa61 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800b802:	480b      	ldr	r0, [pc, #44]	; (800b830 <STTPendingStateVelocity+0x60>)
 800b804:	f7fe fc02 	bl	800a00c <APPStart>
	state = RNS_S_VELOCITY;
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <STTPendingStateVelocity+0x64>)
 800b80a:	2201      	movs	r2, #1
 800b80c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b80e:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <STTPendingStateVelocity+0x68>)
 800b810:	2201      	movs	r2, #1
 800b812:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b814:	4b08      	ldr	r3, [pc, #32]	; (800b838 <STTPendingStateVelocity+0x68>)
 800b816:	2200      	movs	r2, #0
 800b818:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b81a:	2302      	movs	r3, #2
 800b81c:	4a06      	ldr	r2, [pc, #24]	; (800b838 <STTPendingStateVelocity+0x68>)
 800b81e:	2114      	movs	r1, #20
 800b820:	4806      	ldr	r0, [pc, #24]	; (800b83c <STTPendingStateVelocity+0x6c>)
 800b822:	f7f8 f837 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b826:	bf00      	nop
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	200081c8 	.word	0x200081c8
 800b830:	20006694 	.word	0x20006694
 800b834:	20006e60 	.word	0x20006e60
 800b838:	2000667c 	.word	0x2000667c
 800b83c:	200056fc 	.word	0x200056fc

0800b840 <STTPendingStateLineFollow>:

void STTPendingStateLineFollow(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b844:	4b15      	ldr	r3, [pc, #84]	; (800b89c <STTPendingStateLineFollow+0x5c>)
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b84a:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b84c:	4b13      	ldr	r3, [pc, #76]	; (800b89c <STTPendingStateLineFollow+0x5c>)
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4a13      	ldr	r2, [pc, #76]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b852:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b854:	4b11      	ldr	r3, [pc, #68]	; (800b89c <STTPendingStateLineFollow+0x5c>)
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	4a11      	ldr	r2, [pc, #68]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b85a:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b85c:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <STTPendingStateLineFollow+0x5c>)
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	4a0f      	ldr	r2, [pc, #60]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b862:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b864:	4b0d      	ldr	r3, [pc, #52]	; (800b89c <STTPendingStateLineFollow+0x5c>)
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	4a0d      	ldr	r2, [pc, #52]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b86a:	6113      	str	r3, [r2, #16]


	APPApply(&ins);
 800b86c:	480c      	ldr	r0, [pc, #48]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b86e:	f7fe fa29 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800b872:	480b      	ldr	r0, [pc, #44]	; (800b8a0 <STTPendingStateLineFollow+0x60>)
 800b874:	f7fe fbca 	bl	800a00c <APPStart>
	state = RNS_S_LINE_FOLLOW;
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <STTPendingStateLineFollow+0x64>)
 800b87a:	2202      	movs	r2, #2
 800b87c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b87e:	4b0a      	ldr	r3, [pc, #40]	; (800b8a8 <STTPendingStateLineFollow+0x68>)
 800b880:	2201      	movs	r2, #1
 800b882:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b884:	4b08      	ldr	r3, [pc, #32]	; (800b8a8 <STTPendingStateLineFollow+0x68>)
 800b886:	2201      	movs	r2, #1
 800b888:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b88a:	2302      	movs	r3, #2
 800b88c:	4a06      	ldr	r2, [pc, #24]	; (800b8a8 <STTPendingStateLineFollow+0x68>)
 800b88e:	2114      	movs	r1, #20
 800b890:	4806      	ldr	r0, [pc, #24]	; (800b8ac <STTPendingStateLineFollow+0x6c>)
 800b892:	f7f7 ffff 	bl	8003894 <CAN_TxMsg>

	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b896:	bf00      	nop
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	200081c8 	.word	0x200081c8
 800b8a0:	20006694 	.word	0x20006694
 800b8a4:	20006e60 	.word	0x20006e60
 800b8a8:	2000667c 	.word	0x2000667c
 800b8ac:	200056fc 	.word	0x200056fc

0800b8b0 <STTPendingStatePathPlan>:

void STTPendingStatePathPlan(void)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b8b4:	4b15      	ldr	r3, [pc, #84]	; (800b90c <STTPendingStatePathPlan+0x5c>)
 800b8b6:	781a      	ldrb	r2, [r3, #0]
 800b8b8:	4b15      	ldr	r3, [pc, #84]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8ba:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b8bc:	4b13      	ldr	r3, [pc, #76]	; (800b90c <STTPendingStatePathPlan+0x5c>)
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4a13      	ldr	r2, [pc, #76]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8c2:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b8c4:	4b11      	ldr	r3, [pc, #68]	; (800b90c <STTPendingStatePathPlan+0x5c>)
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	4a11      	ldr	r2, [pc, #68]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8ca:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <STTPendingStatePathPlan+0x5c>)
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	4a0f      	ldr	r2, [pc, #60]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8d2:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b8d4:	4b0d      	ldr	r3, [pc, #52]	; (800b90c <STTPendingStatePathPlan+0x5c>)
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	4a0d      	ldr	r2, [pc, #52]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8da:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b8dc:	480c      	ldr	r0, [pc, #48]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8de:	f7fe f9f1 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800b8e2:	480b      	ldr	r0, [pc, #44]	; (800b910 <STTPendingStatePathPlan+0x60>)
 800b8e4:	f7fe fb92 	bl	800a00c <APPStart>
	state = RNS_S_PATH_PLAN;
 800b8e8:	4b0a      	ldr	r3, [pc, #40]	; (800b914 <STTPendingStatePathPlan+0x64>)
 800b8ea:	2203      	movs	r2, #3
 800b8ec:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <STTPendingStatePathPlan+0x68>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b8f4:	4b08      	ldr	r3, [pc, #32]	; (800b918 <STTPendingStatePathPlan+0x68>)
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	4a06      	ldr	r2, [pc, #24]	; (800b918 <STTPendingStatePathPlan+0x68>)
 800b8fe:	2114      	movs	r1, #20
 800b900:	4806      	ldr	r0, [pc, #24]	; (800b91c <STTPendingStatePathPlan+0x6c>)
 800b902:	f7f7 ffc7 	bl	8003894 <CAN_TxMsg>

	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b906:	bf00      	nop
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	200081c8 	.word	0x200081c8
 800b910:	20006694 	.word	0x20006694
 800b914:	20006e60 	.word	0x20006e60
 800b918:	2000667c 	.word	0x2000667c
 800b91c:	200056fc 	.word	0x200056fc

0800b920 <STTPendingStateUser>:

void STTPendingStateUser(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <STTPendingStateUser+0x5c>)
 800b926:	781a      	ldrb	r2, [r3, #0]
 800b928:	4b15      	ldr	r3, [pc, #84]	; (800b980 <STTPendingStateUser+0x60>)
 800b92a:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b92c:	4b13      	ldr	r3, [pc, #76]	; (800b97c <STTPendingStateUser+0x5c>)
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	4a13      	ldr	r2, [pc, #76]	; (800b980 <STTPendingStateUser+0x60>)
 800b932:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b934:	4b11      	ldr	r3, [pc, #68]	; (800b97c <STTPendingStateUser+0x5c>)
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	4a11      	ldr	r2, [pc, #68]	; (800b980 <STTPendingStateUser+0x60>)
 800b93a:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <STTPendingStateUser+0x5c>)
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4a0f      	ldr	r2, [pc, #60]	; (800b980 <STTPendingStateUser+0x60>)
 800b942:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b944:	4b0d      	ldr	r3, [pc, #52]	; (800b97c <STTPendingStateUser+0x5c>)
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	4a0d      	ldr	r2, [pc, #52]	; (800b980 <STTPendingStateUser+0x60>)
 800b94a:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800b94c:	480c      	ldr	r0, [pc, #48]	; (800b980 <STTPendingStateUser+0x60>)
 800b94e:	f7fe f9b9 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800b952:	480b      	ldr	r0, [pc, #44]	; (800b980 <STTPendingStateUser+0x60>)
 800b954:	f7fe fb5a 	bl	800a00c <APPStart>

	state = RNS_S_USER;
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <STTPendingStateUser+0x64>)
 800b95a:	2204      	movs	r2, #4
 800b95c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <STTPendingStateUser+0x68>)
 800b960:	2201      	movs	r2, #1
 800b962:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800b964:	4b08      	ldr	r3, [pc, #32]	; (800b988 <STTPendingStateUser+0x68>)
 800b966:	2201      	movs	r2, #1
 800b968:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b96a:	2302      	movs	r3, #2
 800b96c:	4a06      	ldr	r2, [pc, #24]	; (800b988 <STTPendingStateUser+0x68>)
 800b96e:	2114      	movs	r1, #20
 800b970:	4806      	ldr	r0, [pc, #24]	; (800b98c <STTPendingStateUser+0x6c>)
 800b972:	f7f7 ff8f 	bl	8003894 <CAN_TxMsg>

	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b976:	bf00      	nop
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	200081c8 	.word	0x200081c8
 800b980:	20006694 	.word	0x20006694
 800b984:	20006e60 	.word	0x20006e60
 800b988:	2000667c 	.word	0x2000667c
 800b98c:	200056fc 	.word	0x200056fc

0800b990 <STTPendingStateParam>:

void STTPendingStateParam(void)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0
	param.parameter = main_board_1_data_receive.common_instruction;
 800b994:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b996:	781a      	ldrb	r2, [r3, #0]
 800b998:	4b19      	ldr	r3, [pc, #100]	; (800ba00 <STTPendingStateParam+0x70>)
 800b99a:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800b99c:	4b17      	ldr	r3, [pc, #92]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	4a17      	ldr	r2, [pc, #92]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9a2:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800b9a4:	4b15      	ldr	r3, [pc, #84]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	4a15      	ldr	r2, [pc, #84]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9aa:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800b9ac:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	4a13      	ldr	r2, [pc, #76]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9b2:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800b9b4:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9ba:	6113      	str	r3, [r2, #16]
	param.param_buffer[4].data = main_board_1_data_receive.common_buffer[4].data;
 800b9bc:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	4a0f      	ldr	r2, [pc, #60]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9c2:	6153      	str	r3, [r2, #20]
	param.param_buffer[5].data = main_board_1_data_receive.common_buffer[5].data;
 800b9c4:	4b0d      	ldr	r3, [pc, #52]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	4a0d      	ldr	r2, [pc, #52]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9ca:	6193      	str	r3, [r2, #24]
	param.param_buffer[6].data = main_board_1_data_receive.common_buffer[6].data;
 800b9cc:	4b0b      	ldr	r3, [pc, #44]	; (800b9fc <STTPendingStateParam+0x6c>)
 800b9ce:	69db      	ldr	r3, [r3, #28]
 800b9d0:	4a0b      	ldr	r2, [pc, #44]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9d2:	61d3      	str	r3, [r2, #28]
//	sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",main_board_1_data_receive.common_buffer[0].data,main_board_1_data_receive.common_buffer[1].data,main_board_1_data_receive.common_buffer[2].data,
//			main_board_1_data_receive.common_buffer[3].data,main_board_1_data_receive.common_buffer[4].data,main_board_1_data_receive.common_buffer[5].data,main_board_1_data_receive.common_buffer[6].data);
//
//			UARTPrintString(UART5,uartbuff);

	APPSet(&param);
 800b9d4:	480a      	ldr	r0, [pc, #40]	; (800ba00 <STTPendingStateParam+0x70>)
 800b9d6:	f7fc ff0b 	bl	80087f0 <APPSet>
	state = RNS_S_PENDING;
 800b9da:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <STTPendingStateParam+0x74>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800b9e0:	4b09      	ldr	r3, [pc, #36]	; (800ba08 <STTPendingStateParam+0x78>)
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800b9e6:	4b08      	ldr	r3, [pc, #32]	; (800ba08 <STTPendingStateParam+0x78>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	4a06      	ldr	r2, [pc, #24]	; (800ba08 <STTPendingStateParam+0x78>)
 800b9f0:	2114      	movs	r1, #20
 800b9f2:	4806      	ldr	r0, [pc, #24]	; (800ba0c <STTPendingStateParam+0x7c>)
 800b9f4:	f7f7 ff4e 	bl	8003894 <CAN_TxMsg>

	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800b9f8:	bf00      	nop
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200081c8 	.word	0x200081c8
 800ba00:	200066ac 	.word	0x200066ac
 800ba04:	20006e60 	.word	0x20006e60
 800ba08:	2000667c 	.word	0x2000667c
 800ba0c:	200056fc 	.word	0x200056fc

0800ba10 <STTPendingStateEnq>:

void STTPendingStateEnq(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	af00      	add	r7, sp, #0
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800ba14:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <STTPendingStateEnq+0x54>)
 800ba16:	781a      	ldrb	r2, [r3, #0]
 800ba18:	4b13      	ldr	r3, [pc, #76]	; (800ba68 <STTPendingStateEnq+0x58>)
 800ba1a:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800ba1c:	4812      	ldr	r0, [pc, #72]	; (800ba68 <STTPendingStateEnq+0x58>)
 800ba1e:	f7fe fcbb 	bl	800a398 <APPEnquire>
	state = RNS_S_PENDING;
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <STTPendingStateEnq+0x5c>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_PENDING;
 800ba28:	4b0f      	ldr	r3, [pc, #60]	; (800ba68 <STTPendingStateEnq+0x58>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	701a      	strb	r2, [r3, #0]
	insData_send[0] = 17;
 800ba2e:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <STTPendingStateEnq+0x60>)
 800ba30:	2211      	movs	r2, #17
 800ba32:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800ba34:	4b0e      	ldr	r3, [pc, #56]	; (800ba70 <STTPendingStateEnq+0x60>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	705a      	strb	r2, [r3, #1]


	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	4a0c      	ldr	r2, [pc, #48]	; (800ba70 <STTPendingStateEnq+0x60>)
 800ba3e:	2114      	movs	r1, #20
 800ba40:	480c      	ldr	r0, [pc, #48]	; (800ba74 <STTPendingStateEnq+0x64>)
 800ba42:	f7f7 ff27 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800ba46:	2308      	movs	r3, #8
 800ba48:	4a0b      	ldr	r2, [pc, #44]	; (800ba78 <STTPendingStateEnq+0x68>)
 800ba4a:	2115      	movs	r1, #21
 800ba4c:	4809      	ldr	r0, [pc, #36]	; (800ba74 <STTPendingStateEnq+0x64>)
 800ba4e:	f7f7 ff21 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800ba52:	2308      	movs	r3, #8
 800ba54:	4a09      	ldr	r2, [pc, #36]	; (800ba7c <STTPendingStateEnq+0x6c>)
 800ba56:	2116      	movs	r1, #22
 800ba58:	4806      	ldr	r0, [pc, #24]	; (800ba74 <STTPendingStateEnq+0x64>)
 800ba5a:	f7f7 ff1b 	bl	8003894 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800ba5e:	bf00      	nop
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	200081c8 	.word	0x200081c8
 800ba68:	20007cb0 	.word	0x20007cb0
 800ba6c:	20006e60 	.word	0x20006e60
 800ba70:	2000667c 	.word	0x2000667c
 800ba74:	200056fc 	.word	0x200056fc
 800ba78:	20007cb4 	.word	0x20007cb4
 800ba7c:	20007cbc 	.word	0x20007cbc

0800ba80 <STTVelocityStateVelocity>:

void STTVelocityStateVelocity(void)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800ba84:	4b15      	ldr	r3, [pc, #84]	; (800badc <STTVelocityStateVelocity+0x5c>)
 800ba86:	781a      	ldrb	r2, [r3, #0]
 800ba88:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800ba8a:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800ba8c:	4b13      	ldr	r3, [pc, #76]	; (800badc <STTVelocityStateVelocity+0x5c>)
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a13      	ldr	r2, [pc, #76]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800ba92:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800ba94:	4b11      	ldr	r3, [pc, #68]	; (800badc <STTVelocityStateVelocity+0x5c>)
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	4a11      	ldr	r2, [pc, #68]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800ba9a:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800ba9c:	4b0f      	ldr	r3, [pc, #60]	; (800badc <STTVelocityStateVelocity+0x5c>)
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	4a0f      	ldr	r2, [pc, #60]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800baa2:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800baa4:	4b0d      	ldr	r3, [pc, #52]	; (800badc <STTVelocityStateVelocity+0x5c>)
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	4a0d      	ldr	r2, [pc, #52]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800baaa:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800baac:	480c      	ldr	r0, [pc, #48]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800baae:	f7fe f909 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800bab2:	480b      	ldr	r0, [pc, #44]	; (800bae0 <STTVelocityStateVelocity+0x60>)
 800bab4:	f7fe faaa 	bl	800a00c <APPStart>
	state = RNS_S_VELOCITY;
 800bab8:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <STTVelocityStateVelocity+0x64>)
 800baba:	2201      	movs	r2, #1
 800babc:	701a      	strb	r2, [r3, #0]
	insData_send[0] = 1;
 800babe:	4b0a      	ldr	r3, [pc, #40]	; (800bae8 <STTVelocityStateVelocity+0x68>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800bac4:	4b08      	ldr	r3, [pc, #32]	; (800bae8 <STTVelocityStateVelocity+0x68>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800baca:	2302      	movs	r3, #2
 800bacc:	4a06      	ldr	r2, [pc, #24]	; (800bae8 <STTVelocityStateVelocity+0x68>)
 800bace:	2114      	movs	r1, #20
 800bad0:	4806      	ldr	r0, [pc, #24]	; (800baec <STTVelocityStateVelocity+0x6c>)
 800bad2:	f7f7 fedf 	bl	8003894 <CAN_TxMsg>

	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif
}
 800bad6:	bf00      	nop
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	200081c8 	.word	0x200081c8
 800bae0:	20006694 	.word	0x20006694
 800bae4:	20006e60 	.word	0x20006e60
 800bae8:	2000667c 	.word	0x2000667c
 800baec:	200056fc 	.word	0x200056fc

0800baf0 <STTVelocityStateLineFollow>:

void STTVelocityStateLineFollow(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800baf4:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <STTVelocityStateLineFollow+0x5c>)
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	4b15      	ldr	r3, [pc, #84]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bafa:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800bafc:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <STTVelocityStateLineFollow+0x5c>)
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bb02:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800bb04:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <STTVelocityStateLineFollow+0x5c>)
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	4a11      	ldr	r2, [pc, #68]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bb0a:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800bb0c:	4b0f      	ldr	r3, [pc, #60]	; (800bb4c <STTVelocityStateLineFollow+0x5c>)
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	4a0f      	ldr	r2, [pc, #60]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bb12:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800bb14:	4b0d      	ldr	r3, [pc, #52]	; (800bb4c <STTVelocityStateLineFollow+0x5c>)
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	4a0d      	ldr	r2, [pc, #52]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bb1a:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800bb1c:	480c      	ldr	r0, [pc, #48]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bb1e:	f7fe f8d1 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800bb22:	480b      	ldr	r0, [pc, #44]	; (800bb50 <STTVelocityStateLineFollow+0x60>)
 800bb24:	f7fe fa72 	bl	800a00c <APPStart>

	state = RNS_S_LINE_FOLLOW;
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <STTVelocityStateLineFollow+0x64>)
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bb2e:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <STTVelocityStateLineFollow+0x68>)
 800bb30:	2201      	movs	r2, #1
 800bb32:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bb34:	4b08      	ldr	r3, [pc, #32]	; (800bb58 <STTVelocityStateLineFollow+0x68>)
 800bb36:	2201      	movs	r2, #1
 800bb38:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <STTVelocityStateLineFollow+0x68>)
 800bb3e:	2114      	movs	r1, #20
 800bb40:	4806      	ldr	r0, [pc, #24]	; (800bb5c <STTVelocityStateLineFollow+0x6c>)
 800bb42:	f7f7 fea7 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bb46:	bf00      	nop
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	200081c8 	.word	0x200081c8
 800bb50:	20006694 	.word	0x20006694
 800bb54:	20006e60 	.word	0x20006e60
 800bb58:	2000667c 	.word	0x2000667c
 800bb5c:	200056fc 	.word	0x200056fc

0800bb60 <STTVelocityStatePathPlan>:

void STTVelocityStatePathPlan(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800bb64:	4b15      	ldr	r3, [pc, #84]	; (800bbbc <STTVelocityStatePathPlan+0x5c>)
 800bb66:	781a      	ldrb	r2, [r3, #0]
 800bb68:	4b15      	ldr	r3, [pc, #84]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb6a:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800bb6c:	4b13      	ldr	r3, [pc, #76]	; (800bbbc <STTVelocityStatePathPlan+0x5c>)
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4a13      	ldr	r2, [pc, #76]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb72:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800bb74:	4b11      	ldr	r3, [pc, #68]	; (800bbbc <STTVelocityStatePathPlan+0x5c>)
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	4a11      	ldr	r2, [pc, #68]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb7a:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800bb7c:	4b0f      	ldr	r3, [pc, #60]	; (800bbbc <STTVelocityStatePathPlan+0x5c>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	4a0f      	ldr	r2, [pc, #60]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb82:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800bb84:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <STTVelocityStatePathPlan+0x5c>)
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	4a0d      	ldr	r2, [pc, #52]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb8a:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800bb8c:	480c      	ldr	r0, [pc, #48]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb8e:	f7fe f899 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800bb92:	480b      	ldr	r0, [pc, #44]	; (800bbc0 <STTVelocityStatePathPlan+0x60>)
 800bb94:	f7fe fa3a 	bl	800a00c <APPStart>
	state = RNS_S_PATH_PLAN;
 800bb98:	4b0a      	ldr	r3, [pc, #40]	; (800bbc4 <STTVelocityStatePathPlan+0x64>)
 800bb9a:	2203      	movs	r2, #3
 800bb9c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bb9e:	4b0a      	ldr	r3, [pc, #40]	; (800bbc8 <STTVelocityStatePathPlan+0x68>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bba4:	4b08      	ldr	r3, [pc, #32]	; (800bbc8 <STTVelocityStatePathPlan+0x68>)
 800bba6:	2201      	movs	r2, #1
 800bba8:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bbaa:	2302      	movs	r3, #2
 800bbac:	4a06      	ldr	r2, [pc, #24]	; (800bbc8 <STTVelocityStatePathPlan+0x68>)
 800bbae:	2114      	movs	r1, #20
 800bbb0:	4806      	ldr	r0, [pc, #24]	; (800bbcc <STTVelocityStatePathPlan+0x6c>)
 800bbb2:	f7f7 fe6f 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bbb6:	bf00      	nop
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	200081c8 	.word	0x200081c8
 800bbc0:	20006694 	.word	0x20006694
 800bbc4:	20006e60 	.word	0x20006e60
 800bbc8:	2000667c 	.word	0x2000667c
 800bbcc:	200056fc 	.word	0x200056fc

0800bbd0 <STTVelocityStateUser>:

void STTVelocityStateUser(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
	ins.instruction = main_board_1_data_receive.common_instruction;
 800bbd4:	4b15      	ldr	r3, [pc, #84]	; (800bc2c <STTVelocityStateUser+0x5c>)
 800bbd6:	781a      	ldrb	r2, [r3, #0]
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bbda:	701a      	strb	r2, [r3, #0]
	ins.ins_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800bbdc:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <STTVelocityStateUser+0x5c>)
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a13      	ldr	r2, [pc, #76]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bbe2:	6053      	str	r3, [r2, #4]
	ins.ins_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800bbe4:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <STTVelocityStateUser+0x5c>)
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	4a11      	ldr	r2, [pc, #68]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bbea:	6093      	str	r3, [r2, #8]
	ins.ins_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <STTVelocityStateUser+0x5c>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	4a0f      	ldr	r2, [pc, #60]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bbf2:	60d3      	str	r3, [r2, #12]
	ins.ins_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800bbf4:	4b0d      	ldr	r3, [pc, #52]	; (800bc2c <STTVelocityStateUser+0x5c>)
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	4a0d      	ldr	r2, [pc, #52]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bbfa:	6113      	str	r3, [r2, #16]

	APPApply(&ins);
 800bbfc:	480c      	ldr	r0, [pc, #48]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bbfe:	f7fe f861 	bl	8009cc4 <APPApply>
	APPStart(&ins);
 800bc02:	480b      	ldr	r0, [pc, #44]	; (800bc30 <STTVelocityStateUser+0x60>)
 800bc04:	f7fe fa02 	bl	800a00c <APPStart>
	state = RNS_S_USER;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <STTVelocityStateUser+0x64>)
 800bc0a:	2204      	movs	r2, #4
 800bc0c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bc0e:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <STTVelocityStateUser+0x68>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bc14:	4b08      	ldr	r3, [pc, #32]	; (800bc38 <STTVelocityStateUser+0x68>)
 800bc16:	2201      	movs	r2, #1
 800bc18:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	4a06      	ldr	r2, [pc, #24]	; (800bc38 <STTVelocityStateUser+0x68>)
 800bc1e:	2114      	movs	r1, #20
 800bc20:	4806      	ldr	r0, [pc, #24]	; (800bc3c <STTVelocityStateUser+0x6c>)
 800bc22:	f7f7 fe37 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200081c8 	.word	0x200081c8
 800bc30:	20006694 	.word	0x20006694
 800bc34:	20006e60 	.word	0x20006e60
 800bc38:	2000667c 	.word	0x2000667c
 800bc3c:	200056fc 	.word	0x200056fc

0800bc40 <STTVelocityStateParam>:

void STTVelocityStateParam(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800bc44:	4b13      	ldr	r3, [pc, #76]	; (800bc94 <STTVelocityStateParam+0x54>)
 800bc46:	781a      	ldrb	r2, [r3, #0]
 800bc48:	4b13      	ldr	r3, [pc, #76]	; (800bc98 <STTVelocityStateParam+0x58>)
 800bc4a:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800bc4c:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <STTVelocityStateParam+0x54>)
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	4a11      	ldr	r2, [pc, #68]	; (800bc98 <STTVelocityStateParam+0x58>)
 800bc52:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800bc54:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <STTVelocityStateParam+0x54>)
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	4a0f      	ldr	r2, [pc, #60]	; (800bc98 <STTVelocityStateParam+0x58>)
 800bc5a:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <STTVelocityStateParam+0x54>)
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	4a0d      	ldr	r2, [pc, #52]	; (800bc98 <STTVelocityStateParam+0x58>)
 800bc62:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800bc64:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <STTVelocityStateParam+0x54>)
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	4a0b      	ldr	r2, [pc, #44]	; (800bc98 <STTVelocityStateParam+0x58>)
 800bc6a:	6113      	str	r3, [r2, #16]
	APPSet(&param);
 800bc6c:	480a      	ldr	r0, [pc, #40]	; (800bc98 <STTVelocityStateParam+0x58>)
 800bc6e:	f7fc fdbf 	bl	80087f0 <APPSet>

	state = RNS_S_VELOCITY;
 800bc72:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <STTVelocityStateParam+0x5c>)
 800bc74:	2201      	movs	r2, #1
 800bc76:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bc78:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <STTVelocityStateParam+0x60>)
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800bc7e:	4b08      	ldr	r3, [pc, #32]	; (800bca0 <STTVelocityStateParam+0x60>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bc84:	2302      	movs	r3, #2
 800bc86:	4a06      	ldr	r2, [pc, #24]	; (800bca0 <STTVelocityStateParam+0x60>)
 800bc88:	2114      	movs	r1, #20
 800bc8a:	4806      	ldr	r0, [pc, #24]	; (800bca4 <STTVelocityStateParam+0x64>)
 800bc8c:	f7f7 fe02 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bc90:	bf00      	nop
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	200081c8 	.word	0x200081c8
 800bc98:	200066ac 	.word	0x200066ac
 800bc9c:	20006e60 	.word	0x20006e60
 800bca0:	2000667c 	.word	0x2000667c
 800bca4:	200056fc 	.word	0x200056fc

0800bca8 <STTVelocityStateEnq>:

void STTVelocityStateEnq(void)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800bcac:	4b13      	ldr	r3, [pc, #76]	; (800bcfc <STTVelocityStateEnq+0x54>)
 800bcae:	781a      	ldrb	r2, [r3, #0]
 800bcb0:	4b13      	ldr	r3, [pc, #76]	; (800bd00 <STTVelocityStateEnq+0x58>)
 800bcb2:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800bcb4:	4812      	ldr	r0, [pc, #72]	; (800bd00 <STTVelocityStateEnq+0x58>)
 800bcb6:	f7fe fb6f 	bl	800a398 <APPEnquire>
	state = RNS_S_VELOCITY;
 800bcba:	4b12      	ldr	r3, [pc, #72]	; (800bd04 <STTVelocityStateEnq+0x5c>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_PENDING;
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	; (800bd00 <STTVelocityStateEnq+0x58>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800bcc6:	4b10      	ldr	r3, [pc, #64]	; (800bd08 <STTVelocityStateEnq+0x60>)
 800bcc8:	2211      	movs	r2, #17
 800bcca:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800bccc:	4b0e      	ldr	r3, [pc, #56]	; (800bd08 <STTVelocityStateEnq+0x60>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	4a0c      	ldr	r2, [pc, #48]	; (800bd08 <STTVelocityStateEnq+0x60>)
 800bcd6:	2114      	movs	r1, #20
 800bcd8:	480c      	ldr	r0, [pc, #48]	; (800bd0c <STTVelocityStateEnq+0x64>)
 800bcda:	f7f7 fddb 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800bcde:	2308      	movs	r3, #8
 800bce0:	4a0b      	ldr	r2, [pc, #44]	; (800bd10 <STTVelocityStateEnq+0x68>)
 800bce2:	2115      	movs	r1, #21
 800bce4:	4809      	ldr	r0, [pc, #36]	; (800bd0c <STTVelocityStateEnq+0x64>)
 800bce6:	f7f7 fdd5 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800bcea:	2308      	movs	r3, #8
 800bcec:	4a09      	ldr	r2, [pc, #36]	; (800bd14 <STTVelocityStateEnq+0x6c>)
 800bcee:	2116      	movs	r1, #22
 800bcf0:	4806      	ldr	r0, [pc, #24]	; (800bd0c <STTVelocityStateEnq+0x64>)
 800bcf2:	f7f7 fdcf 	bl	8003894 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800bcf6:	bf00      	nop
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	200081c8 	.word	0x200081c8
 800bd00:	20007cb0 	.word	0x20007cb0
 800bd04:	20006e60 	.word	0x20006e60
 800bd08:	2000667c 	.word	0x2000667c
 800bd0c:	200056fc 	.word	0x200056fc
 800bd10:	20007cb4 	.word	0x20007cb4
 800bd14:	20007cbc 	.word	0x20007cbc

0800bd18 <STTLineFollowStateParam>:

void STTLineFollowStateParam(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800bd1c:	4b13      	ldr	r3, [pc, #76]	; (800bd6c <STTLineFollowStateParam+0x54>)
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	4b13      	ldr	r3, [pc, #76]	; (800bd70 <STTLineFollowStateParam+0x58>)
 800bd22:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800bd24:	4b11      	ldr	r3, [pc, #68]	; (800bd6c <STTLineFollowStateParam+0x54>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	4a11      	ldr	r2, [pc, #68]	; (800bd70 <STTLineFollowStateParam+0x58>)
 800bd2a:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800bd2c:	4b0f      	ldr	r3, [pc, #60]	; (800bd6c <STTLineFollowStateParam+0x54>)
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	4a0f      	ldr	r2, [pc, #60]	; (800bd70 <STTLineFollowStateParam+0x58>)
 800bd32:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800bd34:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <STTLineFollowStateParam+0x54>)
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	4a0d      	ldr	r2, [pc, #52]	; (800bd70 <STTLineFollowStateParam+0x58>)
 800bd3a:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <STTLineFollowStateParam+0x54>)
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	4a0b      	ldr	r2, [pc, #44]	; (800bd70 <STTLineFollowStateParam+0x58>)
 800bd42:	6113      	str	r3, [r2, #16]
	APPSet(&param);
 800bd44:	480a      	ldr	r0, [pc, #40]	; (800bd70 <STTLineFollowStateParam+0x58>)
 800bd46:	f7fc fd53 	bl	80087f0 <APPSet>

	state = RNS_S_LINE_FOLLOW;
 800bd4a:	4b0a      	ldr	r3, [pc, #40]	; (800bd74 <STTLineFollowStateParam+0x5c>)
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bd50:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <STTLineFollowStateParam+0x60>)
 800bd52:	2201      	movs	r2, #1
 800bd54:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bd56:	4b08      	ldr	r3, [pc, #32]	; (800bd78 <STTLineFollowStateParam+0x60>)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	4a06      	ldr	r2, [pc, #24]	; (800bd78 <STTLineFollowStateParam+0x60>)
 800bd60:	2114      	movs	r1, #20
 800bd62:	4806      	ldr	r0, [pc, #24]	; (800bd7c <STTLineFollowStateParam+0x64>)
 800bd64:	f7f7 fd96 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bd68:	bf00      	nop
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	200081c8 	.word	0x200081c8
 800bd70:	200066ac 	.word	0x200066ac
 800bd74:	20006e60 	.word	0x20006e60
 800bd78:	2000667c 	.word	0x2000667c
 800bd7c:	200056fc 	.word	0x200056fc

0800bd80 <STTLineFollowStateEnq>:

void STTLineFollowStateEnq(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800bd84:	4b13      	ldr	r3, [pc, #76]	; (800bdd4 <STTLineFollowStateEnq+0x54>)
 800bd86:	781a      	ldrb	r2, [r3, #0]
 800bd88:	4b13      	ldr	r3, [pc, #76]	; (800bdd8 <STTLineFollowStateEnq+0x58>)
 800bd8a:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800bd8c:	4812      	ldr	r0, [pc, #72]	; (800bdd8 <STTLineFollowStateEnq+0x58>)
 800bd8e:	f7fe fb03 	bl	800a398 <APPEnquire>
	state = RNS_S_LINE_FOLLOW;
 800bd92:	4b12      	ldr	r3, [pc, #72]	; (800bddc <STTLineFollowStateEnq+0x5c>)
 800bd94:	2202      	movs	r2, #2
 800bd96:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_BUSY;
 800bd98:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <STTLineFollowStateEnq+0x58>)
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800bd9e:	4b10      	ldr	r3, [pc, #64]	; (800bde0 <STTLineFollowStateEnq+0x60>)
 800bda0:	2211      	movs	r2, #17
 800bda2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bda4:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <STTLineFollowStateEnq+0x60>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bdaa:	2302      	movs	r3, #2
 800bdac:	4a0c      	ldr	r2, [pc, #48]	; (800bde0 <STTLineFollowStateEnq+0x60>)
 800bdae:	2114      	movs	r1, #20
 800bdb0:	480c      	ldr	r0, [pc, #48]	; (800bde4 <STTLineFollowStateEnq+0x64>)
 800bdb2:	f7f7 fd6f 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800bdb6:	2308      	movs	r3, #8
 800bdb8:	4a0b      	ldr	r2, [pc, #44]	; (800bde8 <STTLineFollowStateEnq+0x68>)
 800bdba:	2115      	movs	r1, #21
 800bdbc:	4809      	ldr	r0, [pc, #36]	; (800bde4 <STTLineFollowStateEnq+0x64>)
 800bdbe:	f7f7 fd69 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800bdc2:	2308      	movs	r3, #8
 800bdc4:	4a09      	ldr	r2, [pc, #36]	; (800bdec <STTLineFollowStateEnq+0x6c>)
 800bdc6:	2116      	movs	r1, #22
 800bdc8:	4806      	ldr	r0, [pc, #24]	; (800bde4 <STTLineFollowStateEnq+0x64>)
 800bdca:	f7f7 fd63 	bl	8003894 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,&enq.enq_buffer[2],8);
	#endif

}
 800bdce:	bf00      	nop
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	200081c8 	.word	0x200081c8
 800bdd8:	20007cb0 	.word	0x20007cb0
 800bddc:	20006e60 	.word	0x20006e60
 800bde0:	2000667c 	.word	0x2000667c
 800bde4:	200056fc 	.word	0x200056fc
 800bde8:	20007cb4 	.word	0x20007cb4
 800bdec:	20007cbc 	.word	0x20007cbc

0800bdf0 <STTPathPlanStateStop>:

void STTPathPlanStateStop(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800bdf4:	480a      	ldr	r0, [pc, #40]	; (800be20 <STTPathPlanStateStop+0x30>)
 800bdf6:	f7f9 faa4 	bl	8005342 <PP_stop>
	APPStop();
 800bdfa:	f7fe f9fb 	bl	800a1f4 <APPStop>
	// put function to stop path plan and clear the path plan related variable

	state = RNS_S_PENDING;
 800bdfe:	4b09      	ldr	r3, [pc, #36]	; (800be24 <STTPathPlanStateStop+0x34>)
 800be00:	2200      	movs	r2, #0
 800be02:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800be04:	4b08      	ldr	r3, [pc, #32]	; (800be28 <STTPathPlanStateStop+0x38>)
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <STTPathPlanStateStop+0x38>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800be10:	2302      	movs	r3, #2
 800be12:	4a05      	ldr	r2, [pc, #20]	; (800be28 <STTPathPlanStateStop+0x38>)
 800be14:	2114      	movs	r1, #20
 800be16:	4805      	ldr	r0, [pc, #20]	; (800be2c <STTPathPlanStateStop+0x3c>)
 800be18:	f7f7 fd3c 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800be1c:	bf00      	nop
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	20006864 	.word	0x20006864
 800be24:	20006e60 	.word	0x20006e60
 800be28:	2000667c 	.word	0x2000667c
 800be2c:	200056fc 	.word	0x200056fc

0800be30 <STTPathPlanStateParam>:

void STTPathPlanStateParam(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800be34:	4b13      	ldr	r3, [pc, #76]	; (800be84 <STTPathPlanStateParam+0x54>)
 800be36:	781a      	ldrb	r2, [r3, #0]
 800be38:	4b13      	ldr	r3, [pc, #76]	; (800be88 <STTPathPlanStateParam+0x58>)
 800be3a:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800be3c:	4b11      	ldr	r3, [pc, #68]	; (800be84 <STTPathPlanStateParam+0x54>)
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	4a11      	ldr	r2, [pc, #68]	; (800be88 <STTPathPlanStateParam+0x58>)
 800be42:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800be44:	4b0f      	ldr	r3, [pc, #60]	; (800be84 <STTPathPlanStateParam+0x54>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	4a0f      	ldr	r2, [pc, #60]	; (800be88 <STTPathPlanStateParam+0x58>)
 800be4a:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <STTPathPlanStateParam+0x54>)
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	4a0d      	ldr	r2, [pc, #52]	; (800be88 <STTPathPlanStateParam+0x58>)
 800be52:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800be54:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <STTPathPlanStateParam+0x54>)
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	4a0b      	ldr	r2, [pc, #44]	; (800be88 <STTPathPlanStateParam+0x58>)
 800be5a:	6113      	str	r3, [r2, #16]
	//param.param_buffer[4].data = main_board_1_data_receive.common_buffer[4].data;//
	APPSet(&param);
 800be5c:	480a      	ldr	r0, [pc, #40]	; (800be88 <STTPathPlanStateParam+0x58>)
 800be5e:	f7fc fcc7 	bl	80087f0 <APPSet>

	state = RNS_S_PATH_PLAN;
 800be62:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <STTPathPlanStateParam+0x5c>)
 800be64:	2203      	movs	r2, #3
 800be66:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800be68:	4b09      	ldr	r3, [pc, #36]	; (800be90 <STTPathPlanStateParam+0x60>)
 800be6a:	2201      	movs	r2, #1
 800be6c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800be6e:	4b08      	ldr	r3, [pc, #32]	; (800be90 <STTPathPlanStateParam+0x60>)
 800be70:	2201      	movs	r2, #1
 800be72:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800be74:	2302      	movs	r3, #2
 800be76:	4a06      	ldr	r2, [pc, #24]	; (800be90 <STTPathPlanStateParam+0x60>)
 800be78:	2114      	movs	r1, #20
 800be7a:	4806      	ldr	r0, [pc, #24]	; (800be94 <STTPathPlanStateParam+0x64>)
 800be7c:	f7f7 fd0a 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800be80:	bf00      	nop
 800be82:	bd80      	pop	{r7, pc}
 800be84:	200081c8 	.word	0x200081c8
 800be88:	200066ac 	.word	0x200066ac
 800be8c:	20006e60 	.word	0x20006e60
 800be90:	2000667c 	.word	0x2000667c
 800be94:	200056fc 	.word	0x200056fc

0800be98 <STTPathPlanStateEnq>:

void STTPathPlanStateEnq(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800be9c:	4b13      	ldr	r3, [pc, #76]	; (800beec <STTPathPlanStateEnq+0x54>)
 800be9e:	781a      	ldrb	r2, [r3, #0]
 800bea0:	4b13      	ldr	r3, [pc, #76]	; (800bef0 <STTPathPlanStateEnq+0x58>)
 800bea2:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800bea4:	4812      	ldr	r0, [pc, #72]	; (800bef0 <STTPathPlanStateEnq+0x58>)
 800bea6:	f7fe fa77 	bl	800a398 <APPEnquire>
	state = RNS_S_PATH_PLAN;
 800beaa:	4b12      	ldr	r3, [pc, #72]	; (800bef4 <STTPathPlanStateEnq+0x5c>)
 800beac:	2203      	movs	r2, #3
 800beae:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_BUSY;
 800beb0:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <STTPathPlanStateEnq+0x58>)
 800beb2:	2201      	movs	r2, #1
 800beb4:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800beb6:	4b10      	ldr	r3, [pc, #64]	; (800bef8 <STTPathPlanStateEnq+0x60>)
 800beb8:	2211      	movs	r2, #17
 800beba:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <STTPathPlanStateEnq+0x60>)
 800bebe:	2201      	movs	r2, #1
 800bec0:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bec2:	2302      	movs	r3, #2
 800bec4:	4a0c      	ldr	r2, [pc, #48]	; (800bef8 <STTPathPlanStateEnq+0x60>)
 800bec6:	2114      	movs	r1, #20
 800bec8:	480c      	ldr	r0, [pc, #48]	; (800befc <STTPathPlanStateEnq+0x64>)
 800beca:	f7f7 fce3 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800bece:	2308      	movs	r3, #8
 800bed0:	4a0b      	ldr	r2, [pc, #44]	; (800bf00 <STTPathPlanStateEnq+0x68>)
 800bed2:	2115      	movs	r1, #21
 800bed4:	4809      	ldr	r0, [pc, #36]	; (800befc <STTPathPlanStateEnq+0x64>)
 800bed6:	f7f7 fcdd 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800beda:	2308      	movs	r3, #8
 800bedc:	4a09      	ldr	r2, [pc, #36]	; (800bf04 <STTPathPlanStateEnq+0x6c>)
 800bede:	2116      	movs	r1, #22
 800bee0:	4806      	ldr	r0, [pc, #24]	; (800befc <STTPathPlanStateEnq+0x64>)
 800bee2:	f7f7 fcd7 	bl	8003894 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800bee6:	bf00      	nop
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	200081c8 	.word	0x200081c8
 800bef0:	20007cb0 	.word	0x20007cb0
 800bef4:	20006e60 	.word	0x20006e60
 800bef8:	2000667c 	.word	0x2000667c
 800befc:	200056fc 	.word	0x200056fc
 800bf00:	20007cb4 	.word	0x20007cb4
 800bf04:	20007cbc 	.word	0x20007cbc

0800bf08 <STTUserStateStop>:


void STTUserStateStop(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
	UF.flag = 0;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <STTUserStateStop+0x30>)
 800bf0e:	2200      	movs	r2, #0
 800bf10:	801a      	strh	r2, [r3, #0]
	APPStop();
 800bf12:	f7fe f96f 	bl	800a1f4 <APPStop>
	// put function to stop path plan and clear the path plan related variable

	state = RNS_S_PENDING;
 800bf16:	4b09      	ldr	r3, [pc, #36]	; (800bf3c <STTUserStateStop+0x34>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bf1c:	4b08      	ldr	r3, [pc, #32]	; (800bf40 <STTUserStateStop+0x38>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800bf22:	4b07      	ldr	r3, [pc, #28]	; (800bf40 <STTUserStateStop+0x38>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bf28:	2302      	movs	r3, #2
 800bf2a:	4a05      	ldr	r2, [pc, #20]	; (800bf40 <STTUserStateStop+0x38>)
 800bf2c:	2114      	movs	r1, #20
 800bf2e:	4805      	ldr	r0, [pc, #20]	; (800bf44 <STTUserStateStop+0x3c>)
 800bf30:	f7f7 fcb0 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bf34:	bf00      	nop
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20006e30 	.word	0x20006e30
 800bf3c:	20006e60 	.word	0x20006e60
 800bf40:	2000667c 	.word	0x2000667c
 800bf44:	200056fc 	.word	0x200056fc

0800bf48 <STTUserStateParam>:

void STTUserStateParam(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
	//arrange structure
	param.parameter = main_board_1_data_receive.common_instruction;
 800bf4c:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <STTUserStateParam+0x54>)
 800bf4e:	781a      	ldrb	r2, [r3, #0]
 800bf50:	4b13      	ldr	r3, [pc, #76]	; (800bfa0 <STTUserStateParam+0x58>)
 800bf52:	701a      	strb	r2, [r3, #0]
	param.param_buffer[0].data = main_board_1_data_receive.common_buffer[0].data;
 800bf54:	4b11      	ldr	r3, [pc, #68]	; (800bf9c <STTUserStateParam+0x54>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	4a11      	ldr	r2, [pc, #68]	; (800bfa0 <STTUserStateParam+0x58>)
 800bf5a:	6053      	str	r3, [r2, #4]
	param.param_buffer[1].data = main_board_1_data_receive.common_buffer[1].data;
 800bf5c:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <STTUserStateParam+0x54>)
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	4a0f      	ldr	r2, [pc, #60]	; (800bfa0 <STTUserStateParam+0x58>)
 800bf62:	6093      	str	r3, [r2, #8]
	param.param_buffer[2].data = main_board_1_data_receive.common_buffer[2].data;
 800bf64:	4b0d      	ldr	r3, [pc, #52]	; (800bf9c <STTUserStateParam+0x54>)
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	4a0d      	ldr	r2, [pc, #52]	; (800bfa0 <STTUserStateParam+0x58>)
 800bf6a:	60d3      	str	r3, [r2, #12]
	param.param_buffer[3].data = main_board_1_data_receive.common_buffer[3].data;
 800bf6c:	4b0b      	ldr	r3, [pc, #44]	; (800bf9c <STTUserStateParam+0x54>)
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	4a0b      	ldr	r2, [pc, #44]	; (800bfa0 <STTUserStateParam+0x58>)
 800bf72:	6113      	str	r3, [r2, #16]
//	param.param_buffer[4].data = main_board_1_data_receive.common_buffer[4].data;//
	APPSet(&param);
 800bf74:	480a      	ldr	r0, [pc, #40]	; (800bfa0 <STTUserStateParam+0x58>)
 800bf76:	f7fc fc3b 	bl	80087f0 <APPSet>

	state = RNS_S_USER;
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	; (800bfa4 <STTUserStateParam+0x5c>)
 800bf7c:	2204      	movs	r2, #4
 800bf7e:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 1;
 800bf80:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <STTUserStateParam+0x60>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bf86:	4b08      	ldr	r3, [pc, #32]	; (800bfa8 <STTUserStateParam+0x60>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	705a      	strb	r2, [r3, #1]
	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	4a06      	ldr	r2, [pc, #24]	; (800bfa8 <STTUserStateParam+0x60>)
 800bf90:	2114      	movs	r1, #20
 800bf92:	4806      	ldr	r0, [pc, #24]	; (800bfac <STTUserStateParam+0x64>)
 800bf94:	f7f7 fc7e 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800bf98:	bf00      	nop
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	200081c8 	.word	0x200081c8
 800bfa0:	200066ac 	.word	0x200066ac
 800bfa4:	20006e60 	.word	0x20006e60
 800bfa8:	2000667c 	.word	0x2000667c
 800bfac:	200056fc 	.word	0x200056fc

0800bfb0 <STTUserStateEnq>:

void STTUserStateEnq(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
	//arrange structure
	enq.enquiry = main_board_1_data_receive.common_instruction;
 800bfb4:	4b13      	ldr	r3, [pc, #76]	; (800c004 <STTUserStateEnq+0x54>)
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	4b13      	ldr	r3, [pc, #76]	; (800c008 <STTUserStateEnq+0x58>)
 800bfba:	701a      	strb	r2, [r3, #0]
	APPEnquire(&enq);
 800bfbc:	4812      	ldr	r0, [pc, #72]	; (800c008 <STTUserStateEnq+0x58>)
 800bfbe:	f7fe f9eb 	bl	800a398 <APPEnquire>
	state = RNS_S_PATH_PLAN;
 800bfc2:	4b12      	ldr	r3, [pc, #72]	; (800c00c <STTUserStateEnq+0x5c>)
 800bfc4:	2203      	movs	r2, #3
 800bfc6:	701a      	strb	r2, [r3, #0]

	enq.enquiry = RNS_BUSY;
 800bfc8:	4b0f      	ldr	r3, [pc, #60]	; (800c008 <STTUserStateEnq+0x58>)
 800bfca:	2201      	movs	r2, #1
 800bfcc:	701a      	strb	r2, [r3, #0]

	insData_send[0] = 17;
 800bfce:	4b10      	ldr	r3, [pc, #64]	; (800c010 <STTUserStateEnq+0x60>)
 800bfd0:	2211      	movs	r2, #17
 800bfd2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_BUSY;
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <STTUserStateEnq+0x60>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800bfda:	2302      	movs	r3, #2
 800bfdc:	4a0c      	ldr	r2, [pc, #48]	; (800c010 <STTUserStateEnq+0x60>)
 800bfde:	2114      	movs	r1, #20
 800bfe0:	480c      	ldr	r0, [pc, #48]	; (800c014 <STTUserStateEnq+0x64>)
 800bfe2:	f7f7 fc57 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
 800bfe6:	2308      	movs	r3, #8
 800bfe8:	4a0b      	ldr	r2, [pc, #44]	; (800c018 <STTUserStateEnq+0x68>)
 800bfea:	2115      	movs	r1, #21
 800bfec:	4809      	ldr	r0, [pc, #36]	; (800c014 <STTUserStateEnq+0x64>)
 800bfee:	f7f7 fc51 	bl	8003894 <CAN_TxMsg>
	CAN_TxMsg(&hcan1,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
 800bff2:	2308      	movs	r3, #8
 800bff4:	4a09      	ldr	r2, [pc, #36]	; (800c01c <STTUserStateEnq+0x6c>)
 800bff6:	2116      	movs	r1, #22
 800bff8:	4806      	ldr	r0, [pc, #24]	; (800c014 <STTUserStateEnq+0x64>)
 800bffa:	f7f7 fc4b 	bl	8003894 <CAN_TxMsg>
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf1,&enq.enq_buffer[0],8);
		CAN_TxMsg(&hcan2,RNS_TO_mainboard_buf2,&enq.enq_buffer[2],8);
	#endif

}
 800bffe:	bf00      	nop
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	200081c8 	.word	0x200081c8
 800c008:	20007cb0 	.word	0x20007cb0
 800c00c:	20006e60 	.word	0x20006e60
 800c010:	2000667c 	.word	0x2000667c
 800c014:	200056fc 	.word	0x200056fc
 800c018:	20007cb4 	.word	0x20007cb4
 800c01c:	20007cbc 	.word	0x20007cbc

0800c020 <STTUserStateFinish>:

void STTUserStateFinish(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0

	APPStop();
 800c024:	f7fe f8e6 	bl	800a1f4 <APPStop>

	state = RNS_S_PENDING;
 800c028:	4b06      	ldr	r3, [pc, #24]	; (800c044 <STTUserStateFinish+0x24>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	701a      	strb	r2, [r3, #0]

	insData_send[1] = RNS_PENDING;
 800c02e:	4b06      	ldr	r3, [pc, #24]	; (800c048 <STTUserStateFinish+0x28>)
 800c030:	2200      	movs	r2, #0
 800c032:	705a      	strb	r2, [r3, #1]

	#if defined USED_CAN1
	CAN_TxMsg(&hcan1,RNS_TO_mainboard,insData_send,2);
 800c034:	2302      	movs	r3, #2
 800c036:	4a04      	ldr	r2, [pc, #16]	; (800c048 <STTUserStateFinish+0x28>)
 800c038:	2114      	movs	r1, #20
 800c03a:	4804      	ldr	r0, [pc, #16]	; (800c04c <STTUserStateFinish+0x2c>)
 800c03c:	f7f7 fc2a 	bl	8003894 <CAN_TxMsg>
	#elif defined USED_CAN2
		CAN_TxMsg(&hcan2,RNS_TO_mainboard,insData_send,2);
	#endif

}
 800c040:	bf00      	nop
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20006e60 	.word	0x20006e60
 800c048:	2000667c 	.word	0x2000667c
 800c04c:	200056fc 	.word	0x200056fc

0800c050 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b08c      	sub	sp, #48	; 0x30
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800c060:	2200      	movs	r2, #0
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	2037      	movs	r0, #55	; 0x37
 800c066:	f004 f981 	bl	801036c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800c06a:	2037      	movs	r0, #55	; 0x37
 800c06c:	f004 f99a 	bl	80103a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	4b1e      	ldr	r3, [pc, #120]	; (800c0f0 <HAL_InitTick+0xa0>)
 800c076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c078:	4a1d      	ldr	r2, [pc, #116]	; (800c0f0 <HAL_InitTick+0xa0>)
 800c07a:	f043 0301 	orr.w	r3, r3, #1
 800c07e:	6413      	str	r3, [r2, #64]	; 0x40
 800c080:	4b1b      	ldr	r3, [pc, #108]	; (800c0f0 <HAL_InitTick+0xa0>)
 800c082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c084:	f003 0301 	and.w	r3, r3, #1
 800c088:	60fb      	str	r3, [r7, #12]
 800c08a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c08c:	f107 0210 	add.w	r2, r7, #16
 800c090:	f107 0314 	add.w	r3, r7, #20
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f007 f83a 	bl	8013110 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c09c:	f007 f810 	bl	80130c0 <HAL_RCC_GetPCLK1Freq>
 800c0a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	4a13      	ldr	r2, [pc, #76]	; (800c0f4 <HAL_InitTick+0xa4>)
 800c0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0aa:	0c9b      	lsrs	r3, r3, #18
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim7.Instance = TIM7;
 800c0b0:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0b2:	4a12      	ldr	r2, [pc, #72]	; (800c0fc <HAL_InitTick+0xac>)
 800c0b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800c0b6:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c0bc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800c0be:	4a0e      	ldr	r2, [pc, #56]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800c0d0:	4809      	ldr	r0, [pc, #36]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0d2:	f007 f96d 	bl	80133b0 <HAL_TIM_Base_Init>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d104      	bne.n	800c0e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800c0dc:	4806      	ldr	r0, [pc, #24]	; (800c0f8 <HAL_InitTick+0xa8>)
 800c0de:	f007 f9b6 	bl	801344e <HAL_TIM_Base_Start_IT>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	e000      	b.n	800c0e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3730      	adds	r7, #48	; 0x30
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	40023800 	.word	0x40023800
 800c0f4:	431bde83 	.word	0x431bde83
 800c0f8:	200053c8 	.word	0x200053c8
 800c0fc:	40001400 	.word	0x40001400

0800c100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c100:	b480      	push	{r7}
 800c102:	af00      	add	r7, sp, #0
	return 1;
 800c104:	2301      	movs	r3, #1
}
 800c106:	4618      	mov	r0, r3
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <_kill>:

int _kill(int pid, int sig)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800c11a:	f00d fc57 	bl	80199cc <__errno>
 800c11e:	4603      	mov	r3, r0
 800c120:	2216      	movs	r2, #22
 800c122:	601a      	str	r2, [r3, #0]
	return -1;
 800c124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <_exit>:

void _exit (int status)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800c138:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff ffe7 	bl	800c110 <_kill>
	while (1) {}		/* Make sure we hang here */
 800c142:	e7fe      	b.n	800c142 <_exit+0x12>

0800c144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c150:	2300      	movs	r3, #0
 800c152:	617b      	str	r3, [r7, #20]
 800c154:	e00a      	b.n	800c16c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800c156:	f3af 8000 	nop.w
 800c15a:	4601      	mov	r1, r0
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	60ba      	str	r2, [r7, #8]
 800c162:	b2ca      	uxtb	r2, r1
 800c164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	3301      	adds	r3, #1
 800c16a:	617b      	str	r3, [r7, #20]
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	429a      	cmp	r2, r3
 800c172:	dbf0      	blt.n	800c156 <_read+0x12>
	}

return len;
 800c174:	687b      	ldr	r3, [r7, #4]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b086      	sub	sp, #24
 800c182:	af00      	add	r7, sp, #0
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
 800c18e:	e009      	b.n	800c1a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	60ba      	str	r2, [r7, #8]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	4618      	mov	r0, r3
 800c19a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	dbf1      	blt.n	800c190 <_write+0x12>
	}
	return len;
 800c1ac:	687b      	ldr	r3, [r7, #4]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <_close>:

int _close(int file)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b083      	sub	sp, #12
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
	return -1;
 800c1be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c1de:	605a      	str	r2, [r3, #4]
	return 0;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <_isatty>:

int _isatty(int file)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b083      	sub	sp, #12
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
	return 1;
 800c1f6:	2301      	movs	r3, #1
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
	return 0;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
	...

0800c220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c228:	4a14      	ldr	r2, [pc, #80]	; (800c27c <_sbrk+0x5c>)
 800c22a:	4b15      	ldr	r3, [pc, #84]	; (800c280 <_sbrk+0x60>)
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c234:	4b13      	ldr	r3, [pc, #76]	; (800c284 <_sbrk+0x64>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c23c:	4b11      	ldr	r3, [pc, #68]	; (800c284 <_sbrk+0x64>)
 800c23e:	4a12      	ldr	r2, [pc, #72]	; (800c288 <_sbrk+0x68>)
 800c240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c242:	4b10      	ldr	r3, [pc, #64]	; (800c284 <_sbrk+0x64>)
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4413      	add	r3, r2
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d207      	bcs.n	800c260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c250:	f00d fbbc 	bl	80199cc <__errno>
 800c254:	4603      	mov	r3, r0
 800c256:	220c      	movs	r2, #12
 800c258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c25a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c25e:	e009      	b.n	800c274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c260:	4b08      	ldr	r3, [pc, #32]	; (800c284 <_sbrk+0x64>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c266:	4b07      	ldr	r3, [pc, #28]	; (800c284 <_sbrk+0x64>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4413      	add	r3, r2
 800c26e:	4a05      	ldr	r2, [pc, #20]	; (800c284 <_sbrk+0x64>)
 800c270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c272:	68fb      	ldr	r3, [r7, #12]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	20020000 	.word	0x20020000
 800c280:	00000400 	.word	0x00000400
 800c284:	20000480 	.word	0x20000480
 800c288:	20009d58 	.word	0x20009d58

0800c28c <SYSSystemInit>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

void SYSSystemInit(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af02      	add	r7, sp, #8
	/* Left position ABT*/
	ABTInit(SAMPLE_TIME, fFLeftPosGain[0], fFLeftPosGain[1], fFLeftPosGain[2], &fFLeftPosData, &fFLeftPos, &fFLeftVel, &fFLeftAcc, &fleft_pos_data);
 800c292:	4bc1      	ldr	r3, [pc, #772]	; (800c598 <SYSSystemInit+0x30c>)
 800c294:	edd3 7a00 	vldr	s15, [r3]
 800c298:	4bbf      	ldr	r3, [pc, #764]	; (800c598 <SYSSystemInit+0x30c>)
 800c29a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c29e:	4bbe      	ldr	r3, [pc, #760]	; (800c598 <SYSSystemInit+0x30c>)
 800c2a0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c2a4:	4bbd      	ldr	r3, [pc, #756]	; (800c59c <SYSSystemInit+0x310>)
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	4bbd      	ldr	r3, [pc, #756]	; (800c5a0 <SYSSystemInit+0x314>)
 800c2aa:	4abe      	ldr	r2, [pc, #760]	; (800c5a4 <SYSSystemInit+0x318>)
 800c2ac:	49be      	ldr	r1, [pc, #760]	; (800c5a8 <SYSSystemInit+0x31c>)
 800c2ae:	48bf      	ldr	r0, [pc, #764]	; (800c5ac <SYSSystemInit+0x320>)
 800c2b0:	eef0 1a66 	vmov.f32	s3, s13
 800c2b4:	eeb0 1a47 	vmov.f32	s2, s14
 800c2b8:	eef0 0a67 	vmov.f32	s1, s15
 800c2bc:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c5b0 <SYSSystemInit+0x324>
 800c2c0:	f7f4 fe94 	bl	8000fec <ABTInit>
	ABTEstimateInit(&fleft_pos_data);
 800c2c4:	48b5      	ldr	r0, [pc, #724]	; (800c59c <SYSSystemInit+0x310>)
 800c2c6:	f7f4 febe 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fBLeftPosGain[0], fBLeftPosGain[1], fBLeftPosGain[2], &fBLeftPosData, &fBLeftPos, &fBLeftVel, &fBLeftAcc, &bleft_pos_data);
 800c2ca:	4bba      	ldr	r3, [pc, #744]	; (800c5b4 <SYSSystemInit+0x328>)
 800c2cc:	edd3 7a00 	vldr	s15, [r3]
 800c2d0:	4bb8      	ldr	r3, [pc, #736]	; (800c5b4 <SYSSystemInit+0x328>)
 800c2d2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c2d6:	4bb7      	ldr	r3, [pc, #732]	; (800c5b4 <SYSSystemInit+0x328>)
 800c2d8:	edd3 6a02 	vldr	s13, [r3, #8]
 800c2dc:	4bb6      	ldr	r3, [pc, #728]	; (800c5b8 <SYSSystemInit+0x32c>)
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	4bb6      	ldr	r3, [pc, #728]	; (800c5bc <SYSSystemInit+0x330>)
 800c2e2:	4ab7      	ldr	r2, [pc, #732]	; (800c5c0 <SYSSystemInit+0x334>)
 800c2e4:	49b7      	ldr	r1, [pc, #732]	; (800c5c4 <SYSSystemInit+0x338>)
 800c2e6:	48b8      	ldr	r0, [pc, #736]	; (800c5c8 <SYSSystemInit+0x33c>)
 800c2e8:	eef0 1a66 	vmov.f32	s3, s13
 800c2ec:	eeb0 1a47 	vmov.f32	s2, s14
 800c2f0:	eef0 0a67 	vmov.f32	s1, s15
 800c2f4:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800c5b0 <SYSSystemInit+0x324>
 800c2f8:	f7f4 fe78 	bl	8000fec <ABTInit>
	ABTEstimateInit(&bleft_pos_data);
 800c2fc:	48ae      	ldr	r0, [pc, #696]	; (800c5b8 <SYSSystemInit+0x32c>)
 800c2fe:	f7f4 fea2 	bl	8001046 <ABTEstimateInit>

	/* Right position ABT */
	ABTInit(SAMPLE_TIME, fFRightPosGain[0], fFRightPosGain[1], fFRightPosGain[2], &fFRightPosData, &fFRightPos, &fFRightVel, &fFRightAcc, &fright_pos_data);
 800c302:	4bb2      	ldr	r3, [pc, #712]	; (800c5cc <SYSSystemInit+0x340>)
 800c304:	edd3 7a00 	vldr	s15, [r3]
 800c308:	4bb0      	ldr	r3, [pc, #704]	; (800c5cc <SYSSystemInit+0x340>)
 800c30a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c30e:	4baf      	ldr	r3, [pc, #700]	; (800c5cc <SYSSystemInit+0x340>)
 800c310:	edd3 6a02 	vldr	s13, [r3, #8]
 800c314:	4bae      	ldr	r3, [pc, #696]	; (800c5d0 <SYSSystemInit+0x344>)
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	4bae      	ldr	r3, [pc, #696]	; (800c5d4 <SYSSystemInit+0x348>)
 800c31a:	4aaf      	ldr	r2, [pc, #700]	; (800c5d8 <SYSSystemInit+0x34c>)
 800c31c:	49af      	ldr	r1, [pc, #700]	; (800c5dc <SYSSystemInit+0x350>)
 800c31e:	48b0      	ldr	r0, [pc, #704]	; (800c5e0 <SYSSystemInit+0x354>)
 800c320:	eef0 1a66 	vmov.f32	s3, s13
 800c324:	eeb0 1a47 	vmov.f32	s2, s14
 800c328:	eef0 0a67 	vmov.f32	s1, s15
 800c32c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800c5b0 <SYSSystemInit+0x324>
 800c330:	f7f4 fe5c 	bl	8000fec <ABTInit>
	ABTEstimateInit(&fright_pos_data);
 800c334:	48a6      	ldr	r0, [pc, #664]	; (800c5d0 <SYSSystemInit+0x344>)
 800c336:	f7f4 fe86 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fBRightPosGain[0], fBRightPosGain[1], fBRightPosGain[2], &fBRightPosData, &fBRightPos, &fBRightVel, &fBRightAcc, &bright_pos_data);
 800c33a:	4baa      	ldr	r3, [pc, #680]	; (800c5e4 <SYSSystemInit+0x358>)
 800c33c:	edd3 7a00 	vldr	s15, [r3]
 800c340:	4ba8      	ldr	r3, [pc, #672]	; (800c5e4 <SYSSystemInit+0x358>)
 800c342:	ed93 7a01 	vldr	s14, [r3, #4]
 800c346:	4ba7      	ldr	r3, [pc, #668]	; (800c5e4 <SYSSystemInit+0x358>)
 800c348:	edd3 6a02 	vldr	s13, [r3, #8]
 800c34c:	4ba6      	ldr	r3, [pc, #664]	; (800c5e8 <SYSSystemInit+0x35c>)
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	4ba6      	ldr	r3, [pc, #664]	; (800c5ec <SYSSystemInit+0x360>)
 800c352:	4aa7      	ldr	r2, [pc, #668]	; (800c5f0 <SYSSystemInit+0x364>)
 800c354:	49a7      	ldr	r1, [pc, #668]	; (800c5f4 <SYSSystemInit+0x368>)
 800c356:	48a8      	ldr	r0, [pc, #672]	; (800c5f8 <SYSSystemInit+0x36c>)
 800c358:	eef0 1a66 	vmov.f32	s3, s13
 800c35c:	eeb0 1a47 	vmov.f32	s2, s14
 800c360:	eef0 0a67 	vmov.f32	s1, s15
 800c364:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800c5b0 <SYSSystemInit+0x324>
 800c368:	f7f4 fe40 	bl	8000fec <ABTInit>
	ABTEstimateInit(&bright_pos_data);
 800c36c:	489e      	ldr	r0, [pc, #632]	; (800c5e8 <SYSSystemInit+0x35c>)
 800c36e:	f7f4 fe6a 	bl	8001046 <ABTEstimateInit>

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData ,&fXPos, &fXVel, &fXAcc, &x_data);
 800c372:	4ba2      	ldr	r3, [pc, #648]	; (800c5fc <SYSSystemInit+0x370>)
 800c374:	edd3 7a00 	vldr	s15, [r3]
 800c378:	4ba0      	ldr	r3, [pc, #640]	; (800c5fc <SYSSystemInit+0x370>)
 800c37a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c37e:	4b9f      	ldr	r3, [pc, #636]	; (800c5fc <SYSSystemInit+0x370>)
 800c380:	edd3 6a02 	vldr	s13, [r3, #8]
 800c384:	4b9e      	ldr	r3, [pc, #632]	; (800c600 <SYSSystemInit+0x374>)
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	4b9e      	ldr	r3, [pc, #632]	; (800c604 <SYSSystemInit+0x378>)
 800c38a:	4a9f      	ldr	r2, [pc, #636]	; (800c608 <SYSSystemInit+0x37c>)
 800c38c:	499f      	ldr	r1, [pc, #636]	; (800c60c <SYSSystemInit+0x380>)
 800c38e:	48a0      	ldr	r0, [pc, #640]	; (800c610 <SYSSystemInit+0x384>)
 800c390:	eef0 1a66 	vmov.f32	s3, s13
 800c394:	eeb0 1a47 	vmov.f32	s2, s14
 800c398:	eef0 0a67 	vmov.f32	s1, s15
 800c39c:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800c5b0 <SYSSystemInit+0x324>
 800c3a0:	f7f4 fe24 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800c3a4:	4896      	ldr	r0, [pc, #600]	; (800c600 <SYSSystemInit+0x374>)
 800c3a6:	f7f4 fe4e 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800c3aa:	4b9a      	ldr	r3, [pc, #616]	; (800c614 <SYSSystemInit+0x388>)
 800c3ac:	edd3 7a00 	vldr	s15, [r3]
 800c3b0:	4b98      	ldr	r3, [pc, #608]	; (800c614 <SYSSystemInit+0x388>)
 800c3b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c3b6:	4b97      	ldr	r3, [pc, #604]	; (800c614 <SYSSystemInit+0x388>)
 800c3b8:	edd3 6a02 	vldr	s13, [r3, #8]
 800c3bc:	4b96      	ldr	r3, [pc, #600]	; (800c618 <SYSSystemInit+0x38c>)
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	4b96      	ldr	r3, [pc, #600]	; (800c61c <SYSSystemInit+0x390>)
 800c3c2:	4a97      	ldr	r2, [pc, #604]	; (800c620 <SYSSystemInit+0x394>)
 800c3c4:	4997      	ldr	r1, [pc, #604]	; (800c624 <SYSSystemInit+0x398>)
 800c3c6:	4898      	ldr	r0, [pc, #608]	; (800c628 <SYSSystemInit+0x39c>)
 800c3c8:	eef0 1a66 	vmov.f32	s3, s13
 800c3cc:	eeb0 1a47 	vmov.f32	s2, s14
 800c3d0:	eef0 0a67 	vmov.f32	s1, s15
 800c3d4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800c5b0 <SYSSystemInit+0x324>
 800c3d8:	f7f4 fe08 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800c3dc:	488e      	ldr	r0, [pc, #568]	; (800c618 <SYSSystemInit+0x38c>)
 800c3de:	f7f4 fe32 	bl	8001046 <ABTEstimateInit>

	//FUZZYPID
	/* Left velocity PID*/
	FuzzyPIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fuz_fleft_vel);
 800c3e2:	4a92      	ldr	r2, [pc, #584]	; (800c62c <SYSSystemInit+0x3a0>)
 800c3e4:	4992      	ldr	r1, [pc, #584]	; (800c630 <SYSSystemInit+0x3a4>)
 800c3e6:	4893      	ldr	r0, [pc, #588]	; (800c634 <SYSSystemInit+0x3a8>)
 800c3e8:	f7f7 fab1 	bl	800394e <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzFLeftVG[0], fFuzFLeftVG[1], fFuzFLeftVG[2], fFuzFLeftVG[3], fFuzFLeftVG[4], fFuzFLeftVG[5], fFuzFLeftVG[6], fFuzFLeftVG[7],fFuzFLeftVG[8],fFuzFLeftVG[9], &fuz_fleft_vel);
 800c3ec:	4b92      	ldr	r3, [pc, #584]	; (800c638 <SYSSystemInit+0x3ac>)
 800c3ee:	edd3 7a00 	vldr	s15, [r3]
 800c3f2:	4b91      	ldr	r3, [pc, #580]	; (800c638 <SYSSystemInit+0x3ac>)
 800c3f4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c3f8:	4b8f      	ldr	r3, [pc, #572]	; (800c638 <SYSSystemInit+0x3ac>)
 800c3fa:	edd3 6a02 	vldr	s13, [r3, #8]
 800c3fe:	4b8e      	ldr	r3, [pc, #568]	; (800c638 <SYSSystemInit+0x3ac>)
 800c400:	ed93 6a03 	vldr	s12, [r3, #12]
 800c404:	4b8c      	ldr	r3, [pc, #560]	; (800c638 <SYSSystemInit+0x3ac>)
 800c406:	edd3 5a04 	vldr	s11, [r3, #16]
 800c40a:	4b8b      	ldr	r3, [pc, #556]	; (800c638 <SYSSystemInit+0x3ac>)
 800c40c:	ed93 5a05 	vldr	s10, [r3, #20]
 800c410:	4b89      	ldr	r3, [pc, #548]	; (800c638 <SYSSystemInit+0x3ac>)
 800c412:	ed93 3a06 	vldr	s6, [r3, #24]
 800c416:	4b88      	ldr	r3, [pc, #544]	; (800c638 <SYSSystemInit+0x3ac>)
 800c418:	edd3 3a07 	vldr	s7, [r3, #28]
 800c41c:	4b86      	ldr	r3, [pc, #536]	; (800c638 <SYSSystemInit+0x3ac>)
 800c41e:	ed93 4a08 	vldr	s8, [r3, #32]
 800c422:	4b85      	ldr	r3, [pc, #532]	; (800c638 <SYSSystemInit+0x3ac>)
 800c424:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800c428:	4880      	ldr	r0, [pc, #512]	; (800c62c <SYSSystemInit+0x3a0>)
 800c42a:	eef0 2a45 	vmov.f32	s5, s10
 800c42e:	eeb0 2a65 	vmov.f32	s4, s11
 800c432:	eef0 1a46 	vmov.f32	s3, s12
 800c436:	eeb0 1a66 	vmov.f32	s2, s13
 800c43a:	eef0 0a47 	vmov.f32	s1, s14
 800c43e:	eeb0 0a67 	vmov.f32	s0, s15
 800c442:	f7f7 fa9d 	bl	8003980 <FuzzyPIDGainInit>

	FuzzyPIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &fuz_bleft_vel);
 800c446:	4a7d      	ldr	r2, [pc, #500]	; (800c63c <SYSSystemInit+0x3b0>)
 800c448:	497d      	ldr	r1, [pc, #500]	; (800c640 <SYSSystemInit+0x3b4>)
 800c44a:	487e      	ldr	r0, [pc, #504]	; (800c644 <SYSSystemInit+0x3b8>)
 800c44c:	f7f7 fa7f 	bl	800394e <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzBLeftVG[0], fFuzBLeftVG[1], fFuzBLeftVG[2], fFuzBLeftVG[3], fFuzBLeftVG[4], fFuzBLeftVG[5], fFuzBLeftVG[6], fFuzBLeftVG[7], fFuzBLeftVG[8], fFuzBLeftVG[9], &fuz_bleft_vel);
 800c450:	4b7d      	ldr	r3, [pc, #500]	; (800c648 <SYSSystemInit+0x3bc>)
 800c452:	edd3 7a00 	vldr	s15, [r3]
 800c456:	4b7c      	ldr	r3, [pc, #496]	; (800c648 <SYSSystemInit+0x3bc>)
 800c458:	ed93 7a01 	vldr	s14, [r3, #4]
 800c45c:	4b7a      	ldr	r3, [pc, #488]	; (800c648 <SYSSystemInit+0x3bc>)
 800c45e:	edd3 6a02 	vldr	s13, [r3, #8]
 800c462:	4b79      	ldr	r3, [pc, #484]	; (800c648 <SYSSystemInit+0x3bc>)
 800c464:	ed93 6a03 	vldr	s12, [r3, #12]
 800c468:	4b77      	ldr	r3, [pc, #476]	; (800c648 <SYSSystemInit+0x3bc>)
 800c46a:	edd3 5a04 	vldr	s11, [r3, #16]
 800c46e:	4b76      	ldr	r3, [pc, #472]	; (800c648 <SYSSystemInit+0x3bc>)
 800c470:	ed93 5a05 	vldr	s10, [r3, #20]
 800c474:	4b74      	ldr	r3, [pc, #464]	; (800c648 <SYSSystemInit+0x3bc>)
 800c476:	ed93 3a06 	vldr	s6, [r3, #24]
 800c47a:	4b73      	ldr	r3, [pc, #460]	; (800c648 <SYSSystemInit+0x3bc>)
 800c47c:	edd3 3a07 	vldr	s7, [r3, #28]
 800c480:	4b71      	ldr	r3, [pc, #452]	; (800c648 <SYSSystemInit+0x3bc>)
 800c482:	ed93 4a08 	vldr	s8, [r3, #32]
 800c486:	4b70      	ldr	r3, [pc, #448]	; (800c648 <SYSSystemInit+0x3bc>)
 800c488:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800c48c:	486b      	ldr	r0, [pc, #428]	; (800c63c <SYSSystemInit+0x3b0>)
 800c48e:	eef0 2a45 	vmov.f32	s5, s10
 800c492:	eeb0 2a65 	vmov.f32	s4, s11
 800c496:	eef0 1a46 	vmov.f32	s3, s12
 800c49a:	eeb0 1a66 	vmov.f32	s2, s13
 800c49e:	eef0 0a47 	vmov.f32	s1, s14
 800c4a2:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a6:	f7f7 fa6b 	bl	8003980 <FuzzyPIDGainInit>

	/* Right velocity PID*/
	FuzzyPIDSourceInit(&fFRightVelErr, &fFRightVelU, &fuz_fright_vel);
 800c4aa:	4a68      	ldr	r2, [pc, #416]	; (800c64c <SYSSystemInit+0x3c0>)
 800c4ac:	4968      	ldr	r1, [pc, #416]	; (800c650 <SYSSystemInit+0x3c4>)
 800c4ae:	4869      	ldr	r0, [pc, #420]	; (800c654 <SYSSystemInit+0x3c8>)
 800c4b0:	f7f7 fa4d 	bl	800394e <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzFRightVG[0], fFuzFRightVG[1], fFuzFRightVG[2], fFuzFRightVG[3], fFuzFRightVG[4], fFuzFRightVG[5], fFuzFRightVG[6], fFuzFRightVG[7], fFuzFRightVG[8], fFuzFRightVG[9], &fuz_fright_vel);
 800c4b4:	4b68      	ldr	r3, [pc, #416]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4b6:	edd3 7a00 	vldr	s15, [r3]
 800c4ba:	4b67      	ldr	r3, [pc, #412]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800c4c0:	4b65      	ldr	r3, [pc, #404]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4c2:	edd3 6a02 	vldr	s13, [r3, #8]
 800c4c6:	4b64      	ldr	r3, [pc, #400]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4c8:	ed93 6a03 	vldr	s12, [r3, #12]
 800c4cc:	4b62      	ldr	r3, [pc, #392]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4ce:	edd3 5a04 	vldr	s11, [r3, #16]
 800c4d2:	4b61      	ldr	r3, [pc, #388]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4d4:	ed93 5a05 	vldr	s10, [r3, #20]
 800c4d8:	4b5f      	ldr	r3, [pc, #380]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4da:	ed93 3a06 	vldr	s6, [r3, #24]
 800c4de:	4b5e      	ldr	r3, [pc, #376]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4e0:	edd3 3a07 	vldr	s7, [r3, #28]
 800c4e4:	4b5c      	ldr	r3, [pc, #368]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4e6:	ed93 4a08 	vldr	s8, [r3, #32]
 800c4ea:	4b5b      	ldr	r3, [pc, #364]	; (800c658 <SYSSystemInit+0x3cc>)
 800c4ec:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800c4f0:	4856      	ldr	r0, [pc, #344]	; (800c64c <SYSSystemInit+0x3c0>)
 800c4f2:	eef0 2a45 	vmov.f32	s5, s10
 800c4f6:	eeb0 2a65 	vmov.f32	s4, s11
 800c4fa:	eef0 1a46 	vmov.f32	s3, s12
 800c4fe:	eeb0 1a66 	vmov.f32	s2, s13
 800c502:	eef0 0a47 	vmov.f32	s1, s14
 800c506:	eeb0 0a67 	vmov.f32	s0, s15
 800c50a:	f7f7 fa39 	bl	8003980 <FuzzyPIDGainInit>

	FuzzyPIDSourceInit(&fBRightVelErr, &fBRightVelU, &fuz_bright_vel);
 800c50e:	4a53      	ldr	r2, [pc, #332]	; (800c65c <SYSSystemInit+0x3d0>)
 800c510:	4953      	ldr	r1, [pc, #332]	; (800c660 <SYSSystemInit+0x3d4>)
 800c512:	4854      	ldr	r0, [pc, #336]	; (800c664 <SYSSystemInit+0x3d8>)
 800c514:	f7f7 fa1b 	bl	800394e <FuzzyPIDSourceInit>
	FuzzyPIDGainInit(fFuzBRightVG[0], fFuzBRightVG[1], fFuzBRightVG[2], fFuzBRightVG[3], fFuzBRightVG[4], fFuzBRightVG[5], fFuzBRightVG[6], fFuzBRightVG[7], fFuzBRightVG[8], fFuzBRightVG[9], &fuz_bright_vel);
 800c518:	4b53      	ldr	r3, [pc, #332]	; (800c668 <SYSSystemInit+0x3dc>)
 800c51a:	edd3 7a00 	vldr	s15, [r3]
 800c51e:	4b52      	ldr	r3, [pc, #328]	; (800c668 <SYSSystemInit+0x3dc>)
 800c520:	ed93 7a01 	vldr	s14, [r3, #4]
 800c524:	4b50      	ldr	r3, [pc, #320]	; (800c668 <SYSSystemInit+0x3dc>)
 800c526:	edd3 6a02 	vldr	s13, [r3, #8]
 800c52a:	4b4f      	ldr	r3, [pc, #316]	; (800c668 <SYSSystemInit+0x3dc>)
 800c52c:	ed93 6a03 	vldr	s12, [r3, #12]
 800c530:	4b4d      	ldr	r3, [pc, #308]	; (800c668 <SYSSystemInit+0x3dc>)
 800c532:	edd3 5a04 	vldr	s11, [r3, #16]
 800c536:	4b4c      	ldr	r3, [pc, #304]	; (800c668 <SYSSystemInit+0x3dc>)
 800c538:	ed93 5a05 	vldr	s10, [r3, #20]
 800c53c:	4b4a      	ldr	r3, [pc, #296]	; (800c668 <SYSSystemInit+0x3dc>)
 800c53e:	ed93 3a06 	vldr	s6, [r3, #24]
 800c542:	4b49      	ldr	r3, [pc, #292]	; (800c668 <SYSSystemInit+0x3dc>)
 800c544:	edd3 3a07 	vldr	s7, [r3, #28]
 800c548:	4b47      	ldr	r3, [pc, #284]	; (800c668 <SYSSystemInit+0x3dc>)
 800c54a:	ed93 4a08 	vldr	s8, [r3, #32]
 800c54e:	4b46      	ldr	r3, [pc, #280]	; (800c668 <SYSSystemInit+0x3dc>)
 800c550:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800c554:	4841      	ldr	r0, [pc, #260]	; (800c65c <SYSSystemInit+0x3d0>)
 800c556:	eef0 2a45 	vmov.f32	s5, s10
 800c55a:	eeb0 2a65 	vmov.f32	s4, s11
 800c55e:	eef0 1a46 	vmov.f32	s3, s12
 800c562:	eeb0 1a66 	vmov.f32	s2, s13
 800c566:	eef0 0a47 	vmov.f32	s1, s14
 800c56a:	eeb0 0a67 	vmov.f32	s0, s15
 800c56e:	f7f7 fa07 	bl	8003980 <FuzzyPIDGainInit>

	//ROBOCONPID
	/* Left velocity PID*/
	PIDSourceInit(&fFLeftVelErr, &fFLeftVelU, &fleft_vel);
 800c572:	4a3e      	ldr	r2, [pc, #248]	; (800c66c <SYSSystemInit+0x3e0>)
 800c574:	492e      	ldr	r1, [pc, #184]	; (800c630 <SYSSystemInit+0x3a4>)
 800c576:	482f      	ldr	r0, [pc, #188]	; (800c634 <SYSSystemInit+0x3a8>)
 800c578:	f7f8 f8f2 	bl	8004760 <PIDSourceInit>
	PIDDelayInit(&fleft_vel);
 800c57c:	483b      	ldr	r0, [pc, #236]	; (800c66c <SYSSystemInit+0x3e0>)
 800c57e:	f7f8 fa86 	bl	8004a8e <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFLeftVG[0], fFLeftVG[1], fFLeftVG[2], fFLeftVG[3], fFLeftVG[4], fFLeftVG[5], fFLeftVG[6], &fleft_vel);
 800c582:	4b3b      	ldr	r3, [pc, #236]	; (800c670 <SYSSystemInit+0x3e4>)
 800c584:	edd3 7a00 	vldr	s15, [r3]
 800c588:	4b39      	ldr	r3, [pc, #228]	; (800c670 <SYSSystemInit+0x3e4>)
 800c58a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c58e:	4b38      	ldr	r3, [pc, #224]	; (800c670 <SYSSystemInit+0x3e4>)
 800c590:	edd3 6a02 	vldr	s13, [r3, #8]
 800c594:	e06e      	b.n	800c674 <SYSSystemInit+0x3e8>
 800c596:	bf00      	nop
 800c598:	20000000 	.word	0x20000000
 800c59c:	20007a68 	.word	0x20007a68
 800c5a0:	200065c4 	.word	0x200065c4
 800c5a4:	2000809c 	.word	0x2000809c
 800c5a8:	200080c8 	.word	0x200080c8
 800c5ac:	2000796c 	.word	0x2000796c
 800c5b0:	3ba3d70a 	.word	0x3ba3d70a
 800c5b4:	20000018 	.word	0x20000018
 800c5b8:	20007748 	.word	0x20007748
 800c5bc:	20006e20 	.word	0x20006e20
 800c5c0:	20006e1c 	.word	0x20006e1c
 800c5c4:	2000812c 	.word	0x2000812c
 800c5c8:	20006dc0 	.word	0x20006dc0
 800c5cc:	2000000c 	.word	0x2000000c
 800c5d0:	20007f28 	.word	0x20007f28
 800c5d4:	2000808c 	.word	0x2000808c
 800c5d8:	20006f54 	.word	0x20006f54
 800c5dc:	20006f4c 	.word	0x20006f4c
 800c5e0:	20006dac 	.word	0x20006dac
 800c5e4:	20000024 	.word	0x20000024
 800c5e8:	20007da8 	.word	0x20007da8
 800c5ec:	20007cd0 	.word	0x20007cd0
 800c5f0:	20007450 	.word	0x20007450
 800c5f4:	20006db8 	.word	0x20006db8
 800c5f8:	200081c0 	.word	0x200081c0
 800c5fc:	20000030 	.word	0x20000030
 800c600:	200080a0 	.word	0x200080a0
 800c604:	20006674 	.word	0x20006674
 800c608:	20007c0c 	.word	0x20007c0c
 800c60c:	20007da4 	.word	0x20007da4
 800c610:	200066a8 	.word	0x200066a8
 800c614:	2000003c 	.word	0x2000003c
 800c618:	20006e6c 	.word	0x20006e6c
 800c61c:	20006da4 	.word	0x20006da4
 800c620:	20006818 	.word	0x20006818
 800c624:	20007c00 	.word	0x20007c00
 800c628:	200080c0 	.word	0x200080c0
 800c62c:	20007c24 	.word	0x20007c24
 800c630:	20006e8c 	.word	0x20006e8c
 800c634:	20006e68 	.word	0x20006e68
 800c638:	20000048 	.word	0x20000048
 800c63c:	20007de0 	.word	0x20007de0
 800c640:	20006744 	.word	0x20006744
 800c644:	20007f50 	.word	0x20007f50
 800c648:	20000098 	.word	0x20000098
 800c64c:	20007ae4 	.word	0x20007ae4
 800c650:	20006688 	.word	0x20006688
 800c654:	200073dc 	.word	0x200073dc
 800c658:	20000070 	.word	0x20000070
 800c65c:	20008010 	.word	0x20008010
 800c660:	200065b4 	.word	0x200065b4
 800c664:	20006684 	.word	0x20006684
 800c668:	200000c0 	.word	0x200000c0
 800c66c:	20006e90 	.word	0x20006e90
 800c670:	200000e8 	.word	0x200000e8
 800c674:	4bcd      	ldr	r3, [pc, #820]	; (800c9ac <SYSSystemInit+0x720>)
 800c676:	ed93 6a03 	vldr	s12, [r3, #12]
 800c67a:	4bcc      	ldr	r3, [pc, #816]	; (800c9ac <SYSSystemInit+0x720>)
 800c67c:	edd3 5a04 	vldr	s11, [r3, #16]
 800c680:	4bca      	ldr	r3, [pc, #808]	; (800c9ac <SYSSystemInit+0x720>)
 800c682:	ed93 5a05 	vldr	s10, [r3, #20]
 800c686:	4bc9      	ldr	r3, [pc, #804]	; (800c9ac <SYSSystemInit+0x720>)
 800c688:	edd3 4a06 	vldr	s9, [r3, #24]
 800c68c:	48c8      	ldr	r0, [pc, #800]	; (800c9b0 <SYSSystemInit+0x724>)
 800c68e:	eef0 3a64 	vmov.f32	s7, s9
 800c692:	eeb0 3a45 	vmov.f32	s6, s10
 800c696:	eef0 2a65 	vmov.f32	s5, s11
 800c69a:	eeb0 2a46 	vmov.f32	s4, s12
 800c69e:	eef0 1a66 	vmov.f32	s3, s13
 800c6a2:	eeb0 1a47 	vmov.f32	s2, s14
 800c6a6:	eef0 0a67 	vmov.f32	s1, s15
 800c6aa:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800c9b4 <SYSSystemInit+0x728>
 800c6ae:	f7f8 f869 	bl	8004784 <PIDGainInit>

	PIDSourceInit(&fBLeftVelErr, &fBLeftVelU, &bleft_vel);
 800c6b2:	4ac1      	ldr	r2, [pc, #772]	; (800c9b8 <SYSSystemInit+0x72c>)
 800c6b4:	49c1      	ldr	r1, [pc, #772]	; (800c9bc <SYSSystemInit+0x730>)
 800c6b6:	48c2      	ldr	r0, [pc, #776]	; (800c9c0 <SYSSystemInit+0x734>)
 800c6b8:	f7f8 f852 	bl	8004760 <PIDSourceInit>
	PIDDelayInit(&bleft_vel);
 800c6bc:	48be      	ldr	r0, [pc, #760]	; (800c9b8 <SYSSystemInit+0x72c>)
 800c6be:	f7f8 f9e6 	bl	8004a8e <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBLeftVG[0], fBLeftVG[1], fBLeftVG[2], fBLeftVG[3], fBLeftVG[4], fBLeftVG[5], fBLeftVG[6], &bleft_vel);
 800c6c2:	4bc0      	ldr	r3, [pc, #768]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6c4:	edd3 7a00 	vldr	s15, [r3]
 800c6c8:	4bbe      	ldr	r3, [pc, #760]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6ca:	ed93 7a01 	vldr	s14, [r3, #4]
 800c6ce:	4bbd      	ldr	r3, [pc, #756]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6d0:	edd3 6a02 	vldr	s13, [r3, #8]
 800c6d4:	4bbb      	ldr	r3, [pc, #748]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6d6:	ed93 6a03 	vldr	s12, [r3, #12]
 800c6da:	4bba      	ldr	r3, [pc, #744]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6dc:	edd3 5a04 	vldr	s11, [r3, #16]
 800c6e0:	4bb8      	ldr	r3, [pc, #736]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6e2:	ed93 5a05 	vldr	s10, [r3, #20]
 800c6e6:	4bb7      	ldr	r3, [pc, #732]	; (800c9c4 <SYSSystemInit+0x738>)
 800c6e8:	edd3 4a06 	vldr	s9, [r3, #24]
 800c6ec:	48b2      	ldr	r0, [pc, #712]	; (800c9b8 <SYSSystemInit+0x72c>)
 800c6ee:	eef0 3a64 	vmov.f32	s7, s9
 800c6f2:	eeb0 3a45 	vmov.f32	s6, s10
 800c6f6:	eef0 2a65 	vmov.f32	s5, s11
 800c6fa:	eeb0 2a46 	vmov.f32	s4, s12
 800c6fe:	eef0 1a66 	vmov.f32	s3, s13
 800c702:	eeb0 1a47 	vmov.f32	s2, s14
 800c706:	eef0 0a67 	vmov.f32	s1, s15
 800c70a:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800c9b4 <SYSSystemInit+0x728>
 800c70e:	f7f8 f839 	bl	8004784 <PIDGainInit>

	/* Right velocity PID*/
	PIDSourceInit(&fFRightVelErr, &fFRightVelU, &fright_vel);
 800c712:	4aad      	ldr	r2, [pc, #692]	; (800c9c8 <SYSSystemInit+0x73c>)
 800c714:	49ad      	ldr	r1, [pc, #692]	; (800c9cc <SYSSystemInit+0x740>)
 800c716:	48ae      	ldr	r0, [pc, #696]	; (800c9d0 <SYSSystemInit+0x744>)
 800c718:	f7f8 f822 	bl	8004760 <PIDSourceInit>
	PIDDelayInit(&fright_vel);
 800c71c:	48aa      	ldr	r0, [pc, #680]	; (800c9c8 <SYSSystemInit+0x73c>)
 800c71e:	f7f8 f9b6 	bl	8004a8e <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fFRightVG[0], fFRightVG[1], fFRightVG[2], fFRightVG[3], fFRightVG[4], fFRightVG[5], fFRightVG[6], &fright_vel);
 800c722:	4bac      	ldr	r3, [pc, #688]	; (800c9d4 <SYSSystemInit+0x748>)
 800c724:	edd3 7a00 	vldr	s15, [r3]
 800c728:	4baa      	ldr	r3, [pc, #680]	; (800c9d4 <SYSSystemInit+0x748>)
 800c72a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c72e:	4ba9      	ldr	r3, [pc, #676]	; (800c9d4 <SYSSystemInit+0x748>)
 800c730:	edd3 6a02 	vldr	s13, [r3, #8]
 800c734:	4ba7      	ldr	r3, [pc, #668]	; (800c9d4 <SYSSystemInit+0x748>)
 800c736:	ed93 6a03 	vldr	s12, [r3, #12]
 800c73a:	4ba6      	ldr	r3, [pc, #664]	; (800c9d4 <SYSSystemInit+0x748>)
 800c73c:	edd3 5a04 	vldr	s11, [r3, #16]
 800c740:	4ba4      	ldr	r3, [pc, #656]	; (800c9d4 <SYSSystemInit+0x748>)
 800c742:	ed93 5a05 	vldr	s10, [r3, #20]
 800c746:	4ba3      	ldr	r3, [pc, #652]	; (800c9d4 <SYSSystemInit+0x748>)
 800c748:	edd3 4a06 	vldr	s9, [r3, #24]
 800c74c:	489e      	ldr	r0, [pc, #632]	; (800c9c8 <SYSSystemInit+0x73c>)
 800c74e:	eef0 3a64 	vmov.f32	s7, s9
 800c752:	eeb0 3a45 	vmov.f32	s6, s10
 800c756:	eef0 2a65 	vmov.f32	s5, s11
 800c75a:	eeb0 2a46 	vmov.f32	s4, s12
 800c75e:	eef0 1a66 	vmov.f32	s3, s13
 800c762:	eeb0 1a47 	vmov.f32	s2, s14
 800c766:	eef0 0a67 	vmov.f32	s1, s15
 800c76a:	ed9f 0a92 	vldr	s0, [pc, #584]	; 800c9b4 <SYSSystemInit+0x728>
 800c76e:	f7f8 f809 	bl	8004784 <PIDGainInit>

	PIDSourceInit(&fBRightVelErr, &fBRightVelU, &bright_vel);
 800c772:	4a99      	ldr	r2, [pc, #612]	; (800c9d8 <SYSSystemInit+0x74c>)
 800c774:	4999      	ldr	r1, [pc, #612]	; (800c9dc <SYSSystemInit+0x750>)
 800c776:	489a      	ldr	r0, [pc, #616]	; (800c9e0 <SYSSystemInit+0x754>)
 800c778:	f7f7 fff2 	bl	8004760 <PIDSourceInit>
	PIDDelayInit(&bright_vel);
 800c77c:	4896      	ldr	r0, [pc, #600]	; (800c9d8 <SYSSystemInit+0x74c>)
 800c77e:	f7f8 f986 	bl	8004a8e <PIDDelayInit>
	PIDGainInit(SAMPLE_TIME, fBRightVG[0], fBRightVG[1], fBRightVG[2], fBRightVG[3], fBRightVG[4], fBRightVG[5], fBRightVG[6], &bright_vel);
 800c782:	4b98      	ldr	r3, [pc, #608]	; (800c9e4 <SYSSystemInit+0x758>)
 800c784:	edd3 7a00 	vldr	s15, [r3]
 800c788:	4b96      	ldr	r3, [pc, #600]	; (800c9e4 <SYSSystemInit+0x758>)
 800c78a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c78e:	4b95      	ldr	r3, [pc, #596]	; (800c9e4 <SYSSystemInit+0x758>)
 800c790:	edd3 6a02 	vldr	s13, [r3, #8]
 800c794:	4b93      	ldr	r3, [pc, #588]	; (800c9e4 <SYSSystemInit+0x758>)
 800c796:	ed93 6a03 	vldr	s12, [r3, #12]
 800c79a:	4b92      	ldr	r3, [pc, #584]	; (800c9e4 <SYSSystemInit+0x758>)
 800c79c:	edd3 5a04 	vldr	s11, [r3, #16]
 800c7a0:	4b90      	ldr	r3, [pc, #576]	; (800c9e4 <SYSSystemInit+0x758>)
 800c7a2:	ed93 5a05 	vldr	s10, [r3, #20]
 800c7a6:	4b8f      	ldr	r3, [pc, #572]	; (800c9e4 <SYSSystemInit+0x758>)
 800c7a8:	edd3 4a06 	vldr	s9, [r3, #24]
 800c7ac:	488a      	ldr	r0, [pc, #552]	; (800c9d8 <SYSSystemInit+0x74c>)
 800c7ae:	eef0 3a64 	vmov.f32	s7, s9
 800c7b2:	eeb0 3a45 	vmov.f32	s6, s10
 800c7b6:	eef0 2a65 	vmov.f32	s5, s11
 800c7ba:	eeb0 2a46 	vmov.f32	s4, s12
 800c7be:	eef0 1a66 	vmov.f32	s3, s13
 800c7c2:	eeb0 1a47 	vmov.f32	s2, s14
 800c7c6:	eef0 0a67 	vmov.f32	s1, s15
 800c7ca:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800c9b4 <SYSSystemInit+0x728>
 800c7ce:	f7f7 ffd9 	bl	8004784 <PIDGainInit>

	//Line follow
	/* Distance PID*/
	PIDSourceInit(&fLFDistErr, &fLFDistU, &lf_dist);
 800c7d2:	4a85      	ldr	r2, [pc, #532]	; (800c9e8 <SYSSystemInit+0x75c>)
 800c7d4:	4985      	ldr	r1, [pc, #532]	; (800c9ec <SYSSystemInit+0x760>)
 800c7d6:	4886      	ldr	r0, [pc, #536]	; (800c9f0 <SYSSystemInit+0x764>)
 800c7d8:	f7f7 ffc2 	bl	8004760 <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fLFDistG[0], fLFDistG[1], fLFDistG[2], fLFDistG[3], fLFDistG[4], fLFDistG[5], fLFDistG[6], &lf_dist);
 800c7dc:	4b85      	ldr	r3, [pc, #532]	; (800c9f4 <SYSSystemInit+0x768>)
 800c7de:	edd3 7a00 	vldr	s15, [r3]
 800c7e2:	4b84      	ldr	r3, [pc, #528]	; (800c9f4 <SYSSystemInit+0x768>)
 800c7e4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c7e8:	4b82      	ldr	r3, [pc, #520]	; (800c9f4 <SYSSystemInit+0x768>)
 800c7ea:	edd3 6a02 	vldr	s13, [r3, #8]
 800c7ee:	4b81      	ldr	r3, [pc, #516]	; (800c9f4 <SYSSystemInit+0x768>)
 800c7f0:	ed93 6a03 	vldr	s12, [r3, #12]
 800c7f4:	4b7f      	ldr	r3, [pc, #508]	; (800c9f4 <SYSSystemInit+0x768>)
 800c7f6:	edd3 5a04 	vldr	s11, [r3, #16]
 800c7fa:	4b7e      	ldr	r3, [pc, #504]	; (800c9f4 <SYSSystemInit+0x768>)
 800c7fc:	ed93 5a05 	vldr	s10, [r3, #20]
 800c800:	4b7c      	ldr	r3, [pc, #496]	; (800c9f4 <SYSSystemInit+0x768>)
 800c802:	edd3 4a06 	vldr	s9, [r3, #24]
 800c806:	4878      	ldr	r0, [pc, #480]	; (800c9e8 <SYSSystemInit+0x75c>)
 800c808:	eef0 3a64 	vmov.f32	s7, s9
 800c80c:	eeb0 3a45 	vmov.f32	s6, s10
 800c810:	eef0 2a65 	vmov.f32	s5, s11
 800c814:	eeb0 2a46 	vmov.f32	s4, s12
 800c818:	eef0 1a66 	vmov.f32	s3, s13
 800c81c:	eeb0 1a47 	vmov.f32	s2, s14
 800c820:	eef0 0a67 	vmov.f32	s1, s15
 800c824:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800c9b4 <SYSSystemInit+0x728>
 800c828:	f7f7 ffac 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&lf_dist);
 800c82c:	486e      	ldr	r0, [pc, #440]	; (800c9e8 <SYSSystemInit+0x75c>)
 800c82e:	f7f8 f92e 	bl	8004a8e <PIDDelayInit>

	/* Rotate PID*/
	PIDSourceInit(&fRotateErr, &fRotateU, &lf_rotate);
 800c832:	4a71      	ldr	r2, [pc, #452]	; (800c9f8 <SYSSystemInit+0x76c>)
 800c834:	4971      	ldr	r1, [pc, #452]	; (800c9fc <SYSSystemInit+0x770>)
 800c836:	4872      	ldr	r0, [pc, #456]	; (800ca00 <SYSSystemInit+0x774>)
 800c838:	f7f7 ff92 	bl	8004760 <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fRotateG[0], fRotateG[1], fRotateG[2], fRotateG[3], fRotateG[4], fRotateG[5], fRotateG[6], &lf_rotate);
 800c83c:	4b71      	ldr	r3, [pc, #452]	; (800ca04 <SYSSystemInit+0x778>)
 800c83e:	edd3 7a00 	vldr	s15, [r3]
 800c842:	4b70      	ldr	r3, [pc, #448]	; (800ca04 <SYSSystemInit+0x778>)
 800c844:	ed93 7a01 	vldr	s14, [r3, #4]
 800c848:	4b6e      	ldr	r3, [pc, #440]	; (800ca04 <SYSSystemInit+0x778>)
 800c84a:	edd3 6a02 	vldr	s13, [r3, #8]
 800c84e:	4b6d      	ldr	r3, [pc, #436]	; (800ca04 <SYSSystemInit+0x778>)
 800c850:	ed93 6a03 	vldr	s12, [r3, #12]
 800c854:	4b6b      	ldr	r3, [pc, #428]	; (800ca04 <SYSSystemInit+0x778>)
 800c856:	edd3 5a04 	vldr	s11, [r3, #16]
 800c85a:	4b6a      	ldr	r3, [pc, #424]	; (800ca04 <SYSSystemInit+0x778>)
 800c85c:	ed93 5a05 	vldr	s10, [r3, #20]
 800c860:	4b68      	ldr	r3, [pc, #416]	; (800ca04 <SYSSystemInit+0x778>)
 800c862:	edd3 4a06 	vldr	s9, [r3, #24]
 800c866:	4864      	ldr	r0, [pc, #400]	; (800c9f8 <SYSSystemInit+0x76c>)
 800c868:	eef0 3a64 	vmov.f32	s7, s9
 800c86c:	eeb0 3a45 	vmov.f32	s6, s10
 800c870:	eef0 2a65 	vmov.f32	s5, s11
 800c874:	eeb0 2a46 	vmov.f32	s4, s12
 800c878:	eef0 1a66 	vmov.f32	s3, s13
 800c87c:	eeb0 1a47 	vmov.f32	s2, s14
 800c880:	eef0 0a67 	vmov.f32	s1, s15
 800c884:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800c9b4 <SYSSystemInit+0x728>
 800c888:	f7f7 ff7c 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&lf_rotate);
 800c88c:	485a      	ldr	r0, [pc, #360]	; (800c9f8 <SYSSystemInit+0x76c>)
 800c88e:	f7f8 f8fe 	bl	8004a8e <PIDDelayInit>

	/*  */
	PIDSourceInit(&fFwdErr, &fFwdU, &lf_fwd);
 800c892:	4a5d      	ldr	r2, [pc, #372]	; (800ca08 <SYSSystemInit+0x77c>)
 800c894:	495d      	ldr	r1, [pc, #372]	; (800ca0c <SYSSystemInit+0x780>)
 800c896:	485e      	ldr	r0, [pc, #376]	; (800ca10 <SYSSystemInit+0x784>)
 800c898:	f7f7 ff62 	bl	8004760 <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fFwdG[0], fFwdG[1], fFwdG[2], fFwdG[3], fFwdG[4], fFwdG[5], fFwdG[6], &lf_fwd);
 800c89c:	4b5d      	ldr	r3, [pc, #372]	; (800ca14 <SYSSystemInit+0x788>)
 800c89e:	edd3 7a00 	vldr	s15, [r3]
 800c8a2:	4b5c      	ldr	r3, [pc, #368]	; (800ca14 <SYSSystemInit+0x788>)
 800c8a4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c8a8:	4b5a      	ldr	r3, [pc, #360]	; (800ca14 <SYSSystemInit+0x788>)
 800c8aa:	edd3 6a02 	vldr	s13, [r3, #8]
 800c8ae:	4b59      	ldr	r3, [pc, #356]	; (800ca14 <SYSSystemInit+0x788>)
 800c8b0:	ed93 6a03 	vldr	s12, [r3, #12]
 800c8b4:	4b57      	ldr	r3, [pc, #348]	; (800ca14 <SYSSystemInit+0x788>)
 800c8b6:	edd3 5a04 	vldr	s11, [r3, #16]
 800c8ba:	4b56      	ldr	r3, [pc, #344]	; (800ca14 <SYSSystemInit+0x788>)
 800c8bc:	ed93 5a05 	vldr	s10, [r3, #20]
 800c8c0:	4b54      	ldr	r3, [pc, #336]	; (800ca14 <SYSSystemInit+0x788>)
 800c8c2:	edd3 4a06 	vldr	s9, [r3, #24]
 800c8c6:	4850      	ldr	r0, [pc, #320]	; (800ca08 <SYSSystemInit+0x77c>)
 800c8c8:	eef0 3a64 	vmov.f32	s7, s9
 800c8cc:	eeb0 3a45 	vmov.f32	s6, s10
 800c8d0:	eef0 2a65 	vmov.f32	s5, s11
 800c8d4:	eeb0 2a46 	vmov.f32	s4, s12
 800c8d8:	eef0 1a66 	vmov.f32	s3, s13
 800c8dc:	eeb0 1a47 	vmov.f32	s2, s14
 800c8e0:	eef0 0a67 	vmov.f32	s1, s15
 800c8e4:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800c9b4 <SYSSystemInit+0x728>
 800c8e8:	f7f7 ff4c 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&lf_fwd);
 800c8ec:	4846      	ldr	r0, [pc, #280]	; (800ca08 <SYSSystemInit+0x77c>)
 800c8ee:	f7f8 f8ce 	bl	8004a8e <PIDDelayInit>

	//IMU Rotate PID
	PIDSourceInit(&fAngleErr, &fAngleU, &imu_rotate);
 800c8f2:	4a49      	ldr	r2, [pc, #292]	; (800ca18 <SYSSystemInit+0x78c>)
 800c8f4:	4949      	ldr	r1, [pc, #292]	; (800ca1c <SYSSystemInit+0x790>)
 800c8f6:	484a      	ldr	r0, [pc, #296]	; (800ca20 <SYSSystemInit+0x794>)
 800c8f8:	f7f7 ff32 	bl	8004760 <PIDSourceInit>
	PIDGainInit(SAMPLE_TIME, fAngleG[0], fAngleG[1], fAngleG[2], fAngleG[3], fAngleG[4], fAngleG[5], fAngleG[6], &imu_rotate);
 800c8fc:	4b49      	ldr	r3, [pc, #292]	; (800ca24 <SYSSystemInit+0x798>)
 800c8fe:	edd3 7a00 	vldr	s15, [r3]
 800c902:	4b48      	ldr	r3, [pc, #288]	; (800ca24 <SYSSystemInit+0x798>)
 800c904:	ed93 7a01 	vldr	s14, [r3, #4]
 800c908:	4b46      	ldr	r3, [pc, #280]	; (800ca24 <SYSSystemInit+0x798>)
 800c90a:	edd3 6a02 	vldr	s13, [r3, #8]
 800c90e:	4b45      	ldr	r3, [pc, #276]	; (800ca24 <SYSSystemInit+0x798>)
 800c910:	ed93 6a03 	vldr	s12, [r3, #12]
 800c914:	4b43      	ldr	r3, [pc, #268]	; (800ca24 <SYSSystemInit+0x798>)
 800c916:	edd3 5a04 	vldr	s11, [r3, #16]
 800c91a:	4b42      	ldr	r3, [pc, #264]	; (800ca24 <SYSSystemInit+0x798>)
 800c91c:	ed93 5a05 	vldr	s10, [r3, #20]
 800c920:	4b40      	ldr	r3, [pc, #256]	; (800ca24 <SYSSystemInit+0x798>)
 800c922:	edd3 4a06 	vldr	s9, [r3, #24]
 800c926:	483c      	ldr	r0, [pc, #240]	; (800ca18 <SYSSystemInit+0x78c>)
 800c928:	eef0 3a64 	vmov.f32	s7, s9
 800c92c:	eeb0 3a45 	vmov.f32	s6, s10
 800c930:	eef0 2a65 	vmov.f32	s5, s11
 800c934:	eeb0 2a46 	vmov.f32	s4, s12
 800c938:	eef0 1a66 	vmov.f32	s3, s13
 800c93c:	eeb0 1a47 	vmov.f32	s2, s14
 800c940:	eef0 0a67 	vmov.f32	s1, s15
 800c944:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800c9b4 <SYSSystemInit+0x728>
 800c948:	f7f7 ff1c 	bl	8004784 <PIDGainInit>
	PIDDelayInit(&imu_rotate);
 800c94c:	4832      	ldr	r0, [pc, #200]	; (800ca18 <SYSSystemInit+0x78c>)
 800c94e:	f7f8 f89e 	bl	8004a8e <PIDDelayInit>

	//	VESCInit(40000,1,0.0037,&vesc);
	S_FuzzyInit(&fuz_fleft_pid, &fleft_vel, 2.5, 2.5, 1.0, 3.0);
 800c952:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800c956:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c95a:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800c95e:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800c962:	4913      	ldr	r1, [pc, #76]	; (800c9b0 <SYSSystemInit+0x724>)
 800c964:	4830      	ldr	r0, [pc, #192]	; (800ca28 <SYSSystemInit+0x79c>)
 800c966:	f7fb fe9d 	bl	80086a4 <S_FuzzyInit>
	S_FuzzyInit(&fuz_fright_pid, &fright_vel, 2.5, 2.5, 1.0, 3.0);
 800c96a:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800c96e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c972:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800c976:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800c97a:	4913      	ldr	r1, [pc, #76]	; (800c9c8 <SYSSystemInit+0x73c>)
 800c97c:	482b      	ldr	r0, [pc, #172]	; (800ca2c <SYSSystemInit+0x7a0>)
 800c97e:	f7fb fe91 	bl	80086a4 <S_FuzzyInit>
	S_FuzzyInit(&fuz_bleft_pid, &bleft_vel, 2.5, 2.5, 1.0, 3.0);
 800c982:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800c986:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c98a:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800c98e:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800c992:	4909      	ldr	r1, [pc, #36]	; (800c9b8 <SYSSystemInit+0x72c>)
 800c994:	4826      	ldr	r0, [pc, #152]	; (800ca30 <SYSSystemInit+0x7a4>)
 800c996:	f7fb fe85 	bl	80086a4 <S_FuzzyInit>
	S_FuzzyInit(&fuz_bright_pid, &bright_vel, 2.5, 2.5, 1.0, 3.0);
 800c99a:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 800c99e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c9a2:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800c9a6:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800c9aa:	e043      	b.n	800ca34 <SYSSystemInit+0x7a8>
 800c9ac:	200000e8 	.word	0x200000e8
 800c9b0:	20006e90 	.word	0x20006e90
 800c9b4:	3ba3d70a 	.word	0x3ba3d70a
 800c9b8:	200066d0 	.word	0x200066d0
 800c9bc:	20006744 	.word	0x20006744
 800c9c0:	20007f50 	.word	0x20007f50
 800c9c4:	20000120 	.word	0x20000120
 800c9c8:	20006dc4 	.word	0x20006dc4
 800c9cc:	20006688 	.word	0x20006688
 800c9d0:	200073dc 	.word	0x200073dc
 800c9d4:	20000104 	.word	0x20000104
 800c9d8:	20007f5c 	.word	0x20007f5c
 800c9dc:	200065b4 	.word	0x200065b4
 800c9e0:	20006684 	.word	0x20006684
 800c9e4:	2000013c 	.word	0x2000013c
 800c9e8:	20007fbc 	.word	0x20007fbc
 800c9ec:	20007a5c 	.word	0x20007a5c
 800c9f0:	200073e0 	.word	0x200073e0
 800c9f4:	20000158 	.word	0x20000158
 800c9f8:	20007b9c 	.word	0x20007b9c
 800c9fc:	20007bf0 	.word	0x20007bf0
 800ca00:	20006da0 	.word	0x20006da0
 800ca04:	20000174 	.word	0x20000174
 800ca08:	20007cd8 	.word	0x20007cd8
 800ca0c:	200080c4 	.word	0x200080c4
 800ca10:	20006860 	.word	0x20006860
 800ca14:	20000190 	.word	0x20000190
 800ca18:	200065c8 	.word	0x200065c8
 800ca1c:	20006730 	.word	0x20006730
 800ca20:	20007c20 	.word	0x20007c20
 800ca24:	200001ac 	.word	0x200001ac
 800ca28:	2000661c 	.word	0x2000661c
 800ca2c:	200080cc 	.word	0x200080cc
 800ca30:	20006eec 	.word	0x20006eec
 800ca34:	4903      	ldr	r1, [pc, #12]	; (800ca44 <SYSSystemInit+0x7b8>)
 800ca36:	4804      	ldr	r0, [pc, #16]	; (800ca48 <SYSSystemInit+0x7bc>)
 800ca38:	f7fb fe34 	bl	80086a4 <S_FuzzyInit>

}
 800ca3c:	bf00      	nop
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20007f5c 	.word	0x20007f5c
 800ca48:	20008158 	.word	0x20008158
 800ca4c:	00000000 	.word	0x00000000

0800ca50 <SYSSystem5ms>:

void SYSSystem5ms(void)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	ed2d 8b02 	vpush	{d8}
 800ca56:	af00      	add	r7, sp, #0
	 *
	 * Extra thought
	 * To ensure that left and right motor move in same line, maybe can track the encoder value per sample time
	 * if balance is broken, increase the speed of slower side and decrease the speed of faster side
	 */
	fFLeftPosData = fFPtd * (QEIRead(QEI6) - MIN_POSCNT);
 800ca58:	2006      	movs	r0, #6
 800ca5a:	f7f5 fc11 	bl	8002280 <QEIRead>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ca64:	ee07 3a90 	vmov	s15, r3
 800ca68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca6c:	4b9f      	ldr	r3, [pc, #636]	; (800ccec <SYSSystem5ms+0x29c>)
 800ca6e:	edd3 7a00 	vldr	s15, [r3]
 800ca72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca76:	4b9e      	ldr	r3, [pc, #632]	; (800ccf0 <SYSSystem5ms+0x2a0>)
 800ca78:	edc3 7a00 	vstr	s15, [r3]
	fFRightPosData = fFKcd * fFPtd * (QEIRead(QEI4) - MIN_POSCNT);
 800ca7c:	4b9d      	ldr	r3, [pc, #628]	; (800ccf4 <SYSSystem5ms+0x2a4>)
 800ca7e:	ed93 7a00 	vldr	s14, [r3]
 800ca82:	4b9a      	ldr	r3, [pc, #616]	; (800ccec <SYSSystem5ms+0x29c>)
 800ca84:	edd3 7a00 	vldr	s15, [r3]
 800ca88:	ee27 8a27 	vmul.f32	s16, s14, s15
 800ca8c:	2004      	movs	r0, #4
 800ca8e:	f7f5 fbf7 	bl	8002280 <QEIRead>
 800ca92:	4603      	mov	r3, r0
 800ca94:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800ca98:	ee07 3a90 	vmov	s15, r3
 800ca9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caa0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800caa4:	4b94      	ldr	r3, [pc, #592]	; (800ccf8 <SYSSystem5ms+0x2a8>)
 800caa6:	edc3 7a00 	vstr	s15, [r3]

	fBLeftPosData = fBPtd * (QEIRead(QEI1) -MIN_POSCNT);
 800caaa:	2001      	movs	r0, #1
 800caac:	f7f5 fbe8 	bl	8002280 <QEIRead>
 800cab0:	4603      	mov	r3, r0
 800cab2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cab6:	ee07 3a90 	vmov	s15, r3
 800caba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cabe:	4b8f      	ldr	r3, [pc, #572]	; (800ccfc <SYSSystem5ms+0x2ac>)
 800cac0:	edd3 7a00 	vldr	s15, [r3]
 800cac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac8:	4b8d      	ldr	r3, [pc, #564]	; (800cd00 <SYSSystem5ms+0x2b0>)
 800caca:	edc3 7a00 	vstr	s15, [r3]
	fBRightPosData = fBKcd * fBPtd * (QEIRead(QEI3) - MIN_POSCNT);
 800cace:	4b8d      	ldr	r3, [pc, #564]	; (800cd04 <SYSSystem5ms+0x2b4>)
 800cad0:	ed93 7a00 	vldr	s14, [r3]
 800cad4:	4b89      	ldr	r3, [pc, #548]	; (800ccfc <SYSSystem5ms+0x2ac>)
 800cad6:	edd3 7a00 	vldr	s15, [r3]
 800cada:	ee27 8a27 	vmul.f32	s16, s14, s15
 800cade:	2003      	movs	r0, #3
 800cae0:	f7f5 fbce 	bl	8002280 <QEIRead>
 800cae4:	4603      	mov	r3, r0
 800cae6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800caea:	ee07 3a90 	vmov	s15, r3
 800caee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caf2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800caf6:	4b84      	ldr	r3, [pc, #528]	; (800cd08 <SYSSystem5ms+0x2b8>)
 800caf8:	edc3 7a00 	vstr	s15, [r3]

	fXEncData = xPtd * (QEIRead(QEI2) - MIN_POSCNT);
 800cafc:	2002      	movs	r0, #2
 800cafe:	f7f5 fbbf 	bl	8002280 <QEIRead>
 800cb02:	4603      	mov	r3, r0
 800cb04:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb08:	ee07 3a90 	vmov	s15, r3
 800cb0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb10:	4b7e      	ldr	r3, [pc, #504]	; (800cd0c <SYSSystem5ms+0x2bc>)
 800cb12:	edd3 7a00 	vldr	s15, [r3]
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	4b7d      	ldr	r3, [pc, #500]	; (800cd10 <SYSSystem5ms+0x2c0>)
 800cb1c:	edc3 7a00 	vstr	s15, [r3]
	fYEncData = yPtd * (QEIRead(QEI5) - MIN_POSCNT);
 800cb20:	2005      	movs	r0, #5
 800cb22:	f7f5 fbad 	bl	8002280 <QEIRead>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800cb2c:	ee07 3a90 	vmov	s15, r3
 800cb30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cb34:	4b77      	ldr	r3, [pc, #476]	; (800cd14 <SYSSystem5ms+0x2c4>)
 800cb36:	edd3 7a00 	vldr	s15, [r3]
 800cb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb3e:	4b76      	ldr	r3, [pc, #472]	; (800cd18 <SYSSystem5ms+0x2c8>)
 800cb40:	edc3 7a00 	vstr	s15, [r3]

	/* ABT filter */
	ABT(&fleft_pos_data);
 800cb44:	4875      	ldr	r0, [pc, #468]	; (800cd1c <SYSSystem5ms+0x2cc>)
 800cb46:	f7f4 fa97 	bl	8001078 <ABT>
	ABT(&fright_pos_data);
 800cb4a:	4875      	ldr	r0, [pc, #468]	; (800cd20 <SYSSystem5ms+0x2d0>)
 800cb4c:	f7f4 fa94 	bl	8001078 <ABT>

	ABT(&bleft_pos_data);
 800cb50:	4874      	ldr	r0, [pc, #464]	; (800cd24 <SYSSystem5ms+0x2d4>)
 800cb52:	f7f4 fa91 	bl	8001078 <ABT>
	ABT(&bright_pos_data);
 800cb56:	4874      	ldr	r0, [pc, #464]	; (800cd28 <SYSSystem5ms+0x2d8>)
 800cb58:	f7f4 fa8e 	bl	8001078 <ABT>

	ABT(&x_data);
 800cb5c:	4873      	ldr	r0, [pc, #460]	; (800cd2c <SYSSystem5ms+0x2dc>)
 800cb5e:	f7f4 fa8b 	bl	8001078 <ABT>
	ABT(&y_data);
 800cb62:	4873      	ldr	r0, [pc, #460]	; (800cd30 <SYSSystem5ms+0x2e0>)
 800cb64:	f7f4 fa88 	bl	8001078 <ABT>

	fyaw = (fyaw >= 0.0) ? fyaw : 360.0 + fyaw;
 800cb68:	4b72      	ldr	r3, [pc, #456]	; (800cd34 <SYSSystem5ms+0x2e4>)
 800cb6a:	edd3 7a00 	vldr	s15, [r3]
 800cb6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb76:	db02      	blt.n	800cb7e <SYSSystem5ms+0x12e>
 800cb78:	4b6e      	ldr	r3, [pc, #440]	; (800cd34 <SYSSystem5ms+0x2e4>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	e010      	b.n	800cba0 <SYSSystem5ms+0x150>
 800cb7e:	4b6d      	ldr	r3, [pc, #436]	; (800cd34 <SYSSystem5ms+0x2e4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f3 fce0 	bl	8000548 <__aeabi_f2d>
 800cb88:	f04f 0200 	mov.w	r2, #0
 800cb8c:	4b6a      	ldr	r3, [pc, #424]	; (800cd38 <SYSSystem5ms+0x2e8>)
 800cb8e:	f7f3 fb7d 	bl	800028c <__adddf3>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	4610      	mov	r0, r2
 800cb98:	4619      	mov	r1, r3
 800cb9a:	f7f4 f825 	bl	8000be8 <__aeabi_d2f>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	4a64      	ldr	r2, [pc, #400]	; (800cd34 <SYSSystem5ms+0x2e4>)
 800cba2:	6013      	str	r3, [r2, #0]

	PathPlan(&pp);
 800cba4:	4865      	ldr	r0, [pc, #404]	; (800cd3c <SYSSystem5ms+0x2ec>)
 800cba6:	f7f8 fc67 	bl	8005478 <PathPlan>


	if (sys.lf_flag) {
 800cbaa:	4b65      	ldr	r3, [pc, #404]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 0308 	and.w	r3, r3, #8
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d02f      	beq.n	800cc18 <SYSSystem5ms+0x1c8>

		LSAErr_Handler(&LSA_A);
 800cbb8:	4862      	ldr	r0, [pc, #392]	; (800cd44 <SYSSystem5ms+0x2f4>)
 800cbba:	f7f7 fb1b 	bl	80041f4 <LSAErr_Handler>
		LSAErr_Handler(&LSA_B);
 800cbbe:	4862      	ldr	r0, [pc, #392]	; (800cd48 <SYSSystem5ms+0x2f8>)
 800cbc0:	f7f7 fb18 	bl	80041f4 <LSAErr_Handler>
		LSAErr_Handler(&LSA_C);
 800cbc4:	4861      	ldr	r0, [pc, #388]	; (800cd4c <SYSSystem5ms+0x2fc>)
 800cbc6:	f7f7 fb15 	bl	80041f4 <LSAErr_Handler>
		LSAErr_Handler(&LSA_D);
 800cbca:	4861      	ldr	r0, [pc, #388]	; (800cd50 <SYSSystem5ms+0x300>)
 800cbcc:	f7f7 fb12 	bl	80041f4 <LSAErr_Handler>

		if(LSA_RIGHT->LSA_T == 8 || LSA_FRONT->LSA_T == 8){
 800cbd0:	4b60      	ldr	r3, [pc, #384]	; (800cd54 <SYSSystem5ms+0x304>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800cbd8:	2b08      	cmp	r3, #8
 800cbda:	d005      	beq.n	800cbe8 <SYSSystem5ms+0x198>
 800cbdc:	4b5e      	ldr	r3, [pc, #376]	; (800cd58 <SYSSystem5ms+0x308>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	d112      	bne.n	800cc0e <SYSSystem5ms+0x1be>
			if(sys.junc_flag == 0){
 800cbe8:	4b55      	ldr	r3, [pc, #340]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f003 0310 	and.w	r3, r3, #16
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d110      	bne.n	800cc18 <SYSSystem5ms+0x1c8>
				junction_count++;
 800cbf6:	4b59      	ldr	r3, [pc, #356]	; (800cd5c <SYSSystem5ms+0x30c>)
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	4b57      	ldr	r3, [pc, #348]	; (800cd5c <SYSSystem5ms+0x30c>)
 800cc00:	801a      	strh	r2, [r3, #0]
				sys.junc_flag = 1;
 800cc02:	4a4f      	ldr	r2, [pc, #316]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cc04:	7813      	ldrb	r3, [r2, #0]
 800cc06:	f043 0310 	orr.w	r3, r3, #16
 800cc0a:	7013      	strb	r3, [r2, #0]
			if(sys.junc_flag == 0){
 800cc0c:	e004      	b.n	800cc18 <SYSSystem5ms+0x1c8>
			}
		} else{
			sys.junc_flag = 0;
 800cc0e:	4a4c      	ldr	r2, [pc, #304]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cc10:	7813      	ldrb	r3, [r2, #0]
 800cc12:	f36f 1304 	bfc	r3, #4, #1
 800cc16:	7013      	strb	r3, [r2, #0]
		}
	}

	if (sys.activate){
 800cc18:	4b49      	ldr	r3, [pc, #292]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 84dd 	beq.w	800d5e2 <SYSSystem5ms+0xb92>

		//LineFollowStart//
		if(sys.lf_flag){
 800cc28:	4b45      	ldr	r3, [pc, #276]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	f003 0308 	and.w	r3, r3, #8
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 838f 	beq.w	800d356 <SYSSystem5ms+0x906>

			sys.busy_flag = 1;
 800cc38:	4a41      	ldr	r2, [pc, #260]	; (800cd40 <SYSSystem5ms+0x2f0>)
 800cc3a:	7813      	ldrb	r3, [r2, #0]
 800cc3c:	f043 0302 	orr.w	r3, r3, #2
 800cc40:	7013      	strb	r3, [r2, #0]

			if(Dir == DIR_LEFT || Dir == DIR_RIGHT){
 800cc42:	4b47      	ldr	r3, [pc, #284]	; (800cd60 <SYSSystem5ms+0x310>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b10      	cmp	r3, #16
 800cc48:	d004      	beq.n	800cc54 <SYSSystem5ms+0x204>
 800cc4a:	4b45      	ldr	r3, [pc, #276]	; (800cd60 <SYSSystem5ms+0x310>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b11      	cmp	r3, #17
 800cc50:	f040 8096 	bne.w	800cd80 <SYSSystem5ms+0x330>

				if((LSA_LEFT->LSA_T != 0) && (LSA_RIGHT->LSA_T != 0)){
 800cc54:	4b43      	ldr	r3, [pc, #268]	; (800cd64 <SYSSystem5ms+0x314>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d028      	beq.n	800ccb2 <SYSSystem5ms+0x262>
 800cc60:	4b3c      	ldr	r3, [pc, #240]	; (800cd54 <SYSSystem5ms+0x304>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d022      	beq.n	800ccb2 <SYSSystem5ms+0x262>
					fFwdErr = LSA_RIGHT->PosErr - LSA_LEFT->PosErr;
 800cc6c:	4b39      	ldr	r3, [pc, #228]	; (800cd54 <SYSSystem5ms+0x304>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800cc74:	4b3b      	ldr	r3, [pc, #236]	; (800cd64 <SYSSystem5ms+0x314>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800cc7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc80:	4b39      	ldr	r3, [pc, #228]	; (800cd68 <SYSSystem5ms+0x318>)
 800cc82:	edc3 7a00 	vstr	s15, [r3]
					store_lsa = LSA_RIGHT->PosErr + LSA_LEFT->PosErr;
 800cc86:	4b33      	ldr	r3, [pc, #204]	; (800cd54 <SYSSystem5ms+0x304>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800cc8e:	4b35      	ldr	r3, [pc, #212]	; (800cd64 <SYSSystem5ms+0x314>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800cc96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc9a:	4b34      	ldr	r3, [pc, #208]	; (800cd6c <SYSSystem5ms+0x31c>)
 800cc9c:	edc3 7a00 	vstr	s15, [r3]
					store_imu = fyaw;
 800cca0:	4b24      	ldr	r3, [pc, #144]	; (800cd34 <SYSSystem5ms+0x2e4>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a32      	ldr	r2, [pc, #200]	; (800cd70 <SYSSystem5ms+0x320>)
 800cca6:	6013      	str	r3, [r2, #0]
					robot_angle = store_lsa;
 800cca8:	4b30      	ldr	r3, [pc, #192]	; (800cd6c <SYSSystem5ms+0x31c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a31      	ldr	r2, [pc, #196]	; (800cd74 <SYSSystem5ms+0x324>)
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	e00f      	b.n	800ccd2 <SYSSystem5ms+0x282>
				}else{
					robot_angle = store_lsa + store_imu - fyaw;
 800ccb2:	4b2e      	ldr	r3, [pc, #184]	; (800cd6c <SYSSystem5ms+0x31c>)
 800ccb4:	ed93 7a00 	vldr	s14, [r3]
 800ccb8:	4b2d      	ldr	r3, [pc, #180]	; (800cd70 <SYSSystem5ms+0x320>)
 800ccba:	edd3 7a00 	vldr	s15, [r3]
 800ccbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <SYSSystem5ms+0x2e4>)
 800ccc4:	edd3 7a00 	vldr	s15, [r3]
 800ccc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cccc:	4b29      	ldr	r3, [pc, #164]	; (800cd74 <SYSSystem5ms+0x324>)
 800ccce:	edc3 7a00 	vstr	s15, [r3]
				}

				fLFDistErr = LFtargetDist - fXEncData;
 800ccd2:	4b29      	ldr	r3, [pc, #164]	; (800cd78 <SYSSystem5ms+0x328>)
 800ccd4:	ed93 7a00 	vldr	s14, [r3]
 800ccd8:	4b0d      	ldr	r3, [pc, #52]	; (800cd10 <SYSSystem5ms+0x2c0>)
 800ccda:	edd3 7a00 	vldr	s15, [r3]
 800ccde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cce2:	4b26      	ldr	r3, [pc, #152]	; (800cd7c <SYSSystem5ms+0x32c>)
 800cce4:	edc3 7a00 	vstr	s15, [r3]
 800cce8:	e09c      	b.n	800ce24 <SYSSystem5ms+0x3d4>
 800ccea:	bf00      	nop
 800ccec:	20006ee8 	.word	0x20006ee8
 800ccf0:	2000796c 	.word	0x2000796c
 800ccf4:	20007b98 	.word	0x20007b98
 800ccf8:	20006dac 	.word	0x20006dac
 800ccfc:	20006738 	.word	0x20006738
 800cd00:	20006dc0 	.word	0x20006dc0
 800cd04:	20008128 	.word	0x20008128
 800cd08:	200081c0 	.word	0x200081c0
 800cd0c:	200065b8 	.word	0x200065b8
 800cd10:	200066a8 	.word	0x200066a8
 800cd14:	20006ee4 	.word	0x20006ee4
 800cd18:	200080c0 	.word	0x200080c0
 800cd1c:	20007a68 	.word	0x20007a68
 800cd20:	20007f28 	.word	0x20007f28
 800cd24:	20007748 	.word	0x20007748
 800cd28:	20007da8 	.word	0x20007da8
 800cd2c:	200080a0 	.word	0x200080a0
 800cd30:	20006e6c 	.word	0x20006e6c
 800cd34:	20007ca0 	.word	0x20007ca0
 800cd38:	40768000 	.word	0x40768000
 800cd3c:	20006864 	.word	0x20006864
 800cd40:	20006db0 	.word	0x20006db0
 800cd44:	200073e8 	.word	0x200073e8
 800cd48:	200076d8 	.word	0x200076d8
 800cd4c:	20007970 	.word	0x20007970
 800cd50:	20007d3c 	.word	0x20007d3c
 800cd54:	20007c18 	.word	0x20007c18
 800cd58:	20006e24 	.word	0x20006e24
 800cd5c:	200065b0 	.word	0x200065b0
 800cd60:	20007b8c 	.word	0x20007b8c
 800cd64:	20007454 	.word	0x20007454
 800cd68:	20006860 	.word	0x20006860
 800cd6c:	20007c04 	.word	0x20007c04
 800cd70:	20006f48 	.word	0x20006f48
 800cd74:	20007adc 	.word	0x20007adc
 800cd78:	20007dcc 	.word	0x20007dcc
 800cd7c:	200073e0 	.word	0x200073e0

			} else if(Dir == DIR_FRONT || Dir == DIR_BACK) {
 800cd80:	4bb9      	ldr	r3, [pc, #740]	; (800d068 <SYSSystem5ms+0x618>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b0e      	cmp	r3, #14
 800cd86:	d003      	beq.n	800cd90 <SYSSystem5ms+0x340>
 800cd88:	4bb7      	ldr	r3, [pc, #732]	; (800d068 <SYSSystem5ms+0x618>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b0f      	cmp	r3, #15
 800cd8e:	d149      	bne.n	800ce24 <SYSSystem5ms+0x3d4>

				if((LSA_FRONT->LSA_T != 0) && (LSA_BACK->LSA_T != 0)){
 800cd90:	4bb6      	ldr	r3, [pc, #728]	; (800d06c <SYSSystem5ms+0x61c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d028      	beq.n	800cdee <SYSSystem5ms+0x39e>
 800cd9c:	4bb4      	ldr	r3, [pc, #720]	; (800d070 <SYSSystem5ms+0x620>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d022      	beq.n	800cdee <SYSSystem5ms+0x39e>
					fFwdErr = LSA_FRONT->PosErr - LSA_BACK->PosErr;
 800cda8:	4bb0      	ldr	r3, [pc, #704]	; (800d06c <SYSSystem5ms+0x61c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800cdb0:	4baf      	ldr	r3, [pc, #700]	; (800d070 <SYSSystem5ms+0x620>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800cdb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdbc:	4bad      	ldr	r3, [pc, #692]	; (800d074 <SYSSystem5ms+0x624>)
 800cdbe:	edc3 7a00 	vstr	s15, [r3]
					store_lsa = LSA_FRONT->PosErr + LSA_BACK->PosErr;
 800cdc2:	4baa      	ldr	r3, [pc, #680]	; (800d06c <SYSSystem5ms+0x61c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800cdca:	4ba9      	ldr	r3, [pc, #676]	; (800d070 <SYSSystem5ms+0x620>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800cdd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdd6:	4ba8      	ldr	r3, [pc, #672]	; (800d078 <SYSSystem5ms+0x628>)
 800cdd8:	edc3 7a00 	vstr	s15, [r3]
					store_imu = fyaw;
 800cddc:	4ba7      	ldr	r3, [pc, #668]	; (800d07c <SYSSystem5ms+0x62c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4aa7      	ldr	r2, [pc, #668]	; (800d080 <SYSSystem5ms+0x630>)
 800cde2:	6013      	str	r3, [r2, #0]
					robot_angle = store_lsa;
 800cde4:	4ba4      	ldr	r3, [pc, #656]	; (800d078 <SYSSystem5ms+0x628>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4aa6      	ldr	r2, [pc, #664]	; (800d084 <SYSSystem5ms+0x634>)
 800cdea:	6013      	str	r3, [r2, #0]
 800cdec:	e00f      	b.n	800ce0e <SYSSystem5ms+0x3be>
				}else{
					robot_angle = store_lsa + store_imu - fyaw;
 800cdee:	4ba2      	ldr	r3, [pc, #648]	; (800d078 <SYSSystem5ms+0x628>)
 800cdf0:	ed93 7a00 	vldr	s14, [r3]
 800cdf4:	4ba2      	ldr	r3, [pc, #648]	; (800d080 <SYSSystem5ms+0x630>)
 800cdf6:	edd3 7a00 	vldr	s15, [r3]
 800cdfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cdfe:	4b9f      	ldr	r3, [pc, #636]	; (800d07c <SYSSystem5ms+0x62c>)
 800ce00:	edd3 7a00 	vldr	s15, [r3]
 800ce04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce08:	4b9e      	ldr	r3, [pc, #632]	; (800d084 <SYSSystem5ms+0x634>)
 800ce0a:	edc3 7a00 	vstr	s15, [r3]
				}

				fLFDistErr = LFtargetDist - fYEncData;
 800ce0e:	4b9e      	ldr	r3, [pc, #632]	; (800d088 <SYSSystem5ms+0x638>)
 800ce10:	ed93 7a00 	vldr	s14, [r3]
 800ce14:	4b9d      	ldr	r3, [pc, #628]	; (800d08c <SYSSystem5ms+0x63c>)
 800ce16:	edd3 7a00 	vldr	s15, [r3]
 800ce1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce1e:	4b9c      	ldr	r3, [pc, #624]	; (800d090 <SYSSystem5ms+0x640>)
 800ce20:	edc3 7a00 	vstr	s15, [r3]
			}

			fRotateErr = robot_angle;
 800ce24:	4b97      	ldr	r3, [pc, #604]	; (800d084 <SYSSystem5ms+0x634>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a9a      	ldr	r2, [pc, #616]	; (800d094 <SYSSystem5ms+0x644>)
 800ce2a:	6013      	str	r3, [r2, #0]

			PID(&lf_dist);
 800ce2c:	489a      	ldr	r0, [pc, #616]	; (800d098 <SYSSystem5ms+0x648>)
 800ce2e:	f7f7 fe4c 	bl	8004aca <PID>
			PID(&lf_rotate);
 800ce32:	489a      	ldr	r0, [pc, #616]	; (800d09c <SYSSystem5ms+0x64c>)
 800ce34:	f7f7 fe49 	bl	8004aca <PID>
			PID(&lf_fwd);
 800ce38:	4899      	ldr	r0, [pc, #612]	; (800d0a0 <SYSSystem5ms+0x650>)
 800ce3a:	f7f7 fe46 	bl	8004aca <PID>

			if(sys.dist_flag){//DISTANCE LINE FOLLOW
 800ce3e:	4b99      	ldr	r3, [pc, #612]	; (800d0a4 <SYSSystem5ms+0x654>)
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	f003 0320 	and.w	r3, r3, #32
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 81bc 	beq.w	800d1c6 <SYSSystem5ms+0x776>
				if(sys.lf_right || sys.lf_front){
 800ce4e:	4b95      	ldr	r3, [pc, #596]	; (800d0a4 <SYSSystem5ms+0x654>)
 800ce50:	785b      	ldrb	r3, [r3, #1]
 800ce52:	f003 0304 	and.w	r3, r3, #4
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d107      	bne.n	800ce6c <SYSSystem5ms+0x41c>
 800ce5c:	4b91      	ldr	r3, [pc, #580]	; (800d0a4 <SYSSystem5ms+0x654>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 80af 	beq.w	800cfca <SYSSystem5ms+0x57a>
					if(Dir == DIR_RIGHT){
 800ce6c:	4b7e      	ldr	r3, [pc, #504]	; (800d068 <SYSSystem5ms+0x618>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b11      	cmp	r3, #17
 800ce72:	d152      	bne.n	800cf1a <SYSSystem5ms+0x4ca>
						if(fXEncData < LFtargetDist){
 800ce74:	4b8c      	ldr	r3, [pc, #560]	; (800d0a8 <SYSSystem5ms+0x658>)
 800ce76:	ed93 7a00 	vldr	s14, [r3]
 800ce7a:	4b83      	ldr	r3, [pc, #524]	; (800d088 <SYSSystem5ms+0x638>)
 800ce7c:	edd3 7a00 	vldr	s15, [r3]
 800ce80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce88:	d521      	bpl.n	800cece <SYSSystem5ms+0x47e>
							LineFollow(fLFDistU + 0.2 ,fFwdU, fRotateU, 1.5);
 800ce8a:	4b88      	ldr	r3, [pc, #544]	; (800d0ac <SYSSystem5ms+0x65c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f3 fb5a 	bl	8000548 <__aeabi_f2d>
 800ce94:	a372      	add	r3, pc, #456	; (adr r3, 800d060 <SYSSystem5ms+0x610>)
 800ce96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9a:	f7f3 f9f7 	bl	800028c <__adddf3>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4610      	mov	r0, r2
 800cea4:	4619      	mov	r1, r3
 800cea6:	f7f3 fe9f 	bl	8000be8 <__aeabi_d2f>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	4b80      	ldr	r3, [pc, #512]	; (800d0b0 <SYSSystem5ms+0x660>)
 800ceae:	edd3 7a00 	vldr	s15, [r3]
 800ceb2:	4b80      	ldr	r3, [pc, #512]	; (800d0b4 <SYSSystem5ms+0x664>)
 800ceb4:	ed93 7a00 	vldr	s14, [r3]
 800ceb8:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800cebc:	eeb0 1a47 	vmov.f32	s2, s14
 800cec0:	eef0 0a67 	vmov.f32	s1, s15
 800cec4:	ee00 2a10 	vmov	s0, r2
 800cec8:	f000 fc06 	bl	800d6d8 <LineFollow>
					if(Dir == DIR_RIGHT){
 800cecc:	e242      	b.n	800d354 <SYSSystem5ms+0x904>
						} else if(fRotateErr != 0.0){
 800cece:	4b71      	ldr	r3, [pc, #452]	; (800d094 <SYSSystem5ms+0x644>)
 800ced0:	edd3 7a00 	vldr	s15, [r3]
 800ced4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ced8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cedc:	d00d      	beq.n	800cefa <SYSSystem5ms+0x4aa>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800cede:	4b75      	ldr	r3, [pc, #468]	; (800d0b4 <SYSSystem5ms+0x664>)
 800cee0:	edd3 7a00 	vldr	s15, [r3]
 800cee4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800cee8:	eeb0 1a67 	vmov.f32	s2, s15
 800ceec:	eddf 0a72 	vldr	s1, [pc, #456]	; 800d0b8 <SYSSystem5ms+0x668>
 800cef0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800d0b8 <SYSSystem5ms+0x668>
 800cef4:	f000 fbf0 	bl	800d6d8 <LineFollow>
					if(Dir == DIR_RIGHT){
 800cef8:	e22c      	b.n	800d354 <SYSSystem5ms+0x904>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800cefa:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d0b8 <SYSSystem5ms+0x668>
 800cefe:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d0b8 <SYSSystem5ms+0x668>
 800cf02:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800d0b8 <SYSSystem5ms+0x668>
 800cf06:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 800d0b8 <SYSSystem5ms+0x668>
 800cf0a:	f000 fbe5 	bl	800d6d8 <LineFollow>
							sys.busy_flag = 0;
 800cf0e:	4a65      	ldr	r2, [pc, #404]	; (800d0a4 <SYSSystem5ms+0x654>)
 800cf10:	7813      	ldrb	r3, [r2, #0]
 800cf12:	f36f 0341 	bfc	r3, #1, #1
 800cf16:	7013      	strb	r3, [r2, #0]
					if(Dir == DIR_RIGHT){
 800cf18:	e21c      	b.n	800d354 <SYSSystem5ms+0x904>
						}
					}else if(Dir == DIR_FRONT){
 800cf1a:	4b53      	ldr	r3, [pc, #332]	; (800d068 <SYSSystem5ms+0x618>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b0e      	cmp	r3, #14
 800cf20:	f040 8218 	bne.w	800d354 <SYSSystem5ms+0x904>
						if(fYEncData < LFtargetDist){
 800cf24:	4b59      	ldr	r3, [pc, #356]	; (800d08c <SYSSystem5ms+0x63c>)
 800cf26:	ed93 7a00 	vldr	s14, [r3]
 800cf2a:	4b57      	ldr	r3, [pc, #348]	; (800d088 <SYSSystem5ms+0x638>)
 800cf2c:	edd3 7a00 	vldr	s15, [r3]
 800cf30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf38:	d521      	bpl.n	800cf7e <SYSSystem5ms+0x52e>
							LineFollow(fLFDistU + 0.2 ,fFwdU,fRotateU, 1.5);
 800cf3a:	4b5c      	ldr	r3, [pc, #368]	; (800d0ac <SYSSystem5ms+0x65c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7f3 fb02 	bl	8000548 <__aeabi_f2d>
 800cf44:	a346      	add	r3, pc, #280	; (adr r3, 800d060 <SYSSystem5ms+0x610>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	f7f3 f99f 	bl	800028c <__adddf3>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	460b      	mov	r3, r1
 800cf52:	4610      	mov	r0, r2
 800cf54:	4619      	mov	r1, r3
 800cf56:	f7f3 fe47 	bl	8000be8 <__aeabi_d2f>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	4b54      	ldr	r3, [pc, #336]	; (800d0b0 <SYSSystem5ms+0x660>)
 800cf5e:	edd3 7a00 	vldr	s15, [r3]
 800cf62:	4b54      	ldr	r3, [pc, #336]	; (800d0b4 <SYSSystem5ms+0x664>)
 800cf64:	ed93 7a00 	vldr	s14, [r3]
 800cf68:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800cf6c:	eeb0 1a47 	vmov.f32	s2, s14
 800cf70:	eef0 0a67 	vmov.f32	s1, s15
 800cf74:	ee00 2a10 	vmov	s0, r2
 800cf78:	f000 fbae 	bl	800d6d8 <LineFollow>
					if(Dir == DIR_RIGHT){
 800cf7c:	e1ea      	b.n	800d354 <SYSSystem5ms+0x904>
						} else if(fRotateErr != 0.0){
 800cf7e:	4b45      	ldr	r3, [pc, #276]	; (800d094 <SYSSystem5ms+0x644>)
 800cf80:	edd3 7a00 	vldr	s15, [r3]
 800cf84:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8c:	d00d      	beq.n	800cfaa <SYSSystem5ms+0x55a>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800cf8e:	4b49      	ldr	r3, [pc, #292]	; (800d0b4 <SYSSystem5ms+0x664>)
 800cf90:	edd3 7a00 	vldr	s15, [r3]
 800cf94:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800cf98:	eeb0 1a67 	vmov.f32	s2, s15
 800cf9c:	eddf 0a46 	vldr	s1, [pc, #280]	; 800d0b8 <SYSSystem5ms+0x668>
 800cfa0:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800d0b8 <SYSSystem5ms+0x668>
 800cfa4:	f000 fb98 	bl	800d6d8 <LineFollow>
					if(Dir == DIR_RIGHT){
 800cfa8:	e1d4      	b.n	800d354 <SYSSystem5ms+0x904>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800cfaa:	eddf 1a43 	vldr	s3, [pc, #268]	; 800d0b8 <SYSSystem5ms+0x668>
 800cfae:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800d0b8 <SYSSystem5ms+0x668>
 800cfb2:	eddf 0a41 	vldr	s1, [pc, #260]	; 800d0b8 <SYSSystem5ms+0x668>
 800cfb6:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800d0b8 <SYSSystem5ms+0x668>
 800cfba:	f000 fb8d 	bl	800d6d8 <LineFollow>
							sys.busy_flag = 0;
 800cfbe:	4a39      	ldr	r2, [pc, #228]	; (800d0a4 <SYSSystem5ms+0x654>)
 800cfc0:	7813      	ldrb	r3, [r2, #0]
 800cfc2:	f36f 0341 	bfc	r3, #1, #1
 800cfc6:	7013      	strb	r3, [r2, #0]
					if(Dir == DIR_RIGHT){
 800cfc8:	e1c4      	b.n	800d354 <SYSSystem5ms+0x904>
						}
					}
				}else if(sys.lf_left || sys.lf_back){
 800cfca:	4b36      	ldr	r3, [pc, #216]	; (800d0a4 <SYSSystem5ms+0x654>)
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d107      	bne.n	800cfe8 <SYSSystem5ms+0x598>
 800cfd8:	4b32      	ldr	r3, [pc, #200]	; (800d0a4 <SYSSystem5ms+0x654>)
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f000 81b7 	beq.w	800d356 <SYSSystem5ms+0x906>
					if(Dir == DIR_LEFT){
 800cfe8:	4b1f      	ldr	r3, [pc, #124]	; (800d068 <SYSSystem5ms+0x618>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b10      	cmp	r3, #16
 800cfee:	f040 808b 	bne.w	800d108 <SYSSystem5ms+0x6b8>
						if(fXEncData > LFtargetDist){
 800cff2:	4b2d      	ldr	r3, [pc, #180]	; (800d0a8 <SYSSystem5ms+0x658>)
 800cff4:	ed93 7a00 	vldr	s14, [r3]
 800cff8:	4b23      	ldr	r3, [pc, #140]	; (800d088 <SYSSystem5ms+0x638>)
 800cffa:	edd3 7a00 	vldr	s15, [r3]
 800cffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	dd59      	ble.n	800d0bc <SYSSystem5ms+0x66c>
							LineFollow(-fLFDistU - 0.2 ,-fFwdU,fRotateU, 1.5);
 800d008:	4b28      	ldr	r3, [pc, #160]	; (800d0ac <SYSSystem5ms+0x65c>)
 800d00a:	edd3 7a00 	vldr	s15, [r3]
 800d00e:	eef1 7a67 	vneg.f32	s15, s15
 800d012:	ee17 3a90 	vmov	r3, s15
 800d016:	4618      	mov	r0, r3
 800d018:	f7f3 fa96 	bl	8000548 <__aeabi_f2d>
 800d01c:	a310      	add	r3, pc, #64	; (adr r3, 800d060 <SYSSystem5ms+0x610>)
 800d01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d022:	f7f3 f931 	bl	8000288 <__aeabi_dsub>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4610      	mov	r0, r2
 800d02c:	4619      	mov	r1, r3
 800d02e:	f7f3 fddb 	bl	8000be8 <__aeabi_d2f>
 800d032:	4602      	mov	r2, r0
 800d034:	4b1e      	ldr	r3, [pc, #120]	; (800d0b0 <SYSSystem5ms+0x660>)
 800d036:	edd3 7a00 	vldr	s15, [r3]
 800d03a:	eef1 7a67 	vneg.f32	s15, s15
 800d03e:	4b1d      	ldr	r3, [pc, #116]	; (800d0b4 <SYSSystem5ms+0x664>)
 800d040:	ed93 7a00 	vldr	s14, [r3]
 800d044:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800d048:	eeb0 1a47 	vmov.f32	s2, s14
 800d04c:	eef0 0a67 	vmov.f32	s1, s15
 800d050:	ee00 2a10 	vmov	s0, r2
 800d054:	f000 fb40 	bl	800d6d8 <LineFollow>
 800d058:	e17d      	b.n	800d356 <SYSSystem5ms+0x906>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	9999999a 	.word	0x9999999a
 800d064:	3fc99999 	.word	0x3fc99999
 800d068:	20007b8c 	.word	0x20007b8c
 800d06c:	20006e24 	.word	0x20006e24
 800d070:	20007b94 	.word	0x20007b94
 800d074:	20006860 	.word	0x20006860
 800d078:	20007c04 	.word	0x20007c04
 800d07c:	20007ca0 	.word	0x20007ca0
 800d080:	20006f48 	.word	0x20006f48
 800d084:	20007adc 	.word	0x20007adc
 800d088:	20007dcc 	.word	0x20007dcc
 800d08c:	200080c0 	.word	0x200080c0
 800d090:	200073e0 	.word	0x200073e0
 800d094:	20006da0 	.word	0x20006da0
 800d098:	20007fbc 	.word	0x20007fbc
 800d09c:	20007b9c 	.word	0x20007b9c
 800d0a0:	20007cd8 	.word	0x20007cd8
 800d0a4:	20006db0 	.word	0x20006db0
 800d0a8:	200066a8 	.word	0x200066a8
 800d0ac:	20007a5c 	.word	0x20007a5c
 800d0b0:	200080c4 	.word	0x200080c4
 800d0b4:	20007bf0 	.word	0x20007bf0
 800d0b8:	00000000 	.word	0x00000000
						} else if(fRotateErr != 0.0){
 800d0bc:	4bca      	ldr	r3, [pc, #808]	; (800d3e8 <SYSSystem5ms+0x998>)
 800d0be:	edd3 7a00 	vldr	s15, [r3]
 800d0c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ca:	d00d      	beq.n	800d0e8 <SYSSystem5ms+0x698>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800d0cc:	4bc7      	ldr	r3, [pc, #796]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d0ce:	edd3 7a00 	vldr	s15, [r3]
 800d0d2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800d0d6:	eeb0 1a67 	vmov.f32	s2, s15
 800d0da:	eddf 0ac5 	vldr	s1, [pc, #788]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d0de:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d0e2:	f000 faf9 	bl	800d6d8 <LineFollow>
 800d0e6:	e136      	b.n	800d356 <SYSSystem5ms+0x906>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800d0e8:	eddf 1ac1 	vldr	s3, [pc, #772]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d0ec:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d0f0:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d0f4:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d0f8:	f000 faee 	bl	800d6d8 <LineFollow>
							sys.busy_flag = 0;
 800d0fc:	4abd      	ldr	r2, [pc, #756]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d0fe:	7813      	ldrb	r3, [r2, #0]
 800d100:	f36f 0341 	bfc	r3, #1, #1
 800d104:	7013      	strb	r3, [r2, #0]
 800d106:	e126      	b.n	800d356 <SYSSystem5ms+0x906>
						}
					} else if(Dir == DIR_BACK){
 800d108:	4bbb      	ldr	r3, [pc, #748]	; (800d3f8 <SYSSystem5ms+0x9a8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b0f      	cmp	r3, #15
 800d10e:	f040 8122 	bne.w	800d356 <SYSSystem5ms+0x906>
						if(fYEncData > LFtargetDist){
 800d112:	4bba      	ldr	r3, [pc, #744]	; (800d3fc <SYSSystem5ms+0x9ac>)
 800d114:	ed93 7a00 	vldr	s14, [r3]
 800d118:	4bb9      	ldr	r3, [pc, #740]	; (800d400 <SYSSystem5ms+0x9b0>)
 800d11a:	edd3 7a00 	vldr	s15, [r3]
 800d11e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d126:	dd28      	ble.n	800d17a <SYSSystem5ms+0x72a>
							LineFollow(-fLFDistU - 0.2 ,-fFwdU,fRotateU, 1.5);
 800d128:	4bb6      	ldr	r3, [pc, #728]	; (800d404 <SYSSystem5ms+0x9b4>)
 800d12a:	edd3 7a00 	vldr	s15, [r3]
 800d12e:	eef1 7a67 	vneg.f32	s15, s15
 800d132:	ee17 3a90 	vmov	r3, s15
 800d136:	4618      	mov	r0, r3
 800d138:	f7f3 fa06 	bl	8000548 <__aeabi_f2d>
 800d13c:	a3a8      	add	r3, pc, #672	; (adr r3, 800d3e0 <SYSSystem5ms+0x990>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 f8a1 	bl	8000288 <__aeabi_dsub>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4610      	mov	r0, r2
 800d14c:	4619      	mov	r1, r3
 800d14e:	f7f3 fd4b 	bl	8000be8 <__aeabi_d2f>
 800d152:	4602      	mov	r2, r0
 800d154:	4bac      	ldr	r3, [pc, #688]	; (800d408 <SYSSystem5ms+0x9b8>)
 800d156:	edd3 7a00 	vldr	s15, [r3]
 800d15a:	eef1 7a67 	vneg.f32	s15, s15
 800d15e:	4ba3      	ldr	r3, [pc, #652]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d160:	ed93 7a00 	vldr	s14, [r3]
 800d164:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800d168:	eeb0 1a47 	vmov.f32	s2, s14
 800d16c:	eef0 0a67 	vmov.f32	s1, s15
 800d170:	ee00 2a10 	vmov	s0, r2
 800d174:	f000 fab0 	bl	800d6d8 <LineFollow>
 800d178:	e0ed      	b.n	800d356 <SYSSystem5ms+0x906>
						} else if(fRotateErr != 0.0){
 800d17a:	4b9b      	ldr	r3, [pc, #620]	; (800d3e8 <SYSSystem5ms+0x998>)
 800d17c:	edd3 7a00 	vldr	s15, [r3]
 800d180:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d188:	d00d      	beq.n	800d1a6 <SYSSystem5ms+0x756>
							LineFollow(0.0,0.0,fRotateU,2.0);
 800d18a:	4b98      	ldr	r3, [pc, #608]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d18c:	edd3 7a00 	vldr	s15, [r3]
 800d190:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800d194:	eeb0 1a67 	vmov.f32	s2, s15
 800d198:	eddf 0a95 	vldr	s1, [pc, #596]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d19c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d1a0:	f000 fa9a 	bl	800d6d8 <LineFollow>
 800d1a4:	e0d7      	b.n	800d356 <SYSSystem5ms+0x906>
						} else {
							LineFollow(0.0,0.0,0.0,0.0);
 800d1a6:	eddf 1a92 	vldr	s3, [pc, #584]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d1aa:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d1ae:	eddf 0a90 	vldr	s1, [pc, #576]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d1b2:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d1b6:	f000 fa8f 	bl	800d6d8 <LineFollow>
							sys.busy_flag = 0;
 800d1ba:	4a8e      	ldr	r2, [pc, #568]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d1bc:	7813      	ldrb	r3, [r2, #0]
 800d1be:	f36f 0341 	bfc	r3, #1, #1
 800d1c2:	7013      	strb	r3, [r2, #0]
 800d1c4:	e0c7      	b.n	800d356 <SYSSystem5ms+0x906>
						}
					}
				}
			} else if(sys.lf_junc){//JUNCTION LINE FOLLOW
 800d1c6:	4b8b      	ldr	r3, [pc, #556]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 80c0 	beq.w	800d356 <SYSSystem5ms+0x906>
				if(sys.lf_right || sys.lf_front){
 800d1d6:	4b87      	ldr	r3, [pc, #540]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d1d8:	785b      	ldrb	r3, [r3, #1]
 800d1da:	f003 0304 	and.w	r3, r3, #4
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d106      	bne.n	800d1f2 <SYSSystem5ms+0x7a2>
 800d1e4:	4b83      	ldr	r3, [pc, #524]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d04d      	beq.n	800d28e <SYSSystem5ms+0x83e>
					if(junction_count < LFtargetJunc){
 800d1f2:	4b86      	ldr	r3, [pc, #536]	; (800d40c <SYSSystem5ms+0x9bc>)
 800d1f4:	881a      	ldrh	r2, [r3, #0]
 800d1f6:	4b86      	ldr	r3, [pc, #536]	; (800d410 <SYSSystem5ms+0x9c0>)
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d221      	bcs.n	800d242 <SYSSystem5ms+0x7f2>
						LineFollow(fLFDistU + 0.2,fFwdU,fRotateU, 1.5);
 800d1fe:	4b81      	ldr	r3, [pc, #516]	; (800d404 <SYSSystem5ms+0x9b4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f3 f9a0 	bl	8000548 <__aeabi_f2d>
 800d208:	a375      	add	r3, pc, #468	; (adr r3, 800d3e0 <SYSSystem5ms+0x990>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 f83d 	bl	800028c <__adddf3>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4610      	mov	r0, r2
 800d218:	4619      	mov	r1, r3
 800d21a:	f7f3 fce5 	bl	8000be8 <__aeabi_d2f>
 800d21e:	4602      	mov	r2, r0
 800d220:	4b79      	ldr	r3, [pc, #484]	; (800d408 <SYSSystem5ms+0x9b8>)
 800d222:	edd3 7a00 	vldr	s15, [r3]
 800d226:	4b71      	ldr	r3, [pc, #452]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d228:	ed93 7a00 	vldr	s14, [r3]
 800d22c:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800d230:	eeb0 1a47 	vmov.f32	s2, s14
 800d234:	eef0 0a67 	vmov.f32	s1, s15
 800d238:	ee00 2a10 	vmov	s0, r2
 800d23c:	f000 fa4c 	bl	800d6d8 <LineFollow>
					if(junction_count < LFtargetJunc){
 800d240:	e089      	b.n	800d356 <SYSSystem5ms+0x906>
					} else if(fRotateErr != 0.0){
 800d242:	4b69      	ldr	r3, [pc, #420]	; (800d3e8 <SYSSystem5ms+0x998>)
 800d244:	edd3 7a00 	vldr	s15, [r3]
 800d248:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d250:	d00d      	beq.n	800d26e <SYSSystem5ms+0x81e>
						LineFollow(0.0,0.0,fRotateU,2.0);
 800d252:	4b66      	ldr	r3, [pc, #408]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d254:	edd3 7a00 	vldr	s15, [r3]
 800d258:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800d25c:	eeb0 1a67 	vmov.f32	s2, s15
 800d260:	eddf 0a63 	vldr	s1, [pc, #396]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d264:	ed9f 0a62 	vldr	s0, [pc, #392]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d268:	f000 fa36 	bl	800d6d8 <LineFollow>
					if(junction_count < LFtargetJunc){
 800d26c:	e073      	b.n	800d356 <SYSSystem5ms+0x906>
					} else {
						LineFollow(0.0,0.0,0.0, 0.0);
 800d26e:	eddf 1a60 	vldr	s3, [pc, #384]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d272:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d276:	eddf 0a5e 	vldr	s1, [pc, #376]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d27a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d27e:	f000 fa2b 	bl	800d6d8 <LineFollow>
						sys.busy_flag = 0;
 800d282:	4a5c      	ldr	r2, [pc, #368]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d284:	7813      	ldrb	r3, [r2, #0]
 800d286:	f36f 0341 	bfc	r3, #1, #1
 800d28a:	7013      	strb	r3, [r2, #0]
					if(junction_count < LFtargetJunc){
 800d28c:	e063      	b.n	800d356 <SYSSystem5ms+0x906>
					}
				} else if(sys.lf_left || sys.lf_back){
 800d28e:	4b59      	ldr	r3, [pc, #356]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d290:	785b      	ldrb	r3, [r3, #1]
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <SYSSystem5ms+0x85a>
 800d29c:	4b55      	ldr	r3, [pc, #340]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d29e:	785b      	ldrb	r3, [r3, #1]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d055      	beq.n	800d356 <SYSSystem5ms+0x906>
					if(junction_count < LFtargetJunc){
 800d2aa:	4b58      	ldr	r3, [pc, #352]	; (800d40c <SYSSystem5ms+0x9bc>)
 800d2ac:	881a      	ldrh	r2, [r3, #0]
 800d2ae:	4b58      	ldr	r3, [pc, #352]	; (800d410 <SYSSystem5ms+0x9c0>)
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d228      	bcs.n	800d308 <SYSSystem5ms+0x8b8>
						LineFollow(-fLFDistU - 0.2,-fFwdU,fRotateU, 1.5);
 800d2b6:	4b53      	ldr	r3, [pc, #332]	; (800d404 <SYSSystem5ms+0x9b4>)
 800d2b8:	edd3 7a00 	vldr	s15, [r3]
 800d2bc:	eef1 7a67 	vneg.f32	s15, s15
 800d2c0:	ee17 3a90 	vmov	r3, s15
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7f3 f93f 	bl	8000548 <__aeabi_f2d>
 800d2ca:	a345      	add	r3, pc, #276	; (adr r3, 800d3e0 <SYSSystem5ms+0x990>)
 800d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d0:	f7f2 ffda 	bl	8000288 <__aeabi_dsub>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4610      	mov	r0, r2
 800d2da:	4619      	mov	r1, r3
 800d2dc:	f7f3 fc84 	bl	8000be8 <__aeabi_d2f>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	4b49      	ldr	r3, [pc, #292]	; (800d408 <SYSSystem5ms+0x9b8>)
 800d2e4:	edd3 7a00 	vldr	s15, [r3]
 800d2e8:	eef1 7a67 	vneg.f32	s15, s15
 800d2ec:	4b3f      	ldr	r3, [pc, #252]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d2ee:	ed93 7a00 	vldr	s14, [r3]
 800d2f2:	eef7 1a08 	vmov.f32	s3, #120	; 0x3fc00000  1.5
 800d2f6:	eeb0 1a47 	vmov.f32	s2, s14
 800d2fa:	eef0 0a67 	vmov.f32	s1, s15
 800d2fe:	ee00 2a10 	vmov	s0, r2
 800d302:	f000 f9e9 	bl	800d6d8 <LineFollow>
 800d306:	e026      	b.n	800d356 <SYSSystem5ms+0x906>
					} else if(fRotateErr != 0.0){
 800d308:	4b37      	ldr	r3, [pc, #220]	; (800d3e8 <SYSSystem5ms+0x998>)
 800d30a:	edd3 7a00 	vldr	s15, [r3]
 800d30e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d316:	d00d      	beq.n	800d334 <SYSSystem5ms+0x8e4>
						LineFollow(0.0,0.0,fRotateU,2.0);
 800d318:	4b34      	ldr	r3, [pc, #208]	; (800d3ec <SYSSystem5ms+0x99c>)
 800d31a:	edd3 7a00 	vldr	s15, [r3]
 800d31e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800d322:	eeb0 1a67 	vmov.f32	s2, s15
 800d326:	eddf 0a32 	vldr	s1, [pc, #200]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d32a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d32e:	f000 f9d3 	bl	800d6d8 <LineFollow>
 800d332:	e010      	b.n	800d356 <SYSSystem5ms+0x906>
					} else {
						LineFollow(0.0,0.0,0.0,0.0);
 800d334:	eddf 1a2e 	vldr	s3, [pc, #184]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d338:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d33c:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d340:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800d3f0 <SYSSystem5ms+0x9a0>
 800d344:	f000 f9c8 	bl	800d6d8 <LineFollow>
						sys.busy_flag = 0;
 800d348:	4a2a      	ldr	r2, [pc, #168]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d34a:	7813      	ldrb	r3, [r2, #0]
 800d34c:	f36f 0341 	bfc	r3, #1, #1
 800d350:	7013      	strb	r3, [r2, #0]
 800d352:	e000      	b.n	800d356 <SYSSystem5ms+0x906>
					if(Dir == DIR_RIGHT){
 800d354:	bf00      	nop
			}
		}
		//LineFollowEnd//

		//ROBOT ROTATE USING IMU Start - testing //+ve:clkwise,-ve:anti-clkwise,max:+-180
		if (sys.rotate){
 800d356:	4b27      	ldr	r3, [pc, #156]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d358:	785b      	ldrb	r3, [r3, #1]
 800d35a:	f003 0308 	and.w	r3, r3, #8
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 80aa 	beq.w	800d4ba <SYSSystem5ms+0xa6a>
			sys.busy_flag = 1;
 800d366:	4a23      	ldr	r2, [pc, #140]	; (800d3f4 <SYSSystem5ms+0x9a4>)
 800d368:	7813      	ldrb	r3, [r2, #0]
 800d36a:	f043 0302 	orr.w	r3, r3, #2
 800d36e:	7013      	strb	r3, [r2, #0]

			fAngleErr = (float)(AngleTargetDeg - (int16_t)fyaw);
 800d370:	4b28      	ldr	r3, [pc, #160]	; (800d414 <SYSSystem5ms+0x9c4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a28      	ldr	r2, [pc, #160]	; (800d418 <SYSSystem5ms+0x9c8>)
 800d376:	edd2 7a00 	vldr	s15, [r2]
 800d37a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d37e:	ee17 2a90 	vmov	r2, s15
 800d382:	b212      	sxth	r2, r2
 800d384:	1a9b      	subs	r3, r3, r2
 800d386:	ee07 3a90 	vmov	s15, r3
 800d38a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d38e:	4b23      	ldr	r3, [pc, #140]	; (800d41c <SYSSystem5ms+0x9cc>)
 800d390:	edc3 7a00 	vstr	s15, [r3]


			if((int16_t)fAngleErr < -360){
 800d394:	4b21      	ldr	r3, [pc, #132]	; (800d41c <SYSSystem5ms+0x9cc>)
 800d396:	edd3 7a00 	vldr	s15, [r3]
 800d39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d39e:	ee17 3a90 	vmov	r3, s15
 800d3a2:	b21b      	sxth	r3, r3
 800d3a4:	f513 7fb4 	cmn.w	r3, #360	; 0x168
 800d3a8:	da3c      	bge.n	800d424 <SYSSystem5ms+0x9d4>
				tempyaw = (int16_t)fyaw - 360;
 800d3aa:	4b1b      	ldr	r3, [pc, #108]	; (800d418 <SYSSystem5ms+0x9c8>)
 800d3ac:	edd3 7a00 	vldr	s15, [r3]
 800d3b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3b4:	ee17 3a90 	vmov	r3, s15
 800d3b8:	b21b      	sxth	r3, r3
 800d3ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800d3be:	4a18      	ldr	r2, [pc, #96]	; (800d420 <SYSSystem5ms+0x9d0>)
 800d3c0:	6013      	str	r3, [r2, #0]
				fAngleErr = (float)(AngleTargetDeg - tempyaw);
 800d3c2:	4b14      	ldr	r3, [pc, #80]	; (800d414 <SYSSystem5ms+0x9c4>)
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	4b16      	ldr	r3, [pc, #88]	; (800d420 <SYSSystem5ms+0x9d0>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	1ad3      	subs	r3, r2, r3
 800d3cc:	ee07 3a90 	vmov	s15, r3
 800d3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3d4:	4b11      	ldr	r3, [pc, #68]	; (800d41c <SYSSystem5ms+0x9cc>)
 800d3d6:	edc3 7a00 	vstr	s15, [r3]
 800d3da:	e046      	b.n	800d46a <SYSSystem5ms+0xa1a>
 800d3dc:	f3af 8000 	nop.w
 800d3e0:	9999999a 	.word	0x9999999a
 800d3e4:	3fc99999 	.word	0x3fc99999
 800d3e8:	20006da0 	.word	0x20006da0
 800d3ec:	20007bf0 	.word	0x20007bf0
 800d3f0:	00000000 	.word	0x00000000
 800d3f4:	20006db0 	.word	0x20006db0
 800d3f8:	20007b8c 	.word	0x20007b8c
 800d3fc:	200080c0 	.word	0x200080c0
 800d400:	20007dcc 	.word	0x20007dcc
 800d404:	20007a5c 	.word	0x20007a5c
 800d408:	200080c4 	.word	0x200080c4
 800d40c:	200065b0 	.word	0x200065b0
 800d410:	200081bc 	.word	0x200081bc
 800d414:	20007bf4 	.word	0x20007bf4
 800d418:	20007ca0 	.word	0x20007ca0
 800d41c:	20007c20 	.word	0x20007c20
 800d420:	20006728 	.word	0x20006728
			}else if((int16_t)fAngleErr > 360){
 800d424:	4b71      	ldr	r3, [pc, #452]	; (800d5ec <SYSSystem5ms+0xb9c>)
 800d426:	edd3 7a00 	vldr	s15, [r3]
 800d42a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d42e:	ee17 3a90 	vmov	r3, s15
 800d432:	b21b      	sxth	r3, r3
 800d434:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800d438:	dd17      	ble.n	800d46a <SYSSystem5ms+0xa1a>
				tempyaw = 360 + (int16_t)fyaw;
 800d43a:	4b6d      	ldr	r3, [pc, #436]	; (800d5f0 <SYSSystem5ms+0xba0>)
 800d43c:	edd3 7a00 	vldr	s15, [r3]
 800d440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d444:	ee17 3a90 	vmov	r3, s15
 800d448:	b21b      	sxth	r3, r3
 800d44a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d44e:	4a69      	ldr	r2, [pc, #420]	; (800d5f4 <SYSSystem5ms+0xba4>)
 800d450:	6013      	str	r3, [r2, #0]
				fAngleErr = (float)(AngleTargetDeg - tempyaw);
 800d452:	4b69      	ldr	r3, [pc, #420]	; (800d5f8 <SYSSystem5ms+0xba8>)
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	4b67      	ldr	r3, [pc, #412]	; (800d5f4 <SYSSystem5ms+0xba4>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	ee07 3a90 	vmov	s15, r3
 800d460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d464:	4b61      	ldr	r3, [pc, #388]	; (800d5ec <SYSSystem5ms+0xb9c>)
 800d466:	edc3 7a00 	vstr	s15, [r3]
			}

			PID(&imu_rotate);
 800d46a:	4864      	ldr	r0, [pc, #400]	; (800d5fc <SYSSystem5ms+0xbac>)
 800d46c:	f7f7 fb2d 	bl	8004aca <PID>

			fFLeftVelR  = fAngleU;
 800d470:	4b63      	ldr	r3, [pc, #396]	; (800d600 <SYSSystem5ms+0xbb0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a63      	ldr	r2, [pc, #396]	; (800d604 <SYSSystem5ms+0xbb4>)
 800d476:	6013      	str	r3, [r2, #0]
			fBLeftVelR  = fAngleU;
 800d478:	4b61      	ldr	r3, [pc, #388]	; (800d600 <SYSSystem5ms+0xbb0>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a62      	ldr	r2, [pc, #392]	; (800d608 <SYSSystem5ms+0xbb8>)
 800d47e:	6013      	str	r3, [r2, #0]
			fFRightVelR = -fAngleU;
 800d480:	4b5f      	ldr	r3, [pc, #380]	; (800d600 <SYSSystem5ms+0xbb0>)
 800d482:	edd3 7a00 	vldr	s15, [r3]
 800d486:	eef1 7a67 	vneg.f32	s15, s15
 800d48a:	4b60      	ldr	r3, [pc, #384]	; (800d60c <SYSSystem5ms+0xbbc>)
 800d48c:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelR = -fAngleU;
 800d490:	4b5b      	ldr	r3, [pc, #364]	; (800d600 <SYSSystem5ms+0xbb0>)
 800d492:	edd3 7a00 	vldr	s15, [r3]
 800d496:	eef1 7a67 	vneg.f32	s15, s15
 800d49a:	4b5d      	ldr	r3, [pc, #372]	; (800d610 <SYSSystem5ms+0xbc0>)
 800d49c:	edc3 7a00 	vstr	s15, [r3]

			if(fAngleErr == 0.0)
 800d4a0:	4b52      	ldr	r3, [pc, #328]	; (800d5ec <SYSSystem5ms+0xb9c>)
 800d4a2:	edd3 7a00 	vldr	s15, [r3]
 800d4a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ae:	d104      	bne.n	800d4ba <SYSSystem5ms+0xa6a>
				sys.busy_flag = 0;
 800d4b0:	4a58      	ldr	r2, [pc, #352]	; (800d614 <SYSSystem5ms+0xbc4>)
 800d4b2:	7813      	ldrb	r3, [r2, #0]
 800d4b4:	f36f 0341 	bfc	r3, #1, #1
 800d4b8:	7013      	strb	r3, [r2, #0]
		}

		//ROBOT ROTATE USING IMU End - testing

		//PathPLanningStart//
		if(sys.odnstart_flag && pp.pp_start) {
 800d4ba:	4b56      	ldr	r3, [pc, #344]	; (800d614 <SYSSystem5ms+0xbc4>)
 800d4bc:	785b      	ldrb	r3, [r3, #1]
 800d4be:	f003 0310 	and.w	r3, r3, #16
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d037      	beq.n	800d538 <SYSSystem5ms+0xae8>
 800d4c8:	4b53      	ldr	r3, [pc, #332]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d4ca:	f893 3538 	ldrb.w	r3, [r3, #1336]	; 0x538
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d02f      	beq.n	800d538 <SYSSystem5ms+0xae8>

			switch (dev_cfg.base_type){
 800d4d8:	4b50      	ldr	r3, [pc, #320]	; (800d61c <SYSSystem5ms+0xbcc>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d002      	beq.n	800d4e6 <SYSSystem5ms+0xa96>
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d014      	beq.n	800d50e <SYSSystem5ms+0xabe>
				fBLeftVelR  = pp.v3;
				fBRightVelR = pp.v4;
				break;

			default:
				break;
 800d4e4:	e029      	b.n	800d53a <SYSSystem5ms+0xaea>
				fFLeftVelR  = pp.v1;
 800d4e6:	4b4c      	ldr	r3, [pc, #304]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d4e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d4ec:	4a45      	ldr	r2, [pc, #276]	; (800d604 <SYSSystem5ms+0xbb4>)
 800d4ee:	6013      	str	r3, [r2, #0]
				fBLeftVelR  = pp.v3;
 800d4f0:	4b49      	ldr	r3, [pc, #292]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d4f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d4f6:	4a44      	ldr	r2, [pc, #272]	; (800d608 <SYSSystem5ms+0xbb8>)
 800d4f8:	6013      	str	r3, [r2, #0]
				fFRightVelR = pp.v2;
 800d4fa:	4b47      	ldr	r3, [pc, #284]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d4fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d500:	4a42      	ldr	r2, [pc, #264]	; (800d60c <SYSSystem5ms+0xbbc>)
 800d502:	6013      	str	r3, [r2, #0]
				fBRightVelR = 0.00;
 800d504:	4b42      	ldr	r3, [pc, #264]	; (800d610 <SYSSystem5ms+0xbc0>)
 800d506:	f04f 0200 	mov.w	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
				break;
 800d50c:	e015      	b.n	800d53a <SYSSystem5ms+0xaea>
				fFLeftVelR  = pp.v2;
 800d50e:	4b42      	ldr	r3, [pc, #264]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d510:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d514:	4a3b      	ldr	r2, [pc, #236]	; (800d604 <SYSSystem5ms+0xbb4>)
 800d516:	6013      	str	r3, [r2, #0]
				fFRightVelR = pp.v1;
 800d518:	4b3f      	ldr	r3, [pc, #252]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d51a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d51e:	4a3b      	ldr	r2, [pc, #236]	; (800d60c <SYSSystem5ms+0xbbc>)
 800d520:	6013      	str	r3, [r2, #0]
				fBLeftVelR  = pp.v3;
 800d522:	4b3d      	ldr	r3, [pc, #244]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d524:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d528:	4a37      	ldr	r2, [pc, #220]	; (800d608 <SYSSystem5ms+0xbb8>)
 800d52a:	6013      	str	r3, [r2, #0]
				fBRightVelR = pp.v4;
 800d52c:	4b3a      	ldr	r3, [pc, #232]	; (800d618 <SYSSystem5ms+0xbc8>)
 800d52e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800d532:	4a37      	ldr	r2, [pc, #220]	; (800d610 <SYSSystem5ms+0xbc0>)
 800d534:	6013      	str	r3, [r2, #0]
				break;
 800d536:	e000      	b.n	800d53a <SYSSystem5ms+0xaea>
			}

		}
 800d538:	bf00      	nop
		}
		//After finish running your task, reset UF.user flag to
		//enable it to go to UserFinish state

		//UserEnd
		if (sys.vel_flag){
 800d53a:	4b36      	ldr	r3, [pc, #216]	; (800d614 <SYSSystem5ms+0xbc4>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	f003 0304 	and.w	r3, r3, #4
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b00      	cmp	r3, #0
 800d546:	d04c      	beq.n	800d5e2 <SYSSystem5ms+0xb92>
			fFLeftVelErr = fFLeftVelR - fFLeftVel;
 800d548:	4b2e      	ldr	r3, [pc, #184]	; (800d604 <SYSSystem5ms+0xbb4>)
 800d54a:	ed93 7a00 	vldr	s14, [r3]
 800d54e:	4b34      	ldr	r3, [pc, #208]	; (800d620 <SYSSystem5ms+0xbd0>)
 800d550:	edd3 7a00 	vldr	s15, [r3]
 800d554:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d558:	4b32      	ldr	r3, [pc, #200]	; (800d624 <SYSSystem5ms+0xbd4>)
 800d55a:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelErr = fBLeftVelR - fBLeftVel;
 800d55e:	4b2a      	ldr	r3, [pc, #168]	; (800d608 <SYSSystem5ms+0xbb8>)
 800d560:	ed93 7a00 	vldr	s14, [r3]
 800d564:	4b30      	ldr	r3, [pc, #192]	; (800d628 <SYSSystem5ms+0xbd8>)
 800d566:	edd3 7a00 	vldr	s15, [r3]
 800d56a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d56e:	4b2f      	ldr	r3, [pc, #188]	; (800d62c <SYSSystem5ms+0xbdc>)
 800d570:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelErr = fFRightVelR - fFRightVel;
 800d574:	4b25      	ldr	r3, [pc, #148]	; (800d60c <SYSSystem5ms+0xbbc>)
 800d576:	ed93 7a00 	vldr	s14, [r3]
 800d57a:	4b2d      	ldr	r3, [pc, #180]	; (800d630 <SYSSystem5ms+0xbe0>)
 800d57c:	edd3 7a00 	vldr	s15, [r3]
 800d580:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d584:	4b2b      	ldr	r3, [pc, #172]	; (800d634 <SYSSystem5ms+0xbe4>)
 800d586:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelErr = fBRightVelR - fBRightVel;
 800d58a:	4b21      	ldr	r3, [pc, #132]	; (800d610 <SYSSystem5ms+0xbc0>)
 800d58c:	ed93 7a00 	vldr	s14, [r3]
 800d590:	4b29      	ldr	r3, [pc, #164]	; (800d638 <SYSSystem5ms+0xbe8>)
 800d592:	edd3 7a00 	vldr	s15, [r3]
 800d596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d59a:	4b28      	ldr	r3, [pc, #160]	; (800d63c <SYSSystem5ms+0xbec>)
 800d59c:	edc3 7a00 	vstr	s15, [r3]

			if(dev_cfg.PID_type == fuzzyPID){
 800d5a0:	4b1e      	ldr	r3, [pc, #120]	; (800d61c <SYSSystem5ms+0xbcc>)
 800d5a2:	789b      	ldrb	r3, [r3, #2]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d10c      	bne.n	800d5c2 <SYSSystem5ms+0xb72>
				FuzzyPID(&fuz_fleft_vel);
 800d5a8:	4825      	ldr	r0, [pc, #148]	; (800d640 <SYSSystem5ms+0xbf0>)
 800d5aa:	f7f6 fa4f 	bl	8003a4c <FuzzyPID>
				FuzzyPID(&fuz_bleft_vel);
 800d5ae:	4825      	ldr	r0, [pc, #148]	; (800d644 <SYSSystem5ms+0xbf4>)
 800d5b0:	f7f6 fa4c 	bl	8003a4c <FuzzyPID>
				FuzzyPID(&fuz_fright_vel);
 800d5b4:	4824      	ldr	r0, [pc, #144]	; (800d648 <SYSSystem5ms+0xbf8>)
 800d5b6:	f7f6 fa49 	bl	8003a4c <FuzzyPID>
				FuzzyPID(&fuz_bright_vel);
 800d5ba:	4824      	ldr	r0, [pc, #144]	; (800d64c <SYSSystem5ms+0xbfc>)
 800d5bc:	f7f6 fa46 	bl	8003a4c <FuzzyPID>
//			}

		}
	}

}
 800d5c0:	e00f      	b.n	800d5e2 <SYSSystem5ms+0xb92>
			} else if(dev_cfg.PID_type == roboconPID){
 800d5c2:	4b16      	ldr	r3, [pc, #88]	; (800d61c <SYSSystem5ms+0xbcc>)
 800d5c4:	789b      	ldrb	r3, [r3, #2]
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d10b      	bne.n	800d5e2 <SYSSystem5ms+0xb92>
				PID(&fleft_vel);
 800d5ca:	4821      	ldr	r0, [pc, #132]	; (800d650 <SYSSystem5ms+0xc00>)
 800d5cc:	f7f7 fa7d 	bl	8004aca <PID>
				PID(&bleft_vel);
 800d5d0:	4820      	ldr	r0, [pc, #128]	; (800d654 <SYSSystem5ms+0xc04>)
 800d5d2:	f7f7 fa7a 	bl	8004aca <PID>
				PID(&fright_vel);
 800d5d6:	4820      	ldr	r0, [pc, #128]	; (800d658 <SYSSystem5ms+0xc08>)
 800d5d8:	f7f7 fa77 	bl	8004aca <PID>
				PID(&bright_vel);
 800d5dc:	481f      	ldr	r0, [pc, #124]	; (800d65c <SYSSystem5ms+0xc0c>)
 800d5de:	f7f7 fa74 	bl	8004aca <PID>
}
 800d5e2:	bf00      	nop
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	ecbd 8b02 	vpop	{d8}
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20007c20 	.word	0x20007c20
 800d5f0:	20007ca0 	.word	0x20007ca0
 800d5f4:	20006728 	.word	0x20006728
 800d5f8:	20007bf4 	.word	0x20007bf4
 800d5fc:	200065c8 	.word	0x200065c8
 800d600:	20006730 	.word	0x20006730
 800d604:	20006814 	.word	0x20006814
 800d608:	200081c4 	.word	0x200081c4
 800d60c:	20007d38 	.word	0x20007d38
 800d610:	20007cc4 	.word	0x20007cc4
 800d614:	20006db0 	.word	0x20006db0
 800d618:	20006864 	.word	0x20006864
 800d61c:	20007cc8 	.word	0x20007cc8
 800d620:	2000809c 	.word	0x2000809c
 800d624:	20006e68 	.word	0x20006e68
 800d628:	20006e1c 	.word	0x20006e1c
 800d62c:	20007f50 	.word	0x20007f50
 800d630:	20006f54 	.word	0x20006f54
 800d634:	200073dc 	.word	0x200073dc
 800d638:	20007450 	.word	0x20007450
 800d63c:	20006684 	.word	0x20006684
 800d640:	20007c24 	.word	0x20007c24
 800d644:	20007de0 	.word	0x20007de0
 800d648:	20007ae4 	.word	0x20007ae4
 800d64c:	20008010 	.word	0x20008010
 800d650:	20006e90 	.word	0x20006e90
 800d654:	200066d0 	.word	0x200066d0
 800d658:	20006dc4 	.word	0x20006dc4
 800d65c:	20007f5c 	.word	0x20007f5c

0800d660 <SYSSystemAct>:
void SYSSystemAct(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
	WriteBDC(&BDC1,(int32_t)fFLeftVelU);
 800d664:	4b14      	ldr	r3, [pc, #80]	; (800d6b8 <SYSSystemAct+0x58>)
 800d666:	edd3 7a00 	vldr	s15, [r3]
 800d66a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d66e:	ee17 1a90 	vmov	r1, s15
 800d672:	4812      	ldr	r0, [pc, #72]	; (800d6bc <SYSSystemAct+0x5c>)
 800d674:	f7f3 fe94 	bl	80013a0 <WriteBDC>
	WriteBDC(&BDC2,(int32_t)fFRightVelU);
 800d678:	4b11      	ldr	r3, [pc, #68]	; (800d6c0 <SYSSystemAct+0x60>)
 800d67a:	edd3 7a00 	vldr	s15, [r3]
 800d67e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d682:	ee17 1a90 	vmov	r1, s15
 800d686:	480f      	ldr	r0, [pc, #60]	; (800d6c4 <SYSSystemAct+0x64>)
 800d688:	f7f3 fe8a 	bl	80013a0 <WriteBDC>
	WriteBDC(&BDC3,(int32_t)fBLeftVelU);
 800d68c:	4b0e      	ldr	r3, [pc, #56]	; (800d6c8 <SYSSystemAct+0x68>)
 800d68e:	edd3 7a00 	vldr	s15, [r3]
 800d692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d696:	ee17 1a90 	vmov	r1, s15
 800d69a:	480c      	ldr	r0, [pc, #48]	; (800d6cc <SYSSystemAct+0x6c>)
 800d69c:	f7f3 fe80 	bl	80013a0 <WriteBDC>
	WriteBDC(&BDC4,(int32_t)fBRightVelU);
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <SYSSystemAct+0x70>)
 800d6a2:	edd3 7a00 	vldr	s15, [r3]
 800d6a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6aa:	ee17 1a90 	vmov	r1, s15
 800d6ae:	4809      	ldr	r0, [pc, #36]	; (800d6d4 <SYSSystemAct+0x74>)
 800d6b0:	f7f3 fe76 	bl	80013a0 <WriteBDC>
//	WriteBDC(&BDC1, 2000);
//	WriteBDC(&BDC2, 4000);
//	WriteBDC(&BDC3, 2000);
//	WriteBDC(&BDC4, 2000);
	//	VESCPDC(fFLeftVelU/20000,fFRightVelU/20000,fBLeftVelU/20000,fBRightVelU/20000, &vesc);
}
 800d6b4:	bf00      	nop
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20006e8c 	.word	0x20006e8c
 800d6bc:	20008130 	.word	0x20008130
 800d6c0:	20006688 	.word	0x20006688
 800d6c4:	20006e38 	.word	0x20006e38
 800d6c8:	20006744 	.word	0x20006744
 800d6cc:	20006824 	.word	0x20006824
 800d6d0:	200065b4 	.word	0x200065b4
 800d6d4:	20007b5c 	.word	0x20007b5c

0800d6d8 <LineFollow>:

/*********************************************/
/*           Private Function 			     */
/*********************************************/

void LineFollow(float vel, float angle, float rotate_value, float w){
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	ed87 0a03 	vstr	s0, [r7, #12]
 800d6e2:	edc7 0a02 	vstr	s1, [r7, #8]
 800d6e6:	ed87 1a01 	vstr	s2, [r7, #4]
 800d6ea:	edc7 1a00 	vstr	s3, [r7]

	if(Dir == DIR_LEFT || Dir == DIR_RIGHT){
 800d6ee:	4bbf      	ldr	r3, [pc, #764]	; (800d9ec <LineFollow+0x314>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2b10      	cmp	r3, #16
 800d6f4:	d004      	beq.n	800d700 <LineFollow+0x28>
 800d6f6:	4bbd      	ldr	r3, [pc, #756]	; (800d9ec <LineFollow+0x314>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b11      	cmp	r3, #17
 800d6fc:	f040 80e7 	bne.w	800d8ce <LineFollow+0x1f6>
		if(dev_cfg.base_type == fwd_omni){
 800d700:	4bbb      	ldr	r3, [pc, #748]	; (800d9f0 <LineFollow+0x318>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2b02      	cmp	r3, #2
 800d706:	f040 8081 	bne.w	800d80c <LineFollow+0x134>
			fFLeftVelR  =  vel * Cos((int)angle + 45) + rotate_value * w;
 800d70a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d712:	ee17 3a90 	vmov	r3, s15
 800d716:	332d      	adds	r3, #45	; 0x2d
 800d718:	ee07 3a90 	vmov	s15, r3
 800d71c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d720:	eeb0 0a67 	vmov.f32	s0, s15
 800d724:	f000 fa10 	bl	800db48 <Cos>
 800d728:	eeb0 7a40 	vmov.f32	s14, s0
 800d72c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d730:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d734:	edd7 6a01 	vldr	s13, [r7, #4]
 800d738:	edd7 7a00 	vldr	s15, [r7]
 800d73c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d740:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d744:	4bab      	ldr	r3, [pc, #684]	; (800d9f4 <LineFollow+0x31c>)
 800d746:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Sin((int)angle - 135) - rotate_value * w;
 800d74a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d74e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d752:	ee17 3a90 	vmov	r3, s15
 800d756:	3b87      	subs	r3, #135	; 0x87
 800d758:	ee07 3a90 	vmov	s15, r3
 800d75c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d760:	eeb0 0a67 	vmov.f32	s0, s15
 800d764:	f000 f9bc 	bl	800dae0 <Sin>
 800d768:	eeb0 7a40 	vmov.f32	s14, s0
 800d76c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d770:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d774:	edd7 6a01 	vldr	s13, [r7, #4]
 800d778:	edd7 7a00 	vldr	s15, [r7]
 800d77c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d780:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d784:	4b9c      	ldr	r3, [pc, #624]	; (800d9f8 <LineFollow+0x320>)
 800d786:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Sin((int)angle - 135) + rotate_value * w;
 800d78a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d78e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d792:	ee17 3a90 	vmov	r3, s15
 800d796:	3b87      	subs	r3, #135	; 0x87
 800d798:	ee07 3a90 	vmov	s15, r3
 800d79c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7a0:	eeb0 0a67 	vmov.f32	s0, s15
 800d7a4:	f000 f99c 	bl	800dae0 <Sin>
 800d7a8:	eeb0 7a40 	vmov.f32	s14, s0
 800d7ac:	edd7 7a03 	vldr	s15, [r7, #12]
 800d7b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7b4:	edd7 6a01 	vldr	s13, [r7, #4]
 800d7b8:	edd7 7a00 	vldr	s15, [r7]
 800d7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7c4:	4b8d      	ldr	r3, [pc, #564]	; (800d9fc <LineFollow+0x324>)
 800d7c6:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelR =  vel * Cos((int)angle + 45) - rotate_value * w;
 800d7ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800d7ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7d2:	ee17 3a90 	vmov	r3, s15
 800d7d6:	332d      	adds	r3, #45	; 0x2d
 800d7d8:	ee07 3a90 	vmov	s15, r3
 800d7dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d7e4:	f000 f9b0 	bl	800db48 <Cos>
 800d7e8:	eeb0 7a40 	vmov.f32	s14, s0
 800d7ec:	edd7 7a03 	vldr	s15, [r7, #12]
 800d7f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7f4:	edd7 6a01 	vldr	s13, [r7, #4]
 800d7f8:	edd7 7a00 	vldr	s15, [r7]
 800d7fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d800:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d804:	4b7e      	ldr	r3, [pc, #504]	; (800da00 <LineFollow+0x328>)
 800d806:	edc3 7a00 	vstr	s15, [r3]
		if(dev_cfg.base_type == fwd_omni){
 800d80a:	e15b      	b.n	800dac4 <LineFollow+0x3ec>
		}else if(dev_cfg.base_type == tri_omni){
 800d80c:	4b78      	ldr	r3, [pc, #480]	; (800d9f0 <LineFollow+0x318>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	f040 8157 	bne.w	800dac4 <LineFollow+0x3ec>
			fFLeftVelR  =  vel * Cos((int)angle +60) + rotate_value * w;
 800d816:	edd7 7a02 	vldr	s15, [r7, #8]
 800d81a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d81e:	ee17 3a90 	vmov	r3, s15
 800d822:	333c      	adds	r3, #60	; 0x3c
 800d824:	ee07 3a90 	vmov	s15, r3
 800d828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d82c:	eeb0 0a67 	vmov.f32	s0, s15
 800d830:	f000 f98a 	bl	800db48 <Cos>
 800d834:	eeb0 7a40 	vmov.f32	s14, s0
 800d838:	edd7 7a03 	vldr	s15, [r7, #12]
 800d83c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d840:	edd7 6a01 	vldr	s13, [r7, #4]
 800d844:	edd7 7a00 	vldr	s15, [r7]
 800d848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d84c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d850:	4b68      	ldr	r3, [pc, #416]	; (800d9f4 <LineFollow+0x31c>)
 800d852:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Cos((int)angle +120) - rotate_value * w;
 800d856:	edd7 7a02 	vldr	s15, [r7, #8]
 800d85a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d85e:	ee17 3a90 	vmov	r3, s15
 800d862:	3378      	adds	r3, #120	; 0x78
 800d864:	ee07 3a90 	vmov	s15, r3
 800d868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d86c:	eeb0 0a67 	vmov.f32	s0, s15
 800d870:	f000 f96a 	bl	800db48 <Cos>
 800d874:	eeb0 7a40 	vmov.f32	s14, s0
 800d878:	edd7 7a03 	vldr	s15, [r7, #12]
 800d87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d880:	edd7 6a01 	vldr	s13, [r7, #4]
 800d884:	edd7 7a00 	vldr	s15, [r7]
 800d888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d88c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d890:	4b59      	ldr	r3, [pc, #356]	; (800d9f8 <LineFollow+0x320>)
 800d892:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Cos((int)angle + 0) - rotate_value * w;
 800d896:	edd7 7a02 	vldr	s15, [r7, #8]
 800d89a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d89e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8a2:	eeb0 0a67 	vmov.f32	s0, s15
 800d8a6:	f000 f94f 	bl	800db48 <Cos>
 800d8aa:	eeb0 7a40 	vmov.f32	s14, s0
 800d8ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8b6:	edd7 6a01 	vldr	s13, [r7, #4]
 800d8ba:	edd7 7a00 	vldr	s15, [r7]
 800d8be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8c6:	4b4d      	ldr	r3, [pc, #308]	; (800d9fc <LineFollow+0x324>)
 800d8c8:	edc3 7a00 	vstr	s15, [r3]
		if(dev_cfg.base_type == fwd_omni){
 800d8cc:	e0fa      	b.n	800dac4 <LineFollow+0x3ec>
		}
	} else if(Dir == DIR_FRONT || Dir == DIR_BACK){
 800d8ce:	4b47      	ldr	r3, [pc, #284]	; (800d9ec <LineFollow+0x314>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b0e      	cmp	r3, #14
 800d8d4:	d004      	beq.n	800d8e0 <LineFollow+0x208>
 800d8d6:	4b45      	ldr	r3, [pc, #276]	; (800d9ec <LineFollow+0x314>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2b0f      	cmp	r3, #15
 800d8dc:	f040 80f3 	bne.w	800dac6 <LineFollow+0x3ee>
		if(dev_cfg.base_type == fwd_omni){
 800d8e0:	4b43      	ldr	r3, [pc, #268]	; (800d9f0 <LineFollow+0x318>)
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2b02      	cmp	r3, #2
 800d8e6:	f040 808d 	bne.w	800da04 <LineFollow+0x32c>
			fFLeftVelR  =  vel * Cos((int)angle - 45) + rotate_value * w;
 800d8ea:	edd7 7a02 	vldr	s15, [r7, #8]
 800d8ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8f2:	ee17 3a90 	vmov	r3, s15
 800d8f6:	3b2d      	subs	r3, #45	; 0x2d
 800d8f8:	ee07 3a90 	vmov	s15, r3
 800d8fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d900:	eeb0 0a67 	vmov.f32	s0, s15
 800d904:	f000 f920 	bl	800db48 <Cos>
 800d908:	eeb0 7a40 	vmov.f32	s14, s0
 800d90c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d910:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d914:	edd7 6a01 	vldr	s13, [r7, #4]
 800d918:	edd7 7a00 	vldr	s15, [r7]
 800d91c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d920:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d924:	4b33      	ldr	r3, [pc, #204]	; (800d9f4 <LineFollow+0x31c>)
 800d926:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Sin((int)angle + 135) - rotate_value * w;
 800d92a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d92e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d932:	ee17 3a90 	vmov	r3, s15
 800d936:	3387      	adds	r3, #135	; 0x87
 800d938:	ee07 3a90 	vmov	s15, r3
 800d93c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d940:	eeb0 0a67 	vmov.f32	s0, s15
 800d944:	f000 f8cc 	bl	800dae0 <Sin>
 800d948:	eeb0 7a40 	vmov.f32	s14, s0
 800d94c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d950:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d954:	edd7 6a01 	vldr	s13, [r7, #4]
 800d958:	edd7 7a00 	vldr	s15, [r7]
 800d95c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d960:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d964:	4b24      	ldr	r3, [pc, #144]	; (800d9f8 <LineFollow+0x320>)
 800d966:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Sin((int)angle + 135) + rotate_value * w;
 800d96a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d96e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d972:	ee17 3a90 	vmov	r3, s15
 800d976:	3387      	adds	r3, #135	; 0x87
 800d978:	ee07 3a90 	vmov	s15, r3
 800d97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d980:	eeb0 0a67 	vmov.f32	s0, s15
 800d984:	f000 f8ac 	bl	800dae0 <Sin>
 800d988:	eeb0 7a40 	vmov.f32	s14, s0
 800d98c:	edd7 7a03 	vldr	s15, [r7, #12]
 800d990:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d994:	edd7 6a01 	vldr	s13, [r7, #4]
 800d998:	edd7 7a00 	vldr	s15, [r7]
 800d99c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9a4:	4b15      	ldr	r3, [pc, #84]	; (800d9fc <LineFollow+0x324>)
 800d9a6:	edc3 7a00 	vstr	s15, [r3]
			fBRightVelR =  vel * Cos((int)angle - 45) - rotate_value * w;
 800d9aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9b2:	ee17 3a90 	vmov	r3, s15
 800d9b6:	3b2d      	subs	r3, #45	; 0x2d
 800d9b8:	ee07 3a90 	vmov	s15, r3
 800d9bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d9c4:	f000 f8c0 	bl	800db48 <Cos>
 800d9c8:	eeb0 7a40 	vmov.f32	s14, s0
 800d9cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d9d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9d4:	edd7 6a01 	vldr	s13, [r7, #4]
 800d9d8:	edd7 7a00 	vldr	s15, [r7]
 800d9dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9e4:	4b06      	ldr	r3, [pc, #24]	; (800da00 <LineFollow+0x328>)
 800d9e6:	edc3 7a00 	vstr	s15, [r3]
			fFLeftVelR  =  vel * Sin((int)angle +60) + rotate_value * w;
			fFRightVelR =  vel * Sin((int)angle +120) - rotate_value * w;
			fBLeftVelR  =  vel * Sin((int)angle + 0) - rotate_value * w;
		}
	}
}
 800d9ea:	e06c      	b.n	800dac6 <LineFollow+0x3ee>
 800d9ec:	20007b8c 	.word	0x20007b8c
 800d9f0:	20007cc8 	.word	0x20007cc8
 800d9f4:	20006814 	.word	0x20006814
 800d9f8:	20007d38 	.word	0x20007d38
 800d9fc:	200081c4 	.word	0x200081c4
 800da00:	20007cc4 	.word	0x20007cc4
		} else if(dev_cfg.base_type ==  tri_omni){
 800da04:	4b32      	ldr	r3, [pc, #200]	; (800dad0 <LineFollow+0x3f8>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d15c      	bne.n	800dac6 <LineFollow+0x3ee>
			fFLeftVelR  =  vel * Sin((int)angle +60) + rotate_value * w;
 800da0c:	edd7 7a02 	vldr	s15, [r7, #8]
 800da10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da14:	ee17 3a90 	vmov	r3, s15
 800da18:	333c      	adds	r3, #60	; 0x3c
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da22:	eeb0 0a67 	vmov.f32	s0, s15
 800da26:	f000 f85b 	bl	800dae0 <Sin>
 800da2a:	eeb0 7a40 	vmov.f32	s14, s0
 800da2e:	edd7 7a03 	vldr	s15, [r7, #12]
 800da32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da36:	edd7 6a01 	vldr	s13, [r7, #4]
 800da3a:	edd7 7a00 	vldr	s15, [r7]
 800da3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da46:	4b23      	ldr	r3, [pc, #140]	; (800dad4 <LineFollow+0x3fc>)
 800da48:	edc3 7a00 	vstr	s15, [r3]
			fFRightVelR =  vel * Sin((int)angle +120) - rotate_value * w;
 800da4c:	edd7 7a02 	vldr	s15, [r7, #8]
 800da50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da54:	ee17 3a90 	vmov	r3, s15
 800da58:	3378      	adds	r3, #120	; 0x78
 800da5a:	ee07 3a90 	vmov	s15, r3
 800da5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da62:	eeb0 0a67 	vmov.f32	s0, s15
 800da66:	f000 f83b 	bl	800dae0 <Sin>
 800da6a:	eeb0 7a40 	vmov.f32	s14, s0
 800da6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800da72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da76:	edd7 6a01 	vldr	s13, [r7, #4]
 800da7a:	edd7 7a00 	vldr	s15, [r7]
 800da7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da82:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da86:	4b14      	ldr	r3, [pc, #80]	; (800dad8 <LineFollow+0x400>)
 800da88:	edc3 7a00 	vstr	s15, [r3]
			fBLeftVelR  =  vel * Sin((int)angle + 0) - rotate_value * w;
 800da8c:	edd7 7a02 	vldr	s15, [r7, #8]
 800da90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da98:	eeb0 0a67 	vmov.f32	s0, s15
 800da9c:	f000 f820 	bl	800dae0 <Sin>
 800daa0:	eeb0 7a40 	vmov.f32	s14, s0
 800daa4:	edd7 7a03 	vldr	s15, [r7, #12]
 800daa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daac:	edd7 6a01 	vldr	s13, [r7, #4]
 800dab0:	edd7 7a00 	vldr	s15, [r7]
 800dab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dabc:	4b07      	ldr	r3, [pc, #28]	; (800dadc <LineFollow+0x404>)
 800dabe:	edc3 7a00 	vstr	s15, [r3]
}
 800dac2:	e000      	b.n	800dac6 <LineFollow+0x3ee>
		if(dev_cfg.base_type == fwd_omni){
 800dac4:	bf00      	nop
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	20007cc8 	.word	0x20007cc8
 800dad4:	20006814 	.word	0x20006814
 800dad8:	20007d38 	.word	0x20007d38
 800dadc:	200081c4 	.word	0x200081c4

0800dae0 <Sin>:

float Sin(float angle){
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	ed87 0a01 	vstr	s0, [r7, #4]
	float pi, sin;
	pi = angle * 3.141592654 / 180;
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7f2 fd2c 	bl	8000548 <__aeabi_f2d>
 800daf0:	a312      	add	r3, pc, #72	; (adr r3, 800db3c <Sin+0x5c>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	f7f2 fd7f 	bl	80005f8 <__aeabi_dmul>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4610      	mov	r0, r2
 800db00:	4619      	mov	r1, r3
 800db02:	f04f 0200 	mov.w	r2, #0
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <Sin+0x58>)
 800db08:	f7f2 fea0 	bl	800084c <__aeabi_ddiv>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	4610      	mov	r0, r2
 800db12:	4619      	mov	r1, r3
 800db14:	f7f3 f868 	bl	8000be8 <__aeabi_d2f>
 800db18:	4603      	mov	r3, r0
 800db1a:	60fb      	str	r3, [r7, #12]
	sin=sinf(pi);
 800db1c:	ed97 0a03 	vldr	s0, [r7, #12]
 800db20:	f010 fcc8 	bl	801e4b4 <sinf>
 800db24:	ed87 0a02 	vstr	s0, [r7, #8]
	return sin;
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	ee07 3a90 	vmov	s15, r3
}
 800db2e:	eeb0 0a67 	vmov.f32	s0, s15
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	40668000 	.word	0x40668000
 800db3c:	54524550 	.word	0x54524550
 800db40:	400921fb 	.word	0x400921fb
 800db44:	00000000 	.word	0x00000000

0800db48 <Cos>:

float Cos(float angle){
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	ed87 0a01 	vstr	s0, [r7, #4]
	float pi, cos;
	pi = angle * 3.141592654 / 180;
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7f2 fcf8 	bl	8000548 <__aeabi_f2d>
 800db58:	a312      	add	r3, pc, #72	; (adr r3, 800dba4 <Cos+0x5c>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f7f2 fd4b 	bl	80005f8 <__aeabi_dmul>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	4610      	mov	r0, r2
 800db68:	4619      	mov	r1, r3
 800db6a:	f04f 0200 	mov.w	r2, #0
 800db6e:	4b0c      	ldr	r3, [pc, #48]	; (800dba0 <Cos+0x58>)
 800db70:	f7f2 fe6c 	bl	800084c <__aeabi_ddiv>
 800db74:	4602      	mov	r2, r0
 800db76:	460b      	mov	r3, r1
 800db78:	4610      	mov	r0, r2
 800db7a:	4619      	mov	r1, r3
 800db7c:	f7f3 f834 	bl	8000be8 <__aeabi_d2f>
 800db80:	4603      	mov	r3, r0
 800db82:	60fb      	str	r3, [r7, #12]
	cos = cosf(pi);
 800db84:	ed97 0a03 	vldr	s0, [r7, #12]
 800db88:	f010 fc4c 	bl	801e424 <cosf>
 800db8c:	ed87 0a02 	vstr	s0, [r7, #8]
	return cos;
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	ee07 3a90 	vmov	s15, r3
}
 800db96:	eeb0 0a67 	vmov.f32	s0, s15
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	40668000 	.word	0x40668000
 800dba4:	54524550 	.word	0x54524550
 800dba8:	400921fb 	.word	0x400921fb

0800dbac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800dbac:	b480      	push	{r7}
 800dbae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800dbb0:	4b08      	ldr	r3, [pc, #32]	; (800dbd4 <SystemInit+0x28>)
 800dbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbb6:	4a07      	ldr	r2, [pc, #28]	; (800dbd4 <SystemInit+0x28>)
 800dbb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800dbc0:	4b04      	ldr	r3, [pc, #16]	; (800dbd4 <SystemInit+0x28>)
 800dbc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dbc6:	609a      	str	r2, [r3, #8]
#endif
}
 800dbc8:	bf00      	nop
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
 800dbd2:	bf00      	nop
 800dbd4:	e000ed00 	.word	0xe000ed00

0800dbd8 <Reset_Handler>:
 800dbd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800dc10 <LoopFillZerobss+0x12>
 800dbdc:	480d      	ldr	r0, [pc, #52]	; (800dc14 <LoopFillZerobss+0x16>)
 800dbde:	490e      	ldr	r1, [pc, #56]	; (800dc18 <LoopFillZerobss+0x1a>)
 800dbe0:	4a0e      	ldr	r2, [pc, #56]	; (800dc1c <LoopFillZerobss+0x1e>)
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e002      	b.n	800dbec <LoopCopyDataInit>

0800dbe6 <CopyDataInit>:
 800dbe6:	58d4      	ldr	r4, [r2, r3]
 800dbe8:	50c4      	str	r4, [r0, r3]
 800dbea:	3304      	adds	r3, #4

0800dbec <LoopCopyDataInit>:
 800dbec:	18c4      	adds	r4, r0, r3
 800dbee:	428c      	cmp	r4, r1
 800dbf0:	d3f9      	bcc.n	800dbe6 <CopyDataInit>
 800dbf2:	4a0b      	ldr	r2, [pc, #44]	; (800dc20 <LoopFillZerobss+0x22>)
 800dbf4:	4c0b      	ldr	r4, [pc, #44]	; (800dc24 <LoopFillZerobss+0x26>)
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e001      	b.n	800dbfe <LoopFillZerobss>

0800dbfa <FillZerobss>:
 800dbfa:	6013      	str	r3, [r2, #0]
 800dbfc:	3204      	adds	r2, #4

0800dbfe <LoopFillZerobss>:
 800dbfe:	42a2      	cmp	r2, r4
 800dc00:	d3fb      	bcc.n	800dbfa <FillZerobss>
 800dc02:	f7ff ffd3 	bl	800dbac <SystemInit>
 800dc06:	f00b fee7 	bl	80199d8 <__libc_init_array>
 800dc0a:	f7f6 fc7d 	bl	8004508 <main>
 800dc0e:	4770      	bx	lr
 800dc10:	20020000 	.word	0x20020000
 800dc14:	20000000 	.word	0x20000000
 800dc18:	2000045c 	.word	0x2000045c
 800dc1c:	08021b94 	.word	0x08021b94
 800dc20:	2000045c 	.word	0x2000045c
 800dc24:	20009d54 	.word	0x20009d54

0800dc28 <ADC_IRQHandler>:
 800dc28:	e7fe      	b.n	800dc28 <ADC_IRQHandler>

0800dc2a <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b082      	sub	sp, #8
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f009 fac0 	bl	80171b8 <uxQueueGetQueueNumber>
 800dc38:	4603      	mov	r3, r0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b082      	sub	sp, #8
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f009 face 	bl	80171ec <ucQueueGetQueueType>
 800dc50:	4603      	mov	r3, r0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b082      	sub	sp, #8
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f00a fb4c 	bl	8018300 <uxTaskGetTaskNumber>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	b29b      	uxth	r3, r3
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f00a fb3f 	bl	8018300 <uxTaskGetTaskNumber>
 800dc82:	4603      	mov	r3, r0
 800dc84:	0c1b      	lsrs	r3, r3, #16
 800dc86:	b29b      	uxth	r3, r3
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f00a fb2f 	bl	8018300 <uxTaskGetTaskNumber>
 800dca2:	4603      	mov	r3, r0
 800dca4:	0c1b      	lsrs	r3, r3, #16
 800dca6:	041b      	lsls	r3, r3, #16
 800dca8:	887a      	ldrh	r2, [r7, #2]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f00a fb3c 	bl	801832c <vTaskSetTaskNumber>
}
 800dcb4:	bf00      	nop
 800dcb6:	3708      	adds	r7, #8
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f00a fb19 	bl	8018300 <uxTaskGetTaskNumber>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	887b      	ldrh	r3, [r7, #2]
 800dcd4:	041b      	lsls	r3, r3, #16
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f00a fb26 	bl	801832c <vTaskSetTaskNumber>
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7ff ff9a 	bl	800dc2a <prvTraceGetQueueNumber>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	b29b      	uxth	r3, r3
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff ff8d 	bl	800dc2a <prvTraceGetQueueNumber>
 800dd10:	4603      	mov	r3, r0
 800dd12:	0c1b      	lsrs	r3, r3, #16
 800dd14:	b29b      	uxth	r3, r3
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b082      	sub	sp, #8
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
 800dd26:	460b      	mov	r3, r1
 800dd28:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff ff7d 	bl	800dc2a <prvTraceGetQueueNumber>
 800dd30:	4603      	mov	r3, r0
 800dd32:	0c1b      	lsrs	r3, r3, #16
 800dd34:	041b      	lsls	r3, r3, #16
 800dd36:	887a      	ldrh	r2, [r7, #2]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f009 fa47 	bl	80171d0 <vQueueSetQueueNumber>
}
 800dd42:	bf00      	nop
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	460b      	mov	r3, r1
 800dd54:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff ff67 	bl	800dc2a <prvTraceGetQueueNumber>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	887b      	ldrh	r3, [r7, #2]
 800dd62:	041b      	lsls	r3, r3, #16
 800dd64:	4313      	orrs	r3, r2
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f009 fa31 	bl	80171d0 <vQueueSetQueueNumber>
}
 800dd6e:	bf00      	nop
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 800dd7a:	f00a fbc1 	bl	8018500 <xTaskGetCurrentTaskHandle>
 800dd7e:	4603      	mov	r3, r0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <pszTraceGetErrorNotEnoughHandles>:
	}
}

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 800dd8e:	79fb      	ldrb	r3, [r7, #7]
 800dd90:	2b08      	cmp	r3, #8
 800dd92:	d827      	bhi.n	800dde4 <pszTraceGetErrorNotEnoughHandles+0x60>
 800dd94:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <pszTraceGetErrorNotEnoughHandles+0x18>)
 800dd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9a:	bf00      	nop
 800dd9c:	0800ddd1 	.word	0x0800ddd1
 800dda0:	0800ddc9 	.word	0x0800ddc9
 800dda4:	0800ddcd 	.word	0x0800ddcd
 800dda8:	0800ddc1 	.word	0x0800ddc1
 800ddac:	0800ddc5 	.word	0x0800ddc5
 800ddb0:	0800ddd5 	.word	0x0800ddd5
 800ddb4:	0800ddd9 	.word	0x0800ddd9
 800ddb8:	0800dddd 	.word	0x0800dddd
 800ddbc:	0800dde1 	.word	0x0800dde1
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 800ddc0:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <pszTraceGetErrorNotEnoughHandles+0x70>)
 800ddc2:	e010      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <pszTraceGetErrorNotEnoughHandles+0x74>)
 800ddc6:	e00e      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 800ddc8:	4b0c      	ldr	r3, [pc, #48]	; (800ddfc <pszTraceGetErrorNotEnoughHandles+0x78>)
 800ddca:	e00c      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 800ddcc:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 800ddce:	e00a      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 800ddd0:	4b0c      	ldr	r3, [pc, #48]	; (800de04 <pszTraceGetErrorNotEnoughHandles+0x80>)
 800ddd2:	e008      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <pszTraceGetErrorNotEnoughHandles+0x84>)
 800ddd6:	e006      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800ddd8:	4b0c      	ldr	r3, [pc, #48]	; (800de0c <pszTraceGetErrorNotEnoughHandles+0x88>)
 800ddda:	e004      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 800dddc:	4b0c      	ldr	r3, [pc, #48]	; (800de10 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 800ddde:	e002      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 800dde0:	4b0c      	ldr	r3, [pc, #48]	; (800de14 <pszTraceGetErrorNotEnoughHandles+0x90>)
 800dde2:	e000      	b.n	800dde6 <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 800dde4:	4b0c      	ldr	r3, [pc, #48]	; (800de18 <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	0801fec8 	.word	0x0801fec8
 800ddf8:	0801ff10 	.word	0x0801ff10
 800ddfc:	0801ff58 	.word	0x0801ff58
 800de00:	0801ffac 	.word	0x0801ffac
 800de04:	0801fff8 	.word	0x0801fff8
 800de08:	08020044 	.word	0x08020044
 800de0c:	08020090 	.word	0x08020090
 800de10:	080200e4 	.word	0x080200e4
 800de14:	0802013c 	.word	0x0802013c
 800de18:	08020198 	.word	0x08020198

0800de1c <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 800de20:	4b08      	ldr	r3, [pc, #32]	; (800de44 <vTraceStop+0x28>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 800de28:	4b06      	ldr	r3, [pc, #24]	; (800de44 <vTraceStop+0x28>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2200      	movs	r2, #0
 800de2e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800de30:	4b05      	ldr	r3, [pc, #20]	; (800de48 <vTraceStop+0x2c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800de38:	4b03      	ldr	r3, [pc, #12]	; (800de48 <vTraceStop+0x2c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4798      	blx	r3
	}
}
 800de3e:	bf00      	nop
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	2000835c 	.word	0x2000835c
 800de48:	200004a4 	.word	0x200004a4

0800de4c <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b088      	sub	sp, #32
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 800de56:	79fb      	ldrb	r3, [r7, #7]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d04b      	beq.n	800def4 <prvTraceStoreTaskReady+0xa8>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 800de5c:	4b28      	ldr	r3, [pc, #160]	; (800df00 <prvTraceStoreTaskReady+0xb4>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d049      	beq.n	800def8 <prvTraceStoreTaskReady+0xac>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 800de64:	79fb      	ldrb	r3, [r7, #7]
 800de66:	2b0f      	cmp	r3, #15
 800de68:	d903      	bls.n	800de72 <prvTraceStoreTaskReady+0x26>
 800de6a:	4826      	ldr	r0, [pc, #152]	; (800df04 <prvTraceStoreTaskReady+0xb8>)
 800de6c:	f000 ff4e 	bl	800ed0c <prvTraceError>
 800de70:	e043      	b.n	800defa <prvTraceStoreTaskReady+0xae>

	if (recorder_busy)
 800de72:	4b25      	ldr	r3, [pc, #148]	; (800df08 <prvTraceStoreTaskReady+0xbc>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 800de7a:	4824      	ldr	r0, [pc, #144]	; (800df0c <prvTraceStoreTaskReady+0xc0>)
 800de7c:	f000 ff46 	bl	800ed0c <prvTraceError>
		return;
 800de80:	e03b      	b.n	800defa <prvTraceStoreTaskReady+0xae>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de82:	f3ef 8310 	mrs	r3, PRIMASK
 800de86:	60fb      	str	r3, [r7, #12]
  return(result);
 800de88:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 800de8a:	61fb      	str	r3, [r7, #28]
 800de8c:	2301      	movs	r3, #1
 800de8e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	f383 8810 	msr	PRIMASK, r3
}
 800de96:	bf00      	nop
 800de98:	4b1b      	ldr	r3, [pc, #108]	; (800df08 <prvTraceStoreTaskReady+0xbc>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	3301      	adds	r3, #1
 800de9e:	4a1a      	ldr	r2, [pc, #104]	; (800df08 <prvTraceStoreTaskReady+0xbc>)
 800dea0:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800dea2:	4b1b      	ldr	r3, [pc, #108]	; (800df10 <prvTraceStoreTaskReady+0xc4>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d018      	beq.n	800dede <prvTraceStoreTaskReady+0x92>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800deac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800deb0:	f001 f80e 	bl	800eed0 <prvTraceGetDTS>
 800deb4:	4603      	mov	r3, r0
 800deb6:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 800deb8:	79fb      	ldrb	r3, [r7, #7]
 800deba:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 800debc:	f000 fcb2 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800dec0:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00a      	beq.n	800dede <prvTraceStoreTaskReady+0x92>
		{
			tr->type = DIV_TASK_READY;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2202      	movs	r2, #2
 800decc:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	8b7a      	ldrh	r2, [r7, #26]
 800ded2:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	7e7a      	ldrb	r2, [r7, #25]
 800ded8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800deda:	f000 ffd1 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800dede:	4b0a      	ldr	r3, [pc, #40]	; (800df08 <prvTraceStoreTaskReady+0xbc>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3b01      	subs	r3, #1
 800dee4:	4a08      	ldr	r2, [pc, #32]	; (800df08 <prvTraceStoreTaskReady+0xbc>)
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	f383 8810 	msr	PRIMASK, r3
}
 800def2:	e002      	b.n	800defa <prvTraceStoreTaskReady+0xae>
		return;
 800def4:	bf00      	nop
 800def6:	e000      	b.n	800defa <prvTraceStoreTaskReady+0xae>
		return;
 800def8:	bf00      	nop
}
 800defa:	3720      	adds	r7, #32
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	20000274 	.word	0x20000274
 800df04:	08020588 	.word	0x08020588
 800df08:	20000498 	.word	0x20000498
 800df0c:	080205c8 	.word	0x080205c8
 800df10:	2000835c 	.word	0x2000835c

0800df14 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b08e      	sub	sp, #56	; 0x38
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 800df20:	4b46      	ldr	r3, [pc, #280]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 8084 	beq.w	800e032 <vTraceStoreMemMangEvent+0x11e>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	da03      	bge.n	800df38 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	425b      	negs	r3, r3
 800df34:	637b      	str	r3, [r7, #52]	; 0x34
 800df36:	e001      	b.n	800df3c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df3c:	f3ef 8310 	mrs	r3, PRIMASK
 800df40:	61bb      	str	r3, [r7, #24]
  return(result);
 800df42:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 800df44:	633b      	str	r3, [r7, #48]	; 0x30
 800df46:	2301      	movs	r3, #1
 800df48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	f383 8810 	msr	PRIMASK, r3
}
 800df50:	bf00      	nop
 800df52:	4b3b      	ldr	r3, [pc, #236]	; (800e040 <vTraceStoreMemMangEvent+0x12c>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3301      	adds	r3, #1
 800df58:	4a39      	ldr	r2, [pc, #228]	; (800e040 <vTraceStoreMemMangEvent+0x12c>)
 800df5a:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d015      	beq.n	800df8e <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 800df62:	4b36      	ldr	r3, [pc, #216]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	4b34      	ldr	r3, [pc, #208]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	440a      	add	r2, r1
 800df70:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 800df72:	4b32      	ldr	r3, [pc, #200]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df78:	4b30      	ldr	r3, [pc, #192]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7e:	429a      	cmp	r2, r3
 800df80:	d905      	bls.n	800df8e <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 800df82:	4b2e      	ldr	r3, [pc, #184]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	4b2d      	ldr	r3, [pc, #180]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800df8c:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 800df8e:	4b2b      	ldr	r3, [pc, #172]	; (800e03c <vTraceStoreMemMangEvent+0x128>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df94:	2b00      	cmp	r3, #0
 800df96:	d041      	beq.n	800e01c <vTraceStoreMemMangEvent+0x108>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 800df98:	20ff      	movs	r0, #255	; 0xff
 800df9a:	f000 ff99 	bl	800eed0 <prvTraceGetDTS>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 800dfa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dfaa:	f000 f953 	bl	800e254 <prvTraceGetParam>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 800dfb2:	f000 fc37 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800dfb6:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d02e      	beq.n	800e01c <vTraceStoreMemMangEvent+0x108>
		{
			ms->dts = dts1;
 800dfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dfc4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	2200      	movs	r2, #0
 800dfca:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 800dfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfce:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800dfd0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800dfd2:	f000 ff55 	bl	800ee80 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dfdc:	f000 f93a 	bl	800e254 <prvTraceGetParam>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 800dfea:	f000 fc1b 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800dfee:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d012      	beq.n	800e01c <vTraceStoreMemMangEvent+0x108>
			{
				ma->addr_low = addr_low;
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dffa:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800e002:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	b2db      	uxtb	r3, r3
 800e008:	3301      	adds	r3, #1
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	b2da      	uxtb	r2, r3
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 800e018:	f000 ff32 	bl	800ee80 <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 800e01c:	4b08      	ldr	r3, [pc, #32]	; (800e040 <vTraceStoreMemMangEvent+0x12c>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	3b01      	subs	r3, #1
 800e022:	4a07      	ldr	r2, [pc, #28]	; (800e040 <vTraceStoreMemMangEvent+0x12c>)
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f383 8810 	msr	PRIMASK, r3
}
 800e030:	e000      	b.n	800e034 <vTraceStoreMemMangEvent+0x120>
		return;
 800e032:	bf00      	nop
}
 800e034:	3738      	adds	r7, #56	; 0x38
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	2000835c 	.word	0x2000835c
 800e040:	20000498 	.word	0x20000498

0800e044 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08a      	sub	sp, #40	; 0x28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	460b      	mov	r3, r1
 800e04e:	607a      	str	r2, [r7, #4]
 800e050:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2bfe      	cmp	r3, #254	; 0xfe
 800e056:	d903      	bls.n	800e060 <prvTraceStoreKernelCall+0x1c>
 800e058:	4832      	ldr	r0, [pc, #200]	; (800e124 <prvTraceStoreKernelCall+0xe0>)
 800e05a:	f000 fe57 	bl	800ed0c <prvTraceError>
 800e05e:	e05d      	b.n	800e11c <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 800e060:	7afb      	ldrb	r3, [r7, #11]
 800e062:	2b08      	cmp	r3, #8
 800e064:	d903      	bls.n	800e06e <prvTraceStoreKernelCall+0x2a>
 800e066:	4830      	ldr	r0, [pc, #192]	; (800e128 <prvTraceStoreKernelCall+0xe4>)
 800e068:	f000 fe50 	bl	800ed0c <prvTraceError>
 800e06c:	e056      	b.n	800e11c <prvTraceStoreKernelCall+0xd8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 800e06e:	4b2f      	ldr	r3, [pc, #188]	; (800e12c <prvTraceStoreKernelCall+0xe8>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	7afb      	ldrb	r3, [r7, #11]
 800e074:	4413      	add	r3, r2
 800e076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e07a:	461a      	mov	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4293      	cmp	r3, r2
 800e080:	d903      	bls.n	800e08a <prvTraceStoreKernelCall+0x46>
 800e082:	482b      	ldr	r0, [pc, #172]	; (800e130 <prvTraceStoreKernelCall+0xec>)
 800e084:	f000 fe42 	bl	800ed0c <prvTraceError>
 800e088:	e048      	b.n	800e11c <prvTraceStoreKernelCall+0xd8>

	if (recorder_busy)
 800e08a:	4b2a      	ldr	r3, [pc, #168]	; (800e134 <prvTraceStoreKernelCall+0xf0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 800e092:	4829      	ldr	r0, [pc, #164]	; (800e138 <prvTraceStoreKernelCall+0xf4>)
 800e094:	f000 fe3a 	bl	800ed0c <prvTraceError>
		return;
 800e098:	e040      	b.n	800e11c <prvTraceStoreKernelCall+0xd8>
	}

	if (handle_of_last_logged_task == 0)
 800e09a:	4b28      	ldr	r3, [pc, #160]	; (800e13c <prvTraceStoreKernelCall+0xf8>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d03b      	beq.n	800e11a <prvTraceStoreKernelCall+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0a2:	f3ef 8310 	mrs	r3, PRIMASK
 800e0a6:	617b      	str	r3, [r7, #20]
  return(result);
 800e0a8:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 800e0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	f383 8810 	msr	PRIMASK, r3
}
 800e0b6:	bf00      	nop
 800e0b8:	4b1e      	ldr	r3, [pc, #120]	; (800e134 <prvTraceStoreKernelCall+0xf0>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	4a1d      	ldr	r2, [pc, #116]	; (800e134 <prvTraceStoreKernelCall+0xf0>)
 800e0c0:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 800e0c2:	4b1a      	ldr	r3, [pc, #104]	; (800e12c <prvTraceStoreKernelCall+0xe8>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d01b      	beq.n	800e104 <prvTraceStoreKernelCall+0xc0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800e0cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e0d0:	f000 fefe 	bl	800eed0 <prvTraceGetDTS>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 800e0de:	f000 fba1 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e0e2:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00c      	beq.n	800e104 <prvTraceStoreKernelCall+0xc0>
		{
			kse->dts = dts1;
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e0ee:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e0fe:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 800e100:	f000 febe 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800e104:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <prvTraceStoreKernelCall+0xf0>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	3b01      	subs	r3, #1
 800e10a:	4a0a      	ldr	r2, [pc, #40]	; (800e134 <prvTraceStoreKernelCall+0xf0>)
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	f383 8810 	msr	PRIMASK, r3
}
 800e118:	e000      	b.n	800e11c <prvTraceStoreKernelCall+0xd8>
		return;
 800e11a:	bf00      	nop
}
 800e11c:	3728      	adds	r7, #40	; 0x28
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	08020638 	.word	0x08020638
 800e128:	08020670 	.word	0x08020670
 800e12c:	2000835c 	.word	0x2000835c
 800e130:	080206b8 	.word	0x080206b8
 800e134:	20000498 	.word	0x20000498
 800e138:	08020700 	.word	0x08020700
 800e13c:	200004a0 	.word	0x200004a0

0800e140 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08a      	sub	sp, #40	; 0x28
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	607a      	str	r2, [r7, #4]
 800e14a:	603b      	str	r3, [r7, #0]
 800e14c:	460b      	mov	r3, r1
 800e14e:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	2bfe      	cmp	r3, #254	; 0xfe
 800e154:	d903      	bls.n	800e15e <prvTraceStoreKernelCallWithParam+0x1e>
 800e156:	4838      	ldr	r0, [pc, #224]	; (800e238 <prvTraceStoreKernelCallWithParam+0xf8>)
 800e158:	f000 fdd8 	bl	800ed0c <prvTraceError>
 800e15c:	e068      	b.n	800e230 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 800e15e:	7afb      	ldrb	r3, [r7, #11]
 800e160:	2b08      	cmp	r3, #8
 800e162:	d903      	bls.n	800e16c <prvTraceStoreKernelCallWithParam+0x2c>
 800e164:	4835      	ldr	r0, [pc, #212]	; (800e23c <prvTraceStoreKernelCallWithParam+0xfc>)
 800e166:	f000 fdd1 	bl	800ed0c <prvTraceError>
 800e16a:	e061      	b.n	800e230 <prvTraceStoreKernelCallWithParam+0xf0>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 800e16c:	4b34      	ldr	r3, [pc, #208]	; (800e240 <prvTraceStoreKernelCallWithParam+0x100>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	7afb      	ldrb	r3, [r7, #11]
 800e172:	4413      	add	r3, r2
 800e174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e178:	461a      	mov	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d903      	bls.n	800e188 <prvTraceStoreKernelCallWithParam+0x48>
 800e180:	4830      	ldr	r0, [pc, #192]	; (800e244 <prvTraceStoreKernelCallWithParam+0x104>)
 800e182:	f000 fdc3 	bl	800ed0c <prvTraceError>
 800e186:	e053      	b.n	800e230 <prvTraceStoreKernelCallWithParam+0xf0>

	if (recorder_busy)
 800e188:	4b2f      	ldr	r3, [pc, #188]	; (800e248 <prvTraceStoreKernelCallWithParam+0x108>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d003      	beq.n	800e198 <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 800e190:	482e      	ldr	r0, [pc, #184]	; (800e24c <prvTraceStoreKernelCallWithParam+0x10c>)
 800e192:	f000 fdbb 	bl	800ed0c <prvTraceError>
		return;
 800e196:	e04b      	b.n	800e230 <prvTraceStoreKernelCallWithParam+0xf0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e198:	f3ef 8310 	mrs	r3, PRIMASK
 800e19c:	617b      	str	r3, [r7, #20]
  return(result);
 800e19e:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 800e1a0:	627b      	str	r3, [r7, #36]	; 0x24
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	f383 8810 	msr	PRIMASK, r3
}
 800e1ac:	bf00      	nop
 800e1ae:	4b26      	ldr	r3, [pc, #152]	; (800e248 <prvTraceStoreKernelCallWithParam+0x108>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	4a24      	ldr	r2, [pc, #144]	; (800e248 <prvTraceStoreKernelCallWithParam+0x108>)
 800e1b6:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800e1b8:	4b21      	ldr	r3, [pc, #132]	; (800e240 <prvTraceStoreKernelCallWithParam+0x100>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d02b      	beq.n	800e21a <prvTraceStoreKernelCallWithParam+0xda>
 800e1c2:	4b23      	ldr	r3, [pc, #140]	; (800e250 <prvTraceStoreKernelCallWithParam+0x110>)
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d027      	beq.n	800e21a <prvTraceStoreKernelCallWithParam+0xda>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 800e1ca:	20ff      	movs	r0, #255	; 0xff
 800e1cc:	f000 fe80 	bl	800eed0 <prvTraceGetDTS>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	20ff      	movs	r0, #255	; 0xff
 800e1da:	f000 f83b 	bl	800e254 <prvTraceGetParam>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 800e1ea:	f000 fb1b 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e1ee:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d011      	beq.n	800e21a <prvTraceStoreKernelCallWithParam+0xda>
		{
			kse->dts = dts2;
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800e1fc:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	b2da      	uxtb	r2, r3
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e20c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e214:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 800e216:	f000 fe33 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800e21a:	4b0b      	ldr	r3, [pc, #44]	; (800e248 <prvTraceStoreKernelCallWithParam+0x108>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3b01      	subs	r3, #1
 800e220:	4a09      	ldr	r2, [pc, #36]	; (800e248 <prvTraceStoreKernelCallWithParam+0x108>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	f383 8810 	msr	PRIMASK, r3
}
 800e22e:	bf00      	nop
}
 800e230:	3728      	adds	r7, #40	; 0x28
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	08020738 	.word	0x08020738
 800e23c:	08020778 	.word	0x08020778
 800e240:	2000835c 	.word	0x2000835c
 800e244:	080207c8 	.word	0x080207c8
 800e248:	20000498 	.word	0x20000498
 800e24c:	08020818 	.word	0x08020818
 800e250:	200004a0 	.word	0x200004a0

0800e254 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2bff      	cmp	r3, #255	; 0xff
 800e262:	d009      	beq.n	800e278 <prvTraceGetParam+0x24>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d004      	beq.n	800e278 <prvTraceGetParam+0x24>
 800e26e:	4816      	ldr	r0, [pc, #88]	; (800e2c8 <prvTraceGetParam+0x74>)
 800e270:	f000 fd4c 	bl	800ed0c <prvTraceError>
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	e023      	b.n	800e2c0 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d801      	bhi.n	800e284 <prvTraceGetParam+0x30>
	{
		return param;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	e01d      	b.n	800e2c0 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 800e284:	f000 face 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e288:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d014      	beq.n	800e2ba <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2201      	movs	r2, #1
 800e294:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	43da      	mvns	r2, r3
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	4013      	ands	r3, r2
 800e29e:	0a1b      	lsrs	r3, r3, #8
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	43da      	mvns	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	0c1b      	lsrs	r3, r3, #16
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800e2b6:	f000 fde3 	bl	800ee80 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800e2ba:	683a      	ldr	r2, [r7, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4013      	ands	r3, r2
	}
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	08020850 	.word	0x08020850

0800e2cc <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08a      	sub	sp, #40	; 0x28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2bfe      	cmp	r3, #254	; 0xfe
 800e2de:	d903      	bls.n	800e2e8 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 800e2e0:	4828      	ldr	r0, [pc, #160]	; (800e384 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 800e2e2:	f000 fd13 	bl	800ed0c <prvTraceError>
 800e2e6:	e049      	b.n	800e37c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>

	if (recorder_busy)
 800e2e8:	4b27      	ldr	r3, [pc, #156]	; (800e388 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d003      	beq.n	800e2f8 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 800e2f0:	4826      	ldr	r0, [pc, #152]	; (800e38c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 800e2f2:	f000 fd0b 	bl	800ed0c <prvTraceError>
		return;
 800e2f6:	e041      	b.n	800e37c <prvTraceStoreKernelCallWithNumericParamOnly+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2fc:	613b      	str	r3, [r7, #16]
  return(result);
 800e2fe:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 800e300:	623b      	str	r3, [r7, #32]
 800e302:	2301      	movs	r3, #1
 800e304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	f383 8810 	msr	PRIMASK, r3
}
 800e30c:	bf00      	nop
 800e30e:	4b1e      	ldr	r3, [pc, #120]	; (800e388 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3301      	adds	r3, #1
 800e314:	4a1c      	ldr	r2, [pc, #112]	; (800e388 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800e316:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800e318:	4b1d      	ldr	r3, [pc, #116]	; (800e390 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d021      	beq.n	800e366 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
 800e322:	4b1c      	ldr	r3, [pc, #112]	; (800e394 <prvTraceStoreKernelCallWithNumericParamOnly+0xc8>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d01d      	beq.n	800e366 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800e32a:	20ff      	movs	r0, #255	; 0xff
 800e32c:	f000 fdd0 	bl	800eed0 <prvTraceGetDTS>
 800e330:	4603      	mov	r3, r0
 800e332:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e33a:	f7ff ff8b 	bl	800e254 <prvTraceGetParam>
 800e33e:	4603      	mov	r3, r0
 800e340:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 800e342:	f000 fa6f 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e346:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00b      	beq.n	800e366 <prvTraceStoreKernelCallWithNumericParamOnly+0x9a>
		{
			kse->dts = dts6;
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	7ffa      	ldrb	r2, [r7, #31]
 800e352:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	b2da      	uxtb	r2, r3
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e360:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800e362:	f000 fd8d 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800e366:	4b08      	ldr	r3, [pc, #32]	; (800e388 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	4a06      	ldr	r2, [pc, #24]	; (800e388 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 800e36e:	6013      	str	r3, [r2, #0]
 800e370:	6a3b      	ldr	r3, [r7, #32]
 800e372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f383 8810 	msr	PRIMASK, r3
}
 800e37a:	bf00      	nop
}
 800e37c:	3728      	adds	r7, #40	; 0x28
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	0802088c 	.word	0x0802088c
 800e388:	20000498 	.word	0x20000498
 800e38c:	080208e4 	.word	0x080208e4
 800e390:	2000835c 	.word	0x2000835c
 800e394:	200004a0 	.word	0x200004a0

0800e398 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b088      	sub	sp, #32
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	4603      	mov	r3, r0
 800e3a0:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 800e3a2:	79fb      	ldrb	r3, [r7, #7]
 800e3a4:	2b0f      	cmp	r3, #15
 800e3a6:	d903      	bls.n	800e3b0 <prvTraceStoreTaskswitch+0x18>
 800e3a8:	482f      	ldr	r0, [pc, #188]	; (800e468 <prvTraceStoreTaskswitch+0xd0>)
 800e3aa:	f000 fcaf 	bl	800ed0c <prvTraceError>
 800e3ae:	e058      	b.n	800e462 <prvTraceStoreTaskswitch+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e3b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 800e3b8:	61fb      	str	r3, [r7, #28]
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	f383 8810 	msr	PRIMASK, r3
}
 800e3c4:	bf00      	nop
 800e3c6:	4b29      	ldr	r3, [pc, #164]	; (800e46c <prvTraceStoreTaskswitch+0xd4>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	4a27      	ldr	r2, [pc, #156]	; (800e46c <prvTraceStoreTaskswitch+0xd4>)
 800e3ce:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800e3d0:	4b27      	ldr	r3, [pc, #156]	; (800e470 <prvTraceStoreTaskswitch+0xd8>)
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	79fa      	ldrb	r2, [r7, #7]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d038      	beq.n	800e44c <prvTraceStoreTaskswitch+0xb4>
 800e3da:	4b26      	ldr	r3, [pc, #152]	; (800e474 <prvTraceStoreTaskswitch+0xdc>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d033      	beq.n	800e44c <prvTraceStoreTaskswitch+0xb4>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 800e3e4:	4b24      	ldr	r3, [pc, #144]	; (800e478 <prvTraceStoreTaskswitch+0xe0>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800e3ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e3ee:	f000 fd6f 	bl	800eed0 <prvTraceGetDTS>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 800e3f6:	4a1e      	ldr	r2, [pc, #120]	; (800e470 <prvTraceStoreTaskswitch+0xd8>)
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 800e3fc:	4b1c      	ldr	r3, [pc, #112]	; (800e470 <prvTraceStoreTaskswitch+0xd8>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 800e402:	f000 fa0f 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e406:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01e      	beq.n	800e44c <prvTraceStoreTaskswitch+0xb4>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 800e40e:	4b18      	ldr	r3, [pc, #96]	; (800e470 <prvTraceStoreTaskswitch+0xd8>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	4619      	mov	r1, r3
 800e414:	2003      	movs	r0, #3
 800e416:	f000 f99f 	bl	800e758 <prvTraceGetObjectState>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d103      	bne.n	800e428 <prvTraceStoreTaskswitch+0x90>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	2207      	movs	r2, #7
 800e424:	701a      	strb	r2, [r3, #0]
 800e426:	e002      	b.n	800e42e <prvTraceStoreTaskswitch+0x96>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	2206      	movs	r2, #6
 800e42c:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	8b7a      	ldrh	r2, [r7, #26]
 800e432:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	7e7a      	ldrb	r2, [r7, #25]
 800e438:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 800e43a:	4b0d      	ldr	r3, [pc, #52]	; (800e470 <prvTraceStoreTaskswitch+0xd8>)
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	2201      	movs	r2, #1
 800e440:	4619      	mov	r1, r3
 800e442:	2003      	movs	r0, #3
 800e444:	f000 f94c 	bl	800e6e0 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 800e448:	f000 fd1a 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 800e44c:	4b07      	ldr	r3, [pc, #28]	; (800e46c <prvTraceStoreTaskswitch+0xd4>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3b01      	subs	r3, #1
 800e452:	4a06      	ldr	r2, [pc, #24]	; (800e46c <prvTraceStoreTaskswitch+0xd4>)
 800e454:	6013      	str	r3, [r2, #0]
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f383 8810 	msr	PRIMASK, r3
}
 800e460:	bf00      	nop
}
 800e462:	3720      	adds	r7, #32
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	0802091c 	.word	0x0802091c
 800e46c:	20000498 	.word	0x20000498
 800e470:	200004a0 	.word	0x200004a0
 800e474:	2000835c 	.word	0x2000835c
 800e478:	20000484 	.word	0x20000484

0800e47c <prvTraceStoreObjectNameOnCloseEvent>:
 * and name (a symbol table handle). The stored name-handle mapping is thus the
 * "old" one, valid up until this point.
 ******************************************************************************/
void prvTraceStoreObjectNameOnCloseEvent(uint8_t evtcode, traceHandle handle,
										traceObjectClass objectclass)
{
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	4603      	mov	r3, r0
 800e484:	71fb      	strb	r3, [r7, #7]
 800e486:	460b      	mov	r3, r1
 800e488:	71bb      	strb	r3, [r7, #6]
 800e48a:	4613      	mov	r3, r2
 800e48c:	717b      	strb	r3, [r7, #5]
	ObjCloseNameEvent * ce;
	const char * name;
	traceString idx;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800e48e:	797b      	ldrb	r3, [r7, #5]
 800e490:	2b08      	cmp	r3, #8
 800e492:	d903      	bls.n	800e49c <prvTraceStoreObjectNameOnCloseEvent+0x20>
 800e494:	481e      	ldr	r0, [pc, #120]	; (800e510 <prvTraceStoreObjectNameOnCloseEvent+0x94>)
 800e496:	f000 fc39 	bl	800ed0c <prvTraceError>
 800e49a:	e036      	b.n	800e50a <prvTraceStoreObjectNameOnCloseEvent+0x8e>
		"prvTraceStoreObjectNameOnCloseEvent: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800e49c:	4b1d      	ldr	r3, [pc, #116]	; (800e514 <prvTraceStoreObjectNameOnCloseEvent+0x98>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	797b      	ldrb	r3, [r7, #5]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4a8:	79ba      	ldrb	r2, [r7, #6]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d903      	bls.n	800e4b6 <prvTraceStoreObjectNameOnCloseEvent+0x3a>
 800e4ae:	481a      	ldr	r0, [pc, #104]	; (800e518 <prvTraceStoreObjectNameOnCloseEvent+0x9c>)
 800e4b0:	f000 fc2c 	bl	800ed0c <prvTraceError>
 800e4b4:	e029      	b.n	800e50a <prvTraceStoreObjectNameOnCloseEvent+0x8e>
		"prvTraceStoreObjectNameOnCloseEvent: Invalid value for handle", TRC_UNUSED);

	if (RecorderDataPtr->recorderActive)
 800e4b6:	4b17      	ldr	r3, [pc, #92]	; (800e514 <prvTraceStoreObjectNameOnCloseEvent+0x98>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d024      	beq.n	800e50a <prvTraceStoreObjectNameOnCloseEvent+0x8e>
	{
		uint8_t hnd8 = prvTraceGet8BitHandle(handle);
 800e4c0:	79bb      	ldrb	r3, [r7, #6]
 800e4c2:	75fb      	strb	r3, [r7, #23]
		name = TRACE_PROPERTY_NAME_GET(objectclass, handle);
 800e4c4:	4b13      	ldr	r3, [pc, #76]	; (800e514 <prvTraceStoreObjectNameOnCloseEvent+0x98>)
 800e4c6:	681c      	ldr	r4, [r3, #0]
 800e4c8:	797a      	ldrb	r2, [r7, #5]
 800e4ca:	79bb      	ldrb	r3, [r7, #6]
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 f9cc 	bl	800e86c <uiIndexOfObject>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	3388      	adds	r3, #136	; 0x88
 800e4d8:	4423      	add	r3, r4
 800e4da:	613b      	str	r3, [r7, #16]
		idx = prvTraceOpenSymbol(name, 0);
 800e4dc:	2100      	movs	r1, #0
 800e4de:	6938      	ldr	r0, [r7, #16]
 800e4e0:	f000 fbc2 	bl	800ec68 <prvTraceOpenSymbol>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	81fb      	strh	r3, [r7, #14]

		// Interrupt disable not necessary, already done in trcHooks.h macro
		ce = (ObjCloseNameEvent*) prvTraceNextFreeEventBufferSlot();
 800e4e8:	f000 f99c 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e4ec:	60b8      	str	r0, [r7, #8]
		if (ce != NULL)
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <prvTraceStoreObjectNameOnCloseEvent+0x8e>
		{
			ce->type = (uint8_t) evtcode;
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	79fa      	ldrb	r2, [r7, #7]
 800e4f8:	701a      	strb	r2, [r3, #0]
			ce->objHandle = hnd8;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	7dfa      	ldrb	r2, [r7, #23]
 800e4fe:	705a      	strb	r2, [r3, #1]
			ce->symbolIndex = idx;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	89fa      	ldrh	r2, [r7, #14]
 800e504:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 800e506:	f000 fcbb 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}
}
 800e50a:	371c      	adds	r7, #28
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd90      	pop	{r4, r7, pc}
 800e510:	08020964 	.word	0x08020964
 800e514:	2000835c 	.word	0x2000835c
 800e518:	080209b8 	.word	0x080209b8

0800e51c <prvTraceStoreObjectPropertiesOnCloseEvent>:

void prvTraceStoreObjectPropertiesOnCloseEvent(uint8_t evtcode, traceHandle handle,
											 traceObjectClass objectclass)
{
 800e51c:	b590      	push	{r4, r7, lr}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	71fb      	strb	r3, [r7, #7]
 800e526:	460b      	mov	r3, r1
 800e528:	71bb      	strb	r3, [r7, #6]
 800e52a:	4613      	mov	r3, r2
 800e52c:	717b      	strb	r3, [r7, #5]
	ObjClosePropEvent * pe;

	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800e52e:	797b      	ldrb	r3, [r7, #5]
 800e530:	2b08      	cmp	r3, #8
 800e532:	d903      	bls.n	800e53c <prvTraceStoreObjectPropertiesOnCloseEvent+0x20>
 800e534:	482a      	ldr	r0, [pc, #168]	; (800e5e0 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc4>)
 800e536:	f000 fbe9 	bl	800ed0c <prvTraceError>
 800e53a:	e04d      	b.n	800e5d8 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
		"prvTraceStoreObjectPropertiesOnCloseEvent: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800e53c:	4b29      	ldr	r3, [pc, #164]	; (800e5e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	797b      	ldrb	r3, [r7, #5]
 800e542:	4413      	add	r3, r2
 800e544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e548:	79ba      	ldrb	r2, [r7, #6]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d903      	bls.n	800e556 <prvTraceStoreObjectPropertiesOnCloseEvent+0x3a>
 800e54e:	4826      	ldr	r0, [pc, #152]	; (800e5e8 <prvTraceStoreObjectPropertiesOnCloseEvent+0xcc>)
 800e550:	f000 fbdc 	bl	800ed0c <prvTraceError>
 800e554:	e040      	b.n	800e5d8 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
		"prvTraceStoreObjectPropertiesOnCloseEvent: Invalid value for handle", TRC_UNUSED);

	if (RecorderDataPtr->recorderActive)
 800e556:	4b23      	ldr	r3, [pc, #140]	; (800e5e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d03b      	beq.n	800e5d8 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
	{
		// Interrupt disable not necessary, already done in trcHooks.h macro
		pe = (ObjClosePropEvent*) prvTraceNextFreeEventBufferSlot();
 800e560:	f000 f960 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800e564:	60f8      	str	r0, [r7, #12]
		if (pe != NULL)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d035      	beq.n	800e5d8 <prvTraceStoreObjectPropertiesOnCloseEvent+0xbc>
		{
			if (objectclass == TRACE_CLASS_TASK)
 800e56c:	797b      	ldrb	r3, [r7, #5]
 800e56e:	2b03      	cmp	r3, #3
 800e570:	d117      	bne.n	800e5a2 <prvTraceStoreObjectPropertiesOnCloseEvent+0x86>
			{
				pe->arg1 = TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, handle);
 800e572:	4b1c      	ldr	r3, [pc, #112]	; (800e5e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800e574:	681c      	ldr	r4, [r3, #0]
 800e576:	797a      	ldrb	r2, [r7, #5]
 800e578:	79bb      	ldrb	r3, [r7, #6]
 800e57a:	4611      	mov	r1, r2
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 f975 	bl	800e86c <uiIndexOfObject>
 800e582:	4603      	mov	r3, r0
 800e584:	4619      	mov	r1, r3
 800e586:	4b17      	ldr	r3, [pc, #92]	; (800e5e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	797b      	ldrb	r3, [r7, #5]
 800e58c:	4413      	add	r3, r2
 800e58e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e592:	440b      	add	r3, r1
 800e594:	3301      	adds	r3, #1
 800e596:	4423      	add	r3, r4
 800e598:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	705a      	strb	r2, [r3, #1]
 800e5a0:	e015      	b.n	800e5ce <prvTraceStoreObjectPropertiesOnCloseEvent+0xb2>
			}
			else
			{
				pe->arg1 = TRACE_PROPERTY_OBJECT_STATE(objectclass, handle);
 800e5a2:	4b10      	ldr	r3, [pc, #64]	; (800e5e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800e5a4:	681c      	ldr	r4, [r3, #0]
 800e5a6:	797a      	ldrb	r2, [r7, #5]
 800e5a8:	79bb      	ldrb	r3, [r7, #6]
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f000 f95d 	bl	800e86c <uiIndexOfObject>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <prvTraceStoreObjectPropertiesOnCloseEvent+0xc8>)
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	797b      	ldrb	r3, [r7, #5]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e5c2:	440b      	add	r3, r1
 800e5c4:	4423      	add	r3, r4
 800e5c6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	705a      	strb	r2, [r3, #1]
			}
			pe->type = evtcode;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	79fa      	ldrb	r2, [r7, #7]
 800e5d2:	701a      	strb	r2, [r3, #0]
			prvTraceUpdateCounters();
 800e5d4:	f000 fc54 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}
}
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd90      	pop	{r4, r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	08020a04 	.word	0x08020a04
 800e5e4:	2000835c 	.word	0x2000835c
 800e5e8:	08020a5c 	.word	0x08020a5c

0800e5ec <prvTraceSetPriorityProperty>:

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 800e5ec:	b590      	push	{r4, r7, lr}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	71fb      	strb	r3, [r7, #7]
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	71bb      	strb	r3, [r7, #6]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800e5fe:	79fb      	ldrb	r3, [r7, #7]
 800e600:	2b08      	cmp	r3, #8
 800e602:	d903      	bls.n	800e60c <prvTraceSetPriorityProperty+0x20>
 800e604:	4814      	ldr	r0, [pc, #80]	; (800e658 <prvTraceSetPriorityProperty+0x6c>)
 800e606:	f000 fb81 	bl	800ed0c <prvTraceError>
 800e60a:	e022      	b.n	800e652 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800e60c:	4b13      	ldr	r3, [pc, #76]	; (800e65c <prvTraceSetPriorityProperty+0x70>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	79fb      	ldrb	r3, [r7, #7]
 800e612:	4413      	add	r3, r2
 800e614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e618:	79ba      	ldrb	r2, [r7, #6]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d903      	bls.n	800e626 <prvTraceSetPriorityProperty+0x3a>
 800e61e:	4810      	ldr	r0, [pc, #64]	; (800e660 <prvTraceSetPriorityProperty+0x74>)
 800e620:	f000 fb74 	bl	800ed0c <prvTraceError>
 800e624:	e015      	b.n	800e652 <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 800e626:	4b0d      	ldr	r3, [pc, #52]	; (800e65c <prvTraceSetPriorityProperty+0x70>)
 800e628:	681c      	ldr	r4, [r3, #0]
 800e62a:	79fa      	ldrb	r2, [r7, #7]
 800e62c:	79bb      	ldrb	r3, [r7, #6]
 800e62e:	4611      	mov	r1, r2
 800e630:	4618      	mov	r0, r3
 800e632:	f000 f91b 	bl	800e86c <uiIndexOfObject>
 800e636:	4603      	mov	r3, r0
 800e638:	4619      	mov	r1, r3
 800e63a:	4b08      	ldr	r3, [pc, #32]	; (800e65c <prvTraceSetPriorityProperty+0x70>)
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	4413      	add	r3, r2
 800e642:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e646:	440b      	add	r3, r1
 800e648:	3301      	adds	r3, #1
 800e64a:	4423      	add	r3, r4
 800e64c:	797a      	ldrb	r2, [r7, #5]
 800e64e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800e652:	370c      	adds	r7, #12
 800e654:	46bd      	mov	sp, r7
 800e656:	bd90      	pop	{r4, r7, pc}
 800e658:	08020ab0 	.word	0x08020ab0
 800e65c:	2000835c 	.word	0x2000835c
 800e660:	08020afc 	.word	0x08020afc

0800e664 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	4603      	mov	r3, r0
 800e66c:	460a      	mov	r2, r1
 800e66e:	71fb      	strb	r3, [r7, #7]
 800e670:	4613      	mov	r3, r2
 800e672:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	2b08      	cmp	r3, #8
 800e678:	d904      	bls.n	800e684 <prvTraceGetPriorityProperty+0x20>
 800e67a:	4816      	ldr	r0, [pc, #88]	; (800e6d4 <prvTraceGetPriorityProperty+0x70>)
 800e67c:	f000 fb46 	bl	800ed0c <prvTraceError>
 800e680:	2300      	movs	r3, #0
 800e682:	e022      	b.n	800e6ca <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800e684:	4b14      	ldr	r3, [pc, #80]	; (800e6d8 <prvTraceGetPriorityProperty+0x74>)
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	4413      	add	r3, r2
 800e68c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e690:	79ba      	ldrb	r2, [r7, #6]
 800e692:	429a      	cmp	r2, r3
 800e694:	d904      	bls.n	800e6a0 <prvTraceGetPriorityProperty+0x3c>
 800e696:	4811      	ldr	r0, [pc, #68]	; (800e6dc <prvTraceGetPriorityProperty+0x78>)
 800e698:	f000 fb38 	bl	800ed0c <prvTraceError>
 800e69c:	2300      	movs	r3, #0
 800e69e:	e014      	b.n	800e6ca <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 800e6a0:	4b0d      	ldr	r3, [pc, #52]	; (800e6d8 <prvTraceGetPriorityProperty+0x74>)
 800e6a2:	681c      	ldr	r4, [r3, #0]
 800e6a4:	79fa      	ldrb	r2, [r7, #7]
 800e6a6:	79bb      	ldrb	r3, [r7, #6]
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 f8de 	bl	800e86c <uiIndexOfObject>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	4b08      	ldr	r3, [pc, #32]	; (800e6d8 <prvTraceGetPriorityProperty+0x74>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	79fb      	ldrb	r3, [r7, #7]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e6c0:	440b      	add	r3, r1
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	4423      	add	r3, r4
 800e6c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd90      	pop	{r4, r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	08020b3c 	.word	0x08020b3c
 800e6d8:	2000835c 	.word	0x2000835c
 800e6dc:	08020b88 	.word	0x08020b88

0800e6e0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 800e6e0:	b590      	push	{r4, r7, lr}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	71bb      	strb	r3, [r7, #6]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800e6f2:	79fb      	ldrb	r3, [r7, #7]
 800e6f4:	2b08      	cmp	r3, #8
 800e6f6:	d903      	bls.n	800e700 <prvTraceSetObjectState+0x20>
 800e6f8:	4814      	ldr	r0, [pc, #80]	; (800e74c <prvTraceSetObjectState+0x6c>)
 800e6fa:	f000 fb07 	bl	800ed0c <prvTraceError>
 800e6fe:	e021      	b.n	800e744 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800e700:	4b13      	ldr	r3, [pc, #76]	; (800e750 <prvTraceSetObjectState+0x70>)
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	79fb      	ldrb	r3, [r7, #7]
 800e706:	4413      	add	r3, r2
 800e708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e70c:	79ba      	ldrb	r2, [r7, #6]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d903      	bls.n	800e71a <prvTraceSetObjectState+0x3a>
 800e712:	4810      	ldr	r0, [pc, #64]	; (800e754 <prvTraceSetObjectState+0x74>)
 800e714:	f000 fafa 	bl	800ed0c <prvTraceError>
 800e718:	e014      	b.n	800e744 <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 800e71a:	4b0d      	ldr	r3, [pc, #52]	; (800e750 <prvTraceSetObjectState+0x70>)
 800e71c:	681c      	ldr	r4, [r3, #0]
 800e71e:	79fa      	ldrb	r2, [r7, #7]
 800e720:	79bb      	ldrb	r3, [r7, #6]
 800e722:	4611      	mov	r1, r2
 800e724:	4618      	mov	r0, r3
 800e726:	f000 f8a1 	bl	800e86c <uiIndexOfObject>
 800e72a:	4603      	mov	r3, r0
 800e72c:	4619      	mov	r1, r3
 800e72e:	4b08      	ldr	r3, [pc, #32]	; (800e750 <prvTraceSetObjectState+0x70>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	4413      	add	r3, r2
 800e736:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e73a:	440b      	add	r3, r1
 800e73c:	4423      	add	r3, r4
 800e73e:	797a      	ldrb	r2, [r7, #5]
 800e740:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	08020bc8 	.word	0x08020bc8
 800e750:	2000835c 	.word	0x2000835c
 800e754:	08020c0c 	.word	0x08020c0c

0800e758 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	4603      	mov	r3, r0
 800e760:	460a      	mov	r2, r1
 800e762:	71fb      	strb	r3, [r7, #7]
 800e764:	4613      	mov	r3, r2
 800e766:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800e768:	79fb      	ldrb	r3, [r7, #7]
 800e76a:	2b08      	cmp	r3, #8
 800e76c:	d904      	bls.n	800e778 <prvTraceGetObjectState+0x20>
 800e76e:	4815      	ldr	r0, [pc, #84]	; (800e7c4 <prvTraceGetObjectState+0x6c>)
 800e770:	f000 facc 	bl	800ed0c <prvTraceError>
 800e774:	2300      	movs	r3, #0
 800e776:	e021      	b.n	800e7bc <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800e778:	4b13      	ldr	r3, [pc, #76]	; (800e7c8 <prvTraceGetObjectState+0x70>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	4413      	add	r3, r2
 800e780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e784:	79ba      	ldrb	r2, [r7, #6]
 800e786:	429a      	cmp	r2, r3
 800e788:	d904      	bls.n	800e794 <prvTraceGetObjectState+0x3c>
 800e78a:	4810      	ldr	r0, [pc, #64]	; (800e7cc <prvTraceGetObjectState+0x74>)
 800e78c:	f000 fabe 	bl	800ed0c <prvTraceError>
 800e790:	2300      	movs	r3, #0
 800e792:	e013      	b.n	800e7bc <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 800e794:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <prvTraceGetObjectState+0x70>)
 800e796:	681c      	ldr	r4, [r3, #0]
 800e798:	79fa      	ldrb	r2, [r7, #7]
 800e79a:	79bb      	ldrb	r3, [r7, #6]
 800e79c:	4611      	mov	r1, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f864 	bl	800e86c <uiIndexOfObject>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4b07      	ldr	r3, [pc, #28]	; (800e7c8 <prvTraceGetObjectState+0x70>)
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	79fb      	ldrb	r3, [r7, #7]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e7b4:	440b      	add	r3, r1
 800e7b6:	4423      	add	r3, r4
 800e7b8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd90      	pop	{r4, r7, pc}
 800e7c4:	08020c48 	.word	0x08020c48
 800e7c8:	2000835c 	.word	0x2000835c
 800e7cc:	08020c8c 	.word	0x08020c8c

0800e7d0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 800e7d0:	b590      	push	{r4, r7, lr}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 800e7da:	4b10      	ldr	r3, [pc, #64]	; (800e81c <prvTraceSetTaskInstanceFinished+0x4c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800e7e2:	79fa      	ldrb	r2, [r7, #7]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d903      	bls.n	800e7f0 <prvTraceSetTaskInstanceFinished+0x20>
 800e7e8:	480d      	ldr	r0, [pc, #52]	; (800e820 <prvTraceSetTaskInstanceFinished+0x50>)
 800e7ea:	f000 fa8f 	bl	800ed0c <prvTraceError>
 800e7ee:	e011      	b.n	800e814 <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 800e7f0:	4b0a      	ldr	r3, [pc, #40]	; (800e81c <prvTraceSetTaskInstanceFinished+0x4c>)
 800e7f2:	681c      	ldr	r4, [r3, #0]
 800e7f4:	79fb      	ldrb	r3, [r7, #7]
 800e7f6:	2103      	movs	r1, #3
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f000 f837 	bl	800e86c <uiIndexOfObject>
 800e7fe:	4603      	mov	r3, r0
 800e800:	461a      	mov	r2, r3
 800e802:	4b06      	ldr	r3, [pc, #24]	; (800e81c <prvTraceSetTaskInstanceFinished+0x4c>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800e80a:	4413      	add	r3, r2
 800e80c:	4423      	add	r3, r4
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
#endif
}
 800e814:	370c      	adds	r7, #12
 800e816:	46bd      	mov	sp, r7
 800e818:	bd90      	pop	{r4, r7, pc}
 800e81a:	bf00      	nop
 800e81c:	2000835c 	.word	0x2000835c
 800e820:	08020cc8 	.word	0x08020cc8

0800e824 <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 800e828:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <prvTraceNextFreeEventBufferSlot+0x40>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d101      	bne.n	800e836 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 800e832:	2300      	movs	r3, #0
 800e834:	e014      	b.n	800e860 <prvTraceNextFreeEventBufferSlot+0x3c>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800e836:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <prvTraceNextFreeEventBufferSlot+0x40>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	69db      	ldr	r3, [r3, #28]
 800e83c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e840:	d304      	bcc.n	800e84c <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 800e842:	4809      	ldr	r0, [pc, #36]	; (800e868 <prvTraceNextFreeEventBufferSlot+0x44>)
 800e844:	f000 fa62 	bl	800ed0c <prvTraceError>
		return NULL;
 800e848:	2300      	movs	r3, #0
 800e84a:	e009      	b.n	800e860 <prvTraceNextFreeEventBufferSlot+0x3c>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 800e84c:	4b05      	ldr	r3, [pc, #20]	; (800e864 <prvTraceNextFreeEventBufferSlot+0x40>)
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	4b04      	ldr	r3, [pc, #16]	; (800e864 <prvTraceNextFreeEventBufferSlot+0x40>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	69db      	ldr	r3, [r3, #28]
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800e85c:	4413      	add	r3, r2
 800e85e:	3304      	adds	r3, #4
}
 800e860:	4618      	mov	r0, r3
 800e862:	bd80      	pop	{r7, pc}
 800e864:	2000835c 	.word	0x2000835c
 800e868:	08020d10 	.word	0x08020d10

0800e86c <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	4603      	mov	r3, r0
 800e874:	460a      	mov	r2, r1
 800e876:	71fb      	strb	r3, [r7, #7]
 800e878:	4613      	mov	r3, r2
 800e87a:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800e87c:	79bb      	ldrb	r3, [r7, #6]
 800e87e:	2b08      	cmp	r3, #8
 800e880:	d904      	bls.n	800e88c <uiIndexOfObject+0x20>
 800e882:	4822      	ldr	r0, [pc, #136]	; (800e90c <uiIndexOfObject+0xa0>)
 800e884:	f000 fa42 	bl	800ed0c <prvTraceError>
 800e888:	2300      	movs	r3, #0
 800e88a:	e03a      	b.n	800e902 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d008      	beq.n	800e8a4 <uiIndexOfObject+0x38>
 800e892:	4b1f      	ldr	r3, [pc, #124]	; (800e910 <uiIndexOfObject+0xa4>)
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	79bb      	ldrb	r3, [r7, #6]
 800e898:	4413      	add	r3, r2
 800e89a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e89e:	79fa      	ldrb	r2, [r7, #7]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d904      	bls.n	800e8ae <uiIndexOfObject+0x42>
 800e8a4:	481b      	ldr	r0, [pc, #108]	; (800e914 <uiIndexOfObject+0xa8>)
 800e8a6:	f000 fa31 	bl	800ed0c <prvTraceError>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	e029      	b.n	800e902 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800e8ae:	79bb      	ldrb	r3, [r7, #6]
 800e8b0:	2b08      	cmp	r3, #8
 800e8b2:	d822      	bhi.n	800e8fa <uiIndexOfObject+0x8e>
 800e8b4:	79fb      	ldrb	r3, [r7, #7]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d01f      	beq.n	800e8fa <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 800e8ba:	4b15      	ldr	r3, [pc, #84]	; (800e910 <uiIndexOfObject+0xa4>)
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	79bb      	ldrb	r3, [r7, #6]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800e8c6:	79fa      	ldrb	r2, [r7, #7]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d816      	bhi.n	800e8fa <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800e8cc:	4b10      	ldr	r3, [pc, #64]	; (800e910 <uiIndexOfObject+0xa4>)
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	79bb      	ldrb	r3, [r7, #6]
 800e8d2:	3338      	adds	r3, #56	; 0x38
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	889a      	ldrh	r2, [r3, #4]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800e8da:	4b0d      	ldr	r3, [pc, #52]	; (800e910 <uiIndexOfObject+0xa4>)
 800e8dc:	6819      	ldr	r1, [r3, #0]
 800e8de:	79bb      	ldrb	r3, [r7, #6]
 800e8e0:	440b      	add	r3, r1
 800e8e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800e8e6:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	fb11 f303 	smulbb	r3, r1, r3
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	4413      	add	r3, r2
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	e003      	b.n	800e902 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 800e8fa:	4807      	ldr	r0, [pc, #28]	; (800e918 <uiIndexOfObject+0xac>)
 800e8fc:	f000 fa06 	bl	800ed0c <prvTraceError>
	return 0;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	08020d38 	.word	0x08020d38
 800e910:	2000835c 	.word	0x2000835c
 800e914:	08020d78 	.word	0x08020d78
 800e918:	08020db8 	.word	0x08020db8

0800e91c <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b088      	sub	sp, #32
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800e926:	4b4e      	ldr	r3, [pc, #312]	; (800ea60 <prvTraceGetObjectHandle+0x144>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d104      	bne.n	800e938 <prvTraceGetObjectHandle+0x1c>
 800e92e:	484d      	ldr	r0, [pc, #308]	; (800ea64 <prvTraceGetObjectHandle+0x148>)
 800e930:	f000 f9ec 	bl	800ed0c <prvTraceError>
 800e934:	2300      	movs	r3, #0
 800e936:	e08f      	b.n	800ea58 <prvTraceGetObjectHandle+0x13c>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800e938:	79fb      	ldrb	r3, [r7, #7]
 800e93a:	2b08      	cmp	r3, #8
 800e93c:	d904      	bls.n	800e948 <prvTraceGetObjectHandle+0x2c>
 800e93e:	484a      	ldr	r0, [pc, #296]	; (800ea68 <prvTraceGetObjectHandle+0x14c>)
 800e940:	f000 f9e4 	bl	800ed0c <prvTraceError>
 800e944:	2300      	movs	r3, #0
 800e946:	e087      	b.n	800ea58 <prvTraceGetObjectHandle+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e948:	f3ef 8310 	mrs	r3, PRIMASK
 800e94c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e94e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 800e950:	61bb      	str	r3, [r7, #24]
 800e952:	2301      	movs	r3, #1
 800e954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	f383 8810 	msr	PRIMASK, r3
}
 800e95c:	bf00      	nop
 800e95e:	4b43      	ldr	r3, [pc, #268]	; (800ea6c <prvTraceGetObjectHandle+0x150>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3301      	adds	r3, #1
 800e964:	4a41      	ldr	r2, [pc, #260]	; (800ea6c <prvTraceGetObjectHandle+0x150>)
 800e966:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	4a41      	ldr	r2, [pc, #260]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e96c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e970:	461a      	mov	r2, r3
 800e972:	4b40      	ldr	r3, [pc, #256]	; (800ea74 <prvTraceGetObjectHandle+0x158>)
 800e974:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 800e976:	4b3f      	ldr	r3, [pc, #252]	; (800ea74 <prvTraceGetObjectHandle+0x158>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a3d      	ldr	r2, [pc, #244]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e97c:	4413      	add	r3, r2
 800e97e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e982:	2b00      	cmp	r3, #0
 800e984:	d114      	bne.n	800e9b0 <prvTraceGetObjectHandle+0x94>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 800e986:	4b3b      	ldr	r3, [pc, #236]	; (800ea74 <prvTraceGetObjectHandle+0x158>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 800e98c:	79fb      	ldrb	r3, [r7, #7]
 800e98e:	4938      	ldr	r1, [pc, #224]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e990:	3308      	adds	r3, #8
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	440b      	add	r3, r1
 800e996:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 800e99e:	4b35      	ldr	r3, [pc, #212]	; (800ea74 <prvTraceGetObjectHandle+0x158>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 800e9a2:	3201      	adds	r2, #1
 800e9a4:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800e9a6:	4a32      	ldr	r2, [pc, #200]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e9a8:	4413      	add	r3, r2
 800e9aa:	460a      	mov	r2, r1
 800e9ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 800e9b0:	4b30      	ldr	r3, [pc, #192]	; (800ea74 <prvTraceGetObjectHandle+0x158>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a2e      	ldr	r2, [pc, #184]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e9bc:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800e9be:	79fb      	ldrb	r3, [r7, #7]
 800e9c0:	4a2b      	ldr	r2, [pc, #172]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e9c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	4929      	ldr	r1, [pc, #164]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e9ca:	3310      	adds	r3, #16
 800e9cc:	005b      	lsls	r3, r3, #1
 800e9ce:	440b      	add	r3, r1
 800e9d0:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d90a      	bls.n	800e9ec <prvTraceGetObjectHandle+0xd0>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800e9d6:	79fb      	ldrb	r3, [r7, #7]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7ff f9d3 	bl	800dd84 <pszTraceGetErrorNotEnoughHandles>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f000 f993 	bl	800ed0c <prvTraceError>
		handle = 0;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	77fb      	strb	r3, [r7, #31]
 800e9ea:	e029      	b.n	800ea40 <prvTraceGetObjectHandle+0x124>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 800e9ec:	79fb      	ldrb	r3, [r7, #7]
 800e9ee:	4a20      	ldr	r2, [pc, #128]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e9f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800e9f4:	3201      	adds	r2, #1
 800e9f6:	b291      	uxth	r1, r2
 800e9f8:	4a1d      	ldr	r2, [pc, #116]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800e9fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800e9fe:	79fb      	ldrb	r3, [r7, #7]
 800ea00:	4a1b      	ldr	r2, [pc, #108]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800ea02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea06:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 800ea08:	79fb      	ldrb	r3, [r7, #7]
 800ea0a:	4a19      	ldr	r2, [pc, #100]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	4413      	add	r3, r2
 800ea12:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800ea14:	1acb      	subs	r3, r1, r3
 800ea16:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 800ea18:	79fb      	ldrb	r3, [r7, #7]
 800ea1a:	4a15      	ldr	r2, [pc, #84]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800ea1c:	3318      	adds	r3, #24
 800ea1e:	005b      	lsls	r3, r3, #1
 800ea20:	4413      	add	r3, r2
 800ea22:	88db      	ldrh	r3, [r3, #6]
 800ea24:	461a      	mov	r2, r3
		if (hndCount >
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	dd09      	ble.n	800ea40 <prvTraceGetObjectHandle+0x124>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800ea30:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 800ea32:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800ea34:	4a0e      	ldr	r2, [pc, #56]	; (800ea70 <prvTraceGetObjectHandle+0x154>)
 800ea36:	3318      	adds	r3, #24
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	4413      	add	r3, r2
 800ea3c:	460a      	mov	r2, r1
 800ea3e:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <prvTraceGetObjectHandle+0x150>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	4a09      	ldr	r2, [pc, #36]	; (800ea6c <prvTraceGetObjectHandle+0x150>)
 800ea48:	6013      	str	r3, [r2, #0]
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	f383 8810 	msr	PRIMASK, r3
}
 800ea54:	bf00      	nop

	return handle;
 800ea56:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3720      	adds	r7, #32
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	2000835c 	.word	0x2000835c
 800ea64:	08020218 	.word	0x08020218
 800ea68:	08020df8 	.word	0x08020df8
 800ea6c:	20000498 	.word	0x20000498
 800ea70:	20009c70 	.word	0x20009c70
 800ea74:	200004a8 	.word	0x200004a8

0800ea78 <prvTraceFreeObjectHandle>:

void prvTraceFreeObjectHandle(traceObjectClass objectclass, traceHandle handle)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	460a      	mov	r2, r1
 800ea82:	71fb      	strb	r3, [r7, #7]
 800ea84:	4613      	mov	r3, r2
 800ea86:	71bb      	strb	r3, [r7, #6]
	int indexOfHandle;

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", TRC_UNUSED);
 800ea88:	4b22      	ldr	r3, [pc, #136]	; (800eb14 <prvTraceFreeObjectHandle+0x9c>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d103      	bne.n	800ea98 <prvTraceFreeObjectHandle+0x20>
 800ea90:	4821      	ldr	r0, [pc, #132]	; (800eb18 <prvTraceFreeObjectHandle+0xa0>)
 800ea92:	f000 f93b 	bl	800ed0c <prvTraceError>
 800ea96:	e03a      	b.n	800eb0e <prvTraceFreeObjectHandle+0x96>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800ea98:	79fb      	ldrb	r3, [r7, #7]
 800ea9a:	2b08      	cmp	r3, #8
 800ea9c:	d903      	bls.n	800eaa6 <prvTraceFreeObjectHandle+0x2e>
 800ea9e:	481f      	ldr	r0, [pc, #124]	; (800eb1c <prvTraceFreeObjectHandle+0xa4>)
 800eaa0:	f000 f934 	bl	800ed0c <prvTraceError>
 800eaa4:	e033      	b.n	800eb0e <prvTraceFreeObjectHandle+0x96>
		"prvTraceFreeObjectHandle: Invalid value for objectclass", TRC_UNUSED);
	TRACE_ASSERT(handle > 0 && handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 800eaa6:	79bb      	ldrb	r3, [r7, #6]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d008      	beq.n	800eabe <prvTraceFreeObjectHandle+0x46>
 800eaac:	4b19      	ldr	r3, [pc, #100]	; (800eb14 <prvTraceFreeObjectHandle+0x9c>)
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	79fb      	ldrb	r3, [r7, #7]
 800eab2:	4413      	add	r3, r2
 800eab4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eab8:	79ba      	ldrb	r2, [r7, #6]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d903      	bls.n	800eac6 <prvTraceFreeObjectHandle+0x4e>
 800eabe:	4818      	ldr	r0, [pc, #96]	; (800eb20 <prvTraceFreeObjectHandle+0xa8>)
 800eac0:	f000 f924 	bl	800ed0c <prvTraceError>
 800eac4:	e023      	b.n	800eb0e <prvTraceFreeObjectHandle+0x96>
		"prvTraceFreeObjectHandle: Invalid value for handle", TRC_UNUSED);

	/* Check that there is room to push the handle on the stack */
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 800eac6:	79fb      	ldrb	r3, [r7, #7]
 800eac8:	4a16      	ldr	r2, [pc, #88]	; (800eb24 <prvTraceFreeObjectHandle+0xac>)
 800eaca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		objectHandleStacks.lowestIndexOfClass[objectclass])
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	4914      	ldr	r1, [pc, #80]	; (800eb24 <prvTraceFreeObjectHandle+0xac>)
 800ead2:	3308      	adds	r3, #8
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	440b      	add	r3, r1
 800ead8:	885b      	ldrh	r3, [r3, #2]
	if ((objectHandleStacks.indexOfNextAvailableHandle[objectclass] - 1) <
 800eada:	429a      	cmp	r2, r3
 800eadc:	d803      	bhi.n	800eae6 <prvTraceFreeObjectHandle+0x6e>
	{
		/* Error */
		prvTraceError("Attempt to free more handles than allocated!");
 800eade:	4812      	ldr	r0, [pc, #72]	; (800eb28 <prvTraceFreeObjectHandle+0xb0>)
 800eae0:	f000 f914 	bl	800ed0c <prvTraceError>
 800eae4:	e013      	b.n	800eb0e <prvTraceFreeObjectHandle+0x96>
	}
	else
	{
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]--;
 800eae6:	79fb      	ldrb	r3, [r7, #7]
 800eae8:	4a0e      	ldr	r2, [pc, #56]	; (800eb24 <prvTraceFreeObjectHandle+0xac>)
 800eaea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800eaee:	3a01      	subs	r2, #1
 800eaf0:	b291      	uxth	r1, r2
 800eaf2:	4a0c      	ldr	r2, [pc, #48]	; (800eb24 <prvTraceFreeObjectHandle+0xac>)
 800eaf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800eaf8:	79fb      	ldrb	r3, [r7, #7]
 800eafa:	4a0a      	ldr	r2, [pc, #40]	; (800eb24 <prvTraceFreeObjectHandle+0xac>)
 800eafc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb00:	60fb      	str	r3, [r7, #12]
		objectHandleStacks.objectHandles[indexOfHandle] = handle;
 800eb02:	4a08      	ldr	r2, [pc, #32]	; (800eb24 <prvTraceFreeObjectHandle+0xac>)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4413      	add	r3, r2
 800eb08:	3348      	adds	r3, #72	; 0x48
 800eb0a:	79ba      	ldrb	r2, [r7, #6]
 800eb0c:	701a      	strb	r2, [r3, #0]
	}
}
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	2000835c 	.word	0x2000835c
 800eb18:	08020218 	.word	0x08020218
 800eb1c:	08020e40 	.word	0x08020e40
 800eb20:	08020e88 	.word	0x08020e88
 800eb24:	20009c70 	.word	0x20009c70
 800eb28:	08020ecc 	.word	0x08020ecc

0800eb2c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	460a      	mov	r2, r1
 800eb36:	71fb      	strb	r3, [r7, #7]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800eb3c:	79fa      	ldrb	r2, [r7, #7]
 800eb3e:	79bb      	ldrb	r3, [r7, #6]
 800eb40:	4611      	mov	r1, r2
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fe92 	bl	800e86c <uiIndexOfObject>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 800eb4c:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <prvMarkObjectAsUsed+0x38>)
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	89fb      	ldrh	r3, [r7, #14]
 800eb52:	4413      	add	r3, r2
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
}
 800eb5a:	bf00      	nop
 800eb5c:	3710      	adds	r7, #16
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	2000835c 	.word	0x2000835c

0800eb68 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 800eb74:	2300      	movs	r3, #0
 800eb76:	617b      	str	r3, [r7, #20]
 800eb78:	e010      	b.n	800eb9c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	441a      	add	r2, r3
 800eb80:	68f9      	ldr	r1, [r7, #12]
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	440b      	add	r3, r1
 800eb86:	7812      	ldrb	r2, [r2, #0]
 800eb88:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 800eb8a:	68ba      	ldr	r2, [r7, #8]
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	4413      	add	r3, r2
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d007      	beq.n	800eba6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	617b      	str	r3, [r7, #20]
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d3ea      	bcc.n	800eb7a <prvStrncpy+0x12>
			break;
	}
}
 800eba4:	e000      	b.n	800eba8 <prvStrncpy+0x40>
			break;
 800eba6:	bf00      	nop
}
 800eba8:	bf00      	nop
 800ebaa:	371c      	adds	r7, #28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	603a      	str	r2, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	if (name == 0)
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <prvTraceSetObjectName+0x1a>
	{
		name = "";
 800ebca:	4b21      	ldr	r3, [pc, #132]	; (800ec50 <prvTraceSetObjectName+0x9c>)
 800ebcc:	603b      	str	r3, [r7, #0]
	}

	if (objectclass >= TRACE_NCLASSES)
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	2b08      	cmp	r3, #8
 800ebd2:	d903      	bls.n	800ebdc <prvTraceSetObjectName+0x28>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 800ebd4:	481f      	ldr	r0, [pc, #124]	; (800ec54 <prvTraceSetObjectName+0xa0>)
 800ebd6:	f000 f899 	bl	800ed0c <prvTraceError>
		return;
 800ebda:	e036      	b.n	800ec4a <prvTraceSetObjectName+0x96>
	}

	if (handle == 0)
 800ebdc:	79bb      	ldrb	r3, [r7, #6]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d103      	bne.n	800ebea <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 800ebe2:	481d      	ldr	r0, [pc, #116]	; (800ec58 <prvTraceSetObjectName+0xa4>)
 800ebe4:	f000 f892 	bl	800ed0c <prvTraceError>
		return;
 800ebe8:	e02f      	b.n	800ec4a <prvTraceSetObjectName+0x96>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 800ebea:	4b1c      	ldr	r3, [pc, #112]	; (800ec5c <prvTraceSetObjectName+0xa8>)
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	79fb      	ldrb	r3, [r7, #7]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ebf6:	79ba      	ldrb	r2, [r7, #6]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d908      	bls.n	800ec0e <prvTraceSetObjectName+0x5a>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 800ebfc:	79fb      	ldrb	r3, [r7, #7]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7ff f8c0 	bl	800dd84 <pszTraceGetErrorNotEnoughHandles>
 800ec04:	4603      	mov	r3, r0
 800ec06:	4618      	mov	r0, r3
 800ec08:	f000 f880 	bl	800ed0c <prvTraceError>
 800ec0c:	e01d      	b.n	800ec4a <prvTraceSetObjectName+0x96>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 800ec0e:	79fa      	ldrb	r2, [r7, #7]
 800ec10:	79bb      	ldrb	r3, [r7, #6]
 800ec12:	4611      	mov	r1, r2
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7ff fe29 	bl	800e86c <uiIndexOfObject>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	4b10      	ldr	r3, [pc, #64]	; (800ec60 <prvTraceSetObjectName+0xac>)
 800ec20:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 800ec22:	4b10      	ldr	r3, [pc, #64]	; (800ec64 <prvTraceSetObjectName+0xb0>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d10f      	bne.n	800ec4a <prvTraceSetObjectName+0x96>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800ec2a:	4b0c      	ldr	r3, [pc, #48]	; (800ec5c <prvTraceSetObjectName+0xa8>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <prvTraceSetObjectName+0xac>)
 800ec30:	881b      	ldrh	r3, [r3, #0]
 800ec32:	3388      	adds	r3, #136	; 0x88
 800ec34:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 800ec36:	4b09      	ldr	r3, [pc, #36]	; (800ec5c <prvTraceSetObjectName+0xa8>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800ec42:	461a      	mov	r2, r3
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	f7ff ff8f 	bl	800eb68 <prvStrncpy>
		}
	}
}
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	08020efc 	.word	0x08020efc
 800ec54:	08020f00 	.word	0x08020f00
 800ec58:	08020f30 	.word	0x08020f30
 800ec5c:	2000835c 	.word	0x2000835c
 800ec60:	200004ac 	.word	0x200004ac
 800ec64:	20009c68 	.word	0x20009c68

0800ec68 <prvTraceOpenSymbol>:

traceString prvTraceOpenSymbol(const char* name, traceString userEventChannel)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	807b      	strh	r3, [r7, #2]
	uint16_t result;
	uint8_t len;
	uint8_t crc;
	TRACE_ALLOC_CRITICAL_SECTION();
	
	len = 0;
 800ec74:	2300      	movs	r3, #0
 800ec76:	72fb      	strb	r3, [r7, #11]
	crc = 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	72bb      	strb	r3, [r7, #10]
	
	TRACE_ASSERT(name != NULL, "prvTraceOpenSymbol: name == NULL", (traceString)0);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d104      	bne.n	800ec8c <prvTraceOpenSymbol+0x24>
 800ec82:	4820      	ldr	r0, [pc, #128]	; (800ed04 <prvTraceOpenSymbol+0x9c>)
 800ec84:	f000 f842 	bl	800ed0c <prvTraceError>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	e036      	b.n	800ecfa <prvTraceOpenSymbol+0x92>

	prvTraceGetChecksum(name, &crc, &len);
 800ec8c:	f107 020b 	add.w	r2, r7, #11
 800ec90:	f107 030a 	add.w	r3, r7, #10
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fb32 	bl	800f300 <prvTraceGetChecksum>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec9c:	f3ef 8310 	mrs	r3, PRIMASK
 800eca0:	613b      	str	r3, [r7, #16]
  return(result);
 800eca2:	693b      	ldr	r3, [r7, #16]

	trcCRITICAL_SECTION_BEGIN();
 800eca4:	61bb      	str	r3, [r7, #24]
 800eca6:	2301      	movs	r3, #1
 800eca8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	f383 8810 	msr	PRIMASK, r3
}
 800ecb0:	bf00      	nop
 800ecb2:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <prvTraceOpenSymbol+0xa0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	4a13      	ldr	r2, [pc, #76]	; (800ed08 <prvTraceOpenSymbol+0xa0>)
 800ecba:	6013      	str	r3, [r2, #0]
	result = prvTraceLookupSymbolTableEntry(name, crc, len, userEventChannel);
 800ecbc:	7ab9      	ldrb	r1, [r7, #10]
 800ecbe:	7afa      	ldrb	r2, [r7, #11]
 800ecc0:	887b      	ldrh	r3, [r7, #2]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 f9dc 	bl	800f080 <prvTraceLookupSymbolTableEntry>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	83fb      	strh	r3, [r7, #30]
	if (!result)
 800eccc:	8bfb      	ldrh	r3, [r7, #30]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d107      	bne.n	800ece2 <prvTraceOpenSymbol+0x7a>
	{
		result = prvTraceCreateSymbolTableEntry(name, crc, len, userEventChannel);
 800ecd2:	7ab9      	ldrb	r1, [r7, #10]
 800ecd4:	7afa      	ldrb	r2, [r7, #11]
 800ecd6:	887b      	ldrh	r3, [r7, #2]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 fa4f 	bl	800f17c <prvTraceCreateSymbolTableEntry>
 800ecde:	4603      	mov	r3, r0
 800ece0:	83fb      	strh	r3, [r7, #30]
	}
	trcCRITICAL_SECTION_END();
 800ece2:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <prvTraceOpenSymbol+0xa0>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	4a07      	ldr	r2, [pc, #28]	; (800ed08 <prvTraceOpenSymbol+0xa0>)
 800ecea:	6013      	str	r3, [r2, #0]
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f383 8810 	msr	PRIMASK, r3
}
 800ecf6:	bf00      	nop

	return result;
 800ecf8:	8bfb      	ldrh	r3, [r7, #30]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3720      	adds	r7, #32
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	08020f60 	.word	0x08020f60
 800ed08:	20000498 	.word	0x20000498

0800ed0c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 800ed14:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <prvTraceError+0x50>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d001      	beq.n	800ed20 <prvTraceError+0x14>
	{
		vTraceStop();
 800ed1c:	f7ff f87e 	bl	800de1c <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 800ed20:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <prvTraceError+0x54>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d115      	bne.n	800ed54 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 800ed28:	4a0d      	ldr	r2, [pc, #52]	; (800ed60 <prvTraceError+0x54>)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 800ed2e:	4b0b      	ldr	r3, [pc, #44]	; (800ed5c <prvTraceError+0x50>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00e      	beq.n	800ed54 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800ed36:	4b09      	ldr	r3, [pc, #36]	; (800ed5c <prvTraceError+0x50>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed3e:	4a08      	ldr	r2, [pc, #32]	; (800ed60 <prvTraceError+0x54>)
 800ed40:	6811      	ldr	r1, [r2, #0]
 800ed42:	2250      	movs	r2, #80	; 0x50
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7ff ff0f 	bl	800eb68 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 800ed4a:	4b04      	ldr	r3, [pc, #16]	; (800ed5c <prvTraceError+0x50>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
		}
	}
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	2000835c 	.word	0x2000835c
 800ed60:	20009c68 	.word	0x20009c68

0800ed64 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d175      	bne.n	800ee68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x104>
 800ed7c:	483e      	ldr	r0, [pc, #248]	; (800ee78 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x114>)
 800ed7e:	f7ff ffc5 	bl	800ed0c <prvTraceError>
 800ed82:	e075      	b.n	800ee70 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 800ed84:	4b3d      	ldr	r3, [pc, #244]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	69db      	ldr	r3, [r3, #28]
 800ed8a:	697a      	ldr	r2, [r7, #20]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800ed90:	4b3a      	ldr	r3, [pc, #232]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4413      	add	r3, r2
 800ed9a:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800ed9e:	2b98      	cmp	r3, #152	; 0x98
 800eda0:	d929      	bls.n	800edf6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 800eda2:	4b36      	ldr	r3, [pc, #216]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 800edb0:	2ba7      	cmp	r3, #167	; 0xa7
 800edb2:	d820      	bhi.n	800edf6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x92>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 800edb4:	4b31      	ldr	r3, [pc, #196]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4413      	add	r3, r2
 800edbe:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800edc2:	3368      	adds	r3, #104	; 0x68
 800edc4:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 800edc6:	7bfa      	ldrb	r2, [r7, #15]
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	441a      	add	r2, r3
 800edcc:	4b2b      	ldr	r3, [pc, #172]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	699b      	ldr	r3, [r3, #24]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d244      	bcs.n	800ee60 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 800edd6:	4b29      	ldr	r3, [pc, #164]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800ede2:	4413      	add	r3, r2
 800ede4:	1d18      	adds	r0, r3, #4
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
 800ede8:	3301      	adds	r3, #1
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	461a      	mov	r2, r3
 800edee:	2100      	movs	r1, #0
 800edf0:	f00a fe24 	bl	8019a3c <memset>
		{
 800edf4:	e034      	b.n	800ee60 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfc>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 800edf6:	4b21      	ldr	r3, [pc, #132]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d12c      	bne.n	800ee62 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	1c5a      	adds	r2, r3, #1
 800ee0c:	4b1b      	ldr	r3, [pc, #108]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d20d      	bcs.n	800ee32 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xce>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 800ee16:	4b19      	ldr	r3, [pc, #100]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800ee22:	4413      	add	r3, r2
 800ee24:	3304      	adds	r3, #4
 800ee26:	2208      	movs	r2, #8
 800ee28:	2100      	movs	r1, #0
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f00a fe06 	bl	8019a3c <memset>
 800ee30:	e017      	b.n	800ee62 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 800ee32:	4b12      	ldr	r3, [pc, #72]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f603 1354 	addw	r3, r3, #2388	; 0x954
 800ee3a:	2204      	movs	r2, #4
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f00a fdfc 	bl	8019a3c <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 800ee44:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x118>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 800ee50:	4413      	add	r3, r2
 800ee52:	3304      	adds	r3, #4
 800ee54:	2204      	movs	r2, #4
 800ee56:	2100      	movs	r1, #0
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f00a fdef 	bl	8019a3c <memset>
 800ee5e:	e000      	b.n	800ee62 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
		{
 800ee60:	bf00      	nop
			}
		}
		i++;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	3301      	adds	r3, #1
 800ee66:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d389      	bcc.n	800ed84 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 800ee70:	3718      	adds	r7, #24
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	08020f90 	.word	0x08020f90
 800ee7c:	2000835c 	.word	0x2000835c

0800ee80 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 800ee80:	b580      	push	{r7, lr}
 800ee82:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 800ee84:	4b11      	ldr	r3, [pc, #68]	; (800eecc <prvTraceUpdateCounters+0x4c>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d01b      	beq.n	800eec6 <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 800ee8e:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <prvTraceUpdateCounters+0x4c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	695a      	ldr	r2, [r3, #20]
 800ee94:	3201      	adds	r2, #1
 800ee96:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 800ee98:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <prvTraceUpdateCounters+0x4c>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	69da      	ldr	r2, [r3, #28]
 800ee9e:	3201      	adds	r2, #1
 800eea0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800eea2:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <prvTraceUpdateCounters+0x4c>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	69db      	ldr	r3, [r3, #28]
 800eea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eeac:	d307      	bcc.n	800eebe <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 800eeae:	4b07      	ldr	r3, [pc, #28]	; (800eecc <prvTraceUpdateCounters+0x4c>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 800eeb6:	4b05      	ldr	r3, [pc, #20]	; (800eecc <prvTraceUpdateCounters+0x4c>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2200      	movs	r2, #0
 800eebc:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 800eebe:	2001      	movs	r0, #1
 800eec0:	f7ff ff50 	bl	800ed64 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 800eec4:	e000      	b.n	800eec8 <prvTraceUpdateCounters+0x48>
		return;
 800eec6:	bf00      	nop
#endif
}
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	2000835c 	.word	0x2000835c

0800eed0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b086      	sub	sp, #24
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 800eee6:	88fb      	ldrh	r3, [r7, #6]
 800eee8:	2bff      	cmp	r3, #255	; 0xff
 800eeea:	d009      	beq.n	800ef00 <prvTraceGetDTS+0x30>
 800eeec:	88fb      	ldrh	r3, [r7, #6]
 800eeee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d004      	beq.n	800ef00 <prvTraceGetDTS+0x30>
 800eef6:	485a      	ldr	r0, [pc, #360]	; (800f060 <prvTraceGetDTS+0x190>)
 800eef8:	f7ff ff08 	bl	800ed0c <prvTraceError>
 800eefc:	2300      	movs	r3, #0
 800eefe:	e0ab      	b.n	800f058 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 800ef00:	4b58      	ldr	r3, [pc, #352]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d116      	bne.n	800ef38 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 800ef0a:	4b57      	ldr	r3, [pc, #348]	; (800f068 <prvTraceGetDTS+0x198>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d006      	beq.n	800ef20 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 800ef12:	4b55      	ldr	r3, [pc, #340]	; (800f068 <prvTraceGetDTS+0x198>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	4b53      	ldr	r3, [pc, #332]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	0892      	lsrs	r2, r2, #2
 800ef1c:	625a      	str	r2, [r3, #36]	; 0x24
 800ef1e:	e00b      	b.n	800ef38 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 800ef20:	4b52      	ldr	r3, [pc, #328]	; (800f06c <prvTraceGetDTS+0x19c>)
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	4b52      	ldr	r3, [pc, #328]	; (800f070 <prvTraceGetDTS+0x1a0>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d005      	beq.n	800ef38 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800ef2c:	4b51      	ldr	r3, [pc, #324]	; (800f074 <prvTraceGetDTS+0x1a4>)
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	4b4c      	ldr	r3, [pc, #304]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	0892      	lsrs	r2, r2, #2
 800ef36:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 800ef38:	f107 030c 	add.w	r3, r7, #12
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f000 fa25 	bl	800f38c <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	4b4c      	ldr	r3, [pc, #304]	; (800f078 <prvTraceGetDTS+0x1a8>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4a4a      	ldr	r2, [pc, #296]	; (800f078 <prvTraceGetDTS+0x1a8>)
 800ef50:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 800ef52:	4b44      	ldr	r3, [pc, #272]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d043      	beq.n	800efe4 <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 800ef5c:	4b41      	ldr	r3, [pc, #260]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d91d      	bls.n	800efa4 <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800ef68:	4b3e      	ldr	r3, [pc, #248]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ef6e:	4b3d      	ldr	r3, [pc, #244]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	fbb2 f2f3 	udiv	r2, r2, r3
 800ef7a:	4b3a      	ldr	r3, [pc, #232]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	440a      	add	r2, r1
 800ef80:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800ef82:	4b38      	ldr	r3, [pc, #224]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ef88:	4b36      	ldr	r3, [pc, #216]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef94:	fb02 f200 	mul.w	r2, r2, r0
 800ef98:	1a9a      	subs	r2, r3, r2
 800ef9a:	4b32      	ldr	r3, [pc, #200]	; (800f064 <prvTraceGetDTS+0x194>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	440a      	add	r2, r1
 800efa0:	629a      	str	r2, [r3, #40]	; 0x28
 800efa2:	e007      	b.n	800efb4 <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 800efa4:	4b2f      	ldr	r3, [pc, #188]	; (800f064 <prvTraceGetDTS+0x194>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800efaa:	4b2e      	ldr	r3, [pc, #184]	; (800f064 <prvTraceGetDTS+0x194>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	440a      	add	r2, r1
 800efb2:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800efb4:	4b2b      	ldr	r3, [pc, #172]	; (800f064 <prvTraceGetDTS+0x194>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efba:	4b2a      	ldr	r3, [pc, #168]	; (800f064 <prvTraceGetDTS+0x194>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d313      	bcc.n	800efec <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 800efc4:	4b27      	ldr	r3, [pc, #156]	; (800f064 <prvTraceGetDTS+0x194>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efca:	3201      	adds	r2, #1
 800efcc:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800efce:	4b25      	ldr	r3, [pc, #148]	; (800f064 <prvTraceGetDTS+0x194>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800efd4:	4b23      	ldr	r3, [pc, #140]	; (800f064 <prvTraceGetDTS+0x194>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efda:	4b22      	ldr	r3, [pc, #136]	; (800f064 <prvTraceGetDTS+0x194>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	1a8a      	subs	r2, r1, r2
 800efe0:	629a      	str	r2, [r3, #40]	; 0x28
 800efe2:	e003      	b.n	800efec <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 800efe4:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <prvTraceGetDTS+0x194>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 800efec:	88fb      	ldrh	r3, [r7, #6]
 800efee:	693a      	ldr	r2, [r7, #16]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d92c      	bls.n	800f04e <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 800eff4:	f7ff fc16 	bl	800e824 <prvTraceNextFreeEventBufferSlot>
 800eff8:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d026      	beq.n	800f04e <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 800f000:	88fb      	ldrh	r3, [r7, #6]
 800f002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f006:	4293      	cmp	r3, r2
 800f008:	d10b      	bne.n	800f022 <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	22a9      	movs	r2, #169	; 0xa9
 800f00e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	0c1b      	lsrs	r3, r3, #16
 800f014:	b29a      	uxth	r2, r3
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	2200      	movs	r2, #0
 800f01e:	705a      	strb	r2, [r3, #1]
 800f020:	e013      	b.n	800f04a <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 800f022:	88fb      	ldrh	r3, [r7, #6]
 800f024:	2bff      	cmp	r3, #255	; 0xff
 800f026:	d10d      	bne.n	800f044 <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	22a8      	movs	r2, #168	; 0xa8
 800f02c:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	0a1b      	lsrs	r3, r3, #8
 800f032:	b29a      	uxth	r2, r3
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	0e1b      	lsrs	r3, r3, #24
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	705a      	strb	r2, [r3, #1]
 800f042:	e002      	b.n	800f04a <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 800f044:	480d      	ldr	r0, [pc, #52]	; (800f07c <prvTraceGetDTS+0x1ac>)
 800f046:	f7ff fe61 	bl	800ed0c <prvTraceError>
			}
			prvTraceUpdateCounters();
 800f04a:	f7ff ff19 	bl	800ee80 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	b29a      	uxth	r2, r3
 800f052:	88fb      	ldrh	r3, [r7, #6]
 800f054:	4013      	ands	r3, r2
 800f056:	b29b      	uxth	r3, r3
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	08020fe8 	.word	0x08020fe8
 800f064:	2000835c 	.word	0x2000835c
 800f068:	2000049c 	.word	0x2000049c
 800f06c:	e0001004 	.word	0xe0001004
 800f070:	20009c6c 	.word	0x20009c6c
 800f074:	20000268 	.word	0x20000268
 800f078:	200004b0 	.word	0x200004b0
 800f07c:	08021028 	.word	0x08021028

0800f080 <prvTraceLookupSymbolTableEntry>:
 ******************************************************************************/
traceString prvTraceLookupSymbolTableEntry(const char* name,
										 uint8_t crc6,
										 uint8_t len,
										 traceString chn)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	4608      	mov	r0, r1
 800f08a:	4611      	mov	r1, r2
 800f08c:	461a      	mov	r2, r3
 800f08e:	4603      	mov	r3, r0
 800f090:	70fb      	strb	r3, [r7, #3]
 800f092:	460b      	mov	r3, r1
 800f094:	70bb      	strb	r3, [r7, #2]
 800f096:	4613      	mov	r3, r2
 800f098:	803b      	strh	r3, [r7, #0]
	uint16_t i = RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ];
 800f09a:	4b35      	ldr	r3, [pc, #212]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	78fb      	ldrb	r3, [r7, #3]
 800f0a0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	4413      	add	r3, r2
 800f0a8:	889b      	ldrh	r3, [r3, #4]
 800f0aa:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceLookupSymbolTableEntry: name == NULL", (traceString)0);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d104      	bne.n	800f0bc <prvTraceLookupSymbolTableEntry+0x3c>
 800f0b2:	4830      	ldr	r0, [pc, #192]	; (800f174 <prvTraceLookupSymbolTableEntry+0xf4>)
 800f0b4:	f7ff fe2a 	bl	800ed0c <prvTraceError>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	e054      	b.n	800f166 <prvTraceLookupSymbolTableEntry+0xe6>
	TRACE_ASSERT(len != 0, "prvTraceLookupSymbolTableEntry: len == 0", (traceString)0);
 800f0bc:	78bb      	ldrb	r3, [r7, #2]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d14b      	bne.n	800f15a <prvTraceLookupSymbolTableEntry+0xda>
 800f0c2:	482d      	ldr	r0, [pc, #180]	; (800f178 <prvTraceLookupSymbolTableEntry+0xf8>)
 800f0c4:	f7ff fe22 	bl	800ed0c <prvTraceError>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	e04c      	b.n	800f166 <prvTraceLookupSymbolTableEntry+0xe6>

	while (i != 0)
	{
		if (RecorderDataPtr->SymbolTable.symbytes[i + 2] == (chn & 0x00FF))
 800f0cc:	4b28      	ldr	r3, [pc, #160]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	89fb      	ldrh	r3, [r7, #14]
 800f0d2:	3302      	adds	r3, #2
 800f0d4:	4413      	add	r3, r2
 800f0d6:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800f0da:	461a      	mov	r2, r3
 800f0dc:	883b      	ldrh	r3, [r7, #0]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d127      	bne.n	800f134 <prvTraceLookupSymbolTableEntry+0xb4>
		{
			if (RecorderDataPtr->SymbolTable.symbytes[i + 3] == (chn / 0x100))
 800f0e4:	4b22      	ldr	r3, [pc, #136]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	89fb      	ldrh	r3, [r7, #14]
 800f0ea:	3303      	adds	r3, #3
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	883b      	ldrh	r3, [r7, #0]
 800f0f6:	0a1b      	lsrs	r3, r3, #8
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d11a      	bne.n	800f134 <prvTraceLookupSymbolTableEntry+0xb4>
			{
				if (RecorderDataPtr->SymbolTable.symbytes[i + 4 + len] == '\0')
 800f0fe:	4b1c      	ldr	r3, [pc, #112]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	89fb      	ldrh	r3, [r7, #14]
 800f104:	1d19      	adds	r1, r3, #4
 800f106:	78bb      	ldrb	r3, [r7, #2]
 800f108:	440b      	add	r3, r1
 800f10a:	4413      	add	r3, r2
 800f10c:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10f      	bne.n	800f134 <prvTraceLookupSymbolTableEntry+0xb4>
				{
					if (strncmp((char*)(& RecorderDataPtr->SymbolTable.symbytes[i + 4]), name, len) == 0)
 800f114:	4b16      	ldr	r3, [pc, #88]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	89fb      	ldrh	r3, [r7, #14]
 800f11a:	3304      	adds	r3, #4
 800f11c:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800f120:	4413      	add	r3, r2
 800f122:	3304      	adds	r3, #4
 800f124:	78ba      	ldrb	r2, [r7, #2]
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	f00b fb2f 	bl	801a78c <strncmp>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d016      	beq.n	800f162 <prvTraceLookupSymbolTableEntry+0xe2>
						break; /* found */
					}
				}
			}
		}
		i = (uint16_t)(RecorderDataPtr->SymbolTable.symbytes[i] + (RecorderDataPtr->SymbolTable.symbytes[i + 1] * 0x100));
 800f134:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	4413      	add	r3, r2
 800f13c:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800f140:	b29a      	uxth	r2, r3
 800f142:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <prvTraceLookupSymbolTableEntry+0xf0>)
 800f144:	6819      	ldr	r1, [r3, #0]
 800f146:	89fb      	ldrh	r3, [r7, #14]
 800f148:	3301      	adds	r3, #1
 800f14a:	440b      	add	r3, r1
 800f14c:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800f150:	b29b      	uxth	r3, r3
 800f152:	021b      	lsls	r3, r3, #8
 800f154:	b29b      	uxth	r3, r3
 800f156:	4413      	add	r3, r2
 800f158:	81fb      	strh	r3, [r7, #14]
	while (i != 0)
 800f15a:	89fb      	ldrh	r3, [r7, #14]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1b5      	bne.n	800f0cc <prvTraceLookupSymbolTableEntry+0x4c>
 800f160:	e000      	b.n	800f164 <prvTraceLookupSymbolTableEntry+0xe4>
						break; /* found */
 800f162:	bf00      	nop
	}
	return i;
 800f164:	89fb      	ldrh	r3, [r7, #14]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2000835c 	.word	0x2000835c
 800f174:	0802104c 	.word	0x0802104c
 800f178:	08021088 	.word	0x08021088

0800f17c <prvTraceCreateSymbolTableEntry>:
 ******************************************************************************/
uint16_t prvTraceCreateSymbolTableEntry(const char* name,
										uint8_t crc6,
										uint8_t len,
										traceString channel)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	4608      	mov	r0, r1
 800f186:	4611      	mov	r1, r2
 800f188:	461a      	mov	r2, r3
 800f18a:	4603      	mov	r3, r0
 800f18c:	70fb      	strb	r3, [r7, #3]
 800f18e:	460b      	mov	r3, r1
 800f190:	70bb      	strb	r3, [r7, #2]
 800f192:	4613      	mov	r3, r2
 800f194:	803b      	strh	r3, [r7, #0]
	uint16_t ret = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	81fb      	strh	r3, [r7, #14]

	TRACE_ASSERT(name != NULL, "prvTraceCreateSymbolTableEntry: name == NULL", 0);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d104      	bne.n	800f1aa <prvTraceCreateSymbolTableEntry+0x2e>
 800f1a0:	4853      	ldr	r0, [pc, #332]	; (800f2f0 <prvTraceCreateSymbolTableEntry+0x174>)
 800f1a2:	f7ff fdb3 	bl	800ed0c <prvTraceError>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e09e      	b.n	800f2e8 <prvTraceCreateSymbolTableEntry+0x16c>
	TRACE_ASSERT(len != 0, "prvTraceCreateSymbolTableEntry: len == 0", 0);
 800f1aa:	78bb      	ldrb	r3, [r7, #2]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d104      	bne.n	800f1ba <prvTraceCreateSymbolTableEntry+0x3e>
 800f1b0:	4850      	ldr	r0, [pc, #320]	; (800f2f4 <prvTraceCreateSymbolTableEntry+0x178>)
 800f1b2:	f7ff fdab 	bl	800ed0c <prvTraceError>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e096      	b.n	800f2e8 <prvTraceCreateSymbolTableEntry+0x16c>

	if (RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + len + 4 >= (TRC_CFG_SYMBOL_TABLE_SIZE))
 800f1ba:	4b4f      	ldr	r3, [pc, #316]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 800f1c2:	78bb      	ldrb	r3, [r7, #2]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800f1cc:	d305      	bcc.n	800f1da <prvTraceCreateSymbolTableEntry+0x5e>
	{
		prvTraceError("Symbol table full. Increase TRC_CFG_SYMBOL_TABLE_SIZE in trcConfig.h");
 800f1ce:	484b      	ldr	r0, [pc, #300]	; (800f2fc <prvTraceCreateSymbolTableEntry+0x180>)
 800f1d0:	f7ff fd9c 	bl	800ed0c <prvTraceError>
		ret = 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	81fb      	strh	r3, [r7, #14]
 800f1d8:	e085      	b.n	800f2e6 <prvTraceCreateSymbolTableEntry+0x16a>
	else
	{

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 800f1da:	4b47      	ldr	r3, [pc, #284]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	78fb      	ldrb	r3, [r7, #3]
 800f1e0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	4413      	add	r3, r2
 800f1e8:	8899      	ldrh	r1, [r3, #4]
		RecorderDataPtr->SymbolTable.symbytes
 800f1ea:	4b43      	ldr	r3, [pc, #268]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f1ec:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 800f1ee:	4b42      	ldr	r3, [pc, #264]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] & 0x00FF);
 800f1f6:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex] =
 800f1f8:	4413      	add	r3, r2
 800f1fa:	460a      	mov	r2, r1
 800f1fc:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 800f200:	4b3d      	ldr	r3, [pc, #244]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	4413      	add	r3, r2
 800f20e:	889b      	ldrh	r3, [r3, #4]
 800f210:	0a1b      	lsrs	r3, r3, #8
 800f212:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 800f214:	4b38      	ldr	r3, [pc, #224]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f216:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 800f218:	4b37      	ldr	r3, [pc, #220]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800f220:	3301      	adds	r3, #1
			(uint8_t)(RecorderDataPtr->SymbolTable.latestEntryOfChecksum[ crc6 ] / 0x100);
 800f222:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 1] =
 800f224:	4413      	add	r3, r2
 800f226:	460a      	mov	r2, r1
 800f228:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
 800f22c:	4b32      	ldr	r3, [pc, #200]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f22e:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 800f230:	4b31      	ldr	r3, [pc, #196]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800f238:	3302      	adds	r3, #2
			(uint8_t)(channel & 0x00FF);
 800f23a:	8839      	ldrh	r1, [r7, #0]
 800f23c:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 2] =
 800f23e:	4413      	add	r3, r2
 800f240:	460a      	mov	r2, r1
 800f242:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		RecorderDataPtr->SymbolTable.symbytes
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
			(uint8_t)(channel / 0x100);
 800f246:	883b      	ldrh	r3, [r7, #0]
 800f248:	0a1b      	lsrs	r3, r3, #8
 800f24a:	b299      	uxth	r1, r3
		RecorderDataPtr->SymbolTable.symbytes
 800f24c:	4b2a      	ldr	r3, [pc, #168]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f24e:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 800f250:	4b29      	ldr	r3, [pc, #164]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800f258:	3303      	adds	r3, #3
			(uint8_t)(channel / 0x100);
 800f25a:	b2c9      	uxtb	r1, r1
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 3] =
 800f25c:	4413      	add	r3, r2
 800f25e:	460a      	mov	r2, r1
 800f260:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* set name (bytes 4...4+len-1) */
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800f264:	4b24      	ldr	r3, [pc, #144]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f266:	681a      	ldr	r2, [r3, #0]
			[ RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4]), name, len);
 800f268:	4b23      	ldr	r3, [pc, #140]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800f270:	3304      	adds	r3, #4
		prvStrncpy((char*)&(RecorderDataPtr->SymbolTable.symbytes
 800f272:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800f276:	4413      	add	r3, r2
 800f278:	3304      	adds	r3, #4
 800f27a:	78ba      	ldrb	r2, [r7, #2]
 800f27c:	6879      	ldr	r1, [r7, #4]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fc72 	bl	800eb68 <prvStrncpy>

		/* Set zero termination (at offset 4+len) */
		RecorderDataPtr->SymbolTable.symbytes
 800f284:	4b1c      	ldr	r3, [pc, #112]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f286:	681a      	ldr	r2, [r3, #0]
			[RecorderDataPtr->SymbolTable.nextFreeSymbolIndex + 4 + len] = '\0';
 800f288:	4b1b      	ldr	r3, [pc, #108]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
 800f290:	78bb      	ldrb	r3, [r7, #2]
 800f292:	440b      	add	r3, r1
 800f294:	3304      	adds	r3, #4
 800f296:	4413      	add	r3, r2
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554

		/* store index of entry (for return value, and as head of LL[crc6]) */
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 800f29e:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f8d3 1550 	ldr.w	r1, [r3, #1360]	; 0x550
		RecorderDataPtr->SymbolTable.latestEntryOfChecksum
 800f2a6:	4b14      	ldr	r3, [pc, #80]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f2a8:	681a      	ldr	r2, [r3, #0]
			[ crc6 ] = (uint16_t)RecorderDataPtr->SymbolTable.nextFreeSymbolIndex;
 800f2aa:	78fb      	ldrb	r3, [r7, #3]
 800f2ac:	b289      	uxth	r1, r1
 800f2ae:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800f2b2:	005b      	lsls	r3, r3, #1
 800f2b4:	4413      	add	r3, r2
 800f2b6:	460a      	mov	r2, r1
 800f2b8:	809a      	strh	r2, [r3, #4]

		RecorderDataPtr->SymbolTable.nextFreeSymbolIndex += (uint32_t) (len + 5);
 800f2ba:	4b0f      	ldr	r3, [pc, #60]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
 800f2c2:	78bb      	ldrb	r3, [r7, #2]
 800f2c4:	441a      	add	r2, r3
 800f2c6:	4b0c      	ldr	r3, [pc, #48]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3205      	adds	r2, #5
 800f2cc:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

		ret = (uint16_t)(RecorderDataPtr->SymbolTable.nextFreeSymbolIndex - (uint8_t)(len + 5));
 800f2d0:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <prvTraceCreateSymbolTableEntry+0x17c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	78bb      	ldrb	r3, [r7, #2]
 800f2dc:	3305      	adds	r3, #5
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800f2e6:	89fb      	ldrh	r3, [r7, #14]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	080210c0 	.word	0x080210c0
 800f2f4:	080210fc 	.word	0x080210fc
 800f2f8:	2000835c 	.word	0x2000835c
 800f2fc:	08021134 	.word	0x08021134

0800f300 <prvTraceGetChecksum>:
 *
 * Calculates a simple 6-bit checksum from a string, used to index the string
 * for fast symbol table lookup.
 ******************************************************************************/
void prvTraceGetChecksum(const char *pname, uint8_t* pcrc, uint8_t* plength)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
	unsigned char c;
	int length = 1;		/* Should be 1 to account for '\0' */
 800f30c:	2301      	movs	r3, #1
 800f30e:	61fb      	str	r3, [r7, #28]
	int crc = 0;
 800f310:	2300      	movs	r3, #0
 800f312:	61bb      	str	r3, [r7, #24]

	TRACE_ASSERT(pname != NULL, "prvTraceGetChecksum: pname == NULL", TRC_UNUSED);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d103      	bne.n	800f322 <prvTraceGetChecksum+0x22>
 800f31a:	4819      	ldr	r0, [pc, #100]	; (800f380 <prvTraceGetChecksum+0x80>)
 800f31c:	f7ff fcf6 	bl	800ed0c <prvTraceError>
 800f320:	e02b      	b.n	800f37a <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(pcrc != NULL, "prvTraceGetChecksum: pcrc == NULL", TRC_UNUSED);
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d103      	bne.n	800f330 <prvTraceGetChecksum+0x30>
 800f328:	4816      	ldr	r0, [pc, #88]	; (800f384 <prvTraceGetChecksum+0x84>)
 800f32a:	f7ff fcef 	bl	800ed0c <prvTraceError>
 800f32e:	e024      	b.n	800f37a <prvTraceGetChecksum+0x7a>
	TRACE_ASSERT(plength != NULL, "prvTraceGetChecksum: plength == NULL", TRC_UNUSED);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d103      	bne.n	800f33e <prvTraceGetChecksum+0x3e>
 800f336:	4814      	ldr	r0, [pc, #80]	; (800f388 <prvTraceGetChecksum+0x88>)
 800f338:	f7ff fce8 	bl	800ed0c <prvTraceError>
 800f33c:	e01d      	b.n	800f37a <prvTraceGetChecksum+0x7a>

	if (pname != (const char *) 0)
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00f      	beq.n	800f364 <prvTraceGetChecksum+0x64>
	{
		for (; (c = (unsigned char) *pname++) != '\0';)
 800f344:	e006      	b.n	800f354 <prvTraceGetChecksum+0x54>
		{
			crc += c;
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	4413      	add	r3, r2
 800f34c:	61bb      	str	r3, [r7, #24]
			length++;
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	3301      	adds	r3, #1
 800f352:	61fb      	str	r3, [r7, #28]
		for (; (c = (unsigned char) *pname++) != '\0';)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	1c5a      	adds	r2, r3, #1
 800f358:	60fa      	str	r2, [r7, #12]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	75fb      	strb	r3, [r7, #23]
 800f35e:	7dfb      	ldrb	r3, [r7, #23]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d1f0      	bne.n	800f346 <prvTraceGetChecksum+0x46>
		}
	}
	*pcrc = (uint8_t)(crc & 0x3F);
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	b2db      	uxtb	r3, r3
 800f368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f36c:	b2da      	uxtb	r2, r3
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	701a      	strb	r2, [r3, #0]
	*plength = (uint8_t)length;
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	b2da      	uxtb	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	701a      	strb	r2, [r3, #0]
}
 800f37a:	3720      	adds	r7, #32
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	0802117c 	.word	0x0802117c
 800f384:	080211b0 	.word	0x080211b0
 800f388:	080211e0 	.word	0x080211e0

0800f38c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b087      	sub	sp, #28
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 800f398:	2300      	movs	r3, #0
 800f39a:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 800f39c:	2300      	movs	r3, #0
 800f39e:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 800f3a0:	4b1a      	ldr	r3, [pc, #104]	; (800f40c <prvTracePortGetTimeStamp+0x80>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d107      	bne.n	800f3b8 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d028      	beq.n	800f400 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 800f3ae:	4b18      	ldr	r3, [pc, #96]	; (800f410 <prvTracePortGetTimeStamp+0x84>)
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	601a      	str	r2, [r3, #0]
		return;
 800f3b6:	e023      	b.n	800f400 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 800f3b8:	4b16      	ldr	r3, [pc, #88]	; (800f414 <prvTracePortGetTimeStamp+0x88>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 800f3be:	4b16      	ldr	r3, [pc, #88]	; (800f418 <prvTracePortGetTimeStamp+0x8c>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	697a      	ldr	r2, [r7, #20]
 800f3c4:	1ad2      	subs	r2, r2, r3
 800f3c6:	4b15      	ldr	r3, [pc, #84]	; (800f41c <prvTracePortGetTimeStamp+0x90>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	089b      	lsrs	r3, r3, #2
 800f3d2:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	f003 0303 	and.w	r3, r3, #3
 800f3da:	4a10      	ldr	r2, [pc, #64]	; (800f41c <prvTracePortGetTimeStamp+0x90>)
 800f3dc:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 800f3de:	4b0c      	ldr	r3, [pc, #48]	; (800f410 <prvTracePortGetTimeStamp+0x84>)
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	4a0a      	ldr	r2, [pc, #40]	; (800f410 <prvTracePortGetTimeStamp+0x84>)
 800f3e8:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d003      	beq.n	800f3f8 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 800f3f0:	4b07      	ldr	r3, [pc, #28]	; (800f410 <prvTracePortGetTimeStamp+0x84>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 800f3f8:	4a07      	ldr	r2, [pc, #28]	; (800f418 <prvTracePortGetTimeStamp+0x8c>)
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	6013      	str	r3, [r2, #0]
 800f3fe:	e000      	b.n	800f402 <prvTracePortGetTimeStamp+0x76>
		return;
 800f400:	bf00      	nop
}
 800f402:	371c      	adds	r7, #28
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	2000048c 	.word	0x2000048c
 800f410:	20000490 	.word	0x20000490
 800f414:	e0001004 	.word	0xe0001004
 800f418:	200004b4 	.word	0x200004b4
 800f41c:	200004b8 	.word	0x200004b8

0800f420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f424:	4b0e      	ldr	r3, [pc, #56]	; (800f460 <HAL_Init+0x40>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a0d      	ldr	r2, [pc, #52]	; (800f460 <HAL_Init+0x40>)
 800f42a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f42e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f430:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <HAL_Init+0x40>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a0a      	ldr	r2, [pc, #40]	; (800f460 <HAL_Init+0x40>)
 800f436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f43a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f43c:	4b08      	ldr	r3, [pc, #32]	; (800f460 <HAL_Init+0x40>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4a07      	ldr	r2, [pc, #28]	; (800f460 <HAL_Init+0x40>)
 800f442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f448:	2003      	movs	r0, #3
 800f44a:	f000 ff84 	bl	8010356 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f44e:	2000      	movs	r0, #0
 800f450:	f7fc fdfe 	bl	800c050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f454:	f7f3 f82a 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f458:	2300      	movs	r3, #0
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	40023c00 	.word	0x40023c00

0800f464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f464:	b480      	push	{r7}
 800f466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f468:	4b06      	ldr	r3, [pc, #24]	; (800f484 <HAL_IncTick+0x20>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
 800f46e:	4b06      	ldr	r3, [pc, #24]	; (800f488 <HAL_IncTick+0x24>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4413      	add	r3, r2
 800f474:	4a04      	ldr	r2, [pc, #16]	; (800f488 <HAL_IncTick+0x24>)
 800f476:	6013      	str	r3, [r2, #0]
}
 800f478:	bf00      	nop
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	2000027c 	.word	0x2000027c
 800f488:	20009d00 	.word	0x20009d00

0800f48c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f48c:	b480      	push	{r7}
 800f48e:	af00      	add	r7, sp, #0
  return uwTick;
 800f490:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <HAL_GetTick+0x14>)
 800f492:	681b      	ldr	r3, [r3, #0]
}
 800f494:	4618      	mov	r0, r3
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	20009d00 	.word	0x20009d00

0800f4a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e0ed      	b.n	800f692 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d102      	bne.n	800f4c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7f3 f81e 	bl	8002504 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f022 0202 	bic.w	r2, r2, #2
 800f4d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f4d8:	f7ff ffd8 	bl	800f48c <HAL_GetTick>
 800f4dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800f4de:	e012      	b.n	800f506 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800f4e0:	f7ff ffd4 	bl	800f48c <HAL_GetTick>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	2b0a      	cmp	r3, #10
 800f4ec:	d90b      	bls.n	800f506 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2205      	movs	r2, #5
 800f4fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800f502:	2301      	movs	r3, #1
 800f504:	e0c5      	b.n	800f692 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	f003 0302 	and.w	r3, r3, #2
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1e5      	bne.n	800f4e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f042 0201 	orr.w	r2, r2, #1
 800f522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f524:	f7ff ffb2 	bl	800f48c <HAL_GetTick>
 800f528:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800f52a:	e012      	b.n	800f552 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800f52c:	f7ff ffae 	bl	800f48c <HAL_GetTick>
 800f530:	4602      	mov	r2, r0
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	1ad3      	subs	r3, r2, r3
 800f536:	2b0a      	cmp	r3, #10
 800f538:	d90b      	bls.n	800f552 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2205      	movs	r2, #5
 800f54a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e09f      	b.n	800f692 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	f003 0301 	and.w	r3, r3, #1
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0e5      	beq.n	800f52c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	7e1b      	ldrb	r3, [r3, #24]
 800f564:	2b01      	cmp	r3, #1
 800f566:	d108      	bne.n	800f57a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f576:	601a      	str	r2, [r3, #0]
 800f578:	e007      	b.n	800f58a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f588:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	7e5b      	ldrb	r3, [r3, #25]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d108      	bne.n	800f5a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	e007      	b.n	800f5b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f5b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	7e9b      	ldrb	r3, [r3, #26]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d108      	bne.n	800f5ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f042 0220 	orr.w	r2, r2, #32
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	e007      	b.n	800f5de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f022 0220 	bic.w	r2, r2, #32
 800f5dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	7edb      	ldrb	r3, [r3, #27]
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d108      	bne.n	800f5f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f022 0210 	bic.w	r2, r2, #16
 800f5f4:	601a      	str	r2, [r3, #0]
 800f5f6:	e007      	b.n	800f608 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f042 0210 	orr.w	r2, r2, #16
 800f606:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	7f1b      	ldrb	r3, [r3, #28]
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d108      	bne.n	800f622 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f042 0208 	orr.w	r2, r2, #8
 800f61e:	601a      	str	r2, [r3, #0]
 800f620:	e007      	b.n	800f632 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f022 0208 	bic.w	r2, r2, #8
 800f630:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	7f5b      	ldrb	r3, [r3, #29]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d108      	bne.n	800f64c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f042 0204 	orr.w	r2, r2, #4
 800f648:	601a      	str	r2, [r3, #0]
 800f64a:	e007      	b.n	800f65c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f022 0204 	bic.w	r2, r2, #4
 800f65a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	689a      	ldr	r2, [r3, #8]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	431a      	orrs	r2, r3
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	431a      	orrs	r2, r3
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	695b      	ldr	r3, [r3, #20]
 800f670:	ea42 0103 	orr.w	r1, r2, r3
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	430a      	orrs	r2, r1
 800f680:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b087      	sub	sp, #28
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800f6b4:	7cfb      	ldrb	r3, [r7, #19]
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d003      	beq.n	800f6c2 <HAL_CAN_ConfigFilter+0x26>
 800f6ba:	7cfb      	ldrb	r3, [r7, #19]
 800f6bc:	2b02      	cmp	r3, #2
 800f6be:	f040 80be 	bne.w	800f83e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800f6c2:	4b65      	ldr	r3, [pc, #404]	; (800f858 <HAL_CAN_ConfigFilter+0x1bc>)
 800f6c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f6cc:	f043 0201 	orr.w	r2, r3, #1
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f6dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f0:	021b      	lsls	r3, r3, #8
 800f6f2:	431a      	orrs	r2, r3
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	695b      	ldr	r3, [r3, #20]
 800f6fe:	f003 031f 	and.w	r3, r3, #31
 800f702:	2201      	movs	r2, #1
 800f704:	fa02 f303 	lsl.w	r3, r2, r3
 800f708:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	43db      	mvns	r3, r3
 800f714:	401a      	ands	r2, r3
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	69db      	ldr	r3, [r3, #28]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d123      	bne.n	800f76c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	43db      	mvns	r3, r3
 800f72e:	401a      	ands	r2, r3
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800f746:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	3248      	adds	r2, #72	; 0x48
 800f74c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800f760:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800f762:	6979      	ldr	r1, [r7, #20]
 800f764:	3348      	adds	r3, #72	; 0x48
 800f766:	00db      	lsls	r3, r3, #3
 800f768:	440b      	add	r3, r1
 800f76a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	69db      	ldr	r3, [r3, #28]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d122      	bne.n	800f7ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	431a      	orrs	r2, r3
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800f794:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	3248      	adds	r2, #72	; 0x48
 800f79a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	689b      	ldr	r3, [r3, #8]
 800f7a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800f7ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800f7b0:	6979      	ldr	r1, [r7, #20]
 800f7b2:	3348      	adds	r3, #72	; 0x48
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	440b      	add	r3, r1
 800f7b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	699b      	ldr	r3, [r3, #24]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d109      	bne.n	800f7d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	43db      	mvns	r3, r3
 800f7cc:	401a      	ands	r2, r3
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800f7d4:	e007      	b.n	800f7e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	431a      	orrs	r2, r3
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	691b      	ldr	r3, [r3, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d109      	bne.n	800f802 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	43db      	mvns	r3, r3
 800f7f8:	401a      	ands	r2, r3
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800f800:	e007      	b.n	800f812 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	431a      	orrs	r2, r3
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	6a1b      	ldr	r3, [r3, #32]
 800f816:	2b01      	cmp	r3, #1
 800f818:	d107      	bne.n	800f82a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	431a      	orrs	r2, r3
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f830:	f023 0201 	bic.w	r2, r3, #1
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800f83a:	2300      	movs	r3, #0
 800f83c:	e006      	b.n	800f84c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f842:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f84a:	2301      	movs	r3, #1
  }
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	371c      	adds	r7, #28
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	40006400 	.word	0x40006400

0800f85c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d12e      	bne.n	800f8ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2202      	movs	r2, #2
 800f874:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f022 0201 	bic.w	r2, r2, #1
 800f886:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f888:	f7ff fe00 	bl	800f48c <HAL_GetTick>
 800f88c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800f88e:	e012      	b.n	800f8b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800f890:	f7ff fdfc 	bl	800f48c <HAL_GetTick>
 800f894:	4602      	mov	r2, r0
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	2b0a      	cmp	r3, #10
 800f89c:	d90b      	bls.n	800f8b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2205      	movs	r2, #5
 800f8ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e012      	b.n	800f8dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	f003 0301 	and.w	r3, r3, #1
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1e5      	bne.n	800f890 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	e006      	b.n	800f8dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f8da:	2301      	movs	r3, #1
  }
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b089      	sub	sp, #36	; 0x24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
 800f8f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f8f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800f902:	7ffb      	ldrb	r3, [r7, #31]
 800f904:	2b01      	cmp	r3, #1
 800f906:	d003      	beq.n	800f910 <HAL_CAN_AddTxMessage+0x2c>
 800f908:	7ffb      	ldrb	r3, [r7, #31]
 800f90a:	2b02      	cmp	r3, #2
 800f90c:	f040 80b8 	bne.w	800fa80 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f916:	2b00      	cmp	r3, #0
 800f918:	d10a      	bne.n	800f930 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800f920:	2b00      	cmp	r3, #0
 800f922:	d105      	bne.n	800f930 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f000 80a0 	beq.w	800fa70 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	0e1b      	lsrs	r3, r3, #24
 800f934:	f003 0303 	and.w	r3, r3, #3
 800f938:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d907      	bls.n	800f950 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f944:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e09e      	b.n	800fa8e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800f950:	2201      	movs	r2, #1
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	409a      	lsls	r2, r3
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10d      	bne.n	800f97e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800f96c:	68f9      	ldr	r1, [r7, #12]
 800f96e:	6809      	ldr	r1, [r1, #0]
 800f970:	431a      	orrs	r2, r3
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	3318      	adds	r3, #24
 800f976:	011b      	lsls	r3, r3, #4
 800f978:	440b      	add	r3, r1
 800f97a:	601a      	str	r2, [r3, #0]
 800f97c:	e00f      	b.n	800f99e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800f988:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800f98e:	68f9      	ldr	r1, [r7, #12]
 800f990:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800f992:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	3318      	adds	r3, #24
 800f998:	011b      	lsls	r3, r3, #4
 800f99a:	440b      	add	r3, r1
 800f99c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6819      	ldr	r1, [r3, #0]
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	691a      	ldr	r2, [r3, #16]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	3318      	adds	r3, #24
 800f9aa:	011b      	lsls	r3, r3, #4
 800f9ac:	440b      	add	r3, r1
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	7d1b      	ldrb	r3, [r3, #20]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d111      	bne.n	800f9de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	3318      	adds	r3, #24
 800f9c2:	011b      	lsls	r3, r3, #4
 800f9c4:	4413      	add	r3, r2
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	6811      	ldr	r1, [r2, #0]
 800f9ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	3318      	adds	r3, #24
 800f9d6:	011b      	lsls	r3, r3, #4
 800f9d8:	440b      	add	r3, r1
 800f9da:	3304      	adds	r3, #4
 800f9dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	3307      	adds	r3, #7
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	061a      	lsls	r2, r3, #24
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3306      	adds	r3, #6
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	041b      	lsls	r3, r3, #16
 800f9ee:	431a      	orrs	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3305      	adds	r3, #5
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	021b      	lsls	r3, r3, #8
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	3204      	adds	r2, #4
 800f9fe:	7812      	ldrb	r2, [r2, #0]
 800fa00:	4610      	mov	r0, r2
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	6811      	ldr	r1, [r2, #0]
 800fa06:	ea43 0200 	orr.w	r2, r3, r0
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	011b      	lsls	r3, r3, #4
 800fa0e:	440b      	add	r3, r1
 800fa10:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800fa14:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3303      	adds	r3, #3
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	061a      	lsls	r2, r3, #24
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	3302      	adds	r3, #2
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	041b      	lsls	r3, r3, #16
 800fa26:	431a      	orrs	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	021b      	lsls	r3, r3, #8
 800fa30:	4313      	orrs	r3, r2
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	7812      	ldrb	r2, [r2, #0]
 800fa36:	4610      	mov	r0, r2
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	6811      	ldr	r1, [r2, #0]
 800fa3c:	ea43 0200 	orr.w	r2, r3, r0
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	011b      	lsls	r3, r3, #4
 800fa44:	440b      	add	r3, r1
 800fa46:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800fa4a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	3318      	adds	r3, #24
 800fa54:	011b      	lsls	r3, r3, #4
 800fa56:	4413      	add	r3, r2
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	68fa      	ldr	r2, [r7, #12]
 800fa5c:	6811      	ldr	r1, [r2, #0]
 800fa5e:	f043 0201 	orr.w	r2, r3, #1
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	3318      	adds	r3, #24
 800fa66:	011b      	lsls	r3, r3, #4
 800fa68:	440b      	add	r3, r1
 800fa6a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	e00e      	b.n	800fa8e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e006      	b.n	800fa8e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800fa8c:	2301      	movs	r3, #1
  }
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3724      	adds	r7, #36	; 0x24
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	b085      	sub	sp, #20
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800faa2:	2300      	movs	r3, #0
 800faa4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800faac:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800faae:	7afb      	ldrb	r3, [r7, #11]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d002      	beq.n	800faba <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800fab4:	7afb      	ldrb	r3, [r7, #11]
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	d11d      	bne.n	800faf6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	3301      	adds	r3, #1
 800facc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	689b      	ldr	r3, [r3, #8]
 800fad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	3301      	adds	r3, #1
 800fae0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800faec:	2b00      	cmp	r3, #0
 800faee:	d002      	beq.n	800faf6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3301      	adds	r3, #1
 800faf4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800faf6:	68fb      	ldr	r3, [r7, #12]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800fb04:	b480      	push	{r7}
 800fb06:	b087      	sub	sp, #28
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fb18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d003      	beq.n	800fb28 <HAL_CAN_GetRxMessage+0x24>
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	f040 80f3 	bne.w	800fd0e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10e      	bne.n	800fb4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	f003 0303 	and.w	r3, r3, #3
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d116      	bne.n	800fb6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e0e7      	b.n	800fd1c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	f003 0303 	and.w	r3, r3, #3
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d107      	bne.n	800fb6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800fb66:	2301      	movs	r3, #1
 800fb68:	e0d8      	b.n	800fd1c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	331b      	adds	r3, #27
 800fb72:	011b      	lsls	r3, r3, #4
 800fb74:	4413      	add	r3, r2
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f003 0204 	and.w	r2, r3, #4
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	689b      	ldr	r3, [r3, #8]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10c      	bne.n	800fba2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	331b      	adds	r3, #27
 800fb90:	011b      	lsls	r3, r3, #4
 800fb92:	4413      	add	r3, r2
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	0d5b      	lsrs	r3, r3, #21
 800fb98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	e00b      	b.n	800fbba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	331b      	adds	r3, #27
 800fbaa:	011b      	lsls	r3, r3, #4
 800fbac:	4413      	add	r3, r2
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	08db      	lsrs	r3, r3, #3
 800fbb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	331b      	adds	r3, #27
 800fbc2:	011b      	lsls	r3, r3, #4
 800fbc4:	4413      	add	r3, r2
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f003 0202 	and.w	r2, r3, #2
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	331b      	adds	r3, #27
 800fbd8:	011b      	lsls	r3, r3, #4
 800fbda:	4413      	add	r3, r2
 800fbdc:	3304      	adds	r3, #4
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f003 020f 	and.w	r2, r3, #15
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	331b      	adds	r3, #27
 800fbf0:	011b      	lsls	r3, r3, #4
 800fbf2:	4413      	add	r3, r2
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	0a1b      	lsrs	r3, r3, #8
 800fbfa:	b2da      	uxtb	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	331b      	adds	r3, #27
 800fc08:	011b      	lsls	r3, r3, #4
 800fc0a:	4413      	add	r3, r2
 800fc0c:	3304      	adds	r3, #4
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	0c1b      	lsrs	r3, r3, #16
 800fc12:	b29a      	uxth	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	011b      	lsls	r3, r3, #4
 800fc20:	4413      	add	r3, r2
 800fc22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	b2da      	uxtb	r2, r3
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	011b      	lsls	r3, r3, #4
 800fc36:	4413      	add	r3, r2
 800fc38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	0a1a      	lsrs	r2, r3, #8
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	3301      	adds	r3, #1
 800fc44:	b2d2      	uxtb	r2, r2
 800fc46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	4413      	add	r3, r2
 800fc52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	0c1a      	lsrs	r2, r3, #16
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	3302      	adds	r3, #2
 800fc5e:	b2d2      	uxtb	r2, r2
 800fc60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	011b      	lsls	r3, r3, #4
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	0e1a      	lsrs	r2, r3, #24
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	3303      	adds	r3, #3
 800fc78:	b2d2      	uxtb	r2, r2
 800fc7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	011b      	lsls	r3, r3, #4
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	3304      	adds	r3, #4
 800fc90:	b2d2      	uxtb	r2, r2
 800fc92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	011b      	lsls	r3, r3, #4
 800fc9c:	4413      	add	r3, r2
 800fc9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	0a1a      	lsrs	r2, r3, #8
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	3305      	adds	r3, #5
 800fcaa:	b2d2      	uxtb	r2, r2
 800fcac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	011b      	lsls	r3, r3, #4
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	0c1a      	lsrs	r2, r3, #16
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	3306      	adds	r3, #6
 800fcc4:	b2d2      	uxtb	r2, r2
 800fcc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	011b      	lsls	r3, r3, #4
 800fcd0:	4413      	add	r3, r2
 800fcd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	0e1a      	lsrs	r2, r3, #24
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	3307      	adds	r3, #7
 800fcde:	b2d2      	uxtb	r2, r2
 800fce0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d108      	bne.n	800fcfa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68da      	ldr	r2, [r3, #12]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f042 0220 	orr.w	r2, r2, #32
 800fcf6:	60da      	str	r2, [r3, #12]
 800fcf8:	e007      	b.n	800fd0a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	691a      	ldr	r2, [r3, #16]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	f042 0220 	orr.w	r2, r2, #32
 800fd08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	e006      	b.n	800fd1c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
  }
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	371c      	adds	r7, #28
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d002      	beq.n	800fd46 <HAL_CAN_ActivateNotification+0x1e>
 800fd40:	7bfb      	ldrb	r3, [r7, #15]
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d109      	bne.n	800fd5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	6959      	ldr	r1, [r3, #20]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	430a      	orrs	r2, r1
 800fd54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	e006      	b.n	800fd68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800fd66:	2301      	movs	r3, #1
  }
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08a      	sub	sp, #40	; 0x28
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	699b      	ldr	r3, [r3, #24]
 800fdae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	f003 0301 	and.w	r3, r3, #1
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d07c      	beq.n	800feb4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	f003 0301 	and.w	r3, r3, #1
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d023      	beq.n	800fe0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	f003 0302 	and.w	r3, r3, #2
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d003      	beq.n	800fdde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f000 f983 	bl	80100e2 <HAL_CAN_TxMailbox0CompleteCallback>
 800fddc:	e016      	b.n	800fe0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	f003 0304 	and.w	r3, r3, #4
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d004      	beq.n	800fdf2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fdee:	627b      	str	r3, [r7, #36]	; 0x24
 800fdf0:	e00c      	b.n	800fe0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	f003 0308 	and.w	r3, r3, #8
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d004      	beq.n	800fe06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fe02:	627b      	str	r3, [r7, #36]	; 0x24
 800fe04:	e002      	b.n	800fe0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f989 	bl	801011e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d024      	beq.n	800fe60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 f963 	bl	80100f6 <HAL_CAN_TxMailbox1CompleteCallback>
 800fe30:	e016      	b.n	800fe60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d004      	beq.n	800fe46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe42:	627b      	str	r3, [r7, #36]	; 0x24
 800fe44:	e00c      	b.n	800fe60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d004      	beq.n	800fe5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe56:	627b      	str	r3, [r7, #36]	; 0x24
 800fe58:	e002      	b.n	800fe60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f969 	bl	8010132 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d024      	beq.n	800feb4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fe72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d003      	beq.n	800fe86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f943 	bl	801010a <HAL_CAN_TxMailbox2CompleteCallback>
 800fe84:	e016      	b.n	800feb4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800fe86:	69bb      	ldr	r3, [r7, #24]
 800fe88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d004      	beq.n	800fe9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe96:	627b      	str	r3, [r7, #36]	; 0x24
 800fe98:	e00c      	b.n	800feb4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d004      	beq.n	800feae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
 800feac:	e002      	b.n	800feb4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 f949 	bl	8010146 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	f003 0308 	and.w	r3, r3, #8
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00c      	beq.n	800fed8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	f003 0310 	and.w	r3, r3, #16
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d007      	beq.n	800fed8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2210      	movs	r2, #16
 800fed6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800fed8:	6a3b      	ldr	r3, [r7, #32]
 800feda:	f003 0304 	and.w	r3, r3, #4
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00b      	beq.n	800fefa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	f003 0308 	and.w	r3, r3, #8
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d006      	beq.n	800fefa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2208      	movs	r2, #8
 800fef2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f930 	bl	801015a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800fefa:	6a3b      	ldr	r3, [r7, #32]
 800fefc:	f003 0302 	and.w	r3, r3, #2
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d009      	beq.n	800ff18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	f003 0303 	and.w	r3, r3, #3
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d002      	beq.n	800ff18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7fb f842 	bl	800af9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800ff18:	6a3b      	ldr	r3, [r7, #32]
 800ff1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00c      	beq.n	800ff3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	f003 0310 	and.w	r3, r3, #16
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d007      	beq.n	800ff3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2210      	movs	r2, #16
 800ff3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800ff3c:	6a3b      	ldr	r3, [r7, #32]
 800ff3e:	f003 0320 	and.w	r3, r3, #32
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00b      	beq.n	800ff5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	f003 0308 	and.w	r3, r3, #8
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d006      	beq.n	800ff5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2208      	movs	r2, #8
 800ff56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f908 	bl	801016e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800ff5e:	6a3b      	ldr	r3, [r7, #32]
 800ff60:	f003 0310 	and.w	r3, r3, #16
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d009      	beq.n	800ff7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	f003 0303 	and.w	r3, r3, #3
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d002      	beq.n	800ff7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7fb f900 	bl	800b17c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00b      	beq.n	800ff9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	f003 0310 	and.w	r3, r3, #16
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d006      	beq.n	800ff9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2210      	movs	r2, #16
 800ff96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f8f2 	bl	8010182 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800ff9e:	6a3b      	ldr	r3, [r7, #32]
 800ffa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00b      	beq.n	800ffc0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	f003 0308 	and.w	r3, r3, #8
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d006      	beq.n	800ffc0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2208      	movs	r2, #8
 800ffb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 f8eb 	bl	8010196 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800ffc0:	6a3b      	ldr	r3, [r7, #32]
 800ffc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d07b      	beq.n	80100c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	f003 0304 	and.w	r3, r3, #4
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d072      	beq.n	80100ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ffd4:	6a3b      	ldr	r3, [r7, #32]
 800ffd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d008      	beq.n	800fff0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d003      	beq.n	800fff0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffea:	f043 0301 	orr.w	r3, r3, #1
 800ffee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800fff0:	6a3b      	ldr	r3, [r7, #32]
 800fff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d008      	beq.n	801000c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8010000:	2b00      	cmp	r3, #0
 8010002:	d003      	beq.n	801000c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8010004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010012:	2b00      	cmp	r3, #0
 8010014:	d008      	beq.n	8010028 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801001c:	2b00      	cmp	r3, #0
 801001e:	d003      	beq.n	8010028 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	f043 0304 	orr.w	r3, r3, #4
 8010026:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8010028:	6a3b      	ldr	r3, [r7, #32]
 801002a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801002e:	2b00      	cmp	r3, #0
 8010030:	d043      	beq.n	80100ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8010038:	2b00      	cmp	r3, #0
 801003a:	d03e      	beq.n	80100ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010042:	2b60      	cmp	r3, #96	; 0x60
 8010044:	d02b      	beq.n	801009e <HAL_CAN_IRQHandler+0x32a>
 8010046:	2b60      	cmp	r3, #96	; 0x60
 8010048:	d82e      	bhi.n	80100a8 <HAL_CAN_IRQHandler+0x334>
 801004a:	2b50      	cmp	r3, #80	; 0x50
 801004c:	d022      	beq.n	8010094 <HAL_CAN_IRQHandler+0x320>
 801004e:	2b50      	cmp	r3, #80	; 0x50
 8010050:	d82a      	bhi.n	80100a8 <HAL_CAN_IRQHandler+0x334>
 8010052:	2b40      	cmp	r3, #64	; 0x40
 8010054:	d019      	beq.n	801008a <HAL_CAN_IRQHandler+0x316>
 8010056:	2b40      	cmp	r3, #64	; 0x40
 8010058:	d826      	bhi.n	80100a8 <HAL_CAN_IRQHandler+0x334>
 801005a:	2b30      	cmp	r3, #48	; 0x30
 801005c:	d010      	beq.n	8010080 <HAL_CAN_IRQHandler+0x30c>
 801005e:	2b30      	cmp	r3, #48	; 0x30
 8010060:	d822      	bhi.n	80100a8 <HAL_CAN_IRQHandler+0x334>
 8010062:	2b10      	cmp	r3, #16
 8010064:	d002      	beq.n	801006c <HAL_CAN_IRQHandler+0x2f8>
 8010066:	2b20      	cmp	r3, #32
 8010068:	d005      	beq.n	8010076 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801006a:	e01d      	b.n	80100a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 801006c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006e:	f043 0308 	orr.w	r3, r3, #8
 8010072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010074:	e019      	b.n	80100aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8010076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010078:	f043 0310 	orr.w	r3, r3, #16
 801007c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801007e:	e014      	b.n	80100aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8010080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010082:	f043 0320 	orr.w	r3, r3, #32
 8010086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010088:	e00f      	b.n	80100aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 801008a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8010092:	e00a      	b.n	80100aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801009a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801009c:	e005      	b.n	80100aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 801009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80100a6:	e000      	b.n	80100aa <HAL_CAN_IRQHandler+0x336>
            break;
 80100a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	699a      	ldr	r2, [r3, #24]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80100b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2204      	movs	r2, #4
 80100c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80100c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d008      	beq.n	80100da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ce:	431a      	orrs	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f868 	bl	80101aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80100da:	bf00      	nop
 80100dc:	3728      	adds	r7, #40	; 0x28
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80100e2:	b480      	push	{r7}
 80100e4:	b083      	sub	sp, #12
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80100ea:	bf00      	nop
 80100ec:	370c      	adds	r7, #12
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80100fe:	bf00      	nop
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801010a:	b480      	push	{r7}
 801010c:	b083      	sub	sp, #12
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8010112:	bf00      	nop
 8010114:	370c      	adds	r7, #12
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801011e:	b480      	push	{r7}
 8010120:	b083      	sub	sp, #12
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8010126:	bf00      	nop
 8010128:	370c      	adds	r7, #12
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr

08010132 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010132:	b480      	push	{r7}
 8010134:	b083      	sub	sp, #12
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801013a:	bf00      	nop
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8010146:	b480      	push	{r7}
 8010148:	b083      	sub	sp, #12
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801014e:	bf00      	nop
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801015a:	b480      	push	{r7}
 801015c:	b083      	sub	sp, #12
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8010162:	bf00      	nop
 8010164:	370c      	adds	r7, #12
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr

0801016e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801016e:	b480      	push	{r7}
 8010170:	b083      	sub	sp, #12
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8010176:	bf00      	nop
 8010178:	370c      	adds	r7, #12
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr

08010182 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8010182:	b480      	push	{r7}
 8010184:	b083      	sub	sp, #12
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801018a:	bf00      	nop
 801018c:	370c      	adds	r7, #12
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr

08010196 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8010196:	b480      	push	{r7}
 8010198:	b083      	sub	sp, #12
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801019e:	bf00      	nop
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80101aa:	b480      	push	{r7}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80101b2:	bf00      	nop
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
	...

080101c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b085      	sub	sp, #20
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80101d0:	4b0c      	ldr	r3, [pc, #48]	; (8010204 <__NVIC_SetPriorityGrouping+0x44>)
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80101dc:	4013      	ands	r3, r2
 80101de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80101e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80101ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80101f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80101f2:	4a04      	ldr	r2, [pc, #16]	; (8010204 <__NVIC_SetPriorityGrouping+0x44>)
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	60d3      	str	r3, [r2, #12]
}
 80101f8:	bf00      	nop
 80101fa:	3714      	adds	r7, #20
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr
 8010204:	e000ed00 	.word	0xe000ed00

08010208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010208:	b480      	push	{r7}
 801020a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801020c:	4b04      	ldr	r3, [pc, #16]	; (8010220 <__NVIC_GetPriorityGrouping+0x18>)
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	0a1b      	lsrs	r3, r3, #8
 8010212:	f003 0307 	and.w	r3, r3, #7
}
 8010216:	4618      	mov	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	e000ed00 	.word	0xe000ed00

08010224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010232:	2b00      	cmp	r3, #0
 8010234:	db0b      	blt.n	801024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010236:	79fb      	ldrb	r3, [r7, #7]
 8010238:	f003 021f 	and.w	r2, r3, #31
 801023c:	4907      	ldr	r1, [pc, #28]	; (801025c <__NVIC_EnableIRQ+0x38>)
 801023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010242:	095b      	lsrs	r3, r3, #5
 8010244:	2001      	movs	r0, #1
 8010246:	fa00 f202 	lsl.w	r2, r0, r2
 801024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801024e:	bf00      	nop
 8010250:	370c      	adds	r7, #12
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	e000e100 	.word	0xe000e100

08010260 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	4603      	mov	r3, r0
 8010268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801026a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801026e:	2b00      	cmp	r3, #0
 8010270:	db0c      	blt.n	801028c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	f003 021f 	and.w	r2, r3, #31
 8010278:	4907      	ldr	r1, [pc, #28]	; (8010298 <__NVIC_ClearPendingIRQ+0x38>)
 801027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801027e:	095b      	lsrs	r3, r3, #5
 8010280:	2001      	movs	r0, #1
 8010282:	fa00 f202 	lsl.w	r2, r0, r2
 8010286:	3360      	adds	r3, #96	; 0x60
 8010288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801028c:	bf00      	nop
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr
 8010298:	e000e100 	.word	0xe000e100

0801029c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801029c:	b480      	push	{r7}
 801029e:	b083      	sub	sp, #12
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	6039      	str	r1, [r7, #0]
 80102a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80102a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	db0a      	blt.n	80102c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	490c      	ldr	r1, [pc, #48]	; (80102e8 <__NVIC_SetPriority+0x4c>)
 80102b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102ba:	0112      	lsls	r2, r2, #4
 80102bc:	b2d2      	uxtb	r2, r2
 80102be:	440b      	add	r3, r1
 80102c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80102c4:	e00a      	b.n	80102dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	4908      	ldr	r1, [pc, #32]	; (80102ec <__NVIC_SetPriority+0x50>)
 80102cc:	79fb      	ldrb	r3, [r7, #7]
 80102ce:	f003 030f 	and.w	r3, r3, #15
 80102d2:	3b04      	subs	r3, #4
 80102d4:	0112      	lsls	r2, r2, #4
 80102d6:	b2d2      	uxtb	r2, r2
 80102d8:	440b      	add	r3, r1
 80102da:	761a      	strb	r2, [r3, #24]
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr
 80102e8:	e000e100 	.word	0xe000e100
 80102ec:	e000ed00 	.word	0xe000ed00

080102f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b089      	sub	sp, #36	; 0x24
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f003 0307 	and.w	r3, r3, #7
 8010302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	f1c3 0307 	rsb	r3, r3, #7
 801030a:	2b04      	cmp	r3, #4
 801030c:	bf28      	it	cs
 801030e:	2304      	movcs	r3, #4
 8010310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	3304      	adds	r3, #4
 8010316:	2b06      	cmp	r3, #6
 8010318:	d902      	bls.n	8010320 <NVIC_EncodePriority+0x30>
 801031a:	69fb      	ldr	r3, [r7, #28]
 801031c:	3b03      	subs	r3, #3
 801031e:	e000      	b.n	8010322 <NVIC_EncodePriority+0x32>
 8010320:	2300      	movs	r3, #0
 8010322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	fa02 f303 	lsl.w	r3, r2, r3
 801032e:	43da      	mvns	r2, r3
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	401a      	ands	r2, r3
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	fa01 f303 	lsl.w	r3, r1, r3
 8010342:	43d9      	mvns	r1, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010348:	4313      	orrs	r3, r2
         );
}
 801034a:	4618      	mov	r0, r3
 801034c:	3724      	adds	r7, #36	; 0x24
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr

08010356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b082      	sub	sp, #8
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff ff2e 	bl	80101c0 <__NVIC_SetPriorityGrouping>
}
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801037a:	2300      	movs	r3, #0
 801037c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801037e:	f7ff ff43 	bl	8010208 <__NVIC_GetPriorityGrouping>
 8010382:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	68b9      	ldr	r1, [r7, #8]
 8010388:	6978      	ldr	r0, [r7, #20]
 801038a:	f7ff ffb1 	bl	80102f0 <NVIC_EncodePriority>
 801038e:	4602      	mov	r2, r0
 8010390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010394:	4611      	mov	r1, r2
 8010396:	4618      	mov	r0, r3
 8010398:	f7ff ff80 	bl	801029c <__NVIC_SetPriority>
}
 801039c:	bf00      	nop
 801039e:	3718      	adds	r7, #24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	4603      	mov	r3, r0
 80103ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80103ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7ff ff36 	bl	8010224 <__NVIC_EnableIRQ>
}
 80103b8:	bf00      	nop
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	4603      	mov	r3, r0
 80103c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80103ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff ff46 	bl	8010260 <__NVIC_ClearPendingIRQ>
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80103e4:	2300      	movs	r3, #0
 80103e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80103e8:	f7ff f850 	bl	800f48c <HAL_GetTick>
 80103ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80103f4:	2301      	movs	r3, #1
 80103f6:	e099      	b.n	801052c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2202      	movs	r2, #2
 8010404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f022 0201 	bic.w	r2, r2, #1
 8010416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010418:	e00f      	b.n	801043a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801041a:	f7ff f837 	bl	800f48c <HAL_GetTick>
 801041e:	4602      	mov	r2, r0
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	1ad3      	subs	r3, r2, r3
 8010424:	2b05      	cmp	r3, #5
 8010426:	d908      	bls.n	801043a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2220      	movs	r2, #32
 801042c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2203      	movs	r2, #3
 8010432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010436:	2303      	movs	r3, #3
 8010438:	e078      	b.n	801052c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f003 0301 	and.w	r3, r3, #1
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1e8      	bne.n	801041a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010450:	697a      	ldr	r2, [r7, #20]
 8010452:	4b38      	ldr	r3, [pc, #224]	; (8010534 <HAL_DMA_Init+0x158>)
 8010454:	4013      	ands	r3, r2
 8010456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	691b      	ldr	r3, [r3, #16]
 801046c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	699b      	ldr	r3, [r3, #24]
 8010478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801047e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a1b      	ldr	r3, [r3, #32]
 8010484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010486:	697a      	ldr	r2, [r7, #20]
 8010488:	4313      	orrs	r3, r2
 801048a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010490:	2b04      	cmp	r3, #4
 8010492:	d107      	bne.n	80104a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801049c:	4313      	orrs	r3, r2
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	695b      	ldr	r3, [r3, #20]
 80104b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	f023 0307 	bic.w	r3, r3, #7
 80104ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c0:	697a      	ldr	r2, [r7, #20]
 80104c2:	4313      	orrs	r3, r2
 80104c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ca:	2b04      	cmp	r3, #4
 80104cc:	d117      	bne.n	80104fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d00e      	beq.n	80104fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 fa9f 	bl	8010a24 <DMA_CheckFifoParam>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d008      	beq.n	80104fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2240      	movs	r2, #64	; 0x40
 80104f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2201      	movs	r2, #1
 80104f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80104fa:	2301      	movs	r3, #1
 80104fc:	e016      	b.n	801052c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	697a      	ldr	r2, [r7, #20]
 8010504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 fa56 	bl	80109b8 <DMA_CalcBaseAndBitshift>
 801050c:	4603      	mov	r3, r0
 801050e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010514:	223f      	movs	r2, #63	; 0x3f
 8010516:	409a      	lsls	r2, r3
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2201      	movs	r2, #1
 8010526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801052a:	2300      	movs	r3, #0
}
 801052c:	4618      	mov	r0, r3
 801052e:	3718      	adds	r7, #24
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	f010803f 	.word	0xf010803f

08010538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
 8010544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010546:	2300      	movs	r3, #0
 8010548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801054e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010556:	2b01      	cmp	r3, #1
 8010558:	d101      	bne.n	801055e <HAL_DMA_Start_IT+0x26>
 801055a:	2302      	movs	r3, #2
 801055c:	e040      	b.n	80105e0 <HAL_DMA_Start_IT+0xa8>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801056c:	b2db      	uxtb	r3, r3
 801056e:	2b01      	cmp	r3, #1
 8010570:	d12f      	bne.n	80105d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2202      	movs	r2, #2
 8010576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2200      	movs	r2, #0
 801057e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	687a      	ldr	r2, [r7, #4]
 8010584:	68b9      	ldr	r1, [r7, #8]
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f000 f9e8 	bl	801095c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010590:	223f      	movs	r2, #63	; 0x3f
 8010592:	409a      	lsls	r2, r3
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f042 0216 	orr.w	r2, r2, #22
 80105a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d007      	beq.n	80105c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f042 0208 	orr.w	r2, r2, #8
 80105be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f042 0201 	orr.w	r2, r2, #1
 80105ce:	601a      	str	r2, [r3, #0]
 80105d0:	e005      	b.n	80105de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80105da:	2302      	movs	r3, #2
 80105dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80105de:	7dfb      	ldrb	r3, [r7, #23]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3718      	adds	r7, #24
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d004      	beq.n	8010606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2280      	movs	r2, #128	; 0x80
 8010600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010602:	2301      	movs	r3, #1
 8010604:	e00c      	b.n	8010620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2205      	movs	r2, #5
 801060a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f022 0201 	bic.w	r2, r2, #1
 801061c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b086      	sub	sp, #24
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010634:	2300      	movs	r3, #0
 8010636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010638:	4b92      	ldr	r3, [pc, #584]	; (8010884 <HAL_DMA_IRQHandler+0x258>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a92      	ldr	r2, [pc, #584]	; (8010888 <HAL_DMA_IRQHandler+0x25c>)
 801063e:	fba2 2303 	umull	r2, r3, r2, r3
 8010642:	0a9b      	lsrs	r3, r3, #10
 8010644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801064a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010656:	2208      	movs	r2, #8
 8010658:	409a      	lsls	r2, r3
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	4013      	ands	r3, r2
 801065e:	2b00      	cmp	r3, #0
 8010660:	d01a      	beq.n	8010698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b00      	cmp	r3, #0
 801066e:	d013      	beq.n	8010698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f022 0204 	bic.w	r2, r2, #4
 801067e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010684:	2208      	movs	r2, #8
 8010686:	409a      	lsls	r2, r3
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010690:	f043 0201 	orr.w	r2, r3, #1
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801069c:	2201      	movs	r2, #1
 801069e:	409a      	lsls	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	4013      	ands	r3, r2
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d012      	beq.n	80106ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	695b      	ldr	r3, [r3, #20]
 80106ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106ba:	2201      	movs	r2, #1
 80106bc:	409a      	lsls	r2, r3
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106c6:	f043 0202 	orr.w	r2, r3, #2
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106d2:	2204      	movs	r2, #4
 80106d4:	409a      	lsls	r2, r3
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	4013      	ands	r3, r2
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d012      	beq.n	8010704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f003 0302 	and.w	r3, r3, #2
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00b      	beq.n	8010704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106f0:	2204      	movs	r2, #4
 80106f2:	409a      	lsls	r2, r3
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106fc:	f043 0204 	orr.w	r2, r3, #4
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010708:	2210      	movs	r2, #16
 801070a:	409a      	lsls	r2, r3
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	4013      	ands	r3, r2
 8010710:	2b00      	cmp	r3, #0
 8010712:	d043      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f003 0308 	and.w	r3, r3, #8
 801071e:	2b00      	cmp	r3, #0
 8010720:	d03c      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010726:	2210      	movs	r2, #16
 8010728:	409a      	lsls	r2, r3
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d018      	beq.n	801076e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010746:	2b00      	cmp	r3, #0
 8010748:	d108      	bne.n	801075c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801074e:	2b00      	cmp	r3, #0
 8010750:	d024      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	4798      	blx	r3
 801075a:	e01f      	b.n	801079c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010760:	2b00      	cmp	r3, #0
 8010762:	d01b      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	4798      	blx	r3
 801076c:	e016      	b.n	801079c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010778:	2b00      	cmp	r3, #0
 801077a:	d107      	bne.n	801078c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f022 0208 	bic.w	r2, r2, #8
 801078a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d003      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107a0:	2220      	movs	r2, #32
 80107a2:	409a      	lsls	r2, r3
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4013      	ands	r3, r2
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f000 808e 	beq.w	80108ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f003 0310 	and.w	r3, r3, #16
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f000 8086 	beq.w	80108ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107c2:	2220      	movs	r2, #32
 80107c4:	409a      	lsls	r2, r3
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b05      	cmp	r3, #5
 80107d4:	d136      	bne.n	8010844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f022 0216 	bic.w	r2, r2, #22
 80107e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	695a      	ldr	r2, [r3, #20]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d103      	bne.n	8010806 <HAL_DMA_IRQHandler+0x1da>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010802:	2b00      	cmp	r3, #0
 8010804:	d007      	beq.n	8010816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f022 0208 	bic.w	r2, r2, #8
 8010814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801081a:	223f      	movs	r2, #63	; 0x3f
 801081c:	409a      	lsls	r2, r3
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010836:	2b00      	cmp	r3, #0
 8010838:	d07d      	beq.n	8010936 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	4798      	blx	r3
        }
        return;
 8010842:	e078      	b.n	8010936 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801084e:	2b00      	cmp	r3, #0
 8010850:	d01c      	beq.n	801088c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801085c:	2b00      	cmp	r3, #0
 801085e:	d108      	bne.n	8010872 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010864:	2b00      	cmp	r3, #0
 8010866:	d030      	beq.n	80108ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	4798      	blx	r3
 8010870:	e02b      	b.n	80108ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010876:	2b00      	cmp	r3, #0
 8010878:	d027      	beq.n	80108ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	4798      	blx	r3
 8010882:	e022      	b.n	80108ca <HAL_DMA_IRQHandler+0x29e>
 8010884:	20000268 	.word	0x20000268
 8010888:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10f      	bne.n	80108ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f022 0210 	bic.w	r2, r2, #16
 80108a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2201      	movs	r2, #1
 80108b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d003      	beq.n	80108ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d032      	beq.n	8010938 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d022      	beq.n	8010924 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2205      	movs	r2, #5
 80108e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f022 0201 	bic.w	r2, r2, #1
 80108f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	3301      	adds	r3, #1
 80108fa:	60bb      	str	r3, [r7, #8]
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d307      	bcc.n	8010912 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	2b00      	cmp	r3, #0
 801090e:	d1f2      	bne.n	80108f6 <HAL_DMA_IRQHandler+0x2ca>
 8010910:	e000      	b.n	8010914 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8010912:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2201      	movs	r2, #1
 8010920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010928:	2b00      	cmp	r3, #0
 801092a:	d005      	beq.n	8010938 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	4798      	blx	r3
 8010934:	e000      	b.n	8010938 <HAL_DMA_IRQHandler+0x30c>
        return;
 8010936:	bf00      	nop
    }
  }
}
 8010938:	3718      	adds	r7, #24
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop

08010940 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801094e:	b2db      	uxtb	r3, r3
}
 8010950:	4618      	mov	r0, r3
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095a:	4770      	bx	lr

0801095c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801095c:	b480      	push	{r7}
 801095e:	b085      	sub	sp, #20
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	683a      	ldr	r2, [r7, #0]
 8010980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	2b40      	cmp	r3, #64	; 0x40
 8010988:	d108      	bne.n	801099c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801099a:	e007      	b.n	80109ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	60da      	str	r2, [r3, #12]
}
 80109ac:	bf00      	nop
 80109ae:	3714      	adds	r7, #20
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	3b10      	subs	r3, #16
 80109c8:	4a14      	ldr	r2, [pc, #80]	; (8010a1c <DMA_CalcBaseAndBitshift+0x64>)
 80109ca:	fba2 2303 	umull	r2, r3, r2, r3
 80109ce:	091b      	lsrs	r3, r3, #4
 80109d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80109d2:	4a13      	ldr	r2, [pc, #76]	; (8010a20 <DMA_CalcBaseAndBitshift+0x68>)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	4413      	add	r3, r2
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	461a      	mov	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b03      	cmp	r3, #3
 80109e4:	d909      	bls.n	80109fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80109ee:	f023 0303 	bic.w	r3, r3, #3
 80109f2:	1d1a      	adds	r2, r3, #4
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	659a      	str	r2, [r3, #88]	; 0x58
 80109f8:	e007      	b.n	8010a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010a02:	f023 0303 	bic.w	r3, r3, #3
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3714      	adds	r7, #20
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	aaaaaaab 	.word	0xaaaaaaab
 8010a20:	0802129c 	.word	0x0802129c

08010a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	699b      	ldr	r3, [r3, #24]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d11f      	bne.n	8010a7e <DMA_CheckFifoParam+0x5a>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2b03      	cmp	r3, #3
 8010a42:	d856      	bhi.n	8010af2 <DMA_CheckFifoParam+0xce>
 8010a44:	a201      	add	r2, pc, #4	; (adr r2, 8010a4c <DMA_CheckFifoParam+0x28>)
 8010a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4a:	bf00      	nop
 8010a4c:	08010a5d 	.word	0x08010a5d
 8010a50:	08010a6f 	.word	0x08010a6f
 8010a54:	08010a5d 	.word	0x08010a5d
 8010a58:	08010af3 	.word	0x08010af3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d046      	beq.n	8010af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a6c:	e043      	b.n	8010af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010a76:	d140      	bne.n	8010afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a7c:	e03d      	b.n	8010afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a86:	d121      	bne.n	8010acc <DMA_CheckFifoParam+0xa8>
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2b03      	cmp	r3, #3
 8010a8c:	d837      	bhi.n	8010afe <DMA_CheckFifoParam+0xda>
 8010a8e:	a201      	add	r2, pc, #4	; (adr r2, 8010a94 <DMA_CheckFifoParam+0x70>)
 8010a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a94:	08010aa5 	.word	0x08010aa5
 8010a98:	08010aab 	.word	0x08010aab
 8010a9c:	08010aa5 	.word	0x08010aa5
 8010aa0:	08010abd 	.word	0x08010abd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8010aa8:	e030      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d025      	beq.n	8010b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010aba:	e022      	b.n	8010b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010ac4:	d11f      	bne.n	8010b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010aca:	e01c      	b.n	8010b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	d903      	bls.n	8010ada <DMA_CheckFifoParam+0xb6>
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	2b03      	cmp	r3, #3
 8010ad6:	d003      	beq.n	8010ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010ad8:	e018      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8010ada:	2301      	movs	r3, #1
 8010adc:	73fb      	strb	r3, [r7, #15]
      break;
 8010ade:	e015      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00e      	beq.n	8010b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	73fb      	strb	r3, [r7, #15]
      break;
 8010af0:	e00b      	b.n	8010b0a <DMA_CheckFifoParam+0xe6>
      break;
 8010af2:	bf00      	nop
 8010af4:	e00a      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      break;
 8010af6:	bf00      	nop
 8010af8:	e008      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      break;
 8010afa:	bf00      	nop
 8010afc:	e006      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      break;
 8010afe:	bf00      	nop
 8010b00:	e004      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      break;
 8010b02:	bf00      	nop
 8010b04:	e002      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8010b06:	bf00      	nop
 8010b08:	e000      	b.n	8010b0c <DMA_CheckFifoParam+0xe8>
      break;
 8010b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8010b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop

08010b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b089      	sub	sp, #36	; 0x24
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010b26:	2300      	movs	r3, #0
 8010b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010b32:	2300      	movs	r3, #0
 8010b34:	61fb      	str	r3, [r7, #28]
 8010b36:	e16b      	b.n	8010e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010b38:	2201      	movs	r2, #1
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	697a      	ldr	r2, [r7, #20]
 8010b48:	4013      	ands	r3, r2
 8010b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010b4c:	693a      	ldr	r2, [r7, #16]
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	f040 815a 	bne.w	8010e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d00b      	beq.n	8010b76 <HAL_GPIO_Init+0x5a>
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	2b02      	cmp	r3, #2
 8010b64:	d007      	beq.n	8010b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010b6a:	2b11      	cmp	r3, #17
 8010b6c:	d003      	beq.n	8010b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	2b12      	cmp	r3, #18
 8010b74:	d130      	bne.n	8010bd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	005b      	lsls	r3, r3, #1
 8010b80:	2203      	movs	r2, #3
 8010b82:	fa02 f303 	lsl.w	r3, r2, r3
 8010b86:	43db      	mvns	r3, r3
 8010b88:	69ba      	ldr	r2, [r7, #24]
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	68da      	ldr	r2, [r3, #12]
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	fa02 f303 	lsl.w	r3, r2, r3
 8010b9a:	69ba      	ldr	r2, [r7, #24]
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	69ba      	ldr	r2, [r7, #24]
 8010ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010bac:	2201      	movs	r2, #1
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb4:	43db      	mvns	r3, r3
 8010bb6:	69ba      	ldr	r2, [r7, #24]
 8010bb8:	4013      	ands	r3, r2
 8010bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	091b      	lsrs	r3, r3, #4
 8010bc2:	f003 0201 	and.w	r2, r3, #1
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bcc:	69ba      	ldr	r2, [r7, #24]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	69ba      	ldr	r2, [r7, #24]
 8010bd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	2203      	movs	r2, #3
 8010be4:	fa02 f303 	lsl.w	r3, r2, r3
 8010be8:	43db      	mvns	r3, r3
 8010bea:	69ba      	ldr	r2, [r7, #24]
 8010bec:	4013      	ands	r3, r2
 8010bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	689a      	ldr	r2, [r3, #8]
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	005b      	lsls	r3, r3, #1
 8010bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bfc:	69ba      	ldr	r2, [r7, #24]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	69ba      	ldr	r2, [r7, #24]
 8010c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d003      	beq.n	8010c18 <HAL_GPIO_Init+0xfc>
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	2b12      	cmp	r3, #18
 8010c16:	d123      	bne.n	8010c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	08da      	lsrs	r2, r3, #3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	3208      	adds	r2, #8
 8010c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	f003 0307 	and.w	r3, r3, #7
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	220f      	movs	r2, #15
 8010c30:	fa02 f303 	lsl.w	r3, r2, r3
 8010c34:	43db      	mvns	r3, r3
 8010c36:	69ba      	ldr	r2, [r7, #24]
 8010c38:	4013      	ands	r3, r2
 8010c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	691a      	ldr	r2, [r3, #16]
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	f003 0307 	and.w	r3, r3, #7
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	fa02 f303 	lsl.w	r3, r2, r3
 8010c4c:	69ba      	ldr	r2, [r7, #24]
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	08da      	lsrs	r2, r3, #3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	3208      	adds	r2, #8
 8010c5a:	69b9      	ldr	r1, [r7, #24]
 8010c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	005b      	lsls	r3, r3, #1
 8010c6a:	2203      	movs	r2, #3
 8010c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c70:	43db      	mvns	r3, r3
 8010c72:	69ba      	ldr	r2, [r7, #24]
 8010c74:	4013      	ands	r3, r2
 8010c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	f003 0203 	and.w	r2, r3, #3
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	005b      	lsls	r3, r3, #1
 8010c84:	fa02 f303 	lsl.w	r3, r2, r3
 8010c88:	69ba      	ldr	r2, [r7, #24]
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	69ba      	ldr	r2, [r7, #24]
 8010c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 80b4 	beq.w	8010e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	60fb      	str	r3, [r7, #12]
 8010ca6:	4b60      	ldr	r3, [pc, #384]	; (8010e28 <HAL_GPIO_Init+0x30c>)
 8010ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010caa:	4a5f      	ldr	r2, [pc, #380]	; (8010e28 <HAL_GPIO_Init+0x30c>)
 8010cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8010cb2:	4b5d      	ldr	r3, [pc, #372]	; (8010e28 <HAL_GPIO_Init+0x30c>)
 8010cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cba:	60fb      	str	r3, [r7, #12]
 8010cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010cbe:	4a5b      	ldr	r2, [pc, #364]	; (8010e2c <HAL_GPIO_Init+0x310>)
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	089b      	lsrs	r3, r3, #2
 8010cc4:	3302      	adds	r3, #2
 8010cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	f003 0303 	and.w	r3, r3, #3
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	220f      	movs	r2, #15
 8010cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8010cda:	43db      	mvns	r3, r3
 8010cdc:	69ba      	ldr	r2, [r7, #24]
 8010cde:	4013      	ands	r3, r2
 8010ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4a52      	ldr	r2, [pc, #328]	; (8010e30 <HAL_GPIO_Init+0x314>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d02b      	beq.n	8010d42 <HAL_GPIO_Init+0x226>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a51      	ldr	r2, [pc, #324]	; (8010e34 <HAL_GPIO_Init+0x318>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d025      	beq.n	8010d3e <HAL_GPIO_Init+0x222>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4a50      	ldr	r2, [pc, #320]	; (8010e38 <HAL_GPIO_Init+0x31c>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d01f      	beq.n	8010d3a <HAL_GPIO_Init+0x21e>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4a4f      	ldr	r2, [pc, #316]	; (8010e3c <HAL_GPIO_Init+0x320>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d019      	beq.n	8010d36 <HAL_GPIO_Init+0x21a>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4a4e      	ldr	r2, [pc, #312]	; (8010e40 <HAL_GPIO_Init+0x324>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d013      	beq.n	8010d32 <HAL_GPIO_Init+0x216>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4a4d      	ldr	r2, [pc, #308]	; (8010e44 <HAL_GPIO_Init+0x328>)
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d00d      	beq.n	8010d2e <HAL_GPIO_Init+0x212>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4a4c      	ldr	r2, [pc, #304]	; (8010e48 <HAL_GPIO_Init+0x32c>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d007      	beq.n	8010d2a <HAL_GPIO_Init+0x20e>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4a4b      	ldr	r2, [pc, #300]	; (8010e4c <HAL_GPIO_Init+0x330>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d101      	bne.n	8010d26 <HAL_GPIO_Init+0x20a>
 8010d22:	2307      	movs	r3, #7
 8010d24:	e00e      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d26:	2308      	movs	r3, #8
 8010d28:	e00c      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d2a:	2306      	movs	r3, #6
 8010d2c:	e00a      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d2e:	2305      	movs	r3, #5
 8010d30:	e008      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d32:	2304      	movs	r3, #4
 8010d34:	e006      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d36:	2303      	movs	r3, #3
 8010d38:	e004      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d3a:	2302      	movs	r3, #2
 8010d3c:	e002      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e000      	b.n	8010d44 <HAL_GPIO_Init+0x228>
 8010d42:	2300      	movs	r3, #0
 8010d44:	69fa      	ldr	r2, [r7, #28]
 8010d46:	f002 0203 	and.w	r2, r2, #3
 8010d4a:	0092      	lsls	r2, r2, #2
 8010d4c:	4093      	lsls	r3, r2
 8010d4e:	69ba      	ldr	r2, [r7, #24]
 8010d50:	4313      	orrs	r3, r2
 8010d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010d54:	4935      	ldr	r1, [pc, #212]	; (8010e2c <HAL_GPIO_Init+0x310>)
 8010d56:	69fb      	ldr	r3, [r7, #28]
 8010d58:	089b      	lsrs	r3, r3, #2
 8010d5a:	3302      	adds	r3, #2
 8010d5c:	69ba      	ldr	r2, [r7, #24]
 8010d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010d62:	4b3b      	ldr	r3, [pc, #236]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	43db      	mvns	r3, r3
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	4013      	ands	r3, r2
 8010d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d003      	beq.n	8010d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	4313      	orrs	r3, r2
 8010d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010d86:	4a32      	ldr	r2, [pc, #200]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010d8c:	4b30      	ldr	r3, [pc, #192]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	43db      	mvns	r3, r3
 8010d96:	69ba      	ldr	r2, [r7, #24]
 8010d98:	4013      	ands	r3, r2
 8010d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d003      	beq.n	8010db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010da8:	69ba      	ldr	r2, [r7, #24]
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010db0:	4a27      	ldr	r2, [pc, #156]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010db6:	4b26      	ldr	r3, [pc, #152]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010db8:	689b      	ldr	r3, [r3, #8]
 8010dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	43db      	mvns	r3, r3
 8010dc0:	69ba      	ldr	r2, [r7, #24]
 8010dc2:	4013      	ands	r3, r2
 8010dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010dd2:	69ba      	ldr	r2, [r7, #24]
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010dda:	4a1d      	ldr	r2, [pc, #116]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010de0:	4b1b      	ldr	r3, [pc, #108]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	43db      	mvns	r3, r3
 8010dea:	69ba      	ldr	r2, [r7, #24]
 8010dec:	4013      	ands	r3, r2
 8010dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d003      	beq.n	8010e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010dfc:	69ba      	ldr	r2, [r7, #24]
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	4313      	orrs	r3, r2
 8010e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010e04:	4a12      	ldr	r2, [pc, #72]	; (8010e50 <HAL_GPIO_Init+0x334>)
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	61fb      	str	r3, [r7, #28]
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	2b0f      	cmp	r3, #15
 8010e14:	f67f ae90 	bls.w	8010b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010e18:	bf00      	nop
 8010e1a:	bf00      	nop
 8010e1c:	3724      	adds	r7, #36	; 0x24
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop
 8010e28:	40023800 	.word	0x40023800
 8010e2c:	40013800 	.word	0x40013800
 8010e30:	40020000 	.word	0x40020000
 8010e34:	40020400 	.word	0x40020400
 8010e38:	40020800 	.word	0x40020800
 8010e3c:	40020c00 	.word	0x40020c00
 8010e40:	40021000 	.word	0x40021000
 8010e44:	40021400 	.word	0x40021400
 8010e48:	40021800 	.word	0x40021800
 8010e4c:	40021c00 	.word	0x40021c00
 8010e50:	40013c00 	.word	0x40013c00

08010e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	460b      	mov	r3, r1
 8010e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	691a      	ldr	r2, [r3, #16]
 8010e64:	887b      	ldrh	r3, [r7, #2]
 8010e66:	4013      	ands	r3, r2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d002      	beq.n	8010e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	73fb      	strb	r3, [r7, #15]
 8010e70:	e001      	b.n	8010e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010e72:	2300      	movs	r3, #0
 8010e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3714      	adds	r7, #20
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	807b      	strh	r3, [r7, #2]
 8010e90:	4613      	mov	r3, r2
 8010e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010e94:	787b      	ldrb	r3, [r7, #1]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d003      	beq.n	8010ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010e9a:	887a      	ldrh	r2, [r7, #2]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010ea0:	e003      	b.n	8010eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010ea2:	887b      	ldrh	r3, [r7, #2]
 8010ea4:	041a      	lsls	r2, r3, #16
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	619a      	str	r2, [r3, #24]
}
 8010eaa:	bf00      	nop
 8010eac:	370c      	adds	r7, #12
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b088      	sub	sp, #32
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ece:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ed6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ede:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8010ee0:	7bfb      	ldrb	r3, [r7, #15]
 8010ee2:	2b10      	cmp	r3, #16
 8010ee4:	d003      	beq.n	8010eee <HAL_I2C_EV_IRQHandler+0x38>
 8010ee6:	7bfb      	ldrb	r3, [r7, #15]
 8010ee8:	2b40      	cmp	r3, #64	; 0x40
 8010eea:	f040 80bd 	bne.w	8011068 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	699b      	ldr	r3, [r3, #24]
 8010ef4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	695b      	ldr	r3, [r3, #20]
 8010efc:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	f003 0301 	and.w	r3, r3, #1
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d10d      	bne.n	8010f24 <HAL_I2C_EV_IRQHandler+0x6e>
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010f0e:	d003      	beq.n	8010f18 <HAL_I2C_EV_IRQHandler+0x62>
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010f16:	d101      	bne.n	8010f1c <HAL_I2C_EV_IRQHandler+0x66>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e000      	b.n	8010f1e <HAL_I2C_EV_IRQHandler+0x68>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	f000 812e 	beq.w	8011180 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	f003 0301 	and.w	r3, r3, #1
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00c      	beq.n	8010f48 <HAL_I2C_EV_IRQHandler+0x92>
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	0a5b      	lsrs	r3, r3, #9
 8010f32:	f003 0301 	and.w	r3, r3, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d006      	beq.n	8010f48 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f001 fc54 	bl	80127e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 fd62 	bl	8011a0a <I2C_Master_SB>
 8010f46:	e08e      	b.n	8011066 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	08db      	lsrs	r3, r3, #3
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d009      	beq.n	8010f68 <HAL_I2C_EV_IRQHandler+0xb2>
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	0a5b      	lsrs	r3, r3, #9
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d003      	beq.n	8010f68 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 fdd8 	bl	8011b16 <I2C_Master_ADD10>
 8010f66:	e07e      	b.n	8011066 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	085b      	lsrs	r3, r3, #1
 8010f6c:	f003 0301 	and.w	r3, r3, #1
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d009      	beq.n	8010f88 <HAL_I2C_EV_IRQHandler+0xd2>
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	0a5b      	lsrs	r3, r3, #9
 8010f78:	f003 0301 	and.w	r3, r3, #1
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d003      	beq.n	8010f88 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 fdf2 	bl	8011b6a <I2C_Master_ADDR>
 8010f86:	e06e      	b.n	8011066 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	089b      	lsrs	r3, r3, #2
 8010f8c:	f003 0301 	and.w	r3, r3, #1
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d037      	beq.n	8011004 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010fa2:	f000 80ef 	beq.w	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	09db      	lsrs	r3, r3, #7
 8010faa:	f003 0301 	and.w	r3, r3, #1
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00f      	beq.n	8010fd2 <HAL_I2C_EV_IRQHandler+0x11c>
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	0a9b      	lsrs	r3, r3, #10
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d009      	beq.n	8010fd2 <HAL_I2C_EV_IRQHandler+0x11c>
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	089b      	lsrs	r3, r3, #2
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d103      	bne.n	8010fd2 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 f9ef 	bl	80113ae <I2C_MasterTransmit_TXE>
 8010fd0:	e049      	b.n	8011066 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	089b      	lsrs	r3, r3, #2
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 80d2 	beq.w	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	0a5b      	lsrs	r3, r3, #9
 8010fe4:	f003 0301 	and.w	r3, r3, #1
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	f000 80cb 	beq.w	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8010fee:	7bfb      	ldrb	r3, [r7, #15]
 8010ff0:	2b10      	cmp	r3, #16
 8010ff2:	d103      	bne.n	8010ffc <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fa76 	bl	80114e6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8010ffa:	e0c3      	b.n	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 fada 	bl	80115b6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011002:	e0bf      	b.n	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801100e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011012:	f000 80b7 	beq.w	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	099b      	lsrs	r3, r3, #6
 801101a:	f003 0301 	and.w	r3, r3, #1
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00f      	beq.n	8011042 <HAL_I2C_EV_IRQHandler+0x18c>
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	0a9b      	lsrs	r3, r3, #10
 8011026:	f003 0301 	and.w	r3, r3, #1
 801102a:	2b00      	cmp	r3, #0
 801102c:	d009      	beq.n	8011042 <HAL_I2C_EV_IRQHandler+0x18c>
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	089b      	lsrs	r3, r3, #2
 8011032:	f003 0301 	and.w	r3, r3, #1
 8011036:	2b00      	cmp	r3, #0
 8011038:	d103      	bne.n	8011042 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f000 fb4a 	bl	80116d4 <I2C_MasterReceive_RXNE>
 8011040:	e011      	b.n	8011066 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011042:	69fb      	ldr	r3, [r7, #28]
 8011044:	089b      	lsrs	r3, r3, #2
 8011046:	f003 0301 	and.w	r3, r3, #1
 801104a:	2b00      	cmp	r3, #0
 801104c:	f000 809a 	beq.w	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	0a5b      	lsrs	r3, r3, #9
 8011054:	f003 0301 	and.w	r3, r3, #1
 8011058:	2b00      	cmp	r3, #0
 801105a:	f000 8093 	beq.w	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fbe9 	bl	8011836 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011064:	e08e      	b.n	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
 8011066:	e08d      	b.n	8011184 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106c:	2b00      	cmp	r3, #0
 801106e:	d004      	beq.n	801107a <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	695b      	ldr	r3, [r3, #20]
 8011076:	61fb      	str	r3, [r7, #28]
 8011078:	e007      	b.n	801108a <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	699b      	ldr	r3, [r3, #24]
 8011080:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	695b      	ldr	r3, [r3, #20]
 8011088:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	085b      	lsrs	r3, r3, #1
 801108e:	f003 0301 	and.w	r3, r3, #1
 8011092:	2b00      	cmp	r3, #0
 8011094:	d012      	beq.n	80110bc <HAL_I2C_EV_IRQHandler+0x206>
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	0a5b      	lsrs	r3, r3, #9
 801109a:	f003 0301 	and.w	r3, r3, #1
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00c      	beq.n	80110bc <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d003      	beq.n	80110b2 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	699b      	ldr	r3, [r3, #24]
 80110b0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80110b2:	69b9      	ldr	r1, [r7, #24]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f000 ffa7 	bl	8012008 <I2C_Slave_ADDR>
 80110ba:	e066      	b.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	091b      	lsrs	r3, r3, #4
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d009      	beq.n	80110dc <HAL_I2C_EV_IRQHandler+0x226>
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	0a5b      	lsrs	r3, r3, #9
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d003      	beq.n	80110dc <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 ffdb 	bl	8012090 <I2C_Slave_STOPF>
 80110da:	e056      	b.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80110dc:	7bbb      	ldrb	r3, [r7, #14]
 80110de:	2b21      	cmp	r3, #33	; 0x21
 80110e0:	d002      	beq.n	80110e8 <HAL_I2C_EV_IRQHandler+0x232>
 80110e2:	7bbb      	ldrb	r3, [r7, #14]
 80110e4:	2b29      	cmp	r3, #41	; 0x29
 80110e6:	d125      	bne.n	8011134 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	09db      	lsrs	r3, r3, #7
 80110ec:	f003 0301 	and.w	r3, r3, #1
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d00f      	beq.n	8011114 <HAL_I2C_EV_IRQHandler+0x25e>
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	0a9b      	lsrs	r3, r3, #10
 80110f8:	f003 0301 	and.w	r3, r3, #1
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d009      	beq.n	8011114 <HAL_I2C_EV_IRQHandler+0x25e>
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	089b      	lsrs	r3, r3, #2
 8011104:	f003 0301 	and.w	r3, r3, #1
 8011108:	2b00      	cmp	r3, #0
 801110a:	d103      	bne.n	8011114 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 febd 	bl	8011e8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011112:	e039      	b.n	8011188 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	089b      	lsrs	r3, r3, #2
 8011118:	f003 0301 	and.w	r3, r3, #1
 801111c:	2b00      	cmp	r3, #0
 801111e:	d033      	beq.n	8011188 <HAL_I2C_EV_IRQHandler+0x2d2>
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	0a5b      	lsrs	r3, r3, #9
 8011124:	f003 0301 	and.w	r3, r3, #1
 8011128:	2b00      	cmp	r3, #0
 801112a:	d02d      	beq.n	8011188 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 feea 	bl	8011f06 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011132:	e029      	b.n	8011188 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	099b      	lsrs	r3, r3, #6
 8011138:	f003 0301 	and.w	r3, r3, #1
 801113c:	2b00      	cmp	r3, #0
 801113e:	d00f      	beq.n	8011160 <HAL_I2C_EV_IRQHandler+0x2aa>
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	0a9b      	lsrs	r3, r3, #10
 8011144:	f003 0301 	and.w	r3, r3, #1
 8011148:	2b00      	cmp	r3, #0
 801114a:	d009      	beq.n	8011160 <HAL_I2C_EV_IRQHandler+0x2aa>
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	089b      	lsrs	r3, r3, #2
 8011150:	f003 0301 	and.w	r3, r3, #1
 8011154:	2b00      	cmp	r3, #0
 8011156:	d103      	bne.n	8011160 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 fef5 	bl	8011f48 <I2C_SlaveReceive_RXNE>
 801115e:	e014      	b.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	089b      	lsrs	r3, r3, #2
 8011164:	f003 0301 	and.w	r3, r3, #1
 8011168:	2b00      	cmp	r3, #0
 801116a:	d00e      	beq.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	0a5b      	lsrs	r3, r3, #9
 8011170:	f003 0301 	and.w	r3, r3, #1
 8011174:	2b00      	cmp	r3, #0
 8011176:	d008      	beq.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f000 ff23 	bl	8011fc4 <I2C_SlaveReceive_BTF>
 801117e:	e004      	b.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8011180:	bf00      	nop
 8011182:	e002      	b.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011184:	bf00      	nop
 8011186:	e000      	b.n	801118a <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011188:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801118a:	3720      	adds	r7, #32
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08a      	sub	sp, #40	; 0x28
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	695b      	ldr	r3, [r3, #20]
 801119e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80111a8:	2300      	movs	r3, #0
 80111aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80111b2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	0a1b      	lsrs	r3, r3, #8
 80111b8:	f003 0301 	and.w	r3, r3, #1
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d00e      	beq.n	80111de <HAL_I2C_ER_IRQHandler+0x4e>
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	0a1b      	lsrs	r3, r3, #8
 80111c4:	f003 0301 	and.w	r3, r3, #1
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d008      	beq.n	80111de <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80111cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ce:	f043 0301 	orr.w	r3, r3, #1
 80111d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80111dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80111de:	6a3b      	ldr	r3, [r7, #32]
 80111e0:	0a5b      	lsrs	r3, r3, #9
 80111e2:	f003 0301 	and.w	r3, r3, #1
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d00e      	beq.n	8011208 <HAL_I2C_ER_IRQHandler+0x78>
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	0a1b      	lsrs	r3, r3, #8
 80111ee:	f003 0301 	and.w	r3, r3, #1
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d008      	beq.n	8011208 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	f043 0302 	orr.w	r3, r3, #2
 80111fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8011206:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011208:	6a3b      	ldr	r3, [r7, #32]
 801120a:	0a9b      	lsrs	r3, r3, #10
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	2b00      	cmp	r3, #0
 8011212:	d03f      	beq.n	8011294 <HAL_I2C_ER_IRQHandler+0x104>
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	0a1b      	lsrs	r3, r3, #8
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	d039      	beq.n	8011294 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8011220:	7efb      	ldrb	r3, [r7, #27]
 8011222:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011228:	b29b      	uxth	r3, r3
 801122a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011232:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011238:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801123a:	7ebb      	ldrb	r3, [r7, #26]
 801123c:	2b20      	cmp	r3, #32
 801123e:	d112      	bne.n	8011266 <HAL_I2C_ER_IRQHandler+0xd6>
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d10f      	bne.n	8011266 <HAL_I2C_ER_IRQHandler+0xd6>
 8011246:	7cfb      	ldrb	r3, [r7, #19]
 8011248:	2b21      	cmp	r3, #33	; 0x21
 801124a:	d008      	beq.n	801125e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801124c:	7cfb      	ldrb	r3, [r7, #19]
 801124e:	2b29      	cmp	r3, #41	; 0x29
 8011250:	d005      	beq.n	801125e <HAL_I2C_ER_IRQHandler+0xce>
 8011252:	7cfb      	ldrb	r3, [r7, #19]
 8011254:	2b28      	cmp	r3, #40	; 0x28
 8011256:	d106      	bne.n	8011266 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b21      	cmp	r3, #33	; 0x21
 801125c:	d103      	bne.n	8011266 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f001 f846 	bl	80122f0 <I2C_Slave_AF>
 8011264:	e016      	b.n	8011294 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801126e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	f043 0304 	orr.w	r3, r3, #4
 8011276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8011278:	7efb      	ldrb	r3, [r7, #27]
 801127a:	2b10      	cmp	r3, #16
 801127c:	d002      	beq.n	8011284 <HAL_I2C_ER_IRQHandler+0xf4>
 801127e:	7efb      	ldrb	r3, [r7, #27]
 8011280:	2b40      	cmp	r3, #64	; 0x40
 8011282:	d107      	bne.n	8011294 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011292:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	0adb      	lsrs	r3, r3, #11
 8011298:	f003 0301 	and.w	r3, r3, #1
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00e      	beq.n	80112be <HAL_I2C_ER_IRQHandler+0x12e>
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	0a1b      	lsrs	r3, r3, #8
 80112a4:	f003 0301 	and.w	r3, r3, #1
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d008      	beq.n	80112be <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	f043 0308 	orr.w	r3, r3, #8
 80112b2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80112bc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80112be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d008      	beq.n	80112d6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	431a      	orrs	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f001 f87d 	bl	80123d0 <I2C_ITError>
  }
}
 80112d6:	bf00      	nop
 80112d8:	3728      	adds	r7, #40	; 0x28
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80112de:	b480      	push	{r7}
 80112e0:	b083      	sub	sp, #12
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80112e6:	bf00      	nop
 80112e8:	370c      	adds	r7, #12
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b083      	sub	sp, #12
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80112fa:	bf00      	nop
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr

08011306 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011306:	b480      	push	{r7}
 8011308:	b083      	sub	sp, #12
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801130e:	bf00      	nop
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801131a:	b480      	push	{r7}
 801131c:	b083      	sub	sp, #12
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8011322:	bf00      	nop
 8011324:	370c      	adds	r7, #12
 8011326:	46bd      	mov	sp, r7
 8011328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132c:	4770      	bx	lr

0801132e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801132e:	b480      	push	{r7}
 8011330:	b083      	sub	sp, #12
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	460b      	mov	r3, r1
 8011338:	70fb      	strb	r3, [r7, #3]
 801133a:	4613      	mov	r3, r2
 801133c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801133e:	bf00      	nop
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801134a:	b480      	push	{r7}
 801134c:	b083      	sub	sp, #12
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8011352:	bf00      	nop
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801135e:	b480      	push	{r7}
 8011360:	b083      	sub	sp, #12
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8011366:	bf00      	nop
 8011368:	370c      	adds	r7, #12
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr

08011372 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011372:	b480      	push	{r7}
 8011374:	b083      	sub	sp, #12
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801137a:	bf00      	nop
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011386:	b480      	push	{r7}
 8011388:	b083      	sub	sp, #12
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801138e:	bf00      	nop
 8011390:	370c      	adds	r7, #12
 8011392:	46bd      	mov	sp, r7
 8011394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011398:	4770      	bx	lr

0801139a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801139a:	b480      	push	{r7}
 801139c:	b083      	sub	sp, #12
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80113a2:	bf00      	nop
 80113a4:	370c      	adds	r7, #12
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr

080113ae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b084      	sub	sp, #16
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80113bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113c4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d150      	bne.n	8011476 <I2C_MasterTransmit_TXE+0xc8>
 80113d4:	7bfb      	ldrb	r3, [r7, #15]
 80113d6:	2b21      	cmp	r3, #33	; 0x21
 80113d8:	d14d      	bne.n	8011476 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2b08      	cmp	r3, #8
 80113de:	d01d      	beq.n	801141c <I2C_MasterTransmit_TXE+0x6e>
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	2b20      	cmp	r3, #32
 80113e4:	d01a      	beq.n	801141c <I2C_MasterTransmit_TXE+0x6e>
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80113ec:	d016      	beq.n	801141c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	685a      	ldr	r2, [r3, #4]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80113fc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2211      	movs	r2, #17
 8011402:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2220      	movs	r2, #32
 8011410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f7ff ff62 	bl	80112de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801141a:	e060      	b.n	80114de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	685a      	ldr	r2, [r3, #4]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801142a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801143a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2200      	movs	r2, #0
 8011440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2220      	movs	r2, #32
 8011446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011450:	b2db      	uxtb	r3, r3
 8011452:	2b40      	cmp	r3, #64	; 0x40
 8011454:	d107      	bne.n	8011466 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2200      	movs	r2, #0
 801145a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7ff ff7d 	bl	801135e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011464:	e03b      	b.n	80114de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2200      	movs	r2, #0
 801146a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff ff35 	bl	80112de <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011474:	e033      	b.n	80114de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8011476:	7bfb      	ldrb	r3, [r7, #15]
 8011478:	2b21      	cmp	r3, #33	; 0x21
 801147a:	d005      	beq.n	8011488 <I2C_MasterTransmit_TXE+0xda>
 801147c:	7bbb      	ldrb	r3, [r7, #14]
 801147e:	2b40      	cmp	r3, #64	; 0x40
 8011480:	d12d      	bne.n	80114de <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8011482:	7bfb      	ldrb	r3, [r7, #15]
 8011484:	2b22      	cmp	r3, #34	; 0x22
 8011486:	d12a      	bne.n	80114de <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801148c:	b29b      	uxth	r3, r3
 801148e:	2b00      	cmp	r3, #0
 8011490:	d108      	bne.n	80114a4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	685a      	ldr	r2, [r3, #4]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114a0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80114a2:	e01c      	b.n	80114de <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	2b40      	cmp	r3, #64	; 0x40
 80114ae:	d103      	bne.n	80114b8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f000 f880 	bl	80115b6 <I2C_MemoryTransmit_TXE_BTF>
}
 80114b6:	e012      	b.n	80114de <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114bc:	781a      	ldrb	r2, [r3, #0]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c8:	1c5a      	adds	r2, r3, #1
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	3b01      	subs	r3, #1
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80114dc:	e7ff      	b.n	80114de <I2C_MasterTransmit_TXE+0x130>
 80114de:	bf00      	nop
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}

080114e6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80114e6:	b580      	push	{r7, lr}
 80114e8:	b084      	sub	sp, #16
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	2b21      	cmp	r3, #33	; 0x21
 80114fe:	d156      	bne.n	80115ae <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011504:	b29b      	uxth	r3, r3
 8011506:	2b00      	cmp	r3, #0
 8011508:	d012      	beq.n	8011530 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801150e:	781a      	ldrb	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151a:	1c5a      	adds	r2, r3, #1
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011524:	b29b      	uxth	r3, r3
 8011526:	3b01      	subs	r3, #1
 8011528:	b29a      	uxth	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801152e:	e03e      	b.n	80115ae <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2b08      	cmp	r3, #8
 8011534:	d01d      	beq.n	8011572 <I2C_MasterTransmit_BTF+0x8c>
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b20      	cmp	r3, #32
 801153a:	d01a      	beq.n	8011572 <I2C_MasterTransmit_BTF+0x8c>
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011542:	d016      	beq.n	8011572 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	685a      	ldr	r2, [r3, #4]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011552:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2211      	movs	r2, #17
 8011558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2200      	movs	r2, #0
 801155e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2220      	movs	r2, #32
 8011566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f7ff feb7 	bl	80112de <HAL_I2C_MasterTxCpltCallback>
}
 8011570:	e01d      	b.n	80115ae <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	685a      	ldr	r2, [r3, #4]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011580:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011590:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2220      	movs	r2, #32
 801159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7ff fe98 	bl	80112de <HAL_I2C_MasterTxCpltCallback>
}
 80115ae:	bf00      	nop
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b084      	sub	sp, #16
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d11d      	bne.n	801160a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d10b      	bne.n	80115ee <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115da:	b2da      	uxtb	r2, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115e6:	1c9a      	adds	r2, r3, #2
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80115ec:	e06e      	b.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	121b      	asrs	r3, r3, #8
 80115f6:	b2da      	uxtb	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011602:	1c5a      	adds	r2, r3, #1
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011608:	e060      	b.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801160e:	2b01      	cmp	r3, #1
 8011610:	d10b      	bne.n	801162a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011616:	b2da      	uxtb	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011628:	e050      	b.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801162e:	2b02      	cmp	r3, #2
 8011630:	d14c      	bne.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8011632:	7bfb      	ldrb	r3, [r7, #15]
 8011634:	2b22      	cmp	r3, #34	; 0x22
 8011636:	d108      	bne.n	801164a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011646:	601a      	str	r2, [r3, #0]
}
 8011648:	e040      	b.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801164e:	b29b      	uxth	r3, r3
 8011650:	2b00      	cmp	r3, #0
 8011652:	d015      	beq.n	8011680 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8011654:	7bfb      	ldrb	r3, [r7, #15]
 8011656:	2b21      	cmp	r3, #33	; 0x21
 8011658:	d112      	bne.n	8011680 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801165e:	781a      	ldrb	r2, [r3, #0]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166a:	1c5a      	adds	r2, r3, #1
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011674:	b29b      	uxth	r3, r3
 8011676:	3b01      	subs	r3, #1
 8011678:	b29a      	uxth	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801167e:	e025      	b.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011684:	b29b      	uxth	r3, r3
 8011686:	2b00      	cmp	r3, #0
 8011688:	d120      	bne.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
 801168a:	7bfb      	ldrb	r3, [r7, #15]
 801168c:	2b21      	cmp	r3, #33	; 0x21
 801168e:	d11d      	bne.n	80116cc <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801169e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2220      	movs	r2, #32
 80116ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff fe49 	bl	801135e <HAL_I2C_MemTxCpltCallback>
}
 80116cc:	bf00      	nop
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2b22      	cmp	r3, #34	; 0x22
 80116e6:	f040 80a2 	bne.w	801182e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2b03      	cmp	r3, #3
 80116f6:	d921      	bls.n	801173c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	691a      	ldr	r2, [r3, #16]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011702:	b2d2      	uxtb	r2, r2
 8011704:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011714:	b29b      	uxth	r3, r3
 8011716:	3b01      	subs	r3, #1
 8011718:	b29a      	uxth	r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011722:	b29b      	uxth	r3, r3
 8011724:	2b03      	cmp	r3, #3
 8011726:	f040 8082 	bne.w	801182e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	685a      	ldr	r2, [r3, #4]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011738:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 801173a:	e078      	b.n	801182e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011740:	2b02      	cmp	r3, #2
 8011742:	d074      	beq.n	801182e <I2C_MasterReceive_RXNE+0x15a>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d002      	beq.n	8011750 <I2C_MasterReceive_RXNE+0x7c>
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d16e      	bne.n	801182e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f001 f817 	bl	8012784 <I2C_WaitOnSTOPRequestThroughIT>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d142      	bne.n	80117e2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801176a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801177a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	691a      	ldr	r2, [r3, #16]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011786:	b2d2      	uxtb	r2, r2
 8011788:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178e:	1c5a      	adds	r2, r3, #1
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011798:	b29b      	uxth	r3, r3
 801179a:	3b01      	subs	r3, #1
 801179c:	b29a      	uxth	r2, r3
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2220      	movs	r2, #32
 80117a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	2b40      	cmp	r3, #64	; 0x40
 80117b4:	d10a      	bne.n	80117cc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2200      	movs	r2, #0
 80117ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff fdd4 	bl	8011372 <HAL_I2C_MemRxCpltCallback>
}
 80117ca:	e030      	b.n	801182e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2212      	movs	r2, #18
 80117d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7ff fd89 	bl	80112f2 <HAL_I2C_MasterRxCpltCallback>
}
 80117e0:	e025      	b.n	801182e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	685a      	ldr	r2, [r3, #4]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80117f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	691a      	ldr	r2, [r3, #16]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fc:	b2d2      	uxtb	r2, r2
 80117fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801180e:	b29b      	uxth	r3, r3
 8011810:	3b01      	subs	r3, #1
 8011812:	b29a      	uxth	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2220      	movs	r2, #32
 801181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7ff fdac 	bl	8011386 <HAL_I2C_ErrorCallback>
}
 801182e:	bf00      	nop
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b084      	sub	sp, #16
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011842:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011848:	b29b      	uxth	r3, r3
 801184a:	2b04      	cmp	r3, #4
 801184c:	d11b      	bne.n	8011886 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	685a      	ldr	r2, [r3, #4]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801185c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	691a      	ldr	r2, [r3, #16]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011868:	b2d2      	uxtb	r2, r2
 801186a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011870:	1c5a      	adds	r2, r3, #1
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801187a:	b29b      	uxth	r3, r3
 801187c:	3b01      	subs	r3, #1
 801187e:	b29a      	uxth	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8011884:	e0bd      	b.n	8011a02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801188a:	b29b      	uxth	r3, r3
 801188c:	2b03      	cmp	r3, #3
 801188e:	d129      	bne.n	80118e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	685a      	ldr	r2, [r3, #4]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801189e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2b04      	cmp	r3, #4
 80118a4:	d00a      	beq.n	80118bc <I2C_MasterReceive_BTF+0x86>
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	d007      	beq.n	80118bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80118ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	691a      	ldr	r2, [r3, #16]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c6:	b2d2      	uxtb	r2, r2
 80118c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118d8:	b29b      	uxth	r3, r3
 80118da:	3b01      	subs	r3, #1
 80118dc:	b29a      	uxth	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80118e2:	e08e      	b.n	8011a02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d176      	bne.n	80119dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d002      	beq.n	80118fa <I2C_MasterReceive_BTF+0xc4>
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2b10      	cmp	r3, #16
 80118f8:	d108      	bne.n	801190c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	e019      	b.n	8011940 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2b04      	cmp	r3, #4
 8011910:	d002      	beq.n	8011918 <I2C_MasterReceive_BTF+0xe2>
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2b02      	cmp	r3, #2
 8011916:	d108      	bne.n	801192a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011926:	601a      	str	r2, [r3, #0]
 8011928:	e00a      	b.n	8011940 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2b10      	cmp	r3, #16
 801192e:	d007      	beq.n	8011940 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801193e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	691a      	ldr	r2, [r3, #16]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801194a:	b2d2      	uxtb	r2, r2
 801194c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011952:	1c5a      	adds	r2, r3, #1
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801195c:	b29b      	uxth	r3, r3
 801195e:	3b01      	subs	r3, #1
 8011960:	b29a      	uxth	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	691a      	ldr	r2, [r3, #16]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011970:	b2d2      	uxtb	r2, r2
 8011972:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011982:	b29b      	uxth	r3, r3
 8011984:	3b01      	subs	r3, #1
 8011986:	b29a      	uxth	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801199a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2220      	movs	r2, #32
 80119a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	2b40      	cmp	r3, #64	; 0x40
 80119ae:	d10a      	bne.n	80119c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7ff fcd7 	bl	8011372 <HAL_I2C_MemRxCpltCallback>
}
 80119c4:	e01d      	b.n	8011a02 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2200      	movs	r2, #0
 80119ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2212      	movs	r2, #18
 80119d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7ff fc8c 	bl	80112f2 <HAL_I2C_MasterRxCpltCallback>
}
 80119da:	e012      	b.n	8011a02 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	691a      	ldr	r2, [r3, #16]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e6:	b2d2      	uxtb	r2, r2
 80119e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ee:	1c5a      	adds	r2, r3, #1
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	3b01      	subs	r3, #1
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011a02:	bf00      	nop
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}

08011a0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b083      	sub	sp, #12
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	2b40      	cmp	r3, #64	; 0x40
 8011a1c:	d117      	bne.n	8011a4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d109      	bne.n	8011a3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011a36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8011a38:	e067      	b.n	8011b0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	f043 0301 	orr.w	r3, r3, #1
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	611a      	str	r2, [r3, #16]
}
 8011a4c:	e05d      	b.n	8011b0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a56:	d133      	bne.n	8011ac0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b21      	cmp	r3, #33	; 0x21
 8011a62:	d109      	bne.n	8011a78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011a74:	611a      	str	r2, [r3, #16]
 8011a76:	e008      	b.n	8011a8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	f043 0301 	orr.w	r3, r3, #1
 8011a82:	b2da      	uxtb	r2, r3
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d004      	beq.n	8011a9c <I2C_Master_SB+0x92>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d108      	bne.n	8011aae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d032      	beq.n	8011b0a <I2C_Master_SB+0x100>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d02d      	beq.n	8011b0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	685a      	ldr	r2, [r3, #4]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011abc:	605a      	str	r2, [r3, #4]
}
 8011abe:	e024      	b.n	8011b0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10e      	bne.n	8011ae6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	11db      	asrs	r3, r3, #7
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	f003 0306 	and.w	r3, r3, #6
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	f063 030f 	orn	r3, r3, #15
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	611a      	str	r2, [r3, #16]
}
 8011ae4:	e011      	b.n	8011b0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d10d      	bne.n	8011b0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	11db      	asrs	r3, r3, #7
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	f003 0306 	and.w	r3, r3, #6
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	f063 030e 	orn	r3, r3, #14
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	611a      	str	r2, [r3, #16]
}
 8011b0a:	bf00      	nop
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr

08011b16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8011b16:	b480      	push	{r7}
 8011b18:	b083      	sub	sp, #12
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d103      	bne.n	8011b3a <I2C_Master_ADD10+0x24>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d011      	beq.n	8011b5e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d104      	bne.n	8011b4e <I2C_Master_ADD10+0x38>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d007      	beq.n	8011b5e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	685a      	ldr	r2, [r3, #4]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b5c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8011b5e:	bf00      	nop
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8011b6a:	b480      	push	{r7}
 8011b6c:	b091      	sub	sp, #68	; 0x44
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	2b22      	cmp	r3, #34	; 0x22
 8011b92:	f040 8169 	bne.w	8011e68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10f      	bne.n	8011bbe <I2C_Master_ADDR+0x54>
 8011b9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ba2:	2b40      	cmp	r3, #64	; 0x40
 8011ba4:	d10b      	bne.n	8011bbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	695b      	ldr	r3, [r3, #20]
 8011bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	e160      	b.n	8011e80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d11d      	bne.n	8011c02 <I2C_Master_ADDR+0x98>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	691b      	ldr	r3, [r3, #16]
 8011bca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8011bce:	d118      	bne.n	8011c02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	695b      	ldr	r3, [r3, #20]
 8011bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	699b      	ldr	r3, [r3, #24]
 8011be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011bf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bfa:	1c5a      	adds	r2, r3, #1
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8011c00:	e13e      	b.n	8011e80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d113      	bne.n	8011c34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	695b      	ldr	r3, [r3, #20]
 8011c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	699b      	ldr	r3, [r3, #24]
 8011c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c20:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c30:	601a      	str	r2, [r3, #0]
 8011c32:	e115      	b.n	8011e60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	f040 808a 	bne.w	8011d54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011c46:	d137      	bne.n	8011cb8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011c56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011c66:	d113      	bne.n	8011c90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011c76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c78:	2300      	movs	r3, #0
 8011c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	695b      	ldr	r3, [r3, #20]
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	699b      	ldr	r3, [r3, #24]
 8011c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8011c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8e:	e0e7      	b.n	8011e60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011c90:	2300      	movs	r3, #0
 8011c92:	623b      	str	r3, [r7, #32]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	695b      	ldr	r3, [r3, #20]
 8011c9a:	623b      	str	r3, [r7, #32]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	623b      	str	r3, [r7, #32]
 8011ca4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011cb4:	601a      	str	r2, [r3, #0]
 8011cb6:	e0d3      	b.n	8011e60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cba:	2b08      	cmp	r3, #8
 8011cbc:	d02e      	beq.n	8011d1c <I2C_Master_ADDR+0x1b2>
 8011cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc0:	2b20      	cmp	r3, #32
 8011cc2:	d02b      	beq.n	8011d1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8011cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc6:	2b12      	cmp	r3, #18
 8011cc8:	d102      	bne.n	8011cd0 <I2C_Master_ADDR+0x166>
 8011cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ccc:	2b01      	cmp	r3, #1
 8011cce:	d125      	bne.n	8011d1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd2:	2b04      	cmp	r3, #4
 8011cd4:	d00e      	beq.n	8011cf4 <I2C_Master_ADDR+0x18a>
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	d00b      	beq.n	8011cf4 <I2C_Master_ADDR+0x18a>
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cde:	2b10      	cmp	r3, #16
 8011ce0:	d008      	beq.n	8011cf4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	e007      	b.n	8011d04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011d02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011d04:	2300      	movs	r3, #0
 8011d06:	61fb      	str	r3, [r7, #28]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	695b      	ldr	r3, [r3, #20]
 8011d0e:	61fb      	str	r3, [r7, #28]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	699b      	ldr	r3, [r3, #24]
 8011d16:	61fb      	str	r3, [r7, #28]
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	e0a1      	b.n	8011e60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	61bb      	str	r3, [r7, #24]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	695b      	ldr	r3, [r3, #20]
 8011d36:	61bb      	str	r3, [r7, #24]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	699b      	ldr	r3, [r3, #24]
 8011d3e:	61bb      	str	r3, [r7, #24]
 8011d40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	e085      	b.n	8011e60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	2b02      	cmp	r3, #2
 8011d5c:	d14d      	bne.n	8011dfa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d60:	2b04      	cmp	r3, #4
 8011d62:	d016      	beq.n	8011d92 <I2C_Master_ADDR+0x228>
 8011d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d013      	beq.n	8011d92 <I2C_Master_ADDR+0x228>
 8011d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6c:	2b10      	cmp	r3, #16
 8011d6e:	d010      	beq.n	8011d92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011d7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d8e:	601a      	str	r2, [r3, #0]
 8011d90:	e007      	b.n	8011da2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011da0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011db0:	d117      	bne.n	8011de2 <I2C_Master_ADDR+0x278>
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011db8:	d00b      	beq.n	8011dd2 <I2C_Master_ADDR+0x268>
 8011dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d008      	beq.n	8011dd2 <I2C_Master_ADDR+0x268>
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	2b08      	cmp	r3, #8
 8011dc4:	d005      	beq.n	8011dd2 <I2C_Master_ADDR+0x268>
 8011dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc8:	2b10      	cmp	r3, #16
 8011dca:	d002      	beq.n	8011dd2 <I2C_Master_ADDR+0x268>
 8011dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dce:	2b20      	cmp	r3, #32
 8011dd0:	d107      	bne.n	8011de2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	685a      	ldr	r2, [r3, #4]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011de0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011de2:	2300      	movs	r3, #0
 8011de4:	617b      	str	r3, [r7, #20]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	695b      	ldr	r3, [r3, #20]
 8011dec:	617b      	str	r3, [r7, #20]
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	699b      	ldr	r3, [r3, #24]
 8011df4:	617b      	str	r3, [r7, #20]
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	e032      	b.n	8011e60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e18:	d117      	bne.n	8011e4a <I2C_Master_ADDR+0x2e0>
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011e20:	d00b      	beq.n	8011e3a <I2C_Master_ADDR+0x2d0>
 8011e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d008      	beq.n	8011e3a <I2C_Master_ADDR+0x2d0>
 8011e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2a:	2b08      	cmp	r3, #8
 8011e2c:	d005      	beq.n	8011e3a <I2C_Master_ADDR+0x2d0>
 8011e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e30:	2b10      	cmp	r3, #16
 8011e32:	d002      	beq.n	8011e3a <I2C_Master_ADDR+0x2d0>
 8011e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e36:	2b20      	cmp	r3, #32
 8011e38:	d107      	bne.n	8011e4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	685a      	ldr	r2, [r3, #4]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011e48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	613b      	str	r3, [r7, #16]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	695b      	ldr	r3, [r3, #20]
 8011e54:	613b      	str	r3, [r7, #16]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	699b      	ldr	r3, [r3, #24]
 8011e5c:	613b      	str	r3, [r7, #16]
 8011e5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2200      	movs	r2, #0
 8011e64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8011e66:	e00b      	b.n	8011e80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011e68:	2300      	movs	r3, #0
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	60fb      	str	r3, [r7, #12]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	699b      	ldr	r3, [r3, #24]
 8011e7a:	60fb      	str	r3, [r7, #12]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
}
 8011e7e:	e7ff      	b.n	8011e80 <I2C_Master_ADDR+0x316>
 8011e80:	bf00      	nop
 8011e82:	3744      	adds	r7, #68	; 0x44
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d02b      	beq.n	8011efe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eaa:	781a      	ldrb	r2, [r3, #0]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb6:	1c5a      	adds	r2, r3, #1
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d114      	bne.n	8011efe <I2C_SlaveTransmit_TXE+0x72>
 8011ed4:	7bfb      	ldrb	r3, [r7, #15]
 8011ed6:	2b29      	cmp	r3, #41	; 0x29
 8011ed8:	d111      	bne.n	8011efe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	685a      	ldr	r2, [r3, #4]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011ee8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2221      	movs	r2, #33	; 0x21
 8011eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2228      	movs	r2, #40	; 0x28
 8011ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff fa04 	bl	8011306 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011efe:	bf00      	nop
 8011f00:	3710      	adds	r7, #16
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}

08011f06 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011f06:	b480      	push	{r7}
 8011f08:	b083      	sub	sp, #12
 8011f0a:	af00      	add	r7, sp, #0
 8011f0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d011      	beq.n	8011f3c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1c:	781a      	ldrb	r2, [r3, #0]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	3b01      	subs	r3, #1
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011f3c:	bf00      	nop
 8011f3e:	370c      	adds	r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr

08011f48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011f56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d02c      	beq.n	8011fbc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	691a      	ldr	r2, [r3, #16]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6c:	b2d2      	uxtb	r2, r2
 8011f6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f74:	1c5a      	adds	r2, r3, #1
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	3b01      	subs	r3, #1
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d114      	bne.n	8011fbc <I2C_SlaveReceive_RXNE+0x74>
 8011f92:	7bfb      	ldrb	r3, [r7, #15]
 8011f94:	2b2a      	cmp	r3, #42	; 0x2a
 8011f96:	d111      	bne.n	8011fbc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	685a      	ldr	r2, [r3, #4]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fa6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2222      	movs	r2, #34	; 0x22
 8011fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2228      	movs	r2, #40	; 0x28
 8011fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7ff f9af 	bl	801131a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8011fbc:	bf00      	nop
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d012      	beq.n	8011ffc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	691a      	ldr	r2, [r3, #16]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe0:	b2d2      	uxtb	r2, r2
 8011fe2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012006:	4770      	bx	lr

08012008 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8012012:	2300      	movs	r3, #0
 8012014:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801201c:	b2db      	uxtb	r3, r3
 801201e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012022:	2b28      	cmp	r3, #40	; 0x28
 8012024:	d127      	bne.n	8012076 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012034:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	089b      	lsrs	r3, r3, #2
 801203a:	f003 0301 	and.w	r3, r3, #1
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8012042:	2301      	movs	r3, #1
 8012044:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	09db      	lsrs	r3, r3, #7
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	d103      	bne.n	801205a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	81bb      	strh	r3, [r7, #12]
 8012058:	e002      	b.n	8012060 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	699b      	ldr	r3, [r3, #24]
 801205e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8012068:	89ba      	ldrh	r2, [r7, #12]
 801206a:	7bfb      	ldrb	r3, [r7, #15]
 801206c:	4619      	mov	r1, r3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7ff f95d 	bl	801132e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8012074:	e008      	b.n	8012088 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f06f 0202 	mvn.w	r2, #2
 801207e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2200      	movs	r2, #0
 8012084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8012088:	bf00      	nop
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801209e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	685a      	ldr	r2, [r3, #4]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80120ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80120b0:	2300      	movs	r3, #0
 80120b2:	60bb      	str	r3, [r7, #8]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	60bb      	str	r3, [r7, #8]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f042 0201 	orr.w	r2, r2, #1
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80120dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80120ec:	d172      	bne.n	80121d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80120ee:	7bfb      	ldrb	r3, [r7, #15]
 80120f0:	2b22      	cmp	r3, #34	; 0x22
 80120f2:	d002      	beq.n	80120fa <I2C_Slave_STOPF+0x6a>
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
 80120f6:	2b2a      	cmp	r3, #42	; 0x2a
 80120f8:	d135      	bne.n	8012166 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801210c:	b29b      	uxth	r3, r3
 801210e:	2b00      	cmp	r3, #0
 8012110:	d005      	beq.n	801211e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012116:	f043 0204 	orr.w	r2, r3, #4
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	685a      	ldr	r2, [r3, #4]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801212c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012132:	4618      	mov	r0, r3
 8012134:	f7fe fc04 	bl	8010940 <HAL_DMA_GetState>
 8012138:	4603      	mov	r3, r0
 801213a:	2b01      	cmp	r3, #1
 801213c:	d049      	beq.n	80121d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012142:	4a69      	ldr	r2, [pc, #420]	; (80122e8 <I2C_Slave_STOPF+0x258>)
 8012144:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801214a:	4618      	mov	r0, r3
 801214c:	f7fe fa4c 	bl	80105e8 <HAL_DMA_Abort_IT>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d03d      	beq.n	80121d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801215a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012160:	4610      	mov	r0, r2
 8012162:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012164:	e035      	b.n	80121d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	b29a      	uxth	r2, r3
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012178:	b29b      	uxth	r3, r3
 801217a:	2b00      	cmp	r3, #0
 801217c:	d005      	beq.n	801218a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012182:	f043 0204 	orr.w	r2, r3, #4
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	685a      	ldr	r2, [r3, #4]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012198:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fe fbce 	bl	8010940 <HAL_DMA_GetState>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d014      	beq.n	80121d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ae:	4a4e      	ldr	r2, [pc, #312]	; (80122e8 <I2C_Slave_STOPF+0x258>)
 80121b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fe fa16 	bl	80105e8 <HAL_DMA_Abort_IT>
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d008      	beq.n	80121d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80121cc:	4610      	mov	r0, r2
 80121ce:	4798      	blx	r3
 80121d0:	e000      	b.n	80121d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80121d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121d8:	b29b      	uxth	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d03e      	beq.n	801225c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	f003 0304 	and.w	r3, r3, #4
 80121e8:	2b04      	cmp	r3, #4
 80121ea:	d112      	bne.n	8012212 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	691a      	ldr	r2, [r3, #16]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f6:	b2d2      	uxtb	r2, r2
 80121f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121fe:	1c5a      	adds	r2, r3, #1
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012208:	b29b      	uxth	r3, r3
 801220a:	3b01      	subs	r3, #1
 801220c:	b29a      	uxth	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	695b      	ldr	r3, [r3, #20]
 8012218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801221c:	2b40      	cmp	r3, #64	; 0x40
 801221e:	d112      	bne.n	8012246 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	691a      	ldr	r2, [r3, #16]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801222a:	b2d2      	uxtb	r2, r2
 801222c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012232:	1c5a      	adds	r2, r3, #1
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801223c:	b29b      	uxth	r3, r3
 801223e:	3b01      	subs	r3, #1
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801224a:	b29b      	uxth	r3, r3
 801224c:	2b00      	cmp	r3, #0
 801224e:	d005      	beq.n	801225c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012254:	f043 0204 	orr.w	r2, r3, #4
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012260:	2b00      	cmp	r3, #0
 8012262:	d003      	beq.n	801226c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 f8b3 	bl	80123d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801226a:	e039      	b.n	80122e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801226c:	7bfb      	ldrb	r3, [r7, #15]
 801226e:	2b2a      	cmp	r3, #42	; 0x2a
 8012270:	d109      	bne.n	8012286 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2228      	movs	r2, #40	; 0x28
 801227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7ff f84a 	bl	801131a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801228c:	b2db      	uxtb	r3, r3
 801228e:	2b28      	cmp	r3, #40	; 0x28
 8012290:	d111      	bne.n	80122b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	4a15      	ldr	r2, [pc, #84]	; (80122ec <I2C_Slave_STOPF+0x25c>)
 8012296:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2200      	movs	r2, #0
 801229c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2220      	movs	r2, #32
 80122a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2200      	movs	r2, #0
 80122aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f7ff f84b 	bl	801134a <HAL_I2C_ListenCpltCallback>
}
 80122b4:	e014      	b.n	80122e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ba:	2b22      	cmp	r3, #34	; 0x22
 80122bc:	d002      	beq.n	80122c4 <I2C_Slave_STOPF+0x234>
 80122be:	7bfb      	ldrb	r3, [r7, #15]
 80122c0:	2b22      	cmp	r3, #34	; 0x22
 80122c2:	d10d      	bne.n	80122e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2220      	movs	r2, #32
 80122ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7ff f81d 	bl	801131a <HAL_I2C_SlaveRxCpltCallback>
}
 80122e0:	bf00      	nop
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	08012635 	.word	0x08012635
 80122ec:	ffff0000 	.word	0xffff0000

080122f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80122fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012304:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b08      	cmp	r3, #8
 801230a:	d002      	beq.n	8012312 <I2C_Slave_AF+0x22>
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2b20      	cmp	r3, #32
 8012310:	d129      	bne.n	8012366 <I2C_Slave_AF+0x76>
 8012312:	7bfb      	ldrb	r3, [r7, #15]
 8012314:	2b28      	cmp	r3, #40	; 0x28
 8012316:	d126      	bne.n	8012366 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	4a2c      	ldr	r2, [pc, #176]	; (80123cc <I2C_Slave_AF+0xdc>)
 801231c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	685a      	ldr	r2, [r3, #4]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801232c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8012336:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012346:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	2200      	movs	r2, #0
 801234c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2220      	movs	r2, #32
 8012352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f7fe fff3 	bl	801134a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8012364:	e02e      	b.n	80123c4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8012366:	7bfb      	ldrb	r3, [r7, #15]
 8012368:	2b21      	cmp	r3, #33	; 0x21
 801236a:	d126      	bne.n	80123ba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4a17      	ldr	r2, [pc, #92]	; (80123cc <I2C_Slave_AF+0xdc>)
 8012370:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2221      	movs	r2, #33	; 0x21
 8012376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2220      	movs	r2, #32
 801237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012396:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80123a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80123b0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7fe ffa7 	bl	8011306 <HAL_I2C_SlaveTxCpltCallback>
}
 80123b8:	e004      	b.n	80123c4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80123c2:	615a      	str	r2, [r3, #20]
}
 80123c4:	bf00      	nop
 80123c6:	3710      	adds	r7, #16
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	ffff0000 	.word	0xffff0000

080123d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80123e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80123e8:	7bbb      	ldrb	r3, [r7, #14]
 80123ea:	2b10      	cmp	r3, #16
 80123ec:	d002      	beq.n	80123f4 <I2C_ITError+0x24>
 80123ee:	7bbb      	ldrb	r3, [r7, #14]
 80123f0:	2b40      	cmp	r3, #64	; 0x40
 80123f2:	d10a      	bne.n	801240a <I2C_ITError+0x3a>
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
 80123f6:	2b22      	cmp	r3, #34	; 0x22
 80123f8:	d107      	bne.n	801240a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012408:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801240a:	7bfb      	ldrb	r3, [r7, #15]
 801240c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012410:	2b28      	cmp	r3, #40	; 0x28
 8012412:	d107      	bne.n	8012424 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2228      	movs	r2, #40	; 0x28
 801241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012422:	e015      	b.n	8012450 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801242e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012432:	d00a      	beq.n	801244a <I2C_ITError+0x7a>
 8012434:	7bfb      	ldrb	r3, [r7, #15]
 8012436:	2b60      	cmp	r3, #96	; 0x60
 8012438:	d007      	beq.n	801244a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2220      	movs	r2, #32
 801243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801245a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801245e:	d162      	bne.n	8012526 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	685a      	ldr	r2, [r3, #4]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801246e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012478:	b2db      	uxtb	r3, r3
 801247a:	2b01      	cmp	r3, #1
 801247c:	d020      	beq.n	80124c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012482:	4a6a      	ldr	r2, [pc, #424]	; (801262c <I2C_ITError+0x25c>)
 8012484:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248a:	4618      	mov	r0, r3
 801248c:	f7fe f8ac 	bl	80105e8 <HAL_DMA_Abort_IT>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	f000 8089 	beq.w	80125aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f022 0201 	bic.w	r2, r2, #1
 80124a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2220      	movs	r2, #32
 80124ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80124ba:	4610      	mov	r0, r2
 80124bc:	4798      	blx	r3
 80124be:	e074      	b.n	80125aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124c4:	4a59      	ldr	r2, [pc, #356]	; (801262c <I2C_ITError+0x25c>)
 80124c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe f88b 	bl	80105e8 <HAL_DMA_Abort_IT>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d068      	beq.n	80125aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	695b      	ldr	r3, [r3, #20]
 80124de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124e2:	2b40      	cmp	r3, #64	; 0x40
 80124e4:	d10b      	bne.n	80124fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	691a      	ldr	r2, [r3, #16]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f0:	b2d2      	uxtb	r2, r2
 80124f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f8:	1c5a      	adds	r2, r3, #1
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f022 0201 	bic.w	r2, r2, #1
 801250c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2220      	movs	r2, #32
 8012512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801251a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012520:	4610      	mov	r0, r2
 8012522:	4798      	blx	r3
 8012524:	e041      	b.n	80125aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801252c:	b2db      	uxtb	r3, r3
 801252e:	2b60      	cmp	r3, #96	; 0x60
 8012530:	d125      	bne.n	801257e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2220      	movs	r2, #32
 8012536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2200      	movs	r2, #0
 801253e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	695b      	ldr	r3, [r3, #20]
 8012546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801254a:	2b40      	cmp	r3, #64	; 0x40
 801254c:	d10b      	bne.n	8012566 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	691a      	ldr	r2, [r3, #16]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012558:	b2d2      	uxtb	r2, r2
 801255a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012560:	1c5a      	adds	r2, r3, #1
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	f022 0201 	bic.w	r2, r2, #1
 8012574:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7fe ff0f 	bl	801139a <HAL_I2C_AbortCpltCallback>
 801257c:	e015      	b.n	80125aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	695b      	ldr	r3, [r3, #20]
 8012584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012588:	2b40      	cmp	r3, #64	; 0x40
 801258a:	d10b      	bne.n	80125a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	691a      	ldr	r2, [r3, #16]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012596:	b2d2      	uxtb	r2, r2
 8012598:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259e:	1c5a      	adds	r2, r3, #1
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7fe feee 	bl	8011386 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	f003 0301 	and.w	r3, r3, #1
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10e      	bne.n	80125d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d109      	bne.n	80125d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d104      	bne.n	80125d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d007      	beq.n	80125e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	685a      	ldr	r2, [r3, #4]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80125e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	d113      	bne.n	8012624 <I2C_ITError+0x254>
 80125fc:	7bfb      	ldrb	r3, [r7, #15]
 80125fe:	2b28      	cmp	r3, #40	; 0x28
 8012600:	d110      	bne.n	8012624 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4a0a      	ldr	r2, [pc, #40]	; (8012630 <I2C_ITError+0x260>)
 8012606:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2200      	movs	r2, #0
 801260c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2220      	movs	r2, #32
 8012612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f7fe fe93 	bl	801134a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012624:	bf00      	nop
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	08012635 	.word	0x08012635
 8012630:	ffff0000 	.word	0xffff0000

08012634 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801263c:	2300      	movs	r3, #0
 801263e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012644:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801264c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801264e:	4b4b      	ldr	r3, [pc, #300]	; (801277c <I2C_DMAAbort+0x148>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	08db      	lsrs	r3, r3, #3
 8012654:	4a4a      	ldr	r2, [pc, #296]	; (8012780 <I2C_DMAAbort+0x14c>)
 8012656:	fba2 2303 	umull	r2, r3, r2, r3
 801265a:	0a1a      	lsrs	r2, r3, #8
 801265c:	4613      	mov	r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	00da      	lsls	r2, r3, #3
 8012664:	1ad3      	subs	r3, r2, r3
 8012666:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d106      	bne.n	801267c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012672:	f043 0220 	orr.w	r2, r3, #32
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801267a:	e00a      	b.n	8012692 <I2C_DMAAbort+0x5e>
    }
    count--;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	3b01      	subs	r3, #1
 8012680:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801268c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012690:	d0ea      	beq.n	8012668 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012696:	2b00      	cmp	r3, #0
 8012698:	d003      	beq.n	80126a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801269e:	2200      	movs	r2, #0
 80126a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d003      	beq.n	80126b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ae:	2200      	movs	r2, #0
 80126b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	2200      	movs	r2, #0
 80126c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d003      	beq.n	80126d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126d4:	2200      	movs	r2, #0
 80126d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d003      	beq.n	80126e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e4:	2200      	movs	r2, #0
 80126e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f022 0201 	bic.w	r2, r2, #1
 80126f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126fe:	b2db      	uxtb	r3, r3
 8012700:	2b60      	cmp	r3, #96	; 0x60
 8012702:	d10e      	bne.n	8012722 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	2220      	movs	r2, #32
 8012708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	2200      	movs	r2, #0
 8012710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	2200      	movs	r2, #0
 8012718:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801271a:	6978      	ldr	r0, [r7, #20]
 801271c:	f7fe fe3d 	bl	801139a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012720:	e027      	b.n	8012772 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012722:	7cfb      	ldrb	r3, [r7, #19]
 8012724:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012728:	2b28      	cmp	r3, #40	; 0x28
 801272a:	d117      	bne.n	801275c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f042 0201 	orr.w	r2, r2, #1
 801273a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801274a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	2200      	movs	r2, #0
 8012750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	2228      	movs	r2, #40	; 0x28
 8012756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801275a:	e007      	b.n	801276c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	2220      	movs	r2, #32
 8012760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	2200      	movs	r2, #0
 8012768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 801276c:	6978      	ldr	r0, [r7, #20]
 801276e:	f7fe fe0a 	bl	8011386 <HAL_I2C_ErrorCallback>
}
 8012772:	bf00      	nop
 8012774:	3718      	adds	r7, #24
 8012776:	46bd      	mov	sp, r7
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	20000268 	.word	0x20000268
 8012780:	14f8b589 	.word	0x14f8b589

08012784 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8012784:	b480      	push	{r7}
 8012786:	b085      	sub	sp, #20
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801278c:	2300      	movs	r3, #0
 801278e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8012790:	4b13      	ldr	r3, [pc, #76]	; (80127e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	08db      	lsrs	r3, r3, #3
 8012796:	4a13      	ldr	r2, [pc, #76]	; (80127e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8012798:	fba2 2303 	umull	r2, r3, r2, r3
 801279c:	0a1a      	lsrs	r2, r3, #8
 801279e:	4613      	mov	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	3b01      	subs	r3, #1
 80127aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d107      	bne.n	80127c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127b6:	f043 0220 	orr.w	r2, r3, #32
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	e008      	b.n	80127d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80127cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127d0:	d0e9      	beq.n	80127a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80127d2:	2300      	movs	r3, #0
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3714      	adds	r7, #20
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr
 80127e0:	20000268 	.word	0x20000268
 80127e4:	14f8b589 	.word	0x14f8b589

080127e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80127f8:	d103      	bne.n	8012802 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2201      	movs	r2, #1
 80127fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8012800:	e007      	b.n	8012812 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012806:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801280a:	d102      	bne.n	8012812 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2208      	movs	r2, #8
 8012810:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012812:	bf00      	nop
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
	...

08012820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b086      	sub	sp, #24
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d101      	bne.n	8012832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801282e:	2301      	movs	r3, #1
 8012830:	e25b      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	f003 0301 	and.w	r3, r3, #1
 801283a:	2b00      	cmp	r3, #0
 801283c:	d075      	beq.n	801292a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801283e:	4ba3      	ldr	r3, [pc, #652]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012840:	689b      	ldr	r3, [r3, #8]
 8012842:	f003 030c 	and.w	r3, r3, #12
 8012846:	2b04      	cmp	r3, #4
 8012848:	d00c      	beq.n	8012864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801284a:	4ba0      	ldr	r3, [pc, #640]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 801284c:	689b      	ldr	r3, [r3, #8]
 801284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012852:	2b08      	cmp	r3, #8
 8012854:	d112      	bne.n	801287c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012856:	4b9d      	ldr	r3, [pc, #628]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801285e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012862:	d10b      	bne.n	801287c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012864:	4b99      	ldr	r3, [pc, #612]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801286c:	2b00      	cmp	r3, #0
 801286e:	d05b      	beq.n	8012928 <HAL_RCC_OscConfig+0x108>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d157      	bne.n	8012928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012878:	2301      	movs	r3, #1
 801287a:	e236      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012884:	d106      	bne.n	8012894 <HAL_RCC_OscConfig+0x74>
 8012886:	4b91      	ldr	r3, [pc, #580]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a90      	ldr	r2, [pc, #576]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 801288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	e01d      	b.n	80128d0 <HAL_RCC_OscConfig+0xb0>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801289c:	d10c      	bne.n	80128b8 <HAL_RCC_OscConfig+0x98>
 801289e:	4b8b      	ldr	r3, [pc, #556]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	4a8a      	ldr	r2, [pc, #552]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80128a8:	6013      	str	r3, [r2, #0]
 80128aa:	4b88      	ldr	r3, [pc, #544]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	4a87      	ldr	r2, [pc, #540]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80128b4:	6013      	str	r3, [r2, #0]
 80128b6:	e00b      	b.n	80128d0 <HAL_RCC_OscConfig+0xb0>
 80128b8:	4b84      	ldr	r3, [pc, #528]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a83      	ldr	r2, [pc, #524]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80128c2:	6013      	str	r3, [r2, #0]
 80128c4:	4b81      	ldr	r3, [pc, #516]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	4a80      	ldr	r2, [pc, #512]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80128ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d013      	beq.n	8012900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80128d8:	f7fc fdd8 	bl	800f48c <HAL_GetTick>
 80128dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80128de:	e008      	b.n	80128f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80128e0:	f7fc fdd4 	bl	800f48c <HAL_GetTick>
 80128e4:	4602      	mov	r2, r0
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	2b64      	cmp	r3, #100	; 0x64
 80128ec:	d901      	bls.n	80128f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80128ee:	2303      	movs	r3, #3
 80128f0:	e1fb      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80128f2:	4b76      	ldr	r3, [pc, #472]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d0f0      	beq.n	80128e0 <HAL_RCC_OscConfig+0xc0>
 80128fe:	e014      	b.n	801292a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012900:	f7fc fdc4 	bl	800f48c <HAL_GetTick>
 8012904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012906:	e008      	b.n	801291a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012908:	f7fc fdc0 	bl	800f48c <HAL_GetTick>
 801290c:	4602      	mov	r2, r0
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	1ad3      	subs	r3, r2, r3
 8012912:	2b64      	cmp	r3, #100	; 0x64
 8012914:	d901      	bls.n	801291a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012916:	2303      	movs	r3, #3
 8012918:	e1e7      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801291a:	4b6c      	ldr	r3, [pc, #432]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1f0      	bne.n	8012908 <HAL_RCC_OscConfig+0xe8>
 8012926:	e000      	b.n	801292a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f003 0302 	and.w	r3, r3, #2
 8012932:	2b00      	cmp	r3, #0
 8012934:	d063      	beq.n	80129fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012936:	4b65      	ldr	r3, [pc, #404]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	f003 030c 	and.w	r3, r3, #12
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00b      	beq.n	801295a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012942:	4b62      	ldr	r3, [pc, #392]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012944:	689b      	ldr	r3, [r3, #8]
 8012946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801294a:	2b08      	cmp	r3, #8
 801294c:	d11c      	bne.n	8012988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801294e:	4b5f      	ldr	r3, [pc, #380]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012956:	2b00      	cmp	r3, #0
 8012958:	d116      	bne.n	8012988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801295a:	4b5c      	ldr	r3, [pc, #368]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f003 0302 	and.w	r3, r3, #2
 8012962:	2b00      	cmp	r3, #0
 8012964:	d005      	beq.n	8012972 <HAL_RCC_OscConfig+0x152>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	2b01      	cmp	r3, #1
 801296c:	d001      	beq.n	8012972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801296e:	2301      	movs	r3, #1
 8012970:	e1bb      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012972:	4b56      	ldr	r3, [pc, #344]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	691b      	ldr	r3, [r3, #16]
 801297e:	00db      	lsls	r3, r3, #3
 8012980:	4952      	ldr	r1, [pc, #328]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012982:	4313      	orrs	r3, r2
 8012984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012986:	e03a      	b.n	80129fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d020      	beq.n	80129d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012990:	4b4f      	ldr	r3, [pc, #316]	; (8012ad0 <HAL_RCC_OscConfig+0x2b0>)
 8012992:	2201      	movs	r2, #1
 8012994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012996:	f7fc fd79 	bl	800f48c <HAL_GetTick>
 801299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801299c:	e008      	b.n	80129b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801299e:	f7fc fd75 	bl	800f48c <HAL_GetTick>
 80129a2:	4602      	mov	r2, r0
 80129a4:	693b      	ldr	r3, [r7, #16]
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d901      	bls.n	80129b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80129ac:	2303      	movs	r3, #3
 80129ae:	e19c      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80129b0:	4b46      	ldr	r3, [pc, #280]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	f003 0302 	and.w	r3, r3, #2
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d0f0      	beq.n	801299e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80129bc:	4b43      	ldr	r3, [pc, #268]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	691b      	ldr	r3, [r3, #16]
 80129c8:	00db      	lsls	r3, r3, #3
 80129ca:	4940      	ldr	r1, [pc, #256]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80129cc:	4313      	orrs	r3, r2
 80129ce:	600b      	str	r3, [r1, #0]
 80129d0:	e015      	b.n	80129fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80129d2:	4b3f      	ldr	r3, [pc, #252]	; (8012ad0 <HAL_RCC_OscConfig+0x2b0>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80129d8:	f7fc fd58 	bl	800f48c <HAL_GetTick>
 80129dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80129de:	e008      	b.n	80129f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80129e0:	f7fc fd54 	bl	800f48c <HAL_GetTick>
 80129e4:	4602      	mov	r2, r0
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	2b02      	cmp	r3, #2
 80129ec:	d901      	bls.n	80129f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80129ee:	2303      	movs	r3, #3
 80129f0:	e17b      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80129f2:	4b36      	ldr	r3, [pc, #216]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f003 0302 	and.w	r3, r3, #2
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1f0      	bne.n	80129e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f003 0308 	and.w	r3, r3, #8
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d030      	beq.n	8012a6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	695b      	ldr	r3, [r3, #20]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d016      	beq.n	8012a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012a12:	4b30      	ldr	r3, [pc, #192]	; (8012ad4 <HAL_RCC_OscConfig+0x2b4>)
 8012a14:	2201      	movs	r2, #1
 8012a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012a18:	f7fc fd38 	bl	800f48c <HAL_GetTick>
 8012a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012a1e:	e008      	b.n	8012a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012a20:	f7fc fd34 	bl	800f48c <HAL_GetTick>
 8012a24:	4602      	mov	r2, r0
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	d901      	bls.n	8012a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012a2e:	2303      	movs	r3, #3
 8012a30:	e15b      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012a32:	4b26      	ldr	r3, [pc, #152]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a36:	f003 0302 	and.w	r3, r3, #2
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d0f0      	beq.n	8012a20 <HAL_RCC_OscConfig+0x200>
 8012a3e:	e015      	b.n	8012a6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012a40:	4b24      	ldr	r3, [pc, #144]	; (8012ad4 <HAL_RCC_OscConfig+0x2b4>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012a46:	f7fc fd21 	bl	800f48c <HAL_GetTick>
 8012a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012a4c:	e008      	b.n	8012a60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012a4e:	f7fc fd1d 	bl	800f48c <HAL_GetTick>
 8012a52:	4602      	mov	r2, r0
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	1ad3      	subs	r3, r2, r3
 8012a58:	2b02      	cmp	r3, #2
 8012a5a:	d901      	bls.n	8012a60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8012a5c:	2303      	movs	r3, #3
 8012a5e:	e144      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012a60:	4b1a      	ldr	r3, [pc, #104]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a64:	f003 0302 	and.w	r3, r3, #2
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d1f0      	bne.n	8012a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f003 0304 	and.w	r3, r3, #4
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	f000 80a0 	beq.w	8012bba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012a7e:	4b13      	ldr	r3, [pc, #76]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d10f      	bne.n	8012aaa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	60bb      	str	r3, [r7, #8]
 8012a8e:	4b0f      	ldr	r3, [pc, #60]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a92:	4a0e      	ldr	r2, [pc, #56]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012a98:	6413      	str	r3, [r2, #64]	; 0x40
 8012a9a:	4b0c      	ldr	r3, [pc, #48]	; (8012acc <HAL_RCC_OscConfig+0x2ac>)
 8012a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012aa2:	60bb      	str	r3, [r7, #8]
 8012aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012aaa:	4b0b      	ldr	r3, [pc, #44]	; (8012ad8 <HAL_RCC_OscConfig+0x2b8>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d121      	bne.n	8012afa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012ab6:	4b08      	ldr	r3, [pc, #32]	; (8012ad8 <HAL_RCC_OscConfig+0x2b8>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	4a07      	ldr	r2, [pc, #28]	; (8012ad8 <HAL_RCC_OscConfig+0x2b8>)
 8012abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012ac2:	f7fc fce3 	bl	800f48c <HAL_GetTick>
 8012ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012ac8:	e011      	b.n	8012aee <HAL_RCC_OscConfig+0x2ce>
 8012aca:	bf00      	nop
 8012acc:	40023800 	.word	0x40023800
 8012ad0:	42470000 	.word	0x42470000
 8012ad4:	42470e80 	.word	0x42470e80
 8012ad8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012adc:	f7fc fcd6 	bl	800f48c <HAL_GetTick>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	2b02      	cmp	r3, #2
 8012ae8:	d901      	bls.n	8012aee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012aea:	2303      	movs	r3, #3
 8012aec:	e0fd      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012aee:	4b81      	ldr	r3, [pc, #516]	; (8012cf4 <HAL_RCC_OscConfig+0x4d4>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d0f0      	beq.n	8012adc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	689b      	ldr	r3, [r3, #8]
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d106      	bne.n	8012b10 <HAL_RCC_OscConfig+0x2f0>
 8012b02:	4b7d      	ldr	r3, [pc, #500]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b06:	4a7c      	ldr	r2, [pc, #496]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b08:	f043 0301 	orr.w	r3, r3, #1
 8012b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8012b0e:	e01c      	b.n	8012b4a <HAL_RCC_OscConfig+0x32a>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	689b      	ldr	r3, [r3, #8]
 8012b14:	2b05      	cmp	r3, #5
 8012b16:	d10c      	bne.n	8012b32 <HAL_RCC_OscConfig+0x312>
 8012b18:	4b77      	ldr	r3, [pc, #476]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b1c:	4a76      	ldr	r2, [pc, #472]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b1e:	f043 0304 	orr.w	r3, r3, #4
 8012b22:	6713      	str	r3, [r2, #112]	; 0x70
 8012b24:	4b74      	ldr	r3, [pc, #464]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b28:	4a73      	ldr	r2, [pc, #460]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b2a:	f043 0301 	orr.w	r3, r3, #1
 8012b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8012b30:	e00b      	b.n	8012b4a <HAL_RCC_OscConfig+0x32a>
 8012b32:	4b71      	ldr	r3, [pc, #452]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b36:	4a70      	ldr	r2, [pc, #448]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b38:	f023 0301 	bic.w	r3, r3, #1
 8012b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8012b3e:	4b6e      	ldr	r3, [pc, #440]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b42:	4a6d      	ldr	r2, [pc, #436]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b44:	f023 0304 	bic.w	r3, r3, #4
 8012b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d015      	beq.n	8012b7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b52:	f7fc fc9b 	bl	800f48c <HAL_GetTick>
 8012b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012b58:	e00a      	b.n	8012b70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012b5a:	f7fc fc97 	bl	800f48c <HAL_GetTick>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	1ad3      	subs	r3, r2, r3
 8012b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d901      	bls.n	8012b70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012b6c:	2303      	movs	r3, #3
 8012b6e:	e0bc      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012b70:	4b61      	ldr	r3, [pc, #388]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b74:	f003 0302 	and.w	r3, r3, #2
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d0ee      	beq.n	8012b5a <HAL_RCC_OscConfig+0x33a>
 8012b7c:	e014      	b.n	8012ba8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b7e:	f7fc fc85 	bl	800f48c <HAL_GetTick>
 8012b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012b84:	e00a      	b.n	8012b9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012b86:	f7fc fc81 	bl	800f48c <HAL_GetTick>
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	1ad3      	subs	r3, r2, r3
 8012b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d901      	bls.n	8012b9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012b98:	2303      	movs	r3, #3
 8012b9a:	e0a6      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012b9c:	4b56      	ldr	r3, [pc, #344]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ba0:	f003 0302 	and.w	r3, r3, #2
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d1ee      	bne.n	8012b86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012ba8:	7dfb      	ldrb	r3, [r7, #23]
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d105      	bne.n	8012bba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012bae:	4b52      	ldr	r3, [pc, #328]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb2:	4a51      	ldr	r2, [pc, #324]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012bb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	699b      	ldr	r3, [r3, #24]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f000 8092 	beq.w	8012ce8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012bc4:	4b4c      	ldr	r3, [pc, #304]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	f003 030c 	and.w	r3, r3, #12
 8012bcc:	2b08      	cmp	r3, #8
 8012bce:	d05c      	beq.n	8012c8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	699b      	ldr	r3, [r3, #24]
 8012bd4:	2b02      	cmp	r3, #2
 8012bd6:	d141      	bne.n	8012c5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012bd8:	4b48      	ldr	r3, [pc, #288]	; (8012cfc <HAL_RCC_OscConfig+0x4dc>)
 8012bda:	2200      	movs	r2, #0
 8012bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012bde:	f7fc fc55 	bl	800f48c <HAL_GetTick>
 8012be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012be4:	e008      	b.n	8012bf8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012be6:	f7fc fc51 	bl	800f48c <HAL_GetTick>
 8012bea:	4602      	mov	r2, r0
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	1ad3      	subs	r3, r2, r3
 8012bf0:	2b02      	cmp	r3, #2
 8012bf2:	d901      	bls.n	8012bf8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012bf4:	2303      	movs	r3, #3
 8012bf6:	e078      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012bf8:	4b3f      	ldr	r3, [pc, #252]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d1f0      	bne.n	8012be6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	69da      	ldr	r2, [r3, #28]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a1b      	ldr	r3, [r3, #32]
 8012c0c:	431a      	orrs	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c12:	019b      	lsls	r3, r3, #6
 8012c14:	431a      	orrs	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c1a:	085b      	lsrs	r3, r3, #1
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	041b      	lsls	r3, r3, #16
 8012c20:	431a      	orrs	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c26:	061b      	lsls	r3, r3, #24
 8012c28:	4933      	ldr	r1, [pc, #204]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012c2e:	4b33      	ldr	r3, [pc, #204]	; (8012cfc <HAL_RCC_OscConfig+0x4dc>)
 8012c30:	2201      	movs	r2, #1
 8012c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012c34:	f7fc fc2a 	bl	800f48c <HAL_GetTick>
 8012c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012c3a:	e008      	b.n	8012c4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012c3c:	f7fc fc26 	bl	800f48c <HAL_GetTick>
 8012c40:	4602      	mov	r2, r0
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	1ad3      	subs	r3, r2, r3
 8012c46:	2b02      	cmp	r3, #2
 8012c48:	d901      	bls.n	8012c4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012c4a:	2303      	movs	r3, #3
 8012c4c:	e04d      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012c4e:	4b2a      	ldr	r3, [pc, #168]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d0f0      	beq.n	8012c3c <HAL_RCC_OscConfig+0x41c>
 8012c5a:	e045      	b.n	8012ce8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012c5c:	4b27      	ldr	r3, [pc, #156]	; (8012cfc <HAL_RCC_OscConfig+0x4dc>)
 8012c5e:	2200      	movs	r2, #0
 8012c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012c62:	f7fc fc13 	bl	800f48c <HAL_GetTick>
 8012c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012c68:	e008      	b.n	8012c7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012c6a:	f7fc fc0f 	bl	800f48c <HAL_GetTick>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	1ad3      	subs	r3, r2, r3
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d901      	bls.n	8012c7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012c78:	2303      	movs	r3, #3
 8012c7a:	e036      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012c7c:	4b1e      	ldr	r3, [pc, #120]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1f0      	bne.n	8012c6a <HAL_RCC_OscConfig+0x44a>
 8012c88:	e02e      	b.n	8012ce8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	699b      	ldr	r3, [r3, #24]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d101      	bne.n	8012c96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012c92:	2301      	movs	r3, #1
 8012c94:	e029      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012c96:	4b18      	ldr	r3, [pc, #96]	; (8012cf8 <HAL_RCC_OscConfig+0x4d8>)
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	69db      	ldr	r3, [r3, #28]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d11c      	bne.n	8012ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d115      	bne.n	8012ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012cbe:	4013      	ands	r3, r2
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d10d      	bne.n	8012ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d106      	bne.n	8012ce4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d001      	beq.n	8012ce8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	e000      	b.n	8012cea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8012ce8:	2300      	movs	r3, #0
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3718      	adds	r7, #24
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	40007000 	.word	0x40007000
 8012cf8:	40023800 	.word	0x40023800
 8012cfc:	42470060 	.word	0x42470060

08012d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d101      	bne.n	8012d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012d10:	2301      	movs	r3, #1
 8012d12:	e0cc      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012d14:	4b68      	ldr	r3, [pc, #416]	; (8012eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f003 030f 	and.w	r3, r3, #15
 8012d1c:	683a      	ldr	r2, [r7, #0]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d90c      	bls.n	8012d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012d22:	4b65      	ldr	r3, [pc, #404]	; (8012eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8012d24:	683a      	ldr	r2, [r7, #0]
 8012d26:	b2d2      	uxtb	r2, r2
 8012d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012d2a:	4b63      	ldr	r3, [pc, #396]	; (8012eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	f003 030f 	and.w	r3, r3, #15
 8012d32:	683a      	ldr	r2, [r7, #0]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d001      	beq.n	8012d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e0b8      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f003 0302 	and.w	r3, r3, #2
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d020      	beq.n	8012d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	f003 0304 	and.w	r3, r3, #4
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d005      	beq.n	8012d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012d54:	4b59      	ldr	r3, [pc, #356]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012d56:	689b      	ldr	r3, [r3, #8]
 8012d58:	4a58      	ldr	r2, [pc, #352]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f003 0308 	and.w	r3, r3, #8
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d005      	beq.n	8012d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012d6c:	4b53      	ldr	r3, [pc, #332]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012d6e:	689b      	ldr	r3, [r3, #8]
 8012d70:	4a52      	ldr	r2, [pc, #328]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012d78:	4b50      	ldr	r3, [pc, #320]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012d7a:	689b      	ldr	r3, [r3, #8]
 8012d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	494d      	ldr	r1, [pc, #308]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012d86:	4313      	orrs	r3, r2
 8012d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 0301 	and.w	r3, r3, #1
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d044      	beq.n	8012e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d107      	bne.n	8012dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d9e:	4b47      	ldr	r3, [pc, #284]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d119      	bne.n	8012dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012daa:	2301      	movs	r3, #1
 8012dac:	e07f      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	2b02      	cmp	r3, #2
 8012db4:	d003      	beq.n	8012dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012dba:	2b03      	cmp	r3, #3
 8012dbc:	d107      	bne.n	8012dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012dbe:	4b3f      	ldr	r3, [pc, #252]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d109      	bne.n	8012dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	e06f      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012dce:	4b3b      	ldr	r3, [pc, #236]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	f003 0302 	and.w	r3, r3, #2
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d101      	bne.n	8012dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	e067      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012dde:	4b37      	ldr	r3, [pc, #220]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	f023 0203 	bic.w	r2, r3, #3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	4934      	ldr	r1, [pc, #208]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012dec:	4313      	orrs	r3, r2
 8012dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012df0:	f7fc fb4c 	bl	800f48c <HAL_GetTick>
 8012df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012df6:	e00a      	b.n	8012e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012df8:	f7fc fb48 	bl	800f48c <HAL_GetTick>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	1ad3      	subs	r3, r2, r3
 8012e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e06:	4293      	cmp	r3, r2
 8012e08:	d901      	bls.n	8012e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012e0a:	2303      	movs	r3, #3
 8012e0c:	e04f      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012e0e:	4b2b      	ldr	r3, [pc, #172]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012e10:	689b      	ldr	r3, [r3, #8]
 8012e12:	f003 020c 	and.w	r2, r3, #12
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	009b      	lsls	r3, r3, #2
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d1eb      	bne.n	8012df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012e20:	4b25      	ldr	r3, [pc, #148]	; (8012eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	f003 030f 	and.w	r3, r3, #15
 8012e28:	683a      	ldr	r2, [r7, #0]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d20c      	bcs.n	8012e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e2e:	4b22      	ldr	r3, [pc, #136]	; (8012eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8012e30:	683a      	ldr	r2, [r7, #0]
 8012e32:	b2d2      	uxtb	r2, r2
 8012e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012e36:	4b20      	ldr	r3, [pc, #128]	; (8012eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f003 030f 	and.w	r3, r3, #15
 8012e3e:	683a      	ldr	r2, [r7, #0]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d001      	beq.n	8012e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012e44:	2301      	movs	r3, #1
 8012e46:	e032      	b.n	8012eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f003 0304 	and.w	r3, r3, #4
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d008      	beq.n	8012e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012e54:	4b19      	ldr	r3, [pc, #100]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012e56:	689b      	ldr	r3, [r3, #8]
 8012e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	68db      	ldr	r3, [r3, #12]
 8012e60:	4916      	ldr	r1, [pc, #88]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012e62:	4313      	orrs	r3, r2
 8012e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f003 0308 	and.w	r3, r3, #8
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d009      	beq.n	8012e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012e72:	4b12      	ldr	r3, [pc, #72]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	691b      	ldr	r3, [r3, #16]
 8012e7e:	00db      	lsls	r3, r3, #3
 8012e80:	490e      	ldr	r1, [pc, #56]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012e82:	4313      	orrs	r3, r2
 8012e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012e86:	f000 f82d 	bl	8012ee4 <HAL_RCC_GetSysClockFreq>
 8012e8a:	4602      	mov	r2, r0
 8012e8c:	4b0b      	ldr	r3, [pc, #44]	; (8012ebc <HAL_RCC_ClockConfig+0x1bc>)
 8012e8e:	689b      	ldr	r3, [r3, #8]
 8012e90:	091b      	lsrs	r3, r3, #4
 8012e92:	f003 030f 	and.w	r3, r3, #15
 8012e96:	490a      	ldr	r1, [pc, #40]	; (8012ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8012e98:	5ccb      	ldrb	r3, [r1, r3]
 8012e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8012e9e:	4a09      	ldr	r2, [pc, #36]	; (8012ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8012ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012ea2:	4b09      	ldr	r3, [pc, #36]	; (8012ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7f9 f8d2 	bl	800c050 <HAL_InitTick>

  return HAL_OK;
 8012eac:	2300      	movs	r3, #0
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	40023c00 	.word	0x40023c00
 8012ebc:	40023800 	.word	0x40023800
 8012ec0:	08021284 	.word	0x08021284
 8012ec4:	20000268 	.word	0x20000268
 8012ec8:	20000278 	.word	0x20000278

08012ecc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8012ed0:	4b03      	ldr	r3, [pc, #12]	; (8012ee0 <HAL_RCC_EnableCSS+0x14>)
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	601a      	str	r2, [r3, #0]
}
 8012ed6:	bf00      	nop
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr
 8012ee0:	4247004c 	.word	0x4247004c

08012ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012ee4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012ee8:	b084      	sub	sp, #16
 8012eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012eec:	2300      	movs	r3, #0
 8012eee:	607b      	str	r3, [r7, #4]
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012efc:	4b67      	ldr	r3, [pc, #412]	; (801309c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012efe:	689b      	ldr	r3, [r3, #8]
 8012f00:	f003 030c 	and.w	r3, r3, #12
 8012f04:	2b08      	cmp	r3, #8
 8012f06:	d00d      	beq.n	8012f24 <HAL_RCC_GetSysClockFreq+0x40>
 8012f08:	2b08      	cmp	r3, #8
 8012f0a:	f200 80bd 	bhi.w	8013088 <HAL_RCC_GetSysClockFreq+0x1a4>
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d002      	beq.n	8012f18 <HAL_RCC_GetSysClockFreq+0x34>
 8012f12:	2b04      	cmp	r3, #4
 8012f14:	d003      	beq.n	8012f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8012f16:	e0b7      	b.n	8013088 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012f18:	4b61      	ldr	r3, [pc, #388]	; (80130a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012f1a:	60bb      	str	r3, [r7, #8]
       break;
 8012f1c:	e0b7      	b.n	801308e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012f1e:	4b61      	ldr	r3, [pc, #388]	; (80130a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8012f20:	60bb      	str	r3, [r7, #8]
      break;
 8012f22:	e0b4      	b.n	801308e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012f24:	4b5d      	ldr	r3, [pc, #372]	; (801309c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012f2e:	4b5b      	ldr	r3, [pc, #364]	; (801309c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d04d      	beq.n	8012fd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012f3a:	4b58      	ldr	r3, [pc, #352]	; (801309c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	099b      	lsrs	r3, r3, #6
 8012f40:	461a      	mov	r2, r3
 8012f42:	f04f 0300 	mov.w	r3, #0
 8012f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012f4a:	f04f 0100 	mov.w	r1, #0
 8012f4e:	ea02 0800 	and.w	r8, r2, r0
 8012f52:	ea03 0901 	and.w	r9, r3, r1
 8012f56:	4640      	mov	r0, r8
 8012f58:	4649      	mov	r1, r9
 8012f5a:	f04f 0200 	mov.w	r2, #0
 8012f5e:	f04f 0300 	mov.w	r3, #0
 8012f62:	014b      	lsls	r3, r1, #5
 8012f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012f68:	0142      	lsls	r2, r0, #5
 8012f6a:	4610      	mov	r0, r2
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	ebb0 0008 	subs.w	r0, r0, r8
 8012f72:	eb61 0109 	sbc.w	r1, r1, r9
 8012f76:	f04f 0200 	mov.w	r2, #0
 8012f7a:	f04f 0300 	mov.w	r3, #0
 8012f7e:	018b      	lsls	r3, r1, #6
 8012f80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012f84:	0182      	lsls	r2, r0, #6
 8012f86:	1a12      	subs	r2, r2, r0
 8012f88:	eb63 0301 	sbc.w	r3, r3, r1
 8012f8c:	f04f 0000 	mov.w	r0, #0
 8012f90:	f04f 0100 	mov.w	r1, #0
 8012f94:	00d9      	lsls	r1, r3, #3
 8012f96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012f9a:	00d0      	lsls	r0, r2, #3
 8012f9c:	4602      	mov	r2, r0
 8012f9e:	460b      	mov	r3, r1
 8012fa0:	eb12 0208 	adds.w	r2, r2, r8
 8012fa4:	eb43 0309 	adc.w	r3, r3, r9
 8012fa8:	f04f 0000 	mov.w	r0, #0
 8012fac:	f04f 0100 	mov.w	r1, #0
 8012fb0:	0259      	lsls	r1, r3, #9
 8012fb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8012fb6:	0250      	lsls	r0, r2, #9
 8012fb8:	4602      	mov	r2, r0
 8012fba:	460b      	mov	r3, r1
 8012fbc:	4610      	mov	r0, r2
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	f04f 0300 	mov.w	r3, #0
 8012fc8:	f7ed fe5e 	bl	8000c88 <__aeabi_uldivmod>
 8012fcc:	4602      	mov	r2, r0
 8012fce:	460b      	mov	r3, r1
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	60fb      	str	r3, [r7, #12]
 8012fd4:	e04a      	b.n	801306c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012fd6:	4b31      	ldr	r3, [pc, #196]	; (801309c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	099b      	lsrs	r3, r3, #6
 8012fdc:	461a      	mov	r2, r3
 8012fde:	f04f 0300 	mov.w	r3, #0
 8012fe2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012fe6:	f04f 0100 	mov.w	r1, #0
 8012fea:	ea02 0400 	and.w	r4, r2, r0
 8012fee:	ea03 0501 	and.w	r5, r3, r1
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	f04f 0200 	mov.w	r2, #0
 8012ffa:	f04f 0300 	mov.w	r3, #0
 8012ffe:	014b      	lsls	r3, r1, #5
 8013000:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013004:	0142      	lsls	r2, r0, #5
 8013006:	4610      	mov	r0, r2
 8013008:	4619      	mov	r1, r3
 801300a:	1b00      	subs	r0, r0, r4
 801300c:	eb61 0105 	sbc.w	r1, r1, r5
 8013010:	f04f 0200 	mov.w	r2, #0
 8013014:	f04f 0300 	mov.w	r3, #0
 8013018:	018b      	lsls	r3, r1, #6
 801301a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801301e:	0182      	lsls	r2, r0, #6
 8013020:	1a12      	subs	r2, r2, r0
 8013022:	eb63 0301 	sbc.w	r3, r3, r1
 8013026:	f04f 0000 	mov.w	r0, #0
 801302a:	f04f 0100 	mov.w	r1, #0
 801302e:	00d9      	lsls	r1, r3, #3
 8013030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013034:	00d0      	lsls	r0, r2, #3
 8013036:	4602      	mov	r2, r0
 8013038:	460b      	mov	r3, r1
 801303a:	1912      	adds	r2, r2, r4
 801303c:	eb45 0303 	adc.w	r3, r5, r3
 8013040:	f04f 0000 	mov.w	r0, #0
 8013044:	f04f 0100 	mov.w	r1, #0
 8013048:	0299      	lsls	r1, r3, #10
 801304a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801304e:	0290      	lsls	r0, r2, #10
 8013050:	4602      	mov	r2, r0
 8013052:	460b      	mov	r3, r1
 8013054:	4610      	mov	r0, r2
 8013056:	4619      	mov	r1, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	461a      	mov	r2, r3
 801305c:	f04f 0300 	mov.w	r3, #0
 8013060:	f7ed fe12 	bl	8000c88 <__aeabi_uldivmod>
 8013064:	4602      	mov	r2, r0
 8013066:	460b      	mov	r3, r1
 8013068:	4613      	mov	r3, r2
 801306a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801306c:	4b0b      	ldr	r3, [pc, #44]	; (801309c <HAL_RCC_GetSysClockFreq+0x1b8>)
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	0c1b      	lsrs	r3, r3, #16
 8013072:	f003 0303 	and.w	r3, r3, #3
 8013076:	3301      	adds	r3, #1
 8013078:	005b      	lsls	r3, r3, #1
 801307a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801307c:	68fa      	ldr	r2, [r7, #12]
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	fbb2 f3f3 	udiv	r3, r2, r3
 8013084:	60bb      	str	r3, [r7, #8]
      break;
 8013086:	e002      	b.n	801308e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013088:	4b05      	ldr	r3, [pc, #20]	; (80130a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801308a:	60bb      	str	r3, [r7, #8]
      break;
 801308c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801308e:	68bb      	ldr	r3, [r7, #8]
}
 8013090:	4618      	mov	r0, r3
 8013092:	3710      	adds	r7, #16
 8013094:	46bd      	mov	sp, r7
 8013096:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801309a:	bf00      	nop
 801309c:	40023800 	.word	0x40023800
 80130a0:	00f42400 	.word	0x00f42400
 80130a4:	007a1200 	.word	0x007a1200

080130a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80130a8:	b480      	push	{r7}
 80130aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80130ac:	4b03      	ldr	r3, [pc, #12]	; (80130bc <HAL_RCC_GetHCLKFreq+0x14>)
 80130ae:	681b      	ldr	r3, [r3, #0]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	46bd      	mov	sp, r7
 80130b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b8:	4770      	bx	lr
 80130ba:	bf00      	nop
 80130bc:	20000268 	.word	0x20000268

080130c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80130c4:	f7ff fff0 	bl	80130a8 <HAL_RCC_GetHCLKFreq>
 80130c8:	4602      	mov	r2, r0
 80130ca:	4b05      	ldr	r3, [pc, #20]	; (80130e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80130cc:	689b      	ldr	r3, [r3, #8]
 80130ce:	0a9b      	lsrs	r3, r3, #10
 80130d0:	f003 0307 	and.w	r3, r3, #7
 80130d4:	4903      	ldr	r1, [pc, #12]	; (80130e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80130d6:	5ccb      	ldrb	r3, [r1, r3]
 80130d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80130dc:	4618      	mov	r0, r3
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	40023800 	.word	0x40023800
 80130e4:	08021294 	.word	0x08021294

080130e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80130ec:	f7ff ffdc 	bl	80130a8 <HAL_RCC_GetHCLKFreq>
 80130f0:	4602      	mov	r2, r0
 80130f2:	4b05      	ldr	r3, [pc, #20]	; (8013108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80130f4:	689b      	ldr	r3, [r3, #8]
 80130f6:	0b5b      	lsrs	r3, r3, #13
 80130f8:	f003 0307 	and.w	r3, r3, #7
 80130fc:	4903      	ldr	r1, [pc, #12]	; (801310c <HAL_RCC_GetPCLK2Freq+0x24>)
 80130fe:	5ccb      	ldrb	r3, [r1, r3]
 8013100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013104:	4618      	mov	r0, r3
 8013106:	bd80      	pop	{r7, pc}
 8013108:	40023800 	.word	0x40023800
 801310c:	08021294 	.word	0x08021294

08013110 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	220f      	movs	r2, #15
 801311e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013120:	4b12      	ldr	r3, [pc, #72]	; (801316c <HAL_RCC_GetClockConfig+0x5c>)
 8013122:	689b      	ldr	r3, [r3, #8]
 8013124:	f003 0203 	and.w	r2, r3, #3
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801312c:	4b0f      	ldr	r3, [pc, #60]	; (801316c <HAL_RCC_GetClockConfig+0x5c>)
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013138:	4b0c      	ldr	r3, [pc, #48]	; (801316c <HAL_RCC_GetClockConfig+0x5c>)
 801313a:	689b      	ldr	r3, [r3, #8]
 801313c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013144:	4b09      	ldr	r3, [pc, #36]	; (801316c <HAL_RCC_GetClockConfig+0x5c>)
 8013146:	689b      	ldr	r3, [r3, #8]
 8013148:	08db      	lsrs	r3, r3, #3
 801314a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013152:	4b07      	ldr	r3, [pc, #28]	; (8013170 <HAL_RCC_GetClockConfig+0x60>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f003 020f 	and.w	r2, r3, #15
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	601a      	str	r2, [r3, #0]
}
 801315e:	bf00      	nop
 8013160:	370c      	adds	r7, #12
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	40023800 	.word	0x40023800
 8013170:	40023c00 	.word	0x40023c00

08013174 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	689b      	ldr	r3, [r3, #8]
 801318a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	099b      	lsrs	r3, r3, #6
 8013190:	f003 0301 	and.w	r3, r3, #1
 8013194:	2b00      	cmp	r3, #0
 8013196:	d10f      	bne.n	80131b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00a      	beq.n	80131b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	099b      	lsrs	r3, r3, #6
 80131a6:	f003 0301 	and.w	r3, r3, #1
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d004      	beq.n	80131b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	4798      	blx	r3
    return;
 80131b6:	e0d7      	b.n	8013368 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	085b      	lsrs	r3, r3, #1
 80131bc:	f003 0301 	and.w	r3, r3, #1
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00a      	beq.n	80131da <HAL_SPI_IRQHandler+0x66>
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	09db      	lsrs	r3, r3, #7
 80131c8:	f003 0301 	and.w	r3, r3, #1
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d004      	beq.n	80131da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	4798      	blx	r3
    return;
 80131d8:	e0c6      	b.n	8013368 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	095b      	lsrs	r3, r3, #5
 80131de:	f003 0301 	and.w	r3, r3, #1
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d10c      	bne.n	8013200 <HAL_SPI_IRQHandler+0x8c>
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	099b      	lsrs	r3, r3, #6
 80131ea:	f003 0301 	and.w	r3, r3, #1
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80131f2:	69bb      	ldr	r3, [r7, #24]
 80131f4:	0a1b      	lsrs	r3, r3, #8
 80131f6:	f003 0301 	and.w	r3, r3, #1
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	f000 80b4 	beq.w	8013368 <HAL_SPI_IRQHandler+0x1f4>
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	095b      	lsrs	r3, r3, #5
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	f000 80ad 	beq.w	8013368 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	099b      	lsrs	r3, r3, #6
 8013212:	f003 0301 	and.w	r3, r3, #1
 8013216:	2b00      	cmp	r3, #0
 8013218:	d023      	beq.n	8013262 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013220:	b2db      	uxtb	r3, r3
 8013222:	2b03      	cmp	r3, #3
 8013224:	d011      	beq.n	801324a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801322a:	f043 0204 	orr.w	r2, r3, #4
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013232:	2300      	movs	r3, #0
 8013234:	617b      	str	r3, [r7, #20]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	617b      	str	r3, [r7, #20]
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	617b      	str	r3, [r7, #20]
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	e00b      	b.n	8013262 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801324a:	2300      	movs	r3, #0
 801324c:	613b      	str	r3, [r7, #16]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	613b      	str	r3, [r7, #16]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	613b      	str	r3, [r7, #16]
 801325e:	693b      	ldr	r3, [r7, #16]
        return;
 8013260:	e082      	b.n	8013368 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	095b      	lsrs	r3, r3, #5
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	d014      	beq.n	8013298 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013272:	f043 0201 	orr.w	r2, r3, #1
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801327a:	2300      	movs	r3, #0
 801327c:	60fb      	str	r3, [r7, #12]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	689b      	ldr	r3, [r3, #8]
 8013284:	60fb      	str	r3, [r7, #12]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013294:	601a      	str	r2, [r3, #0]
 8013296:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013298:	69bb      	ldr	r3, [r7, #24]
 801329a:	0a1b      	lsrs	r3, r3, #8
 801329c:	f003 0301 	and.w	r3, r3, #1
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00c      	beq.n	80132be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132a8:	f043 0208 	orr.w	r2, r3, #8
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80132b0:	2300      	movs	r3, #0
 80132b2:	60bb      	str	r3, [r7, #8]
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	60bb      	str	r3, [r7, #8]
 80132bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d04f      	beq.n	8013366 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	685a      	ldr	r2, [r3, #4]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80132d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2201      	movs	r2, #1
 80132da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	f003 0302 	and.w	r3, r3, #2
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d104      	bne.n	80132f2 <HAL_SPI_IRQHandler+0x17e>
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	f003 0301 	and.w	r3, r3, #1
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d034      	beq.n	801335c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	685a      	ldr	r2, [r3, #4]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f022 0203 	bic.w	r2, r2, #3
 8013300:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013306:	2b00      	cmp	r3, #0
 8013308:	d011      	beq.n	801332e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801330e:	4a18      	ldr	r2, [pc, #96]	; (8013370 <HAL_SPI_IRQHandler+0x1fc>)
 8013310:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013316:	4618      	mov	r0, r3
 8013318:	f7fd f966 	bl	80105e8 <HAL_DMA_Abort_IT>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d005      	beq.n	801332e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013332:	2b00      	cmp	r3, #0
 8013334:	d016      	beq.n	8013364 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801333a:	4a0d      	ldr	r2, [pc, #52]	; (8013370 <HAL_SPI_IRQHandler+0x1fc>)
 801333c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013342:	4618      	mov	r0, r3
 8013344:	f7fd f950 	bl	80105e8 <HAL_DMA_Abort_IT>
 8013348:	4603      	mov	r3, r0
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00a      	beq.n	8013364 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801335a:	e003      	b.n	8013364 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 f809 	bl	8013374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013362:	e000      	b.n	8013366 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8013364:	bf00      	nop
    return;
 8013366:	bf00      	nop
  }
}
 8013368:	3720      	adds	r7, #32
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	08013389 	.word	0x08013389

08013374 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8013374:	b480      	push	{r7}
 8013376:	b083      	sub	sp, #12
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801337c:	bf00      	nop
 801337e:	370c      	adds	r7, #12
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013394:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2200      	movs	r2, #0
 801339a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2200      	movs	r2, #0
 80133a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f7ff ffe6 	bl	8013374 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80133a8:	bf00      	nop
 80133aa:	3710      	adds	r7, #16
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d101      	bne.n	80133c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80133be:	2301      	movs	r3, #1
 80133c0:	e01d      	b.n	80133fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d106      	bne.n	80133dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2200      	movs	r2, #0
 80133d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f7ef fa72 	bl	80028c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2202      	movs	r2, #2
 80133e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	3304      	adds	r3, #4
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	f000 fc3e 	bl	8013c70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2201      	movs	r2, #1
 80133f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3708      	adds	r7, #8
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}

08013406 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013406:	b480      	push	{r7}
 8013408:	b085      	sub	sp, #20
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2202      	movs	r2, #2
 8013412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	689b      	ldr	r3, [r3, #8]
 801341c:	f003 0307 	and.w	r3, r3, #7
 8013420:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b06      	cmp	r3, #6
 8013426:	d007      	beq.n	8013438 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f042 0201 	orr.w	r2, r2, #1
 8013436:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2201      	movs	r2, #1
 801343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8013440:	2300      	movs	r3, #0
}
 8013442:	4618      	mov	r0, r3
 8013444:	3714      	adds	r7, #20
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr

0801344e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801344e:	b480      	push	{r7}
 8013450:	b085      	sub	sp, #20
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	68da      	ldr	r2, [r3, #12]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f042 0201 	orr.w	r2, r2, #1
 8013464:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	689b      	ldr	r3, [r3, #8]
 801346c:	f003 0307 	and.w	r3, r3, #7
 8013470:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b06      	cmp	r3, #6
 8013476:	d007      	beq.n	8013488 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f042 0201 	orr.w	r2, r2, #1
 8013486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013488:	2300      	movs	r3, #0
}
 801348a:	4618      	mov	r0, r3
 801348c:	3714      	adds	r7, #20
 801348e:	46bd      	mov	sp, r7
 8013490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013494:	4770      	bx	lr

08013496 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013496:	b580      	push	{r7, lr}
 8013498:	b082      	sub	sp, #8
 801349a:	af00      	add	r7, sp, #0
 801349c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d101      	bne.n	80134a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80134a4:	2301      	movs	r3, #1
 80134a6:	e01d      	b.n	80134e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d106      	bne.n	80134c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f7ef f8c1 	bl	8002644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2202      	movs	r2, #2
 80134c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	3304      	adds	r3, #4
 80134d2:	4619      	mov	r1, r3
 80134d4:	4610      	mov	r0, r2
 80134d6:	f000 fbcb 	bl	8013c70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2201      	movs	r2, #1
 80134de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80134e2:	2300      	movs	r3, #0
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3708      	adds	r7, #8
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}

080134ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2201      	movs	r2, #1
 80134fc:	6839      	ldr	r1, [r7, #0]
 80134fe:	4618      	mov	r0, r3
 8013500:	f000 fea0 	bl	8014244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	4a15      	ldr	r2, [pc, #84]	; (8013560 <HAL_TIM_PWM_Start+0x74>)
 801350a:	4293      	cmp	r3, r2
 801350c:	d004      	beq.n	8013518 <HAL_TIM_PWM_Start+0x2c>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	4a14      	ldr	r2, [pc, #80]	; (8013564 <HAL_TIM_PWM_Start+0x78>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d101      	bne.n	801351c <HAL_TIM_PWM_Start+0x30>
 8013518:	2301      	movs	r3, #1
 801351a:	e000      	b.n	801351e <HAL_TIM_PWM_Start+0x32>
 801351c:	2300      	movs	r3, #0
 801351e:	2b00      	cmp	r3, #0
 8013520:	d007      	beq.n	8013532 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	689b      	ldr	r3, [r3, #8]
 8013538:	f003 0307 	and.w	r3, r3, #7
 801353c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2b06      	cmp	r3, #6
 8013542:	d007      	beq.n	8013554 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f042 0201 	orr.w	r2, r2, #1
 8013552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013554:	2300      	movs	r3, #0
}
 8013556:	4618      	mov	r0, r3
 8013558:	3710      	adds	r7, #16
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	40010000 	.word	0x40010000
 8013564:	40010400 	.word	0x40010400

08013568 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b086      	sub	sp, #24
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8013578:	2301      	movs	r3, #1
 801357a:	e083      	b.n	8013684 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013582:	b2db      	uxtb	r3, r3
 8013584:	2b00      	cmp	r3, #0
 8013586:	d106      	bne.n	8013596 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2200      	movs	r2, #0
 801358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7ef fc49 	bl	8002e28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2202      	movs	r2, #2
 801359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	6812      	ldr	r2, [r2, #0]
 80135a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80135ac:	f023 0307 	bic.w	r3, r3, #7
 80135b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	3304      	adds	r3, #4
 80135ba:	4619      	mov	r1, r3
 80135bc:	4610      	mov	r0, r2
 80135be:	f000 fb57 	bl	8013c70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	689b      	ldr	r3, [r3, #8]
 80135c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	699b      	ldr	r3, [r3, #24]
 80135d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	6a1b      	ldr	r3, [r3, #32]
 80135d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	697a      	ldr	r2, [r7, #20]
 80135e0:	4313      	orrs	r3, r2
 80135e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80135ea:	f023 0303 	bic.w	r3, r3, #3
 80135ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	689a      	ldr	r2, [r3, #8]
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	699b      	ldr	r3, [r3, #24]
 80135f8:	021b      	lsls	r3, r3, #8
 80135fa:	4313      	orrs	r3, r2
 80135fc:	693a      	ldr	r2, [r7, #16]
 80135fe:	4313      	orrs	r3, r2
 8013600:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013608:	f023 030c 	bic.w	r3, r3, #12
 801360c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	68da      	ldr	r2, [r3, #12]
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	69db      	ldr	r3, [r3, #28]
 8013622:	021b      	lsls	r3, r3, #8
 8013624:	4313      	orrs	r3, r2
 8013626:	693a      	ldr	r2, [r7, #16]
 8013628:	4313      	orrs	r3, r2
 801362a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	691b      	ldr	r3, [r3, #16]
 8013630:	011a      	lsls	r2, r3, #4
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	6a1b      	ldr	r3, [r3, #32]
 8013636:	031b      	lsls	r3, r3, #12
 8013638:	4313      	orrs	r3, r2
 801363a:	693a      	ldr	r2, [r7, #16]
 801363c:	4313      	orrs	r3, r2
 801363e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8013646:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801364e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	685a      	ldr	r2, [r3, #4]
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	695b      	ldr	r3, [r3, #20]
 8013658:	011b      	lsls	r3, r3, #4
 801365a:	4313      	orrs	r3, r2
 801365c:	68fa      	ldr	r2, [r7, #12]
 801365e:	4313      	orrs	r3, r2
 8013660:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	697a      	ldr	r2, [r7, #20]
 8013668:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	693a      	ldr	r2, [r7, #16]
 8013670:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	68fa      	ldr	r2, [r7, #12]
 8013678:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2201      	movs	r2, #1
 801367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013682:	2300      	movs	r3, #0
}
 8013684:	4618      	mov	r0, r3
 8013686:	3718      	adds	r7, #24
 8013688:	46bd      	mov	sp, r7
 801368a:	bd80      	pop	{r7, pc}

0801368c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b082      	sub	sp, #8
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d003      	beq.n	80136a4 <HAL_TIM_Encoder_Start+0x18>
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	2b04      	cmp	r3, #4
 80136a0:	d008      	beq.n	80136b4 <HAL_TIM_Encoder_Start+0x28>
 80136a2:	e00f      	b.n	80136c4 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2201      	movs	r2, #1
 80136aa:	2100      	movs	r1, #0
 80136ac:	4618      	mov	r0, r3
 80136ae:	f000 fdc9 	bl	8014244 <TIM_CCxChannelCmd>
      break;
 80136b2:	e016      	b.n	80136e2 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2201      	movs	r2, #1
 80136ba:	2104      	movs	r1, #4
 80136bc:	4618      	mov	r0, r3
 80136be:	f000 fdc1 	bl	8014244 <TIM_CCxChannelCmd>
      break;
 80136c2:	e00e      	b.n	80136e2 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2201      	movs	r2, #1
 80136ca:	2100      	movs	r1, #0
 80136cc:	4618      	mov	r0, r3
 80136ce:	f000 fdb9 	bl	8014244 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2201      	movs	r2, #1
 80136d8:	2104      	movs	r1, #4
 80136da:	4618      	mov	r0, r3
 80136dc:	f000 fdb2 	bl	8014244 <TIM_CCxChannelCmd>
      break;
 80136e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f042 0201 	orr.w	r2, r2, #1
 80136f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80136f2:	2300      	movs	r3, #0
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}

080136fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	691b      	ldr	r3, [r3, #16]
 801370a:	f003 0302 	and.w	r3, r3, #2
 801370e:	2b02      	cmp	r3, #2
 8013710:	d122      	bne.n	8013758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	f003 0302 	and.w	r3, r3, #2
 801371c:	2b02      	cmp	r3, #2
 801371e:	d11b      	bne.n	8013758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f06f 0202 	mvn.w	r2, #2
 8013728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2201      	movs	r2, #1
 801372e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	699b      	ldr	r3, [r3, #24]
 8013736:	f003 0303 	and.w	r3, r3, #3
 801373a:	2b00      	cmp	r3, #0
 801373c:	d003      	beq.n	8013746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f000 fa78 	bl	8013c34 <HAL_TIM_IC_CaptureCallback>
 8013744:	e005      	b.n	8013752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 fa6a 	bl	8013c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f000 fa7b 	bl	8013c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2200      	movs	r2, #0
 8013756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	691b      	ldr	r3, [r3, #16]
 801375e:	f003 0304 	and.w	r3, r3, #4
 8013762:	2b04      	cmp	r3, #4
 8013764:	d122      	bne.n	80137ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	68db      	ldr	r3, [r3, #12]
 801376c:	f003 0304 	and.w	r3, r3, #4
 8013770:	2b04      	cmp	r3, #4
 8013772:	d11b      	bne.n	80137ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f06f 0204 	mvn.w	r2, #4
 801377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2202      	movs	r2, #2
 8013782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	699b      	ldr	r3, [r3, #24]
 801378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801378e:	2b00      	cmp	r3, #0
 8013790:	d003      	beq.n	801379a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f000 fa4e 	bl	8013c34 <HAL_TIM_IC_CaptureCallback>
 8013798:	e005      	b.n	80137a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 fa40 	bl	8013c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f000 fa51 	bl	8013c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	f003 0308 	and.w	r3, r3, #8
 80137b6:	2b08      	cmp	r3, #8
 80137b8:	d122      	bne.n	8013800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	f003 0308 	and.w	r3, r3, #8
 80137c4:	2b08      	cmp	r3, #8
 80137c6:	d11b      	bne.n	8013800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	f06f 0208 	mvn.w	r2, #8
 80137d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2204      	movs	r2, #4
 80137d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	69db      	ldr	r3, [r3, #28]
 80137de:	f003 0303 	and.w	r3, r3, #3
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d003      	beq.n	80137ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f000 fa24 	bl	8013c34 <HAL_TIM_IC_CaptureCallback>
 80137ec:	e005      	b.n	80137fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f000 fa16 	bl	8013c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fa27 	bl	8013c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2200      	movs	r2, #0
 80137fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	f003 0310 	and.w	r3, r3, #16
 801380a:	2b10      	cmp	r3, #16
 801380c:	d122      	bne.n	8013854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	68db      	ldr	r3, [r3, #12]
 8013814:	f003 0310 	and.w	r3, r3, #16
 8013818:	2b10      	cmp	r3, #16
 801381a:	d11b      	bne.n	8013854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f06f 0210 	mvn.w	r2, #16
 8013824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2208      	movs	r2, #8
 801382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	69db      	ldr	r3, [r3, #28]
 8013832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013836:	2b00      	cmp	r3, #0
 8013838:	d003      	beq.n	8013842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f000 f9fa 	bl	8013c34 <HAL_TIM_IC_CaptureCallback>
 8013840:	e005      	b.n	801384e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 f9ec 	bl	8013c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f000 f9fd 	bl	8013c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	f003 0301 	and.w	r3, r3, #1
 801385e:	2b01      	cmp	r3, #1
 8013860:	d10e      	bne.n	8013880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	f003 0301 	and.w	r3, r3, #1
 801386c:	2b01      	cmp	r3, #1
 801386e:	d107      	bne.n	8013880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	f06f 0201 	mvn.w	r2, #1
 8013878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7f7 fe9e 	bl	800b5bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801388a:	2b80      	cmp	r3, #128	; 0x80
 801388c:	d10e      	bne.n	80138ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013898:	2b80      	cmp	r3, #128	; 0x80
 801389a:	d107      	bne.n	80138ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80138a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f000 fd78 	bl	801439c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	691b      	ldr	r3, [r3, #16]
 80138b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138b6:	2b40      	cmp	r3, #64	; 0x40
 80138b8:	d10e      	bne.n	80138d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138c4:	2b40      	cmp	r3, #64	; 0x40
 80138c6:	d107      	bne.n	80138d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80138d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 f9c2 	bl	8013c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	f003 0320 	and.w	r3, r3, #32
 80138e2:	2b20      	cmp	r3, #32
 80138e4:	d10e      	bne.n	8013904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	f003 0320 	and.w	r3, r3, #32
 80138f0:	2b20      	cmp	r3, #32
 80138f2:	d107      	bne.n	8013904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f06f 0220 	mvn.w	r2, #32
 80138fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f000 fd42 	bl	8014388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013904:	bf00      	nop
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b084      	sub	sp, #16
 8013910:	af00      	add	r7, sp, #0
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801391e:	2b01      	cmp	r3, #1
 8013920:	d101      	bne.n	8013926 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8013922:	2302      	movs	r3, #2
 8013924:	e0b4      	b.n	8013a90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2201      	movs	r2, #1
 801392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2202      	movs	r2, #2
 8013932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2b0c      	cmp	r3, #12
 801393a:	f200 809f 	bhi.w	8013a7c <HAL_TIM_PWM_ConfigChannel+0x170>
 801393e:	a201      	add	r2, pc, #4	; (adr r2, 8013944 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8013940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013944:	08013979 	.word	0x08013979
 8013948:	08013a7d 	.word	0x08013a7d
 801394c:	08013a7d 	.word	0x08013a7d
 8013950:	08013a7d 	.word	0x08013a7d
 8013954:	080139b9 	.word	0x080139b9
 8013958:	08013a7d 	.word	0x08013a7d
 801395c:	08013a7d 	.word	0x08013a7d
 8013960:	08013a7d 	.word	0x08013a7d
 8013964:	080139fb 	.word	0x080139fb
 8013968:	08013a7d 	.word	0x08013a7d
 801396c:	08013a7d 	.word	0x08013a7d
 8013970:	08013a7d 	.word	0x08013a7d
 8013974:	08013a3b 	.word	0x08013a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	68b9      	ldr	r1, [r7, #8]
 801397e:	4618      	mov	r0, r3
 8013980:	f000 fa16 	bl	8013db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	699a      	ldr	r2, [r3, #24]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f042 0208 	orr.w	r2, r2, #8
 8013992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	699a      	ldr	r2, [r3, #24]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f022 0204 	bic.w	r2, r2, #4
 80139a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	6999      	ldr	r1, [r3, #24]
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	691a      	ldr	r2, [r3, #16]
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	430a      	orrs	r2, r1
 80139b4:	619a      	str	r2, [r3, #24]
      break;
 80139b6:	e062      	b.n	8013a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	68b9      	ldr	r1, [r7, #8]
 80139be:	4618      	mov	r0, r3
 80139c0:	f000 fa66 	bl	8013e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	699a      	ldr	r2, [r3, #24]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80139d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	699a      	ldr	r2, [r3, #24]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80139e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	6999      	ldr	r1, [r3, #24]
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	021a      	lsls	r2, r3, #8
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	430a      	orrs	r2, r1
 80139f6:	619a      	str	r2, [r3, #24]
      break;
 80139f8:	e041      	b.n	8013a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	68b9      	ldr	r1, [r7, #8]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f000 fabb 	bl	8013f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	69da      	ldr	r2, [r3, #28]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f042 0208 	orr.w	r2, r2, #8
 8013a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	69da      	ldr	r2, [r3, #28]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f022 0204 	bic.w	r2, r2, #4
 8013a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	69d9      	ldr	r1, [r3, #28]
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	691a      	ldr	r2, [r3, #16]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	430a      	orrs	r2, r1
 8013a36:	61da      	str	r2, [r3, #28]
      break;
 8013a38:	e021      	b.n	8013a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	68b9      	ldr	r1, [r7, #8]
 8013a40:	4618      	mov	r0, r3
 8013a42:	f000 fb0f 	bl	8014064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	69da      	ldr	r2, [r3, #28]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	69da      	ldr	r2, [r3, #28]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	69d9      	ldr	r1, [r3, #28]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	691b      	ldr	r3, [r3, #16]
 8013a70:	021a      	lsls	r2, r3, #8
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	430a      	orrs	r2, r1
 8013a78:	61da      	str	r2, [r3, #28]
      break;
 8013a7a:	e000      	b.n	8013a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013a7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2201      	movs	r2, #1
 8013a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013a8e:	2300      	movs	r3, #0
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3710      	adds	r7, #16
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d101      	bne.n	8013ab0 <HAL_TIM_ConfigClockSource+0x18>
 8013aac:	2302      	movs	r3, #2
 8013aae:	e0b3      	b.n	8013c18 <HAL_TIM_ConfigClockSource+0x180>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2201      	movs	r2, #1
 8013ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2202      	movs	r2, #2
 8013abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	689b      	ldr	r3, [r3, #8]
 8013ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8013ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013ad6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ae8:	d03e      	beq.n	8013b68 <HAL_TIM_ConfigClockSource+0xd0>
 8013aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013aee:	f200 8087 	bhi.w	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013af6:	f000 8085 	beq.w	8013c04 <HAL_TIM_ConfigClockSource+0x16c>
 8013afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013afe:	d87f      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b00:	2b70      	cmp	r3, #112	; 0x70
 8013b02:	d01a      	beq.n	8013b3a <HAL_TIM_ConfigClockSource+0xa2>
 8013b04:	2b70      	cmp	r3, #112	; 0x70
 8013b06:	d87b      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b08:	2b60      	cmp	r3, #96	; 0x60
 8013b0a:	d050      	beq.n	8013bae <HAL_TIM_ConfigClockSource+0x116>
 8013b0c:	2b60      	cmp	r3, #96	; 0x60
 8013b0e:	d877      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b10:	2b50      	cmp	r3, #80	; 0x50
 8013b12:	d03c      	beq.n	8013b8e <HAL_TIM_ConfigClockSource+0xf6>
 8013b14:	2b50      	cmp	r3, #80	; 0x50
 8013b16:	d873      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b18:	2b40      	cmp	r3, #64	; 0x40
 8013b1a:	d058      	beq.n	8013bce <HAL_TIM_ConfigClockSource+0x136>
 8013b1c:	2b40      	cmp	r3, #64	; 0x40
 8013b1e:	d86f      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b20:	2b30      	cmp	r3, #48	; 0x30
 8013b22:	d064      	beq.n	8013bee <HAL_TIM_ConfigClockSource+0x156>
 8013b24:	2b30      	cmp	r3, #48	; 0x30
 8013b26:	d86b      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b28:	2b20      	cmp	r3, #32
 8013b2a:	d060      	beq.n	8013bee <HAL_TIM_ConfigClockSource+0x156>
 8013b2c:	2b20      	cmp	r3, #32
 8013b2e:	d867      	bhi.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d05c      	beq.n	8013bee <HAL_TIM_ConfigClockSource+0x156>
 8013b34:	2b10      	cmp	r3, #16
 8013b36:	d05a      	beq.n	8013bee <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8013b38:	e062      	b.n	8013c00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6818      	ldr	r0, [r3, #0]
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	6899      	ldr	r1, [r3, #8]
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	685a      	ldr	r2, [r3, #4]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	f000 fb5b 	bl	8014204 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	689b      	ldr	r3, [r3, #8]
 8013b54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013b5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	609a      	str	r2, [r3, #8]
      break;
 8013b66:	e04e      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6818      	ldr	r0, [r3, #0]
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	6899      	ldr	r1, [r3, #8]
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	685a      	ldr	r2, [r3, #4]
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	f000 fb44 	bl	8014204 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	689a      	ldr	r2, [r3, #8]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013b8a:	609a      	str	r2, [r3, #8]
      break;
 8013b8c:	e03b      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6818      	ldr	r0, [r3, #0]
 8013b92:	683b      	ldr	r3, [r7, #0]
 8013b94:	6859      	ldr	r1, [r3, #4]
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	f000 fab8 	bl	8014110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2150      	movs	r1, #80	; 0x50
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f000 fb11 	bl	80141ce <TIM_ITRx_SetConfig>
      break;
 8013bac:	e02b      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6818      	ldr	r0, [r3, #0]
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	6859      	ldr	r1, [r3, #4]
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	f000 fad7 	bl	801416e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2160      	movs	r1, #96	; 0x60
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f000 fb01 	bl	80141ce <TIM_ITRx_SetConfig>
      break;
 8013bcc:	e01b      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	6859      	ldr	r1, [r3, #4]
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	461a      	mov	r2, r3
 8013bdc:	f000 fa98 	bl	8014110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2140      	movs	r1, #64	; 0x40
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 faf1 	bl	80141ce <TIM_ITRx_SetConfig>
      break;
 8013bec:	e00b      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	4619      	mov	r1, r3
 8013bf8:	4610      	mov	r0, r2
 8013bfa:	f000 fae8 	bl	80141ce <TIM_ITRx_SetConfig>
      break;
 8013bfe:	e002      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8013c00:	bf00      	nop
 8013c02:	e000      	b.n	8013c06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8013c04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2201      	movs	r2, #1
 8013c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2200      	movs	r2, #0
 8013c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013c16:	2300      	movs	r3, #0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013c28:	bf00      	nop
 8013c2a:	370c      	adds	r7, #12
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013c3c:	bf00      	nop
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013c50:	bf00      	nop
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013c64:	bf00      	nop
 8013c66:	370c      	adds	r7, #12
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr

08013c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013c70:	b480      	push	{r7}
 8013c72:	b085      	sub	sp, #20
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	4a40      	ldr	r2, [pc, #256]	; (8013d84 <TIM_Base_SetConfig+0x114>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d013      	beq.n	8013cb0 <TIM_Base_SetConfig+0x40>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c8e:	d00f      	beq.n	8013cb0 <TIM_Base_SetConfig+0x40>
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	4a3d      	ldr	r2, [pc, #244]	; (8013d88 <TIM_Base_SetConfig+0x118>)
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d00b      	beq.n	8013cb0 <TIM_Base_SetConfig+0x40>
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	4a3c      	ldr	r2, [pc, #240]	; (8013d8c <TIM_Base_SetConfig+0x11c>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d007      	beq.n	8013cb0 <TIM_Base_SetConfig+0x40>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	4a3b      	ldr	r2, [pc, #236]	; (8013d90 <TIM_Base_SetConfig+0x120>)
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	d003      	beq.n	8013cb0 <TIM_Base_SetConfig+0x40>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	4a3a      	ldr	r2, [pc, #232]	; (8013d94 <TIM_Base_SetConfig+0x124>)
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d108      	bne.n	8013cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	68fa      	ldr	r2, [r7, #12]
 8013cbe:	4313      	orrs	r3, r2
 8013cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	4a2f      	ldr	r2, [pc, #188]	; (8013d84 <TIM_Base_SetConfig+0x114>)
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	d02b      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cd0:	d027      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4a2c      	ldr	r2, [pc, #176]	; (8013d88 <TIM_Base_SetConfig+0x118>)
 8013cd6:	4293      	cmp	r3, r2
 8013cd8:	d023      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4a2b      	ldr	r2, [pc, #172]	; (8013d8c <TIM_Base_SetConfig+0x11c>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d01f      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	4a2a      	ldr	r2, [pc, #168]	; (8013d90 <TIM_Base_SetConfig+0x120>)
 8013ce6:	4293      	cmp	r3, r2
 8013ce8:	d01b      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	4a29      	ldr	r2, [pc, #164]	; (8013d94 <TIM_Base_SetConfig+0x124>)
 8013cee:	4293      	cmp	r3, r2
 8013cf0:	d017      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	4a28      	ldr	r2, [pc, #160]	; (8013d98 <TIM_Base_SetConfig+0x128>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d013      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	4a27      	ldr	r2, [pc, #156]	; (8013d9c <TIM_Base_SetConfig+0x12c>)
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d00f      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4a26      	ldr	r2, [pc, #152]	; (8013da0 <TIM_Base_SetConfig+0x130>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d00b      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4a25      	ldr	r2, [pc, #148]	; (8013da4 <TIM_Base_SetConfig+0x134>)
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d007      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	4a24      	ldr	r2, [pc, #144]	; (8013da8 <TIM_Base_SetConfig+0x138>)
 8013d16:	4293      	cmp	r3, r2
 8013d18:	d003      	beq.n	8013d22 <TIM_Base_SetConfig+0xb2>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	4a23      	ldr	r2, [pc, #140]	; (8013dac <TIM_Base_SetConfig+0x13c>)
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	d108      	bne.n	8013d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	68fa      	ldr	r2, [r7, #12]
 8013d30:	4313      	orrs	r3, r2
 8013d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	695b      	ldr	r3, [r3, #20]
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	68fa      	ldr	r2, [r7, #12]
 8013d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	689a      	ldr	r2, [r3, #8]
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	4a0a      	ldr	r2, [pc, #40]	; (8013d84 <TIM_Base_SetConfig+0x114>)
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d003      	beq.n	8013d68 <TIM_Base_SetConfig+0xf8>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	4a0c      	ldr	r2, [pc, #48]	; (8013d94 <TIM_Base_SetConfig+0x124>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d103      	bne.n	8013d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	691a      	ldr	r2, [r3, #16]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2201      	movs	r2, #1
 8013d74:	615a      	str	r2, [r3, #20]
}
 8013d76:	bf00      	nop
 8013d78:	3714      	adds	r7, #20
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr
 8013d82:	bf00      	nop
 8013d84:	40010000 	.word	0x40010000
 8013d88:	40000400 	.word	0x40000400
 8013d8c:	40000800 	.word	0x40000800
 8013d90:	40000c00 	.word	0x40000c00
 8013d94:	40010400 	.word	0x40010400
 8013d98:	40014000 	.word	0x40014000
 8013d9c:	40014400 	.word	0x40014400
 8013da0:	40014800 	.word	0x40014800
 8013da4:	40001800 	.word	0x40001800
 8013da8:	40001c00 	.word	0x40001c00
 8013dac:	40002000 	.word	0x40002000

08013db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6a1b      	ldr	r3, [r3, #32]
 8013dbe:	f023 0201 	bic.w	r2, r3, #1
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6a1b      	ldr	r3, [r3, #32]
 8013dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f023 0303 	bic.w	r3, r3, #3
 8013de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	4313      	orrs	r3, r2
 8013df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	f023 0302 	bic.w	r3, r3, #2
 8013df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	689b      	ldr	r3, [r3, #8]
 8013dfe:	697a      	ldr	r2, [r7, #20]
 8013e00:	4313      	orrs	r3, r2
 8013e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4a20      	ldr	r2, [pc, #128]	; (8013e88 <TIM_OC1_SetConfig+0xd8>)
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	d003      	beq.n	8013e14 <TIM_OC1_SetConfig+0x64>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	4a1f      	ldr	r2, [pc, #124]	; (8013e8c <TIM_OC1_SetConfig+0xdc>)
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d10c      	bne.n	8013e2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	f023 0308 	bic.w	r3, r3, #8
 8013e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	4313      	orrs	r3, r2
 8013e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	f023 0304 	bic.w	r3, r3, #4
 8013e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4a15      	ldr	r2, [pc, #84]	; (8013e88 <TIM_OC1_SetConfig+0xd8>)
 8013e32:	4293      	cmp	r3, r2
 8013e34:	d003      	beq.n	8013e3e <TIM_OC1_SetConfig+0x8e>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	4a14      	ldr	r2, [pc, #80]	; (8013e8c <TIM_OC1_SetConfig+0xdc>)
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d111      	bne.n	8013e62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	695b      	ldr	r3, [r3, #20]
 8013e52:	693a      	ldr	r2, [r7, #16]
 8013e54:	4313      	orrs	r3, r2
 8013e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	699b      	ldr	r3, [r3, #24]
 8013e5c:	693a      	ldr	r2, [r7, #16]
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	693a      	ldr	r2, [r7, #16]
 8013e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	685a      	ldr	r2, [r3, #4]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	697a      	ldr	r2, [r7, #20]
 8013e7a:	621a      	str	r2, [r3, #32]
}
 8013e7c:	bf00      	nop
 8013e7e:	371c      	adds	r7, #28
 8013e80:	46bd      	mov	sp, r7
 8013e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e86:	4770      	bx	lr
 8013e88:	40010000 	.word	0x40010000
 8013e8c:	40010400 	.word	0x40010400

08013e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b087      	sub	sp, #28
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a1b      	ldr	r3, [r3, #32]
 8013e9e:	f023 0210 	bic.w	r2, r3, #16
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6a1b      	ldr	r3, [r3, #32]
 8013eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	021b      	lsls	r3, r3, #8
 8013ece:	68fa      	ldr	r2, [r7, #12]
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	f023 0320 	bic.w	r3, r3, #32
 8013eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	689b      	ldr	r3, [r3, #8]
 8013ee0:	011b      	lsls	r3, r3, #4
 8013ee2:	697a      	ldr	r2, [r7, #20]
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	4a22      	ldr	r2, [pc, #136]	; (8013f74 <TIM_OC2_SetConfig+0xe4>)
 8013eec:	4293      	cmp	r3, r2
 8013eee:	d003      	beq.n	8013ef8 <TIM_OC2_SetConfig+0x68>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	4a21      	ldr	r2, [pc, #132]	; (8013f78 <TIM_OC2_SetConfig+0xe8>)
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d10d      	bne.n	8013f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	011b      	lsls	r3, r3, #4
 8013f06:	697a      	ldr	r2, [r7, #20]
 8013f08:	4313      	orrs	r3, r2
 8013f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	4a17      	ldr	r2, [pc, #92]	; (8013f74 <TIM_OC2_SetConfig+0xe4>)
 8013f18:	4293      	cmp	r3, r2
 8013f1a:	d003      	beq.n	8013f24 <TIM_OC2_SetConfig+0x94>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	4a16      	ldr	r2, [pc, #88]	; (8013f78 <TIM_OC2_SetConfig+0xe8>)
 8013f20:	4293      	cmp	r3, r2
 8013f22:	d113      	bne.n	8013f4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	695b      	ldr	r3, [r3, #20]
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	693a      	ldr	r2, [r7, #16]
 8013f3c:	4313      	orrs	r3, r2
 8013f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	699b      	ldr	r3, [r3, #24]
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	693a      	ldr	r2, [r7, #16]
 8013f48:	4313      	orrs	r3, r2
 8013f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	693a      	ldr	r2, [r7, #16]
 8013f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	68fa      	ldr	r2, [r7, #12]
 8013f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	685a      	ldr	r2, [r3, #4]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	697a      	ldr	r2, [r7, #20]
 8013f64:	621a      	str	r2, [r3, #32]
}
 8013f66:	bf00      	nop
 8013f68:	371c      	adds	r7, #28
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop
 8013f74:	40010000 	.word	0x40010000
 8013f78:	40010400 	.word	0x40010400

08013f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b087      	sub	sp, #28
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a1b      	ldr	r3, [r3, #32]
 8013f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a1b      	ldr	r3, [r3, #32]
 8013f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	685b      	ldr	r3, [r3, #4]
 8013f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	69db      	ldr	r3, [r3, #28]
 8013fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f023 0303 	bic.w	r3, r3, #3
 8013fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	68fa      	ldr	r2, [r7, #12]
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	689b      	ldr	r3, [r3, #8]
 8013fca:	021b      	lsls	r3, r3, #8
 8013fcc:	697a      	ldr	r2, [r7, #20]
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	4a21      	ldr	r2, [pc, #132]	; (801405c <TIM_OC3_SetConfig+0xe0>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d003      	beq.n	8013fe2 <TIM_OC3_SetConfig+0x66>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4a20      	ldr	r2, [pc, #128]	; (8014060 <TIM_OC3_SetConfig+0xe4>)
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	d10d      	bne.n	8013ffe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	021b      	lsls	r3, r3, #8
 8013ff0:	697a      	ldr	r2, [r7, #20]
 8013ff2:	4313      	orrs	r3, r2
 8013ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4a16      	ldr	r2, [pc, #88]	; (801405c <TIM_OC3_SetConfig+0xe0>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d003      	beq.n	801400e <TIM_OC3_SetConfig+0x92>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4a15      	ldr	r2, [pc, #84]	; (8014060 <TIM_OC3_SetConfig+0xe4>)
 801400a:	4293      	cmp	r3, r2
 801400c:	d113      	bne.n	8014036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801401c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	695b      	ldr	r3, [r3, #20]
 8014022:	011b      	lsls	r3, r3, #4
 8014024:	693a      	ldr	r2, [r7, #16]
 8014026:	4313      	orrs	r3, r2
 8014028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	699b      	ldr	r3, [r3, #24]
 801402e:	011b      	lsls	r3, r3, #4
 8014030:	693a      	ldr	r2, [r7, #16]
 8014032:	4313      	orrs	r3, r2
 8014034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	693a      	ldr	r2, [r7, #16]
 801403a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	685a      	ldr	r2, [r3, #4]
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	621a      	str	r2, [r3, #32]
}
 8014050:	bf00      	nop
 8014052:	371c      	adds	r7, #28
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr
 801405c:	40010000 	.word	0x40010000
 8014060:	40010400 	.word	0x40010400

08014064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014064:	b480      	push	{r7}
 8014066:	b087      	sub	sp, #28
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6a1b      	ldr	r3, [r3, #32]
 8014072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6a1b      	ldr	r3, [r3, #32]
 801407e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	69db      	ldr	r3, [r3, #28]
 801408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	021b      	lsls	r3, r3, #8
 80140a2:	68fa      	ldr	r2, [r7, #12]
 80140a4:	4313      	orrs	r3, r2
 80140a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80140ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	031b      	lsls	r3, r3, #12
 80140b6:	693a      	ldr	r2, [r7, #16]
 80140b8:	4313      	orrs	r3, r2
 80140ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4a12      	ldr	r2, [pc, #72]	; (8014108 <TIM_OC4_SetConfig+0xa4>)
 80140c0:	4293      	cmp	r3, r2
 80140c2:	d003      	beq.n	80140cc <TIM_OC4_SetConfig+0x68>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	4a11      	ldr	r2, [pc, #68]	; (801410c <TIM_OC4_SetConfig+0xa8>)
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d109      	bne.n	80140e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80140d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	695b      	ldr	r3, [r3, #20]
 80140d8:	019b      	lsls	r3, r3, #6
 80140da:	697a      	ldr	r2, [r7, #20]
 80140dc:	4313      	orrs	r3, r2
 80140de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	685a      	ldr	r2, [r3, #4]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	693a      	ldr	r2, [r7, #16]
 80140f8:	621a      	str	r2, [r3, #32]
}
 80140fa:	bf00      	nop
 80140fc:	371c      	adds	r7, #28
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr
 8014106:	bf00      	nop
 8014108:	40010000 	.word	0x40010000
 801410c:	40010400 	.word	0x40010400

08014110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014110:	b480      	push	{r7}
 8014112:	b087      	sub	sp, #28
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	6a1b      	ldr	r3, [r3, #32]
 8014120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	f023 0201 	bic.w	r2, r3, #1
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014134:	693b      	ldr	r3, [r7, #16]
 8014136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	011b      	lsls	r3, r3, #4
 8014140:	693a      	ldr	r2, [r7, #16]
 8014142:	4313      	orrs	r3, r2
 8014144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	f023 030a 	bic.w	r3, r3, #10
 801414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801414e:	697a      	ldr	r2, [r7, #20]
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	4313      	orrs	r3, r2
 8014154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	693a      	ldr	r2, [r7, #16]
 801415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	697a      	ldr	r2, [r7, #20]
 8014160:	621a      	str	r2, [r3, #32]
}
 8014162:	bf00      	nop
 8014164:	371c      	adds	r7, #28
 8014166:	46bd      	mov	sp, r7
 8014168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416c:	4770      	bx	lr

0801416e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801416e:	b480      	push	{r7}
 8014170:	b087      	sub	sp, #28
 8014172:	af00      	add	r7, sp, #0
 8014174:	60f8      	str	r0, [r7, #12]
 8014176:	60b9      	str	r1, [r7, #8]
 8014178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	6a1b      	ldr	r3, [r3, #32]
 801417e:	f023 0210 	bic.w	r2, r3, #16
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	699b      	ldr	r3, [r3, #24]
 801418a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6a1b      	ldr	r3, [r3, #32]
 8014190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	031b      	lsls	r3, r3, #12
 801419e:	697a      	ldr	r2, [r7, #20]
 80141a0:	4313      	orrs	r3, r2
 80141a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80141aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	011b      	lsls	r3, r3, #4
 80141b0:	693a      	ldr	r2, [r7, #16]
 80141b2:	4313      	orrs	r3, r2
 80141b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	697a      	ldr	r2, [r7, #20]
 80141ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	693a      	ldr	r2, [r7, #16]
 80141c0:	621a      	str	r2, [r3, #32]
}
 80141c2:	bf00      	nop
 80141c4:	371c      	adds	r7, #28
 80141c6:	46bd      	mov	sp, r7
 80141c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141cc:	4770      	bx	lr

080141ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80141ce:	b480      	push	{r7}
 80141d0:	b085      	sub	sp, #20
 80141d2:	af00      	add	r7, sp, #0
 80141d4:	6078      	str	r0, [r7, #4]
 80141d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80141e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80141e6:	683a      	ldr	r2, [r7, #0]
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	4313      	orrs	r3, r2
 80141ec:	f043 0307 	orr.w	r3, r3, #7
 80141f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	68fa      	ldr	r2, [r7, #12]
 80141f6:	609a      	str	r2, [r3, #8]
}
 80141f8:	bf00      	nop
 80141fa:	3714      	adds	r7, #20
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr

08014204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014204:	b480      	push	{r7}
 8014206:	b087      	sub	sp, #28
 8014208:	af00      	add	r7, sp, #0
 801420a:	60f8      	str	r0, [r7, #12]
 801420c:	60b9      	str	r1, [r7, #8]
 801420e:	607a      	str	r2, [r7, #4]
 8014210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	021a      	lsls	r2, r3, #8
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	431a      	orrs	r2, r3
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	4313      	orrs	r3, r2
 801422c:	697a      	ldr	r2, [r7, #20]
 801422e:	4313      	orrs	r3, r2
 8014230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	697a      	ldr	r2, [r7, #20]
 8014236:	609a      	str	r2, [r3, #8]
}
 8014238:	bf00      	nop
 801423a:	371c      	adds	r7, #28
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014244:	b480      	push	{r7}
 8014246:	b087      	sub	sp, #28
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	f003 031f 	and.w	r3, r3, #31
 8014256:	2201      	movs	r2, #1
 8014258:	fa02 f303 	lsl.w	r3, r2, r3
 801425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6a1a      	ldr	r2, [r3, #32]
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	43db      	mvns	r3, r3
 8014266:	401a      	ands	r2, r3
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	6a1a      	ldr	r2, [r3, #32]
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	f003 031f 	and.w	r3, r3, #31
 8014276:	6879      	ldr	r1, [r7, #4]
 8014278:	fa01 f303 	lsl.w	r3, r1, r3
 801427c:	431a      	orrs	r2, r3
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	621a      	str	r2, [r3, #32]
}
 8014282:	bf00      	nop
 8014284:	371c      	adds	r7, #28
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr
	...

08014290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014290:	b480      	push	{r7}
 8014292:	b085      	sub	sp, #20
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	d101      	bne.n	80142a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80142a4:	2302      	movs	r3, #2
 80142a6:	e05a      	b.n	801435e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2201      	movs	r2, #1
 80142ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2202      	movs	r2, #2
 80142b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	689b      	ldr	r3, [r3, #8]
 80142c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80142ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	68fa      	ldr	r2, [r7, #12]
 80142d6:	4313      	orrs	r3, r2
 80142d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	68fa      	ldr	r2, [r7, #12]
 80142e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	4a21      	ldr	r2, [pc, #132]	; (801436c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80142e8:	4293      	cmp	r3, r2
 80142ea:	d022      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80142f4:	d01d      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	4a1d      	ldr	r2, [pc, #116]	; (8014370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80142fc:	4293      	cmp	r3, r2
 80142fe:	d018      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	4a1b      	ldr	r2, [pc, #108]	; (8014374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014306:	4293      	cmp	r3, r2
 8014308:	d013      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	4a1a      	ldr	r2, [pc, #104]	; (8014378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014310:	4293      	cmp	r3, r2
 8014312:	d00e      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4a18      	ldr	r2, [pc, #96]	; (801437c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801431a:	4293      	cmp	r3, r2
 801431c:	d009      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4a17      	ldr	r2, [pc, #92]	; (8014380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014324:	4293      	cmp	r3, r2
 8014326:	d004      	beq.n	8014332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4a15      	ldr	r2, [pc, #84]	; (8014384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801432e:	4293      	cmp	r3, r2
 8014330:	d10c      	bne.n	801434c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	68ba      	ldr	r2, [r7, #8]
 8014340:	4313      	orrs	r3, r2
 8014342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	68ba      	ldr	r2, [r7, #8]
 801434a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2201      	movs	r2, #1
 8014350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801435c:	2300      	movs	r3, #0
}
 801435e:	4618      	mov	r0, r3
 8014360:	3714      	adds	r7, #20
 8014362:	46bd      	mov	sp, r7
 8014364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014368:	4770      	bx	lr
 801436a:	bf00      	nop
 801436c:	40010000 	.word	0x40010000
 8014370:	40000400 	.word	0x40000400
 8014374:	40000800 	.word	0x40000800
 8014378:	40000c00 	.word	0x40000c00
 801437c:	40010400 	.word	0x40010400
 8014380:	40014000 	.word	0x40014000
 8014384:	40001800 	.word	0x40001800

08014388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014390:	bf00      	nop
 8014392:	370c      	adds	r7, #12
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80143a4:	bf00      	nop
 80143a6:	370c      	adds	r7, #12
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr

080143b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80143be:	2301      	movs	r3, #1
 80143c0:	e03f      	b.n	8014442 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d106      	bne.n	80143dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2200      	movs	r2, #0
 80143d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7ee fbb0 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2224      	movs	r2, #36	; 0x24
 80143e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	68da      	ldr	r2, [r3, #12]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80143f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f000 fbbf 	bl	8014b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	691a      	ldr	r2, [r3, #16]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	695a      	ldr	r2, [r3, #20]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	68da      	ldr	r2, [r3, #12]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2220      	movs	r2, #32
 8014434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2220      	movs	r2, #32
 801443c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8014440:	2300      	movs	r3, #0
}
 8014442:	4618      	mov	r0, r3
 8014444:	3708      	adds	r7, #8
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801444a:	b480      	push	{r7}
 801444c:	b085      	sub	sp, #20
 801444e:	af00      	add	r7, sp, #0
 8014450:	60f8      	str	r0, [r7, #12]
 8014452:	60b9      	str	r1, [r7, #8]
 8014454:	4613      	mov	r3, r2
 8014456:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801445e:	b2db      	uxtb	r3, r3
 8014460:	2b20      	cmp	r3, #32
 8014462:	d140      	bne.n	80144e6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d002      	beq.n	8014470 <HAL_UART_Receive_IT+0x26>
 801446a:	88fb      	ldrh	r3, [r7, #6]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d101      	bne.n	8014474 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8014470:	2301      	movs	r3, #1
 8014472:	e039      	b.n	80144e8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801447a:	2b01      	cmp	r3, #1
 801447c:	d101      	bne.n	8014482 <HAL_UART_Receive_IT+0x38>
 801447e:	2302      	movs	r3, #2
 8014480:	e032      	b.n	80144e8 <HAL_UART_Receive_IT+0x9e>
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2201      	movs	r2, #1
 8014486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	68ba      	ldr	r2, [r7, #8]
 801448e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	88fa      	ldrh	r2, [r7, #6]
 8014494:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	88fa      	ldrh	r2, [r7, #6]
 801449a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2200      	movs	r2, #0
 80144a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2222      	movs	r2, #34	; 0x22
 80144a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2200      	movs	r2, #0
 80144ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	68da      	ldr	r2, [r3, #12]
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80144c0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	695a      	ldr	r2, [r3, #20]
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f042 0201 	orr.w	r2, r2, #1
 80144d0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	68da      	ldr	r2, [r3, #12]
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	f042 0220 	orr.w	r2, r2, #32
 80144e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80144e2:	2300      	movs	r3, #0
 80144e4:	e000      	b.n	80144e8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80144e6:	2302      	movs	r3, #2
  }
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3714      	adds	r7, #20
 80144ec:	46bd      	mov	sp, r7
 80144ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f2:	4770      	bx	lr

080144f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b086      	sub	sp, #24
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	60b9      	str	r1, [r7, #8]
 80144fe:	4613      	mov	r3, r2
 8014500:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014508:	b2db      	uxtb	r3, r3
 801450a:	2b20      	cmp	r3, #32
 801450c:	d153      	bne.n	80145b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d002      	beq.n	801451a <HAL_UART_Transmit_DMA+0x26>
 8014514:	88fb      	ldrh	r3, [r7, #6]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d101      	bne.n	801451e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801451a:	2301      	movs	r3, #1
 801451c:	e04c      	b.n	80145b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014524:	2b01      	cmp	r3, #1
 8014526:	d101      	bne.n	801452c <HAL_UART_Transmit_DMA+0x38>
 8014528:	2302      	movs	r3, #2
 801452a:	e045      	b.n	80145b8 <HAL_UART_Transmit_DMA+0xc4>
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2201      	movs	r2, #1
 8014530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8014534:	68ba      	ldr	r2, [r7, #8]
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	88fa      	ldrh	r2, [r7, #6]
 801453e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	88fa      	ldrh	r2, [r7, #6]
 8014544:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	2200      	movs	r2, #0
 801454a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2221      	movs	r2, #33	; 0x21
 8014550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014558:	4a19      	ldr	r2, [pc, #100]	; (80145c0 <HAL_UART_Transmit_DMA+0xcc>)
 801455a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014560:	4a18      	ldr	r2, [pc, #96]	; (80145c4 <HAL_UART_Transmit_DMA+0xd0>)
 8014562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014568:	4a17      	ldr	r2, [pc, #92]	; (80145c8 <HAL_UART_Transmit_DMA+0xd4>)
 801456a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014570:	2200      	movs	r2, #0
 8014572:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8014574:	f107 0308 	add.w	r3, r7, #8
 8014578:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	6819      	ldr	r1, [r3, #0]
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	3304      	adds	r3, #4
 8014588:	461a      	mov	r2, r3
 801458a:	88fb      	ldrh	r3, [r7, #6]
 801458c:	f7fb ffd4 	bl	8010538 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014598:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2200      	movs	r2, #0
 801459e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	695a      	ldr	r2, [r3, #20]
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80145b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80145b2:	2300      	movs	r3, #0
 80145b4:	e000      	b.n	80145b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80145b6:	2302      	movs	r3, #2
  }
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3718      	adds	r7, #24
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	08014809 	.word	0x08014809
 80145c4:	0801485b 	.word	0x0801485b
 80145c8:	08014877 	.word	0x08014877

080145cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	695b      	ldr	r3, [r3, #20]
 80145ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80145ec:	2300      	movs	r3, #0
 80145ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80145f0:	2300      	movs	r3, #0
 80145f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	f003 030f 	and.w	r3, r3, #15
 80145fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d10d      	bne.n	801461e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	f003 0320 	and.w	r3, r3, #32
 8014608:	2b00      	cmp	r3, #0
 801460a:	d008      	beq.n	801461e <HAL_UART_IRQHandler+0x52>
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	f003 0320 	and.w	r3, r3, #32
 8014612:	2b00      	cmp	r3, #0
 8014614:	d003      	beq.n	801461e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 fa2d 	bl	8014a76 <UART_Receive_IT>
      return;
 801461c:	e0d0      	b.n	80147c0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	2b00      	cmp	r3, #0
 8014622:	f000 80b0 	beq.w	8014786 <HAL_UART_IRQHandler+0x1ba>
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	f003 0301 	and.w	r3, r3, #1
 801462c:	2b00      	cmp	r3, #0
 801462e:	d105      	bne.n	801463c <HAL_UART_IRQHandler+0x70>
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8014636:	2b00      	cmp	r3, #0
 8014638:	f000 80a5 	beq.w	8014786 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	f003 0301 	and.w	r3, r3, #1
 8014642:	2b00      	cmp	r3, #0
 8014644:	d00a      	beq.n	801465c <HAL_UART_IRQHandler+0x90>
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801464c:	2b00      	cmp	r3, #0
 801464e:	d005      	beq.n	801465c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014654:	f043 0201 	orr.w	r2, r3, #1
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	f003 0304 	and.w	r3, r3, #4
 8014662:	2b00      	cmp	r3, #0
 8014664:	d00a      	beq.n	801467c <HAL_UART_IRQHandler+0xb0>
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	f003 0301 	and.w	r3, r3, #1
 801466c:	2b00      	cmp	r3, #0
 801466e:	d005      	beq.n	801467c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014674:	f043 0202 	orr.w	r2, r3, #2
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	f003 0302 	and.w	r3, r3, #2
 8014682:	2b00      	cmp	r3, #0
 8014684:	d00a      	beq.n	801469c <HAL_UART_IRQHandler+0xd0>
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	f003 0301 	and.w	r3, r3, #1
 801468c:	2b00      	cmp	r3, #0
 801468e:	d005      	beq.n	801469c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014694:	f043 0204 	orr.w	r2, r3, #4
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	f003 0308 	and.w	r3, r3, #8
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00f      	beq.n	80146c6 <HAL_UART_IRQHandler+0xfa>
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	f003 0320 	and.w	r3, r3, #32
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d104      	bne.n	80146ba <HAL_UART_IRQHandler+0xee>
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	f003 0301 	and.w	r3, r3, #1
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d005      	beq.n	80146c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146be:	f043 0208 	orr.w	r2, r3, #8
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d077      	beq.n	80147be <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	f003 0320 	and.w	r3, r3, #32
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d007      	beq.n	80146e8 <HAL_UART_IRQHandler+0x11c>
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	f003 0320 	and.w	r3, r3, #32
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d002      	beq.n	80146e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f000 f9c7 	bl	8014a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	695b      	ldr	r3, [r3, #20]
 80146ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146f2:	2b40      	cmp	r3, #64	; 0x40
 80146f4:	bf0c      	ite	eq
 80146f6:	2301      	moveq	r3, #1
 80146f8:	2300      	movne	r3, #0
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014702:	f003 0308 	and.w	r3, r3, #8
 8014706:	2b00      	cmp	r3, #0
 8014708:	d102      	bne.n	8014710 <HAL_UART_IRQHandler+0x144>
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d031      	beq.n	8014774 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 f910 	bl	8014936 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	695b      	ldr	r3, [r3, #20]
 801471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014720:	2b40      	cmp	r3, #64	; 0x40
 8014722:	d123      	bne.n	801476c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	695a      	ldr	r2, [r3, #20]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014732:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014738:	2b00      	cmp	r3, #0
 801473a:	d013      	beq.n	8014764 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014740:	4a21      	ldr	r2, [pc, #132]	; (80147c8 <HAL_UART_IRQHandler+0x1fc>)
 8014742:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014748:	4618      	mov	r0, r3
 801474a:	f7fb ff4d 	bl	80105e8 <HAL_DMA_Abort_IT>
 801474e:	4603      	mov	r3, r0
 8014750:	2b00      	cmp	r3, #0
 8014752:	d016      	beq.n	8014782 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801475e:	4610      	mov	r0, r2
 8014760:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014762:	e00e      	b.n	8014782 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 f845 	bl	80147f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801476a:	e00a      	b.n	8014782 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f000 f841 	bl	80147f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014772:	e006      	b.n	8014782 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 f83d 	bl	80147f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2200      	movs	r2, #0
 801477e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8014780:	e01d      	b.n	80147be <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014782:	bf00      	nop
    return;
 8014784:	e01b      	b.n	80147be <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8014786:	69fb      	ldr	r3, [r7, #28]
 8014788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801478c:	2b00      	cmp	r3, #0
 801478e:	d008      	beq.n	80147a2 <HAL_UART_IRQHandler+0x1d6>
 8014790:	69bb      	ldr	r3, [r7, #24]
 8014792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014796:	2b00      	cmp	r3, #0
 8014798:	d003      	beq.n	80147a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 f8fd 	bl	801499a <UART_Transmit_IT>
    return;
 80147a0:	e00e      	b.n	80147c0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80147a2:	69fb      	ldr	r3, [r7, #28]
 80147a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d009      	beq.n	80147c0 <HAL_UART_IRQHandler+0x1f4>
 80147ac:	69bb      	ldr	r3, [r7, #24]
 80147ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d004      	beq.n	80147c0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f000 f945 	bl	8014a46 <UART_EndTransmit_IT>
    return;
 80147bc:	e000      	b.n	80147c0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80147be:	bf00      	nop
  }
}
 80147c0:	3720      	adds	r7, #32
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	08014973 	.word	0x08014973

080147cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80147d4:	bf00      	nop
 80147d6:	370c      	adds	r7, #12
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr

080147e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80147e8:	bf00      	nop
 80147ea:	370c      	adds	r7, #12
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr

080147f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80147f4:	b480      	push	{r7}
 80147f6:	b083      	sub	sp, #12
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80147fc:	bf00      	nop
 80147fe:	370c      	adds	r7, #12
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr

08014808 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014814:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014820:	2b00      	cmp	r3, #0
 8014822:	d113      	bne.n	801484c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2200      	movs	r2, #0
 8014828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	695a      	ldr	r2, [r3, #20]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014838:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68da      	ldr	r2, [r3, #12]
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014848:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801484a:	e002      	b.n	8014852 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 801484c:	68f8      	ldr	r0, [r7, #12]
 801484e:	f7ff ffbd 	bl	80147cc <HAL_UART_TxCpltCallback>
}
 8014852:	bf00      	nop
 8014854:	3710      	adds	r7, #16
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b084      	sub	sp, #16
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014866:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f7ff ffb9 	bl	80147e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801486e:	bf00      	nop
 8014870:	3710      	adds	r7, #16
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}

08014876 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014876:	b580      	push	{r7, lr}
 8014878:	b084      	sub	sp, #16
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801487e:	2300      	movs	r3, #0
 8014880:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014886:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	695b      	ldr	r3, [r3, #20]
 801488e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014892:	2b80      	cmp	r3, #128	; 0x80
 8014894:	bf0c      	ite	eq
 8014896:	2301      	moveq	r3, #1
 8014898:	2300      	movne	r3, #0
 801489a:	b2db      	uxtb	r3, r3
 801489c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	2b21      	cmp	r3, #33	; 0x21
 80148a8:	d108      	bne.n	80148bc <UART_DMAError+0x46>
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d005      	beq.n	80148bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	2200      	movs	r2, #0
 80148b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80148b6:	68b8      	ldr	r0, [r7, #8]
 80148b8:	f000 f827 	bl	801490a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	695b      	ldr	r3, [r3, #20]
 80148c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148c6:	2b40      	cmp	r3, #64	; 0x40
 80148c8:	bf0c      	ite	eq
 80148ca:	2301      	moveq	r3, #1
 80148cc:	2300      	movne	r3, #0
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	2b22      	cmp	r3, #34	; 0x22
 80148dc:	d108      	bne.n	80148f0 <UART_DMAError+0x7a>
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d005      	beq.n	80148f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	2200      	movs	r2, #0
 80148e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80148ea:	68b8      	ldr	r0, [r7, #8]
 80148ec:	f000 f823 	bl	8014936 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148f4:	f043 0210 	orr.w	r2, r3, #16
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80148fc:	68b8      	ldr	r0, [r7, #8]
 80148fe:	f7ff ff79 	bl	80147f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014902:	bf00      	nop
 8014904:	3710      	adds	r7, #16
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}

0801490a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801490a:	b480      	push	{r7}
 801490c:	b083      	sub	sp, #12
 801490e:	af00      	add	r7, sp, #0
 8014910:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	68da      	ldr	r2, [r3, #12]
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8014920:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2220      	movs	r2, #32
 8014926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 801492a:	bf00      	nop
 801492c:	370c      	adds	r7, #12
 801492e:	46bd      	mov	sp, r7
 8014930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014934:	4770      	bx	lr

08014936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014936:	b480      	push	{r7}
 8014938:	b083      	sub	sp, #12
 801493a:	af00      	add	r7, sp, #0
 801493c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	68da      	ldr	r2, [r3, #12]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801494c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	695a      	ldr	r2, [r3, #20]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f022 0201 	bic.w	r2, r2, #1
 801495c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2220      	movs	r2, #32
 8014962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8014966:	bf00      	nop
 8014968:	370c      	adds	r7, #12
 801496a:	46bd      	mov	sp, r7
 801496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014970:	4770      	bx	lr

08014972 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014972:	b580      	push	{r7, lr}
 8014974:	b084      	sub	sp, #16
 8014976:	af00      	add	r7, sp, #0
 8014978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801497e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	2200      	movs	r2, #0
 8014984:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2200      	movs	r2, #0
 801498a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	f7ff ff31 	bl	80147f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014992:	bf00      	nop
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801499a:	b480      	push	{r7}
 801499c:	b085      	sub	sp, #20
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80149a8:	b2db      	uxtb	r3, r3
 80149aa:	2b21      	cmp	r3, #33	; 0x21
 80149ac:	d144      	bne.n	8014a38 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	689b      	ldr	r3, [r3, #8]
 80149b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80149b6:	d11a      	bne.n	80149ee <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	6a1b      	ldr	r3, [r3, #32]
 80149bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	881b      	ldrh	r3, [r3, #0]
 80149c2:	461a      	mov	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80149cc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	691b      	ldr	r3, [r3, #16]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d105      	bne.n	80149e2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6a1b      	ldr	r3, [r3, #32]
 80149da:	1c9a      	adds	r2, r3, #2
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	621a      	str	r2, [r3, #32]
 80149e0:	e00e      	b.n	8014a00 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6a1b      	ldr	r3, [r3, #32]
 80149e6:	1c5a      	adds	r2, r3, #1
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	621a      	str	r2, [r3, #32]
 80149ec:	e008      	b.n	8014a00 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6a1b      	ldr	r3, [r3, #32]
 80149f2:	1c59      	adds	r1, r3, #1
 80149f4:	687a      	ldr	r2, [r7, #4]
 80149f6:	6211      	str	r1, [r2, #32]
 80149f8:	781a      	ldrb	r2, [r3, #0]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	3b01      	subs	r3, #1
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d10f      	bne.n	8014a34 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	68da      	ldr	r2, [r3, #12]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	68da      	ldr	r2, [r3, #12]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8014a34:	2300      	movs	r3, #0
 8014a36:	e000      	b.n	8014a3a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014a38:	2302      	movs	r3, #2
  }
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3714      	adds	r7, #20
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a44:	4770      	bx	lr

08014a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b082      	sub	sp, #8
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	68da      	ldr	r2, [r3, #12]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2220      	movs	r2, #32
 8014a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7ff feb0 	bl	80147cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3708      	adds	r7, #8
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	b084      	sub	sp, #16
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	2b22      	cmp	r3, #34	; 0x22
 8014a88:	d171      	bne.n	8014b6e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	689b      	ldr	r3, [r3, #8]
 8014a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a92:	d123      	bne.n	8014adc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a98:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	691b      	ldr	r3, [r3, #16]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d10e      	bne.n	8014ac0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014aae:	b29a      	uxth	r2, r3
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ab8:	1c9a      	adds	r2, r3, #2
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	629a      	str	r2, [r3, #40]	; 0x28
 8014abe:	e029      	b.n	8014b14 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ad4:	1c5a      	adds	r2, r3, #1
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	629a      	str	r2, [r3, #40]	; 0x28
 8014ada:	e01b      	b.n	8014b14 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	691b      	ldr	r3, [r3, #16]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d10a      	bne.n	8014afa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	6858      	ldr	r0, [r3, #4]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aee:	1c59      	adds	r1, r3, #1
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	6291      	str	r1, [r2, #40]	; 0x28
 8014af4:	b2c2      	uxtb	r2, r0
 8014af6:	701a      	strb	r2, [r3, #0]
 8014af8:	e00c      	b.n	8014b14 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	b2da      	uxtb	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b06:	1c58      	adds	r0, r3, #1
 8014b08:	6879      	ldr	r1, [r7, #4]
 8014b0a:	6288      	str	r0, [r1, #40]	; 0x28
 8014b0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8014b10:	b2d2      	uxtb	r2, r2
 8014b12:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	3b01      	subs	r3, #1
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	687a      	ldr	r2, [r7, #4]
 8014b20:	4619      	mov	r1, r3
 8014b22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d120      	bne.n	8014b6a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	68da      	ldr	r2, [r3, #12]
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f022 0220 	bic.w	r2, r2, #32
 8014b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	68da      	ldr	r2, [r3, #12]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	695a      	ldr	r2, [r3, #20]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f022 0201 	bic.w	r2, r2, #1
 8014b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2220      	movs	r2, #32
 8014b5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f7f6 fd4b 	bl	800b5fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8014b66:	2300      	movs	r3, #0
 8014b68:	e002      	b.n	8014b70 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	e000      	b.n	8014b70 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8014b6e:	2302      	movs	r3, #2
  }
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3710      	adds	r7, #16
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7c:	b0bd      	sub	sp, #244	; 0xf4
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	691b      	ldr	r3, [r3, #16]
 8014b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b94:	68d9      	ldr	r1, [r3, #12]
 8014b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b9a:	681a      	ldr	r2, [r3, #0]
 8014b9c:	ea40 0301 	orr.w	r3, r0, r1
 8014ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ba6:	689a      	ldr	r2, [r3, #8]
 8014ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	431a      	orrs	r2, r3
 8014bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bb4:	695b      	ldr	r3, [r3, #20]
 8014bb6:	431a      	orrs	r2, r3
 8014bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bbc:	69db      	ldr	r3, [r3, #28]
 8014bbe:	4313      	orrs	r3, r2
 8014bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8014bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014bd0:	f021 010c 	bic.w	r1, r1, #12
 8014bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014bde:	430b      	orrs	r3, r1
 8014be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	695b      	ldr	r3, [r3, #20]
 8014bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bf2:	6999      	ldr	r1, [r3, #24]
 8014bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bf8:	681a      	ldr	r2, [r3, #0]
 8014bfa:	ea40 0301 	orr.w	r3, r0, r1
 8014bfe:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c04:	69db      	ldr	r3, [r3, #28]
 8014c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c0a:	f040 81a5 	bne.w	8014f58 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c12:	681a      	ldr	r2, [r3, #0]
 8014c14:	4bcd      	ldr	r3, [pc, #820]	; (8014f4c <UART_SetConfig+0x3d4>)
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d006      	beq.n	8014c28 <UART_SetConfig+0xb0>
 8014c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	4bcb      	ldr	r3, [pc, #812]	; (8014f50 <UART_SetConfig+0x3d8>)
 8014c22:	429a      	cmp	r2, r3
 8014c24:	f040 80cb 	bne.w	8014dbe <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014c28:	f7fe fa5e 	bl	80130e8 <HAL_RCC_GetPCLK2Freq>
 8014c2c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014c34:	461c      	mov	r4, r3
 8014c36:	f04f 0500 	mov.w	r5, #0
 8014c3a:	4622      	mov	r2, r4
 8014c3c:	462b      	mov	r3, r5
 8014c3e:	1891      	adds	r1, r2, r2
 8014c40:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8014c44:	415b      	adcs	r3, r3
 8014c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014c4a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8014c4e:	1912      	adds	r2, r2, r4
 8014c50:	eb45 0303 	adc.w	r3, r5, r3
 8014c54:	f04f 0000 	mov.w	r0, #0
 8014c58:	f04f 0100 	mov.w	r1, #0
 8014c5c:	00d9      	lsls	r1, r3, #3
 8014c5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014c62:	00d0      	lsls	r0, r2, #3
 8014c64:	4602      	mov	r2, r0
 8014c66:	460b      	mov	r3, r1
 8014c68:	1911      	adds	r1, r2, r4
 8014c6a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8014c6e:	416b      	adcs	r3, r5
 8014c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c78:	685b      	ldr	r3, [r3, #4]
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	f04f 0300 	mov.w	r3, #0
 8014c80:	1891      	adds	r1, r2, r2
 8014c82:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8014c86:	415b      	adcs	r3, r3
 8014c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014c8c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8014c90:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8014c94:	f7eb fff8 	bl	8000c88 <__aeabi_uldivmod>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	460b      	mov	r3, r1
 8014c9c:	4bad      	ldr	r3, [pc, #692]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8014ca2:	095b      	lsrs	r3, r3, #5
 8014ca4:	011e      	lsls	r6, r3, #4
 8014ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014caa:	461c      	mov	r4, r3
 8014cac:	f04f 0500 	mov.w	r5, #0
 8014cb0:	4622      	mov	r2, r4
 8014cb2:	462b      	mov	r3, r5
 8014cb4:	1891      	adds	r1, r2, r2
 8014cb6:	67b9      	str	r1, [r7, #120]	; 0x78
 8014cb8:	415b      	adcs	r3, r3
 8014cba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014cbc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8014cc0:	1912      	adds	r2, r2, r4
 8014cc2:	eb45 0303 	adc.w	r3, r5, r3
 8014cc6:	f04f 0000 	mov.w	r0, #0
 8014cca:	f04f 0100 	mov.w	r1, #0
 8014cce:	00d9      	lsls	r1, r3, #3
 8014cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014cd4:	00d0      	lsls	r0, r2, #3
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	1911      	adds	r1, r2, r4
 8014cdc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8014ce0:	416b      	adcs	r3, r5
 8014ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	461a      	mov	r2, r3
 8014cee:	f04f 0300 	mov.w	r3, #0
 8014cf2:	1891      	adds	r1, r2, r2
 8014cf4:	6739      	str	r1, [r7, #112]	; 0x70
 8014cf6:	415b      	adcs	r3, r3
 8014cf8:	677b      	str	r3, [r7, #116]	; 0x74
 8014cfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8014cfe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8014d02:	f7eb ffc1 	bl	8000c88 <__aeabi_uldivmod>
 8014d06:	4602      	mov	r2, r0
 8014d08:	460b      	mov	r3, r1
 8014d0a:	4b92      	ldr	r3, [pc, #584]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8014d10:	095b      	lsrs	r3, r3, #5
 8014d12:	2164      	movs	r1, #100	; 0x64
 8014d14:	fb01 f303 	mul.w	r3, r1, r3
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	00db      	lsls	r3, r3, #3
 8014d1c:	3332      	adds	r3, #50	; 0x32
 8014d1e:	4a8d      	ldr	r2, [pc, #564]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014d20:	fba2 2303 	umull	r2, r3, r2, r3
 8014d24:	095b      	lsrs	r3, r3, #5
 8014d26:	005b      	lsls	r3, r3, #1
 8014d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014d2c:	441e      	add	r6, r3
 8014d2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014d32:	4618      	mov	r0, r3
 8014d34:	f04f 0100 	mov.w	r1, #0
 8014d38:	4602      	mov	r2, r0
 8014d3a:	460b      	mov	r3, r1
 8014d3c:	1894      	adds	r4, r2, r2
 8014d3e:	66bc      	str	r4, [r7, #104]	; 0x68
 8014d40:	415b      	adcs	r3, r3
 8014d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014d44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8014d48:	1812      	adds	r2, r2, r0
 8014d4a:	eb41 0303 	adc.w	r3, r1, r3
 8014d4e:	f04f 0400 	mov.w	r4, #0
 8014d52:	f04f 0500 	mov.w	r5, #0
 8014d56:	00dd      	lsls	r5, r3, #3
 8014d58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014d5c:	00d4      	lsls	r4, r2, #3
 8014d5e:	4622      	mov	r2, r4
 8014d60:	462b      	mov	r3, r5
 8014d62:	1814      	adds	r4, r2, r0
 8014d64:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8014d68:	414b      	adcs	r3, r1
 8014d6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	461a      	mov	r2, r3
 8014d76:	f04f 0300 	mov.w	r3, #0
 8014d7a:	1891      	adds	r1, r2, r2
 8014d7c:	6639      	str	r1, [r7, #96]	; 0x60
 8014d7e:	415b      	adcs	r3, r3
 8014d80:	667b      	str	r3, [r7, #100]	; 0x64
 8014d82:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8014d8a:	f7eb ff7d 	bl	8000c88 <__aeabi_uldivmod>
 8014d8e:	4602      	mov	r2, r0
 8014d90:	460b      	mov	r3, r1
 8014d92:	4b70      	ldr	r3, [pc, #448]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014d94:	fba3 1302 	umull	r1, r3, r3, r2
 8014d98:	095b      	lsrs	r3, r3, #5
 8014d9a:	2164      	movs	r1, #100	; 0x64
 8014d9c:	fb01 f303 	mul.w	r3, r1, r3
 8014da0:	1ad3      	subs	r3, r2, r3
 8014da2:	00db      	lsls	r3, r3, #3
 8014da4:	3332      	adds	r3, #50	; 0x32
 8014da6:	4a6b      	ldr	r2, [pc, #428]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014da8:	fba2 2303 	umull	r2, r3, r2, r3
 8014dac:	095b      	lsrs	r3, r3, #5
 8014dae:	f003 0207 	and.w	r2, r3, #7
 8014db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4432      	add	r2, r6
 8014dba:	609a      	str	r2, [r3, #8]
 8014dbc:	e26d      	b.n	801529a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014dbe:	f7fe f97f 	bl	80130c0 <HAL_RCC_GetPCLK1Freq>
 8014dc2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014dca:	461c      	mov	r4, r3
 8014dcc:	f04f 0500 	mov.w	r5, #0
 8014dd0:	4622      	mov	r2, r4
 8014dd2:	462b      	mov	r3, r5
 8014dd4:	1891      	adds	r1, r2, r2
 8014dd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8014dd8:	415b      	adcs	r3, r3
 8014dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014ddc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8014de0:	1912      	adds	r2, r2, r4
 8014de2:	eb45 0303 	adc.w	r3, r5, r3
 8014de6:	f04f 0000 	mov.w	r0, #0
 8014dea:	f04f 0100 	mov.w	r1, #0
 8014dee:	00d9      	lsls	r1, r3, #3
 8014df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014df4:	00d0      	lsls	r0, r2, #3
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	1911      	adds	r1, r2, r4
 8014dfc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8014e00:	416b      	adcs	r3, r5
 8014e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	461a      	mov	r2, r3
 8014e0e:	f04f 0300 	mov.w	r3, #0
 8014e12:	1891      	adds	r1, r2, r2
 8014e14:	6539      	str	r1, [r7, #80]	; 0x50
 8014e16:	415b      	adcs	r3, r3
 8014e18:	657b      	str	r3, [r7, #84]	; 0x54
 8014e1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8014e1e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8014e22:	f7eb ff31 	bl	8000c88 <__aeabi_uldivmod>
 8014e26:	4602      	mov	r2, r0
 8014e28:	460b      	mov	r3, r1
 8014e2a:	4b4a      	ldr	r3, [pc, #296]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8014e30:	095b      	lsrs	r3, r3, #5
 8014e32:	011e      	lsls	r6, r3, #4
 8014e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e38:	461c      	mov	r4, r3
 8014e3a:	f04f 0500 	mov.w	r5, #0
 8014e3e:	4622      	mov	r2, r4
 8014e40:	462b      	mov	r3, r5
 8014e42:	1891      	adds	r1, r2, r2
 8014e44:	64b9      	str	r1, [r7, #72]	; 0x48
 8014e46:	415b      	adcs	r3, r3
 8014e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8014e4e:	1912      	adds	r2, r2, r4
 8014e50:	eb45 0303 	adc.w	r3, r5, r3
 8014e54:	f04f 0000 	mov.w	r0, #0
 8014e58:	f04f 0100 	mov.w	r1, #0
 8014e5c:	00d9      	lsls	r1, r3, #3
 8014e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014e62:	00d0      	lsls	r0, r2, #3
 8014e64:	4602      	mov	r2, r0
 8014e66:	460b      	mov	r3, r1
 8014e68:	1911      	adds	r1, r2, r4
 8014e6a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8014e6e:	416b      	adcs	r3, r5
 8014e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	f04f 0300 	mov.w	r3, #0
 8014e80:	1891      	adds	r1, r2, r2
 8014e82:	6439      	str	r1, [r7, #64]	; 0x40
 8014e84:	415b      	adcs	r3, r3
 8014e86:	647b      	str	r3, [r7, #68]	; 0x44
 8014e88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014e8c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8014e90:	f7eb fefa 	bl	8000c88 <__aeabi_uldivmod>
 8014e94:	4602      	mov	r2, r0
 8014e96:	460b      	mov	r3, r1
 8014e98:	4b2e      	ldr	r3, [pc, #184]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8014e9e:	095b      	lsrs	r3, r3, #5
 8014ea0:	2164      	movs	r1, #100	; 0x64
 8014ea2:	fb01 f303 	mul.w	r3, r1, r3
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	00db      	lsls	r3, r3, #3
 8014eaa:	3332      	adds	r3, #50	; 0x32
 8014eac:	4a29      	ldr	r2, [pc, #164]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014eae:	fba2 2303 	umull	r2, r3, r2, r3
 8014eb2:	095b      	lsrs	r3, r3, #5
 8014eb4:	005b      	lsls	r3, r3, #1
 8014eb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014eba:	441e      	add	r6, r3
 8014ebc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f04f 0100 	mov.w	r1, #0
 8014ec6:	4602      	mov	r2, r0
 8014ec8:	460b      	mov	r3, r1
 8014eca:	1894      	adds	r4, r2, r2
 8014ecc:	63bc      	str	r4, [r7, #56]	; 0x38
 8014ece:	415b      	adcs	r3, r3
 8014ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014ed2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014ed6:	1812      	adds	r2, r2, r0
 8014ed8:	eb41 0303 	adc.w	r3, r1, r3
 8014edc:	f04f 0400 	mov.w	r4, #0
 8014ee0:	f04f 0500 	mov.w	r5, #0
 8014ee4:	00dd      	lsls	r5, r3, #3
 8014ee6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014eea:	00d4      	lsls	r4, r2, #3
 8014eec:	4622      	mov	r2, r4
 8014eee:	462b      	mov	r3, r5
 8014ef0:	1814      	adds	r4, r2, r0
 8014ef2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8014ef6:	414b      	adcs	r3, r1
 8014ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	461a      	mov	r2, r3
 8014f04:	f04f 0300 	mov.w	r3, #0
 8014f08:	1891      	adds	r1, r2, r2
 8014f0a:	6339      	str	r1, [r7, #48]	; 0x30
 8014f0c:	415b      	adcs	r3, r3
 8014f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8014f10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014f14:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8014f18:	f7eb feb6 	bl	8000c88 <__aeabi_uldivmod>
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	460b      	mov	r3, r1
 8014f20:	4b0c      	ldr	r3, [pc, #48]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014f22:	fba3 1302 	umull	r1, r3, r3, r2
 8014f26:	095b      	lsrs	r3, r3, #5
 8014f28:	2164      	movs	r1, #100	; 0x64
 8014f2a:	fb01 f303 	mul.w	r3, r1, r3
 8014f2e:	1ad3      	subs	r3, r2, r3
 8014f30:	00db      	lsls	r3, r3, #3
 8014f32:	3332      	adds	r3, #50	; 0x32
 8014f34:	4a07      	ldr	r2, [pc, #28]	; (8014f54 <UART_SetConfig+0x3dc>)
 8014f36:	fba2 2303 	umull	r2, r3, r2, r3
 8014f3a:	095b      	lsrs	r3, r3, #5
 8014f3c:	f003 0207 	and.w	r2, r3, #7
 8014f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	4432      	add	r2, r6
 8014f48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8014f4a:	e1a6      	b.n	801529a <UART_SetConfig+0x722>
 8014f4c:	40011000 	.word	0x40011000
 8014f50:	40011400 	.word	0x40011400
 8014f54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	4bd1      	ldr	r3, [pc, #836]	; (80152a4 <UART_SetConfig+0x72c>)
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d006      	beq.n	8014f72 <UART_SetConfig+0x3fa>
 8014f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	4bcf      	ldr	r3, [pc, #828]	; (80152a8 <UART_SetConfig+0x730>)
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	f040 80ca 	bne.w	8015106 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8014f72:	f7fe f8b9 	bl	80130e8 <HAL_RCC_GetPCLK2Freq>
 8014f76:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014f7e:	461c      	mov	r4, r3
 8014f80:	f04f 0500 	mov.w	r5, #0
 8014f84:	4622      	mov	r2, r4
 8014f86:	462b      	mov	r3, r5
 8014f88:	1891      	adds	r1, r2, r2
 8014f8a:	62b9      	str	r1, [r7, #40]	; 0x28
 8014f8c:	415b      	adcs	r3, r3
 8014f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014f94:	1912      	adds	r2, r2, r4
 8014f96:	eb45 0303 	adc.w	r3, r5, r3
 8014f9a:	f04f 0000 	mov.w	r0, #0
 8014f9e:	f04f 0100 	mov.w	r1, #0
 8014fa2:	00d9      	lsls	r1, r3, #3
 8014fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014fa8:	00d0      	lsls	r0, r2, #3
 8014faa:	4602      	mov	r2, r0
 8014fac:	460b      	mov	r3, r1
 8014fae:	eb12 0a04 	adds.w	sl, r2, r4
 8014fb2:	eb43 0b05 	adc.w	fp, r3, r5
 8014fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f04f 0100 	mov.w	r1, #0
 8014fc2:	f04f 0200 	mov.w	r2, #0
 8014fc6:	f04f 0300 	mov.w	r3, #0
 8014fca:	008b      	lsls	r3, r1, #2
 8014fcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014fd0:	0082      	lsls	r2, r0, #2
 8014fd2:	4650      	mov	r0, sl
 8014fd4:	4659      	mov	r1, fp
 8014fd6:	f7eb fe57 	bl	8000c88 <__aeabi_uldivmod>
 8014fda:	4602      	mov	r2, r0
 8014fdc:	460b      	mov	r3, r1
 8014fde:	4bb3      	ldr	r3, [pc, #716]	; (80152ac <UART_SetConfig+0x734>)
 8014fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8014fe4:	095b      	lsrs	r3, r3, #5
 8014fe6:	011e      	lsls	r6, r3, #4
 8014fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014fec:	4618      	mov	r0, r3
 8014fee:	f04f 0100 	mov.w	r1, #0
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	1894      	adds	r4, r2, r2
 8014ff8:	623c      	str	r4, [r7, #32]
 8014ffa:	415b      	adcs	r3, r3
 8014ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8014ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015002:	1812      	adds	r2, r2, r0
 8015004:	eb41 0303 	adc.w	r3, r1, r3
 8015008:	f04f 0400 	mov.w	r4, #0
 801500c:	f04f 0500 	mov.w	r5, #0
 8015010:	00dd      	lsls	r5, r3, #3
 8015012:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015016:	00d4      	lsls	r4, r2, #3
 8015018:	4622      	mov	r2, r4
 801501a:	462b      	mov	r3, r5
 801501c:	1814      	adds	r4, r2, r0
 801501e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8015022:	414b      	adcs	r3, r1
 8015024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	4618      	mov	r0, r3
 8015030:	f04f 0100 	mov.w	r1, #0
 8015034:	f04f 0200 	mov.w	r2, #0
 8015038:	f04f 0300 	mov.w	r3, #0
 801503c:	008b      	lsls	r3, r1, #2
 801503e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015042:	0082      	lsls	r2, r0, #2
 8015044:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8015048:	f7eb fe1e 	bl	8000c88 <__aeabi_uldivmod>
 801504c:	4602      	mov	r2, r0
 801504e:	460b      	mov	r3, r1
 8015050:	4b96      	ldr	r3, [pc, #600]	; (80152ac <UART_SetConfig+0x734>)
 8015052:	fba3 1302 	umull	r1, r3, r3, r2
 8015056:	095b      	lsrs	r3, r3, #5
 8015058:	2164      	movs	r1, #100	; 0x64
 801505a:	fb01 f303 	mul.w	r3, r1, r3
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	011b      	lsls	r3, r3, #4
 8015062:	3332      	adds	r3, #50	; 0x32
 8015064:	4a91      	ldr	r2, [pc, #580]	; (80152ac <UART_SetConfig+0x734>)
 8015066:	fba2 2303 	umull	r2, r3, r2, r3
 801506a:	095b      	lsrs	r3, r3, #5
 801506c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015070:	441e      	add	r6, r3
 8015072:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015076:	4618      	mov	r0, r3
 8015078:	f04f 0100 	mov.w	r1, #0
 801507c:	4602      	mov	r2, r0
 801507e:	460b      	mov	r3, r1
 8015080:	1894      	adds	r4, r2, r2
 8015082:	61bc      	str	r4, [r7, #24]
 8015084:	415b      	adcs	r3, r3
 8015086:	61fb      	str	r3, [r7, #28]
 8015088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801508c:	1812      	adds	r2, r2, r0
 801508e:	eb41 0303 	adc.w	r3, r1, r3
 8015092:	f04f 0400 	mov.w	r4, #0
 8015096:	f04f 0500 	mov.w	r5, #0
 801509a:	00dd      	lsls	r5, r3, #3
 801509c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80150a0:	00d4      	lsls	r4, r2, #3
 80150a2:	4622      	mov	r2, r4
 80150a4:	462b      	mov	r3, r5
 80150a6:	1814      	adds	r4, r2, r0
 80150a8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80150ac:	414b      	adcs	r3, r1
 80150ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80150b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f04f 0100 	mov.w	r1, #0
 80150be:	f04f 0200 	mov.w	r2, #0
 80150c2:	f04f 0300 	mov.w	r3, #0
 80150c6:	008b      	lsls	r3, r1, #2
 80150c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80150cc:	0082      	lsls	r2, r0, #2
 80150ce:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80150d2:	f7eb fdd9 	bl	8000c88 <__aeabi_uldivmod>
 80150d6:	4602      	mov	r2, r0
 80150d8:	460b      	mov	r3, r1
 80150da:	4b74      	ldr	r3, [pc, #464]	; (80152ac <UART_SetConfig+0x734>)
 80150dc:	fba3 1302 	umull	r1, r3, r3, r2
 80150e0:	095b      	lsrs	r3, r3, #5
 80150e2:	2164      	movs	r1, #100	; 0x64
 80150e4:	fb01 f303 	mul.w	r3, r1, r3
 80150e8:	1ad3      	subs	r3, r2, r3
 80150ea:	011b      	lsls	r3, r3, #4
 80150ec:	3332      	adds	r3, #50	; 0x32
 80150ee:	4a6f      	ldr	r2, [pc, #444]	; (80152ac <UART_SetConfig+0x734>)
 80150f0:	fba2 2303 	umull	r2, r3, r2, r3
 80150f4:	095b      	lsrs	r3, r3, #5
 80150f6:	f003 020f 	and.w	r2, r3, #15
 80150fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4432      	add	r2, r6
 8015102:	609a      	str	r2, [r3, #8]
 8015104:	e0c9      	b.n	801529a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8015106:	f7fd ffdb 	bl	80130c0 <HAL_RCC_GetPCLK1Freq>
 801510a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801510e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015112:	461c      	mov	r4, r3
 8015114:	f04f 0500 	mov.w	r5, #0
 8015118:	4622      	mov	r2, r4
 801511a:	462b      	mov	r3, r5
 801511c:	1891      	adds	r1, r2, r2
 801511e:	6139      	str	r1, [r7, #16]
 8015120:	415b      	adcs	r3, r3
 8015122:	617b      	str	r3, [r7, #20]
 8015124:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015128:	1912      	adds	r2, r2, r4
 801512a:	eb45 0303 	adc.w	r3, r5, r3
 801512e:	f04f 0000 	mov.w	r0, #0
 8015132:	f04f 0100 	mov.w	r1, #0
 8015136:	00d9      	lsls	r1, r3, #3
 8015138:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801513c:	00d0      	lsls	r0, r2, #3
 801513e:	4602      	mov	r2, r0
 8015140:	460b      	mov	r3, r1
 8015142:	eb12 0804 	adds.w	r8, r2, r4
 8015146:	eb43 0905 	adc.w	r9, r3, r5
 801514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801514e:	685b      	ldr	r3, [r3, #4]
 8015150:	4618      	mov	r0, r3
 8015152:	f04f 0100 	mov.w	r1, #0
 8015156:	f04f 0200 	mov.w	r2, #0
 801515a:	f04f 0300 	mov.w	r3, #0
 801515e:	008b      	lsls	r3, r1, #2
 8015160:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015164:	0082      	lsls	r2, r0, #2
 8015166:	4640      	mov	r0, r8
 8015168:	4649      	mov	r1, r9
 801516a:	f7eb fd8d 	bl	8000c88 <__aeabi_uldivmod>
 801516e:	4602      	mov	r2, r0
 8015170:	460b      	mov	r3, r1
 8015172:	4b4e      	ldr	r3, [pc, #312]	; (80152ac <UART_SetConfig+0x734>)
 8015174:	fba3 2302 	umull	r2, r3, r3, r2
 8015178:	095b      	lsrs	r3, r3, #5
 801517a:	011e      	lsls	r6, r3, #4
 801517c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015180:	4618      	mov	r0, r3
 8015182:	f04f 0100 	mov.w	r1, #0
 8015186:	4602      	mov	r2, r0
 8015188:	460b      	mov	r3, r1
 801518a:	1894      	adds	r4, r2, r2
 801518c:	60bc      	str	r4, [r7, #8]
 801518e:	415b      	adcs	r3, r3
 8015190:	60fb      	str	r3, [r7, #12]
 8015192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015196:	1812      	adds	r2, r2, r0
 8015198:	eb41 0303 	adc.w	r3, r1, r3
 801519c:	f04f 0400 	mov.w	r4, #0
 80151a0:	f04f 0500 	mov.w	r5, #0
 80151a4:	00dd      	lsls	r5, r3, #3
 80151a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80151aa:	00d4      	lsls	r4, r2, #3
 80151ac:	4622      	mov	r2, r4
 80151ae:	462b      	mov	r3, r5
 80151b0:	1814      	adds	r4, r2, r0
 80151b2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80151b6:	414b      	adcs	r3, r1
 80151b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80151bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	4618      	mov	r0, r3
 80151c4:	f04f 0100 	mov.w	r1, #0
 80151c8:	f04f 0200 	mov.w	r2, #0
 80151cc:	f04f 0300 	mov.w	r3, #0
 80151d0:	008b      	lsls	r3, r1, #2
 80151d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80151d6:	0082      	lsls	r2, r0, #2
 80151d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80151dc:	f7eb fd54 	bl	8000c88 <__aeabi_uldivmod>
 80151e0:	4602      	mov	r2, r0
 80151e2:	460b      	mov	r3, r1
 80151e4:	4b31      	ldr	r3, [pc, #196]	; (80152ac <UART_SetConfig+0x734>)
 80151e6:	fba3 1302 	umull	r1, r3, r3, r2
 80151ea:	095b      	lsrs	r3, r3, #5
 80151ec:	2164      	movs	r1, #100	; 0x64
 80151ee:	fb01 f303 	mul.w	r3, r1, r3
 80151f2:	1ad3      	subs	r3, r2, r3
 80151f4:	011b      	lsls	r3, r3, #4
 80151f6:	3332      	adds	r3, #50	; 0x32
 80151f8:	4a2c      	ldr	r2, [pc, #176]	; (80152ac <UART_SetConfig+0x734>)
 80151fa:	fba2 2303 	umull	r2, r3, r2, r3
 80151fe:	095b      	lsrs	r3, r3, #5
 8015200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015204:	441e      	add	r6, r3
 8015206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801520a:	4618      	mov	r0, r3
 801520c:	f04f 0100 	mov.w	r1, #0
 8015210:	4602      	mov	r2, r0
 8015212:	460b      	mov	r3, r1
 8015214:	1894      	adds	r4, r2, r2
 8015216:	603c      	str	r4, [r7, #0]
 8015218:	415b      	adcs	r3, r3
 801521a:	607b      	str	r3, [r7, #4]
 801521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015220:	1812      	adds	r2, r2, r0
 8015222:	eb41 0303 	adc.w	r3, r1, r3
 8015226:	f04f 0400 	mov.w	r4, #0
 801522a:	f04f 0500 	mov.w	r5, #0
 801522e:	00dd      	lsls	r5, r3, #3
 8015230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015234:	00d4      	lsls	r4, r2, #3
 8015236:	4622      	mov	r2, r4
 8015238:	462b      	mov	r3, r5
 801523a:	1814      	adds	r4, r2, r0
 801523c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8015240:	414b      	adcs	r3, r1
 8015242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801524a:	685b      	ldr	r3, [r3, #4]
 801524c:	4618      	mov	r0, r3
 801524e:	f04f 0100 	mov.w	r1, #0
 8015252:	f04f 0200 	mov.w	r2, #0
 8015256:	f04f 0300 	mov.w	r3, #0
 801525a:	008b      	lsls	r3, r1, #2
 801525c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015260:	0082      	lsls	r2, r0, #2
 8015262:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8015266:	f7eb fd0f 	bl	8000c88 <__aeabi_uldivmod>
 801526a:	4602      	mov	r2, r0
 801526c:	460b      	mov	r3, r1
 801526e:	4b0f      	ldr	r3, [pc, #60]	; (80152ac <UART_SetConfig+0x734>)
 8015270:	fba3 1302 	umull	r1, r3, r3, r2
 8015274:	095b      	lsrs	r3, r3, #5
 8015276:	2164      	movs	r1, #100	; 0x64
 8015278:	fb01 f303 	mul.w	r3, r1, r3
 801527c:	1ad3      	subs	r3, r2, r3
 801527e:	011b      	lsls	r3, r3, #4
 8015280:	3332      	adds	r3, #50	; 0x32
 8015282:	4a0a      	ldr	r2, [pc, #40]	; (80152ac <UART_SetConfig+0x734>)
 8015284:	fba2 2303 	umull	r2, r3, r2, r3
 8015288:	095b      	lsrs	r3, r3, #5
 801528a:	f003 020f 	and.w	r2, r3, #15
 801528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	4432      	add	r2, r6
 8015296:	609a      	str	r2, [r3, #8]
}
 8015298:	e7ff      	b.n	801529a <UART_SetConfig+0x722>
 801529a:	bf00      	nop
 801529c:	37f4      	adds	r7, #244	; 0xf4
 801529e:	46bd      	mov	sp, r7
 80152a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a4:	40011000 	.word	0x40011000
 80152a8:	40011400 	.word	0x40011400
 80152ac:	51eb851f 	.word	0x51eb851f

080152b0 <__NVIC_SetPriority>:
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	4603      	mov	r3, r0
 80152b8:	6039      	str	r1, [r7, #0]
 80152ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80152bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	db0a      	blt.n	80152da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	b2da      	uxtb	r2, r3
 80152c8:	490c      	ldr	r1, [pc, #48]	; (80152fc <__NVIC_SetPriority+0x4c>)
 80152ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152ce:	0112      	lsls	r2, r2, #4
 80152d0:	b2d2      	uxtb	r2, r2
 80152d2:	440b      	add	r3, r1
 80152d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80152d8:	e00a      	b.n	80152f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	b2da      	uxtb	r2, r3
 80152de:	4908      	ldr	r1, [pc, #32]	; (8015300 <__NVIC_SetPriority+0x50>)
 80152e0:	79fb      	ldrb	r3, [r7, #7]
 80152e2:	f003 030f 	and.w	r3, r3, #15
 80152e6:	3b04      	subs	r3, #4
 80152e8:	0112      	lsls	r2, r2, #4
 80152ea:	b2d2      	uxtb	r2, r2
 80152ec:	440b      	add	r3, r1
 80152ee:	761a      	strb	r2, [r3, #24]
}
 80152f0:	bf00      	nop
 80152f2:	370c      	adds	r7, #12
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr
 80152fc:	e000e100 	.word	0xe000e100
 8015300:	e000ed00 	.word	0xe000ed00

08015304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015304:	b580      	push	{r7, lr}
 8015306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015308:	4b05      	ldr	r3, [pc, #20]	; (8015320 <SysTick_Handler+0x1c>)
 801530a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801530c:	f003 f908 	bl	8018520 <xTaskGetSchedulerState>
 8015310:	4603      	mov	r3, r0
 8015312:	2b01      	cmp	r3, #1
 8015314:	d001      	beq.n	801531a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015316:	f004 f8c7 	bl	80194a8 <xPortSysTickHandler>
  }
}
 801531a:	bf00      	nop
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	e000e010 	.word	0xe000e010

08015324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015328:	2100      	movs	r1, #0
 801532a:	f06f 0004 	mvn.w	r0, #4
 801532e:	f7ff ffbf 	bl	80152b0 <__NVIC_SetPriority>
#endif
}
 8015332:	bf00      	nop
 8015334:	bd80      	pop	{r7, pc}
	...

08015338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015338:	b480      	push	{r7}
 801533a:	b083      	sub	sp, #12
 801533c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801533e:	f3ef 8305 	mrs	r3, IPSR
 8015342:	603b      	str	r3, [r7, #0]
  return(result);
 8015344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015346:	2b00      	cmp	r3, #0
 8015348:	d003      	beq.n	8015352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801534a:	f06f 0305 	mvn.w	r3, #5
 801534e:	607b      	str	r3, [r7, #4]
 8015350:	e00c      	b.n	801536c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015352:	4b0a      	ldr	r3, [pc, #40]	; (801537c <osKernelInitialize+0x44>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d105      	bne.n	8015366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801535a:	4b08      	ldr	r3, [pc, #32]	; (801537c <osKernelInitialize+0x44>)
 801535c:	2201      	movs	r2, #1
 801535e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015360:	2300      	movs	r3, #0
 8015362:	607b      	str	r3, [r7, #4]
 8015364:	e002      	b.n	801536c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801536a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801536c:	687b      	ldr	r3, [r7, #4]
}
 801536e:	4618      	mov	r0, r3
 8015370:	370c      	adds	r7, #12
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop
 801537c:	200004bc 	.word	0x200004bc

08015380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015386:	f3ef 8305 	mrs	r3, IPSR
 801538a:	603b      	str	r3, [r7, #0]
  return(result);
 801538c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801538e:	2b00      	cmp	r3, #0
 8015390:	d003      	beq.n	801539a <osKernelStart+0x1a>
    stat = osErrorISR;
 8015392:	f06f 0305 	mvn.w	r3, #5
 8015396:	607b      	str	r3, [r7, #4]
 8015398:	e010      	b.n	80153bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801539a:	4b0b      	ldr	r3, [pc, #44]	; (80153c8 <osKernelStart+0x48>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d109      	bne.n	80153b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80153a2:	f7ff ffbf 	bl	8015324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80153a6:	4b08      	ldr	r3, [pc, #32]	; (80153c8 <osKernelStart+0x48>)
 80153a8:	2202      	movs	r2, #2
 80153aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80153ac:	f002 fb5c 	bl	8017a68 <vTaskStartScheduler>
      stat = osOK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	607b      	str	r3, [r7, #4]
 80153b4:	e002      	b.n	80153bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80153b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80153bc:	687b      	ldr	r3, [r7, #4]
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3708      	adds	r7, #8
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	200004bc 	.word	0x200004bc

080153cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b08e      	sub	sp, #56	; 0x38
 80153d0:	af04      	add	r7, sp, #16
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80153d8:	2300      	movs	r3, #0
 80153da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80153dc:	f3ef 8305 	mrs	r3, IPSR
 80153e0:	617b      	str	r3, [r7, #20]
  return(result);
 80153e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d17e      	bne.n	80154e6 <osThreadNew+0x11a>
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d07b      	beq.n	80154e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80153ee:	2380      	movs	r3, #128	; 0x80
 80153f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80153f2:	2318      	movs	r3, #24
 80153f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80153f6:	2300      	movs	r3, #0
 80153f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80153fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d045      	beq.n	8015492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d002      	beq.n	8015414 <osThreadNew+0x48>
        name = attr->name;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	699b      	ldr	r3, [r3, #24]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d002      	beq.n	8015422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	699b      	ldr	r3, [r3, #24]
 8015420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015422:	69fb      	ldr	r3, [r7, #28]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d008      	beq.n	801543a <osThreadNew+0x6e>
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	2b38      	cmp	r3, #56	; 0x38
 801542c:	d805      	bhi.n	801543a <osThreadNew+0x6e>
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	685b      	ldr	r3, [r3, #4]
 8015432:	f003 0301 	and.w	r3, r3, #1
 8015436:	2b00      	cmp	r3, #0
 8015438:	d001      	beq.n	801543e <osThreadNew+0x72>
        return (NULL);
 801543a:	2300      	movs	r3, #0
 801543c:	e054      	b.n	80154e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	695b      	ldr	r3, [r3, #20]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d003      	beq.n	801544e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	695b      	ldr	r3, [r3, #20]
 801544a:	089b      	lsrs	r3, r3, #2
 801544c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	689b      	ldr	r3, [r3, #8]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d00e      	beq.n	8015474 <osThreadNew+0xa8>
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	68db      	ldr	r3, [r3, #12]
 801545a:	2b5b      	cmp	r3, #91	; 0x5b
 801545c:	d90a      	bls.n	8015474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015462:	2b00      	cmp	r3, #0
 8015464:	d006      	beq.n	8015474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	695b      	ldr	r3, [r3, #20]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d002      	beq.n	8015474 <osThreadNew+0xa8>
        mem = 1;
 801546e:	2301      	movs	r3, #1
 8015470:	61bb      	str	r3, [r7, #24]
 8015472:	e010      	b.n	8015496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	689b      	ldr	r3, [r3, #8]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d10c      	bne.n	8015496 <osThreadNew+0xca>
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d108      	bne.n	8015496 <osThreadNew+0xca>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	691b      	ldr	r3, [r3, #16]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d104      	bne.n	8015496 <osThreadNew+0xca>
          mem = 0;
 801548c:	2300      	movs	r3, #0
 801548e:	61bb      	str	r3, [r7, #24]
 8015490:	e001      	b.n	8015496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015492:	2300      	movs	r3, #0
 8015494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	2b01      	cmp	r3, #1
 801549a:	d110      	bne.n	80154be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80154a4:	9202      	str	r2, [sp, #8]
 80154a6:	9301      	str	r3, [sp, #4]
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	9300      	str	r3, [sp, #0]
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	6a3a      	ldr	r2, [r7, #32]
 80154b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154b2:	68f8      	ldr	r0, [r7, #12]
 80154b4:	f002 f868 	bl	8017588 <xTaskCreateStatic>
 80154b8:	4603      	mov	r3, r0
 80154ba:	613b      	str	r3, [r7, #16]
 80154bc:	e013      	b.n	80154e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d110      	bne.n	80154e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80154c4:	6a3b      	ldr	r3, [r7, #32]
 80154c6:	b29a      	uxth	r2, r3
 80154c8:	f107 0310 	add.w	r3, r7, #16
 80154cc:	9301      	str	r3, [sp, #4]
 80154ce:	69fb      	ldr	r3, [r7, #28]
 80154d0:	9300      	str	r3, [sp, #0]
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154d6:	68f8      	ldr	r0, [r7, #12]
 80154d8:	f002 f8b3 	bl	8017642 <xTaskCreate>
 80154dc:	4603      	mov	r3, r0
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d001      	beq.n	80154e6 <osThreadNew+0x11a>
            hTask = NULL;
 80154e2:	2300      	movs	r3, #0
 80154e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80154e6:	693b      	ldr	r3, [r7, #16]
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	3728      	adds	r7, #40	; 0x28
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}

080154f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154f8:	f3ef 8305 	mrs	r3, IPSR
 80154fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80154fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015500:	2b00      	cmp	r3, #0
 8015502:	d003      	beq.n	801550c <osDelay+0x1c>
    stat = osErrorISR;
 8015504:	f06f 0305 	mvn.w	r3, #5
 8015508:	60fb      	str	r3, [r7, #12]
 801550a:	e007      	b.n	801551c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801550c:	2300      	movs	r3, #0
 801550e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d002      	beq.n	801551c <osDelay+0x2c>
      vTaskDelay(ticks);
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f002 fa3a 	bl	8017990 <vTaskDelay>
    }
  }

  return (stat);
 801551c:	68fb      	ldr	r3, [r7, #12]
}
 801551e:	4618      	mov	r0, r3
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}

08015526 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015526:	b580      	push	{r7, lr}
 8015528:	b08a      	sub	sp, #40	; 0x28
 801552a:	af02      	add	r7, sp, #8
 801552c:	60f8      	str	r0, [r7, #12]
 801552e:	60b9      	str	r1, [r7, #8]
 8015530:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8015532:	2300      	movs	r3, #0
 8015534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015536:	f3ef 8305 	mrs	r3, IPSR
 801553a:	613b      	str	r3, [r7, #16]
  return(result);
 801553c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801553e:	2b00      	cmp	r3, #0
 8015540:	d175      	bne.n	801562e <osSemaphoreNew+0x108>
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d072      	beq.n	801562e <osSemaphoreNew+0x108>
 8015548:	68ba      	ldr	r2, [r7, #8]
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	429a      	cmp	r2, r3
 801554e:	d86e      	bhi.n	801562e <osSemaphoreNew+0x108>
    mem = -1;
 8015550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015554:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d015      	beq.n	8015588 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	689b      	ldr	r3, [r3, #8]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d006      	beq.n	8015572 <osSemaphoreNew+0x4c>
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	2b4f      	cmp	r3, #79	; 0x4f
 801556a:	d902      	bls.n	8015572 <osSemaphoreNew+0x4c>
        mem = 1;
 801556c:	2301      	movs	r3, #1
 801556e:	61bb      	str	r3, [r7, #24]
 8015570:	e00c      	b.n	801558c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	689b      	ldr	r3, [r3, #8]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d108      	bne.n	801558c <osSemaphoreNew+0x66>
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	68db      	ldr	r3, [r3, #12]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d104      	bne.n	801558c <osSemaphoreNew+0x66>
          mem = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	61bb      	str	r3, [r7, #24]
 8015586:	e001      	b.n	801558c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8015588:	2300      	movs	r3, #0
 801558a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801558c:	69bb      	ldr	r3, [r7, #24]
 801558e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015592:	d04c      	beq.n	801562e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b01      	cmp	r3, #1
 8015598:	d128      	bne.n	80155ec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	2b01      	cmp	r3, #1
 801559e:	d10a      	bne.n	80155b6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	689b      	ldr	r3, [r3, #8]
 80155a4:	2203      	movs	r2, #3
 80155a6:	9200      	str	r2, [sp, #0]
 80155a8:	2200      	movs	r2, #0
 80155aa:	2100      	movs	r1, #0
 80155ac:	2001      	movs	r0, #1
 80155ae:	f000 fa29 	bl	8015a04 <xQueueGenericCreateStatic>
 80155b2:	61f8      	str	r0, [r7, #28]
 80155b4:	e005      	b.n	80155c2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80155b6:	2203      	movs	r2, #3
 80155b8:	2100      	movs	r1, #0
 80155ba:	2001      	movs	r0, #1
 80155bc:	f000 fab8 	bl	8015b30 <xQueueGenericCreate>
 80155c0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d022      	beq.n	801560e <osSemaphoreNew+0xe8>
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d01f      	beq.n	801560e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80155ce:	2300      	movs	r3, #0
 80155d0:	2200      	movs	r2, #0
 80155d2:	2100      	movs	r1, #0
 80155d4:	69f8      	ldr	r0, [r7, #28]
 80155d6:	f000 fbff 	bl	8015dd8 <xQueueGenericSend>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b01      	cmp	r3, #1
 80155de:	d016      	beq.n	801560e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80155e0:	69f8      	ldr	r0, [r7, #28]
 80155e2:	f001 fd39 	bl	8017058 <vQueueDelete>
            hSemaphore = NULL;
 80155e6:	2300      	movs	r3, #0
 80155e8:	61fb      	str	r3, [r7, #28]
 80155ea:	e010      	b.n	801560e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	2b01      	cmp	r3, #1
 80155f0:	d108      	bne.n	8015604 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	689b      	ldr	r3, [r3, #8]
 80155f6:	461a      	mov	r2, r3
 80155f8:	68b9      	ldr	r1, [r7, #8]
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f000 fb82 	bl	8015d04 <xQueueCreateCountingSemaphoreStatic>
 8015600:	61f8      	str	r0, [r7, #28]
 8015602:	e004      	b.n	801560e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015604:	68b9      	ldr	r1, [r7, #8]
 8015606:	68f8      	ldr	r0, [r7, #12]
 8015608:	f000 fbb3 	bl	8015d72 <xQueueCreateCountingSemaphore>
 801560c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d00c      	beq.n	801562e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d003      	beq.n	8015622 <osSemaphoreNew+0xfc>
          name = attr->name;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	617b      	str	r3, [r7, #20]
 8015620:	e001      	b.n	8015626 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8015622:	2300      	movs	r3, #0
 8015624:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015626:	6979      	ldr	r1, [r7, #20]
 8015628:	69f8      	ldr	r0, [r7, #28]
 801562a:	f001 ff15 	bl	8017458 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801562e:	69fb      	ldr	r3, [r7, #28]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3720      	adds	r7, #32
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015638:	b580      	push	{r7, lr}
 801563a:	b086      	sub	sp, #24
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015646:	2300      	movs	r3, #0
 8015648:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d103      	bne.n	8015658 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8015650:	f06f 0303 	mvn.w	r3, #3
 8015654:	617b      	str	r3, [r7, #20]
 8015656:	e039      	b.n	80156cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015658:	f3ef 8305 	mrs	r3, IPSR
 801565c:	60fb      	str	r3, [r7, #12]
  return(result);
 801565e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015660:	2b00      	cmp	r3, #0
 8015662:	d022      	beq.n	80156aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d003      	beq.n	8015672 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801566a:	f06f 0303 	mvn.w	r3, #3
 801566e:	617b      	str	r3, [r7, #20]
 8015670:	e02c      	b.n	80156cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8015672:	2300      	movs	r3, #0
 8015674:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8015676:	f107 0308 	add.w	r3, r7, #8
 801567a:	461a      	mov	r2, r3
 801567c:	2100      	movs	r1, #0
 801567e:	6938      	ldr	r0, [r7, #16]
 8015680:	f001 fc04 	bl	8016e8c <xQueueReceiveFromISR>
 8015684:	4603      	mov	r3, r0
 8015686:	2b01      	cmp	r3, #1
 8015688:	d003      	beq.n	8015692 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801568a:	f06f 0302 	mvn.w	r3, #2
 801568e:	617b      	str	r3, [r7, #20]
 8015690:	e01c      	b.n	80156cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d019      	beq.n	80156cc <osSemaphoreAcquire+0x94>
 8015698:	4b0f      	ldr	r3, [pc, #60]	; (80156d8 <osSemaphoreAcquire+0xa0>)
 801569a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801569e:	601a      	str	r2, [r3, #0]
 80156a0:	f3bf 8f4f 	dsb	sy
 80156a4:	f3bf 8f6f 	isb	sy
 80156a8:	e010      	b.n	80156cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80156aa:	6839      	ldr	r1, [r7, #0]
 80156ac:	6938      	ldr	r0, [r7, #16]
 80156ae:	f001 f9bd 	bl	8016a2c <xQueueSemaphoreTake>
 80156b2:	4603      	mov	r3, r0
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	d009      	beq.n	80156cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d003      	beq.n	80156c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80156be:	f06f 0301 	mvn.w	r3, #1
 80156c2:	617b      	str	r3, [r7, #20]
 80156c4:	e002      	b.n	80156cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80156c6:	f06f 0302 	mvn.w	r3, #2
 80156ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80156cc:	697b      	ldr	r3, [r7, #20]
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3718      	adds	r7, #24
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
 80156d6:	bf00      	nop
 80156d8:	e000ed04 	.word	0xe000ed04

080156dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80156dc:	b580      	push	{r7, lr}
 80156de:	b086      	sub	sp, #24
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80156e8:	2300      	movs	r3, #0
 80156ea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d103      	bne.n	80156fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80156f2:	f06f 0303 	mvn.w	r3, #3
 80156f6:	617b      	str	r3, [r7, #20]
 80156f8:	e02c      	b.n	8015754 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156fa:	f3ef 8305 	mrs	r3, IPSR
 80156fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8015700:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015702:	2b00      	cmp	r3, #0
 8015704:	d01a      	beq.n	801573c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015706:	2300      	movs	r3, #0
 8015708:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801570a:	f107 0308 	add.w	r3, r7, #8
 801570e:	4619      	mov	r1, r3
 8015710:	6938      	ldr	r0, [r7, #16]
 8015712:	f000 fe79 	bl	8016408 <xQueueGiveFromISR>
 8015716:	4603      	mov	r3, r0
 8015718:	2b01      	cmp	r3, #1
 801571a:	d003      	beq.n	8015724 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801571c:	f06f 0302 	mvn.w	r3, #2
 8015720:	617b      	str	r3, [r7, #20]
 8015722:	e017      	b.n	8015754 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d014      	beq.n	8015754 <osSemaphoreRelease+0x78>
 801572a:	4b0d      	ldr	r3, [pc, #52]	; (8015760 <osSemaphoreRelease+0x84>)
 801572c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015730:	601a      	str	r2, [r3, #0]
 8015732:	f3bf 8f4f 	dsb	sy
 8015736:	f3bf 8f6f 	isb	sy
 801573a:	e00b      	b.n	8015754 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801573c:	2300      	movs	r3, #0
 801573e:	2200      	movs	r2, #0
 8015740:	2100      	movs	r1, #0
 8015742:	6938      	ldr	r0, [r7, #16]
 8015744:	f000 fb48 	bl	8015dd8 <xQueueGenericSend>
 8015748:	4603      	mov	r3, r0
 801574a:	2b01      	cmp	r3, #1
 801574c:	d002      	beq.n	8015754 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801574e:	f06f 0302 	mvn.w	r3, #2
 8015752:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015754:	697b      	ldr	r3, [r7, #20]
}
 8015756:	4618      	mov	r0, r3
 8015758:	3718      	adds	r7, #24
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	e000ed04 	.word	0xe000ed04

08015764 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015764:	b480      	push	{r7}
 8015766:	b085      	sub	sp, #20
 8015768:	af00      	add	r7, sp, #0
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	4a07      	ldr	r2, [pc, #28]	; (8015790 <vApplicationGetIdleTaskMemory+0x2c>)
 8015774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	4a06      	ldr	r2, [pc, #24]	; (8015794 <vApplicationGetIdleTaskMemory+0x30>)
 801577a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2280      	movs	r2, #128	; 0x80
 8015780:	601a      	str	r2, [r3, #0]
}
 8015782:	bf00      	nop
 8015784:	3714      	adds	r7, #20
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr
 801578e:	bf00      	nop
 8015790:	200004c0 	.word	0x200004c0
 8015794:	2000051c 	.word	0x2000051c

08015798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015798:	b480      	push	{r7}
 801579a:	b085      	sub	sp, #20
 801579c:	af00      	add	r7, sp, #0
 801579e:	60f8      	str	r0, [r7, #12]
 80157a0:	60b9      	str	r1, [r7, #8]
 80157a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	4a07      	ldr	r2, [pc, #28]	; (80157c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80157a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	4a06      	ldr	r2, [pc, #24]	; (80157c8 <vApplicationGetTimerTaskMemory+0x30>)
 80157ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80157b6:	601a      	str	r2, [r3, #0]
}
 80157b8:	bf00      	nop
 80157ba:	3714      	adds	r7, #20
 80157bc:	46bd      	mov	sp, r7
 80157be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c2:	4770      	bx	lr
 80157c4:	2000071c 	.word	0x2000071c
 80157c8:	20000778 	.word	0x20000778

080157cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f103 0208 	add.w	r2, r3, #8
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f103 0208 	add.w	r2, r3, #8
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f103 0208 	add.w	r2, r3, #8
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	2200      	movs	r2, #0
 80157fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015800:	bf00      	nop
 8015802:	370c      	adds	r7, #12
 8015804:	46bd      	mov	sp, r7
 8015806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580a:	4770      	bx	lr

0801580c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801580c:	b480      	push	{r7}
 801580e:	b083      	sub	sp, #12
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	2200      	movs	r2, #0
 8015818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801581a:	bf00      	nop
 801581c:	370c      	adds	r7, #12
 801581e:	46bd      	mov	sp, r7
 8015820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015824:	4770      	bx	lr

08015826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015826:	b480      	push	{r7}
 8015828:	b085      	sub	sp, #20
 801582a:	af00      	add	r7, sp, #0
 801582c:	6078      	str	r0, [r7, #4]
 801582e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	685b      	ldr	r3, [r3, #4]
 8015834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	68fa      	ldr	r2, [r7, #12]
 801583a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	689a      	ldr	r2, [r3, #8]
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	689b      	ldr	r3, [r3, #8]
 8015848:	683a      	ldr	r2, [r7, #0]
 801584a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	1c5a      	adds	r2, r3, #1
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	601a      	str	r2, [r3, #0]
}
 8015862:	bf00      	nop
 8015864:	3714      	adds	r7, #20
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr

0801586e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801586e:	b480      	push	{r7}
 8015870:	b085      	sub	sp, #20
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
 8015876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015884:	d103      	bne.n	801588e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	691b      	ldr	r3, [r3, #16]
 801588a:	60fb      	str	r3, [r7, #12]
 801588c:	e00c      	b.n	80158a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	3308      	adds	r3, #8
 8015892:	60fb      	str	r3, [r7, #12]
 8015894:	e002      	b.n	801589c <vListInsert+0x2e>
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	60fb      	str	r3, [r7, #12]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	68ba      	ldr	r2, [r7, #8]
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d2f6      	bcs.n	8015896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	685a      	ldr	r2, [r3, #4]
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	683a      	ldr	r2, [r7, #0]
 80158b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	68fa      	ldr	r2, [r7, #12]
 80158bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	683a      	ldr	r2, [r7, #0]
 80158c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	687a      	ldr	r2, [r7, #4]
 80158c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	1c5a      	adds	r2, r3, #1
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	601a      	str	r2, [r3, #0]
}
 80158d4:	bf00      	nop
 80158d6:	3714      	adds	r7, #20
 80158d8:	46bd      	mov	sp, r7
 80158da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158de:	4770      	bx	lr

080158e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80158e0:	b480      	push	{r7}
 80158e2:	b085      	sub	sp, #20
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	691b      	ldr	r3, [r3, #16]
 80158ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	685b      	ldr	r3, [r3, #4]
 80158f2:	687a      	ldr	r2, [r7, #4]
 80158f4:	6892      	ldr	r2, [r2, #8]
 80158f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	689b      	ldr	r3, [r3, #8]
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	6852      	ldr	r2, [r2, #4]
 8015900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	429a      	cmp	r2, r3
 801590a:	d103      	bne.n	8015914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	689a      	ldr	r2, [r3, #8]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2200      	movs	r2, #0
 8015918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	1e5a      	subs	r2, r3, #1
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
}
 8015928:	4618      	mov	r0, r3
 801592a:	3714      	adds	r7, #20
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr

08015934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d10a      	bne.n	801595e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594c:	f383 8811 	msr	BASEPRI, r3
 8015950:	f3bf 8f6f 	isb	sy
 8015954:	f3bf 8f4f 	dsb	sy
 8015958:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801595a:	bf00      	nop
 801595c:	e7fe      	b.n	801595c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801595e:	f003 fd11 	bl	8019384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	681a      	ldr	r2, [r3, #0]
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801596a:	68f9      	ldr	r1, [r7, #12]
 801596c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801596e:	fb01 f303 	mul.w	r3, r1, r3
 8015972:	441a      	add	r2, r3
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	2200      	movs	r2, #0
 801597c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	681a      	ldr	r2, [r3, #0]
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801598e:	3b01      	subs	r3, #1
 8015990:	68f9      	ldr	r1, [r7, #12]
 8015992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015994:	fb01 f303 	mul.w	r3, r1, r3
 8015998:	441a      	add	r2, r3
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	22ff      	movs	r2, #255	; 0xff
 80159a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	22ff      	movs	r2, #255	; 0xff
 80159aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d114      	bne.n	80159de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	691b      	ldr	r3, [r3, #16]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d01a      	beq.n	80159f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	3310      	adds	r3, #16
 80159c0:	4618      	mov	r0, r3
 80159c2:	f002 fba1 	bl	8018108 <xTaskRemoveFromEventList>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d012      	beq.n	80159f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80159cc:	4b0c      	ldr	r3, [pc, #48]	; (8015a00 <xQueueGenericReset+0xcc>)
 80159ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159d2:	601a      	str	r2, [r3, #0]
 80159d4:	f3bf 8f4f 	dsb	sy
 80159d8:	f3bf 8f6f 	isb	sy
 80159dc:	e009      	b.n	80159f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	3310      	adds	r3, #16
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7ff fef2 	bl	80157cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	3324      	adds	r3, #36	; 0x24
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7ff feed 	bl	80157cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80159f2:	f003 fcf7 	bl	80193e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80159f6:	2301      	movs	r3, #1
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	e000ed04 	.word	0xe000ed04

08015a04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b08e      	sub	sp, #56	; 0x38
 8015a08:	af02      	add	r7, sp, #8
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d10a      	bne.n	8015a2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a1c:	f383 8811 	msr	BASEPRI, r3
 8015a20:	f3bf 8f6f 	isb	sy
 8015a24:	f3bf 8f4f 	dsb	sy
 8015a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015a2a:	bf00      	nop
 8015a2c:	e7fe      	b.n	8015a2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d10a      	bne.n	8015a4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a38:	f383 8811 	msr	BASEPRI, r3
 8015a3c:	f3bf 8f6f 	isb	sy
 8015a40:	f3bf 8f4f 	dsb	sy
 8015a44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015a46:	bf00      	nop
 8015a48:	e7fe      	b.n	8015a48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d002      	beq.n	8015a56 <xQueueGenericCreateStatic+0x52>
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d001      	beq.n	8015a5a <xQueueGenericCreateStatic+0x56>
 8015a56:	2301      	movs	r3, #1
 8015a58:	e000      	b.n	8015a5c <xQueueGenericCreateStatic+0x58>
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d10a      	bne.n	8015a76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a64:	f383 8811 	msr	BASEPRI, r3
 8015a68:	f3bf 8f6f 	isb	sy
 8015a6c:	f3bf 8f4f 	dsb	sy
 8015a70:	623b      	str	r3, [r7, #32]
}
 8015a72:	bf00      	nop
 8015a74:	e7fe      	b.n	8015a74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d102      	bne.n	8015a82 <xQueueGenericCreateStatic+0x7e>
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d101      	bne.n	8015a86 <xQueueGenericCreateStatic+0x82>
 8015a82:	2301      	movs	r3, #1
 8015a84:	e000      	b.n	8015a88 <xQueueGenericCreateStatic+0x84>
 8015a86:	2300      	movs	r3, #0
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d10a      	bne.n	8015aa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a90:	f383 8811 	msr	BASEPRI, r3
 8015a94:	f3bf 8f6f 	isb	sy
 8015a98:	f3bf 8f4f 	dsb	sy
 8015a9c:	61fb      	str	r3, [r7, #28]
}
 8015a9e:	bf00      	nop
 8015aa0:	e7fe      	b.n	8015aa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015aa2:	2350      	movs	r3, #80	; 0x50
 8015aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	2b50      	cmp	r3, #80	; 0x50
 8015aaa:	d00a      	beq.n	8015ac2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab0:	f383 8811 	msr	BASEPRI, r3
 8015ab4:	f3bf 8f6f 	isb	sy
 8015ab8:	f3bf 8f4f 	dsb	sy
 8015abc:	61bb      	str	r3, [r7, #24]
}
 8015abe:	bf00      	nop
 8015ac0:	e7fe      	b.n	8015ac0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015ac2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00e      	beq.n	8015aec <xQueueGenericCreateStatic+0xe8>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015ad6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015adc:	9300      	str	r3, [sp, #0]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	68b9      	ldr	r1, [r7, #8]
 8015ae4:	68f8      	ldr	r0, [r7, #12]
 8015ae6:	f000 f879 	bl	8015bdc <prvInitialiseNewQueue>
 8015aea:	e017      	b.n	8015b1c <xQueueGenericCreateStatic+0x118>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8015aec:	f7f8 f943 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8015af0:	4603      	mov	r3, r0
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7f8 f8be 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8015af8:	4603      	mov	r3, r0
 8015afa:	461a      	mov	r2, r3
 8015afc:	4b0a      	ldr	r3, [pc, #40]	; (8015b28 <xQueueGenericCreateStatic+0x124>)
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	4013      	ands	r3, r2
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d009      	beq.n	8015b1c <xQueueGenericCreateStatic+0x118>
 8015b08:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015b0c:	4a07      	ldr	r2, [pc, #28]	; (8015b2c <xQueueGenericCreateStatic+0x128>)
 8015b0e:	5cd3      	ldrb	r3, [r2, r3]
 8015b10:	3340      	adds	r3, #64	; 0x40
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	2100      	movs	r1, #0
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7f8 fbd8 	bl	800e2cc <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3730      	adds	r7, #48	; 0x30
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	20008358 	.word	0x20008358
 8015b2c:	2000026c 	.word	0x2000026c

08015b30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b08a      	sub	sp, #40	; 0x28
 8015b34:	af02      	add	r7, sp, #8
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	4613      	mov	r3, r2
 8015b3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d10a      	bne.n	8015b5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8015b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b48:	f383 8811 	msr	BASEPRI, r3
 8015b4c:	f3bf 8f6f 	isb	sy
 8015b50:	f3bf 8f4f 	dsb	sy
 8015b54:	613b      	str	r3, [r7, #16]
}
 8015b56:	bf00      	nop
 8015b58:	e7fe      	b.n	8015b58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	68ba      	ldr	r2, [r7, #8]
 8015b5e:	fb02 f303 	mul.w	r3, r2, r3
 8015b62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015b64:	69fb      	ldr	r3, [r7, #28]
 8015b66:	3350      	adds	r3, #80	; 0x50
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f003 fd2d 	bl	80195c8 <pvPortMalloc>
 8015b6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d012      	beq.n	8015b9c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015b76:	69bb      	ldr	r3, [r7, #24]
 8015b78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	3350      	adds	r3, #80	; 0x50
 8015b7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015b80:	69bb      	ldr	r3, [r7, #24]
 8015b82:	2200      	movs	r2, #0
 8015b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015b88:	79fa      	ldrb	r2, [r7, #7]
 8015b8a:	69bb      	ldr	r3, [r7, #24]
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	4613      	mov	r3, r2
 8015b90:	697a      	ldr	r2, [r7, #20]
 8015b92:	68b9      	ldr	r1, [r7, #8]
 8015b94:	68f8      	ldr	r0, [r7, #12]
 8015b96:	f000 f821 	bl	8015bdc <prvInitialiseNewQueue>
 8015b9a:	e016      	b.n	8015bca <xQueueGenericCreate+0x9a>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 8015b9c:	f7f8 f8eb 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7f8 f866 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	461a      	mov	r2, r3
 8015bac:	4b09      	ldr	r3, [pc, #36]	; (8015bd4 <xQueueGenericCreate+0xa4>)
 8015bae:	881b      	ldrh	r3, [r3, #0]
 8015bb0:	4013      	ands	r3, r2
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d008      	beq.n	8015bca <xQueueGenericCreate+0x9a>
 8015bb8:	79fb      	ldrb	r3, [r7, #7]
 8015bba:	4a07      	ldr	r2, [pc, #28]	; (8015bd8 <xQueueGenericCreate+0xa8>)
 8015bbc:	5cd3      	ldrb	r3, [r2, r3]
 8015bbe:	3340      	adds	r3, #64	; 0x40
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	2100      	movs	r1, #0
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7f8 fb81 	bl	800e2cc <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015bca:	69bb      	ldr	r3, [r7, #24]
	}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3720      	adds	r7, #32
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	20008358 	.word	0x20008358
 8015bd8:	2000026c 	.word	0x2000026c

08015bdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015bdc:	b5b0      	push	{r4, r5, r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
 8015be8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d103      	bne.n	8015bf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015bf0:	6a3b      	ldr	r3, [r7, #32]
 8015bf2:	6a3a      	ldr	r2, [r7, #32]
 8015bf4:	601a      	str	r2, [r3, #0]
 8015bf6:	e002      	b.n	8015bfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015bf8:	6a3b      	ldr	r3, [r7, #32]
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015bfe:	6a3b      	ldr	r3, [r7, #32]
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015c04:	6a3b      	ldr	r3, [r7, #32]
 8015c06:	68ba      	ldr	r2, [r7, #8]
 8015c08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015c0a:	2101      	movs	r1, #1
 8015c0c:	6a38      	ldr	r0, [r7, #32]
 8015c0e:	f7ff fe91 	bl	8015934 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015c12:	6a3b      	ldr	r3, [r7, #32]
 8015c14:	78fa      	ldrb	r2, [r7, #3]
 8015c16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8015c1a:	6a38      	ldr	r0, [r7, #32]
 8015c1c:	f7f8 f811 	bl	800dc42 <prvTraceGetQueueType>
 8015c20:	4603      	mov	r3, r0
 8015c22:	461a      	mov	r2, r3
 8015c24:	4b34      	ldr	r3, [pc, #208]	; (8015cf8 <prvInitialiseNewQueue+0x11c>)
 8015c26:	5c9b      	ldrb	r3, [r3, r2]
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7f8 fe77 	bl	800e91c <prvTraceGetObjectHandle>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	4619      	mov	r1, r3
 8015c34:	6a38      	ldr	r0, [r7, #32]
 8015c36:	f7f8 f872 	bl	800dd1e <prvTraceSetQueueNumberLow16>
 8015c3a:	4b30      	ldr	r3, [pc, #192]	; (8015cfc <prvInitialiseNewQueue+0x120>)
 8015c3c:	881b      	ldrh	r3, [r3, #0]
 8015c3e:	4619      	mov	r1, r3
 8015c40:	6a38      	ldr	r0, [r7, #32]
 8015c42:	f7f8 f882 	bl	800dd4a <prvTraceSetQueueNumberHigh16>
 8015c46:	6a38      	ldr	r0, [r7, #32]
 8015c48:	f7f7 fffb 	bl	800dc42 <prvTraceGetQueueType>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	461a      	mov	r2, r3
 8015c50:	4b29      	ldr	r3, [pc, #164]	; (8015cf8 <prvInitialiseNewQueue+0x11c>)
 8015c52:	5c9c      	ldrb	r4, [r3, r2]
 8015c54:	6a38      	ldr	r0, [r7, #32]
 8015c56:	f7f8 f847 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	4619      	mov	r1, r3
 8015c60:	4620      	mov	r0, r4
 8015c62:	f7f8 ff63 	bl	800eb2c <prvMarkObjectAsUsed>
 8015c66:	f7f8 f886 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7f8 f801 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8015c72:	4603      	mov	r3, r0
 8015c74:	461a      	mov	r2, r3
 8015c76:	4b22      	ldr	r3, [pc, #136]	; (8015d00 <prvInitialiseNewQueue+0x124>)
 8015c78:	881b      	ldrh	r3, [r3, #0]
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d025      	beq.n	8015cce <prvInitialiseNewQueue+0xf2>
 8015c82:	6a38      	ldr	r0, [r7, #32]
 8015c84:	f7f8 f83d 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	4b1c      	ldr	r3, [pc, #112]	; (8015d00 <prvInitialiseNewQueue+0x124>)
 8015c8e:	881b      	ldrh	r3, [r3, #0]
 8015c90:	4013      	ands	r3, r2
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d01a      	beq.n	8015cce <prvInitialiseNewQueue+0xf2>
 8015c98:	6a38      	ldr	r0, [r7, #32]
 8015c9a:	f7f7 ffd2 	bl	800dc42 <prvTraceGetQueueType>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	4b15      	ldr	r3, [pc, #84]	; (8015cf8 <prvInitialiseNewQueue+0x11c>)
 8015ca4:	5c9b      	ldrb	r3, [r3, r2]
 8015ca6:	3318      	adds	r3, #24
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	461d      	mov	r5, r3
 8015cac:	6a38      	ldr	r0, [r7, #32]
 8015cae:	f7f7 ffc8 	bl	800dc42 <prvTraceGetQueueType>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	4b10      	ldr	r3, [pc, #64]	; (8015cf8 <prvInitialiseNewQueue+0x11c>)
 8015cb8:	5c9c      	ldrb	r4, [r3, r2]
 8015cba:	6a38      	ldr	r0, [r7, #32]
 8015cbc:	f7f8 f814 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	461a      	mov	r2, r3
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	4628      	mov	r0, r5
 8015cca:	f7f8 f9bb 	bl	800e044 <prvTraceStoreKernelCall>
 8015cce:	6a38      	ldr	r0, [r7, #32]
 8015cd0:	f7f7 ffb7 	bl	800dc42 <prvTraceGetQueueType>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	4b07      	ldr	r3, [pc, #28]	; (8015cf8 <prvInitialiseNewQueue+0x11c>)
 8015cda:	5c9c      	ldrb	r4, [r3, r2]
 8015cdc:	6a38      	ldr	r0, [r7, #32]
 8015cde:	f7f8 f803 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	4619      	mov	r1, r3
 8015cea:	4620      	mov	r0, r4
 8015cec:	f7f8 fcf8 	bl	800e6e0 <prvTraceSetObjectState>
}
 8015cf0:	bf00      	nop
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8015cf8:	2000026c 	.word	0x2000026c
 8015cfc:	20009c64 	.word	0x20009c64
 8015d00:	20008358 	.word	0x20008358

08015d04 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b08a      	sub	sp, #40	; 0x28
 8015d08:	af02      	add	r7, sp, #8
 8015d0a:	60f8      	str	r0, [r7, #12]
 8015d0c:	60b9      	str	r1, [r7, #8]
 8015d0e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d10a      	bne.n	8015d2c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d1a:	f383 8811 	msr	BASEPRI, r3
 8015d1e:	f3bf 8f6f 	isb	sy
 8015d22:	f3bf 8f4f 	dsb	sy
 8015d26:	61bb      	str	r3, [r7, #24]
}
 8015d28:	bf00      	nop
 8015d2a:	e7fe      	b.n	8015d2a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d2c:	68ba      	ldr	r2, [r7, #8]
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	429a      	cmp	r2, r3
 8015d32:	d90a      	bls.n	8015d4a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d38:	f383 8811 	msr	BASEPRI, r3
 8015d3c:	f3bf 8f6f 	isb	sy
 8015d40:	f3bf 8f4f 	dsb	sy
 8015d44:	617b      	str	r3, [r7, #20]
}
 8015d46:	bf00      	nop
 8015d48:	e7fe      	b.n	8015d48 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015d4a:	2302      	movs	r3, #2
 8015d4c:	9300      	str	r3, [sp, #0]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2200      	movs	r2, #0
 8015d52:	2100      	movs	r1, #0
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f7ff fe55 	bl	8015a04 <xQueueGenericCreateStatic>
 8015d5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d002      	beq.n	8015d68 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	68ba      	ldr	r2, [r7, #8]
 8015d66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015d68:	69fb      	ldr	r3, [r7, #28]
	}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3720      	adds	r7, #32
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}

08015d72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015d72:	b580      	push	{r7, lr}
 8015d74:	b086      	sub	sp, #24
 8015d76:	af00      	add	r7, sp, #0
 8015d78:	6078      	str	r0, [r7, #4]
 8015d7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10a      	bne.n	8015d98 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d86:	f383 8811 	msr	BASEPRI, r3
 8015d8a:	f3bf 8f6f 	isb	sy
 8015d8e:	f3bf 8f4f 	dsb	sy
 8015d92:	613b      	str	r3, [r7, #16]
}
 8015d94:	bf00      	nop
 8015d96:	e7fe      	b.n	8015d96 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d98:	683a      	ldr	r2, [r7, #0]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d90a      	bls.n	8015db6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da4:	f383 8811 	msr	BASEPRI, r3
 8015da8:	f3bf 8f6f 	isb	sy
 8015dac:	f3bf 8f4f 	dsb	sy
 8015db0:	60fb      	str	r3, [r7, #12]
}
 8015db2:	bf00      	nop
 8015db4:	e7fe      	b.n	8015db4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015db6:	2202      	movs	r2, #2
 8015db8:	2100      	movs	r1, #0
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f7ff feb8 	bl	8015b30 <xQueueGenericCreate>
 8015dc0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d002      	beq.n	8015dce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	683a      	ldr	r2, [r7, #0]
 8015dcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015dce:	697b      	ldr	r3, [r7, #20]
	}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3718      	adds	r7, #24
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}

08015dd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015dd8:	b5b0      	push	{r4, r5, r7, lr}
 8015dda:	b08e      	sub	sp, #56	; 0x38
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	60b9      	str	r1, [r7, #8]
 8015de2:	607a      	str	r2, [r7, #4]
 8015de4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015de6:	2300      	movs	r3, #0
 8015de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d10a      	bne.n	8015e0a <xQueueGenericSend+0x32>
	__asm volatile
 8015df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df8:	f383 8811 	msr	BASEPRI, r3
 8015dfc:	f3bf 8f6f 	isb	sy
 8015e00:	f3bf 8f4f 	dsb	sy
 8015e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015e06:	bf00      	nop
 8015e08:	e7fe      	b.n	8015e08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d103      	bne.n	8015e18 <xQueueGenericSend+0x40>
 8015e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d101      	bne.n	8015e1c <xQueueGenericSend+0x44>
 8015e18:	2301      	movs	r3, #1
 8015e1a:	e000      	b.n	8015e1e <xQueueGenericSend+0x46>
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10a      	bne.n	8015e38 <xQueueGenericSend+0x60>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e34:	bf00      	nop
 8015e36:	e7fe      	b.n	8015e36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	2b02      	cmp	r3, #2
 8015e3c:	d103      	bne.n	8015e46 <xQueueGenericSend+0x6e>
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e42:	2b01      	cmp	r3, #1
 8015e44:	d101      	bne.n	8015e4a <xQueueGenericSend+0x72>
 8015e46:	2301      	movs	r3, #1
 8015e48:	e000      	b.n	8015e4c <xQueueGenericSend+0x74>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d10a      	bne.n	8015e66 <xQueueGenericSend+0x8e>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	623b      	str	r3, [r7, #32]
}
 8015e62:	bf00      	nop
 8015e64:	e7fe      	b.n	8015e64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e66:	f002 fb5b 	bl	8018520 <xTaskGetSchedulerState>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d102      	bne.n	8015e76 <xQueueGenericSend+0x9e>
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d101      	bne.n	8015e7a <xQueueGenericSend+0xa2>
 8015e76:	2301      	movs	r3, #1
 8015e78:	e000      	b.n	8015e7c <xQueueGenericSend+0xa4>
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d10a      	bne.n	8015e96 <xQueueGenericSend+0xbe>
	__asm volatile
 8015e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e84:	f383 8811 	msr	BASEPRI, r3
 8015e88:	f3bf 8f6f 	isb	sy
 8015e8c:	f3bf 8f4f 	dsb	sy
 8015e90:	61fb      	str	r3, [r7, #28]
}
 8015e92:	bf00      	nop
 8015e94:	e7fe      	b.n	8015e94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e96:	f003 fa75 	bl	8019384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d303      	bcc.n	8015eae <xQueueGenericSend+0xd6>
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	2b02      	cmp	r3, #2
 8015eaa:	f040 8084 	bne.w	8015fb6 <xQueueGenericSend+0x1de>
			{
				traceQUEUE_SEND( pxQueue );
 8015eae:	f7f7 ff62 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7f7 fedd 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	4ba6      	ldr	r3, [pc, #664]	; (8016158 <xQueueGenericSend+0x380>)
 8015ec0:	881b      	ldrh	r3, [r3, #0]
 8015ec2:	4013      	ands	r3, r2
 8015ec4:	b29b      	uxth	r3, r3
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d02a      	beq.n	8015f20 <xQueueGenericSend+0x148>
 8015eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ecc:	f7f7 ff19 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	461a      	mov	r2, r3
 8015ed4:	4ba0      	ldr	r3, [pc, #640]	; (8016158 <xQueueGenericSend+0x380>)
 8015ed6:	881b      	ldrh	r3, [r3, #0]
 8015ed8:	4013      	ands	r3, r2
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d01f      	beq.n	8015f20 <xQueueGenericSend+0x148>
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d10a      	bne.n	8015efc <xQueueGenericSend+0x124>
 8015ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ee8:	f7f7 feab 	bl	800dc42 <prvTraceGetQueueType>
 8015eec:	4603      	mov	r3, r0
 8015eee:	461a      	mov	r2, r3
 8015ef0:	4b9a      	ldr	r3, [pc, #616]	; (801615c <xQueueGenericSend+0x384>)
 8015ef2:	5c9b      	ldrb	r3, [r3, r2]
 8015ef4:	3320      	adds	r3, #32
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	461d      	mov	r5, r3
 8015efa:	e000      	b.n	8015efe <xQueueGenericSend+0x126>
 8015efc:	2525      	movs	r5, #37	; 0x25
 8015efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f00:	f7f7 fe9f 	bl	800dc42 <prvTraceGetQueueType>
 8015f04:	4603      	mov	r3, r0
 8015f06:	461a      	mov	r2, r3
 8015f08:	4b94      	ldr	r3, [pc, #592]	; (801615c <xQueueGenericSend+0x384>)
 8015f0a:	5c9c      	ldrb	r4, [r3, r2]
 8015f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f0e:	f7f7 feeb 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8015f12:	4603      	mov	r3, r0
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	461a      	mov	r2, r3
 8015f18:	4621      	mov	r1, r4
 8015f1a:	4628      	mov	r0, r5
 8015f1c:	f7f8 f892 	bl	800e044 <prvTraceStoreKernelCall>
 8015f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f22:	f7f7 fe8e 	bl	800dc42 <prvTraceGetQueueType>
 8015f26:	4603      	mov	r3, r0
 8015f28:	461a      	mov	r2, r3
 8015f2a:	4b8c      	ldr	r3, [pc, #560]	; (801615c <xQueueGenericSend+0x384>)
 8015f2c:	5c9c      	ldrb	r4, [r3, r2]
 8015f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f30:	f7f7 feda 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8015f34:	4603      	mov	r3, r0
 8015f36:	b2dd      	uxtb	r5, r3
 8015f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f3a:	f7f7 fe82 	bl	800dc42 <prvTraceGetQueueType>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	461a      	mov	r2, r3
 8015f42:	4b86      	ldr	r3, [pc, #536]	; (801615c <xQueueGenericSend+0x384>)
 8015f44:	5c9b      	ldrb	r3, [r3, r2]
 8015f46:	2b02      	cmp	r3, #2
 8015f48:	d005      	beq.n	8015f56 <xQueueGenericSend+0x17e>
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f4e:	b2db      	uxtb	r3, r3
 8015f50:	3301      	adds	r3, #1
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	e000      	b.n	8015f58 <xQueueGenericSend+0x180>
 8015f56:	2300      	movs	r3, #0
 8015f58:	461a      	mov	r2, r3
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	f7f8 fbbf 	bl	800e6e0 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015f62:	683a      	ldr	r2, [r7, #0]
 8015f64:	68b9      	ldr	r1, [r7, #8]
 8015f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f68:	f001 f965 	bl	8017236 <prvCopyDataToQueue>
 8015f6c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d010      	beq.n	8015f98 <xQueueGenericSend+0x1c0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f78:	3324      	adds	r3, #36	; 0x24
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	f002 f8c4 	bl	8018108 <xTaskRemoveFromEventList>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d013      	beq.n	8015fae <xQueueGenericSend+0x1d6>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015f86:	4b76      	ldr	r3, [pc, #472]	; (8016160 <xQueueGenericSend+0x388>)
 8015f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f8c:	601a      	str	r2, [r3, #0]
 8015f8e:	f3bf 8f4f 	dsb	sy
 8015f92:	f3bf 8f6f 	isb	sy
 8015f96:	e00a      	b.n	8015fae <xQueueGenericSend+0x1d6>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d007      	beq.n	8015fae <xQueueGenericSend+0x1d6>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015f9e:	4b70      	ldr	r3, [pc, #448]	; (8016160 <xQueueGenericSend+0x388>)
 8015fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fa4:	601a      	str	r2, [r3, #0]
 8015fa6:	f3bf 8f4f 	dsb	sy
 8015faa:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015fae:	f003 fa19 	bl	80193e4 <vPortExitCritical>
				return pdPASS;
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e115      	b.n	80161e2 <xQueueGenericSend+0x40a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d13c      	bne.n	8016036 <xQueueGenericSend+0x25e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015fbc:	f003 fa12 	bl	80193e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8015fc0:	f7f7 fed9 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7f7 fe54 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	461a      	mov	r2, r3
 8015fd0:	4b61      	ldr	r3, [pc, #388]	; (8016158 <xQueueGenericSend+0x380>)
 8015fd2:	881b      	ldrh	r3, [r3, #0]
 8015fd4:	4013      	ands	r3, r2
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d02a      	beq.n	8016032 <xQueueGenericSend+0x25a>
 8015fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fde:	f7f7 fe90 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	4b5c      	ldr	r3, [pc, #368]	; (8016158 <xQueueGenericSend+0x380>)
 8015fe8:	881b      	ldrh	r3, [r3, #0]
 8015fea:	4013      	ands	r3, r2
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d01f      	beq.n	8016032 <xQueueGenericSend+0x25a>
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d10a      	bne.n	801600e <xQueueGenericSend+0x236>
 8015ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ffa:	f7f7 fe22 	bl	800dc42 <prvTraceGetQueueType>
 8015ffe:	4603      	mov	r3, r0
 8016000:	461a      	mov	r2, r3
 8016002:	4b56      	ldr	r3, [pc, #344]	; (801615c <xQueueGenericSend+0x384>)
 8016004:	5c9b      	ldrb	r3, [r3, r2]
 8016006:	3348      	adds	r3, #72	; 0x48
 8016008:	b2db      	uxtb	r3, r3
 801600a:	461d      	mov	r5, r3
 801600c:	e000      	b.n	8016010 <xQueueGenericSend+0x238>
 801600e:	254d      	movs	r5, #77	; 0x4d
 8016010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016012:	f7f7 fe16 	bl	800dc42 <prvTraceGetQueueType>
 8016016:	4603      	mov	r3, r0
 8016018:	461a      	mov	r2, r3
 801601a:	4b50      	ldr	r3, [pc, #320]	; (801615c <xQueueGenericSend+0x384>)
 801601c:	5c9c      	ldrb	r4, [r3, r2]
 801601e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016020:	f7f7 fe62 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016024:	4603      	mov	r3, r0
 8016026:	b2db      	uxtb	r3, r3
 8016028:	461a      	mov	r2, r3
 801602a:	4621      	mov	r1, r4
 801602c:	4628      	mov	r0, r5
 801602e:	f7f8 f809 	bl	800e044 <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8016032:	2300      	movs	r3, #0
 8016034:	e0d5      	b.n	80161e2 <xQueueGenericSend+0x40a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016038:	2b00      	cmp	r3, #0
 801603a:	d106      	bne.n	801604a <xQueueGenericSend+0x272>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801603c:	f107 0314 	add.w	r3, r7, #20
 8016040:	4618      	mov	r0, r3
 8016042:	f002 f8d9 	bl	80181f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016046:	2301      	movs	r3, #1
 8016048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801604a:	f003 f9cb 	bl	80193e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801604e:	f001 fd95 	bl	8017b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016052:	f003 f997 	bl	8019384 <vPortEnterCritical>
 8016056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801605c:	b25b      	sxtb	r3, r3
 801605e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016062:	d103      	bne.n	801606c <xQueueGenericSend+0x294>
 8016064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016066:	2200      	movs	r2, #0
 8016068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016072:	b25b      	sxtb	r3, r3
 8016074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016078:	d103      	bne.n	8016082 <xQueueGenericSend+0x2aa>
 801607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607c:	2200      	movs	r2, #0
 801607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016082:	f003 f9af 	bl	80193e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016086:	1d3a      	adds	r2, r7, #4
 8016088:	f107 0314 	add.w	r3, r7, #20
 801608c:	4611      	mov	r1, r2
 801608e:	4618      	mov	r0, r3
 8016090:	f002 f8c8 	bl	8018224 <xTaskCheckForTimeOut>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d164      	bne.n	8016164 <xQueueGenericSend+0x38c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801609a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801609c:	f001 f9c3 	bl	8017426 <prvIsQueueFull>
 80160a0:	4603      	mov	r3, r0
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d051      	beq.n	801614a <xQueueGenericSend+0x372>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80160a6:	f7f7 fe66 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80160aa:	4603      	mov	r3, r0
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7f7 fde1 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80160b2:	4603      	mov	r3, r0
 80160b4:	461a      	mov	r2, r3
 80160b6:	4b28      	ldr	r3, [pc, #160]	; (8016158 <xQueueGenericSend+0x380>)
 80160b8:	881b      	ldrh	r3, [r3, #0]
 80160ba:	4013      	ands	r3, r2
 80160bc:	b29b      	uxth	r3, r3
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d02a      	beq.n	8016118 <xQueueGenericSend+0x340>
 80160c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160c4:	f7f7 fe1d 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80160c8:	4603      	mov	r3, r0
 80160ca:	461a      	mov	r2, r3
 80160cc:	4b22      	ldr	r3, [pc, #136]	; (8016158 <xQueueGenericSend+0x380>)
 80160ce:	881b      	ldrh	r3, [r3, #0]
 80160d0:	4013      	ands	r3, r2
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d01f      	beq.n	8016118 <xQueueGenericSend+0x340>
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d10a      	bne.n	80160f4 <xQueueGenericSend+0x31c>
 80160de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160e0:	f7f7 fdaf 	bl	800dc42 <prvTraceGetQueueType>
 80160e4:	4603      	mov	r3, r0
 80160e6:	461a      	mov	r2, r3
 80160e8:	4b1c      	ldr	r3, [pc, #112]	; (801615c <xQueueGenericSend+0x384>)
 80160ea:	5c9b      	ldrb	r3, [r3, r2]
 80160ec:	3370      	adds	r3, #112	; 0x70
 80160ee:	b2db      	uxtb	r3, r3
 80160f0:	461d      	mov	r5, r3
 80160f2:	e000      	b.n	80160f6 <xQueueGenericSend+0x31e>
 80160f4:	2575      	movs	r5, #117	; 0x75
 80160f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160f8:	f7f7 fda3 	bl	800dc42 <prvTraceGetQueueType>
 80160fc:	4603      	mov	r3, r0
 80160fe:	461a      	mov	r2, r3
 8016100:	4b16      	ldr	r3, [pc, #88]	; (801615c <xQueueGenericSend+0x384>)
 8016102:	5c9c      	ldrb	r4, [r3, r2]
 8016104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016106:	f7f7 fdef 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801610a:	4603      	mov	r3, r0
 801610c:	b2db      	uxtb	r3, r3
 801610e:	461a      	mov	r2, r3
 8016110:	4621      	mov	r1, r4
 8016112:	4628      	mov	r0, r5
 8016114:	f7f7 ff96 	bl	800e044 <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801611a:	3310      	adds	r3, #16
 801611c:	687a      	ldr	r2, [r7, #4]
 801611e:	4611      	mov	r1, r2
 8016120:	4618      	mov	r0, r3
 8016122:	f001 ff65 	bl	8017ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016128:	f001 f915 	bl	8017356 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801612c:	f001 fd34 	bl	8017b98 <xTaskResumeAll>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	f47f aeaf 	bne.w	8015e96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8016138:	4b09      	ldr	r3, [pc, #36]	; (8016160 <xQueueGenericSend+0x388>)
 801613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801613e:	601a      	str	r2, [r3, #0]
 8016140:	f3bf 8f4f 	dsb	sy
 8016144:	f3bf 8f6f 	isb	sy
 8016148:	e6a5      	b.n	8015e96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801614a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801614c:	f001 f903 	bl	8017356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016150:	f001 fd22 	bl	8017b98 <xTaskResumeAll>
 8016154:	e69f      	b.n	8015e96 <xQueueGenericSend+0xbe>
 8016156:	bf00      	nop
 8016158:	20008358 	.word	0x20008358
 801615c:	2000026c 	.word	0x2000026c
 8016160:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016166:	f001 f8f6 	bl	8017356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801616a:	f001 fd15 	bl	8017b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 801616e:	f7f7 fe02 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016172:	4603      	mov	r3, r0
 8016174:	4618      	mov	r0, r3
 8016176:	f7f7 fd7d 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 801617a:	4603      	mov	r3, r0
 801617c:	461a      	mov	r2, r3
 801617e:	4b1b      	ldr	r3, [pc, #108]	; (80161ec <xQueueGenericSend+0x414>)
 8016180:	881b      	ldrh	r3, [r3, #0]
 8016182:	4013      	ands	r3, r2
 8016184:	b29b      	uxth	r3, r3
 8016186:	2b00      	cmp	r3, #0
 8016188:	d02a      	beq.n	80161e0 <xQueueGenericSend+0x408>
 801618a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801618c:	f7f7 fdb9 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016190:	4603      	mov	r3, r0
 8016192:	461a      	mov	r2, r3
 8016194:	4b15      	ldr	r3, [pc, #84]	; (80161ec <xQueueGenericSend+0x414>)
 8016196:	881b      	ldrh	r3, [r3, #0]
 8016198:	4013      	ands	r3, r2
 801619a:	b29b      	uxth	r3, r3
 801619c:	2b00      	cmp	r3, #0
 801619e:	d01f      	beq.n	80161e0 <xQueueGenericSend+0x408>
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d10a      	bne.n	80161bc <xQueueGenericSend+0x3e4>
 80161a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161a8:	f7f7 fd4b 	bl	800dc42 <prvTraceGetQueueType>
 80161ac:	4603      	mov	r3, r0
 80161ae:	461a      	mov	r2, r3
 80161b0:	4b0f      	ldr	r3, [pc, #60]	; (80161f0 <xQueueGenericSend+0x418>)
 80161b2:	5c9b      	ldrb	r3, [r3, r2]
 80161b4:	3348      	adds	r3, #72	; 0x48
 80161b6:	b2db      	uxtb	r3, r3
 80161b8:	461d      	mov	r5, r3
 80161ba:	e000      	b.n	80161be <xQueueGenericSend+0x3e6>
 80161bc:	254d      	movs	r5, #77	; 0x4d
 80161be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161c0:	f7f7 fd3f 	bl	800dc42 <prvTraceGetQueueType>
 80161c4:	4603      	mov	r3, r0
 80161c6:	461a      	mov	r2, r3
 80161c8:	4b09      	ldr	r3, [pc, #36]	; (80161f0 <xQueueGenericSend+0x418>)
 80161ca:	5c9c      	ldrb	r4, [r3, r2]
 80161cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161ce:	f7f7 fd8b 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 80161d2:	4603      	mov	r3, r0
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	461a      	mov	r2, r3
 80161d8:	4621      	mov	r1, r4
 80161da:	4628      	mov	r0, r5
 80161dc:	f7f7 ff32 	bl	800e044 <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 80161e0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3738      	adds	r7, #56	; 0x38
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bdb0      	pop	{r4, r5, r7, pc}
 80161ea:	bf00      	nop
 80161ec:	20008358 	.word	0x20008358
 80161f0:	2000026c 	.word	0x2000026c

080161f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80161f4:	b5b0      	push	{r4, r5, r7, lr}
 80161f6:	b090      	sub	sp, #64	; 0x40
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
 8016200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016208:	2b00      	cmp	r3, #0
 801620a:	d10a      	bne.n	8016222 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016210:	f383 8811 	msr	BASEPRI, r3
 8016214:	f3bf 8f6f 	isb	sy
 8016218:	f3bf 8f4f 	dsb	sy
 801621c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801621e:	bf00      	nop
 8016220:	e7fe      	b.n	8016220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d103      	bne.n	8016230 <xQueueGenericSendFromISR+0x3c>
 8016228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801622c:	2b00      	cmp	r3, #0
 801622e:	d101      	bne.n	8016234 <xQueueGenericSendFromISR+0x40>
 8016230:	2301      	movs	r3, #1
 8016232:	e000      	b.n	8016236 <xQueueGenericSendFromISR+0x42>
 8016234:	2300      	movs	r3, #0
 8016236:	2b00      	cmp	r3, #0
 8016238:	d10a      	bne.n	8016250 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623e:	f383 8811 	msr	BASEPRI, r3
 8016242:	f3bf 8f6f 	isb	sy
 8016246:	f3bf 8f4f 	dsb	sy
 801624a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801624c:	bf00      	nop
 801624e:	e7fe      	b.n	801624e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	2b02      	cmp	r3, #2
 8016254:	d103      	bne.n	801625e <xQueueGenericSendFromISR+0x6a>
 8016256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801625a:	2b01      	cmp	r3, #1
 801625c:	d101      	bne.n	8016262 <xQueueGenericSendFromISR+0x6e>
 801625e:	2301      	movs	r3, #1
 8016260:	e000      	b.n	8016264 <xQueueGenericSendFromISR+0x70>
 8016262:	2300      	movs	r3, #0
 8016264:	2b00      	cmp	r3, #0
 8016266:	d10a      	bne.n	801627e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801626c:	f383 8811 	msr	BASEPRI, r3
 8016270:	f3bf 8f6f 	isb	sy
 8016274:	f3bf 8f4f 	dsb	sy
 8016278:	623b      	str	r3, [r7, #32]
}
 801627a:	bf00      	nop
 801627c:	e7fe      	b.n	801627c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801627e:	f003 f963 	bl	8019548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016282:	f3ef 8211 	mrs	r2, BASEPRI
 8016286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801628a:	f383 8811 	msr	BASEPRI, r3
 801628e:	f3bf 8f6f 	isb	sy
 8016292:	f3bf 8f4f 	dsb	sy
 8016296:	61fa      	str	r2, [r7, #28]
 8016298:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801629a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801629c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80162a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d302      	bcc.n	80162b0 <xQueueGenericSendFromISR+0xbc>
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b02      	cmp	r3, #2
 80162ae:	d16f      	bne.n	8016390 <xQueueGenericSendFromISR+0x19c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80162b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80162b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162be:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80162c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80162c2:	f7f7 fd1e 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80162c6:	4603      	mov	r3, r0
 80162c8:	461a      	mov	r2, r3
 80162ca:	4b4d      	ldr	r3, [pc, #308]	; (8016400 <xQueueGenericSendFromISR+0x20c>)
 80162cc:	881b      	ldrh	r3, [r3, #0]
 80162ce:	4013      	ands	r3, r2
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d01f      	beq.n	8016316 <xQueueGenericSendFromISR+0x122>
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d10a      	bne.n	80162f2 <xQueueGenericSendFromISR+0xfe>
 80162dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80162de:	f7f7 fcb0 	bl	800dc42 <prvTraceGetQueueType>
 80162e2:	4603      	mov	r3, r0
 80162e4:	461a      	mov	r2, r3
 80162e6:	4b47      	ldr	r3, [pc, #284]	; (8016404 <xQueueGenericSendFromISR+0x210>)
 80162e8:	5c9b      	ldrb	r3, [r3, r2]
 80162ea:	3330      	adds	r3, #48	; 0x30
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	461d      	mov	r5, r3
 80162f0:	e000      	b.n	80162f4 <xQueueGenericSendFromISR+0x100>
 80162f2:	2535      	movs	r5, #53	; 0x35
 80162f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80162f6:	f7f7 fca4 	bl	800dc42 <prvTraceGetQueueType>
 80162fa:	4603      	mov	r3, r0
 80162fc:	461a      	mov	r2, r3
 80162fe:	4b41      	ldr	r3, [pc, #260]	; (8016404 <xQueueGenericSendFromISR+0x210>)
 8016300:	5c9c      	ldrb	r4, [r3, r2]
 8016302:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016304:	f7f7 fcf0 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016308:	4603      	mov	r3, r0
 801630a:	b2db      	uxtb	r3, r3
 801630c:	461a      	mov	r2, r3
 801630e:	4621      	mov	r1, r4
 8016310:	4628      	mov	r0, r5
 8016312:	f7f7 fe97 	bl	800e044 <prvTraceStoreKernelCall>
 8016316:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016318:	f7f7 fc93 	bl	800dc42 <prvTraceGetQueueType>
 801631c:	4603      	mov	r3, r0
 801631e:	461a      	mov	r2, r3
 8016320:	4b38      	ldr	r3, [pc, #224]	; (8016404 <xQueueGenericSendFromISR+0x210>)
 8016322:	5c9c      	ldrb	r4, [r3, r2]
 8016324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016326:	f7f7 fcdf 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801632a:	4603      	mov	r3, r0
 801632c:	b2d9      	uxtb	r1, r3
 801632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016332:	b2db      	uxtb	r3, r3
 8016334:	3301      	adds	r3, #1
 8016336:	b2db      	uxtb	r3, r3
 8016338:	461a      	mov	r2, r3
 801633a:	4620      	mov	r0, r4
 801633c:	f7f8 f9d0 	bl	800e6e0 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016340:	683a      	ldr	r2, [r7, #0]
 8016342:	68b9      	ldr	r1, [r7, #8]
 8016344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016346:	f000 ff76 	bl	8017236 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801634a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801634e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016352:	d112      	bne.n	801637a <xQueueGenericSendFromISR+0x186>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016358:	2b00      	cmp	r3, #0
 801635a:	d016      	beq.n	801638a <xQueueGenericSendFromISR+0x196>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801635e:	3324      	adds	r3, #36	; 0x24
 8016360:	4618      	mov	r0, r3
 8016362:	f001 fed1 	bl	8018108 <xTaskRemoveFromEventList>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00e      	beq.n	801638a <xQueueGenericSendFromISR+0x196>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d00b      	beq.n	801638a <xQueueGenericSendFromISR+0x196>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2201      	movs	r2, #1
 8016376:	601a      	str	r2, [r3, #0]
 8016378:	e007      	b.n	801638a <xQueueGenericSendFromISR+0x196>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801637a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801637e:	3301      	adds	r3, #1
 8016380:	b2db      	uxtb	r3, r3
 8016382:	b25a      	sxtb	r2, r3
 8016384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801638a:	2301      	movs	r3, #1
 801638c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801638e:	e02c      	b.n	80163ea <xQueueGenericSendFromISR+0x1f6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8016390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016392:	f7f7 fcb6 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016396:	4603      	mov	r3, r0
 8016398:	461a      	mov	r2, r3
 801639a:	4b19      	ldr	r3, [pc, #100]	; (8016400 <xQueueGenericSendFromISR+0x20c>)
 801639c:	881b      	ldrh	r3, [r3, #0]
 801639e:	4013      	ands	r3, r2
 80163a0:	b29b      	uxth	r3, r3
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d01f      	beq.n	80163e6 <xQueueGenericSendFromISR+0x1f2>
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d10a      	bne.n	80163c2 <xQueueGenericSendFromISR+0x1ce>
 80163ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163ae:	f7f7 fc48 	bl	800dc42 <prvTraceGetQueueType>
 80163b2:	4603      	mov	r3, r0
 80163b4:	461a      	mov	r2, r3
 80163b6:	4b13      	ldr	r3, [pc, #76]	; (8016404 <xQueueGenericSendFromISR+0x210>)
 80163b8:	5c9b      	ldrb	r3, [r3, r2]
 80163ba:	3358      	adds	r3, #88	; 0x58
 80163bc:	b2db      	uxtb	r3, r3
 80163be:	461d      	mov	r5, r3
 80163c0:	e000      	b.n	80163c4 <xQueueGenericSendFromISR+0x1d0>
 80163c2:	255d      	movs	r5, #93	; 0x5d
 80163c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163c6:	f7f7 fc3c 	bl	800dc42 <prvTraceGetQueueType>
 80163ca:	4603      	mov	r3, r0
 80163cc:	461a      	mov	r2, r3
 80163ce:	4b0d      	ldr	r3, [pc, #52]	; (8016404 <xQueueGenericSendFromISR+0x210>)
 80163d0:	5c9c      	ldrb	r4, [r3, r2]
 80163d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163d4:	f7f7 fc88 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 80163d8:	4603      	mov	r3, r0
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	461a      	mov	r2, r3
 80163de:	4621      	mov	r1, r4
 80163e0:	4628      	mov	r0, r5
 80163e2:	f7f7 fe2f 	bl	800e044 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 80163e6:	2300      	movs	r3, #0
 80163e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80163ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80163f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80163f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3740      	adds	r7, #64	; 0x40
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bdb0      	pop	{r4, r5, r7, pc}
 8016400:	20008358 	.word	0x20008358
 8016404:	2000026c 	.word	0x2000026c

08016408 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	6039      	str	r1, [r7, #0]
 8016412:	2200      	movs	r2, #0
 8016414:	6839      	ldr	r1, [r7, #0]
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 f806 	bl	8016428 <MyWrapper_xQueueGiveFromISR>
 801641c:	4603      	mov	r3, r0
 801641e:	4618      	mov	r0, r3
 8016420:	3708      	adds	r7, #8
 8016422:	46bd      	mov	sp, r7
 8016424:	bd80      	pop	{r7, pc}
	...

08016428 <MyWrapper_xQueueGiveFromISR>:
{
 8016428:	b5b0      	push	{r4, r5, r7, lr}
 801642a:	b090      	sub	sp, #64	; 0x40
 801642c:	af00      	add	r7, sp, #0
 801642e:	60f8      	str	r0, [r7, #12]
 8016430:	60b9      	str	r1, [r7, #8]
 8016432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	63bb      	str	r3, [r7, #56]	; 0x38
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801643a:	2b00      	cmp	r3, #0
 801643c:	d10a      	bne.n	8016454 <MyWrapper_xQueueGiveFromISR+0x2c>
	__asm volatile
 801643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016442:	f383 8811 	msr	BASEPRI, r3
 8016446:	f3bf 8f6f 	isb	sy
 801644a:	f3bf 8f4f 	dsb	sy
 801644e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016450:	bf00      	nop
 8016452:	e7fe      	b.n	8016452 <MyWrapper_xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016458:	2b00      	cmp	r3, #0
 801645a:	d00a      	beq.n	8016472 <MyWrapper_xQueueGiveFromISR+0x4a>
	__asm volatile
 801645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016460:	f383 8811 	msr	BASEPRI, r3
 8016464:	f3bf 8f6f 	isb	sy
 8016468:	f3bf 8f4f 	dsb	sy
 801646c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801646e:	bf00      	nop
 8016470:	e7fe      	b.n	8016470 <MyWrapper_xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d103      	bne.n	8016482 <MyWrapper_xQueueGiveFromISR+0x5a>
 801647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647c:	689b      	ldr	r3, [r3, #8]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <MyWrapper_xQueueGiveFromISR+0x5e>
 8016482:	2301      	movs	r3, #1
 8016484:	e000      	b.n	8016488 <MyWrapper_xQueueGiveFromISR+0x60>
 8016486:	2300      	movs	r3, #0
 8016488:	2b00      	cmp	r3, #0
 801648a:	d10a      	bne.n	80164a2 <MyWrapper_xQueueGiveFromISR+0x7a>
	__asm volatile
 801648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016490:	f383 8811 	msr	BASEPRI, r3
 8016494:	f3bf 8f6f 	isb	sy
 8016498:	f3bf 8f4f 	dsb	sy
 801649c:	623b      	str	r3, [r7, #32]
}
 801649e:	bf00      	nop
 80164a0:	e7fe      	b.n	80164a0 <MyWrapper_xQueueGiveFromISR+0x78>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80164a2:	f003 f851 	bl	8019548 <vPortValidateInterruptPriority>
	__asm volatile
 80164a6:	f3ef 8211 	mrs	r2, BASEPRI
 80164aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ae:	f383 8811 	msr	BASEPRI, r3
 80164b2:	f3bf 8f6f 	isb	sy
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	61fa      	str	r2, [r7, #28]
 80164bc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80164be:	69fb      	ldr	r3, [r7, #28]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80164c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164c6:	633b      	str	r3, [r7, #48]	; 0x30

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80164c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d26b      	bcs.n	80165aa <MyWrapper_xQueueGiveFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80164d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80164d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80164dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164de:	f7f7 fc10 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80164e2:	4603      	mov	r3, r0
 80164e4:	461a      	mov	r2, r3
 80164e6:	4b4d      	ldr	r3, [pc, #308]	; (801661c <MyWrapper_xQueueGiveFromISR+0x1f4>)
 80164e8:	881b      	ldrh	r3, [r3, #0]
 80164ea:	4013      	ands	r3, r2
 80164ec:	b29b      	uxth	r3, r3
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d01f      	beq.n	8016532 <MyWrapper_xQueueGiveFromISR+0x10a>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d10a      	bne.n	801650e <MyWrapper_xQueueGiveFromISR+0xe6>
 80164f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164fa:	f7f7 fba2 	bl	800dc42 <prvTraceGetQueueType>
 80164fe:	4603      	mov	r3, r0
 8016500:	461a      	mov	r2, r3
 8016502:	4b47      	ldr	r3, [pc, #284]	; (8016620 <MyWrapper_xQueueGiveFromISR+0x1f8>)
 8016504:	5c9b      	ldrb	r3, [r3, r2]
 8016506:	3330      	adds	r3, #48	; 0x30
 8016508:	b2db      	uxtb	r3, r3
 801650a:	461d      	mov	r5, r3
 801650c:	e000      	b.n	8016510 <MyWrapper_xQueueGiveFromISR+0xe8>
 801650e:	2535      	movs	r5, #53	; 0x35
 8016510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016512:	f7f7 fb96 	bl	800dc42 <prvTraceGetQueueType>
 8016516:	4603      	mov	r3, r0
 8016518:	461a      	mov	r2, r3
 801651a:	4b41      	ldr	r3, [pc, #260]	; (8016620 <MyWrapper_xQueueGiveFromISR+0x1f8>)
 801651c:	5c9c      	ldrb	r4, [r3, r2]
 801651e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016520:	f7f7 fbe2 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016524:	4603      	mov	r3, r0
 8016526:	b2db      	uxtb	r3, r3
 8016528:	461a      	mov	r2, r3
 801652a:	4621      	mov	r1, r4
 801652c:	4628      	mov	r0, r5
 801652e:	f7f7 fd89 	bl	800e044 <prvTraceStoreKernelCall>
 8016532:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016534:	f7f7 fb85 	bl	800dc42 <prvTraceGetQueueType>
 8016538:	4603      	mov	r3, r0
 801653a:	461a      	mov	r2, r3
 801653c:	4b38      	ldr	r3, [pc, #224]	; (8016620 <MyWrapper_xQueueGiveFromISR+0x1f8>)
 801653e:	5c9c      	ldrb	r4, [r3, r2]
 8016540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016542:	f7f7 fbd1 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016546:	4603      	mov	r3, r0
 8016548:	b2d9      	uxtb	r1, r3
 801654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801654e:	b2db      	uxtb	r3, r3
 8016550:	3301      	adds	r3, #1
 8016552:	b2db      	uxtb	r3, r3
 8016554:	461a      	mov	r2, r3
 8016556:	4620      	mov	r0, r4
 8016558:	f7f8 f8c2 	bl	800e6e0 <prvTraceSetObjectState>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801655e:	1c5a      	adds	r2, r3, #1
 8016560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016562:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8016568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801656c:	d112      	bne.n	8016594 <MyWrapper_xQueueGiveFromISR+0x16c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016572:	2b00      	cmp	r3, #0
 8016574:	d016      	beq.n	80165a4 <MyWrapper_xQueueGiveFromISR+0x17c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016578:	3324      	adds	r3, #36	; 0x24
 801657a:	4618      	mov	r0, r3
 801657c:	f001 fdc4 	bl	8018108 <xTaskRemoveFromEventList>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00e      	beq.n	80165a4 <MyWrapper_xQueueGiveFromISR+0x17c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00b      	beq.n	80165a4 <MyWrapper_xQueueGiveFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	2201      	movs	r2, #1
 8016590:	601a      	str	r2, [r3, #0]
 8016592:	e007      	b.n	80165a4 <MyWrapper_xQueueGiveFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016598:	3301      	adds	r3, #1
 801659a:	b2db      	uxtb	r3, r3
 801659c:	b25a      	sxtb	r2, r3
 801659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80165a4:	2301      	movs	r3, #1
 80165a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80165a8:	e02c      	b.n	8016604 <MyWrapper_xQueueGiveFromISR+0x1dc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80165aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80165ac:	f7f7 fba9 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80165b0:	4603      	mov	r3, r0
 80165b2:	461a      	mov	r2, r3
 80165b4:	4b19      	ldr	r3, [pc, #100]	; (801661c <MyWrapper_xQueueGiveFromISR+0x1f4>)
 80165b6:	881b      	ldrh	r3, [r3, #0]
 80165b8:	4013      	ands	r3, r2
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d01f      	beq.n	8016600 <MyWrapper_xQueueGiveFromISR+0x1d8>
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d10a      	bne.n	80165dc <MyWrapper_xQueueGiveFromISR+0x1b4>
 80165c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80165c8:	f7f7 fb3b 	bl	800dc42 <prvTraceGetQueueType>
 80165cc:	4603      	mov	r3, r0
 80165ce:	461a      	mov	r2, r3
 80165d0:	4b13      	ldr	r3, [pc, #76]	; (8016620 <MyWrapper_xQueueGiveFromISR+0x1f8>)
 80165d2:	5c9b      	ldrb	r3, [r3, r2]
 80165d4:	3358      	adds	r3, #88	; 0x58
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	461d      	mov	r5, r3
 80165da:	e000      	b.n	80165de <MyWrapper_xQueueGiveFromISR+0x1b6>
 80165dc:	255d      	movs	r5, #93	; 0x5d
 80165de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80165e0:	f7f7 fb2f 	bl	800dc42 <prvTraceGetQueueType>
 80165e4:	4603      	mov	r3, r0
 80165e6:	461a      	mov	r2, r3
 80165e8:	4b0d      	ldr	r3, [pc, #52]	; (8016620 <MyWrapper_xQueueGiveFromISR+0x1f8>)
 80165ea:	5c9c      	ldrb	r4, [r3, r2]
 80165ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80165ee:	f7f7 fb7b 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 80165f2:	4603      	mov	r3, r0
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	461a      	mov	r2, r3
 80165f8:	4621      	mov	r1, r4
 80165fa:	4628      	mov	r0, r5
 80165fc:	f7f7 fd22 	bl	800e044 <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8016600:	2300      	movs	r3, #0
 8016602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016606:	617b      	str	r3, [r7, #20]
	__asm volatile
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	f383 8811 	msr	BASEPRI, r3
}
 801660e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016612:	4618      	mov	r0, r3
 8016614:	3740      	adds	r7, #64	; 0x40
 8016616:	46bd      	mov	sp, r7
 8016618:	bdb0      	pop	{r4, r5, r7, pc}
 801661a:	bf00      	nop
 801661c:	20008358 	.word	0x20008358
 8016620:	2000026c 	.word	0x2000026c

08016624 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016624:	b5b0      	push	{r4, r5, r7, lr}
 8016626:	b08c      	sub	sp, #48	; 0x30
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016630:	2300      	movs	r3, #0
 8016632:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663a:	2b00      	cmp	r3, #0
 801663c:	d10a      	bne.n	8016654 <xQueueReceive+0x30>
	__asm volatile
 801663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016642:	f383 8811 	msr	BASEPRI, r3
 8016646:	f3bf 8f6f 	isb	sy
 801664a:	f3bf 8f4f 	dsb	sy
 801664e:	623b      	str	r3, [r7, #32]
}
 8016650:	bf00      	nop
 8016652:	e7fe      	b.n	8016652 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d103      	bne.n	8016662 <xQueueReceive+0x3e>
 801665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801665e:	2b00      	cmp	r3, #0
 8016660:	d101      	bne.n	8016666 <xQueueReceive+0x42>
 8016662:	2301      	movs	r3, #1
 8016664:	e000      	b.n	8016668 <xQueueReceive+0x44>
 8016666:	2300      	movs	r3, #0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d10a      	bne.n	8016682 <xQueueReceive+0x5e>
	__asm volatile
 801666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016670:	f383 8811 	msr	BASEPRI, r3
 8016674:	f3bf 8f6f 	isb	sy
 8016678:	f3bf 8f4f 	dsb	sy
 801667c:	61fb      	str	r3, [r7, #28]
}
 801667e:	bf00      	nop
 8016680:	e7fe      	b.n	8016680 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016682:	f001 ff4d 	bl	8018520 <xTaskGetSchedulerState>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d102      	bne.n	8016692 <xQueueReceive+0x6e>
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d101      	bne.n	8016696 <xQueueReceive+0x72>
 8016692:	2301      	movs	r3, #1
 8016694:	e000      	b.n	8016698 <xQueueReceive+0x74>
 8016696:	2300      	movs	r3, #0
 8016698:	2b00      	cmp	r3, #0
 801669a:	d10a      	bne.n	80166b2 <xQueueReceive+0x8e>
	__asm volatile
 801669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a0:	f383 8811 	msr	BASEPRI, r3
 80166a4:	f3bf 8f6f 	isb	sy
 80166a8:	f3bf 8f4f 	dsb	sy
 80166ac:	61bb      	str	r3, [r7, #24]
}
 80166ae:	bf00      	nop
 80166b0:	e7fe      	b.n	80166b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80166b2:	f002 fe67 	bl	8019384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80166b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166ba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80166bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d07b      	beq.n	80167ba <xQueueReceive+0x196>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80166c2:	68b9      	ldr	r1, [r7, #8]
 80166c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166c6:	f000 fe20 	bl	801730a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80166ca:	f7f7 fb54 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80166ce:	4603      	mov	r3, r0
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7f7 facf 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80166d6:	4603      	mov	r3, r0
 80166d8:	461a      	mov	r2, r3
 80166da:	4bac      	ldr	r3, [pc, #688]	; (801698c <xQueueReceive+0x368>)
 80166dc:	881b      	ldrh	r3, [r3, #0]
 80166de:	4013      	ands	r3, r2
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d025      	beq.n	8016732 <xQueueReceive+0x10e>
 80166e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166e8:	f7f7 fb0b 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80166ec:	4603      	mov	r3, r0
 80166ee:	461a      	mov	r2, r3
 80166f0:	4ba6      	ldr	r3, [pc, #664]	; (801698c <xQueueReceive+0x368>)
 80166f2:	881b      	ldrh	r3, [r3, #0]
 80166f4:	4013      	ands	r3, r2
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d01a      	beq.n	8016732 <xQueueReceive+0x10e>
 80166fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166fe:	f7f7 faa0 	bl	800dc42 <prvTraceGetQueueType>
 8016702:	4603      	mov	r3, r0
 8016704:	461a      	mov	r2, r3
 8016706:	4ba2      	ldr	r3, [pc, #648]	; (8016990 <xQueueReceive+0x36c>)
 8016708:	5c9b      	ldrb	r3, [r3, r2]
 801670a:	3328      	adds	r3, #40	; 0x28
 801670c:	b2db      	uxtb	r3, r3
 801670e:	461d      	mov	r5, r3
 8016710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016712:	f7f7 fa96 	bl	800dc42 <prvTraceGetQueueType>
 8016716:	4603      	mov	r3, r0
 8016718:	461a      	mov	r2, r3
 801671a:	4b9d      	ldr	r3, [pc, #628]	; (8016990 <xQueueReceive+0x36c>)
 801671c:	5c9c      	ldrb	r4, [r3, r2]
 801671e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016720:	f7f7 fae2 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016724:	4603      	mov	r3, r0
 8016726:	b2db      	uxtb	r3, r3
 8016728:	461a      	mov	r2, r3
 801672a:	4621      	mov	r1, r4
 801672c:	4628      	mov	r0, r5
 801672e:	f7f7 fc89 	bl	800e044 <prvTraceStoreKernelCall>
 8016732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016734:	f7f7 fa85 	bl	800dc42 <prvTraceGetQueueType>
 8016738:	4603      	mov	r3, r0
 801673a:	461a      	mov	r2, r3
 801673c:	4b94      	ldr	r3, [pc, #592]	; (8016990 <xQueueReceive+0x36c>)
 801673e:	5c9c      	ldrb	r4, [r3, r2]
 8016740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016742:	f7f7 fad1 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016746:	4603      	mov	r3, r0
 8016748:	b2dd      	uxtb	r5, r3
 801674a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801674c:	f7f7 fa79 	bl	800dc42 <prvTraceGetQueueType>
 8016750:	4603      	mov	r3, r0
 8016752:	461a      	mov	r2, r3
 8016754:	4b8e      	ldr	r3, [pc, #568]	; (8016990 <xQueueReceive+0x36c>)
 8016756:	5c9b      	ldrb	r3, [r3, r2]
 8016758:	2b02      	cmp	r3, #2
 801675a:	d108      	bne.n	801676e <xQueueReceive+0x14a>
 801675c:	f7f7 fb0b 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016760:	4603      	mov	r3, r0
 8016762:	4618      	mov	r0, r3
 8016764:	f7f7 fa79 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8016768:	4603      	mov	r3, r0
 801676a:	b2db      	uxtb	r3, r3
 801676c:	e004      	b.n	8016778 <xQueueReceive+0x154>
 801676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016772:	b2db      	uxtb	r3, r3
 8016774:	3b01      	subs	r3, #1
 8016776:	b2db      	uxtb	r3, r3
 8016778:	461a      	mov	r2, r3
 801677a:	4629      	mov	r1, r5
 801677c:	4620      	mov	r0, r4
 801677e:	f7f7 ffaf 	bl	800e6e0 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016784:	1e5a      	subs	r2, r3, #1
 8016786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016788:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801678c:	691b      	ldr	r3, [r3, #16]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d00f      	beq.n	80167b2 <xQueueReceive+0x18e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016794:	3310      	adds	r3, #16
 8016796:	4618      	mov	r0, r3
 8016798:	f001 fcb6 	bl	8018108 <xTaskRemoveFromEventList>
 801679c:	4603      	mov	r3, r0
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d007      	beq.n	80167b2 <xQueueReceive+0x18e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80167a2:	4b7c      	ldr	r3, [pc, #496]	; (8016994 <xQueueReceive+0x370>)
 80167a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167a8:	601a      	str	r2, [r3, #0]
 80167aa:	f3bf 8f4f 	dsb	sy
 80167ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80167b2:	f002 fe17 	bl	80193e4 <vPortExitCritical>
				return pdPASS;
 80167b6:	2301      	movs	r3, #1
 80167b8:	e12f      	b.n	8016a1a <xQueueReceive+0x3f6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d137      	bne.n	8016830 <xQueueReceive+0x20c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80167c0:	f002 fe10 	bl	80193e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80167c4:	f7f7 fad7 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80167c8:	4603      	mov	r3, r0
 80167ca:	4618      	mov	r0, r3
 80167cc:	f7f7 fa52 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80167d0:	4603      	mov	r3, r0
 80167d2:	461a      	mov	r2, r3
 80167d4:	4b6d      	ldr	r3, [pc, #436]	; (801698c <xQueueReceive+0x368>)
 80167d6:	881b      	ldrh	r3, [r3, #0]
 80167d8:	4013      	ands	r3, r2
 80167da:	b29b      	uxth	r3, r3
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d025      	beq.n	801682c <xQueueReceive+0x208>
 80167e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167e2:	f7f7 fa8e 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80167e6:	4603      	mov	r3, r0
 80167e8:	461a      	mov	r2, r3
 80167ea:	4b68      	ldr	r3, [pc, #416]	; (801698c <xQueueReceive+0x368>)
 80167ec:	881b      	ldrh	r3, [r3, #0]
 80167ee:	4013      	ands	r3, r2
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d01a      	beq.n	801682c <xQueueReceive+0x208>
 80167f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167f8:	f7f7 fa23 	bl	800dc42 <prvTraceGetQueueType>
 80167fc:	4603      	mov	r3, r0
 80167fe:	461a      	mov	r2, r3
 8016800:	4b63      	ldr	r3, [pc, #396]	; (8016990 <xQueueReceive+0x36c>)
 8016802:	5c9b      	ldrb	r3, [r3, r2]
 8016804:	3350      	adds	r3, #80	; 0x50
 8016806:	b2db      	uxtb	r3, r3
 8016808:	461d      	mov	r5, r3
 801680a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801680c:	f7f7 fa19 	bl	800dc42 <prvTraceGetQueueType>
 8016810:	4603      	mov	r3, r0
 8016812:	461a      	mov	r2, r3
 8016814:	4b5e      	ldr	r3, [pc, #376]	; (8016990 <xQueueReceive+0x36c>)
 8016816:	5c9c      	ldrb	r4, [r3, r2]
 8016818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801681a:	f7f7 fa65 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801681e:	4603      	mov	r3, r0
 8016820:	b2db      	uxtb	r3, r3
 8016822:	461a      	mov	r2, r3
 8016824:	4621      	mov	r1, r4
 8016826:	4628      	mov	r0, r5
 8016828:	f7f7 fc0c 	bl	800e044 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 801682c:	2300      	movs	r3, #0
 801682e:	e0f4      	b.n	8016a1a <xQueueReceive+0x3f6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016832:	2b00      	cmp	r3, #0
 8016834:	d106      	bne.n	8016844 <xQueueReceive+0x220>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016836:	f107 0310 	add.w	r3, r7, #16
 801683a:	4618      	mov	r0, r3
 801683c:	f001 fcdc 	bl	80181f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016840:	2301      	movs	r3, #1
 8016842:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016844:	f002 fdce 	bl	80193e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016848:	f001 f998 	bl	8017b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801684c:	f002 fd9a 	bl	8019384 <vPortEnterCritical>
 8016850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016856:	b25b      	sxtb	r3, r3
 8016858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801685c:	d103      	bne.n	8016866 <xQueueReceive+0x242>
 801685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016860:	2200      	movs	r2, #0
 8016862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801686c:	b25b      	sxtb	r3, r3
 801686e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016872:	d103      	bne.n	801687c <xQueueReceive+0x258>
 8016874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016876:	2200      	movs	r2, #0
 8016878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801687c:	f002 fdb2 	bl	80193e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016880:	1d3a      	adds	r2, r7, #4
 8016882:	f107 0310 	add.w	r3, r7, #16
 8016886:	4611      	mov	r1, r2
 8016888:	4618      	mov	r0, r3
 801688a:	f001 fccb 	bl	8018224 <xTaskCheckForTimeOut>
 801688e:	4603      	mov	r3, r0
 8016890:	2b00      	cmp	r3, #0
 8016892:	f040 8081 	bne.w	8016998 <xQueueReceive+0x374>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016898:	f000 fdaf 	bl	80173fa <prvIsQueueEmpty>
 801689c:	4603      	mov	r3, r0
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d06e      	beq.n	8016980 <xQueueReceive+0x35c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80168a2:	f7f7 fa68 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80168a6:	4603      	mov	r3, r0
 80168a8:	4618      	mov	r0, r3
 80168aa:	f7f7 f9e3 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80168ae:	4603      	mov	r3, r0
 80168b0:	461a      	mov	r2, r3
 80168b2:	4b36      	ldr	r3, [pc, #216]	; (801698c <xQueueReceive+0x368>)
 80168b4:	881b      	ldrh	r3, [r3, #0]
 80168b6:	4013      	ands	r3, r2
 80168b8:	b29b      	uxth	r3, r3
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d025      	beq.n	801690a <xQueueReceive+0x2e6>
 80168be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168c0:	f7f7 fa1f 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80168c4:	4603      	mov	r3, r0
 80168c6:	461a      	mov	r2, r3
 80168c8:	4b30      	ldr	r3, [pc, #192]	; (801698c <xQueueReceive+0x368>)
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	4013      	ands	r3, r2
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d01a      	beq.n	801690a <xQueueReceive+0x2e6>
 80168d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168d6:	f7f7 f9b4 	bl	800dc42 <prvTraceGetQueueType>
 80168da:	4603      	mov	r3, r0
 80168dc:	461a      	mov	r2, r3
 80168de:	4b2c      	ldr	r3, [pc, #176]	; (8016990 <xQueueReceive+0x36c>)
 80168e0:	5c9b      	ldrb	r3, [r3, r2]
 80168e2:	3368      	adds	r3, #104	; 0x68
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	461d      	mov	r5, r3
 80168e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168ea:	f7f7 f9aa 	bl	800dc42 <prvTraceGetQueueType>
 80168ee:	4603      	mov	r3, r0
 80168f0:	461a      	mov	r2, r3
 80168f2:	4b27      	ldr	r3, [pc, #156]	; (8016990 <xQueueReceive+0x36c>)
 80168f4:	5c9c      	ldrb	r4, [r3, r2]
 80168f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168f8:	f7f7 f9f6 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 80168fc:	4603      	mov	r3, r0
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	461a      	mov	r2, r3
 8016902:	4621      	mov	r1, r4
 8016904:	4628      	mov	r0, r5
 8016906:	f7f7 fb9d 	bl	800e044 <prvTraceStoreKernelCall>
 801690a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801690c:	f7f7 f999 	bl	800dc42 <prvTraceGetQueueType>
 8016910:	4603      	mov	r3, r0
 8016912:	461a      	mov	r2, r3
 8016914:	4b1e      	ldr	r3, [pc, #120]	; (8016990 <xQueueReceive+0x36c>)
 8016916:	5c9b      	ldrb	r3, [r3, r2]
 8016918:	2b02      	cmp	r3, #2
 801691a:	d018      	beq.n	801694e <xQueueReceive+0x32a>
 801691c:	f7f7 fa2b 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016920:	4603      	mov	r3, r0
 8016922:	4618      	mov	r0, r3
 8016924:	f7f7 f9a6 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8016928:	4603      	mov	r3, r0
 801692a:	461a      	mov	r2, r3
 801692c:	4b17      	ldr	r3, [pc, #92]	; (801698c <xQueueReceive+0x368>)
 801692e:	881b      	ldrh	r3, [r3, #0]
 8016930:	4013      	ands	r3, r2
 8016932:	b29b      	uxth	r3, r3
 8016934:	2b00      	cmp	r3, #0
 8016936:	d00a      	beq.n	801694e <xQueueReceive+0x32a>
 8016938:	f7f7 fa1d 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 801693c:	4603      	mov	r3, r0
 801693e:	4618      	mov	r0, r3
 8016940:	f7f7 f98b 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8016944:	4603      	mov	r3, r0
 8016946:	b2db      	uxtb	r3, r3
 8016948:	4618      	mov	r0, r3
 801694a:	f7f7 ff41 	bl	800e7d0 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016950:	3324      	adds	r3, #36	; 0x24
 8016952:	687a      	ldr	r2, [r7, #4]
 8016954:	4611      	mov	r1, r2
 8016956:	4618      	mov	r0, r3
 8016958:	f001 fb4a 	bl	8017ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801695c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801695e:	f000 fcfa 	bl	8017356 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016962:	f001 f919 	bl	8017b98 <xTaskResumeAll>
 8016966:	4603      	mov	r3, r0
 8016968:	2b00      	cmp	r3, #0
 801696a:	f47f aea2 	bne.w	80166b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801696e:	4b09      	ldr	r3, [pc, #36]	; (8016994 <xQueueReceive+0x370>)
 8016970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	f3bf 8f4f 	dsb	sy
 801697a:	f3bf 8f6f 	isb	sy
 801697e:	e698      	b.n	80166b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016982:	f000 fce8 	bl	8017356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016986:	f001 f907 	bl	8017b98 <xTaskResumeAll>
 801698a:	e692      	b.n	80166b2 <xQueueReceive+0x8e>
 801698c:	20008358 	.word	0x20008358
 8016990:	2000026c 	.word	0x2000026c
 8016994:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801699a:	f000 fcdc 	bl	8017356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801699e:	f001 f8fb 	bl	8017b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80169a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169a4:	f000 fd29 	bl	80173fa <prvIsQueueEmpty>
 80169a8:	4603      	mov	r3, r0
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	f43f ae81 	beq.w	80166b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80169b0:	f7f7 f9e1 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80169b4:	4603      	mov	r3, r0
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7f7 f95c 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80169bc:	4603      	mov	r3, r0
 80169be:	461a      	mov	r2, r3
 80169c0:	4b18      	ldr	r3, [pc, #96]	; (8016a24 <xQueueReceive+0x400>)
 80169c2:	881b      	ldrh	r3, [r3, #0]
 80169c4:	4013      	ands	r3, r2
 80169c6:	b29b      	uxth	r3, r3
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d025      	beq.n	8016a18 <xQueueReceive+0x3f4>
 80169cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169ce:	f7f7 f998 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80169d2:	4603      	mov	r3, r0
 80169d4:	461a      	mov	r2, r3
 80169d6:	4b13      	ldr	r3, [pc, #76]	; (8016a24 <xQueueReceive+0x400>)
 80169d8:	881b      	ldrh	r3, [r3, #0]
 80169da:	4013      	ands	r3, r2
 80169dc:	b29b      	uxth	r3, r3
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d01a      	beq.n	8016a18 <xQueueReceive+0x3f4>
 80169e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169e4:	f7f7 f92d 	bl	800dc42 <prvTraceGetQueueType>
 80169e8:	4603      	mov	r3, r0
 80169ea:	461a      	mov	r2, r3
 80169ec:	4b0e      	ldr	r3, [pc, #56]	; (8016a28 <xQueueReceive+0x404>)
 80169ee:	5c9b      	ldrb	r3, [r3, r2]
 80169f0:	3350      	adds	r3, #80	; 0x50
 80169f2:	b2db      	uxtb	r3, r3
 80169f4:	461d      	mov	r5, r3
 80169f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169f8:	f7f7 f923 	bl	800dc42 <prvTraceGetQueueType>
 80169fc:	4603      	mov	r3, r0
 80169fe:	461a      	mov	r2, r3
 8016a00:	4b09      	ldr	r3, [pc, #36]	; (8016a28 <xQueueReceive+0x404>)
 8016a02:	5c9c      	ldrb	r4, [r3, r2]
 8016a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a06:	f7f7 f96f 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	b2db      	uxtb	r3, r3
 8016a0e:	461a      	mov	r2, r3
 8016a10:	4621      	mov	r1, r4
 8016a12:	4628      	mov	r0, r5
 8016a14:	f7f7 fb16 	bl	800e044 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8016a18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3730      	adds	r7, #48	; 0x30
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bdb0      	pop	{r4, r5, r7, pc}
 8016a22:	bf00      	nop
 8016a24:	20008358 	.word	0x20008358
 8016a28:	2000026c 	.word	0x2000026c

08016a2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016a2c:	b5b0      	push	{r4, r5, r7, lr}
 8016a2e:	b08e      	sub	sp, #56	; 0x38
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016a36:	2300      	movs	r3, #0
 8016a38:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	62bb      	str	r3, [r7, #40]	; 0x28

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	627b      	str	r3, [r7, #36]	; 0x24
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d10a      	bne.n	8016a5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4c:	f383 8811 	msr	BASEPRI, r3
 8016a50:	f3bf 8f6f 	isb	sy
 8016a54:	f3bf 8f4f 	dsb	sy
 8016a58:	623b      	str	r3, [r7, #32]
}
 8016a5a:	bf00      	nop
 8016a5c:	e7fe      	b.n	8016a5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d00a      	beq.n	8016a7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a6a:	f383 8811 	msr	BASEPRI, r3
 8016a6e:	f3bf 8f6f 	isb	sy
 8016a72:	f3bf 8f4f 	dsb	sy
 8016a76:	61fb      	str	r3, [r7, #28]
}
 8016a78:	bf00      	nop
 8016a7a:	e7fe      	b.n	8016a7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016a7c:	f001 fd50 	bl	8018520 <xTaskGetSchedulerState>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d102      	bne.n	8016a8c <xQueueSemaphoreTake+0x60>
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d101      	bne.n	8016a90 <xQueueSemaphoreTake+0x64>
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	e000      	b.n	8016a92 <xQueueSemaphoreTake+0x66>
 8016a90:	2300      	movs	r3, #0
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d10a      	bne.n	8016aac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a9a:	f383 8811 	msr	BASEPRI, r3
 8016a9e:	f3bf 8f6f 	isb	sy
 8016aa2:	f3bf 8f4f 	dsb	sy
 8016aa6:	61bb      	str	r3, [r7, #24]
}
 8016aa8:	bf00      	nop
 8016aaa:	e7fe      	b.n	8016aaa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016aac:	f002 fc6a 	bl	8019384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ab4:	633b      	str	r3, [r7, #48]	; 0x30

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	f000 8081 	beq.w	8016bc0 <xQueueSemaphoreTake+0x194>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8016abe:	f7f7 f95a 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7f7 f8d5 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8016aca:	4603      	mov	r3, r0
 8016acc:	461a      	mov	r2, r3
 8016ace:	4bbc      	ldr	r3, [pc, #752]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016ad0:	881b      	ldrh	r3, [r3, #0]
 8016ad2:	4013      	ands	r3, r2
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d025      	beq.n	8016b26 <xQueueSemaphoreTake+0xfa>
 8016ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016adc:	f7f7 f911 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	4bb6      	ldr	r3, [pc, #728]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016ae6:	881b      	ldrh	r3, [r3, #0]
 8016ae8:	4013      	ands	r3, r2
 8016aea:	b29b      	uxth	r3, r3
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d01a      	beq.n	8016b26 <xQueueSemaphoreTake+0xfa>
 8016af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016af2:	f7f7 f8a6 	bl	800dc42 <prvTraceGetQueueType>
 8016af6:	4603      	mov	r3, r0
 8016af8:	461a      	mov	r2, r3
 8016afa:	4bb2      	ldr	r3, [pc, #712]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016afc:	5c9b      	ldrb	r3, [r3, r2]
 8016afe:	3328      	adds	r3, #40	; 0x28
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	461d      	mov	r5, r3
 8016b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b06:	f7f7 f89c 	bl	800dc42 <prvTraceGetQueueType>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	4bad      	ldr	r3, [pc, #692]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016b10:	5c9c      	ldrb	r4, [r3, r2]
 8016b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b14:	f7f7 f8e8 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	4621      	mov	r1, r4
 8016b20:	4628      	mov	r0, r5
 8016b22:	f7f7 fa8f 	bl	800e044 <prvTraceStoreKernelCall>
 8016b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b28:	f7f7 f88b 	bl	800dc42 <prvTraceGetQueueType>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	461a      	mov	r2, r3
 8016b30:	4ba4      	ldr	r3, [pc, #656]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016b32:	5c9c      	ldrb	r4, [r3, r2]
 8016b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b36:	f7f7 f8d7 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	b2dd      	uxtb	r5, r3
 8016b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b40:	f7f7 f87f 	bl	800dc42 <prvTraceGetQueueType>
 8016b44:	4603      	mov	r3, r0
 8016b46:	461a      	mov	r2, r3
 8016b48:	4b9e      	ldr	r3, [pc, #632]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016b4a:	5c9b      	ldrb	r3, [r3, r2]
 8016b4c:	2b02      	cmp	r3, #2
 8016b4e:	d108      	bne.n	8016b62 <xQueueSemaphoreTake+0x136>
 8016b50:	f7f7 f911 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016b54:	4603      	mov	r3, r0
 8016b56:	4618      	mov	r0, r3
 8016b58:	f7f7 f87f 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	e004      	b.n	8016b6c <xQueueSemaphoreTake+0x140>
 8016b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	3b01      	subs	r3, #1
 8016b6a:	b2db      	uxtb	r3, r3
 8016b6c:	461a      	mov	r2, r3
 8016b6e:	4629      	mov	r1, r5
 8016b70:	4620      	mov	r0, r4
 8016b72:	f7f7 fdb5 	bl	800e6e0 <prvTraceSetObjectState>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b78:	1e5a      	subs	r2, r3, #1
 8016b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b7c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d104      	bne.n	8016b90 <xQueueSemaphoreTake+0x164>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016b86:	f001 ff0b 	bl	80189a0 <pvTaskIncrementMutexHeldCount>
 8016b8a:	4602      	mov	r2, r0
 8016b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b8e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b92:	691b      	ldr	r3, [r3, #16]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d00f      	beq.n	8016bb8 <xQueueSemaphoreTake+0x18c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b9a:	3310      	adds	r3, #16
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f001 fab3 	bl	8018108 <xTaskRemoveFromEventList>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d007      	beq.n	8016bb8 <xQueueSemaphoreTake+0x18c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016ba8:	4b87      	ldr	r3, [pc, #540]	; (8016dc8 <xQueueSemaphoreTake+0x39c>)
 8016baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bae:	601a      	str	r2, [r3, #0]
 8016bb0:	f3bf 8f4f 	dsb	sy
 8016bb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016bb8:	f002 fc14 	bl	80193e4 <vPortExitCritical>
				return pdPASS;
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	e15d      	b.n	8016e7c <xQueueSemaphoreTake+0x450>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d145      	bne.n	8016c52 <xQueueSemaphoreTake+0x226>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d00a      	beq.n	8016be2 <xQueueSemaphoreTake+0x1b6>
	__asm volatile
 8016bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd0:	f383 8811 	msr	BASEPRI, r3
 8016bd4:	f3bf 8f6f 	isb	sy
 8016bd8:	f3bf 8f4f 	dsb	sy
 8016bdc:	617b      	str	r3, [r7, #20]
}
 8016bde:	bf00      	nop
 8016be0:	e7fe      	b.n	8016be0 <xQueueSemaphoreTake+0x1b4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016be2:	f002 fbff 	bl	80193e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8016be6:	f7f7 f8c6 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016bea:	4603      	mov	r3, r0
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7f7 f841 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	461a      	mov	r2, r3
 8016bf6:	4b72      	ldr	r3, [pc, #456]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016bf8:	881b      	ldrh	r3, [r3, #0]
 8016bfa:	4013      	ands	r3, r2
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d025      	beq.n	8016c4e <xQueueSemaphoreTake+0x222>
 8016c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c04:	f7f7 f87d 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	4b6c      	ldr	r3, [pc, #432]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016c0e:	881b      	ldrh	r3, [r3, #0]
 8016c10:	4013      	ands	r3, r2
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d01a      	beq.n	8016c4e <xQueueSemaphoreTake+0x222>
 8016c18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c1a:	f7f7 f812 	bl	800dc42 <prvTraceGetQueueType>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	461a      	mov	r2, r3
 8016c22:	4b68      	ldr	r3, [pc, #416]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016c24:	5c9b      	ldrb	r3, [r3, r2]
 8016c26:	3350      	adds	r3, #80	; 0x50
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	461d      	mov	r5, r3
 8016c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c2e:	f7f7 f808 	bl	800dc42 <prvTraceGetQueueType>
 8016c32:	4603      	mov	r3, r0
 8016c34:	461a      	mov	r2, r3
 8016c36:	4b63      	ldr	r3, [pc, #396]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016c38:	5c9c      	ldrb	r4, [r3, r2]
 8016c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c3c:	f7f7 f854 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016c40:	4603      	mov	r3, r0
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	461a      	mov	r2, r3
 8016c46:	4621      	mov	r1, r4
 8016c48:	4628      	mov	r0, r5
 8016c4a:	f7f7 f9fb 	bl	800e044 <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8016c4e:	2300      	movs	r3, #0
 8016c50:	e114      	b.n	8016e7c <xQueueSemaphoreTake+0x450>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d106      	bne.n	8016c66 <xQueueSemaphoreTake+0x23a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016c58:	f107 030c 	add.w	r3, r7, #12
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f001 facb 	bl	80181f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016c62:	2301      	movs	r3, #1
 8016c64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016c66:	f002 fbbd 	bl	80193e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016c6a:	f000 ff87 	bl	8017b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016c6e:	f002 fb89 	bl	8019384 <vPortEnterCritical>
 8016c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c78:	b25b      	sxtb	r3, r3
 8016c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c7e:	d103      	bne.n	8016c88 <xQueueSemaphoreTake+0x25c>
 8016c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c82:	2200      	movs	r2, #0
 8016c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c8e:	b25b      	sxtb	r3, r3
 8016c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c94:	d103      	bne.n	8016c9e <xQueueSemaphoreTake+0x272>
 8016c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c98:	2200      	movs	r2, #0
 8016c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c9e:	f002 fba1 	bl	80193e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016ca2:	463a      	mov	r2, r7
 8016ca4:	f107 030c 	add.w	r3, r7, #12
 8016ca8:	4611      	mov	r1, r2
 8016caa:	4618      	mov	r0, r3
 8016cac:	f001 faba 	bl	8018224 <xTaskCheckForTimeOut>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	f040 8090 	bne.w	8016dd8 <xQueueSemaphoreTake+0x3ac>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cba:	f000 fb9e 	bl	80173fa <prvIsQueueEmpty>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	f000 8083 	beq.w	8016dcc <xQueueSemaphoreTake+0x3a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8016cc6:	f7f7 f856 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f6 ffd1 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	4b3a      	ldr	r3, [pc, #232]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016cd8:	881b      	ldrh	r3, [r3, #0]
 8016cda:	4013      	ands	r3, r2
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d025      	beq.n	8016d2e <xQueueSemaphoreTake+0x302>
 8016ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ce4:	f7f7 f80d 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	461a      	mov	r2, r3
 8016cec:	4b34      	ldr	r3, [pc, #208]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016cee:	881b      	ldrh	r3, [r3, #0]
 8016cf0:	4013      	ands	r3, r2
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d01a      	beq.n	8016d2e <xQueueSemaphoreTake+0x302>
 8016cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cfa:	f7f6 ffa2 	bl	800dc42 <prvTraceGetQueueType>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	461a      	mov	r2, r3
 8016d02:	4b30      	ldr	r3, [pc, #192]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016d04:	5c9b      	ldrb	r3, [r3, r2]
 8016d06:	3368      	adds	r3, #104	; 0x68
 8016d08:	b2db      	uxtb	r3, r3
 8016d0a:	461d      	mov	r5, r3
 8016d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d0e:	f7f6 ff98 	bl	800dc42 <prvTraceGetQueueType>
 8016d12:	4603      	mov	r3, r0
 8016d14:	461a      	mov	r2, r3
 8016d16:	4b2b      	ldr	r3, [pc, #172]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016d18:	5c9c      	ldrb	r4, [r3, r2]
 8016d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d1c:	f7f6 ffe4 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016d20:	4603      	mov	r3, r0
 8016d22:	b2db      	uxtb	r3, r3
 8016d24:	461a      	mov	r2, r3
 8016d26:	4621      	mov	r1, r4
 8016d28:	4628      	mov	r0, r5
 8016d2a:	f7f7 f98b 	bl	800e044 <prvTraceStoreKernelCall>
 8016d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d30:	f7f6 ff87 	bl	800dc42 <prvTraceGetQueueType>
 8016d34:	4603      	mov	r3, r0
 8016d36:	461a      	mov	r2, r3
 8016d38:	4b22      	ldr	r3, [pc, #136]	; (8016dc4 <xQueueSemaphoreTake+0x398>)
 8016d3a:	5c9b      	ldrb	r3, [r3, r2]
 8016d3c:	2b02      	cmp	r3, #2
 8016d3e:	d018      	beq.n	8016d72 <xQueueSemaphoreTake+0x346>
 8016d40:	f7f7 f819 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016d44:	4603      	mov	r3, r0
 8016d46:	4618      	mov	r0, r3
 8016d48:	f7f6 ff94 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	461a      	mov	r2, r3
 8016d50:	4b1b      	ldr	r3, [pc, #108]	; (8016dc0 <xQueueSemaphoreTake+0x394>)
 8016d52:	881b      	ldrh	r3, [r3, #0]
 8016d54:	4013      	ands	r3, r2
 8016d56:	b29b      	uxth	r3, r3
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d00a      	beq.n	8016d72 <xQueueSemaphoreTake+0x346>
 8016d5c:	f7f7 f80b 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016d60:	4603      	mov	r3, r0
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7f6 ff79 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	b2db      	uxtb	r3, r3
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f7 fd2f 	bl	800e7d0 <prvTraceSetTaskInstanceFinished>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d109      	bne.n	8016d8e <xQueueSemaphoreTake+0x362>
					{
						taskENTER_CRITICAL();
 8016d7a:	f002 fb03 	bl	8019384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d80:	689b      	ldr	r3, [r3, #8]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f001 fbea 	bl	801855c <xTaskPriorityInherit>
 8016d88:	6278      	str	r0, [r7, #36]	; 0x24
						}
						taskEXIT_CRITICAL();
 8016d8a:	f002 fb2b 	bl	80193e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d90:	3324      	adds	r3, #36	; 0x24
 8016d92:	683a      	ldr	r2, [r7, #0]
 8016d94:	4611      	mov	r1, r2
 8016d96:	4618      	mov	r0, r3
 8016d98:	f001 f92a 	bl	8017ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d9e:	f000 fada 	bl	8017356 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016da2:	f000 fef9 	bl	8017b98 <xTaskResumeAll>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	f47f ae7f 	bne.w	8016aac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016dae:	4b06      	ldr	r3, [pc, #24]	; (8016dc8 <xQueueSemaphoreTake+0x39c>)
 8016db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016db4:	601a      	str	r2, [r3, #0]
 8016db6:	f3bf 8f4f 	dsb	sy
 8016dba:	f3bf 8f6f 	isb	sy
 8016dbe:	e675      	b.n	8016aac <xQueueSemaphoreTake+0x80>
 8016dc0:	20008358 	.word	0x20008358
 8016dc4:	2000026c 	.word	0x2000026c
 8016dc8:	e000ed04 	.word	0xe000ed04
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dce:	f000 fac2 	bl	8017356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016dd2:	f000 fee1 	bl	8017b98 <xTaskResumeAll>
 8016dd6:	e669      	b.n	8016aac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8016dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dda:	f000 fabc 	bl	8017356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016dde:	f000 fedb 	bl	8017b98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016de4:	f000 fb09 	bl	80173fa <prvIsQueueEmpty>
 8016de8:	4603      	mov	r3, r0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	f43f ae5e 	beq.w	8016aac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d00d      	beq.n	8016e12 <xQueueSemaphoreTake+0x3e6>
					{
						taskENTER_CRITICAL();
 8016df6:	f002 fac5 	bl	8019384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016dfc:	f000 fa03 	bl	8017206 <prvGetDisinheritPriorityAfterTimeout>
 8016e00:	6378      	str	r0, [r7, #52]	; 0x34
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e04:	689b      	ldr	r3, [r3, #8]
 8016e06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f001 fd03 	bl	8018814 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016e0e:	f002 fae9 	bl	80193e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8016e12:	f7f6 ffb0 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8016e16:	4603      	mov	r3, r0
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f7f6 ff2b 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	461a      	mov	r2, r3
 8016e22:	4b18      	ldr	r3, [pc, #96]	; (8016e84 <xQueueSemaphoreTake+0x458>)
 8016e24:	881b      	ldrh	r3, [r3, #0]
 8016e26:	4013      	ands	r3, r2
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d025      	beq.n	8016e7a <xQueueSemaphoreTake+0x44e>
 8016e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e30:	f7f6 ff67 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016e34:	4603      	mov	r3, r0
 8016e36:	461a      	mov	r2, r3
 8016e38:	4b12      	ldr	r3, [pc, #72]	; (8016e84 <xQueueSemaphoreTake+0x458>)
 8016e3a:	881b      	ldrh	r3, [r3, #0]
 8016e3c:	4013      	ands	r3, r2
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d01a      	beq.n	8016e7a <xQueueSemaphoreTake+0x44e>
 8016e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e46:	f7f6 fefc 	bl	800dc42 <prvTraceGetQueueType>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	4b0e      	ldr	r3, [pc, #56]	; (8016e88 <xQueueSemaphoreTake+0x45c>)
 8016e50:	5c9b      	ldrb	r3, [r3, r2]
 8016e52:	3350      	adds	r3, #80	; 0x50
 8016e54:	b2db      	uxtb	r3, r3
 8016e56:	461d      	mov	r5, r3
 8016e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e5a:	f7f6 fef2 	bl	800dc42 <prvTraceGetQueueType>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	461a      	mov	r2, r3
 8016e62:	4b09      	ldr	r3, [pc, #36]	; (8016e88 <xQueueSemaphoreTake+0x45c>)
 8016e64:	5c9c      	ldrb	r4, [r3, r2]
 8016e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e68:	f7f6 ff3e 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	461a      	mov	r2, r3
 8016e72:	4621      	mov	r1, r4
 8016e74:	4628      	mov	r0, r5
 8016e76:	f7f7 f8e5 	bl	800e044 <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8016e7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3738      	adds	r7, #56	; 0x38
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bdb0      	pop	{r4, r5, r7, pc}
 8016e84:	20008358 	.word	0x20008358
 8016e88:	2000026c 	.word	0x2000026c

08016e8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016e8c:	b5b0      	push	{r4, r5, r7, lr}
 8016e8e:	b08e      	sub	sp, #56	; 0x38
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	60b9      	str	r1, [r7, #8]
 8016e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d10a      	bne.n	8016eb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea6:	f383 8811 	msr	BASEPRI, r3
 8016eaa:	f3bf 8f6f 	isb	sy
 8016eae:	f3bf 8f4f 	dsb	sy
 8016eb2:	623b      	str	r3, [r7, #32]
}
 8016eb4:	bf00      	nop
 8016eb6:	e7fe      	b.n	8016eb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d103      	bne.n	8016ec6 <xQueueReceiveFromISR+0x3a>
 8016ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d101      	bne.n	8016eca <xQueueReceiveFromISR+0x3e>
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	e000      	b.n	8016ecc <xQueueReceiveFromISR+0x40>
 8016eca:	2300      	movs	r3, #0
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d10a      	bne.n	8016ee6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed4:	f383 8811 	msr	BASEPRI, r3
 8016ed8:	f3bf 8f6f 	isb	sy
 8016edc:	f3bf 8f4f 	dsb	sy
 8016ee0:	61fb      	str	r3, [r7, #28]
}
 8016ee2:	bf00      	nop
 8016ee4:	e7fe      	b.n	8016ee4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016ee6:	f002 fb2f 	bl	8019548 <vPortValidateInterruptPriority>
	__asm volatile
 8016eea:	f3ef 8211 	mrs	r2, BASEPRI
 8016eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef2:	f383 8811 	msr	BASEPRI, r3
 8016ef6:	f3bf 8f6f 	isb	sy
 8016efa:	f3bf 8f4f 	dsb	sy
 8016efe:	61ba      	str	r2, [r7, #24]
 8016f00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016f02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d06a      	beq.n	8016fe8 <xQueueReceiveFromISR+0x15c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8016f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f1e:	f7f6 fef0 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016f22:	4603      	mov	r3, r0
 8016f24:	461a      	mov	r2, r3
 8016f26:	4b4a      	ldr	r3, [pc, #296]	; (8017050 <xQueueReceiveFromISR+0x1c4>)
 8016f28:	881b      	ldrh	r3, [r3, #0]
 8016f2a:	4013      	ands	r3, r2
 8016f2c:	b29b      	uxth	r3, r3
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d01a      	beq.n	8016f68 <xQueueReceiveFromISR+0xdc>
 8016f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f34:	f7f6 fe85 	bl	800dc42 <prvTraceGetQueueType>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	4b45      	ldr	r3, [pc, #276]	; (8017054 <xQueueReceiveFromISR+0x1c8>)
 8016f3e:	5c9b      	ldrb	r3, [r3, r2]
 8016f40:	3338      	adds	r3, #56	; 0x38
 8016f42:	b2db      	uxtb	r3, r3
 8016f44:	461d      	mov	r5, r3
 8016f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f48:	f7f6 fe7b 	bl	800dc42 <prvTraceGetQueueType>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	461a      	mov	r2, r3
 8016f50:	4b40      	ldr	r3, [pc, #256]	; (8017054 <xQueueReceiveFromISR+0x1c8>)
 8016f52:	5c9c      	ldrb	r4, [r3, r2]
 8016f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f56:	f7f6 fec7 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	461a      	mov	r2, r3
 8016f60:	4621      	mov	r1, r4
 8016f62:	4628      	mov	r0, r5
 8016f64:	f7f7 f86e 	bl	800e044 <prvTraceStoreKernelCall>
 8016f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f6a:	f7f6 fe6a 	bl	800dc42 <prvTraceGetQueueType>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	461a      	mov	r2, r3
 8016f72:	4b38      	ldr	r3, [pc, #224]	; (8017054 <xQueueReceiveFromISR+0x1c8>)
 8016f74:	5c9c      	ldrb	r4, [r3, r2]
 8016f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f78:	f7f6 feb6 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	b2d9      	uxtb	r1, r3
 8016f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f84:	b2db      	uxtb	r3, r3
 8016f86:	3b01      	subs	r3, #1
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f7f7 fba7 	bl	800e6e0 <prvTraceSetObjectState>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016f92:	68b9      	ldr	r1, [r7, #8]
 8016f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f96:	f000 f9b8 	bl	801730a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f9c:	1e5a      	subs	r2, r3, #1
 8016f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016fa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016faa:	d112      	bne.n	8016fd2 <xQueueReceiveFromISR+0x146>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fae:	691b      	ldr	r3, [r3, #16]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d016      	beq.n	8016fe2 <xQueueReceiveFromISR+0x156>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb6:	3310      	adds	r3, #16
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f001 f8a5 	bl	8018108 <xTaskRemoveFromEventList>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d00e      	beq.n	8016fe2 <xQueueReceiveFromISR+0x156>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00b      	beq.n	8016fe2 <xQueueReceiveFromISR+0x156>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2201      	movs	r2, #1
 8016fce:	601a      	str	r2, [r3, #0]
 8016fd0:	e007      	b.n	8016fe2 <xQueueReceiveFromISR+0x156>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	b25a      	sxtb	r2, r3
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8016fe6:	e027      	b.n	8017038 <xQueueReceiveFromISR+0x1ac>
		}
		else
		{
			xReturn = pdFAIL;
 8016fe8:	2300      	movs	r3, #0
 8016fea:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8016fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fee:	f7f6 fe88 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	4b16      	ldr	r3, [pc, #88]	; (8017050 <xQueueReceiveFromISR+0x1c4>)
 8016ff8:	881b      	ldrh	r3, [r3, #0]
 8016ffa:	4013      	ands	r3, r2
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d01a      	beq.n	8017038 <xQueueReceiveFromISR+0x1ac>
 8017002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017004:	f7f6 fe1d 	bl	800dc42 <prvTraceGetQueueType>
 8017008:	4603      	mov	r3, r0
 801700a:	461a      	mov	r2, r3
 801700c:	4b11      	ldr	r3, [pc, #68]	; (8017054 <xQueueReceiveFromISR+0x1c8>)
 801700e:	5c9b      	ldrb	r3, [r3, r2]
 8017010:	3360      	adds	r3, #96	; 0x60
 8017012:	b2db      	uxtb	r3, r3
 8017014:	461d      	mov	r5, r3
 8017016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017018:	f7f6 fe13 	bl	800dc42 <prvTraceGetQueueType>
 801701c:	4603      	mov	r3, r0
 801701e:	461a      	mov	r2, r3
 8017020:	4b0c      	ldr	r3, [pc, #48]	; (8017054 <xQueueReceiveFromISR+0x1c8>)
 8017022:	5c9c      	ldrb	r4, [r3, r2]
 8017024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017026:	f7f6 fe5f 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801702a:	4603      	mov	r3, r0
 801702c:	b2db      	uxtb	r3, r3
 801702e:	461a      	mov	r2, r3
 8017030:	4621      	mov	r1, r4
 8017032:	4628      	mov	r0, r5
 8017034:	f7f7 f806 	bl	800e044 <prvTraceStoreKernelCall>
 8017038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	f383 8811 	msr	BASEPRI, r3
}
 8017042:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017046:	4618      	mov	r0, r3
 8017048:	3738      	adds	r7, #56	; 0x38
 801704a:	46bd      	mov	sp, r7
 801704c:	bdb0      	pop	{r4, r5, r7, pc}
 801704e:	bf00      	nop
 8017050:	20008358 	.word	0x20008358
 8017054:	2000026c 	.word	0x2000026c

08017058 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017058:	b5b0      	push	{r4, r5, r7, lr}
 801705a:	b088      	sub	sp, #32
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	61fb      	str	r3, [r7, #28]

	configASSERT( pxQueue );
 8017064:	69fb      	ldr	r3, [r7, #28]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d10a      	bne.n	8017080 <vQueueDelete+0x28>
	__asm volatile
 801706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706e:	f383 8811 	msr	BASEPRI, r3
 8017072:	f3bf 8f6f 	isb	sy
 8017076:	f3bf 8f4f 	dsb	sy
 801707a:	617b      	str	r3, [r7, #20]
}
 801707c:	bf00      	nop
 801707e:	e7fe      	b.n	801707e <vQueueDelete+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017080:	f3ef 8310 	mrs	r3, PRIMASK
 8017084:	60fb      	str	r3, [r7, #12]
  return(result);
 8017086:	68fb      	ldr	r3, [r7, #12]
	traceQUEUE_DELETE( pxQueue );
 8017088:	61bb      	str	r3, [r7, #24]
 801708a:	2301      	movs	r3, #1
 801708c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801708e:	693b      	ldr	r3, [r7, #16]
 8017090:	f383 8810 	msr	PRIMASK, r3
}
 8017094:	bf00      	nop
 8017096:	f7f6 fe6e 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 801709a:	4603      	mov	r3, r0
 801709c:	4618      	mov	r0, r3
 801709e:	f7f6 fde9 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80170a2:	4603      	mov	r3, r0
 80170a4:	461a      	mov	r2, r3
 80170a6:	4b42      	ldr	r3, [pc, #264]	; (80171b0 <vQueueDelete+0x158>)
 80170a8:	881b      	ldrh	r3, [r3, #0]
 80170aa:	4013      	ands	r3, r2
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d025      	beq.n	80170fe <vQueueDelete+0xa6>
 80170b2:	69f8      	ldr	r0, [r7, #28]
 80170b4:	f7f6 fe25 	bl	800dd02 <prvTraceGetQueueNumberHigh16>
 80170b8:	4603      	mov	r3, r0
 80170ba:	461a      	mov	r2, r3
 80170bc:	4b3c      	ldr	r3, [pc, #240]	; (80171b0 <vQueueDelete+0x158>)
 80170be:	881b      	ldrh	r3, [r3, #0]
 80170c0:	4013      	ands	r3, r2
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d01a      	beq.n	80170fe <vQueueDelete+0xa6>
 80170c8:	69f8      	ldr	r0, [r7, #28]
 80170ca:	f7f6 fdba 	bl	800dc42 <prvTraceGetQueueType>
 80170ce:	4603      	mov	r3, r0
 80170d0:	461a      	mov	r2, r3
 80170d2:	4b38      	ldr	r3, [pc, #224]	; (80171b4 <vQueueDelete+0x15c>)
 80170d4:	5c9b      	ldrb	r3, [r3, r2]
 80170d6:	3b80      	subs	r3, #128	; 0x80
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	461d      	mov	r5, r3
 80170dc:	69f8      	ldr	r0, [r7, #28]
 80170de:	f7f6 fdb0 	bl	800dc42 <prvTraceGetQueueType>
 80170e2:	4603      	mov	r3, r0
 80170e4:	461a      	mov	r2, r3
 80170e6:	4b33      	ldr	r3, [pc, #204]	; (80171b4 <vQueueDelete+0x15c>)
 80170e8:	5c9c      	ldrb	r4, [r3, r2]
 80170ea:	69f8      	ldr	r0, [r7, #28]
 80170ec:	f7f6 fdfc 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 80170f0:	4603      	mov	r3, r0
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	461a      	mov	r2, r3
 80170f6:	4621      	mov	r1, r4
 80170f8:	4628      	mov	r0, r5
 80170fa:	f7f6 ffa3 	bl	800e044 <prvTraceStoreKernelCall>
 80170fe:	69f8      	ldr	r0, [r7, #28]
 8017100:	f7f6 fd9f 	bl	800dc42 <prvTraceGetQueueType>
 8017104:	4603      	mov	r3, r0
 8017106:	461a      	mov	r2, r3
 8017108:	4b2a      	ldr	r3, [pc, #168]	; (80171b4 <vQueueDelete+0x15c>)
 801710a:	5c9b      	ldrb	r3, [r3, r2]
 801710c:	3308      	adds	r3, #8
 801710e:	b2dc      	uxtb	r4, r3
 8017110:	69f8      	ldr	r0, [r7, #28]
 8017112:	f7f6 fde9 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 8017116:	4603      	mov	r3, r0
 8017118:	b2dd      	uxtb	r5, r3
 801711a:	69f8      	ldr	r0, [r7, #28]
 801711c:	f7f6 fd91 	bl	800dc42 <prvTraceGetQueueType>
 8017120:	4603      	mov	r3, r0
 8017122:	461a      	mov	r2, r3
 8017124:	4b23      	ldr	r3, [pc, #140]	; (80171b4 <vQueueDelete+0x15c>)
 8017126:	5c9b      	ldrb	r3, [r3, r2]
 8017128:	461a      	mov	r2, r3
 801712a:	4629      	mov	r1, r5
 801712c:	4620      	mov	r0, r4
 801712e:	f7f7 f9a5 	bl	800e47c <prvTraceStoreObjectNameOnCloseEvent>
 8017132:	69f8      	ldr	r0, [r7, #28]
 8017134:	f7f6 fd85 	bl	800dc42 <prvTraceGetQueueType>
 8017138:	4603      	mov	r3, r0
 801713a:	461a      	mov	r2, r3
 801713c:	4b1d      	ldr	r3, [pc, #116]	; (80171b4 <vQueueDelete+0x15c>)
 801713e:	5c9b      	ldrb	r3, [r3, r2]
 8017140:	3310      	adds	r3, #16
 8017142:	b2dc      	uxtb	r4, r3
 8017144:	69f8      	ldr	r0, [r7, #28]
 8017146:	f7f6 fdcf 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801714a:	4603      	mov	r3, r0
 801714c:	b2dd      	uxtb	r5, r3
 801714e:	69f8      	ldr	r0, [r7, #28]
 8017150:	f7f6 fd77 	bl	800dc42 <prvTraceGetQueueType>
 8017154:	4603      	mov	r3, r0
 8017156:	461a      	mov	r2, r3
 8017158:	4b16      	ldr	r3, [pc, #88]	; (80171b4 <vQueueDelete+0x15c>)
 801715a:	5c9b      	ldrb	r3, [r3, r2]
 801715c:	461a      	mov	r2, r3
 801715e:	4629      	mov	r1, r5
 8017160:	4620      	mov	r0, r4
 8017162:	f7f7 f9db 	bl	800e51c <prvTraceStoreObjectPropertiesOnCloseEvent>
 8017166:	69f8      	ldr	r0, [r7, #28]
 8017168:	f7f6 fd6b 	bl	800dc42 <prvTraceGetQueueType>
 801716c:	4603      	mov	r3, r0
 801716e:	461a      	mov	r2, r3
 8017170:	4b10      	ldr	r3, [pc, #64]	; (80171b4 <vQueueDelete+0x15c>)
 8017172:	5c9c      	ldrb	r4, [r3, r2]
 8017174:	69f8      	ldr	r0, [r7, #28]
 8017176:	f7f6 fdb7 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801717a:	4603      	mov	r3, r0
 801717c:	b2db      	uxtb	r3, r3
 801717e:	4619      	mov	r1, r3
 8017180:	4620      	mov	r0, r4
 8017182:	f7f7 fc79 	bl	800ea78 <prvTraceFreeObjectHandle>
 8017186:	69bb      	ldr	r3, [r7, #24]
 8017188:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	f383 8810 	msr	PRIMASK, r3
}
 8017190:	bf00      	nop

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017192:	69f8      	ldr	r0, [r7, #28]
 8017194:	f000 f99a 	bl	80174cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017198:	69fb      	ldr	r3, [r7, #28]
 801719a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d102      	bne.n	80171a8 <vQueueDelete+0x150>
		{
			vPortFree( pxQueue );
 80171a2:	69f8      	ldr	r0, [r7, #28]
 80171a4:	f002 faec 	bl	8019780 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80171a8:	bf00      	nop
 80171aa:	3720      	adds	r7, #32
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bdb0      	pop	{r4, r5, r7, pc}
 80171b0:	20008358 	.word	0x20008358
 80171b4:	2000026c 	.word	0x2000026c

080171b8 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 80171b8:	b480      	push	{r7}
 80171ba:	b083      	sub	sp, #12
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 80171c4:	4618      	mov	r0, r3
 80171c6:	370c      	adds	r7, #12
 80171c8:	46bd      	mov	sp, r7
 80171ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ce:	4770      	bx	lr

080171d0 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80171d0:	b480      	push	{r7}
 80171d2:	b083      	sub	sp, #12
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	683a      	ldr	r2, [r7, #0]
 80171de:	649a      	str	r2, [r3, #72]	; 0x48
	}
 80171e0:	bf00      	nop
 80171e2:	370c      	adds	r7, #12
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 80171ec:	b480      	push	{r7}
 80171ee:	b083      	sub	sp, #12
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 80171fa:	4618      	mov	r0, r3
 80171fc:	370c      	adds	r7, #12
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr

08017206 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017206:	b480      	push	{r7}
 8017208:	b085      	sub	sp, #20
 801720a:	af00      	add	r7, sp, #0
 801720c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017212:	2b00      	cmp	r3, #0
 8017214:	d006      	beq.n	8017224 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017220:	60fb      	str	r3, [r7, #12]
 8017222:	e001      	b.n	8017228 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017224:	2300      	movs	r3, #0
 8017226:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017228:	68fb      	ldr	r3, [r7, #12]
	}
 801722a:	4618      	mov	r0, r3
 801722c:	3714      	adds	r7, #20
 801722e:	46bd      	mov	sp, r7
 8017230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017234:	4770      	bx	lr

08017236 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017236:	b580      	push	{r7, lr}
 8017238:	b086      	sub	sp, #24
 801723a:	af00      	add	r7, sp, #0
 801723c:	60f8      	str	r0, [r7, #12]
 801723e:	60b9      	str	r1, [r7, #8]
 8017240:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017242:	2300      	movs	r3, #0
 8017244:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801724a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017250:	2b00      	cmp	r3, #0
 8017252:	d10d      	bne.n	8017270 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d14d      	bne.n	80172f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	689b      	ldr	r3, [r3, #8]
 8017260:	4618      	mov	r0, r3
 8017262:	f001 fa27 	bl	80186b4 <xTaskPriorityDisinherit>
 8017266:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	2200      	movs	r2, #0
 801726c:	609a      	str	r2, [r3, #8]
 801726e:	e043      	b.n	80172f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d119      	bne.n	80172aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	6858      	ldr	r0, [r3, #4]
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801727e:	461a      	mov	r2, r3
 8017280:	68b9      	ldr	r1, [r7, #8]
 8017282:	f002 fbcd 	bl	8019a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	685a      	ldr	r2, [r3, #4]
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801728e:	441a      	add	r2, r3
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	685a      	ldr	r2, [r3, #4]
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	689b      	ldr	r3, [r3, #8]
 801729c:	429a      	cmp	r2, r3
 801729e:	d32b      	bcc.n	80172f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	681a      	ldr	r2, [r3, #0]
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	605a      	str	r2, [r3, #4]
 80172a8:	e026      	b.n	80172f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	68d8      	ldr	r0, [r3, #12]
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172b2:	461a      	mov	r2, r3
 80172b4:	68b9      	ldr	r1, [r7, #8]
 80172b6:	f002 fbb3 	bl	8019a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	68da      	ldr	r2, [r3, #12]
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172c2:	425b      	negs	r3, r3
 80172c4:	441a      	add	r2, r3
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	68da      	ldr	r2, [r3, #12]
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	429a      	cmp	r2, r3
 80172d4:	d207      	bcs.n	80172e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	689a      	ldr	r2, [r3, #8]
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172de:	425b      	negs	r3, r3
 80172e0:	441a      	add	r2, r3
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	2b02      	cmp	r3, #2
 80172ea:	d105      	bne.n	80172f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80172ec:	693b      	ldr	r3, [r7, #16]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d002      	beq.n	80172f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	3b01      	subs	r3, #1
 80172f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	1c5a      	adds	r2, r3, #1
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017300:	697b      	ldr	r3, [r7, #20]
}
 8017302:	4618      	mov	r0, r3
 8017304:	3718      	adds	r7, #24
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}

0801730a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801730a:	b580      	push	{r7, lr}
 801730c:	b082      	sub	sp, #8
 801730e:	af00      	add	r7, sp, #0
 8017310:	6078      	str	r0, [r7, #4]
 8017312:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017318:	2b00      	cmp	r3, #0
 801731a:	d018      	beq.n	801734e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	68da      	ldr	r2, [r3, #12]
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017324:	441a      	add	r2, r3
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	68da      	ldr	r2, [r3, #12]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	689b      	ldr	r3, [r3, #8]
 8017332:	429a      	cmp	r2, r3
 8017334:	d303      	bcc.n	801733e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681a      	ldr	r2, [r3, #0]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	68d9      	ldr	r1, [r3, #12]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017346:	461a      	mov	r2, r3
 8017348:	6838      	ldr	r0, [r7, #0]
 801734a:	f002 fb69 	bl	8019a20 <memcpy>
	}
}
 801734e:	bf00      	nop
 8017350:	3708      	adds	r7, #8
 8017352:	46bd      	mov	sp, r7
 8017354:	bd80      	pop	{r7, pc}

08017356 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017356:	b580      	push	{r7, lr}
 8017358:	b084      	sub	sp, #16
 801735a:	af00      	add	r7, sp, #0
 801735c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801735e:	f002 f811 	bl	8019384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017368:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801736a:	e011      	b.n	8017390 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017370:	2b00      	cmp	r3, #0
 8017372:	d012      	beq.n	801739a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	3324      	adds	r3, #36	; 0x24
 8017378:	4618      	mov	r0, r3
 801737a:	f000 fec5 	bl	8018108 <xTaskRemoveFromEventList>
 801737e:	4603      	mov	r3, r0
 8017380:	2b00      	cmp	r3, #0
 8017382:	d001      	beq.n	8017388 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017384:	f000 ffb0 	bl	80182e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017388:	7bfb      	ldrb	r3, [r7, #15]
 801738a:	3b01      	subs	r3, #1
 801738c:	b2db      	uxtb	r3, r3
 801738e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017394:	2b00      	cmp	r3, #0
 8017396:	dce9      	bgt.n	801736c <prvUnlockQueue+0x16>
 8017398:	e000      	b.n	801739c <prvUnlockQueue+0x46>
					break;
 801739a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	22ff      	movs	r2, #255	; 0xff
 80173a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80173a4:	f002 f81e 	bl	80193e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80173a8:	f001 ffec 	bl	8019384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80173b4:	e011      	b.n	80173da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	691b      	ldr	r3, [r3, #16]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d012      	beq.n	80173e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	3310      	adds	r3, #16
 80173c2:	4618      	mov	r0, r3
 80173c4:	f000 fea0 	bl	8018108 <xTaskRemoveFromEventList>
 80173c8:	4603      	mov	r3, r0
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80173ce:	f000 ff8b 	bl	80182e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80173d2:	7bbb      	ldrb	r3, [r7, #14]
 80173d4:	3b01      	subs	r3, #1
 80173d6:	b2db      	uxtb	r3, r3
 80173d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80173da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	dce9      	bgt.n	80173b6 <prvUnlockQueue+0x60>
 80173e2:	e000      	b.n	80173e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80173e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	22ff      	movs	r2, #255	; 0xff
 80173ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80173ee:	f001 fff9 	bl	80193e4 <vPortExitCritical>
}
 80173f2:	bf00      	nop
 80173f4:	3710      	adds	r7, #16
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}

080173fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80173fa:	b580      	push	{r7, lr}
 80173fc:	b084      	sub	sp, #16
 80173fe:	af00      	add	r7, sp, #0
 8017400:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017402:	f001 ffbf 	bl	8019384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801740a:	2b00      	cmp	r3, #0
 801740c:	d102      	bne.n	8017414 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801740e:	2301      	movs	r3, #1
 8017410:	60fb      	str	r3, [r7, #12]
 8017412:	e001      	b.n	8017418 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017414:	2300      	movs	r3, #0
 8017416:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017418:	f001 ffe4 	bl	80193e4 <vPortExitCritical>

	return xReturn;
 801741c:	68fb      	ldr	r3, [r7, #12]
}
 801741e:	4618      	mov	r0, r3
 8017420:	3710      	adds	r7, #16
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}

08017426 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017426:	b580      	push	{r7, lr}
 8017428:	b084      	sub	sp, #16
 801742a:	af00      	add	r7, sp, #0
 801742c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801742e:	f001 ffa9 	bl	8019384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801743a:	429a      	cmp	r2, r3
 801743c:	d102      	bne.n	8017444 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801743e:	2301      	movs	r3, #1
 8017440:	60fb      	str	r3, [r7, #12]
 8017442:	e001      	b.n	8017448 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017444:	2300      	movs	r3, #0
 8017446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017448:	f001 ffcc 	bl	80193e4 <vPortExitCritical>

	return xReturn;
 801744c:	68fb      	ldr	r3, [r7, #12]
}
 801744e:	4618      	mov	r0, r3
 8017450:	3710      	adds	r7, #16
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
	...

08017458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017458:	b590      	push	{r4, r7, lr}
 801745a:	b085      	sub	sp, #20
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017462:	2300      	movs	r3, #0
 8017464:	60fb      	str	r3, [r7, #12]
 8017466:	e025      	b.n	80174b4 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017468:	4a16      	ldr	r2, [pc, #88]	; (80174c4 <vQueueAddToRegistry+0x6c>)
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d11c      	bne.n	80174ae <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017474:	4913      	ldr	r1, [pc, #76]	; (80174c4 <vQueueAddToRegistry+0x6c>)
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	683a      	ldr	r2, [r7, #0]
 801747a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801747e:	4a11      	ldr	r2, [pc, #68]	; (80174c4 <vQueueAddToRegistry+0x6c>)
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	00db      	lsls	r3, r3, #3
 8017484:	4413      	add	r3, r2
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f7f6 fbd9 	bl	800dc42 <prvTraceGetQueueType>
 8017490:	4603      	mov	r3, r0
 8017492:	461a      	mov	r2, r3
 8017494:	4b0c      	ldr	r3, [pc, #48]	; (80174c8 <vQueueAddToRegistry+0x70>)
 8017496:	5c9c      	ldrb	r4, [r3, r2]
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f7f6 fc25 	bl	800dce8 <prvTraceGetQueueNumberLow16>
 801749e:	4603      	mov	r3, r0
 80174a0:	b2db      	uxtb	r3, r3
 80174a2:	683a      	ldr	r2, [r7, #0]
 80174a4:	4619      	mov	r1, r3
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7f7 fb84 	bl	800ebb4 <prvTraceSetObjectName>
				break;
 80174ac:	e006      	b.n	80174bc <vQueueAddToRegistry+0x64>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	3301      	adds	r3, #1
 80174b2:	60fb      	str	r3, [r7, #12]
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	2b07      	cmp	r3, #7
 80174b8:	d9d6      	bls.n	8017468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80174ba:	bf00      	nop
 80174bc:	bf00      	nop
 80174be:	3714      	adds	r7, #20
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd90      	pop	{r4, r7, pc}
 80174c4:	20009d04 	.word	0x20009d04
 80174c8:	2000026c 	.word	0x2000026c

080174cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80174cc:	b480      	push	{r7}
 80174ce:	b085      	sub	sp, #20
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80174d4:	2300      	movs	r3, #0
 80174d6:	60fb      	str	r3, [r7, #12]
 80174d8:	e016      	b.n	8017508 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80174da:	4a10      	ldr	r2, [pc, #64]	; (801751c <vQueueUnregisterQueue+0x50>)
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	00db      	lsls	r3, r3, #3
 80174e0:	4413      	add	r3, r2
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	687a      	ldr	r2, [r7, #4]
 80174e6:	429a      	cmp	r2, r3
 80174e8:	d10b      	bne.n	8017502 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80174ea:	4a0c      	ldr	r2, [pc, #48]	; (801751c <vQueueUnregisterQueue+0x50>)
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	2100      	movs	r1, #0
 80174f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80174f4:	4a09      	ldr	r2, [pc, #36]	; (801751c <vQueueUnregisterQueue+0x50>)
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	00db      	lsls	r3, r3, #3
 80174fa:	4413      	add	r3, r2
 80174fc:	2200      	movs	r2, #0
 80174fe:	605a      	str	r2, [r3, #4]
				break;
 8017500:	e006      	b.n	8017510 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	3301      	adds	r3, #1
 8017506:	60fb      	str	r3, [r7, #12]
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2b07      	cmp	r3, #7
 801750c:	d9e5      	bls.n	80174da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801750e:	bf00      	nop
 8017510:	bf00      	nop
 8017512:	3714      	adds	r7, #20
 8017514:	46bd      	mov	sp, r7
 8017516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751a:	4770      	bx	lr
 801751c:	20009d04 	.word	0x20009d04

08017520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017520:	b580      	push	{r7, lr}
 8017522:	b086      	sub	sp, #24
 8017524:	af00      	add	r7, sp, #0
 8017526:	60f8      	str	r0, [r7, #12]
 8017528:	60b9      	str	r1, [r7, #8]
 801752a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017530:	f001 ff28 	bl	8019384 <vPortEnterCritical>
 8017534:	697b      	ldr	r3, [r7, #20]
 8017536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801753a:	b25b      	sxtb	r3, r3
 801753c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017540:	d103      	bne.n	801754a <vQueueWaitForMessageRestricted+0x2a>
 8017542:	697b      	ldr	r3, [r7, #20]
 8017544:	2200      	movs	r2, #0
 8017546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017550:	b25b      	sxtb	r3, r3
 8017552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017556:	d103      	bne.n	8017560 <vQueueWaitForMessageRestricted+0x40>
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	2200      	movs	r2, #0
 801755c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017560:	f001 ff40 	bl	80193e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017564:	697b      	ldr	r3, [r7, #20]
 8017566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017568:	2b00      	cmp	r3, #0
 801756a:	d106      	bne.n	801757a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801756c:	697b      	ldr	r3, [r7, #20]
 801756e:	3324      	adds	r3, #36	; 0x24
 8017570:	687a      	ldr	r2, [r7, #4]
 8017572:	68b9      	ldr	r1, [r7, #8]
 8017574:	4618      	mov	r0, r3
 8017576:	f000 fd5f 	bl	8018038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801757a:	6978      	ldr	r0, [r7, #20]
 801757c:	f7ff feeb 	bl	8017356 <prvUnlockQueue>
	}
 8017580:	bf00      	nop
 8017582:	3718      	adds	r7, #24
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017588:	b580      	push	{r7, lr}
 801758a:	b08e      	sub	sp, #56	; 0x38
 801758c:	af04      	add	r7, sp, #16
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	607a      	str	r2, [r7, #4]
 8017594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017598:	2b00      	cmp	r3, #0
 801759a:	d10a      	bne.n	80175b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 801759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a0:	f383 8811 	msr	BASEPRI, r3
 80175a4:	f3bf 8f6f 	isb	sy
 80175a8:	f3bf 8f4f 	dsb	sy
 80175ac:	623b      	str	r3, [r7, #32]
}
 80175ae:	bf00      	nop
 80175b0:	e7fe      	b.n	80175b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80175b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d10a      	bne.n	80175ce <xTaskCreateStatic+0x46>
	__asm volatile
 80175b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175bc:	f383 8811 	msr	BASEPRI, r3
 80175c0:	f3bf 8f6f 	isb	sy
 80175c4:	f3bf 8f4f 	dsb	sy
 80175c8:	61fb      	str	r3, [r7, #28]
}
 80175ca:	bf00      	nop
 80175cc:	e7fe      	b.n	80175cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80175ce:	235c      	movs	r3, #92	; 0x5c
 80175d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	2b5c      	cmp	r3, #92	; 0x5c
 80175d6:	d00a      	beq.n	80175ee <xTaskCreateStatic+0x66>
	__asm volatile
 80175d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175dc:	f383 8811 	msr	BASEPRI, r3
 80175e0:	f3bf 8f6f 	isb	sy
 80175e4:	f3bf 8f4f 	dsb	sy
 80175e8:	61bb      	str	r3, [r7, #24]
}
 80175ea:	bf00      	nop
 80175ec:	e7fe      	b.n	80175ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80175ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80175f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d01e      	beq.n	8017634 <xTaskCreateStatic+0xac>
 80175f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d01b      	beq.n	8017634 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80175fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017608:	2202      	movs	r2, #2
 801760a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801760e:	2300      	movs	r3, #0
 8017610:	9303      	str	r3, [sp, #12]
 8017612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017614:	9302      	str	r3, [sp, #8]
 8017616:	f107 0314 	add.w	r3, r7, #20
 801761a:	9301      	str	r3, [sp, #4]
 801761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801761e:	9300      	str	r3, [sp, #0]
 8017620:	683b      	ldr	r3, [r7, #0]
 8017622:	687a      	ldr	r2, [r7, #4]
 8017624:	68b9      	ldr	r1, [r7, #8]
 8017626:	68f8      	ldr	r0, [r7, #12]
 8017628:	f000 f850 	bl	80176cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801762c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801762e:	f000 f8dd 	bl	80177ec <prvAddNewTaskToReadyList>
 8017632:	e001      	b.n	8017638 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8017634:	2300      	movs	r3, #0
 8017636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017638:	697b      	ldr	r3, [r7, #20]
	}
 801763a:	4618      	mov	r0, r3
 801763c:	3728      	adds	r7, #40	; 0x28
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}

08017642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017642:	b580      	push	{r7, lr}
 8017644:	b08c      	sub	sp, #48	; 0x30
 8017646:	af04      	add	r7, sp, #16
 8017648:	60f8      	str	r0, [r7, #12]
 801764a:	60b9      	str	r1, [r7, #8]
 801764c:	603b      	str	r3, [r7, #0]
 801764e:	4613      	mov	r3, r2
 8017650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017652:	88fb      	ldrh	r3, [r7, #6]
 8017654:	009b      	lsls	r3, r3, #2
 8017656:	4618      	mov	r0, r3
 8017658:	f001 ffb6 	bl	80195c8 <pvPortMalloc>
 801765c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801765e:	697b      	ldr	r3, [r7, #20]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d00e      	beq.n	8017682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017664:	205c      	movs	r0, #92	; 0x5c
 8017666:	f001 ffaf 	bl	80195c8 <pvPortMalloc>
 801766a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d003      	beq.n	801767a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017672:	69fb      	ldr	r3, [r7, #28]
 8017674:	697a      	ldr	r2, [r7, #20]
 8017676:	631a      	str	r2, [r3, #48]	; 0x30
 8017678:	e005      	b.n	8017686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801767a:	6978      	ldr	r0, [r7, #20]
 801767c:	f002 f880 	bl	8019780 <vPortFree>
 8017680:	e001      	b.n	8017686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017682:	2300      	movs	r3, #0
 8017684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017686:	69fb      	ldr	r3, [r7, #28]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d017      	beq.n	80176bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801768c:	69fb      	ldr	r3, [r7, #28]
 801768e:	2200      	movs	r2, #0
 8017690:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017694:	88fa      	ldrh	r2, [r7, #6]
 8017696:	2300      	movs	r3, #0
 8017698:	9303      	str	r3, [sp, #12]
 801769a:	69fb      	ldr	r3, [r7, #28]
 801769c:	9302      	str	r3, [sp, #8]
 801769e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a0:	9301      	str	r3, [sp, #4]
 80176a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a4:	9300      	str	r3, [sp, #0]
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	68b9      	ldr	r1, [r7, #8]
 80176aa:	68f8      	ldr	r0, [r7, #12]
 80176ac:	f000 f80e 	bl	80176cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80176b0:	69f8      	ldr	r0, [r7, #28]
 80176b2:	f000 f89b 	bl	80177ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80176b6:	2301      	movs	r3, #1
 80176b8:	61bb      	str	r3, [r7, #24]
 80176ba:	e002      	b.n	80176c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80176bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80176c2:	69bb      	ldr	r3, [r7, #24]
	}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3720      	adds	r7, #32
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b088      	sub	sp, #32
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80176da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	009b      	lsls	r3, r3, #2
 80176e2:	461a      	mov	r2, r3
 80176e4:	21a5      	movs	r1, #165	; 0xa5
 80176e6:	f002 f9a9 	bl	8019a3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80176ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80176f4:	3b01      	subs	r3, #1
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	4413      	add	r3, r2
 80176fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80176fc:	69bb      	ldr	r3, [r7, #24]
 80176fe:	f023 0307 	bic.w	r3, r3, #7
 8017702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017704:	69bb      	ldr	r3, [r7, #24]
 8017706:	f003 0307 	and.w	r3, r3, #7
 801770a:	2b00      	cmp	r3, #0
 801770c:	d00a      	beq.n	8017724 <prvInitialiseNewTask+0x58>
	__asm volatile
 801770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017712:	f383 8811 	msr	BASEPRI, r3
 8017716:	f3bf 8f6f 	isb	sy
 801771a:	f3bf 8f4f 	dsb	sy
 801771e:	617b      	str	r3, [r7, #20]
}
 8017720:	bf00      	nop
 8017722:	e7fe      	b.n	8017722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d01f      	beq.n	801776a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801772a:	2300      	movs	r3, #0
 801772c:	61fb      	str	r3, [r7, #28]
 801772e:	e012      	b.n	8017756 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017730:	68ba      	ldr	r2, [r7, #8]
 8017732:	69fb      	ldr	r3, [r7, #28]
 8017734:	4413      	add	r3, r2
 8017736:	7819      	ldrb	r1, [r3, #0]
 8017738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801773a:	69fb      	ldr	r3, [r7, #28]
 801773c:	4413      	add	r3, r2
 801773e:	3334      	adds	r3, #52	; 0x34
 8017740:	460a      	mov	r2, r1
 8017742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017744:	68ba      	ldr	r2, [r7, #8]
 8017746:	69fb      	ldr	r3, [r7, #28]
 8017748:	4413      	add	r3, r2
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d006      	beq.n	801775e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017750:	69fb      	ldr	r3, [r7, #28]
 8017752:	3301      	adds	r3, #1
 8017754:	61fb      	str	r3, [r7, #28]
 8017756:	69fb      	ldr	r3, [r7, #28]
 8017758:	2b0f      	cmp	r3, #15
 801775a:	d9e9      	bls.n	8017730 <prvInitialiseNewTask+0x64>
 801775c:	e000      	b.n	8017760 <prvInitialiseNewTask+0x94>
			{
				break;
 801775e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017762:	2200      	movs	r2, #0
 8017764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017768:	e003      	b.n	8017772 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801776c:	2200      	movs	r2, #0
 801776e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017774:	2b37      	cmp	r3, #55	; 0x37
 8017776:	d901      	bls.n	801777c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017778:	2337      	movs	r3, #55	; 0x37
 801777a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017786:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801778a:	2200      	movs	r2, #0
 801778c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017790:	3304      	adds	r3, #4
 8017792:	4618      	mov	r0, r3
 8017794:	f7fe f83a 	bl	801580c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779a:	3318      	adds	r3, #24
 801779c:	4618      	mov	r0, r3
 801779e:	f7fe f835 	bl	801580c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80177a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80177ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80177b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80177b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ba:	2200      	movs	r2, #0
 80177bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80177be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177c0:	2200      	movs	r2, #0
 80177c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80177c6:	683a      	ldr	r2, [r7, #0]
 80177c8:	68f9      	ldr	r1, [r7, #12]
 80177ca:	69b8      	ldr	r0, [r7, #24]
 80177cc:	f001 fc9e 	bl	801910c <pxPortInitialiseStack>
 80177d0:	4602      	mov	r2, r0
 80177d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80177d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d002      	beq.n	80177e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80177dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80177e2:	bf00      	nop
 80177e4:	3720      	adds	r7, #32
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}
	...

080177ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b082      	sub	sp, #8
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80177f4:	f001 fdc6 	bl	8019384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80177f8:	4b5c      	ldr	r3, [pc, #368]	; (801796c <prvAddNewTaskToReadyList+0x180>)
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	3301      	adds	r3, #1
 80177fe:	4a5b      	ldr	r2, [pc, #364]	; (801796c <prvAddNewTaskToReadyList+0x180>)
 8017800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017802:	4b5b      	ldr	r3, [pc, #364]	; (8017970 <prvAddNewTaskToReadyList+0x184>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d109      	bne.n	801781e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801780a:	4a59      	ldr	r2, [pc, #356]	; (8017970 <prvAddNewTaskToReadyList+0x184>)
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017810:	4b56      	ldr	r3, [pc, #344]	; (801796c <prvAddNewTaskToReadyList+0x180>)
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2b01      	cmp	r3, #1
 8017816:	d110      	bne.n	801783a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017818:	f000 fdb4 	bl	8018384 <prvInitialiseTaskLists>
 801781c:	e00d      	b.n	801783a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801781e:	4b55      	ldr	r3, [pc, #340]	; (8017974 <prvAddNewTaskToReadyList+0x188>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d109      	bne.n	801783a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017826:	4b52      	ldr	r3, [pc, #328]	; (8017970 <prvAddNewTaskToReadyList+0x184>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017830:	429a      	cmp	r2, r3
 8017832:	d802      	bhi.n	801783a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017834:	4a4e      	ldr	r2, [pc, #312]	; (8017970 <prvAddNewTaskToReadyList+0x184>)
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801783a:	4b4f      	ldr	r3, [pc, #316]	; (8017978 <prvAddNewTaskToReadyList+0x18c>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	3301      	adds	r3, #1
 8017840:	4a4d      	ldr	r2, [pc, #308]	; (8017978 <prvAddNewTaskToReadyList+0x18c>)
 8017842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017844:	4b4c      	ldr	r3, [pc, #304]	; (8017978 <prvAddNewTaskToReadyList+0x18c>)
 8017846:	681a      	ldr	r2, [r3, #0]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d048      	beq.n	80178e4 <prvAddNewTaskToReadyList+0xf8>
 8017852:	2003      	movs	r0, #3
 8017854:	f7f7 f862 	bl	800e91c <prvTraceGetObjectHandle>
 8017858:	4603      	mov	r3, r0
 801785a:	b29b      	uxth	r3, r3
 801785c:	4619      	mov	r1, r3
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7f6 fa16 	bl	800dc90 <prvTraceSetTaskNumberLow16>
 8017864:	4b45      	ldr	r3, [pc, #276]	; (801797c <prvAddNewTaskToReadyList+0x190>)
 8017866:	881b      	ldrh	r3, [r3, #0]
 8017868:	4619      	mov	r1, r3
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7f6 fa26 	bl	800dcbc <prvTraceSetTaskNumberHigh16>
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f7f6 f9f2 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017876:	4603      	mov	r3, r0
 8017878:	b2d9      	uxtb	r1, r3
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	3334      	adds	r3, #52	; 0x34
 801787e:	461a      	mov	r2, r3
 8017880:	2003      	movs	r0, #3
 8017882:	f7f7 f997 	bl	800ebb4 <prvTraceSetObjectName>
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f7f6 f9e7 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 801788c:	4603      	mov	r3, r0
 801788e:	b2d9      	uxtb	r1, r3
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017894:	b2db      	uxtb	r3, r3
 8017896:	461a      	mov	r2, r3
 8017898:	2003      	movs	r0, #3
 801789a:	f7f6 fea7 	bl	800e5ec <prvTraceSetPriorityProperty>
 801789e:	f7f6 fa6a 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80178a2:	4603      	mov	r3, r0
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7f6 f9e5 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80178aa:	4603      	mov	r3, r0
 80178ac:	461a      	mov	r2, r3
 80178ae:	4b34      	ldr	r3, [pc, #208]	; (8017980 <prvAddNewTaskToReadyList+0x194>)
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	4013      	ands	r3, r2
 80178b4:	b29b      	uxth	r3, r3
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d014      	beq.n	80178e4 <prvAddNewTaskToReadyList+0xf8>
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f7f6 f9da 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80178c0:	4603      	mov	r3, r0
 80178c2:	461a      	mov	r2, r3
 80178c4:	4b2e      	ldr	r3, [pc, #184]	; (8017980 <prvAddNewTaskToReadyList+0x194>)
 80178c6:	881b      	ldrh	r3, [r3, #0]
 80178c8:	4013      	ands	r3, r2
 80178ca:	b29b      	uxth	r3, r3
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d009      	beq.n	80178e4 <prvAddNewTaskToReadyList+0xf8>
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f7f6 f9c2 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80178d6:	4603      	mov	r3, r0
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	461a      	mov	r2, r3
 80178dc:	2103      	movs	r1, #3
 80178de:	201b      	movs	r0, #27
 80178e0:	f7f6 fbb0 	bl	800e044 <prvTraceStoreKernelCall>

		prvAddTaskToReadyList( pxNewTCB );
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7f6 f9c5 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80178ea:	4603      	mov	r3, r0
 80178ec:	461a      	mov	r2, r3
 80178ee:	4b24      	ldr	r3, [pc, #144]	; (8017980 <prvAddNewTaskToReadyList+0x194>)
 80178f0:	881b      	ldrh	r3, [r3, #0]
 80178f2:	4013      	ands	r3, r2
 80178f4:	b29b      	uxth	r3, r3
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d007      	beq.n	801790a <prvAddNewTaskToReadyList+0x11e>
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7f6 f9ad 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017900:	4603      	mov	r3, r0
 8017902:	b2db      	uxtb	r3, r3
 8017904:	4618      	mov	r0, r3
 8017906:	f7f6 faa1 	bl	800de4c <prvTraceStoreTaskReady>
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801790e:	4b1d      	ldr	r3, [pc, #116]	; (8017984 <prvAddNewTaskToReadyList+0x198>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	429a      	cmp	r2, r3
 8017914:	d903      	bls.n	801791e <prvAddNewTaskToReadyList+0x132>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801791a:	4a1a      	ldr	r2, [pc, #104]	; (8017984 <prvAddNewTaskToReadyList+0x198>)
 801791c:	6013      	str	r3, [r2, #0]
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017922:	4613      	mov	r3, r2
 8017924:	009b      	lsls	r3, r3, #2
 8017926:	4413      	add	r3, r2
 8017928:	009b      	lsls	r3, r3, #2
 801792a:	4a17      	ldr	r2, [pc, #92]	; (8017988 <prvAddNewTaskToReadyList+0x19c>)
 801792c:	441a      	add	r2, r3
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	3304      	adds	r3, #4
 8017932:	4619      	mov	r1, r3
 8017934:	4610      	mov	r0, r2
 8017936:	f7fd ff76 	bl	8015826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801793a:	f001 fd53 	bl	80193e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801793e:	4b0d      	ldr	r3, [pc, #52]	; (8017974 <prvAddNewTaskToReadyList+0x188>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d00e      	beq.n	8017964 <prvAddNewTaskToReadyList+0x178>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017946:	4b0a      	ldr	r3, [pc, #40]	; (8017970 <prvAddNewTaskToReadyList+0x184>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017950:	429a      	cmp	r2, r3
 8017952:	d207      	bcs.n	8017964 <prvAddNewTaskToReadyList+0x178>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017954:	4b0d      	ldr	r3, [pc, #52]	; (801798c <prvAddNewTaskToReadyList+0x1a0>)
 8017956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801795a:	601a      	str	r2, [r3, #0]
 801795c:	f3bf 8f4f 	dsb	sy
 8017960:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017964:	bf00      	nop
 8017966:	3708      	adds	r7, #8
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}
 801796c:	2000104c 	.word	0x2000104c
 8017970:	20000b78 	.word	0x20000b78
 8017974:	20001058 	.word	0x20001058
 8017978:	20001068 	.word	0x20001068
 801797c:	20009c64 	.word	0x20009c64
 8017980:	20008358 	.word	0x20008358
 8017984:	20001054 	.word	0x20001054
 8017988:	20000b7c 	.word	0x20000b7c
 801798c:	e000ed04 	.word	0xe000ed04

08017990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017990:	b580      	push	{r7, lr}
 8017992:	b084      	sub	sp, #16
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017998:	2300      	movs	r3, #0
 801799a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d04b      	beq.n	8017a3a <vTaskDelay+0xaa>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80179a2:	4b2d      	ldr	r3, [pc, #180]	; (8017a58 <vTaskDelay+0xc8>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d00a      	beq.n	80179c0 <vTaskDelay+0x30>
	__asm volatile
 80179aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179ae:	f383 8811 	msr	BASEPRI, r3
 80179b2:	f3bf 8f6f 	isb	sy
 80179b6:	f3bf 8f4f 	dsb	sy
 80179ba:	60bb      	str	r3, [r7, #8]
}
 80179bc:	bf00      	nop
 80179be:	e7fe      	b.n	80179be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80179c0:	f000 f8dc 	bl	8017b7c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80179c4:	4b25      	ldr	r3, [pc, #148]	; (8017a5c <vTaskDelay+0xcc>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	4618      	mov	r0, r3
 80179ca:	f7f6 f953 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80179ce:	4603      	mov	r3, r0
 80179d0:	461a      	mov	r2, r3
 80179d2:	4b23      	ldr	r3, [pc, #140]	; (8017a60 <vTaskDelay+0xd0>)
 80179d4:	881b      	ldrh	r3, [r3, #0]
 80179d6:	4013      	ands	r3, r2
 80179d8:	b29b      	uxth	r3, r3
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d00d      	beq.n	80179fa <vTaskDelay+0x6a>
 80179de:	6879      	ldr	r1, [r7, #4]
 80179e0:	2089      	movs	r0, #137	; 0x89
 80179e2:	f7f6 fc73 	bl	800e2cc <prvTraceStoreKernelCallWithNumericParamOnly>
 80179e6:	4b1d      	ldr	r3, [pc, #116]	; (8017a5c <vTaskDelay+0xcc>)
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	4618      	mov	r0, r3
 80179ec:	f7f6 f935 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80179f0:	4603      	mov	r3, r0
 80179f2:	b2db      	uxtb	r3, r3
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7f6 feeb 	bl	800e7d0 <prvTraceSetTaskInstanceFinished>
 80179fa:	f7f6 f9bc 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80179fe:	4603      	mov	r3, r0
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7f6 f937 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8017a06:	4603      	mov	r3, r0
 8017a08:	461a      	mov	r2, r3
 8017a0a:	4b15      	ldr	r3, [pc, #84]	; (8017a60 <vTaskDelay+0xd0>)
 8017a0c:	881b      	ldrh	r3, [r3, #0]
 8017a0e:	4013      	ands	r3, r2
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d00a      	beq.n	8017a2c <vTaskDelay+0x9c>
 8017a16:	f7f6 f9ae 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f7f6 f91c 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017a22:	4603      	mov	r3, r0
 8017a24:	b2db      	uxtb	r3, r3
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7f6 fed2 	bl	800e7d0 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017a2c:	2100      	movs	r1, #0
 8017a2e:	6878      	ldr	r0, [r7, #4]
 8017a30:	f000 ffca 	bl	80189c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017a34:	f000 f8b0 	bl	8017b98 <xTaskResumeAll>
 8017a38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d107      	bne.n	8017a50 <vTaskDelay+0xc0>
		{
			portYIELD_WITHIN_API();
 8017a40:	4b08      	ldr	r3, [pc, #32]	; (8017a64 <vTaskDelay+0xd4>)
 8017a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a46:	601a      	str	r2, [r3, #0]
 8017a48:	f3bf 8f4f 	dsb	sy
 8017a4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017a50:	bf00      	nop
 8017a52:	3710      	adds	r7, #16
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}
 8017a58:	20001074 	.word	0x20001074
 8017a5c:	20000b78 	.word	0x20000b78
 8017a60:	20008358 	.word	0x20008358
 8017a64:	e000ed04 	.word	0xe000ed04

08017a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b08a      	sub	sp, #40	; 0x28
 8017a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017a72:	2300      	movs	r3, #0
 8017a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017a76:	463a      	mov	r2, r7
 8017a78:	1d39      	adds	r1, r7, #4
 8017a7a:	f107 0308 	add.w	r3, r7, #8
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7fd fe70 	bl	8015764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017a84:	6839      	ldr	r1, [r7, #0]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	68ba      	ldr	r2, [r7, #8]
 8017a8a:	9202      	str	r2, [sp, #8]
 8017a8c:	9301      	str	r3, [sp, #4]
 8017a8e:	2300      	movs	r3, #0
 8017a90:	9300      	str	r3, [sp, #0]
 8017a92:	2300      	movs	r3, #0
 8017a94:	460a      	mov	r2, r1
 8017a96:	4931      	ldr	r1, [pc, #196]	; (8017b5c <vTaskStartScheduler+0xf4>)
 8017a98:	4831      	ldr	r0, [pc, #196]	; (8017b60 <vTaskStartScheduler+0xf8>)
 8017a9a:	f7ff fd75 	bl	8017588 <xTaskCreateStatic>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	4a30      	ldr	r2, [pc, #192]	; (8017b64 <vTaskStartScheduler+0xfc>)
 8017aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017aa4:	4b2f      	ldr	r3, [pc, #188]	; (8017b64 <vTaskStartScheduler+0xfc>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d002      	beq.n	8017ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017aac:	2301      	movs	r3, #1
 8017aae:	617b      	str	r3, [r7, #20]
 8017ab0:	e001      	b.n	8017ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	d102      	bne.n	8017ac2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017abc:	f000 ffd8 	bl	8018a70 <xTimerCreateTimerTask>
 8017ac0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	2b01      	cmp	r3, #1
 8017ac6:	d135      	bne.n	8017b34 <vTaskStartScheduler+0xcc>
	__asm volatile
 8017ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017acc:	f383 8811 	msr	BASEPRI, r3
 8017ad0:	f3bf 8f6f 	isb	sy
 8017ad4:	f3bf 8f4f 	dsb	sy
 8017ad8:	613b      	str	r3, [r7, #16]
}
 8017ada:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017adc:	4b22      	ldr	r3, [pc, #136]	; (8017b68 <vTaskStartScheduler+0x100>)
 8017ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ae2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017ae4:	4b21      	ldr	r3, [pc, #132]	; (8017b6c <vTaskStartScheduler+0x104>)
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017aea:	4b21      	ldr	r3, [pc, #132]	; (8017b70 <vTaskStartScheduler+0x108>)
 8017aec:	2200      	movs	r2, #0
 8017aee:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8017af0:	4b20      	ldr	r3, [pc, #128]	; (8017b74 <vTaskStartScheduler+0x10c>)
 8017af2:	2201      	movs	r2, #1
 8017af4:	601a      	str	r2, [r3, #0]
 8017af6:	f7f6 f93e 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8017afa:	4603      	mov	r3, r0
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7f6 f8b9 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8017b02:	4603      	mov	r3, r0
 8017b04:	461a      	mov	r2, r3
 8017b06:	4b1c      	ldr	r3, [pc, #112]	; (8017b78 <vTaskStartScheduler+0x110>)
 8017b08:	881b      	ldrh	r3, [r3, #0]
 8017b0a:	4013      	ands	r3, r2
 8017b0c:	b29b      	uxth	r3, r3
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d00a      	beq.n	8017b28 <vTaskStartScheduler+0xc0>
 8017b12:	f7f6 f930 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8017b16:	4603      	mov	r3, r0
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f7f6 f89e 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	4618      	mov	r0, r3
 8017b24:	f7f6 fc38 	bl	800e398 <prvTraceStoreTaskswitch>
 8017b28:	4b12      	ldr	r3, [pc, #72]	; (8017b74 <vTaskStartScheduler+0x10c>)
 8017b2a:	2202      	movs	r2, #2
 8017b2c:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017b2e:	f001 fb77 	bl	8019220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017b32:	e00e      	b.n	8017b52 <vTaskStartScheduler+0xea>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b3a:	d10a      	bne.n	8017b52 <vTaskStartScheduler+0xea>
	__asm volatile
 8017b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b40:	f383 8811 	msr	BASEPRI, r3
 8017b44:	f3bf 8f6f 	isb	sy
 8017b48:	f3bf 8f4f 	dsb	sy
 8017b4c:	60fb      	str	r3, [r7, #12]
}
 8017b4e:	bf00      	nop
 8017b50:	e7fe      	b.n	8017b50 <vTaskStartScheduler+0xe8>
}
 8017b52:	bf00      	nop
 8017b54:	3718      	adds	r7, #24
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	0802126c 	.word	0x0802126c
 8017b60:	08018355 	.word	0x08018355
 8017b64:	20001070 	.word	0x20001070
 8017b68:	2000106c 	.word	0x2000106c
 8017b6c:	20001058 	.word	0x20001058
 8017b70:	20001050 	.word	0x20001050
 8017b74:	20000494 	.word	0x20000494
 8017b78:	20008358 	.word	0x20008358

08017b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017b80:	4b04      	ldr	r3, [pc, #16]	; (8017b94 <vTaskSuspendAll+0x18>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	3301      	adds	r3, #1
 8017b86:	4a03      	ldr	r2, [pc, #12]	; (8017b94 <vTaskSuspendAll+0x18>)
 8017b88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017b8a:	bf00      	nop
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b92:	4770      	bx	lr
 8017b94:	20001074 	.word	0x20001074

08017b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b084      	sub	sp, #16
 8017b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017ba6:	4b4b      	ldr	r3, [pc, #300]	; (8017cd4 <xTaskResumeAll+0x13c>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d10a      	bne.n	8017bc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8017bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bb2:	f383 8811 	msr	BASEPRI, r3
 8017bb6:	f3bf 8f6f 	isb	sy
 8017bba:	f3bf 8f4f 	dsb	sy
 8017bbe:	603b      	str	r3, [r7, #0]
}
 8017bc0:	bf00      	nop
 8017bc2:	e7fe      	b.n	8017bc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017bc4:	f001 fbde 	bl	8019384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017bc8:	4b42      	ldr	r3, [pc, #264]	; (8017cd4 <xTaskResumeAll+0x13c>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	3b01      	subs	r3, #1
 8017bce:	4a41      	ldr	r2, [pc, #260]	; (8017cd4 <xTaskResumeAll+0x13c>)
 8017bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bd2:	4b40      	ldr	r3, [pc, #256]	; (8017cd4 <xTaskResumeAll+0x13c>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d175      	bne.n	8017cc6 <xTaskResumeAll+0x12e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017bda:	4b3f      	ldr	r3, [pc, #252]	; (8017cd8 <xTaskResumeAll+0x140>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d071      	beq.n	8017cc6 <xTaskResumeAll+0x12e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017be2:	e042      	b.n	8017c6a <xTaskResumeAll+0xd2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017be4:	4b3d      	ldr	r3, [pc, #244]	; (8017cdc <xTaskResumeAll+0x144>)
 8017be6:	68db      	ldr	r3, [r3, #12]
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	3318      	adds	r3, #24
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fd fe75 	bl	80158e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	3304      	adds	r3, #4
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7fd fe70 	bl	80158e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017c00:	68f8      	ldr	r0, [r7, #12]
 8017c02:	f7f6 f837 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8017c06:	4603      	mov	r3, r0
 8017c08:	461a      	mov	r2, r3
 8017c0a:	4b35      	ldr	r3, [pc, #212]	; (8017ce0 <xTaskResumeAll+0x148>)
 8017c0c:	881b      	ldrh	r3, [r3, #0]
 8017c0e:	4013      	ands	r3, r2
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d007      	beq.n	8017c26 <xTaskResumeAll+0x8e>
 8017c16:	68f8      	ldr	r0, [r7, #12]
 8017c18:	f7f6 f81f 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	4618      	mov	r0, r3
 8017c22:	f7f6 f913 	bl	800de4c <prvTraceStoreTaskReady>
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c2a:	4b2e      	ldr	r3, [pc, #184]	; (8017ce4 <xTaskResumeAll+0x14c>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	d903      	bls.n	8017c3a <xTaskResumeAll+0xa2>
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c36:	4a2b      	ldr	r2, [pc, #172]	; (8017ce4 <xTaskResumeAll+0x14c>)
 8017c38:	6013      	str	r3, [r2, #0]
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c3e:	4613      	mov	r3, r2
 8017c40:	009b      	lsls	r3, r3, #2
 8017c42:	4413      	add	r3, r2
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	4a28      	ldr	r2, [pc, #160]	; (8017ce8 <xTaskResumeAll+0x150>)
 8017c48:	441a      	add	r2, r3
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	3304      	adds	r3, #4
 8017c4e:	4619      	mov	r1, r3
 8017c50:	4610      	mov	r0, r2
 8017c52:	f7fd fde8 	bl	8015826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c5a:	4b24      	ldr	r3, [pc, #144]	; (8017cec <xTaskResumeAll+0x154>)
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c60:	429a      	cmp	r2, r3
 8017c62:	d302      	bcc.n	8017c6a <xTaskResumeAll+0xd2>
					{
						xYieldPending = pdTRUE;
 8017c64:	4b22      	ldr	r3, [pc, #136]	; (8017cf0 <xTaskResumeAll+0x158>)
 8017c66:	2201      	movs	r2, #1
 8017c68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017c6a:	4b1c      	ldr	r3, [pc, #112]	; (8017cdc <xTaskResumeAll+0x144>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d1b8      	bne.n	8017be4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d001      	beq.n	8017c7c <xTaskResumeAll+0xe4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017c78:	f000 fc22 	bl	80184c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017c7c:	4b1d      	ldr	r3, [pc, #116]	; (8017cf4 <xTaskResumeAll+0x15c>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d010      	beq.n	8017caa <xTaskResumeAll+0x112>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017c88:	f000 f848 	bl	8017d1c <xTaskIncrementTick>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d002      	beq.n	8017c98 <xTaskResumeAll+0x100>
							{
								xYieldPending = pdTRUE;
 8017c92:	4b17      	ldr	r3, [pc, #92]	; (8017cf0 <xTaskResumeAll+0x158>)
 8017c94:	2201      	movs	r2, #1
 8017c96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	3b01      	subs	r3, #1
 8017c9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d1f1      	bne.n	8017c88 <xTaskResumeAll+0xf0>

						xPendedTicks = 0;
 8017ca4:	4b13      	ldr	r3, [pc, #76]	; (8017cf4 <xTaskResumeAll+0x15c>)
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017caa:	4b11      	ldr	r3, [pc, #68]	; (8017cf0 <xTaskResumeAll+0x158>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d009      	beq.n	8017cc6 <xTaskResumeAll+0x12e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017cb6:	4b10      	ldr	r3, [pc, #64]	; (8017cf8 <xTaskResumeAll+0x160>)
 8017cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cbc:	601a      	str	r2, [r3, #0]
 8017cbe:	f3bf 8f4f 	dsb	sy
 8017cc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017cc6:	f001 fb8d 	bl	80193e4 <vPortExitCritical>

	return xAlreadyYielded;
 8017cca:	68bb      	ldr	r3, [r7, #8]
}
 8017ccc:	4618      	mov	r0, r3
 8017cce:	3710      	adds	r7, #16
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}
 8017cd4:	20001074 	.word	0x20001074
 8017cd8:	2000104c 	.word	0x2000104c
 8017cdc:	2000100c 	.word	0x2000100c
 8017ce0:	20008358 	.word	0x20008358
 8017ce4:	20001054 	.word	0x20001054
 8017ce8:	20000b7c 	.word	0x20000b7c
 8017cec:	20000b78 	.word	0x20000b78
 8017cf0:	20001060 	.word	0x20001060
 8017cf4:	2000105c 	.word	0x2000105c
 8017cf8:	e000ed04 	.word	0xe000ed04

08017cfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b083      	sub	sp, #12
 8017d00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017d02:	4b05      	ldr	r3, [pc, #20]	; (8017d18 <xTaskGetTickCount+0x1c>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017d08:	687b      	ldr	r3, [r7, #4]
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	370c      	adds	r7, #12
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d14:	4770      	bx	lr
 8017d16:	bf00      	nop
 8017d18:	20001050 	.word	0x20001050

08017d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b086      	sub	sp, #24
 8017d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017d22:	2300      	movs	r3, #0
 8017d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8017d26:	4b66      	ldr	r3, [pc, #408]	; (8017ec0 <xTaskIncrementTick+0x1a4>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b01      	cmp	r3, #1
 8017d2c:	d003      	beq.n	8017d36 <xTaskIncrementTick+0x1a>
 8017d2e:	4b65      	ldr	r3, [pc, #404]	; (8017ec4 <xTaskIncrementTick+0x1a8>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d107      	bne.n	8017d46 <xTaskIncrementTick+0x2a>
 8017d36:	4b64      	ldr	r3, [pc, #400]	; (8017ec8 <xTaskIncrementTick+0x1ac>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	4a62      	ldr	r2, [pc, #392]	; (8017ec8 <xTaskIncrementTick+0x1ac>)
 8017d3e:	6013      	str	r3, [r2, #0]
 8017d40:	2000      	movs	r0, #0
 8017d42:	f7f7 fb23 	bl	800f38c <prvTracePortGetTimeStamp>
 8017d46:	4b5e      	ldr	r3, [pc, #376]	; (8017ec0 <xTaskIncrementTick+0x1a4>)
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d106      	bne.n	8017d5c <xTaskIncrementTick+0x40>
 8017d4e:	4b5f      	ldr	r3, [pc, #380]	; (8017ecc <xTaskIncrementTick+0x1b0>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	3301      	adds	r3, #1
 8017d54:	4619      	mov	r1, r3
 8017d56:	2003      	movs	r0, #3
 8017d58:	f7f6 fab8 	bl	800e2cc <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017d5c:	4b58      	ldr	r3, [pc, #352]	; (8017ec0 <xTaskIncrementTick+0x1a4>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f040 80a2 	bne.w	8017eaa <xTaskIncrementTick+0x18e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017d66:	4b59      	ldr	r3, [pc, #356]	; (8017ecc <xTaskIncrementTick+0x1b0>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	3301      	adds	r3, #1
 8017d6c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017d6e:	4a57      	ldr	r2, [pc, #348]	; (8017ecc <xTaskIncrementTick+0x1b0>)
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017d74:	693b      	ldr	r3, [r7, #16]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d120      	bne.n	8017dbc <xTaskIncrementTick+0xa0>
		{
			taskSWITCH_DELAYED_LISTS();
 8017d7a:	4b55      	ldr	r3, [pc, #340]	; (8017ed0 <xTaskIncrementTick+0x1b4>)
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d00a      	beq.n	8017d9a <xTaskIncrementTick+0x7e>
	__asm volatile
 8017d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d88:	f383 8811 	msr	BASEPRI, r3
 8017d8c:	f3bf 8f6f 	isb	sy
 8017d90:	f3bf 8f4f 	dsb	sy
 8017d94:	603b      	str	r3, [r7, #0]
}
 8017d96:	bf00      	nop
 8017d98:	e7fe      	b.n	8017d98 <xTaskIncrementTick+0x7c>
 8017d9a:	4b4d      	ldr	r3, [pc, #308]	; (8017ed0 <xTaskIncrementTick+0x1b4>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	60fb      	str	r3, [r7, #12]
 8017da0:	4b4c      	ldr	r3, [pc, #304]	; (8017ed4 <xTaskIncrementTick+0x1b8>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	4a4a      	ldr	r2, [pc, #296]	; (8017ed0 <xTaskIncrementTick+0x1b4>)
 8017da6:	6013      	str	r3, [r2, #0]
 8017da8:	4a4a      	ldr	r2, [pc, #296]	; (8017ed4 <xTaskIncrementTick+0x1b8>)
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	6013      	str	r3, [r2, #0]
 8017dae:	4b4a      	ldr	r3, [pc, #296]	; (8017ed8 <xTaskIncrementTick+0x1bc>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	3301      	adds	r3, #1
 8017db4:	4a48      	ldr	r2, [pc, #288]	; (8017ed8 <xTaskIncrementTick+0x1bc>)
 8017db6:	6013      	str	r3, [r2, #0]
 8017db8:	f000 fb82 	bl	80184c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017dbc:	4b47      	ldr	r3, [pc, #284]	; (8017edc <xTaskIncrementTick+0x1c0>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	693a      	ldr	r2, [r7, #16]
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d35c      	bcc.n	8017e80 <xTaskIncrementTick+0x164>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017dc6:	4b42      	ldr	r3, [pc, #264]	; (8017ed0 <xTaskIncrementTick+0x1b4>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d104      	bne.n	8017dda <xTaskIncrementTick+0xbe>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017dd0:	4b42      	ldr	r3, [pc, #264]	; (8017edc <xTaskIncrementTick+0x1c0>)
 8017dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017dd6:	601a      	str	r2, [r3, #0]
					break;
 8017dd8:	e052      	b.n	8017e80 <xTaskIncrementTick+0x164>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dda:	4b3d      	ldr	r3, [pc, #244]	; (8017ed0 <xTaskIncrementTick+0x1b4>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	685b      	ldr	r3, [r3, #4]
 8017de8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017dea:	693a      	ldr	r2, [r7, #16]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d203      	bcs.n	8017dfa <xTaskIncrementTick+0xde>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017df2:	4a3a      	ldr	r2, [pc, #232]	; (8017edc <xTaskIncrementTick+0x1c0>)
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017df8:	e042      	b.n	8017e80 <xTaskIncrementTick+0x164>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	3304      	adds	r3, #4
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f7fd fd6e 	bl	80158e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d004      	beq.n	8017e16 <xTaskIncrementTick+0xfa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	3318      	adds	r3, #24
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7fd fd65 	bl	80158e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017e16:	68b8      	ldr	r0, [r7, #8]
 8017e18:	f7f5 ff2c 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	461a      	mov	r2, r3
 8017e20:	4b2f      	ldr	r3, [pc, #188]	; (8017ee0 <xTaskIncrementTick+0x1c4>)
 8017e22:	881b      	ldrh	r3, [r3, #0]
 8017e24:	4013      	ands	r3, r2
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d007      	beq.n	8017e3c <xTaskIncrementTick+0x120>
 8017e2c:	68b8      	ldr	r0, [r7, #8]
 8017e2e:	f7f5 ff14 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017e32:	4603      	mov	r3, r0
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7f6 f808 	bl	800de4c <prvTraceStoreTaskReady>
 8017e3c:	68bb      	ldr	r3, [r7, #8]
 8017e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e40:	4b28      	ldr	r3, [pc, #160]	; (8017ee4 <xTaskIncrementTick+0x1c8>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d903      	bls.n	8017e50 <xTaskIncrementTick+0x134>
 8017e48:	68bb      	ldr	r3, [r7, #8]
 8017e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e4c:	4a25      	ldr	r2, [pc, #148]	; (8017ee4 <xTaskIncrementTick+0x1c8>)
 8017e4e:	6013      	str	r3, [r2, #0]
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e54:	4613      	mov	r3, r2
 8017e56:	009b      	lsls	r3, r3, #2
 8017e58:	4413      	add	r3, r2
 8017e5a:	009b      	lsls	r3, r3, #2
 8017e5c:	4a22      	ldr	r2, [pc, #136]	; (8017ee8 <xTaskIncrementTick+0x1cc>)
 8017e5e:	441a      	add	r2, r3
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	3304      	adds	r3, #4
 8017e64:	4619      	mov	r1, r3
 8017e66:	4610      	mov	r0, r2
 8017e68:	f7fd fcdd 	bl	8015826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e70:	4b1e      	ldr	r3, [pc, #120]	; (8017eec <xTaskIncrementTick+0x1d0>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d3a5      	bcc.n	8017dc6 <xTaskIncrementTick+0xaa>
						{
							xSwitchRequired = pdTRUE;
 8017e7a:	2301      	movs	r3, #1
 8017e7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017e7e:	e7a2      	b.n	8017dc6 <xTaskIncrementTick+0xaa>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017e80:	4b1a      	ldr	r3, [pc, #104]	; (8017eec <xTaskIncrementTick+0x1d0>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e86:	4918      	ldr	r1, [pc, #96]	; (8017ee8 <xTaskIncrementTick+0x1cc>)
 8017e88:	4613      	mov	r3, r2
 8017e8a:	009b      	lsls	r3, r3, #2
 8017e8c:	4413      	add	r3, r2
 8017e8e:	009b      	lsls	r3, r3, #2
 8017e90:	440b      	add	r3, r1
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	2b01      	cmp	r3, #1
 8017e96:	d901      	bls.n	8017e9c <xTaskIncrementTick+0x180>
			{
				xSwitchRequired = pdTRUE;
 8017e98:	2301      	movs	r3, #1
 8017e9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017e9c:	4b14      	ldr	r3, [pc, #80]	; (8017ef0 <xTaskIncrementTick+0x1d4>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d007      	beq.n	8017eb4 <xTaskIncrementTick+0x198>
			{
				xSwitchRequired = pdTRUE;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	617b      	str	r3, [r7, #20]
 8017ea8:	e004      	b.n	8017eb4 <xTaskIncrementTick+0x198>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017eaa:	4b06      	ldr	r3, [pc, #24]	; (8017ec4 <xTaskIncrementTick+0x1a8>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	3301      	adds	r3, #1
 8017eb0:	4a04      	ldr	r2, [pc, #16]	; (8017ec4 <xTaskIncrementTick+0x1a8>)
 8017eb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017eb4:	697b      	ldr	r3, [r7, #20]
}
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	3718      	adds	r7, #24
 8017eba:	46bd      	mov	sp, r7
 8017ebc:	bd80      	pop	{r7, pc}
 8017ebe:	bf00      	nop
 8017ec0:	20001074 	.word	0x20001074
 8017ec4:	2000105c 	.word	0x2000105c
 8017ec8:	20000488 	.word	0x20000488
 8017ecc:	20001050 	.word	0x20001050
 8017ed0:	20001004 	.word	0x20001004
 8017ed4:	20001008 	.word	0x20001008
 8017ed8:	20001064 	.word	0x20001064
 8017edc:	2000106c 	.word	0x2000106c
 8017ee0:	20008358 	.word	0x20008358
 8017ee4:	20001054 	.word	0x20001054
 8017ee8:	20000b7c 	.word	0x20000b7c
 8017eec:	20000b78 	.word	0x20000b78
 8017ef0:	20001060 	.word	0x20001060

08017ef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b084      	sub	sp, #16
 8017ef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017efa:	4b36      	ldr	r3, [pc, #216]	; (8017fd4 <vTaskSwitchContext+0xe0>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d003      	beq.n	8017f0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017f02:	4b35      	ldr	r3, [pc, #212]	; (8017fd8 <vTaskSwitchContext+0xe4>)
 8017f04:	2201      	movs	r2, #1
 8017f06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017f08:	e060      	b.n	8017fcc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8017f0a:	4b33      	ldr	r3, [pc, #204]	; (8017fd8 <vTaskSwitchContext+0xe4>)
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f10:	4b32      	ldr	r3, [pc, #200]	; (8017fdc <vTaskSwitchContext+0xe8>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	60fb      	str	r3, [r7, #12]
 8017f16:	e010      	b.n	8017f3a <vTaskSwitchContext+0x46>
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d10a      	bne.n	8017f34 <vTaskSwitchContext+0x40>
	__asm volatile
 8017f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f22:	f383 8811 	msr	BASEPRI, r3
 8017f26:	f3bf 8f6f 	isb	sy
 8017f2a:	f3bf 8f4f 	dsb	sy
 8017f2e:	607b      	str	r3, [r7, #4]
}
 8017f30:	bf00      	nop
 8017f32:	e7fe      	b.n	8017f32 <vTaskSwitchContext+0x3e>
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	3b01      	subs	r3, #1
 8017f38:	60fb      	str	r3, [r7, #12]
 8017f3a:	4929      	ldr	r1, [pc, #164]	; (8017fe0 <vTaskSwitchContext+0xec>)
 8017f3c:	68fa      	ldr	r2, [r7, #12]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	4413      	add	r3, r2
 8017f44:	009b      	lsls	r3, r3, #2
 8017f46:	440b      	add	r3, r1
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d0e4      	beq.n	8017f18 <vTaskSwitchContext+0x24>
 8017f4e:	68fa      	ldr	r2, [r7, #12]
 8017f50:	4613      	mov	r3, r2
 8017f52:	009b      	lsls	r3, r3, #2
 8017f54:	4413      	add	r3, r2
 8017f56:	009b      	lsls	r3, r3, #2
 8017f58:	4a21      	ldr	r2, [pc, #132]	; (8017fe0 <vTaskSwitchContext+0xec>)
 8017f5a:	4413      	add	r3, r2
 8017f5c:	60bb      	str	r3, [r7, #8]
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	685b      	ldr	r3, [r3, #4]
 8017f62:	685a      	ldr	r2, [r3, #4]
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	605a      	str	r2, [r3, #4]
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	685a      	ldr	r2, [r3, #4]
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	3308      	adds	r3, #8
 8017f70:	429a      	cmp	r2, r3
 8017f72:	d104      	bne.n	8017f7e <vTaskSwitchContext+0x8a>
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	685a      	ldr	r2, [r3, #4]
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	605a      	str	r2, [r3, #4]
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	685b      	ldr	r3, [r3, #4]
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	4a17      	ldr	r2, [pc, #92]	; (8017fe4 <vTaskSwitchContext+0xf0>)
 8017f86:	6013      	str	r3, [r2, #0]
 8017f88:	4a14      	ldr	r2, [pc, #80]	; (8017fdc <vTaskSwitchContext+0xe8>)
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8017f8e:	4b16      	ldr	r3, [pc, #88]	; (8017fe8 <vTaskSwitchContext+0xf4>)
 8017f90:	2201      	movs	r2, #1
 8017f92:	601a      	str	r2, [r3, #0]
 8017f94:	f7f5 feef 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7f5 fe6a 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	461a      	mov	r2, r3
 8017fa4:	4b11      	ldr	r3, [pc, #68]	; (8017fec <vTaskSwitchContext+0xf8>)
 8017fa6:	881b      	ldrh	r3, [r3, #0]
 8017fa8:	4013      	ands	r3, r2
 8017faa:	b29b      	uxth	r3, r3
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d00a      	beq.n	8017fc6 <vTaskSwitchContext+0xd2>
 8017fb0:	f7f5 fee1 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7f5 fe4f 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	b2db      	uxtb	r3, r3
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f6 f9e9 	bl	800e398 <prvTraceStoreTaskswitch>
 8017fc6:	4b08      	ldr	r3, [pc, #32]	; (8017fe8 <vTaskSwitchContext+0xf4>)
 8017fc8:	2202      	movs	r2, #2
 8017fca:	601a      	str	r2, [r3, #0]
}
 8017fcc:	bf00      	nop
 8017fce:	3710      	adds	r7, #16
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}
 8017fd4:	20001074 	.word	0x20001074
 8017fd8:	20001060 	.word	0x20001060
 8017fdc:	20001054 	.word	0x20001054
 8017fe0:	20000b7c 	.word	0x20000b7c
 8017fe4:	20000b78 	.word	0x20000b78
 8017fe8:	20000494 	.word	0x20000494
 8017fec:	20008358 	.word	0x20008358

08017ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b084      	sub	sp, #16
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
 8017ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d10a      	bne.n	8018016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018004:	f383 8811 	msr	BASEPRI, r3
 8018008:	f3bf 8f6f 	isb	sy
 801800c:	f3bf 8f4f 	dsb	sy
 8018010:	60fb      	str	r3, [r7, #12]
}
 8018012:	bf00      	nop
 8018014:	e7fe      	b.n	8018014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018016:	4b07      	ldr	r3, [pc, #28]	; (8018034 <vTaskPlaceOnEventList+0x44>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	3318      	adds	r3, #24
 801801c:	4619      	mov	r1, r3
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	f7fd fc25 	bl	801586e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018024:	2101      	movs	r1, #1
 8018026:	6838      	ldr	r0, [r7, #0]
 8018028:	f000 fcce 	bl	80189c8 <prvAddCurrentTaskToDelayedList>
}
 801802c:	bf00      	nop
 801802e:	3710      	adds	r7, #16
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}
 8018034:	20000b78 	.word	0x20000b78

08018038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018038:	b580      	push	{r7, lr}
 801803a:	b086      	sub	sp, #24
 801803c:	af00      	add	r7, sp, #0
 801803e:	60f8      	str	r0, [r7, #12]
 8018040:	60b9      	str	r1, [r7, #8]
 8018042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d10a      	bne.n	8018060 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801804e:	f383 8811 	msr	BASEPRI, r3
 8018052:	f3bf 8f6f 	isb	sy
 8018056:	f3bf 8f4f 	dsb	sy
 801805a:	617b      	str	r3, [r7, #20]
}
 801805c:	bf00      	nop
 801805e:	e7fe      	b.n	801805e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018060:	4b26      	ldr	r3, [pc, #152]	; (80180fc <vTaskPlaceOnEventListRestricted+0xc4>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	3318      	adds	r3, #24
 8018066:	4619      	mov	r1, r3
 8018068:	68f8      	ldr	r0, [r7, #12]
 801806a:	f7fd fbdc 	bl	8015826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d002      	beq.n	801807a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018078:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 801807a:	4b20      	ldr	r3, [pc, #128]	; (80180fc <vTaskPlaceOnEventListRestricted+0xc4>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	4618      	mov	r0, r3
 8018080:	f7f5 fdf8 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8018084:	4603      	mov	r3, r0
 8018086:	461a      	mov	r2, r3
 8018088:	4b1d      	ldr	r3, [pc, #116]	; (8018100 <vTaskPlaceOnEventListRestricted+0xc8>)
 801808a:	881b      	ldrh	r3, [r3, #0]
 801808c:	4013      	ands	r3, r2
 801808e:	b29b      	uxth	r3, r3
 8018090:	2b00      	cmp	r3, #0
 8018092:	d011      	beq.n	80180b8 <vTaskPlaceOnEventListRestricted+0x80>
 8018094:	4b1b      	ldr	r3, [pc, #108]	; (8018104 <vTaskPlaceOnEventListRestricted+0xcc>)
 8018096:	681a      	ldr	r2, [r3, #0]
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	4413      	add	r3, r2
 801809c:	4619      	mov	r1, r3
 801809e:	2088      	movs	r0, #136	; 0x88
 80180a0:	f7f6 f914 	bl	800e2cc <prvTraceStoreKernelCallWithNumericParamOnly>
 80180a4:	4b15      	ldr	r3, [pc, #84]	; (80180fc <vTaskPlaceOnEventListRestricted+0xc4>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7f5 fdd6 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80180ae:	4603      	mov	r3, r0
 80180b0:	b2db      	uxtb	r3, r3
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7f6 fb8c 	bl	800e7d0 <prvTraceSetTaskInstanceFinished>
 80180b8:	f7f5 fe5d 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80180bc:	4603      	mov	r3, r0
 80180be:	4618      	mov	r0, r3
 80180c0:	f7f5 fdd8 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80180c4:	4603      	mov	r3, r0
 80180c6:	461a      	mov	r2, r3
 80180c8:	4b0d      	ldr	r3, [pc, #52]	; (8018100 <vTaskPlaceOnEventListRestricted+0xc8>)
 80180ca:	881b      	ldrh	r3, [r3, #0]
 80180cc:	4013      	ands	r3, r2
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d00a      	beq.n	80180ea <vTaskPlaceOnEventListRestricted+0xb2>
 80180d4:	f7f5 fe4f 	bl	800dd76 <prvTraceGetCurrentTaskHandle>
 80180d8:	4603      	mov	r3, r0
 80180da:	4618      	mov	r0, r3
 80180dc:	f7f5 fdbd 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80180e0:	4603      	mov	r3, r0
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7f6 fb73 	bl	800e7d0 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80180ea:	6879      	ldr	r1, [r7, #4]
 80180ec:	68b8      	ldr	r0, [r7, #8]
 80180ee:	f000 fc6b 	bl	80189c8 <prvAddCurrentTaskToDelayedList>
	}
 80180f2:	bf00      	nop
 80180f4:	3718      	adds	r7, #24
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	20000b78 	.word	0x20000b78
 8018100:	20008358 	.word	0x20008358
 8018104:	20001050 	.word	0x20001050

08018108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b086      	sub	sp, #24
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	68db      	ldr	r3, [r3, #12]
 8018114:	68db      	ldr	r3, [r3, #12]
 8018116:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d10a      	bne.n	8018134 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018122:	f383 8811 	msr	BASEPRI, r3
 8018126:	f3bf 8f6f 	isb	sy
 801812a:	f3bf 8f4f 	dsb	sy
 801812e:	60fb      	str	r3, [r7, #12]
}
 8018130:	bf00      	nop
 8018132:	e7fe      	b.n	8018132 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	3318      	adds	r3, #24
 8018138:	4618      	mov	r0, r3
 801813a:	f7fd fbd1 	bl	80158e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801813e:	4b27      	ldr	r3, [pc, #156]	; (80181dc <xTaskRemoveFromEventList+0xd4>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d130      	bne.n	80181a8 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	3304      	adds	r3, #4
 801814a:	4618      	mov	r0, r3
 801814c:	f7fd fbc8 	bl	80158e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018150:	6938      	ldr	r0, [r7, #16]
 8018152:	f7f5 fd8f 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8018156:	4603      	mov	r3, r0
 8018158:	461a      	mov	r2, r3
 801815a:	4b21      	ldr	r3, [pc, #132]	; (80181e0 <xTaskRemoveFromEventList+0xd8>)
 801815c:	881b      	ldrh	r3, [r3, #0]
 801815e:	4013      	ands	r3, r2
 8018160:	b29b      	uxth	r3, r3
 8018162:	2b00      	cmp	r3, #0
 8018164:	d007      	beq.n	8018176 <xTaskRemoveFromEventList+0x6e>
 8018166:	6938      	ldr	r0, [r7, #16]
 8018168:	f7f5 fd77 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 801816c:	4603      	mov	r3, r0
 801816e:	b2db      	uxtb	r3, r3
 8018170:	4618      	mov	r0, r3
 8018172:	f7f5 fe6b 	bl	800de4c <prvTraceStoreTaskReady>
 8018176:	693b      	ldr	r3, [r7, #16]
 8018178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801817a:	4b1a      	ldr	r3, [pc, #104]	; (80181e4 <xTaskRemoveFromEventList+0xdc>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	429a      	cmp	r2, r3
 8018180:	d903      	bls.n	801818a <xTaskRemoveFromEventList+0x82>
 8018182:	693b      	ldr	r3, [r7, #16]
 8018184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018186:	4a17      	ldr	r2, [pc, #92]	; (80181e4 <xTaskRemoveFromEventList+0xdc>)
 8018188:	6013      	str	r3, [r2, #0]
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801818e:	4613      	mov	r3, r2
 8018190:	009b      	lsls	r3, r3, #2
 8018192:	4413      	add	r3, r2
 8018194:	009b      	lsls	r3, r3, #2
 8018196:	4a14      	ldr	r2, [pc, #80]	; (80181e8 <xTaskRemoveFromEventList+0xe0>)
 8018198:	441a      	add	r2, r3
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	3304      	adds	r3, #4
 801819e:	4619      	mov	r1, r3
 80181a0:	4610      	mov	r0, r2
 80181a2:	f7fd fb40 	bl	8015826 <vListInsertEnd>
 80181a6:	e005      	b.n	80181b4 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80181a8:	693b      	ldr	r3, [r7, #16]
 80181aa:	3318      	adds	r3, #24
 80181ac:	4619      	mov	r1, r3
 80181ae:	480f      	ldr	r0, [pc, #60]	; (80181ec <xTaskRemoveFromEventList+0xe4>)
 80181b0:	f7fd fb39 	bl	8015826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181b8:	4b0d      	ldr	r3, [pc, #52]	; (80181f0 <xTaskRemoveFromEventList+0xe8>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181be:	429a      	cmp	r2, r3
 80181c0:	d905      	bls.n	80181ce <xTaskRemoveFromEventList+0xc6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80181c2:	2301      	movs	r3, #1
 80181c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80181c6:	4b0b      	ldr	r3, [pc, #44]	; (80181f4 <xTaskRemoveFromEventList+0xec>)
 80181c8:	2201      	movs	r2, #1
 80181ca:	601a      	str	r2, [r3, #0]
 80181cc:	e001      	b.n	80181d2 <xTaskRemoveFromEventList+0xca>
	}
	else
	{
		xReturn = pdFALSE;
 80181ce:	2300      	movs	r3, #0
 80181d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80181d2:	697b      	ldr	r3, [r7, #20]
}
 80181d4:	4618      	mov	r0, r3
 80181d6:	3718      	adds	r7, #24
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}
 80181dc:	20001074 	.word	0x20001074
 80181e0:	20008358 	.word	0x20008358
 80181e4:	20001054 	.word	0x20001054
 80181e8:	20000b7c 	.word	0x20000b7c
 80181ec:	2000100c 	.word	0x2000100c
 80181f0:	20000b78 	.word	0x20000b78
 80181f4:	20001060 	.word	0x20001060

080181f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80181f8:	b480      	push	{r7}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018200:	4b06      	ldr	r3, [pc, #24]	; (801821c <vTaskInternalSetTimeOutState+0x24>)
 8018202:	681a      	ldr	r2, [r3, #0]
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018208:	4b05      	ldr	r3, [pc, #20]	; (8018220 <vTaskInternalSetTimeOutState+0x28>)
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	605a      	str	r2, [r3, #4]
}
 8018210:	bf00      	nop
 8018212:	370c      	adds	r7, #12
 8018214:	46bd      	mov	sp, r7
 8018216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821a:	4770      	bx	lr
 801821c:	20001064 	.word	0x20001064
 8018220:	20001050 	.word	0x20001050

08018224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b088      	sub	sp, #32
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d10a      	bne.n	801824a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018238:	f383 8811 	msr	BASEPRI, r3
 801823c:	f3bf 8f6f 	isb	sy
 8018240:	f3bf 8f4f 	dsb	sy
 8018244:	613b      	str	r3, [r7, #16]
}
 8018246:	bf00      	nop
 8018248:	e7fe      	b.n	8018248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d10a      	bne.n	8018266 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018254:	f383 8811 	msr	BASEPRI, r3
 8018258:	f3bf 8f6f 	isb	sy
 801825c:	f3bf 8f4f 	dsb	sy
 8018260:	60fb      	str	r3, [r7, #12]
}
 8018262:	bf00      	nop
 8018264:	e7fe      	b.n	8018264 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018266:	f001 f88d 	bl	8019384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801826a:	4b1d      	ldr	r3, [pc, #116]	; (80182e0 <xTaskCheckForTimeOut+0xbc>)
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	685b      	ldr	r3, [r3, #4]
 8018274:	69ba      	ldr	r2, [r7, #24]
 8018276:	1ad3      	subs	r3, r2, r3
 8018278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018282:	d102      	bne.n	801828a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018284:	2300      	movs	r3, #0
 8018286:	61fb      	str	r3, [r7, #28]
 8018288:	e023      	b.n	80182d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	4b15      	ldr	r3, [pc, #84]	; (80182e4 <xTaskCheckForTimeOut+0xc0>)
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	429a      	cmp	r2, r3
 8018294:	d007      	beq.n	80182a6 <xTaskCheckForTimeOut+0x82>
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	69ba      	ldr	r2, [r7, #24]
 801829c:	429a      	cmp	r2, r3
 801829e:	d302      	bcc.n	80182a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80182a0:	2301      	movs	r3, #1
 80182a2:	61fb      	str	r3, [r7, #28]
 80182a4:	e015      	b.n	80182d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	697a      	ldr	r2, [r7, #20]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d20b      	bcs.n	80182c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	681a      	ldr	r2, [r3, #0]
 80182b4:	697b      	ldr	r3, [r7, #20]
 80182b6:	1ad2      	subs	r2, r2, r3
 80182b8:	683b      	ldr	r3, [r7, #0]
 80182ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f7ff ff9b 	bl	80181f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80182c2:	2300      	movs	r3, #0
 80182c4:	61fb      	str	r3, [r7, #28]
 80182c6:	e004      	b.n	80182d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	2200      	movs	r2, #0
 80182cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80182ce:	2301      	movs	r3, #1
 80182d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80182d2:	f001 f887 	bl	80193e4 <vPortExitCritical>

	return xReturn;
 80182d6:	69fb      	ldr	r3, [r7, #28]
}
 80182d8:	4618      	mov	r0, r3
 80182da:	3720      	adds	r7, #32
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	20001050 	.word	0x20001050
 80182e4:	20001064 	.word	0x20001064

080182e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80182e8:	b480      	push	{r7}
 80182ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80182ec:	4b03      	ldr	r3, [pc, #12]	; (80182fc <vTaskMissedYield+0x14>)
 80182ee:	2201      	movs	r2, #1
 80182f0:	601a      	str	r2, [r3, #0]
}
 80182f2:	bf00      	nop
 80182f4:	46bd      	mov	sp, r7
 80182f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fa:	4770      	bx	lr
 80182fc:	20001060 	.word	0x20001060

08018300 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8018300:	b480      	push	{r7}
 8018302:	b085      	sub	sp, #20
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d005      	beq.n	801831a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018316:	60fb      	str	r3, [r7, #12]
 8018318:	e001      	b.n	801831e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 801831a:	2300      	movs	r3, #0
 801831c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 801831e:	68fb      	ldr	r3, [r7, #12]
	}
 8018320:	4618      	mov	r0, r3
 8018322:	3714      	adds	r7, #20
 8018324:	46bd      	mov	sp, r7
 8018326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832a:	4770      	bx	lr

0801832c <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 801832c:	b480      	push	{r7}
 801832e:	b085      	sub	sp, #20
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
 8018334:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d004      	beq.n	8018346 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	683a      	ldr	r2, [r7, #0]
 8018344:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8018346:	bf00      	nop
 8018348:	3714      	adds	r7, #20
 801834a:	46bd      	mov	sp, r7
 801834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018350:	4770      	bx	lr
	...

08018354 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b082      	sub	sp, #8
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801835c:	f000 f852 	bl	8018404 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018360:	4b06      	ldr	r3, [pc, #24]	; (801837c <prvIdleTask+0x28>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2b01      	cmp	r3, #1
 8018366:	d9f9      	bls.n	801835c <prvIdleTask+0x8>
			{
				taskYIELD();
 8018368:	4b05      	ldr	r3, [pc, #20]	; (8018380 <prvIdleTask+0x2c>)
 801836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801836e:	601a      	str	r2, [r3, #0]
 8018370:	f3bf 8f4f 	dsb	sy
 8018374:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018378:	e7f0      	b.n	801835c <prvIdleTask+0x8>
 801837a:	bf00      	nop
 801837c:	20000b7c 	.word	0x20000b7c
 8018380:	e000ed04 	.word	0xe000ed04

08018384 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b082      	sub	sp, #8
 8018388:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801838a:	2300      	movs	r3, #0
 801838c:	607b      	str	r3, [r7, #4]
 801838e:	e00c      	b.n	80183aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018390:	687a      	ldr	r2, [r7, #4]
 8018392:	4613      	mov	r3, r2
 8018394:	009b      	lsls	r3, r3, #2
 8018396:	4413      	add	r3, r2
 8018398:	009b      	lsls	r3, r3, #2
 801839a:	4a12      	ldr	r2, [pc, #72]	; (80183e4 <prvInitialiseTaskLists+0x60>)
 801839c:	4413      	add	r3, r2
 801839e:	4618      	mov	r0, r3
 80183a0:	f7fd fa14 	bl	80157cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	3301      	adds	r3, #1
 80183a8:	607b      	str	r3, [r7, #4]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	2b37      	cmp	r3, #55	; 0x37
 80183ae:	d9ef      	bls.n	8018390 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80183b0:	480d      	ldr	r0, [pc, #52]	; (80183e8 <prvInitialiseTaskLists+0x64>)
 80183b2:	f7fd fa0b 	bl	80157cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80183b6:	480d      	ldr	r0, [pc, #52]	; (80183ec <prvInitialiseTaskLists+0x68>)
 80183b8:	f7fd fa08 	bl	80157cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80183bc:	480c      	ldr	r0, [pc, #48]	; (80183f0 <prvInitialiseTaskLists+0x6c>)
 80183be:	f7fd fa05 	bl	80157cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80183c2:	480c      	ldr	r0, [pc, #48]	; (80183f4 <prvInitialiseTaskLists+0x70>)
 80183c4:	f7fd fa02 	bl	80157cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80183c8:	480b      	ldr	r0, [pc, #44]	; (80183f8 <prvInitialiseTaskLists+0x74>)
 80183ca:	f7fd f9ff 	bl	80157cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80183ce:	4b0b      	ldr	r3, [pc, #44]	; (80183fc <prvInitialiseTaskLists+0x78>)
 80183d0:	4a05      	ldr	r2, [pc, #20]	; (80183e8 <prvInitialiseTaskLists+0x64>)
 80183d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80183d4:	4b0a      	ldr	r3, [pc, #40]	; (8018400 <prvInitialiseTaskLists+0x7c>)
 80183d6:	4a05      	ldr	r2, [pc, #20]	; (80183ec <prvInitialiseTaskLists+0x68>)
 80183d8:	601a      	str	r2, [r3, #0]
}
 80183da:	bf00      	nop
 80183dc:	3708      	adds	r7, #8
 80183de:	46bd      	mov	sp, r7
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	bf00      	nop
 80183e4:	20000b7c 	.word	0x20000b7c
 80183e8:	20000fdc 	.word	0x20000fdc
 80183ec:	20000ff0 	.word	0x20000ff0
 80183f0:	2000100c 	.word	0x2000100c
 80183f4:	20001020 	.word	0x20001020
 80183f8:	20001038 	.word	0x20001038
 80183fc:	20001004 	.word	0x20001004
 8018400:	20001008 	.word	0x20001008

08018404 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801840a:	e019      	b.n	8018440 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801840c:	f000 ffba 	bl	8019384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018410:	4b10      	ldr	r3, [pc, #64]	; (8018454 <prvCheckTasksWaitingTermination+0x50>)
 8018412:	68db      	ldr	r3, [r3, #12]
 8018414:	68db      	ldr	r3, [r3, #12]
 8018416:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	3304      	adds	r3, #4
 801841c:	4618      	mov	r0, r3
 801841e:	f7fd fa5f 	bl	80158e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018422:	4b0d      	ldr	r3, [pc, #52]	; (8018458 <prvCheckTasksWaitingTermination+0x54>)
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	3b01      	subs	r3, #1
 8018428:	4a0b      	ldr	r2, [pc, #44]	; (8018458 <prvCheckTasksWaitingTermination+0x54>)
 801842a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801842c:	4b0b      	ldr	r3, [pc, #44]	; (801845c <prvCheckTasksWaitingTermination+0x58>)
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	3b01      	subs	r3, #1
 8018432:	4a0a      	ldr	r2, [pc, #40]	; (801845c <prvCheckTasksWaitingTermination+0x58>)
 8018434:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018436:	f000 ffd5 	bl	80193e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	f000 f810 	bl	8018460 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018440:	4b06      	ldr	r3, [pc, #24]	; (801845c <prvCheckTasksWaitingTermination+0x58>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d1e1      	bne.n	801840c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018448:	bf00      	nop
 801844a:	bf00      	nop
 801844c:	3708      	adds	r7, #8
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}
 8018452:	bf00      	nop
 8018454:	20001020 	.word	0x20001020
 8018458:	2000104c 	.word	0x2000104c
 801845c:	20001034 	.word	0x20001034

08018460 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018460:	b580      	push	{r7, lr}
 8018462:	b084      	sub	sp, #16
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801846e:	2b00      	cmp	r3, #0
 8018470:	d108      	bne.n	8018484 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018476:	4618      	mov	r0, r3
 8018478:	f001 f982 	bl	8019780 <vPortFree>
				vPortFree( pxTCB );
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f001 f97f 	bl	8019780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018482:	e018      	b.n	80184b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801848a:	2b01      	cmp	r3, #1
 801848c:	d103      	bne.n	8018496 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801848e:	6878      	ldr	r0, [r7, #4]
 8018490:	f001 f976 	bl	8019780 <vPortFree>
	}
 8018494:	e00f      	b.n	80184b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801849c:	2b02      	cmp	r3, #2
 801849e:	d00a      	beq.n	80184b6 <prvDeleteTCB+0x56>
	__asm volatile
 80184a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a4:	f383 8811 	msr	BASEPRI, r3
 80184a8:	f3bf 8f6f 	isb	sy
 80184ac:	f3bf 8f4f 	dsb	sy
 80184b0:	60fb      	str	r3, [r7, #12]
}
 80184b2:	bf00      	nop
 80184b4:	e7fe      	b.n	80184b4 <prvDeleteTCB+0x54>
	}
 80184b6:	bf00      	nop
 80184b8:	3710      	adds	r7, #16
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
	...

080184c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80184c0:	b480      	push	{r7}
 80184c2:	b083      	sub	sp, #12
 80184c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80184c6:	4b0c      	ldr	r3, [pc, #48]	; (80184f8 <prvResetNextTaskUnblockTime+0x38>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d104      	bne.n	80184da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80184d0:	4b0a      	ldr	r3, [pc, #40]	; (80184fc <prvResetNextTaskUnblockTime+0x3c>)
 80184d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80184d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80184d8:	e008      	b.n	80184ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184da:	4b07      	ldr	r3, [pc, #28]	; (80184f8 <prvResetNextTaskUnblockTime+0x38>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	68db      	ldr	r3, [r3, #12]
 80184e0:	68db      	ldr	r3, [r3, #12]
 80184e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	4a04      	ldr	r2, [pc, #16]	; (80184fc <prvResetNextTaskUnblockTime+0x3c>)
 80184ea:	6013      	str	r3, [r2, #0]
}
 80184ec:	bf00      	nop
 80184ee:	370c      	adds	r7, #12
 80184f0:	46bd      	mov	sp, r7
 80184f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f6:	4770      	bx	lr
 80184f8:	20001004 	.word	0x20001004
 80184fc:	2000106c 	.word	0x2000106c

08018500 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018500:	b480      	push	{r7}
 8018502:	b083      	sub	sp, #12
 8018504:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018506:	4b05      	ldr	r3, [pc, #20]	; (801851c <xTaskGetCurrentTaskHandle+0x1c>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801850c:	687b      	ldr	r3, [r7, #4]
	}
 801850e:	4618      	mov	r0, r3
 8018510:	370c      	adds	r7, #12
 8018512:	46bd      	mov	sp, r7
 8018514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018518:	4770      	bx	lr
 801851a:	bf00      	nop
 801851c:	20000b78 	.word	0x20000b78

08018520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018520:	b480      	push	{r7}
 8018522:	b083      	sub	sp, #12
 8018524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018526:	4b0b      	ldr	r3, [pc, #44]	; (8018554 <xTaskGetSchedulerState+0x34>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d102      	bne.n	8018534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801852e:	2301      	movs	r3, #1
 8018530:	607b      	str	r3, [r7, #4]
 8018532:	e008      	b.n	8018546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018534:	4b08      	ldr	r3, [pc, #32]	; (8018558 <xTaskGetSchedulerState+0x38>)
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d102      	bne.n	8018542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801853c:	2302      	movs	r3, #2
 801853e:	607b      	str	r3, [r7, #4]
 8018540:	e001      	b.n	8018546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018542:	2300      	movs	r3, #0
 8018544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018546:	687b      	ldr	r3, [r7, #4]
	}
 8018548:	4618      	mov	r0, r3
 801854a:	370c      	adds	r7, #12
 801854c:	46bd      	mov	sp, r7
 801854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018552:	4770      	bx	lr
 8018554:	20001058 	.word	0x20001058
 8018558:	20001074 	.word	0x20001074

0801855c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801855c:	b590      	push	{r4, r7, lr}
 801855e:	b085      	sub	sp, #20
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018568:	2300      	movs	r3, #0
 801856a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2b00      	cmp	r3, #0
 8018570:	f000 8093 	beq.w	801869a <xTaskPriorityInherit+0x13e>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018578:	4b4a      	ldr	r3, [pc, #296]	; (80186a4 <xTaskPriorityInherit+0x148>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801857e:	429a      	cmp	r2, r3
 8018580:	f080 8082 	bcs.w	8018688 <xTaskPriorityInherit+0x12c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	699b      	ldr	r3, [r3, #24]
 8018588:	2b00      	cmp	r3, #0
 801858a:	db06      	blt.n	801859a <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801858c:	4b45      	ldr	r3, [pc, #276]	; (80186a4 <xTaskPriorityInherit+0x148>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	6959      	ldr	r1, [r3, #20]
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185a2:	4613      	mov	r3, r2
 80185a4:	009b      	lsls	r3, r3, #2
 80185a6:	4413      	add	r3, r2
 80185a8:	009b      	lsls	r3, r3, #2
 80185aa:	4a3f      	ldr	r2, [pc, #252]	; (80186a8 <xTaskPriorityInherit+0x14c>)
 80185ac:	4413      	add	r3, r2
 80185ae:	4299      	cmp	r1, r3
 80185b0:	d135      	bne.n	801861e <xTaskPriorityInherit+0xc2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80185b2:	68bb      	ldr	r3, [r7, #8]
 80185b4:	3304      	adds	r3, #4
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7fd f992 	bl	80158e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80185bc:	4b39      	ldr	r3, [pc, #228]	; (80186a4 <xTaskPriorityInherit+0x148>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80185c6:	68b8      	ldr	r0, [r7, #8]
 80185c8:	f7f5 fb54 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80185cc:	4603      	mov	r3, r0
 80185ce:	461a      	mov	r2, r3
 80185d0:	4b36      	ldr	r3, [pc, #216]	; (80186ac <xTaskPriorityInherit+0x150>)
 80185d2:	881b      	ldrh	r3, [r3, #0]
 80185d4:	4013      	ands	r3, r2
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d007      	beq.n	80185ec <xTaskPriorityInherit+0x90>
 80185dc:	68b8      	ldr	r0, [r7, #8]
 80185de:	f7f5 fb3c 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80185e2:	4603      	mov	r3, r0
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	4618      	mov	r0, r3
 80185e8:	f7f5 fc30 	bl	800de4c <prvTraceStoreTaskReady>
 80185ec:	68bb      	ldr	r3, [r7, #8]
 80185ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185f0:	4b2f      	ldr	r3, [pc, #188]	; (80186b0 <xTaskPriorityInherit+0x154>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d903      	bls.n	8018600 <xTaskPriorityInherit+0xa4>
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185fc:	4a2c      	ldr	r2, [pc, #176]	; (80186b0 <xTaskPriorityInherit+0x154>)
 80185fe:	6013      	str	r3, [r2, #0]
 8018600:	68bb      	ldr	r3, [r7, #8]
 8018602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018604:	4613      	mov	r3, r2
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	4413      	add	r3, r2
 801860a:	009b      	lsls	r3, r3, #2
 801860c:	4a26      	ldr	r2, [pc, #152]	; (80186a8 <xTaskPriorityInherit+0x14c>)
 801860e:	441a      	add	r2, r3
 8018610:	68bb      	ldr	r3, [r7, #8]
 8018612:	3304      	adds	r3, #4
 8018614:	4619      	mov	r1, r3
 8018616:	4610      	mov	r0, r2
 8018618:	f7fd f905 	bl	8015826 <vListInsertEnd>
 801861c:	e004      	b.n	8018628 <xTaskPriorityInherit+0xcc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801861e:	4b21      	ldr	r3, [pc, #132]	; (80186a4 <xTaskPriorityInherit+0x148>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018624:	68bb      	ldr	r3, [r7, #8]
 8018626:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8018628:	68b8      	ldr	r0, [r7, #8]
 801862a:	f7f5 fb23 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 801862e:	4603      	mov	r3, r0
 8018630:	461a      	mov	r2, r3
 8018632:	4b1e      	ldr	r3, [pc, #120]	; (80186ac <xTaskPriorityInherit+0x150>)
 8018634:	881b      	ldrh	r3, [r3, #0]
 8018636:	4013      	ands	r3, r2
 8018638:	b29b      	uxth	r3, r3
 801863a:	2b00      	cmp	r3, #0
 801863c:	d021      	beq.n	8018682 <xTaskPriorityInherit+0x126>
 801863e:	68b8      	ldr	r0, [r7, #8]
 8018640:	f7f5 fb0b 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8018644:	4603      	mov	r3, r0
 8018646:	b2db      	uxtb	r3, r3
 8018648:	461c      	mov	r4, r3
 801864a:	68b8      	ldr	r0, [r7, #8]
 801864c:	f7f5 fb05 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8018650:	4603      	mov	r3, r0
 8018652:	b2db      	uxtb	r3, r3
 8018654:	4619      	mov	r1, r3
 8018656:	2003      	movs	r0, #3
 8018658:	f7f6 f804 	bl	800e664 <prvTraceGetPriorityProperty>
 801865c:	4603      	mov	r3, r0
 801865e:	4622      	mov	r2, r4
 8018660:	2103      	movs	r1, #3
 8018662:	208e      	movs	r0, #142	; 0x8e
 8018664:	f7f5 fd6c 	bl	800e140 <prvTraceStoreKernelCallWithParam>
 8018668:	68b8      	ldr	r0, [r7, #8]
 801866a:	f7f5 faf6 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 801866e:	4603      	mov	r3, r0
 8018670:	b2d9      	uxtb	r1, r3
 8018672:	4b0c      	ldr	r3, [pc, #48]	; (80186a4 <xTaskPriorityInherit+0x148>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018678:	b2db      	uxtb	r3, r3
 801867a:	461a      	mov	r2, r3
 801867c:	2003      	movs	r0, #3
 801867e:	f7f5 ffb5 	bl	800e5ec <prvTraceSetPriorityProperty>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018682:	2301      	movs	r3, #1
 8018684:	60fb      	str	r3, [r7, #12]
 8018686:	e008      	b.n	801869a <xTaskPriorityInherit+0x13e>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801868c:	4b05      	ldr	r3, [pc, #20]	; (80186a4 <xTaskPriorityInherit+0x148>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018692:	429a      	cmp	r2, r3
 8018694:	d201      	bcs.n	801869a <xTaskPriorityInherit+0x13e>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018696:	2301      	movs	r3, #1
 8018698:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801869a:	68fb      	ldr	r3, [r7, #12]
	}
 801869c:	4618      	mov	r0, r3
 801869e:	3714      	adds	r7, #20
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd90      	pop	{r4, r7, pc}
 80186a4:	20000b78 	.word	0x20000b78
 80186a8:	20000b7c 	.word	0x20000b7c
 80186ac:	20008358 	.word	0x20008358
 80186b0:	20001054 	.word	0x20001054

080186b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80186b4:	b590      	push	{r4, r7, lr}
 80186b6:	b087      	sub	sp, #28
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80186c0:	2300      	movs	r3, #0
 80186c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	f000 8096 	beq.w	80187f8 <xTaskPriorityDisinherit+0x144>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80186cc:	4b4d      	ldr	r3, [pc, #308]	; (8018804 <xTaskPriorityDisinherit+0x150>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	693a      	ldr	r2, [r7, #16]
 80186d2:	429a      	cmp	r2, r3
 80186d4:	d00a      	beq.n	80186ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80186d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186da:	f383 8811 	msr	BASEPRI, r3
 80186de:	f3bf 8f6f 	isb	sy
 80186e2:	f3bf 8f4f 	dsb	sy
 80186e6:	60fb      	str	r3, [r7, #12]
}
 80186e8:	bf00      	nop
 80186ea:	e7fe      	b.n	80186ea <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d10a      	bne.n	801870a <xTaskPriorityDisinherit+0x56>
	__asm volatile
 80186f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f8:	f383 8811 	msr	BASEPRI, r3
 80186fc:	f3bf 8f6f 	isb	sy
 8018700:	f3bf 8f4f 	dsb	sy
 8018704:	60bb      	str	r3, [r7, #8]
}
 8018706:	bf00      	nop
 8018708:	e7fe      	b.n	8018708 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801870e:	1e5a      	subs	r2, r3, #1
 8018710:	693b      	ldr	r3, [r7, #16]
 8018712:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018718:	693b      	ldr	r3, [r7, #16]
 801871a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801871c:	429a      	cmp	r2, r3
 801871e:	d06b      	beq.n	80187f8 <xTaskPriorityDisinherit+0x144>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018720:	693b      	ldr	r3, [r7, #16]
 8018722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018724:	2b00      	cmp	r3, #0
 8018726:	d167      	bne.n	80187f8 <xTaskPriorityDisinherit+0x144>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	3304      	adds	r3, #4
 801872c:	4618      	mov	r0, r3
 801872e:	f7fd f8d7 	bl	80158e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8018732:	6938      	ldr	r0, [r7, #16]
 8018734:	f7f5 fa9e 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8018738:	4603      	mov	r3, r0
 801873a:	461a      	mov	r2, r3
 801873c:	4b32      	ldr	r3, [pc, #200]	; (8018808 <xTaskPriorityDisinherit+0x154>)
 801873e:	881b      	ldrh	r3, [r3, #0]
 8018740:	4013      	ands	r3, r2
 8018742:	b29b      	uxth	r3, r3
 8018744:	2b00      	cmp	r3, #0
 8018746:	d020      	beq.n	801878a <xTaskPriorityDisinherit+0xd6>
 8018748:	6938      	ldr	r0, [r7, #16]
 801874a:	f7f5 fa86 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 801874e:	4603      	mov	r3, r0
 8018750:	b2db      	uxtb	r3, r3
 8018752:	461c      	mov	r4, r3
 8018754:	6938      	ldr	r0, [r7, #16]
 8018756:	f7f5 fa80 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 801875a:	4603      	mov	r3, r0
 801875c:	b2db      	uxtb	r3, r3
 801875e:	4619      	mov	r1, r3
 8018760:	2003      	movs	r0, #3
 8018762:	f7f5 ff7f 	bl	800e664 <prvTraceGetPriorityProperty>
 8018766:	4603      	mov	r3, r0
 8018768:	4622      	mov	r2, r4
 801876a:	2103      	movs	r1, #3
 801876c:	208f      	movs	r0, #143	; 0x8f
 801876e:	f7f5 fce7 	bl	800e140 <prvTraceStoreKernelCallWithParam>
 8018772:	6938      	ldr	r0, [r7, #16]
 8018774:	f7f5 fa71 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 8018778:	4603      	mov	r3, r0
 801877a:	b2d9      	uxtb	r1, r3
 801877c:	693b      	ldr	r3, [r7, #16]
 801877e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018780:	b2db      	uxtb	r3, r3
 8018782:	461a      	mov	r2, r3
 8018784:	2003      	movs	r0, #3
 8018786:	f7f5 ff31 	bl	800e5ec <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018796:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801879e:	6938      	ldr	r0, [r7, #16]
 80187a0:	f7f5 fa68 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80187a4:	4603      	mov	r3, r0
 80187a6:	461a      	mov	r2, r3
 80187a8:	4b17      	ldr	r3, [pc, #92]	; (8018808 <xTaskPriorityDisinherit+0x154>)
 80187aa:	881b      	ldrh	r3, [r3, #0]
 80187ac:	4013      	ands	r3, r2
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d007      	beq.n	80187c4 <xTaskPriorityDisinherit+0x110>
 80187b4:	6938      	ldr	r0, [r7, #16]
 80187b6:	f7f5 fa50 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80187ba:	4603      	mov	r3, r0
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	4618      	mov	r0, r3
 80187c0:	f7f5 fb44 	bl	800de4c <prvTraceStoreTaskReady>
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187c8:	4b10      	ldr	r3, [pc, #64]	; (801880c <xTaskPriorityDisinherit+0x158>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d903      	bls.n	80187d8 <xTaskPriorityDisinherit+0x124>
 80187d0:	693b      	ldr	r3, [r7, #16]
 80187d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d4:	4a0d      	ldr	r2, [pc, #52]	; (801880c <xTaskPriorityDisinherit+0x158>)
 80187d6:	6013      	str	r3, [r2, #0]
 80187d8:	693b      	ldr	r3, [r7, #16]
 80187da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187dc:	4613      	mov	r3, r2
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	4413      	add	r3, r2
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	4a0a      	ldr	r2, [pc, #40]	; (8018810 <xTaskPriorityDisinherit+0x15c>)
 80187e6:	441a      	add	r2, r3
 80187e8:	693b      	ldr	r3, [r7, #16]
 80187ea:	3304      	adds	r3, #4
 80187ec:	4619      	mov	r1, r3
 80187ee:	4610      	mov	r0, r2
 80187f0:	f7fd f819 	bl	8015826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80187f4:	2301      	movs	r3, #1
 80187f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80187f8:	697b      	ldr	r3, [r7, #20]
	}
 80187fa:	4618      	mov	r0, r3
 80187fc:	371c      	adds	r7, #28
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd90      	pop	{r4, r7, pc}
 8018802:	bf00      	nop
 8018804:	20000b78 	.word	0x20000b78
 8018808:	20008358 	.word	0x20008358
 801880c:	20001054 	.word	0x20001054
 8018810:	20000b7c 	.word	0x20000b7c

08018814 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018814:	b590      	push	{r4, r7, lr}
 8018816:	b089      	sub	sp, #36	; 0x24
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
 801881c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018822:	2301      	movs	r3, #1
 8018824:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2b00      	cmp	r3, #0
 801882a:	f000 80ac 	beq.w	8018986 <vTaskPriorityDisinheritAfterTimeout+0x172>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801882e:	69bb      	ldr	r3, [r7, #24]
 8018830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018832:	2b00      	cmp	r3, #0
 8018834:	d10a      	bne.n	801884c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8018836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801883a:	f383 8811 	msr	BASEPRI, r3
 801883e:	f3bf 8f6f 	isb	sy
 8018842:	f3bf 8f4f 	dsb	sy
 8018846:	60fb      	str	r3, [r7, #12]
}
 8018848:	bf00      	nop
 801884a:	e7fe      	b.n	801884a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801884c:	69bb      	ldr	r3, [r7, #24]
 801884e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018850:	683a      	ldr	r2, [r7, #0]
 8018852:	429a      	cmp	r2, r3
 8018854:	d902      	bls.n	801885c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	61fb      	str	r3, [r7, #28]
 801885a:	e002      	b.n	8018862 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801885c:	69bb      	ldr	r3, [r7, #24]
 801885e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018860:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018862:	69bb      	ldr	r3, [r7, #24]
 8018864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018866:	69fa      	ldr	r2, [r7, #28]
 8018868:	429a      	cmp	r2, r3
 801886a:	f000 808c 	beq.w	8018986 <vTaskPriorityDisinheritAfterTimeout+0x172>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801886e:	69bb      	ldr	r3, [r7, #24]
 8018870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018872:	697a      	ldr	r2, [r7, #20]
 8018874:	429a      	cmp	r2, r3
 8018876:	f040 8086 	bne.w	8018986 <vTaskPriorityDisinheritAfterTimeout+0x172>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801887a:	4b45      	ldr	r3, [pc, #276]	; (8018990 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	69ba      	ldr	r2, [r7, #24]
 8018880:	429a      	cmp	r2, r3
 8018882:	d10a      	bne.n	801889a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8018884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018888:	f383 8811 	msr	BASEPRI, r3
 801888c:	f3bf 8f6f 	isb	sy
 8018890:	f3bf 8f4f 	dsb	sy
 8018894:	60bb      	str	r3, [r7, #8]
}
 8018896:	bf00      	nop
 8018898:	e7fe      	b.n	8018898 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 801889a:	69b8      	ldr	r0, [r7, #24]
 801889c:	f7f5 f9ea 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 80188a0:	4603      	mov	r3, r0
 80188a2:	461a      	mov	r2, r3
 80188a4:	4b3b      	ldr	r3, [pc, #236]	; (8018994 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80188a6:	881b      	ldrh	r3, [r3, #0]
 80188a8:	4013      	ands	r3, r2
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d020      	beq.n	80188f2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80188b0:	69b8      	ldr	r0, [r7, #24]
 80188b2:	f7f5 f9d2 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80188b6:	4603      	mov	r3, r0
 80188b8:	b2db      	uxtb	r3, r3
 80188ba:	461c      	mov	r4, r3
 80188bc:	69b8      	ldr	r0, [r7, #24]
 80188be:	f7f5 f9cc 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80188c2:	4603      	mov	r3, r0
 80188c4:	b2db      	uxtb	r3, r3
 80188c6:	4619      	mov	r1, r3
 80188c8:	2003      	movs	r0, #3
 80188ca:	f7f5 fecb 	bl	800e664 <prvTraceGetPriorityProperty>
 80188ce:	4603      	mov	r3, r0
 80188d0:	4622      	mov	r2, r4
 80188d2:	2103      	movs	r1, #3
 80188d4:	208f      	movs	r0, #143	; 0x8f
 80188d6:	f7f5 fc33 	bl	800e140 <prvTraceStoreKernelCallWithParam>
 80188da:	69b8      	ldr	r0, [r7, #24]
 80188dc:	f7f5 f9bd 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 80188e0:	4603      	mov	r3, r0
 80188e2:	b2d9      	uxtb	r1, r3
 80188e4:	69bb      	ldr	r3, [r7, #24]
 80188e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80188e8:	b2db      	uxtb	r3, r3
 80188ea:	461a      	mov	r2, r3
 80188ec:	2003      	movs	r0, #3
 80188ee:	f7f5 fe7d 	bl	800e5ec <prvTraceSetPriorityProperty>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80188f2:	69bb      	ldr	r3, [r7, #24]
 80188f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80188f8:	69bb      	ldr	r3, [r7, #24]
 80188fa:	69fa      	ldr	r2, [r7, #28]
 80188fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80188fe:	69bb      	ldr	r3, [r7, #24]
 8018900:	699b      	ldr	r3, [r3, #24]
 8018902:	2b00      	cmp	r3, #0
 8018904:	db04      	blt.n	8018910 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018906:	69fb      	ldr	r3, [r7, #28]
 8018908:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801890c:	69bb      	ldr	r3, [r7, #24]
 801890e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018910:	69bb      	ldr	r3, [r7, #24]
 8018912:	6959      	ldr	r1, [r3, #20]
 8018914:	693a      	ldr	r2, [r7, #16]
 8018916:	4613      	mov	r3, r2
 8018918:	009b      	lsls	r3, r3, #2
 801891a:	4413      	add	r3, r2
 801891c:	009b      	lsls	r3, r3, #2
 801891e:	4a1e      	ldr	r2, [pc, #120]	; (8018998 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8018920:	4413      	add	r3, r2
 8018922:	4299      	cmp	r1, r3
 8018924:	d12f      	bne.n	8018986 <vTaskPriorityDisinheritAfterTimeout+0x172>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018926:	69bb      	ldr	r3, [r7, #24]
 8018928:	3304      	adds	r3, #4
 801892a:	4618      	mov	r0, r3
 801892c:	f7fc ffd8 	bl	80158e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018930:	69b8      	ldr	r0, [r7, #24]
 8018932:	f7f5 f99f 	bl	800dc74 <prvTraceGetTaskNumberHigh16>
 8018936:	4603      	mov	r3, r0
 8018938:	461a      	mov	r2, r3
 801893a:	4b16      	ldr	r3, [pc, #88]	; (8018994 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 801893c:	881b      	ldrh	r3, [r3, #0]
 801893e:	4013      	ands	r3, r2
 8018940:	b29b      	uxth	r3, r3
 8018942:	2b00      	cmp	r3, #0
 8018944:	d007      	beq.n	8018956 <vTaskPriorityDisinheritAfterTimeout+0x142>
 8018946:	69b8      	ldr	r0, [r7, #24]
 8018948:	f7f5 f987 	bl	800dc5a <prvTraceGetTaskNumberLow16>
 801894c:	4603      	mov	r3, r0
 801894e:	b2db      	uxtb	r3, r3
 8018950:	4618      	mov	r0, r3
 8018952:	f7f5 fa7b 	bl	800de4c <prvTraceStoreTaskReady>
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801895a:	4b10      	ldr	r3, [pc, #64]	; (801899c <vTaskPriorityDisinheritAfterTimeout+0x188>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	429a      	cmp	r2, r3
 8018960:	d903      	bls.n	801896a <vTaskPriorityDisinheritAfterTimeout+0x156>
 8018962:	69bb      	ldr	r3, [r7, #24]
 8018964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018966:	4a0d      	ldr	r2, [pc, #52]	; (801899c <vTaskPriorityDisinheritAfterTimeout+0x188>)
 8018968:	6013      	str	r3, [r2, #0]
 801896a:	69bb      	ldr	r3, [r7, #24]
 801896c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801896e:	4613      	mov	r3, r2
 8018970:	009b      	lsls	r3, r3, #2
 8018972:	4413      	add	r3, r2
 8018974:	009b      	lsls	r3, r3, #2
 8018976:	4a08      	ldr	r2, [pc, #32]	; (8018998 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8018978:	441a      	add	r2, r3
 801897a:	69bb      	ldr	r3, [r7, #24]
 801897c:	3304      	adds	r3, #4
 801897e:	4619      	mov	r1, r3
 8018980:	4610      	mov	r0, r2
 8018982:	f7fc ff50 	bl	8015826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018986:	bf00      	nop
 8018988:	3724      	adds	r7, #36	; 0x24
 801898a:	46bd      	mov	sp, r7
 801898c:	bd90      	pop	{r4, r7, pc}
 801898e:	bf00      	nop
 8018990:	20000b78 	.word	0x20000b78
 8018994:	20008358 	.word	0x20008358
 8018998:	20000b7c 	.word	0x20000b7c
 801899c:	20001054 	.word	0x20001054

080189a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80189a0:	b480      	push	{r7}
 80189a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80189a4:	4b07      	ldr	r3, [pc, #28]	; (80189c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d004      	beq.n	80189b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80189ac:	4b05      	ldr	r3, [pc, #20]	; (80189c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80189b2:	3201      	adds	r2, #1
 80189b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80189b6:	4b03      	ldr	r3, [pc, #12]	; (80189c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80189b8:	681b      	ldr	r3, [r3, #0]
	}
 80189ba:	4618      	mov	r0, r3
 80189bc:	46bd      	mov	sp, r7
 80189be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189c2:	4770      	bx	lr
 80189c4:	20000b78 	.word	0x20000b78

080189c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b084      	sub	sp, #16
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80189d2:	4b21      	ldr	r3, [pc, #132]	; (8018a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189d8:	4b20      	ldr	r3, [pc, #128]	; (8018a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	3304      	adds	r3, #4
 80189de:	4618      	mov	r0, r3
 80189e0:	f7fc ff7e 	bl	80158e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189ea:	d10a      	bne.n	8018a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d007      	beq.n	8018a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80189f2:	4b1a      	ldr	r3, [pc, #104]	; (8018a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	3304      	adds	r3, #4
 80189f8:	4619      	mov	r1, r3
 80189fa:	4819      	ldr	r0, [pc, #100]	; (8018a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80189fc:	f7fc ff13 	bl	8015826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018a00:	e026      	b.n	8018a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018a02:	68fa      	ldr	r2, [r7, #12]
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	4413      	add	r3, r2
 8018a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018a0a:	4b14      	ldr	r3, [pc, #80]	; (8018a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	68ba      	ldr	r2, [r7, #8]
 8018a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018a12:	68ba      	ldr	r2, [r7, #8]
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d209      	bcs.n	8018a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a1a:	4b12      	ldr	r3, [pc, #72]	; (8018a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018a1c:	681a      	ldr	r2, [r3, #0]
 8018a1e:	4b0f      	ldr	r3, [pc, #60]	; (8018a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	3304      	adds	r3, #4
 8018a24:	4619      	mov	r1, r3
 8018a26:	4610      	mov	r0, r2
 8018a28:	f7fc ff21 	bl	801586e <vListInsert>
}
 8018a2c:	e010      	b.n	8018a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018a2e:	4b0e      	ldr	r3, [pc, #56]	; (8018a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018a30:	681a      	ldr	r2, [r3, #0]
 8018a32:	4b0a      	ldr	r3, [pc, #40]	; (8018a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	3304      	adds	r3, #4
 8018a38:	4619      	mov	r1, r3
 8018a3a:	4610      	mov	r0, r2
 8018a3c:	f7fc ff17 	bl	801586e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018a40:	4b0a      	ldr	r3, [pc, #40]	; (8018a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	68ba      	ldr	r2, [r7, #8]
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d202      	bcs.n	8018a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018a4a:	4a08      	ldr	r2, [pc, #32]	; (8018a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	6013      	str	r3, [r2, #0]
}
 8018a50:	bf00      	nop
 8018a52:	3710      	adds	r7, #16
 8018a54:	46bd      	mov	sp, r7
 8018a56:	bd80      	pop	{r7, pc}
 8018a58:	20001050 	.word	0x20001050
 8018a5c:	20000b78 	.word	0x20000b78
 8018a60:	20001038 	.word	0x20001038
 8018a64:	20001008 	.word	0x20001008
 8018a68:	20001004 	.word	0x20001004
 8018a6c:	2000106c 	.word	0x2000106c

08018a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	b08a      	sub	sp, #40	; 0x28
 8018a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018a76:	2300      	movs	r3, #0
 8018a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018a7a:	f000 fb07 	bl	801908c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018a7e:	4b1c      	ldr	r3, [pc, #112]	; (8018af0 <xTimerCreateTimerTask+0x80>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d021      	beq.n	8018aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018a86:	2300      	movs	r3, #0
 8018a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018a8e:	1d3a      	adds	r2, r7, #4
 8018a90:	f107 0108 	add.w	r1, r7, #8
 8018a94:	f107 030c 	add.w	r3, r7, #12
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7fc fe7d 	bl	8015798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018a9e:	6879      	ldr	r1, [r7, #4]
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	68fa      	ldr	r2, [r7, #12]
 8018aa4:	9202      	str	r2, [sp, #8]
 8018aa6:	9301      	str	r3, [sp, #4]
 8018aa8:	2302      	movs	r3, #2
 8018aaa:	9300      	str	r3, [sp, #0]
 8018aac:	2300      	movs	r3, #0
 8018aae:	460a      	mov	r2, r1
 8018ab0:	4910      	ldr	r1, [pc, #64]	; (8018af4 <xTimerCreateTimerTask+0x84>)
 8018ab2:	4811      	ldr	r0, [pc, #68]	; (8018af8 <xTimerCreateTimerTask+0x88>)
 8018ab4:	f7fe fd68 	bl	8017588 <xTaskCreateStatic>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	4a10      	ldr	r2, [pc, #64]	; (8018afc <xTimerCreateTimerTask+0x8c>)
 8018abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018abe:	4b0f      	ldr	r3, [pc, #60]	; (8018afc <xTimerCreateTimerTask+0x8c>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d001      	beq.n	8018aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d10a      	bne.n	8018ae6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad4:	f383 8811 	msr	BASEPRI, r3
 8018ad8:	f3bf 8f6f 	isb	sy
 8018adc:	f3bf 8f4f 	dsb	sy
 8018ae0:	613b      	str	r3, [r7, #16]
}
 8018ae2:	bf00      	nop
 8018ae4:	e7fe      	b.n	8018ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8018ae6:	697b      	ldr	r3, [r7, #20]
}
 8018ae8:	4618      	mov	r0, r3
 8018aea:	3718      	adds	r7, #24
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd80      	pop	{r7, pc}
 8018af0:	200010a8 	.word	0x200010a8
 8018af4:	08021274 	.word	0x08021274
 8018af8:	08018c35 	.word	0x08018c35
 8018afc:	200010ac 	.word	0x200010ac

08018b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b08a      	sub	sp, #40	; 0x28
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	60f8      	str	r0, [r7, #12]
 8018b08:	60b9      	str	r1, [r7, #8]
 8018b0a:	607a      	str	r2, [r7, #4]
 8018b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d10a      	bne.n	8018b2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8018b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b1c:	f383 8811 	msr	BASEPRI, r3
 8018b20:	f3bf 8f6f 	isb	sy
 8018b24:	f3bf 8f4f 	dsb	sy
 8018b28:	623b      	str	r3, [r7, #32]
}
 8018b2a:	bf00      	nop
 8018b2c:	e7fe      	b.n	8018b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018b2e:	4b1a      	ldr	r3, [pc, #104]	; (8018b98 <xTimerGenericCommand+0x98>)
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d02a      	beq.n	8018b8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	2b05      	cmp	r3, #5
 8018b46:	dc18      	bgt.n	8018b7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018b48:	f7ff fcea 	bl	8018520 <xTaskGetSchedulerState>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	2b02      	cmp	r3, #2
 8018b50:	d109      	bne.n	8018b66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018b52:	4b11      	ldr	r3, [pc, #68]	; (8018b98 <xTimerGenericCommand+0x98>)
 8018b54:	6818      	ldr	r0, [r3, #0]
 8018b56:	f107 0110 	add.w	r1, r7, #16
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b5e:	f7fd f93b 	bl	8015dd8 <xQueueGenericSend>
 8018b62:	6278      	str	r0, [r7, #36]	; 0x24
 8018b64:	e012      	b.n	8018b8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018b66:	4b0c      	ldr	r3, [pc, #48]	; (8018b98 <xTimerGenericCommand+0x98>)
 8018b68:	6818      	ldr	r0, [r3, #0]
 8018b6a:	f107 0110 	add.w	r1, r7, #16
 8018b6e:	2300      	movs	r3, #0
 8018b70:	2200      	movs	r2, #0
 8018b72:	f7fd f931 	bl	8015dd8 <xQueueGenericSend>
 8018b76:	6278      	str	r0, [r7, #36]	; 0x24
 8018b78:	e008      	b.n	8018b8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018b7a:	4b07      	ldr	r3, [pc, #28]	; (8018b98 <xTimerGenericCommand+0x98>)
 8018b7c:	6818      	ldr	r0, [r3, #0]
 8018b7e:	f107 0110 	add.w	r1, r7, #16
 8018b82:	2300      	movs	r3, #0
 8018b84:	683a      	ldr	r2, [r7, #0]
 8018b86:	f7fd fb35 	bl	80161f4 <xQueueGenericSendFromISR>
 8018b8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018b8e:	4618      	mov	r0, r3
 8018b90:	3728      	adds	r7, #40	; 0x28
 8018b92:	46bd      	mov	sp, r7
 8018b94:	bd80      	pop	{r7, pc}
 8018b96:	bf00      	nop
 8018b98:	200010a8 	.word	0x200010a8

08018b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b088      	sub	sp, #32
 8018ba0:	af02      	add	r7, sp, #8
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ba6:	4b22      	ldr	r3, [pc, #136]	; (8018c30 <prvProcessExpiredTimer+0x94>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	68db      	ldr	r3, [r3, #12]
 8018bac:	68db      	ldr	r3, [r3, #12]
 8018bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	3304      	adds	r3, #4
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7fc fe93 	bl	80158e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018bba:	697b      	ldr	r3, [r7, #20]
 8018bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018bc0:	f003 0304 	and.w	r3, r3, #4
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d022      	beq.n	8018c0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	699a      	ldr	r2, [r3, #24]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	18d1      	adds	r1, r2, r3
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	683a      	ldr	r2, [r7, #0]
 8018bd4:	6978      	ldr	r0, [r7, #20]
 8018bd6:	f000 f8d1 	bl	8018d7c <prvInsertTimerInActiveList>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d01f      	beq.n	8018c20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018be0:	2300      	movs	r3, #0
 8018be2:	9300      	str	r3, [sp, #0]
 8018be4:	2300      	movs	r3, #0
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	2100      	movs	r1, #0
 8018bea:	6978      	ldr	r0, [r7, #20]
 8018bec:	f7ff ff88 	bl	8018b00 <xTimerGenericCommand>
 8018bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018bf2:	693b      	ldr	r3, [r7, #16]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d113      	bne.n	8018c20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8018bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bfc:	f383 8811 	msr	BASEPRI, r3
 8018c00:	f3bf 8f6f 	isb	sy
 8018c04:	f3bf 8f4f 	dsb	sy
 8018c08:	60fb      	str	r3, [r7, #12]
}
 8018c0a:	bf00      	nop
 8018c0c:	e7fe      	b.n	8018c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018c0e:	697b      	ldr	r3, [r7, #20]
 8018c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018c14:	f023 0301 	bic.w	r3, r3, #1
 8018c18:	b2da      	uxtb	r2, r3
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	6a1b      	ldr	r3, [r3, #32]
 8018c24:	6978      	ldr	r0, [r7, #20]
 8018c26:	4798      	blx	r3
}
 8018c28:	bf00      	nop
 8018c2a:	3718      	adds	r7, #24
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}
 8018c30:	200010a0 	.word	0x200010a0

08018c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b084      	sub	sp, #16
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018c3c:	f107 0308 	add.w	r3, r7, #8
 8018c40:	4618      	mov	r0, r3
 8018c42:	f000 f857 	bl	8018cf4 <prvGetNextExpireTime>
 8018c46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	68f8      	ldr	r0, [r7, #12]
 8018c4e:	f000 f803 	bl	8018c58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018c52:	f000 f8d5 	bl	8018e00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018c56:	e7f1      	b.n	8018c3c <prvTimerTask+0x8>

08018c58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b084      	sub	sp, #16
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018c62:	f7fe ff8b 	bl	8017b7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018c66:	f107 0308 	add.w	r3, r7, #8
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f000 f866 	bl	8018d3c <prvSampleTimeNow>
 8018c70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018c72:	68bb      	ldr	r3, [r7, #8]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d130      	bne.n	8018cda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d10a      	bne.n	8018c94 <prvProcessTimerOrBlockTask+0x3c>
 8018c7e:	687a      	ldr	r2, [r7, #4]
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	429a      	cmp	r2, r3
 8018c84:	d806      	bhi.n	8018c94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018c86:	f7fe ff87 	bl	8017b98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018c8a:	68f9      	ldr	r1, [r7, #12]
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f7ff ff85 	bl	8018b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018c92:	e024      	b.n	8018cde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d008      	beq.n	8018cac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018c9a:	4b13      	ldr	r3, [pc, #76]	; (8018ce8 <prvProcessTimerOrBlockTask+0x90>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d101      	bne.n	8018ca8 <prvProcessTimerOrBlockTask+0x50>
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	e000      	b.n	8018caa <prvProcessTimerOrBlockTask+0x52>
 8018ca8:	2300      	movs	r3, #0
 8018caa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018cac:	4b0f      	ldr	r3, [pc, #60]	; (8018cec <prvProcessTimerOrBlockTask+0x94>)
 8018cae:	6818      	ldr	r0, [r3, #0]
 8018cb0:	687a      	ldr	r2, [r7, #4]
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	1ad3      	subs	r3, r2, r3
 8018cb6:	683a      	ldr	r2, [r7, #0]
 8018cb8:	4619      	mov	r1, r3
 8018cba:	f7fe fc31 	bl	8017520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018cbe:	f7fe ff6b 	bl	8017b98 <xTaskResumeAll>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d10a      	bne.n	8018cde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018cc8:	4b09      	ldr	r3, [pc, #36]	; (8018cf0 <prvProcessTimerOrBlockTask+0x98>)
 8018cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018cce:	601a      	str	r2, [r3, #0]
 8018cd0:	f3bf 8f4f 	dsb	sy
 8018cd4:	f3bf 8f6f 	isb	sy
}
 8018cd8:	e001      	b.n	8018cde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018cda:	f7fe ff5d 	bl	8017b98 <xTaskResumeAll>
}
 8018cde:	bf00      	nop
 8018ce0:	3710      	adds	r7, #16
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	bf00      	nop
 8018ce8:	200010a4 	.word	0x200010a4
 8018cec:	200010a8 	.word	0x200010a8
 8018cf0:	e000ed04 	.word	0xe000ed04

08018cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018cf4:	b480      	push	{r7}
 8018cf6:	b085      	sub	sp, #20
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018cfc:	4b0e      	ldr	r3, [pc, #56]	; (8018d38 <prvGetNextExpireTime+0x44>)
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d101      	bne.n	8018d0a <prvGetNextExpireTime+0x16>
 8018d06:	2201      	movs	r2, #1
 8018d08:	e000      	b.n	8018d0c <prvGetNextExpireTime+0x18>
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d105      	bne.n	8018d24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018d18:	4b07      	ldr	r3, [pc, #28]	; (8018d38 <prvGetNextExpireTime+0x44>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	68db      	ldr	r3, [r3, #12]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	60fb      	str	r3, [r7, #12]
 8018d22:	e001      	b.n	8018d28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018d24:	2300      	movs	r3, #0
 8018d26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018d28:	68fb      	ldr	r3, [r7, #12]
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3714      	adds	r7, #20
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr
 8018d36:	bf00      	nop
 8018d38:	200010a0 	.word	0x200010a0

08018d3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b084      	sub	sp, #16
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018d44:	f7fe ffda 	bl	8017cfc <xTaskGetTickCount>
 8018d48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018d4a:	4b0b      	ldr	r3, [pc, #44]	; (8018d78 <prvSampleTimeNow+0x3c>)
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	68fa      	ldr	r2, [r7, #12]
 8018d50:	429a      	cmp	r2, r3
 8018d52:	d205      	bcs.n	8018d60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018d54:	f000 f936 	bl	8018fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	601a      	str	r2, [r3, #0]
 8018d5e:	e002      	b.n	8018d66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2200      	movs	r2, #0
 8018d64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018d66:	4a04      	ldr	r2, [pc, #16]	; (8018d78 <prvSampleTimeNow+0x3c>)
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018d6c:	68fb      	ldr	r3, [r7, #12]
}
 8018d6e:	4618      	mov	r0, r3
 8018d70:	3710      	adds	r7, #16
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}
 8018d76:	bf00      	nop
 8018d78:	200010b0 	.word	0x200010b0

08018d7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b086      	sub	sp, #24
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	60f8      	str	r0, [r7, #12]
 8018d84:	60b9      	str	r1, [r7, #8]
 8018d86:	607a      	str	r2, [r7, #4]
 8018d88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	68ba      	ldr	r2, [r7, #8]
 8018d92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	68fa      	ldr	r2, [r7, #12]
 8018d98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018d9a:	68ba      	ldr	r2, [r7, #8]
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d812      	bhi.n	8018dc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018da2:	687a      	ldr	r2, [r7, #4]
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	1ad2      	subs	r2, r2, r3
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	699b      	ldr	r3, [r3, #24]
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d302      	bcc.n	8018db6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018db0:	2301      	movs	r3, #1
 8018db2:	617b      	str	r3, [r7, #20]
 8018db4:	e01b      	b.n	8018dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018db6:	4b10      	ldr	r3, [pc, #64]	; (8018df8 <prvInsertTimerInActiveList+0x7c>)
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	3304      	adds	r3, #4
 8018dbe:	4619      	mov	r1, r3
 8018dc0:	4610      	mov	r0, r2
 8018dc2:	f7fc fd54 	bl	801586e <vListInsert>
 8018dc6:	e012      	b.n	8018dee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018dc8:	687a      	ldr	r2, [r7, #4]
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	429a      	cmp	r2, r3
 8018dce:	d206      	bcs.n	8018dde <prvInsertTimerInActiveList+0x62>
 8018dd0:	68ba      	ldr	r2, [r7, #8]
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	429a      	cmp	r2, r3
 8018dd6:	d302      	bcc.n	8018dde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018dd8:	2301      	movs	r3, #1
 8018dda:	617b      	str	r3, [r7, #20]
 8018ddc:	e007      	b.n	8018dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018dde:	4b07      	ldr	r3, [pc, #28]	; (8018dfc <prvInsertTimerInActiveList+0x80>)
 8018de0:	681a      	ldr	r2, [r3, #0]
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	3304      	adds	r3, #4
 8018de6:	4619      	mov	r1, r3
 8018de8:	4610      	mov	r0, r2
 8018dea:	f7fc fd40 	bl	801586e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018dee:	697b      	ldr	r3, [r7, #20]
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	3718      	adds	r7, #24
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	200010a4 	.word	0x200010a4
 8018dfc:	200010a0 	.word	0x200010a0

08018e00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b08e      	sub	sp, #56	; 0x38
 8018e04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018e06:	e0ca      	b.n	8018f9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	da18      	bge.n	8018e40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018e0e:	1d3b      	adds	r3, r7, #4
 8018e10:	3304      	adds	r3, #4
 8018e12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d10a      	bne.n	8018e30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8018e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e1e:	f383 8811 	msr	BASEPRI, r3
 8018e22:	f3bf 8f6f 	isb	sy
 8018e26:	f3bf 8f4f 	dsb	sy
 8018e2a:	61fb      	str	r3, [r7, #28]
}
 8018e2c:	bf00      	nop
 8018e2e:	e7fe      	b.n	8018e2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e36:	6850      	ldr	r0, [r2, #4]
 8018e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e3a:	6892      	ldr	r2, [r2, #8]
 8018e3c:	4611      	mov	r1, r2
 8018e3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	f2c0 80aa 	blt.w	8018f9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e4e:	695b      	ldr	r3, [r3, #20]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d004      	beq.n	8018e5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e56:	3304      	adds	r3, #4
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7fc fd41 	bl	80158e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018e5e:	463b      	mov	r3, r7
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7ff ff6b 	bl	8018d3c <prvSampleTimeNow>
 8018e66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	2b09      	cmp	r3, #9
 8018e6c:	f200 8097 	bhi.w	8018f9e <prvProcessReceivedCommands+0x19e>
 8018e70:	a201      	add	r2, pc, #4	; (adr r2, 8018e78 <prvProcessReceivedCommands+0x78>)
 8018e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e76:	bf00      	nop
 8018e78:	08018ea1 	.word	0x08018ea1
 8018e7c:	08018ea1 	.word	0x08018ea1
 8018e80:	08018ea1 	.word	0x08018ea1
 8018e84:	08018f15 	.word	0x08018f15
 8018e88:	08018f29 	.word	0x08018f29
 8018e8c:	08018f73 	.word	0x08018f73
 8018e90:	08018ea1 	.word	0x08018ea1
 8018e94:	08018ea1 	.word	0x08018ea1
 8018e98:	08018f15 	.word	0x08018f15
 8018e9c:	08018f29 	.word	0x08018f29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ea6:	f043 0301 	orr.w	r3, r3, #1
 8018eaa:	b2da      	uxtb	r2, r3
 8018eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018eb2:	68ba      	ldr	r2, [r7, #8]
 8018eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eb6:	699b      	ldr	r3, [r3, #24]
 8018eb8:	18d1      	adds	r1, r2, r3
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ec0:	f7ff ff5c 	bl	8018d7c <prvInsertTimerInActiveList>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d069      	beq.n	8018f9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ecc:	6a1b      	ldr	r3, [r3, #32]
 8018ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ed8:	f003 0304 	and.w	r3, r3, #4
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d05e      	beq.n	8018f9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018ee0:	68ba      	ldr	r2, [r7, #8]
 8018ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ee4:	699b      	ldr	r3, [r3, #24]
 8018ee6:	441a      	add	r2, r3
 8018ee8:	2300      	movs	r3, #0
 8018eea:	9300      	str	r3, [sp, #0]
 8018eec:	2300      	movs	r3, #0
 8018eee:	2100      	movs	r1, #0
 8018ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ef2:	f7ff fe05 	bl	8018b00 <xTimerGenericCommand>
 8018ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018ef8:	6a3b      	ldr	r3, [r7, #32]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d14f      	bne.n	8018f9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f02:	f383 8811 	msr	BASEPRI, r3
 8018f06:	f3bf 8f6f 	isb	sy
 8018f0a:	f3bf 8f4f 	dsb	sy
 8018f0e:	61bb      	str	r3, [r7, #24]
}
 8018f10:	bf00      	nop
 8018f12:	e7fe      	b.n	8018f12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f1a:	f023 0301 	bic.w	r3, r3, #1
 8018f1e:	b2da      	uxtb	r2, r3
 8018f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018f26:	e03a      	b.n	8018f9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f2e:	f043 0301 	orr.w	r3, r3, #1
 8018f32:	b2da      	uxtb	r2, r3
 8018f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018f3a:	68ba      	ldr	r2, [r7, #8]
 8018f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f42:	699b      	ldr	r3, [r3, #24]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d10a      	bne.n	8018f5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f4c:	f383 8811 	msr	BASEPRI, r3
 8018f50:	f3bf 8f6f 	isb	sy
 8018f54:	f3bf 8f4f 	dsb	sy
 8018f58:	617b      	str	r3, [r7, #20]
}
 8018f5a:	bf00      	nop
 8018f5c:	e7fe      	b.n	8018f5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f60:	699a      	ldr	r2, [r3, #24]
 8018f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f64:	18d1      	adds	r1, r2, r3
 8018f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f6c:	f7ff ff06 	bl	8018d7c <prvInsertTimerInActiveList>
					break;
 8018f70:	e015      	b.n	8018f9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f78:	f003 0302 	and.w	r3, r3, #2
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d103      	bne.n	8018f88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f82:	f000 fbfd 	bl	8019780 <vPortFree>
 8018f86:	e00a      	b.n	8018f9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f8e:	f023 0301 	bic.w	r3, r3, #1
 8018f92:	b2da      	uxtb	r2, r3
 8018f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018f9a:	e000      	b.n	8018f9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018f9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018f9e:	4b08      	ldr	r3, [pc, #32]	; (8018fc0 <prvProcessReceivedCommands+0x1c0>)
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	1d39      	adds	r1, r7, #4
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7fd fb3c 	bl	8016624 <xQueueReceive>
 8018fac:	4603      	mov	r3, r0
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	f47f af2a 	bne.w	8018e08 <prvProcessReceivedCommands+0x8>
	}
}
 8018fb4:	bf00      	nop
 8018fb6:	bf00      	nop
 8018fb8:	3730      	adds	r7, #48	; 0x30
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}
 8018fbe:	bf00      	nop
 8018fc0:	200010a8 	.word	0x200010a8

08018fc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b088      	sub	sp, #32
 8018fc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018fca:	e048      	b.n	801905e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018fcc:	4b2d      	ldr	r3, [pc, #180]	; (8019084 <prvSwitchTimerLists+0xc0>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	68db      	ldr	r3, [r3, #12]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018fd6:	4b2b      	ldr	r3, [pc, #172]	; (8019084 <prvSwitchTimerLists+0xc0>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	68db      	ldr	r3, [r3, #12]
 8018fdc:	68db      	ldr	r3, [r3, #12]
 8018fde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	3304      	adds	r3, #4
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7fc fc7b 	bl	80158e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	6a1b      	ldr	r3, [r3, #32]
 8018fee:	68f8      	ldr	r0, [r7, #12]
 8018ff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ff8:	f003 0304 	and.w	r3, r3, #4
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d02e      	beq.n	801905e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	699b      	ldr	r3, [r3, #24]
 8019004:	693a      	ldr	r2, [r7, #16]
 8019006:	4413      	add	r3, r2
 8019008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801900a:	68ba      	ldr	r2, [r7, #8]
 801900c:	693b      	ldr	r3, [r7, #16]
 801900e:	429a      	cmp	r2, r3
 8019010:	d90e      	bls.n	8019030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	68ba      	ldr	r2, [r7, #8]
 8019016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	68fa      	ldr	r2, [r7, #12]
 801901c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801901e:	4b19      	ldr	r3, [pc, #100]	; (8019084 <prvSwitchTimerLists+0xc0>)
 8019020:	681a      	ldr	r2, [r3, #0]
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	3304      	adds	r3, #4
 8019026:	4619      	mov	r1, r3
 8019028:	4610      	mov	r0, r2
 801902a:	f7fc fc20 	bl	801586e <vListInsert>
 801902e:	e016      	b.n	801905e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019030:	2300      	movs	r3, #0
 8019032:	9300      	str	r3, [sp, #0]
 8019034:	2300      	movs	r3, #0
 8019036:	693a      	ldr	r2, [r7, #16]
 8019038:	2100      	movs	r1, #0
 801903a:	68f8      	ldr	r0, [r7, #12]
 801903c:	f7ff fd60 	bl	8018b00 <xTimerGenericCommand>
 8019040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d10a      	bne.n	801905e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904c:	f383 8811 	msr	BASEPRI, r3
 8019050:	f3bf 8f6f 	isb	sy
 8019054:	f3bf 8f4f 	dsb	sy
 8019058:	603b      	str	r3, [r7, #0]
}
 801905a:	bf00      	nop
 801905c:	e7fe      	b.n	801905c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801905e:	4b09      	ldr	r3, [pc, #36]	; (8019084 <prvSwitchTimerLists+0xc0>)
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d1b1      	bne.n	8018fcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019068:	4b06      	ldr	r3, [pc, #24]	; (8019084 <prvSwitchTimerLists+0xc0>)
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801906e:	4b06      	ldr	r3, [pc, #24]	; (8019088 <prvSwitchTimerLists+0xc4>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	4a04      	ldr	r2, [pc, #16]	; (8019084 <prvSwitchTimerLists+0xc0>)
 8019074:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019076:	4a04      	ldr	r2, [pc, #16]	; (8019088 <prvSwitchTimerLists+0xc4>)
 8019078:	697b      	ldr	r3, [r7, #20]
 801907a:	6013      	str	r3, [r2, #0]
}
 801907c:	bf00      	nop
 801907e:	3718      	adds	r7, #24
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}
 8019084:	200010a0 	.word	0x200010a0
 8019088:	200010a4 	.word	0x200010a4

0801908c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b082      	sub	sp, #8
 8019090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019092:	f000 f977 	bl	8019384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019096:	4b15      	ldr	r3, [pc, #84]	; (80190ec <prvCheckForValidListAndQueue+0x60>)
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d120      	bne.n	80190e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801909e:	4814      	ldr	r0, [pc, #80]	; (80190f0 <prvCheckForValidListAndQueue+0x64>)
 80190a0:	f7fc fb94 	bl	80157cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80190a4:	4813      	ldr	r0, [pc, #76]	; (80190f4 <prvCheckForValidListAndQueue+0x68>)
 80190a6:	f7fc fb91 	bl	80157cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80190aa:	4b13      	ldr	r3, [pc, #76]	; (80190f8 <prvCheckForValidListAndQueue+0x6c>)
 80190ac:	4a10      	ldr	r2, [pc, #64]	; (80190f0 <prvCheckForValidListAndQueue+0x64>)
 80190ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80190b0:	4b12      	ldr	r3, [pc, #72]	; (80190fc <prvCheckForValidListAndQueue+0x70>)
 80190b2:	4a10      	ldr	r2, [pc, #64]	; (80190f4 <prvCheckForValidListAndQueue+0x68>)
 80190b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80190b6:	2300      	movs	r3, #0
 80190b8:	9300      	str	r3, [sp, #0]
 80190ba:	4b11      	ldr	r3, [pc, #68]	; (8019100 <prvCheckForValidListAndQueue+0x74>)
 80190bc:	4a11      	ldr	r2, [pc, #68]	; (8019104 <prvCheckForValidListAndQueue+0x78>)
 80190be:	2110      	movs	r1, #16
 80190c0:	200a      	movs	r0, #10
 80190c2:	f7fc fc9f 	bl	8015a04 <xQueueGenericCreateStatic>
 80190c6:	4603      	mov	r3, r0
 80190c8:	4a08      	ldr	r2, [pc, #32]	; (80190ec <prvCheckForValidListAndQueue+0x60>)
 80190ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80190cc:	4b07      	ldr	r3, [pc, #28]	; (80190ec <prvCheckForValidListAndQueue+0x60>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d005      	beq.n	80190e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80190d4:	4b05      	ldr	r3, [pc, #20]	; (80190ec <prvCheckForValidListAndQueue+0x60>)
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	490b      	ldr	r1, [pc, #44]	; (8019108 <prvCheckForValidListAndQueue+0x7c>)
 80190da:	4618      	mov	r0, r3
 80190dc:	f7fe f9bc 	bl	8017458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80190e0:	f000 f980 	bl	80193e4 <vPortExitCritical>
}
 80190e4:	bf00      	nop
 80190e6:	46bd      	mov	sp, r7
 80190e8:	bd80      	pop	{r7, pc}
 80190ea:	bf00      	nop
 80190ec:	200010a8 	.word	0x200010a8
 80190f0:	20001078 	.word	0x20001078
 80190f4:	2000108c 	.word	0x2000108c
 80190f8:	200010a0 	.word	0x200010a0
 80190fc:	200010a4 	.word	0x200010a4
 8019100:	20001154 	.word	0x20001154
 8019104:	200010b4 	.word	0x200010b4
 8019108:	0802127c 	.word	0x0802127c

0801910c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801910c:	b480      	push	{r7}
 801910e:	b085      	sub	sp, #20
 8019110:	af00      	add	r7, sp, #0
 8019112:	60f8      	str	r0, [r7, #12]
 8019114:	60b9      	str	r1, [r7, #8]
 8019116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	3b04      	subs	r3, #4
 801911c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	3b04      	subs	r3, #4
 801912a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	f023 0201 	bic.w	r2, r3, #1
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	3b04      	subs	r3, #4
 801913a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801913c:	4a0c      	ldr	r2, [pc, #48]	; (8019170 <pxPortInitialiseStack+0x64>)
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	3b14      	subs	r3, #20
 8019146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019148:	687a      	ldr	r2, [r7, #4]
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	3b04      	subs	r3, #4
 8019152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	f06f 0202 	mvn.w	r2, #2
 801915a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	3b20      	subs	r3, #32
 8019160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019162:	68fb      	ldr	r3, [r7, #12]
}
 8019164:	4618      	mov	r0, r3
 8019166:	3714      	adds	r7, #20
 8019168:	46bd      	mov	sp, r7
 801916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916e:	4770      	bx	lr
 8019170:	08019175 	.word	0x08019175

08019174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019174:	b480      	push	{r7}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801917a:	2300      	movs	r3, #0
 801917c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801917e:	4b12      	ldr	r3, [pc, #72]	; (80191c8 <prvTaskExitError+0x54>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019186:	d00a      	beq.n	801919e <prvTaskExitError+0x2a>
	__asm volatile
 8019188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801918c:	f383 8811 	msr	BASEPRI, r3
 8019190:	f3bf 8f6f 	isb	sy
 8019194:	f3bf 8f4f 	dsb	sy
 8019198:	60fb      	str	r3, [r7, #12]
}
 801919a:	bf00      	nop
 801919c:	e7fe      	b.n	801919c <prvTaskExitError+0x28>
	__asm volatile
 801919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191a2:	f383 8811 	msr	BASEPRI, r3
 80191a6:	f3bf 8f6f 	isb	sy
 80191aa:	f3bf 8f4f 	dsb	sy
 80191ae:	60bb      	str	r3, [r7, #8]
}
 80191b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80191b2:	bf00      	nop
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d0fc      	beq.n	80191b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80191ba:	bf00      	nop
 80191bc:	bf00      	nop
 80191be:	3714      	adds	r7, #20
 80191c0:	46bd      	mov	sp, r7
 80191c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c6:	4770      	bx	lr
 80191c8:	20000280 	.word	0x20000280
 80191cc:	00000000 	.word	0x00000000

080191d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80191d0:	4b07      	ldr	r3, [pc, #28]	; (80191f0 <pxCurrentTCBConst2>)
 80191d2:	6819      	ldr	r1, [r3, #0]
 80191d4:	6808      	ldr	r0, [r1, #0]
 80191d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191da:	f380 8809 	msr	PSP, r0
 80191de:	f3bf 8f6f 	isb	sy
 80191e2:	f04f 0000 	mov.w	r0, #0
 80191e6:	f380 8811 	msr	BASEPRI, r0
 80191ea:	4770      	bx	lr
 80191ec:	f3af 8000 	nop.w

080191f0 <pxCurrentTCBConst2>:
 80191f0:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80191f4:	bf00      	nop
 80191f6:	bf00      	nop

080191f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80191f8:	4808      	ldr	r0, [pc, #32]	; (801921c <prvPortStartFirstTask+0x24>)
 80191fa:	6800      	ldr	r0, [r0, #0]
 80191fc:	6800      	ldr	r0, [r0, #0]
 80191fe:	f380 8808 	msr	MSP, r0
 8019202:	f04f 0000 	mov.w	r0, #0
 8019206:	f380 8814 	msr	CONTROL, r0
 801920a:	b662      	cpsie	i
 801920c:	b661      	cpsie	f
 801920e:	f3bf 8f4f 	dsb	sy
 8019212:	f3bf 8f6f 	isb	sy
 8019216:	df00      	svc	0
 8019218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801921a:	bf00      	nop
 801921c:	e000ed08 	.word	0xe000ed08

08019220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b088      	sub	sp, #32
 8019224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019226:	4b4e      	ldr	r3, [pc, #312]	; (8019360 <xPortStartScheduler+0x140>)
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	4a4e      	ldr	r2, [pc, #312]	; (8019364 <xPortStartScheduler+0x144>)
 801922c:	4293      	cmp	r3, r2
 801922e:	d10a      	bne.n	8019246 <xPortStartScheduler+0x26>
	__asm volatile
 8019230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019234:	f383 8811 	msr	BASEPRI, r3
 8019238:	f3bf 8f6f 	isb	sy
 801923c:	f3bf 8f4f 	dsb	sy
 8019240:	61bb      	str	r3, [r7, #24]
}
 8019242:	bf00      	nop
 8019244:	e7fe      	b.n	8019244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019246:	4b46      	ldr	r3, [pc, #280]	; (8019360 <xPortStartScheduler+0x140>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	4a47      	ldr	r2, [pc, #284]	; (8019368 <xPortStartScheduler+0x148>)
 801924c:	4293      	cmp	r3, r2
 801924e:	d10a      	bne.n	8019266 <xPortStartScheduler+0x46>
	__asm volatile
 8019250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019254:	f383 8811 	msr	BASEPRI, r3
 8019258:	f3bf 8f6f 	isb	sy
 801925c:	f3bf 8f4f 	dsb	sy
 8019260:	617b      	str	r3, [r7, #20]
}
 8019262:	bf00      	nop
 8019264:	e7fe      	b.n	8019264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019266:	4b41      	ldr	r3, [pc, #260]	; (801936c <xPortStartScheduler+0x14c>)
 8019268:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801926a:	69fb      	ldr	r3, [r7, #28]
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	b2db      	uxtb	r3, r3
 8019270:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	22ff      	movs	r2, #255	; 0xff
 8019276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019278:	69fb      	ldr	r3, [r7, #28]
 801927a:	781b      	ldrb	r3, [r3, #0]
 801927c:	b2db      	uxtb	r3, r3
 801927e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019280:	79fb      	ldrb	r3, [r7, #7]
 8019282:	b2db      	uxtb	r3, r3
 8019284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019288:	b2da      	uxtb	r2, r3
 801928a:	4b39      	ldr	r3, [pc, #228]	; (8019370 <xPortStartScheduler+0x150>)
 801928c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801928e:	4b39      	ldr	r3, [pc, #228]	; (8019374 <xPortStartScheduler+0x154>)
 8019290:	2207      	movs	r2, #7
 8019292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019294:	e009      	b.n	80192aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019296:	4b37      	ldr	r3, [pc, #220]	; (8019374 <xPortStartScheduler+0x154>)
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	3b01      	subs	r3, #1
 801929c:	4a35      	ldr	r2, [pc, #212]	; (8019374 <xPortStartScheduler+0x154>)
 801929e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80192a0:	79fb      	ldrb	r3, [r7, #7]
 80192a2:	b2db      	uxtb	r3, r3
 80192a4:	005b      	lsls	r3, r3, #1
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80192aa:	79fb      	ldrb	r3, [r7, #7]
 80192ac:	b2db      	uxtb	r3, r3
 80192ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192b2:	2b80      	cmp	r3, #128	; 0x80
 80192b4:	d0ef      	beq.n	8019296 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80192b6:	4b2f      	ldr	r3, [pc, #188]	; (8019374 <xPortStartScheduler+0x154>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	f1c3 0307 	rsb	r3, r3, #7
 80192be:	2b04      	cmp	r3, #4
 80192c0:	d00a      	beq.n	80192d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80192c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192c6:	f383 8811 	msr	BASEPRI, r3
 80192ca:	f3bf 8f6f 	isb	sy
 80192ce:	f3bf 8f4f 	dsb	sy
 80192d2:	613b      	str	r3, [r7, #16]
}
 80192d4:	bf00      	nop
 80192d6:	e7fe      	b.n	80192d6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80192d8:	4b26      	ldr	r3, [pc, #152]	; (8019374 <xPortStartScheduler+0x154>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	f1c3 0307 	rsb	r3, r3, #7
 80192e0:	2b04      	cmp	r3, #4
 80192e2:	d00a      	beq.n	80192fa <xPortStartScheduler+0xda>
	__asm volatile
 80192e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e8:	f383 8811 	msr	BASEPRI, r3
 80192ec:	f3bf 8f6f 	isb	sy
 80192f0:	f3bf 8f4f 	dsb	sy
 80192f4:	60fb      	str	r3, [r7, #12]
}
 80192f6:	bf00      	nop
 80192f8:	e7fe      	b.n	80192f8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80192fa:	4b1e      	ldr	r3, [pc, #120]	; (8019374 <xPortStartScheduler+0x154>)
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	021b      	lsls	r3, r3, #8
 8019300:	4a1c      	ldr	r2, [pc, #112]	; (8019374 <xPortStartScheduler+0x154>)
 8019302:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019304:	4b1b      	ldr	r3, [pc, #108]	; (8019374 <xPortStartScheduler+0x154>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801930c:	4a19      	ldr	r2, [pc, #100]	; (8019374 <xPortStartScheduler+0x154>)
 801930e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	b2da      	uxtb	r2, r3
 8019314:	69fb      	ldr	r3, [r7, #28]
 8019316:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019318:	4b17      	ldr	r3, [pc, #92]	; (8019378 <xPortStartScheduler+0x158>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	4a16      	ldr	r2, [pc, #88]	; (8019378 <xPortStartScheduler+0x158>)
 801931e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019322:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019324:	4b14      	ldr	r3, [pc, #80]	; (8019378 <xPortStartScheduler+0x158>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	4a13      	ldr	r2, [pc, #76]	; (8019378 <xPortStartScheduler+0x158>)
 801932a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801932e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019330:	f000 f8dc 	bl	80194ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019334:	4b11      	ldr	r3, [pc, #68]	; (801937c <xPortStartScheduler+0x15c>)
 8019336:	2200      	movs	r2, #0
 8019338:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801933a:	f000 f8fb 	bl	8019534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801933e:	4b10      	ldr	r3, [pc, #64]	; (8019380 <xPortStartScheduler+0x160>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	4a0f      	ldr	r2, [pc, #60]	; (8019380 <xPortStartScheduler+0x160>)
 8019344:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019348:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801934a:	f7ff ff55 	bl	80191f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801934e:	f7fe fdd1 	bl	8017ef4 <vTaskSwitchContext>
	prvTaskExitError();
 8019352:	f7ff ff0f 	bl	8019174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019356:	2300      	movs	r3, #0
}
 8019358:	4618      	mov	r0, r3
 801935a:	3720      	adds	r7, #32
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}
 8019360:	e000ed00 	.word	0xe000ed00
 8019364:	410fc271 	.word	0x410fc271
 8019368:	410fc270 	.word	0x410fc270
 801936c:	e000e400 	.word	0xe000e400
 8019370:	200011a4 	.word	0x200011a4
 8019374:	200011a8 	.word	0x200011a8
 8019378:	e000ed20 	.word	0xe000ed20
 801937c:	20000280 	.word	0x20000280
 8019380:	e000ef34 	.word	0xe000ef34

08019384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019384:	b480      	push	{r7}
 8019386:	b083      	sub	sp, #12
 8019388:	af00      	add	r7, sp, #0
	__asm volatile
 801938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801938e:	f383 8811 	msr	BASEPRI, r3
 8019392:	f3bf 8f6f 	isb	sy
 8019396:	f3bf 8f4f 	dsb	sy
 801939a:	607b      	str	r3, [r7, #4]
}
 801939c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801939e:	4b0f      	ldr	r3, [pc, #60]	; (80193dc <vPortEnterCritical+0x58>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	3301      	adds	r3, #1
 80193a4:	4a0d      	ldr	r2, [pc, #52]	; (80193dc <vPortEnterCritical+0x58>)
 80193a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80193a8:	4b0c      	ldr	r3, [pc, #48]	; (80193dc <vPortEnterCritical+0x58>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d10f      	bne.n	80193d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80193b0:	4b0b      	ldr	r3, [pc, #44]	; (80193e0 <vPortEnterCritical+0x5c>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d00a      	beq.n	80193d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80193ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193be:	f383 8811 	msr	BASEPRI, r3
 80193c2:	f3bf 8f6f 	isb	sy
 80193c6:	f3bf 8f4f 	dsb	sy
 80193ca:	603b      	str	r3, [r7, #0]
}
 80193cc:	bf00      	nop
 80193ce:	e7fe      	b.n	80193ce <vPortEnterCritical+0x4a>
	}
}
 80193d0:	bf00      	nop
 80193d2:	370c      	adds	r7, #12
 80193d4:	46bd      	mov	sp, r7
 80193d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193da:	4770      	bx	lr
 80193dc:	20000280 	.word	0x20000280
 80193e0:	e000ed04 	.word	0xe000ed04

080193e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80193e4:	b480      	push	{r7}
 80193e6:	b083      	sub	sp, #12
 80193e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80193ea:	4b12      	ldr	r3, [pc, #72]	; (8019434 <vPortExitCritical+0x50>)
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d10a      	bne.n	8019408 <vPortExitCritical+0x24>
	__asm volatile
 80193f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193f6:	f383 8811 	msr	BASEPRI, r3
 80193fa:	f3bf 8f6f 	isb	sy
 80193fe:	f3bf 8f4f 	dsb	sy
 8019402:	607b      	str	r3, [r7, #4]
}
 8019404:	bf00      	nop
 8019406:	e7fe      	b.n	8019406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019408:	4b0a      	ldr	r3, [pc, #40]	; (8019434 <vPortExitCritical+0x50>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	3b01      	subs	r3, #1
 801940e:	4a09      	ldr	r2, [pc, #36]	; (8019434 <vPortExitCritical+0x50>)
 8019410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019412:	4b08      	ldr	r3, [pc, #32]	; (8019434 <vPortExitCritical+0x50>)
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d105      	bne.n	8019426 <vPortExitCritical+0x42>
 801941a:	2300      	movs	r3, #0
 801941c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801941e:	683b      	ldr	r3, [r7, #0]
 8019420:	f383 8811 	msr	BASEPRI, r3
}
 8019424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019426:	bf00      	nop
 8019428:	370c      	adds	r7, #12
 801942a:	46bd      	mov	sp, r7
 801942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019430:	4770      	bx	lr
 8019432:	bf00      	nop
 8019434:	20000280 	.word	0x20000280
	...

08019440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019440:	f3ef 8009 	mrs	r0, PSP
 8019444:	f3bf 8f6f 	isb	sy
 8019448:	4b15      	ldr	r3, [pc, #84]	; (80194a0 <pxCurrentTCBConst>)
 801944a:	681a      	ldr	r2, [r3, #0]
 801944c:	f01e 0f10 	tst.w	lr, #16
 8019450:	bf08      	it	eq
 8019452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801945a:	6010      	str	r0, [r2, #0]
 801945c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019464:	f380 8811 	msr	BASEPRI, r0
 8019468:	f3bf 8f4f 	dsb	sy
 801946c:	f3bf 8f6f 	isb	sy
 8019470:	f7fe fd40 	bl	8017ef4 <vTaskSwitchContext>
 8019474:	f04f 0000 	mov.w	r0, #0
 8019478:	f380 8811 	msr	BASEPRI, r0
 801947c:	bc09      	pop	{r0, r3}
 801947e:	6819      	ldr	r1, [r3, #0]
 8019480:	6808      	ldr	r0, [r1, #0]
 8019482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019486:	f01e 0f10 	tst.w	lr, #16
 801948a:	bf08      	it	eq
 801948c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019490:	f380 8809 	msr	PSP, r0
 8019494:	f3bf 8f6f 	isb	sy
 8019498:	4770      	bx	lr
 801949a:	bf00      	nop
 801949c:	f3af 8000 	nop.w

080194a0 <pxCurrentTCBConst>:
 80194a0:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80194a4:	bf00      	nop
 80194a6:	bf00      	nop

080194a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b082      	sub	sp, #8
 80194ac:	af00      	add	r7, sp, #0
	__asm volatile
 80194ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194b2:	f383 8811 	msr	BASEPRI, r3
 80194b6:	f3bf 8f6f 	isb	sy
 80194ba:	f3bf 8f4f 	dsb	sy
 80194be:	607b      	str	r3, [r7, #4]
}
 80194c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80194c2:	f7fe fc2b 	bl	8017d1c <xTaskIncrementTick>
 80194c6:	4603      	mov	r3, r0
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d003      	beq.n	80194d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80194cc:	4b06      	ldr	r3, [pc, #24]	; (80194e8 <xPortSysTickHandler+0x40>)
 80194ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80194d2:	601a      	str	r2, [r3, #0]
 80194d4:	2300      	movs	r3, #0
 80194d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80194d8:	683b      	ldr	r3, [r7, #0]
 80194da:	f383 8811 	msr	BASEPRI, r3
}
 80194de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80194e0:	bf00      	nop
 80194e2:	3708      	adds	r7, #8
 80194e4:	46bd      	mov	sp, r7
 80194e6:	bd80      	pop	{r7, pc}
 80194e8:	e000ed04 	.word	0xe000ed04

080194ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80194ec:	b480      	push	{r7}
 80194ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80194f0:	4b0b      	ldr	r3, [pc, #44]	; (8019520 <vPortSetupTimerInterrupt+0x34>)
 80194f2:	2200      	movs	r2, #0
 80194f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80194f6:	4b0b      	ldr	r3, [pc, #44]	; (8019524 <vPortSetupTimerInterrupt+0x38>)
 80194f8:	2200      	movs	r2, #0
 80194fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80194fc:	4b0a      	ldr	r3, [pc, #40]	; (8019528 <vPortSetupTimerInterrupt+0x3c>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	4a0a      	ldr	r2, [pc, #40]	; (801952c <vPortSetupTimerInterrupt+0x40>)
 8019502:	fba2 2303 	umull	r2, r3, r2, r3
 8019506:	099b      	lsrs	r3, r3, #6
 8019508:	4a09      	ldr	r2, [pc, #36]	; (8019530 <vPortSetupTimerInterrupt+0x44>)
 801950a:	3b01      	subs	r3, #1
 801950c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801950e:	4b04      	ldr	r3, [pc, #16]	; (8019520 <vPortSetupTimerInterrupt+0x34>)
 8019510:	2207      	movs	r2, #7
 8019512:	601a      	str	r2, [r3, #0]
}
 8019514:	bf00      	nop
 8019516:	46bd      	mov	sp, r7
 8019518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951c:	4770      	bx	lr
 801951e:	bf00      	nop
 8019520:	e000e010 	.word	0xe000e010
 8019524:	e000e018 	.word	0xe000e018
 8019528:	20000268 	.word	0x20000268
 801952c:	10624dd3 	.word	0x10624dd3
 8019530:	e000e014 	.word	0xe000e014

08019534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019544 <vPortEnableVFP+0x10>
 8019538:	6801      	ldr	r1, [r0, #0]
 801953a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801953e:	6001      	str	r1, [r0, #0]
 8019540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019542:	bf00      	nop
 8019544:	e000ed88 	.word	0xe000ed88

08019548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019548:	b480      	push	{r7}
 801954a:	b085      	sub	sp, #20
 801954c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801954e:	f3ef 8305 	mrs	r3, IPSR
 8019552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	2b0f      	cmp	r3, #15
 8019558:	d914      	bls.n	8019584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801955a:	4a17      	ldr	r2, [pc, #92]	; (80195b8 <vPortValidateInterruptPriority+0x70>)
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	4413      	add	r3, r2
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019564:	4b15      	ldr	r3, [pc, #84]	; (80195bc <vPortValidateInterruptPriority+0x74>)
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	7afa      	ldrb	r2, [r7, #11]
 801956a:	429a      	cmp	r2, r3
 801956c:	d20a      	bcs.n	8019584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019572:	f383 8811 	msr	BASEPRI, r3
 8019576:	f3bf 8f6f 	isb	sy
 801957a:	f3bf 8f4f 	dsb	sy
 801957e:	607b      	str	r3, [r7, #4]
}
 8019580:	bf00      	nop
 8019582:	e7fe      	b.n	8019582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019584:	4b0e      	ldr	r3, [pc, #56]	; (80195c0 <vPortValidateInterruptPriority+0x78>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801958c:	4b0d      	ldr	r3, [pc, #52]	; (80195c4 <vPortValidateInterruptPriority+0x7c>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	429a      	cmp	r2, r3
 8019592:	d90a      	bls.n	80195aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019598:	f383 8811 	msr	BASEPRI, r3
 801959c:	f3bf 8f6f 	isb	sy
 80195a0:	f3bf 8f4f 	dsb	sy
 80195a4:	603b      	str	r3, [r7, #0]
}
 80195a6:	bf00      	nop
 80195a8:	e7fe      	b.n	80195a8 <vPortValidateInterruptPriority+0x60>
	}
 80195aa:	bf00      	nop
 80195ac:	3714      	adds	r7, #20
 80195ae:	46bd      	mov	sp, r7
 80195b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b4:	4770      	bx	lr
 80195b6:	bf00      	nop
 80195b8:	e000e3f0 	.word	0xe000e3f0
 80195bc:	200011a4 	.word	0x200011a4
 80195c0:	e000ed0c 	.word	0xe000ed0c
 80195c4:	200011a8 	.word	0x200011a8

080195c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b08a      	sub	sp, #40	; 0x28
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80195d0:	2300      	movs	r3, #0
 80195d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80195d4:	f7fe fad2 	bl	8017b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80195d8:	4b63      	ldr	r3, [pc, #396]	; (8019768 <pvPortMalloc+0x1a0>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d101      	bne.n	80195e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80195e0:	f000 f938 	bl	8019854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80195e4:	4b61      	ldr	r3, [pc, #388]	; (801976c <pvPortMalloc+0x1a4>)
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	4013      	ands	r3, r2
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	f040 8093 	bne.w	8019718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d01d      	beq.n	8019634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80195f8:	2208      	movs	r2, #8
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	4413      	add	r3, r2
 80195fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	f003 0307 	and.w	r3, r3, #7
 8019606:	2b00      	cmp	r3, #0
 8019608:	d014      	beq.n	8019634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	f023 0307 	bic.w	r3, r3, #7
 8019610:	3308      	adds	r3, #8
 8019612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	f003 0307 	and.w	r3, r3, #7
 801961a:	2b00      	cmp	r3, #0
 801961c:	d00a      	beq.n	8019634 <pvPortMalloc+0x6c>
	__asm volatile
 801961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019622:	f383 8811 	msr	BASEPRI, r3
 8019626:	f3bf 8f6f 	isb	sy
 801962a:	f3bf 8f4f 	dsb	sy
 801962e:	617b      	str	r3, [r7, #20]
}
 8019630:	bf00      	nop
 8019632:	e7fe      	b.n	8019632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d06e      	beq.n	8019718 <pvPortMalloc+0x150>
 801963a:	4b4d      	ldr	r3, [pc, #308]	; (8019770 <pvPortMalloc+0x1a8>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	687a      	ldr	r2, [r7, #4]
 8019640:	429a      	cmp	r2, r3
 8019642:	d869      	bhi.n	8019718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019644:	4b4b      	ldr	r3, [pc, #300]	; (8019774 <pvPortMalloc+0x1ac>)
 8019646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019648:	4b4a      	ldr	r3, [pc, #296]	; (8019774 <pvPortMalloc+0x1ac>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801964e:	e004      	b.n	801965a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801965c:	685b      	ldr	r3, [r3, #4]
 801965e:	687a      	ldr	r2, [r7, #4]
 8019660:	429a      	cmp	r2, r3
 8019662:	d903      	bls.n	801966c <pvPortMalloc+0xa4>
 8019664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d1f1      	bne.n	8019650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801966c:	4b3e      	ldr	r3, [pc, #248]	; (8019768 <pvPortMalloc+0x1a0>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019672:	429a      	cmp	r2, r3
 8019674:	d050      	beq.n	8019718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019676:	6a3b      	ldr	r3, [r7, #32]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	2208      	movs	r2, #8
 801967c:	4413      	add	r3, r2
 801967e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019682:	681a      	ldr	r2, [r3, #0]
 8019684:	6a3b      	ldr	r3, [r7, #32]
 8019686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801968a:	685a      	ldr	r2, [r3, #4]
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	1ad2      	subs	r2, r2, r3
 8019690:	2308      	movs	r3, #8
 8019692:	005b      	lsls	r3, r3, #1
 8019694:	429a      	cmp	r2, r3
 8019696:	d91f      	bls.n	80196d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	4413      	add	r3, r2
 801969e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80196a0:	69bb      	ldr	r3, [r7, #24]
 80196a2:	f003 0307 	and.w	r3, r3, #7
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d00a      	beq.n	80196c0 <pvPortMalloc+0xf8>
	__asm volatile
 80196aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196ae:	f383 8811 	msr	BASEPRI, r3
 80196b2:	f3bf 8f6f 	isb	sy
 80196b6:	f3bf 8f4f 	dsb	sy
 80196ba:	613b      	str	r3, [r7, #16]
}
 80196bc:	bf00      	nop
 80196be:	e7fe      	b.n	80196be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80196c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c2:	685a      	ldr	r2, [r3, #4]
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	1ad2      	subs	r2, r2, r3
 80196c8:	69bb      	ldr	r3, [r7, #24]
 80196ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80196cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ce:	687a      	ldr	r2, [r7, #4]
 80196d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80196d2:	69b8      	ldr	r0, [r7, #24]
 80196d4:	f000 f920 	bl	8019918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80196d8:	4b25      	ldr	r3, [pc, #148]	; (8019770 <pvPortMalloc+0x1a8>)
 80196da:	681a      	ldr	r2, [r3, #0]
 80196dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196de:	685b      	ldr	r3, [r3, #4]
 80196e0:	1ad3      	subs	r3, r2, r3
 80196e2:	4a23      	ldr	r2, [pc, #140]	; (8019770 <pvPortMalloc+0x1a8>)
 80196e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80196e6:	4b22      	ldr	r3, [pc, #136]	; (8019770 <pvPortMalloc+0x1a8>)
 80196e8:	681a      	ldr	r2, [r3, #0]
 80196ea:	4b23      	ldr	r3, [pc, #140]	; (8019778 <pvPortMalloc+0x1b0>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	d203      	bcs.n	80196fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80196f2:	4b1f      	ldr	r3, [pc, #124]	; (8019770 <pvPortMalloc+0x1a8>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	4a20      	ldr	r2, [pc, #128]	; (8019778 <pvPortMalloc+0x1b0>)
 80196f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80196fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196fc:	685a      	ldr	r2, [r3, #4]
 80196fe:	4b1b      	ldr	r3, [pc, #108]	; (801976c <pvPortMalloc+0x1a4>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	431a      	orrs	r2, r3
 8019704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970a:	2200      	movs	r2, #0
 801970c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801970e:	4b1b      	ldr	r3, [pc, #108]	; (801977c <pvPortMalloc+0x1b4>)
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	3301      	adds	r3, #1
 8019714:	4a19      	ldr	r2, [pc, #100]	; (801977c <pvPortMalloc+0x1b4>)
 8019716:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8019718:	69fb      	ldr	r3, [r7, #28]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d006      	beq.n	801972c <pvPortMalloc+0x164>
 801971e:	69fb      	ldr	r3, [r7, #28]
 8019720:	687a      	ldr	r2, [r7, #4]
 8019722:	4619      	mov	r1, r3
 8019724:	2094      	movs	r0, #148	; 0x94
 8019726:	f7f4 fbf5 	bl	800df14 <vTraceStoreMemMangEvent>
 801972a:	e005      	b.n	8019738 <pvPortMalloc+0x170>
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	687a      	ldr	r2, [r7, #4]
 8019730:	4619      	mov	r1, r3
 8019732:	20e8      	movs	r0, #232	; 0xe8
 8019734:	f7f4 fbee 	bl	800df14 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 8019738:	f7fe fa2e 	bl	8017b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801973c:	69fb      	ldr	r3, [r7, #28]
 801973e:	f003 0307 	and.w	r3, r3, #7
 8019742:	2b00      	cmp	r3, #0
 8019744:	d00a      	beq.n	801975c <pvPortMalloc+0x194>
	__asm volatile
 8019746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974a:	f383 8811 	msr	BASEPRI, r3
 801974e:	f3bf 8f6f 	isb	sy
 8019752:	f3bf 8f4f 	dsb	sy
 8019756:	60fb      	str	r3, [r7, #12]
}
 8019758:	bf00      	nop
 801975a:	e7fe      	b.n	801975a <pvPortMalloc+0x192>
	return pvReturn;
 801975c:	69fb      	ldr	r3, [r7, #28]
}
 801975e:	4618      	mov	r0, r3
 8019760:	3728      	adds	r7, #40	; 0x28
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	20004db4 	.word	0x20004db4
 801976c:	20004dc8 	.word	0x20004dc8
 8019770:	20004db8 	.word	0x20004db8
 8019774:	20004dac 	.word	0x20004dac
 8019778:	20004dbc 	.word	0x20004dbc
 801977c:	20004dc0 	.word	0x20004dc0

08019780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b086      	sub	sp, #24
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d055      	beq.n	801983e <vPortFree+0xbe>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019792:	2308      	movs	r3, #8
 8019794:	425b      	negs	r3, r3
 8019796:	697a      	ldr	r2, [r7, #20]
 8019798:	4413      	add	r3, r2
 801979a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801979c:	697b      	ldr	r3, [r7, #20]
 801979e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80197a0:	693b      	ldr	r3, [r7, #16]
 80197a2:	685a      	ldr	r2, [r3, #4]
 80197a4:	4b28      	ldr	r3, [pc, #160]	; (8019848 <vPortFree+0xc8>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	4013      	ands	r3, r2
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d10a      	bne.n	80197c4 <vPortFree+0x44>
	__asm volatile
 80197ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b2:	f383 8811 	msr	BASEPRI, r3
 80197b6:	f3bf 8f6f 	isb	sy
 80197ba:	f3bf 8f4f 	dsb	sy
 80197be:	60fb      	str	r3, [r7, #12]
}
 80197c0:	bf00      	nop
 80197c2:	e7fe      	b.n	80197c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80197c4:	693b      	ldr	r3, [r7, #16]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d00a      	beq.n	80197e2 <vPortFree+0x62>
	__asm volatile
 80197cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197d0:	f383 8811 	msr	BASEPRI, r3
 80197d4:	f3bf 8f6f 	isb	sy
 80197d8:	f3bf 8f4f 	dsb	sy
 80197dc:	60bb      	str	r3, [r7, #8]
}
 80197de:	bf00      	nop
 80197e0:	e7fe      	b.n	80197e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80197e2:	693b      	ldr	r3, [r7, #16]
 80197e4:	685a      	ldr	r2, [r3, #4]
 80197e6:	4b18      	ldr	r3, [pc, #96]	; (8019848 <vPortFree+0xc8>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	4013      	ands	r3, r2
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d026      	beq.n	801983e <vPortFree+0xbe>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d122      	bne.n	801983e <vPortFree+0xbe>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80197f8:	693b      	ldr	r3, [r7, #16]
 80197fa:	685a      	ldr	r2, [r3, #4]
 80197fc:	4b12      	ldr	r3, [pc, #72]	; (8019848 <vPortFree+0xc8>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	43db      	mvns	r3, r3
 8019802:	401a      	ands	r2, r3
 8019804:	693b      	ldr	r3, [r7, #16]
 8019806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019808:	f7fe f9b8 	bl	8017b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801980c:	693b      	ldr	r3, [r7, #16]
 801980e:	685a      	ldr	r2, [r3, #4]
 8019810:	4b0e      	ldr	r3, [pc, #56]	; (801984c <vPortFree+0xcc>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	4413      	add	r3, r2
 8019816:	4a0d      	ldr	r2, [pc, #52]	; (801984c <vPortFree+0xcc>)
 8019818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 801981a:	6879      	ldr	r1, [r7, #4]
 801981c:	693b      	ldr	r3, [r7, #16]
 801981e:	685b      	ldr	r3, [r3, #4]
 8019820:	425b      	negs	r3, r3
 8019822:	461a      	mov	r2, r3
 8019824:	2096      	movs	r0, #150	; 0x96
 8019826:	f7f4 fb75 	bl	800df14 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801982a:	6938      	ldr	r0, [r7, #16]
 801982c:	f000 f874 	bl	8019918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019830:	4b07      	ldr	r3, [pc, #28]	; (8019850 <vPortFree+0xd0>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	3301      	adds	r3, #1
 8019836:	4a06      	ldr	r2, [pc, #24]	; (8019850 <vPortFree+0xd0>)
 8019838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801983a:	f7fe f9ad 	bl	8017b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801983e:	bf00      	nop
 8019840:	3718      	adds	r7, #24
 8019842:	46bd      	mov	sp, r7
 8019844:	bd80      	pop	{r7, pc}
 8019846:	bf00      	nop
 8019848:	20004dc8 	.word	0x20004dc8
 801984c:	20004db8 	.word	0x20004db8
 8019850:	20004dc4 	.word	0x20004dc4

08019854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019854:	b480      	push	{r7}
 8019856:	b085      	sub	sp, #20
 8019858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801985a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801985e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019860:	4b27      	ldr	r3, [pc, #156]	; (8019900 <prvHeapInit+0xac>)
 8019862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	f003 0307 	and.w	r3, r3, #7
 801986a:	2b00      	cmp	r3, #0
 801986c:	d00c      	beq.n	8019888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	3307      	adds	r3, #7
 8019872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	f023 0307 	bic.w	r3, r3, #7
 801987a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801987c:	68ba      	ldr	r2, [r7, #8]
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	1ad3      	subs	r3, r2, r3
 8019882:	4a1f      	ldr	r2, [pc, #124]	; (8019900 <prvHeapInit+0xac>)
 8019884:	4413      	add	r3, r2
 8019886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801988c:	4a1d      	ldr	r2, [pc, #116]	; (8019904 <prvHeapInit+0xb0>)
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019892:	4b1c      	ldr	r3, [pc, #112]	; (8019904 <prvHeapInit+0xb0>)
 8019894:	2200      	movs	r2, #0
 8019896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	68ba      	ldr	r2, [r7, #8]
 801989c:	4413      	add	r3, r2
 801989e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80198a0:	2208      	movs	r2, #8
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	1a9b      	subs	r3, r3, r2
 80198a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	f023 0307 	bic.w	r3, r3, #7
 80198ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	4a15      	ldr	r2, [pc, #84]	; (8019908 <prvHeapInit+0xb4>)
 80198b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80198b6:	4b14      	ldr	r3, [pc, #80]	; (8019908 <prvHeapInit+0xb4>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	2200      	movs	r2, #0
 80198bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80198be:	4b12      	ldr	r3, [pc, #72]	; (8019908 <prvHeapInit+0xb4>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	2200      	movs	r2, #0
 80198c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	68fa      	ldr	r2, [r7, #12]
 80198ce:	1ad2      	subs	r2, r2, r3
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80198d4:	4b0c      	ldr	r3, [pc, #48]	; (8019908 <prvHeapInit+0xb4>)
 80198d6:	681a      	ldr	r2, [r3, #0]
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	685b      	ldr	r3, [r3, #4]
 80198e0:	4a0a      	ldr	r2, [pc, #40]	; (801990c <prvHeapInit+0xb8>)
 80198e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80198e4:	683b      	ldr	r3, [r7, #0]
 80198e6:	685b      	ldr	r3, [r3, #4]
 80198e8:	4a09      	ldr	r2, [pc, #36]	; (8019910 <prvHeapInit+0xbc>)
 80198ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80198ec:	4b09      	ldr	r3, [pc, #36]	; (8019914 <prvHeapInit+0xc0>)
 80198ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80198f2:	601a      	str	r2, [r3, #0]
}
 80198f4:	bf00      	nop
 80198f6:	3714      	adds	r7, #20
 80198f8:	46bd      	mov	sp, r7
 80198fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fe:	4770      	bx	lr
 8019900:	200011ac 	.word	0x200011ac
 8019904:	20004dac 	.word	0x20004dac
 8019908:	20004db4 	.word	0x20004db4
 801990c:	20004dbc 	.word	0x20004dbc
 8019910:	20004db8 	.word	0x20004db8
 8019914:	20004dc8 	.word	0x20004dc8

08019918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019918:	b480      	push	{r7}
 801991a:	b085      	sub	sp, #20
 801991c:	af00      	add	r7, sp, #0
 801991e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019920:	4b28      	ldr	r3, [pc, #160]	; (80199c4 <prvInsertBlockIntoFreeList+0xac>)
 8019922:	60fb      	str	r3, [r7, #12]
 8019924:	e002      	b.n	801992c <prvInsertBlockIntoFreeList+0x14>
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	60fb      	str	r3, [r7, #12]
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	687a      	ldr	r2, [r7, #4]
 8019932:	429a      	cmp	r2, r3
 8019934:	d8f7      	bhi.n	8019926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	685b      	ldr	r3, [r3, #4]
 801993e:	68ba      	ldr	r2, [r7, #8]
 8019940:	4413      	add	r3, r2
 8019942:	687a      	ldr	r2, [r7, #4]
 8019944:	429a      	cmp	r2, r3
 8019946:	d108      	bne.n	801995a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	685a      	ldr	r2, [r3, #4]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	685b      	ldr	r3, [r3, #4]
 8019950:	441a      	add	r2, r3
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	685b      	ldr	r3, [r3, #4]
 8019962:	68ba      	ldr	r2, [r7, #8]
 8019964:	441a      	add	r2, r3
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	429a      	cmp	r2, r3
 801996c:	d118      	bne.n	80199a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	681a      	ldr	r2, [r3, #0]
 8019972:	4b15      	ldr	r3, [pc, #84]	; (80199c8 <prvInsertBlockIntoFreeList+0xb0>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	429a      	cmp	r2, r3
 8019978:	d00d      	beq.n	8019996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	685b      	ldr	r3, [r3, #4]
 8019984:	441a      	add	r2, r3
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	681a      	ldr	r2, [r3, #0]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	601a      	str	r2, [r3, #0]
 8019994:	e008      	b.n	80199a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019996:	4b0c      	ldr	r3, [pc, #48]	; (80199c8 <prvInsertBlockIntoFreeList+0xb0>)
 8019998:	681a      	ldr	r2, [r3, #0]
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	601a      	str	r2, [r3, #0]
 801999e:	e003      	b.n	80199a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	681a      	ldr	r2, [r3, #0]
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80199a8:	68fa      	ldr	r2, [r7, #12]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	429a      	cmp	r2, r3
 80199ae:	d002      	beq.n	80199b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	687a      	ldr	r2, [r7, #4]
 80199b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80199b6:	bf00      	nop
 80199b8:	3714      	adds	r7, #20
 80199ba:	46bd      	mov	sp, r7
 80199bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c0:	4770      	bx	lr
 80199c2:	bf00      	nop
 80199c4:	20004dac 	.word	0x20004dac
 80199c8:	20004db4 	.word	0x20004db4

080199cc <__errno>:
 80199cc:	4b01      	ldr	r3, [pc, #4]	; (80199d4 <__errno+0x8>)
 80199ce:	6818      	ldr	r0, [r3, #0]
 80199d0:	4770      	bx	lr
 80199d2:	bf00      	nop
 80199d4:	20000284 	.word	0x20000284

080199d8 <__libc_init_array>:
 80199d8:	b570      	push	{r4, r5, r6, lr}
 80199da:	4d0d      	ldr	r5, [pc, #52]	; (8019a10 <__libc_init_array+0x38>)
 80199dc:	4c0d      	ldr	r4, [pc, #52]	; (8019a14 <__libc_init_array+0x3c>)
 80199de:	1b64      	subs	r4, r4, r5
 80199e0:	10a4      	asrs	r4, r4, #2
 80199e2:	2600      	movs	r6, #0
 80199e4:	42a6      	cmp	r6, r4
 80199e6:	d109      	bne.n	80199fc <__libc_init_array+0x24>
 80199e8:	4d0b      	ldr	r5, [pc, #44]	; (8019a18 <__libc_init_array+0x40>)
 80199ea:	4c0c      	ldr	r4, [pc, #48]	; (8019a1c <__libc_init_array+0x44>)
 80199ec:	f005 ff2e 	bl	801f84c <_init>
 80199f0:	1b64      	subs	r4, r4, r5
 80199f2:	10a4      	asrs	r4, r4, #2
 80199f4:	2600      	movs	r6, #0
 80199f6:	42a6      	cmp	r6, r4
 80199f8:	d105      	bne.n	8019a06 <__libc_init_array+0x2e>
 80199fa:	bd70      	pop	{r4, r5, r6, pc}
 80199fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a00:	4798      	blx	r3
 8019a02:	3601      	adds	r6, #1
 8019a04:	e7ee      	b.n	80199e4 <__libc_init_array+0xc>
 8019a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a0a:	4798      	blx	r3
 8019a0c:	3601      	adds	r6, #1
 8019a0e:	e7f2      	b.n	80199f6 <__libc_init_array+0x1e>
 8019a10:	08021b8c 	.word	0x08021b8c
 8019a14:	08021b8c 	.word	0x08021b8c
 8019a18:	08021b8c 	.word	0x08021b8c
 8019a1c:	08021b90 	.word	0x08021b90

08019a20 <memcpy>:
 8019a20:	440a      	add	r2, r1
 8019a22:	4291      	cmp	r1, r2
 8019a24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019a28:	d100      	bne.n	8019a2c <memcpy+0xc>
 8019a2a:	4770      	bx	lr
 8019a2c:	b510      	push	{r4, lr}
 8019a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a36:	4291      	cmp	r1, r2
 8019a38:	d1f9      	bne.n	8019a2e <memcpy+0xe>
 8019a3a:	bd10      	pop	{r4, pc}

08019a3c <memset>:
 8019a3c:	4402      	add	r2, r0
 8019a3e:	4603      	mov	r3, r0
 8019a40:	4293      	cmp	r3, r2
 8019a42:	d100      	bne.n	8019a46 <memset+0xa>
 8019a44:	4770      	bx	lr
 8019a46:	f803 1b01 	strb.w	r1, [r3], #1
 8019a4a:	e7f9      	b.n	8019a40 <memset+0x4>

08019a4c <__cvt>:
 8019a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019a50:	ec55 4b10 	vmov	r4, r5, d0
 8019a54:	2d00      	cmp	r5, #0
 8019a56:	460e      	mov	r6, r1
 8019a58:	4619      	mov	r1, r3
 8019a5a:	462b      	mov	r3, r5
 8019a5c:	bfbb      	ittet	lt
 8019a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019a62:	461d      	movlt	r5, r3
 8019a64:	2300      	movge	r3, #0
 8019a66:	232d      	movlt	r3, #45	; 0x2d
 8019a68:	700b      	strb	r3, [r1, #0]
 8019a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019a70:	4691      	mov	r9, r2
 8019a72:	f023 0820 	bic.w	r8, r3, #32
 8019a76:	bfbc      	itt	lt
 8019a78:	4622      	movlt	r2, r4
 8019a7a:	4614      	movlt	r4, r2
 8019a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019a80:	d005      	beq.n	8019a8e <__cvt+0x42>
 8019a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019a86:	d100      	bne.n	8019a8a <__cvt+0x3e>
 8019a88:	3601      	adds	r6, #1
 8019a8a:	2102      	movs	r1, #2
 8019a8c:	e000      	b.n	8019a90 <__cvt+0x44>
 8019a8e:	2103      	movs	r1, #3
 8019a90:	ab03      	add	r3, sp, #12
 8019a92:	9301      	str	r3, [sp, #4]
 8019a94:	ab02      	add	r3, sp, #8
 8019a96:	9300      	str	r3, [sp, #0]
 8019a98:	ec45 4b10 	vmov	d0, r4, r5
 8019a9c:	4653      	mov	r3, sl
 8019a9e:	4632      	mov	r2, r6
 8019aa0:	f001 fdc6 	bl	801b630 <_dtoa_r>
 8019aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019aa8:	4607      	mov	r7, r0
 8019aaa:	d102      	bne.n	8019ab2 <__cvt+0x66>
 8019aac:	f019 0f01 	tst.w	r9, #1
 8019ab0:	d022      	beq.n	8019af8 <__cvt+0xac>
 8019ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019ab6:	eb07 0906 	add.w	r9, r7, r6
 8019aba:	d110      	bne.n	8019ade <__cvt+0x92>
 8019abc:	783b      	ldrb	r3, [r7, #0]
 8019abe:	2b30      	cmp	r3, #48	; 0x30
 8019ac0:	d10a      	bne.n	8019ad8 <__cvt+0x8c>
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	4620      	mov	r0, r4
 8019ac8:	4629      	mov	r1, r5
 8019aca:	f7e6 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8019ace:	b918      	cbnz	r0, 8019ad8 <__cvt+0x8c>
 8019ad0:	f1c6 0601 	rsb	r6, r6, #1
 8019ad4:	f8ca 6000 	str.w	r6, [sl]
 8019ad8:	f8da 3000 	ldr.w	r3, [sl]
 8019adc:	4499      	add	r9, r3
 8019ade:	2200      	movs	r2, #0
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	4620      	mov	r0, r4
 8019ae4:	4629      	mov	r1, r5
 8019ae6:	f7e6 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8019aea:	b108      	cbz	r0, 8019af0 <__cvt+0xa4>
 8019aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8019af0:	2230      	movs	r2, #48	; 0x30
 8019af2:	9b03      	ldr	r3, [sp, #12]
 8019af4:	454b      	cmp	r3, r9
 8019af6:	d307      	bcc.n	8019b08 <__cvt+0xbc>
 8019af8:	9b03      	ldr	r3, [sp, #12]
 8019afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019afc:	1bdb      	subs	r3, r3, r7
 8019afe:	4638      	mov	r0, r7
 8019b00:	6013      	str	r3, [r2, #0]
 8019b02:	b004      	add	sp, #16
 8019b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b08:	1c59      	adds	r1, r3, #1
 8019b0a:	9103      	str	r1, [sp, #12]
 8019b0c:	701a      	strb	r2, [r3, #0]
 8019b0e:	e7f0      	b.n	8019af2 <__cvt+0xa6>

08019b10 <__exponent>:
 8019b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b12:	4603      	mov	r3, r0
 8019b14:	2900      	cmp	r1, #0
 8019b16:	bfb8      	it	lt
 8019b18:	4249      	neglt	r1, r1
 8019b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8019b1e:	bfb4      	ite	lt
 8019b20:	222d      	movlt	r2, #45	; 0x2d
 8019b22:	222b      	movge	r2, #43	; 0x2b
 8019b24:	2909      	cmp	r1, #9
 8019b26:	7042      	strb	r2, [r0, #1]
 8019b28:	dd2a      	ble.n	8019b80 <__exponent+0x70>
 8019b2a:	f10d 0407 	add.w	r4, sp, #7
 8019b2e:	46a4      	mov	ip, r4
 8019b30:	270a      	movs	r7, #10
 8019b32:	46a6      	mov	lr, r4
 8019b34:	460a      	mov	r2, r1
 8019b36:	fb91 f6f7 	sdiv	r6, r1, r7
 8019b3a:	fb07 1516 	mls	r5, r7, r6, r1
 8019b3e:	3530      	adds	r5, #48	; 0x30
 8019b40:	2a63      	cmp	r2, #99	; 0x63
 8019b42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019b46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019b4a:	4631      	mov	r1, r6
 8019b4c:	dcf1      	bgt.n	8019b32 <__exponent+0x22>
 8019b4e:	3130      	adds	r1, #48	; 0x30
 8019b50:	f1ae 0502 	sub.w	r5, lr, #2
 8019b54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019b58:	1c44      	adds	r4, r0, #1
 8019b5a:	4629      	mov	r1, r5
 8019b5c:	4561      	cmp	r1, ip
 8019b5e:	d30a      	bcc.n	8019b76 <__exponent+0x66>
 8019b60:	f10d 0209 	add.w	r2, sp, #9
 8019b64:	eba2 020e 	sub.w	r2, r2, lr
 8019b68:	4565      	cmp	r5, ip
 8019b6a:	bf88      	it	hi
 8019b6c:	2200      	movhi	r2, #0
 8019b6e:	4413      	add	r3, r2
 8019b70:	1a18      	subs	r0, r3, r0
 8019b72:	b003      	add	sp, #12
 8019b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019b7e:	e7ed      	b.n	8019b5c <__exponent+0x4c>
 8019b80:	2330      	movs	r3, #48	; 0x30
 8019b82:	3130      	adds	r1, #48	; 0x30
 8019b84:	7083      	strb	r3, [r0, #2]
 8019b86:	70c1      	strb	r1, [r0, #3]
 8019b88:	1d03      	adds	r3, r0, #4
 8019b8a:	e7f1      	b.n	8019b70 <__exponent+0x60>

08019b8c <_printf_float>:
 8019b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b90:	ed2d 8b02 	vpush	{d8}
 8019b94:	b08d      	sub	sp, #52	; 0x34
 8019b96:	460c      	mov	r4, r1
 8019b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019b9c:	4616      	mov	r6, r2
 8019b9e:	461f      	mov	r7, r3
 8019ba0:	4605      	mov	r5, r0
 8019ba2:	f002 fea1 	bl	801c8e8 <_localeconv_r>
 8019ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8019baa:	4650      	mov	r0, sl
 8019bac:	f7e6 fb10 	bl	80001d0 <strlen>
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8019bb4:	6823      	ldr	r3, [r4, #0]
 8019bb6:	9305      	str	r3, [sp, #20]
 8019bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8019bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019bc0:	3307      	adds	r3, #7
 8019bc2:	f023 0307 	bic.w	r3, r3, #7
 8019bc6:	f103 0208 	add.w	r2, r3, #8
 8019bca:	f8c8 2000 	str.w	r2, [r8]
 8019bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019bd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019bda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019bde:	9307      	str	r3, [sp, #28]
 8019be0:	f8cd 8018 	str.w	r8, [sp, #24]
 8019be4:	ee08 0a10 	vmov	s16, r0
 8019be8:	4b9f      	ldr	r3, [pc, #636]	; (8019e68 <_printf_float+0x2dc>)
 8019bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019bf2:	f7e6 ff9b 	bl	8000b2c <__aeabi_dcmpun>
 8019bf6:	bb88      	cbnz	r0, 8019c5c <_printf_float+0xd0>
 8019bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019bfc:	4b9a      	ldr	r3, [pc, #616]	; (8019e68 <_printf_float+0x2dc>)
 8019bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c02:	f7e6 ff75 	bl	8000af0 <__aeabi_dcmple>
 8019c06:	bb48      	cbnz	r0, 8019c5c <_printf_float+0xd0>
 8019c08:	2200      	movs	r2, #0
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	4640      	mov	r0, r8
 8019c0e:	4649      	mov	r1, r9
 8019c10:	f7e6 ff64 	bl	8000adc <__aeabi_dcmplt>
 8019c14:	b110      	cbz	r0, 8019c1c <_printf_float+0x90>
 8019c16:	232d      	movs	r3, #45	; 0x2d
 8019c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c1c:	4b93      	ldr	r3, [pc, #588]	; (8019e6c <_printf_float+0x2e0>)
 8019c1e:	4894      	ldr	r0, [pc, #592]	; (8019e70 <_printf_float+0x2e4>)
 8019c20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019c24:	bf94      	ite	ls
 8019c26:	4698      	movls	r8, r3
 8019c28:	4680      	movhi	r8, r0
 8019c2a:	2303      	movs	r3, #3
 8019c2c:	6123      	str	r3, [r4, #16]
 8019c2e:	9b05      	ldr	r3, [sp, #20]
 8019c30:	f023 0204 	bic.w	r2, r3, #4
 8019c34:	6022      	str	r2, [r4, #0]
 8019c36:	f04f 0900 	mov.w	r9, #0
 8019c3a:	9700      	str	r7, [sp, #0]
 8019c3c:	4633      	mov	r3, r6
 8019c3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8019c40:	4621      	mov	r1, r4
 8019c42:	4628      	mov	r0, r5
 8019c44:	f000 f9d8 	bl	8019ff8 <_printf_common>
 8019c48:	3001      	adds	r0, #1
 8019c4a:	f040 8090 	bne.w	8019d6e <_printf_float+0x1e2>
 8019c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c52:	b00d      	add	sp, #52	; 0x34
 8019c54:	ecbd 8b02 	vpop	{d8}
 8019c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c5c:	4642      	mov	r2, r8
 8019c5e:	464b      	mov	r3, r9
 8019c60:	4640      	mov	r0, r8
 8019c62:	4649      	mov	r1, r9
 8019c64:	f7e6 ff62 	bl	8000b2c <__aeabi_dcmpun>
 8019c68:	b140      	cbz	r0, 8019c7c <_printf_float+0xf0>
 8019c6a:	464b      	mov	r3, r9
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	bfbc      	itt	lt
 8019c70:	232d      	movlt	r3, #45	; 0x2d
 8019c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019c76:	487f      	ldr	r0, [pc, #508]	; (8019e74 <_printf_float+0x2e8>)
 8019c78:	4b7f      	ldr	r3, [pc, #508]	; (8019e78 <_printf_float+0x2ec>)
 8019c7a:	e7d1      	b.n	8019c20 <_printf_float+0x94>
 8019c7c:	6863      	ldr	r3, [r4, #4]
 8019c7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019c82:	9206      	str	r2, [sp, #24]
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	d13f      	bne.n	8019d08 <_printf_float+0x17c>
 8019c88:	2306      	movs	r3, #6
 8019c8a:	6063      	str	r3, [r4, #4]
 8019c8c:	9b05      	ldr	r3, [sp, #20]
 8019c8e:	6861      	ldr	r1, [r4, #4]
 8019c90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019c94:	2300      	movs	r3, #0
 8019c96:	9303      	str	r3, [sp, #12]
 8019c98:	ab0a      	add	r3, sp, #40	; 0x28
 8019c9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8019c9e:	ab09      	add	r3, sp, #36	; 0x24
 8019ca0:	ec49 8b10 	vmov	d0, r8, r9
 8019ca4:	9300      	str	r3, [sp, #0]
 8019ca6:	6022      	str	r2, [r4, #0]
 8019ca8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019cac:	4628      	mov	r0, r5
 8019cae:	f7ff fecd 	bl	8019a4c <__cvt>
 8019cb2:	9b06      	ldr	r3, [sp, #24]
 8019cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019cb6:	2b47      	cmp	r3, #71	; 0x47
 8019cb8:	4680      	mov	r8, r0
 8019cba:	d108      	bne.n	8019cce <_printf_float+0x142>
 8019cbc:	1cc8      	adds	r0, r1, #3
 8019cbe:	db02      	blt.n	8019cc6 <_printf_float+0x13a>
 8019cc0:	6863      	ldr	r3, [r4, #4]
 8019cc2:	4299      	cmp	r1, r3
 8019cc4:	dd41      	ble.n	8019d4a <_printf_float+0x1be>
 8019cc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8019cca:	fa5f fb8b 	uxtb.w	fp, fp
 8019cce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019cd2:	d820      	bhi.n	8019d16 <_printf_float+0x18a>
 8019cd4:	3901      	subs	r1, #1
 8019cd6:	465a      	mov	r2, fp
 8019cd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019cdc:	9109      	str	r1, [sp, #36]	; 0x24
 8019cde:	f7ff ff17 	bl	8019b10 <__exponent>
 8019ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ce4:	1813      	adds	r3, r2, r0
 8019ce6:	2a01      	cmp	r2, #1
 8019ce8:	4681      	mov	r9, r0
 8019cea:	6123      	str	r3, [r4, #16]
 8019cec:	dc02      	bgt.n	8019cf4 <_printf_float+0x168>
 8019cee:	6822      	ldr	r2, [r4, #0]
 8019cf0:	07d2      	lsls	r2, r2, #31
 8019cf2:	d501      	bpl.n	8019cf8 <_printf_float+0x16c>
 8019cf4:	3301      	adds	r3, #1
 8019cf6:	6123      	str	r3, [r4, #16]
 8019cf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d09c      	beq.n	8019c3a <_printf_float+0xae>
 8019d00:	232d      	movs	r3, #45	; 0x2d
 8019d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d06:	e798      	b.n	8019c3a <_printf_float+0xae>
 8019d08:	9a06      	ldr	r2, [sp, #24]
 8019d0a:	2a47      	cmp	r2, #71	; 0x47
 8019d0c:	d1be      	bne.n	8019c8c <_printf_float+0x100>
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d1bc      	bne.n	8019c8c <_printf_float+0x100>
 8019d12:	2301      	movs	r3, #1
 8019d14:	e7b9      	b.n	8019c8a <_printf_float+0xfe>
 8019d16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019d1a:	d118      	bne.n	8019d4e <_printf_float+0x1c2>
 8019d1c:	2900      	cmp	r1, #0
 8019d1e:	6863      	ldr	r3, [r4, #4]
 8019d20:	dd0b      	ble.n	8019d3a <_printf_float+0x1ae>
 8019d22:	6121      	str	r1, [r4, #16]
 8019d24:	b913      	cbnz	r3, 8019d2c <_printf_float+0x1a0>
 8019d26:	6822      	ldr	r2, [r4, #0]
 8019d28:	07d0      	lsls	r0, r2, #31
 8019d2a:	d502      	bpl.n	8019d32 <_printf_float+0x1a6>
 8019d2c:	3301      	adds	r3, #1
 8019d2e:	440b      	add	r3, r1
 8019d30:	6123      	str	r3, [r4, #16]
 8019d32:	65a1      	str	r1, [r4, #88]	; 0x58
 8019d34:	f04f 0900 	mov.w	r9, #0
 8019d38:	e7de      	b.n	8019cf8 <_printf_float+0x16c>
 8019d3a:	b913      	cbnz	r3, 8019d42 <_printf_float+0x1b6>
 8019d3c:	6822      	ldr	r2, [r4, #0]
 8019d3e:	07d2      	lsls	r2, r2, #31
 8019d40:	d501      	bpl.n	8019d46 <_printf_float+0x1ba>
 8019d42:	3302      	adds	r3, #2
 8019d44:	e7f4      	b.n	8019d30 <_printf_float+0x1a4>
 8019d46:	2301      	movs	r3, #1
 8019d48:	e7f2      	b.n	8019d30 <_printf_float+0x1a4>
 8019d4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d50:	4299      	cmp	r1, r3
 8019d52:	db05      	blt.n	8019d60 <_printf_float+0x1d4>
 8019d54:	6823      	ldr	r3, [r4, #0]
 8019d56:	6121      	str	r1, [r4, #16]
 8019d58:	07d8      	lsls	r0, r3, #31
 8019d5a:	d5ea      	bpl.n	8019d32 <_printf_float+0x1a6>
 8019d5c:	1c4b      	adds	r3, r1, #1
 8019d5e:	e7e7      	b.n	8019d30 <_printf_float+0x1a4>
 8019d60:	2900      	cmp	r1, #0
 8019d62:	bfd4      	ite	le
 8019d64:	f1c1 0202 	rsble	r2, r1, #2
 8019d68:	2201      	movgt	r2, #1
 8019d6a:	4413      	add	r3, r2
 8019d6c:	e7e0      	b.n	8019d30 <_printf_float+0x1a4>
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	055a      	lsls	r2, r3, #21
 8019d72:	d407      	bmi.n	8019d84 <_printf_float+0x1f8>
 8019d74:	6923      	ldr	r3, [r4, #16]
 8019d76:	4642      	mov	r2, r8
 8019d78:	4631      	mov	r1, r6
 8019d7a:	4628      	mov	r0, r5
 8019d7c:	47b8      	blx	r7
 8019d7e:	3001      	adds	r0, #1
 8019d80:	d12c      	bne.n	8019ddc <_printf_float+0x250>
 8019d82:	e764      	b.n	8019c4e <_printf_float+0xc2>
 8019d84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019d88:	f240 80e0 	bls.w	8019f4c <_printf_float+0x3c0>
 8019d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019d90:	2200      	movs	r2, #0
 8019d92:	2300      	movs	r3, #0
 8019d94:	f7e6 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d98:	2800      	cmp	r0, #0
 8019d9a:	d034      	beq.n	8019e06 <_printf_float+0x27a>
 8019d9c:	4a37      	ldr	r2, [pc, #220]	; (8019e7c <_printf_float+0x2f0>)
 8019d9e:	2301      	movs	r3, #1
 8019da0:	4631      	mov	r1, r6
 8019da2:	4628      	mov	r0, r5
 8019da4:	47b8      	blx	r7
 8019da6:	3001      	adds	r0, #1
 8019da8:	f43f af51 	beq.w	8019c4e <_printf_float+0xc2>
 8019dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019db0:	429a      	cmp	r2, r3
 8019db2:	db02      	blt.n	8019dba <_printf_float+0x22e>
 8019db4:	6823      	ldr	r3, [r4, #0]
 8019db6:	07d8      	lsls	r0, r3, #31
 8019db8:	d510      	bpl.n	8019ddc <_printf_float+0x250>
 8019dba:	ee18 3a10 	vmov	r3, s16
 8019dbe:	4652      	mov	r2, sl
 8019dc0:	4631      	mov	r1, r6
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	47b8      	blx	r7
 8019dc6:	3001      	adds	r0, #1
 8019dc8:	f43f af41 	beq.w	8019c4e <_printf_float+0xc2>
 8019dcc:	f04f 0800 	mov.w	r8, #0
 8019dd0:	f104 091a 	add.w	r9, r4, #26
 8019dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dd6:	3b01      	subs	r3, #1
 8019dd8:	4543      	cmp	r3, r8
 8019dda:	dc09      	bgt.n	8019df0 <_printf_float+0x264>
 8019ddc:	6823      	ldr	r3, [r4, #0]
 8019dde:	079b      	lsls	r3, r3, #30
 8019de0:	f100 8105 	bmi.w	8019fee <_printf_float+0x462>
 8019de4:	68e0      	ldr	r0, [r4, #12]
 8019de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019de8:	4298      	cmp	r0, r3
 8019dea:	bfb8      	it	lt
 8019dec:	4618      	movlt	r0, r3
 8019dee:	e730      	b.n	8019c52 <_printf_float+0xc6>
 8019df0:	2301      	movs	r3, #1
 8019df2:	464a      	mov	r2, r9
 8019df4:	4631      	mov	r1, r6
 8019df6:	4628      	mov	r0, r5
 8019df8:	47b8      	blx	r7
 8019dfa:	3001      	adds	r0, #1
 8019dfc:	f43f af27 	beq.w	8019c4e <_printf_float+0xc2>
 8019e00:	f108 0801 	add.w	r8, r8, #1
 8019e04:	e7e6      	b.n	8019dd4 <_printf_float+0x248>
 8019e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	dc39      	bgt.n	8019e80 <_printf_float+0x2f4>
 8019e0c:	4a1b      	ldr	r2, [pc, #108]	; (8019e7c <_printf_float+0x2f0>)
 8019e0e:	2301      	movs	r3, #1
 8019e10:	4631      	mov	r1, r6
 8019e12:	4628      	mov	r0, r5
 8019e14:	47b8      	blx	r7
 8019e16:	3001      	adds	r0, #1
 8019e18:	f43f af19 	beq.w	8019c4e <_printf_float+0xc2>
 8019e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e20:	4313      	orrs	r3, r2
 8019e22:	d102      	bne.n	8019e2a <_printf_float+0x29e>
 8019e24:	6823      	ldr	r3, [r4, #0]
 8019e26:	07d9      	lsls	r1, r3, #31
 8019e28:	d5d8      	bpl.n	8019ddc <_printf_float+0x250>
 8019e2a:	ee18 3a10 	vmov	r3, s16
 8019e2e:	4652      	mov	r2, sl
 8019e30:	4631      	mov	r1, r6
 8019e32:	4628      	mov	r0, r5
 8019e34:	47b8      	blx	r7
 8019e36:	3001      	adds	r0, #1
 8019e38:	f43f af09 	beq.w	8019c4e <_printf_float+0xc2>
 8019e3c:	f04f 0900 	mov.w	r9, #0
 8019e40:	f104 0a1a 	add.w	sl, r4, #26
 8019e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e46:	425b      	negs	r3, r3
 8019e48:	454b      	cmp	r3, r9
 8019e4a:	dc01      	bgt.n	8019e50 <_printf_float+0x2c4>
 8019e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019e4e:	e792      	b.n	8019d76 <_printf_float+0x1ea>
 8019e50:	2301      	movs	r3, #1
 8019e52:	4652      	mov	r2, sl
 8019e54:	4631      	mov	r1, r6
 8019e56:	4628      	mov	r0, r5
 8019e58:	47b8      	blx	r7
 8019e5a:	3001      	adds	r0, #1
 8019e5c:	f43f aef7 	beq.w	8019c4e <_printf_float+0xc2>
 8019e60:	f109 0901 	add.w	r9, r9, #1
 8019e64:	e7ee      	b.n	8019e44 <_printf_float+0x2b8>
 8019e66:	bf00      	nop
 8019e68:	7fefffff 	.word	0x7fefffff
 8019e6c:	080212a8 	.word	0x080212a8
 8019e70:	080212ac 	.word	0x080212ac
 8019e74:	080212b4 	.word	0x080212b4
 8019e78:	080212b0 	.word	0x080212b0
 8019e7c:	080212b8 	.word	0x080212b8
 8019e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019e84:	429a      	cmp	r2, r3
 8019e86:	bfa8      	it	ge
 8019e88:	461a      	movge	r2, r3
 8019e8a:	2a00      	cmp	r2, #0
 8019e8c:	4691      	mov	r9, r2
 8019e8e:	dc37      	bgt.n	8019f00 <_printf_float+0x374>
 8019e90:	f04f 0b00 	mov.w	fp, #0
 8019e94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019e98:	f104 021a 	add.w	r2, r4, #26
 8019e9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019e9e:	9305      	str	r3, [sp, #20]
 8019ea0:	eba3 0309 	sub.w	r3, r3, r9
 8019ea4:	455b      	cmp	r3, fp
 8019ea6:	dc33      	bgt.n	8019f10 <_printf_float+0x384>
 8019ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019eac:	429a      	cmp	r2, r3
 8019eae:	db3b      	blt.n	8019f28 <_printf_float+0x39c>
 8019eb0:	6823      	ldr	r3, [r4, #0]
 8019eb2:	07da      	lsls	r2, r3, #31
 8019eb4:	d438      	bmi.n	8019f28 <_printf_float+0x39c>
 8019eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019eb8:	9b05      	ldr	r3, [sp, #20]
 8019eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019ebc:	1ad3      	subs	r3, r2, r3
 8019ebe:	eba2 0901 	sub.w	r9, r2, r1
 8019ec2:	4599      	cmp	r9, r3
 8019ec4:	bfa8      	it	ge
 8019ec6:	4699      	movge	r9, r3
 8019ec8:	f1b9 0f00 	cmp.w	r9, #0
 8019ecc:	dc35      	bgt.n	8019f3a <_printf_float+0x3ae>
 8019ece:	f04f 0800 	mov.w	r8, #0
 8019ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019ed6:	f104 0a1a 	add.w	sl, r4, #26
 8019eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019ede:	1a9b      	subs	r3, r3, r2
 8019ee0:	eba3 0309 	sub.w	r3, r3, r9
 8019ee4:	4543      	cmp	r3, r8
 8019ee6:	f77f af79 	ble.w	8019ddc <_printf_float+0x250>
 8019eea:	2301      	movs	r3, #1
 8019eec:	4652      	mov	r2, sl
 8019eee:	4631      	mov	r1, r6
 8019ef0:	4628      	mov	r0, r5
 8019ef2:	47b8      	blx	r7
 8019ef4:	3001      	adds	r0, #1
 8019ef6:	f43f aeaa 	beq.w	8019c4e <_printf_float+0xc2>
 8019efa:	f108 0801 	add.w	r8, r8, #1
 8019efe:	e7ec      	b.n	8019eda <_printf_float+0x34e>
 8019f00:	4613      	mov	r3, r2
 8019f02:	4631      	mov	r1, r6
 8019f04:	4642      	mov	r2, r8
 8019f06:	4628      	mov	r0, r5
 8019f08:	47b8      	blx	r7
 8019f0a:	3001      	adds	r0, #1
 8019f0c:	d1c0      	bne.n	8019e90 <_printf_float+0x304>
 8019f0e:	e69e      	b.n	8019c4e <_printf_float+0xc2>
 8019f10:	2301      	movs	r3, #1
 8019f12:	4631      	mov	r1, r6
 8019f14:	4628      	mov	r0, r5
 8019f16:	9205      	str	r2, [sp, #20]
 8019f18:	47b8      	blx	r7
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	f43f ae97 	beq.w	8019c4e <_printf_float+0xc2>
 8019f20:	9a05      	ldr	r2, [sp, #20]
 8019f22:	f10b 0b01 	add.w	fp, fp, #1
 8019f26:	e7b9      	b.n	8019e9c <_printf_float+0x310>
 8019f28:	ee18 3a10 	vmov	r3, s16
 8019f2c:	4652      	mov	r2, sl
 8019f2e:	4631      	mov	r1, r6
 8019f30:	4628      	mov	r0, r5
 8019f32:	47b8      	blx	r7
 8019f34:	3001      	adds	r0, #1
 8019f36:	d1be      	bne.n	8019eb6 <_printf_float+0x32a>
 8019f38:	e689      	b.n	8019c4e <_printf_float+0xc2>
 8019f3a:	9a05      	ldr	r2, [sp, #20]
 8019f3c:	464b      	mov	r3, r9
 8019f3e:	4442      	add	r2, r8
 8019f40:	4631      	mov	r1, r6
 8019f42:	4628      	mov	r0, r5
 8019f44:	47b8      	blx	r7
 8019f46:	3001      	adds	r0, #1
 8019f48:	d1c1      	bne.n	8019ece <_printf_float+0x342>
 8019f4a:	e680      	b.n	8019c4e <_printf_float+0xc2>
 8019f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019f4e:	2a01      	cmp	r2, #1
 8019f50:	dc01      	bgt.n	8019f56 <_printf_float+0x3ca>
 8019f52:	07db      	lsls	r3, r3, #31
 8019f54:	d538      	bpl.n	8019fc8 <_printf_float+0x43c>
 8019f56:	2301      	movs	r3, #1
 8019f58:	4642      	mov	r2, r8
 8019f5a:	4631      	mov	r1, r6
 8019f5c:	4628      	mov	r0, r5
 8019f5e:	47b8      	blx	r7
 8019f60:	3001      	adds	r0, #1
 8019f62:	f43f ae74 	beq.w	8019c4e <_printf_float+0xc2>
 8019f66:	ee18 3a10 	vmov	r3, s16
 8019f6a:	4652      	mov	r2, sl
 8019f6c:	4631      	mov	r1, r6
 8019f6e:	4628      	mov	r0, r5
 8019f70:	47b8      	blx	r7
 8019f72:	3001      	adds	r0, #1
 8019f74:	f43f ae6b 	beq.w	8019c4e <_printf_float+0xc2>
 8019f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	2300      	movs	r3, #0
 8019f80:	f7e6 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8019f84:	b9d8      	cbnz	r0, 8019fbe <_printf_float+0x432>
 8019f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f88:	f108 0201 	add.w	r2, r8, #1
 8019f8c:	3b01      	subs	r3, #1
 8019f8e:	4631      	mov	r1, r6
 8019f90:	4628      	mov	r0, r5
 8019f92:	47b8      	blx	r7
 8019f94:	3001      	adds	r0, #1
 8019f96:	d10e      	bne.n	8019fb6 <_printf_float+0x42a>
 8019f98:	e659      	b.n	8019c4e <_printf_float+0xc2>
 8019f9a:	2301      	movs	r3, #1
 8019f9c:	4652      	mov	r2, sl
 8019f9e:	4631      	mov	r1, r6
 8019fa0:	4628      	mov	r0, r5
 8019fa2:	47b8      	blx	r7
 8019fa4:	3001      	adds	r0, #1
 8019fa6:	f43f ae52 	beq.w	8019c4e <_printf_float+0xc2>
 8019faa:	f108 0801 	add.w	r8, r8, #1
 8019fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019fb0:	3b01      	subs	r3, #1
 8019fb2:	4543      	cmp	r3, r8
 8019fb4:	dcf1      	bgt.n	8019f9a <_printf_float+0x40e>
 8019fb6:	464b      	mov	r3, r9
 8019fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019fbc:	e6dc      	b.n	8019d78 <_printf_float+0x1ec>
 8019fbe:	f04f 0800 	mov.w	r8, #0
 8019fc2:	f104 0a1a 	add.w	sl, r4, #26
 8019fc6:	e7f2      	b.n	8019fae <_printf_float+0x422>
 8019fc8:	2301      	movs	r3, #1
 8019fca:	4642      	mov	r2, r8
 8019fcc:	e7df      	b.n	8019f8e <_printf_float+0x402>
 8019fce:	2301      	movs	r3, #1
 8019fd0:	464a      	mov	r2, r9
 8019fd2:	4631      	mov	r1, r6
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	47b8      	blx	r7
 8019fd8:	3001      	adds	r0, #1
 8019fda:	f43f ae38 	beq.w	8019c4e <_printf_float+0xc2>
 8019fde:	f108 0801 	add.w	r8, r8, #1
 8019fe2:	68e3      	ldr	r3, [r4, #12]
 8019fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019fe6:	1a5b      	subs	r3, r3, r1
 8019fe8:	4543      	cmp	r3, r8
 8019fea:	dcf0      	bgt.n	8019fce <_printf_float+0x442>
 8019fec:	e6fa      	b.n	8019de4 <_printf_float+0x258>
 8019fee:	f04f 0800 	mov.w	r8, #0
 8019ff2:	f104 0919 	add.w	r9, r4, #25
 8019ff6:	e7f4      	b.n	8019fe2 <_printf_float+0x456>

08019ff8 <_printf_common>:
 8019ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ffc:	4616      	mov	r6, r2
 8019ffe:	4699      	mov	r9, r3
 801a000:	688a      	ldr	r2, [r1, #8]
 801a002:	690b      	ldr	r3, [r1, #16]
 801a004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a008:	4293      	cmp	r3, r2
 801a00a:	bfb8      	it	lt
 801a00c:	4613      	movlt	r3, r2
 801a00e:	6033      	str	r3, [r6, #0]
 801a010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a014:	4607      	mov	r7, r0
 801a016:	460c      	mov	r4, r1
 801a018:	b10a      	cbz	r2, 801a01e <_printf_common+0x26>
 801a01a:	3301      	adds	r3, #1
 801a01c:	6033      	str	r3, [r6, #0]
 801a01e:	6823      	ldr	r3, [r4, #0]
 801a020:	0699      	lsls	r1, r3, #26
 801a022:	bf42      	ittt	mi
 801a024:	6833      	ldrmi	r3, [r6, #0]
 801a026:	3302      	addmi	r3, #2
 801a028:	6033      	strmi	r3, [r6, #0]
 801a02a:	6825      	ldr	r5, [r4, #0]
 801a02c:	f015 0506 	ands.w	r5, r5, #6
 801a030:	d106      	bne.n	801a040 <_printf_common+0x48>
 801a032:	f104 0a19 	add.w	sl, r4, #25
 801a036:	68e3      	ldr	r3, [r4, #12]
 801a038:	6832      	ldr	r2, [r6, #0]
 801a03a:	1a9b      	subs	r3, r3, r2
 801a03c:	42ab      	cmp	r3, r5
 801a03e:	dc26      	bgt.n	801a08e <_printf_common+0x96>
 801a040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a044:	1e13      	subs	r3, r2, #0
 801a046:	6822      	ldr	r2, [r4, #0]
 801a048:	bf18      	it	ne
 801a04a:	2301      	movne	r3, #1
 801a04c:	0692      	lsls	r2, r2, #26
 801a04e:	d42b      	bmi.n	801a0a8 <_printf_common+0xb0>
 801a050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a054:	4649      	mov	r1, r9
 801a056:	4638      	mov	r0, r7
 801a058:	47c0      	blx	r8
 801a05a:	3001      	adds	r0, #1
 801a05c:	d01e      	beq.n	801a09c <_printf_common+0xa4>
 801a05e:	6823      	ldr	r3, [r4, #0]
 801a060:	68e5      	ldr	r5, [r4, #12]
 801a062:	6832      	ldr	r2, [r6, #0]
 801a064:	f003 0306 	and.w	r3, r3, #6
 801a068:	2b04      	cmp	r3, #4
 801a06a:	bf08      	it	eq
 801a06c:	1aad      	subeq	r5, r5, r2
 801a06e:	68a3      	ldr	r3, [r4, #8]
 801a070:	6922      	ldr	r2, [r4, #16]
 801a072:	bf0c      	ite	eq
 801a074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a078:	2500      	movne	r5, #0
 801a07a:	4293      	cmp	r3, r2
 801a07c:	bfc4      	itt	gt
 801a07e:	1a9b      	subgt	r3, r3, r2
 801a080:	18ed      	addgt	r5, r5, r3
 801a082:	2600      	movs	r6, #0
 801a084:	341a      	adds	r4, #26
 801a086:	42b5      	cmp	r5, r6
 801a088:	d11a      	bne.n	801a0c0 <_printf_common+0xc8>
 801a08a:	2000      	movs	r0, #0
 801a08c:	e008      	b.n	801a0a0 <_printf_common+0xa8>
 801a08e:	2301      	movs	r3, #1
 801a090:	4652      	mov	r2, sl
 801a092:	4649      	mov	r1, r9
 801a094:	4638      	mov	r0, r7
 801a096:	47c0      	blx	r8
 801a098:	3001      	adds	r0, #1
 801a09a:	d103      	bne.n	801a0a4 <_printf_common+0xac>
 801a09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0a4:	3501      	adds	r5, #1
 801a0a6:	e7c6      	b.n	801a036 <_printf_common+0x3e>
 801a0a8:	18e1      	adds	r1, r4, r3
 801a0aa:	1c5a      	adds	r2, r3, #1
 801a0ac:	2030      	movs	r0, #48	; 0x30
 801a0ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a0b2:	4422      	add	r2, r4
 801a0b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a0b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a0bc:	3302      	adds	r3, #2
 801a0be:	e7c7      	b.n	801a050 <_printf_common+0x58>
 801a0c0:	2301      	movs	r3, #1
 801a0c2:	4622      	mov	r2, r4
 801a0c4:	4649      	mov	r1, r9
 801a0c6:	4638      	mov	r0, r7
 801a0c8:	47c0      	blx	r8
 801a0ca:	3001      	adds	r0, #1
 801a0cc:	d0e6      	beq.n	801a09c <_printf_common+0xa4>
 801a0ce:	3601      	adds	r6, #1
 801a0d0:	e7d9      	b.n	801a086 <_printf_common+0x8e>
	...

0801a0d4 <_printf_i>:
 801a0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a0d8:	460c      	mov	r4, r1
 801a0da:	4691      	mov	r9, r2
 801a0dc:	7e27      	ldrb	r7, [r4, #24]
 801a0de:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a0e0:	2f78      	cmp	r7, #120	; 0x78
 801a0e2:	4680      	mov	r8, r0
 801a0e4:	469a      	mov	sl, r3
 801a0e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a0ea:	d807      	bhi.n	801a0fc <_printf_i+0x28>
 801a0ec:	2f62      	cmp	r7, #98	; 0x62
 801a0ee:	d80a      	bhi.n	801a106 <_printf_i+0x32>
 801a0f0:	2f00      	cmp	r7, #0
 801a0f2:	f000 80d8 	beq.w	801a2a6 <_printf_i+0x1d2>
 801a0f6:	2f58      	cmp	r7, #88	; 0x58
 801a0f8:	f000 80a3 	beq.w	801a242 <_printf_i+0x16e>
 801a0fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a104:	e03a      	b.n	801a17c <_printf_i+0xa8>
 801a106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a10a:	2b15      	cmp	r3, #21
 801a10c:	d8f6      	bhi.n	801a0fc <_printf_i+0x28>
 801a10e:	a001      	add	r0, pc, #4	; (adr r0, 801a114 <_printf_i+0x40>)
 801a110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a114:	0801a16d 	.word	0x0801a16d
 801a118:	0801a181 	.word	0x0801a181
 801a11c:	0801a0fd 	.word	0x0801a0fd
 801a120:	0801a0fd 	.word	0x0801a0fd
 801a124:	0801a0fd 	.word	0x0801a0fd
 801a128:	0801a0fd 	.word	0x0801a0fd
 801a12c:	0801a181 	.word	0x0801a181
 801a130:	0801a0fd 	.word	0x0801a0fd
 801a134:	0801a0fd 	.word	0x0801a0fd
 801a138:	0801a0fd 	.word	0x0801a0fd
 801a13c:	0801a0fd 	.word	0x0801a0fd
 801a140:	0801a28d 	.word	0x0801a28d
 801a144:	0801a1b1 	.word	0x0801a1b1
 801a148:	0801a26f 	.word	0x0801a26f
 801a14c:	0801a0fd 	.word	0x0801a0fd
 801a150:	0801a0fd 	.word	0x0801a0fd
 801a154:	0801a2af 	.word	0x0801a2af
 801a158:	0801a0fd 	.word	0x0801a0fd
 801a15c:	0801a1b1 	.word	0x0801a1b1
 801a160:	0801a0fd 	.word	0x0801a0fd
 801a164:	0801a0fd 	.word	0x0801a0fd
 801a168:	0801a277 	.word	0x0801a277
 801a16c:	680b      	ldr	r3, [r1, #0]
 801a16e:	1d1a      	adds	r2, r3, #4
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	600a      	str	r2, [r1, #0]
 801a174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a17c:	2301      	movs	r3, #1
 801a17e:	e0a3      	b.n	801a2c8 <_printf_i+0x1f4>
 801a180:	6825      	ldr	r5, [r4, #0]
 801a182:	6808      	ldr	r0, [r1, #0]
 801a184:	062e      	lsls	r6, r5, #24
 801a186:	f100 0304 	add.w	r3, r0, #4
 801a18a:	d50a      	bpl.n	801a1a2 <_printf_i+0xce>
 801a18c:	6805      	ldr	r5, [r0, #0]
 801a18e:	600b      	str	r3, [r1, #0]
 801a190:	2d00      	cmp	r5, #0
 801a192:	da03      	bge.n	801a19c <_printf_i+0xc8>
 801a194:	232d      	movs	r3, #45	; 0x2d
 801a196:	426d      	negs	r5, r5
 801a198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a19c:	485e      	ldr	r0, [pc, #376]	; (801a318 <_printf_i+0x244>)
 801a19e:	230a      	movs	r3, #10
 801a1a0:	e019      	b.n	801a1d6 <_printf_i+0x102>
 801a1a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a1a6:	6805      	ldr	r5, [r0, #0]
 801a1a8:	600b      	str	r3, [r1, #0]
 801a1aa:	bf18      	it	ne
 801a1ac:	b22d      	sxthne	r5, r5
 801a1ae:	e7ef      	b.n	801a190 <_printf_i+0xbc>
 801a1b0:	680b      	ldr	r3, [r1, #0]
 801a1b2:	6825      	ldr	r5, [r4, #0]
 801a1b4:	1d18      	adds	r0, r3, #4
 801a1b6:	6008      	str	r0, [r1, #0]
 801a1b8:	0628      	lsls	r0, r5, #24
 801a1ba:	d501      	bpl.n	801a1c0 <_printf_i+0xec>
 801a1bc:	681d      	ldr	r5, [r3, #0]
 801a1be:	e002      	b.n	801a1c6 <_printf_i+0xf2>
 801a1c0:	0669      	lsls	r1, r5, #25
 801a1c2:	d5fb      	bpl.n	801a1bc <_printf_i+0xe8>
 801a1c4:	881d      	ldrh	r5, [r3, #0]
 801a1c6:	4854      	ldr	r0, [pc, #336]	; (801a318 <_printf_i+0x244>)
 801a1c8:	2f6f      	cmp	r7, #111	; 0x6f
 801a1ca:	bf0c      	ite	eq
 801a1cc:	2308      	moveq	r3, #8
 801a1ce:	230a      	movne	r3, #10
 801a1d0:	2100      	movs	r1, #0
 801a1d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a1d6:	6866      	ldr	r6, [r4, #4]
 801a1d8:	60a6      	str	r6, [r4, #8]
 801a1da:	2e00      	cmp	r6, #0
 801a1dc:	bfa2      	ittt	ge
 801a1de:	6821      	ldrge	r1, [r4, #0]
 801a1e0:	f021 0104 	bicge.w	r1, r1, #4
 801a1e4:	6021      	strge	r1, [r4, #0]
 801a1e6:	b90d      	cbnz	r5, 801a1ec <_printf_i+0x118>
 801a1e8:	2e00      	cmp	r6, #0
 801a1ea:	d04d      	beq.n	801a288 <_printf_i+0x1b4>
 801a1ec:	4616      	mov	r6, r2
 801a1ee:	fbb5 f1f3 	udiv	r1, r5, r3
 801a1f2:	fb03 5711 	mls	r7, r3, r1, r5
 801a1f6:	5dc7      	ldrb	r7, [r0, r7]
 801a1f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a1fc:	462f      	mov	r7, r5
 801a1fe:	42bb      	cmp	r3, r7
 801a200:	460d      	mov	r5, r1
 801a202:	d9f4      	bls.n	801a1ee <_printf_i+0x11a>
 801a204:	2b08      	cmp	r3, #8
 801a206:	d10b      	bne.n	801a220 <_printf_i+0x14c>
 801a208:	6823      	ldr	r3, [r4, #0]
 801a20a:	07df      	lsls	r7, r3, #31
 801a20c:	d508      	bpl.n	801a220 <_printf_i+0x14c>
 801a20e:	6923      	ldr	r3, [r4, #16]
 801a210:	6861      	ldr	r1, [r4, #4]
 801a212:	4299      	cmp	r1, r3
 801a214:	bfde      	ittt	le
 801a216:	2330      	movle	r3, #48	; 0x30
 801a218:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a21c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801a220:	1b92      	subs	r2, r2, r6
 801a222:	6122      	str	r2, [r4, #16]
 801a224:	f8cd a000 	str.w	sl, [sp]
 801a228:	464b      	mov	r3, r9
 801a22a:	aa03      	add	r2, sp, #12
 801a22c:	4621      	mov	r1, r4
 801a22e:	4640      	mov	r0, r8
 801a230:	f7ff fee2 	bl	8019ff8 <_printf_common>
 801a234:	3001      	adds	r0, #1
 801a236:	d14c      	bne.n	801a2d2 <_printf_i+0x1fe>
 801a238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a23c:	b004      	add	sp, #16
 801a23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a242:	4835      	ldr	r0, [pc, #212]	; (801a318 <_printf_i+0x244>)
 801a244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a248:	6823      	ldr	r3, [r4, #0]
 801a24a:	680e      	ldr	r6, [r1, #0]
 801a24c:	061f      	lsls	r7, r3, #24
 801a24e:	f856 5b04 	ldr.w	r5, [r6], #4
 801a252:	600e      	str	r6, [r1, #0]
 801a254:	d514      	bpl.n	801a280 <_printf_i+0x1ac>
 801a256:	07d9      	lsls	r1, r3, #31
 801a258:	bf44      	itt	mi
 801a25a:	f043 0320 	orrmi.w	r3, r3, #32
 801a25e:	6023      	strmi	r3, [r4, #0]
 801a260:	b91d      	cbnz	r5, 801a26a <_printf_i+0x196>
 801a262:	6823      	ldr	r3, [r4, #0]
 801a264:	f023 0320 	bic.w	r3, r3, #32
 801a268:	6023      	str	r3, [r4, #0]
 801a26a:	2310      	movs	r3, #16
 801a26c:	e7b0      	b.n	801a1d0 <_printf_i+0xfc>
 801a26e:	6823      	ldr	r3, [r4, #0]
 801a270:	f043 0320 	orr.w	r3, r3, #32
 801a274:	6023      	str	r3, [r4, #0]
 801a276:	2378      	movs	r3, #120	; 0x78
 801a278:	4828      	ldr	r0, [pc, #160]	; (801a31c <_printf_i+0x248>)
 801a27a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a27e:	e7e3      	b.n	801a248 <_printf_i+0x174>
 801a280:	065e      	lsls	r6, r3, #25
 801a282:	bf48      	it	mi
 801a284:	b2ad      	uxthmi	r5, r5
 801a286:	e7e6      	b.n	801a256 <_printf_i+0x182>
 801a288:	4616      	mov	r6, r2
 801a28a:	e7bb      	b.n	801a204 <_printf_i+0x130>
 801a28c:	680b      	ldr	r3, [r1, #0]
 801a28e:	6826      	ldr	r6, [r4, #0]
 801a290:	6960      	ldr	r0, [r4, #20]
 801a292:	1d1d      	adds	r5, r3, #4
 801a294:	600d      	str	r5, [r1, #0]
 801a296:	0635      	lsls	r5, r6, #24
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	d501      	bpl.n	801a2a0 <_printf_i+0x1cc>
 801a29c:	6018      	str	r0, [r3, #0]
 801a29e:	e002      	b.n	801a2a6 <_printf_i+0x1d2>
 801a2a0:	0671      	lsls	r1, r6, #25
 801a2a2:	d5fb      	bpl.n	801a29c <_printf_i+0x1c8>
 801a2a4:	8018      	strh	r0, [r3, #0]
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	6123      	str	r3, [r4, #16]
 801a2aa:	4616      	mov	r6, r2
 801a2ac:	e7ba      	b.n	801a224 <_printf_i+0x150>
 801a2ae:	680b      	ldr	r3, [r1, #0]
 801a2b0:	1d1a      	adds	r2, r3, #4
 801a2b2:	600a      	str	r2, [r1, #0]
 801a2b4:	681e      	ldr	r6, [r3, #0]
 801a2b6:	6862      	ldr	r2, [r4, #4]
 801a2b8:	2100      	movs	r1, #0
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	f7e5 ff90 	bl	80001e0 <memchr>
 801a2c0:	b108      	cbz	r0, 801a2c6 <_printf_i+0x1f2>
 801a2c2:	1b80      	subs	r0, r0, r6
 801a2c4:	6060      	str	r0, [r4, #4]
 801a2c6:	6863      	ldr	r3, [r4, #4]
 801a2c8:	6123      	str	r3, [r4, #16]
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2d0:	e7a8      	b.n	801a224 <_printf_i+0x150>
 801a2d2:	6923      	ldr	r3, [r4, #16]
 801a2d4:	4632      	mov	r2, r6
 801a2d6:	4649      	mov	r1, r9
 801a2d8:	4640      	mov	r0, r8
 801a2da:	47d0      	blx	sl
 801a2dc:	3001      	adds	r0, #1
 801a2de:	d0ab      	beq.n	801a238 <_printf_i+0x164>
 801a2e0:	6823      	ldr	r3, [r4, #0]
 801a2e2:	079b      	lsls	r3, r3, #30
 801a2e4:	d413      	bmi.n	801a30e <_printf_i+0x23a>
 801a2e6:	68e0      	ldr	r0, [r4, #12]
 801a2e8:	9b03      	ldr	r3, [sp, #12]
 801a2ea:	4298      	cmp	r0, r3
 801a2ec:	bfb8      	it	lt
 801a2ee:	4618      	movlt	r0, r3
 801a2f0:	e7a4      	b.n	801a23c <_printf_i+0x168>
 801a2f2:	2301      	movs	r3, #1
 801a2f4:	4632      	mov	r2, r6
 801a2f6:	4649      	mov	r1, r9
 801a2f8:	4640      	mov	r0, r8
 801a2fa:	47d0      	blx	sl
 801a2fc:	3001      	adds	r0, #1
 801a2fe:	d09b      	beq.n	801a238 <_printf_i+0x164>
 801a300:	3501      	adds	r5, #1
 801a302:	68e3      	ldr	r3, [r4, #12]
 801a304:	9903      	ldr	r1, [sp, #12]
 801a306:	1a5b      	subs	r3, r3, r1
 801a308:	42ab      	cmp	r3, r5
 801a30a:	dcf2      	bgt.n	801a2f2 <_printf_i+0x21e>
 801a30c:	e7eb      	b.n	801a2e6 <_printf_i+0x212>
 801a30e:	2500      	movs	r5, #0
 801a310:	f104 0619 	add.w	r6, r4, #25
 801a314:	e7f5      	b.n	801a302 <_printf_i+0x22e>
 801a316:	bf00      	nop
 801a318:	080212ba 	.word	0x080212ba
 801a31c:	080212cb 	.word	0x080212cb

0801a320 <_scanf_float>:
 801a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a324:	b087      	sub	sp, #28
 801a326:	4617      	mov	r7, r2
 801a328:	9303      	str	r3, [sp, #12]
 801a32a:	688b      	ldr	r3, [r1, #8]
 801a32c:	1e5a      	subs	r2, r3, #1
 801a32e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a332:	bf83      	ittte	hi
 801a334:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a338:	195b      	addhi	r3, r3, r5
 801a33a:	9302      	strhi	r3, [sp, #8]
 801a33c:	2300      	movls	r3, #0
 801a33e:	bf86      	itte	hi
 801a340:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a344:	608b      	strhi	r3, [r1, #8]
 801a346:	9302      	strls	r3, [sp, #8]
 801a348:	680b      	ldr	r3, [r1, #0]
 801a34a:	468b      	mov	fp, r1
 801a34c:	2500      	movs	r5, #0
 801a34e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a352:	f84b 3b1c 	str.w	r3, [fp], #28
 801a356:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a35a:	4680      	mov	r8, r0
 801a35c:	460c      	mov	r4, r1
 801a35e:	465e      	mov	r6, fp
 801a360:	46aa      	mov	sl, r5
 801a362:	46a9      	mov	r9, r5
 801a364:	9501      	str	r5, [sp, #4]
 801a366:	68a2      	ldr	r2, [r4, #8]
 801a368:	b152      	cbz	r2, 801a380 <_scanf_float+0x60>
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	2b4e      	cmp	r3, #78	; 0x4e
 801a370:	d864      	bhi.n	801a43c <_scanf_float+0x11c>
 801a372:	2b40      	cmp	r3, #64	; 0x40
 801a374:	d83c      	bhi.n	801a3f0 <_scanf_float+0xd0>
 801a376:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a37a:	b2c8      	uxtb	r0, r1
 801a37c:	280e      	cmp	r0, #14
 801a37e:	d93a      	bls.n	801a3f6 <_scanf_float+0xd6>
 801a380:	f1b9 0f00 	cmp.w	r9, #0
 801a384:	d003      	beq.n	801a38e <_scanf_float+0x6e>
 801a386:	6823      	ldr	r3, [r4, #0]
 801a388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a38c:	6023      	str	r3, [r4, #0]
 801a38e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a392:	f1ba 0f01 	cmp.w	sl, #1
 801a396:	f200 8113 	bhi.w	801a5c0 <_scanf_float+0x2a0>
 801a39a:	455e      	cmp	r6, fp
 801a39c:	f200 8105 	bhi.w	801a5aa <_scanf_float+0x28a>
 801a3a0:	2501      	movs	r5, #1
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	b007      	add	sp, #28
 801a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a3ae:	2a0d      	cmp	r2, #13
 801a3b0:	d8e6      	bhi.n	801a380 <_scanf_float+0x60>
 801a3b2:	a101      	add	r1, pc, #4	; (adr r1, 801a3b8 <_scanf_float+0x98>)
 801a3b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a3b8:	0801a4f7 	.word	0x0801a4f7
 801a3bc:	0801a381 	.word	0x0801a381
 801a3c0:	0801a381 	.word	0x0801a381
 801a3c4:	0801a381 	.word	0x0801a381
 801a3c8:	0801a557 	.word	0x0801a557
 801a3cc:	0801a52f 	.word	0x0801a52f
 801a3d0:	0801a381 	.word	0x0801a381
 801a3d4:	0801a381 	.word	0x0801a381
 801a3d8:	0801a505 	.word	0x0801a505
 801a3dc:	0801a381 	.word	0x0801a381
 801a3e0:	0801a381 	.word	0x0801a381
 801a3e4:	0801a381 	.word	0x0801a381
 801a3e8:	0801a381 	.word	0x0801a381
 801a3ec:	0801a4bd 	.word	0x0801a4bd
 801a3f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a3f4:	e7db      	b.n	801a3ae <_scanf_float+0x8e>
 801a3f6:	290e      	cmp	r1, #14
 801a3f8:	d8c2      	bhi.n	801a380 <_scanf_float+0x60>
 801a3fa:	a001      	add	r0, pc, #4	; (adr r0, 801a400 <_scanf_float+0xe0>)
 801a3fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a400:	0801a4af 	.word	0x0801a4af
 801a404:	0801a381 	.word	0x0801a381
 801a408:	0801a4af 	.word	0x0801a4af
 801a40c:	0801a543 	.word	0x0801a543
 801a410:	0801a381 	.word	0x0801a381
 801a414:	0801a45d 	.word	0x0801a45d
 801a418:	0801a499 	.word	0x0801a499
 801a41c:	0801a499 	.word	0x0801a499
 801a420:	0801a499 	.word	0x0801a499
 801a424:	0801a499 	.word	0x0801a499
 801a428:	0801a499 	.word	0x0801a499
 801a42c:	0801a499 	.word	0x0801a499
 801a430:	0801a499 	.word	0x0801a499
 801a434:	0801a499 	.word	0x0801a499
 801a438:	0801a499 	.word	0x0801a499
 801a43c:	2b6e      	cmp	r3, #110	; 0x6e
 801a43e:	d809      	bhi.n	801a454 <_scanf_float+0x134>
 801a440:	2b60      	cmp	r3, #96	; 0x60
 801a442:	d8b2      	bhi.n	801a3aa <_scanf_float+0x8a>
 801a444:	2b54      	cmp	r3, #84	; 0x54
 801a446:	d077      	beq.n	801a538 <_scanf_float+0x218>
 801a448:	2b59      	cmp	r3, #89	; 0x59
 801a44a:	d199      	bne.n	801a380 <_scanf_float+0x60>
 801a44c:	2d07      	cmp	r5, #7
 801a44e:	d197      	bne.n	801a380 <_scanf_float+0x60>
 801a450:	2508      	movs	r5, #8
 801a452:	e029      	b.n	801a4a8 <_scanf_float+0x188>
 801a454:	2b74      	cmp	r3, #116	; 0x74
 801a456:	d06f      	beq.n	801a538 <_scanf_float+0x218>
 801a458:	2b79      	cmp	r3, #121	; 0x79
 801a45a:	e7f6      	b.n	801a44a <_scanf_float+0x12a>
 801a45c:	6821      	ldr	r1, [r4, #0]
 801a45e:	05c8      	lsls	r0, r1, #23
 801a460:	d51a      	bpl.n	801a498 <_scanf_float+0x178>
 801a462:	9b02      	ldr	r3, [sp, #8]
 801a464:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a468:	6021      	str	r1, [r4, #0]
 801a46a:	f109 0901 	add.w	r9, r9, #1
 801a46e:	b11b      	cbz	r3, 801a478 <_scanf_float+0x158>
 801a470:	3b01      	subs	r3, #1
 801a472:	3201      	adds	r2, #1
 801a474:	9302      	str	r3, [sp, #8]
 801a476:	60a2      	str	r2, [r4, #8]
 801a478:	68a3      	ldr	r3, [r4, #8]
 801a47a:	3b01      	subs	r3, #1
 801a47c:	60a3      	str	r3, [r4, #8]
 801a47e:	6923      	ldr	r3, [r4, #16]
 801a480:	3301      	adds	r3, #1
 801a482:	6123      	str	r3, [r4, #16]
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	3b01      	subs	r3, #1
 801a488:	2b00      	cmp	r3, #0
 801a48a:	607b      	str	r3, [r7, #4]
 801a48c:	f340 8084 	ble.w	801a598 <_scanf_float+0x278>
 801a490:	683b      	ldr	r3, [r7, #0]
 801a492:	3301      	adds	r3, #1
 801a494:	603b      	str	r3, [r7, #0]
 801a496:	e766      	b.n	801a366 <_scanf_float+0x46>
 801a498:	eb1a 0f05 	cmn.w	sl, r5
 801a49c:	f47f af70 	bne.w	801a380 <_scanf_float+0x60>
 801a4a0:	6822      	ldr	r2, [r4, #0]
 801a4a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a4a6:	6022      	str	r2, [r4, #0]
 801a4a8:	f806 3b01 	strb.w	r3, [r6], #1
 801a4ac:	e7e4      	b.n	801a478 <_scanf_float+0x158>
 801a4ae:	6822      	ldr	r2, [r4, #0]
 801a4b0:	0610      	lsls	r0, r2, #24
 801a4b2:	f57f af65 	bpl.w	801a380 <_scanf_float+0x60>
 801a4b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a4ba:	e7f4      	b.n	801a4a6 <_scanf_float+0x186>
 801a4bc:	f1ba 0f00 	cmp.w	sl, #0
 801a4c0:	d10e      	bne.n	801a4e0 <_scanf_float+0x1c0>
 801a4c2:	f1b9 0f00 	cmp.w	r9, #0
 801a4c6:	d10e      	bne.n	801a4e6 <_scanf_float+0x1c6>
 801a4c8:	6822      	ldr	r2, [r4, #0]
 801a4ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a4ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a4d2:	d108      	bne.n	801a4e6 <_scanf_float+0x1c6>
 801a4d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a4d8:	6022      	str	r2, [r4, #0]
 801a4da:	f04f 0a01 	mov.w	sl, #1
 801a4de:	e7e3      	b.n	801a4a8 <_scanf_float+0x188>
 801a4e0:	f1ba 0f02 	cmp.w	sl, #2
 801a4e4:	d055      	beq.n	801a592 <_scanf_float+0x272>
 801a4e6:	2d01      	cmp	r5, #1
 801a4e8:	d002      	beq.n	801a4f0 <_scanf_float+0x1d0>
 801a4ea:	2d04      	cmp	r5, #4
 801a4ec:	f47f af48 	bne.w	801a380 <_scanf_float+0x60>
 801a4f0:	3501      	adds	r5, #1
 801a4f2:	b2ed      	uxtb	r5, r5
 801a4f4:	e7d8      	b.n	801a4a8 <_scanf_float+0x188>
 801a4f6:	f1ba 0f01 	cmp.w	sl, #1
 801a4fa:	f47f af41 	bne.w	801a380 <_scanf_float+0x60>
 801a4fe:	f04f 0a02 	mov.w	sl, #2
 801a502:	e7d1      	b.n	801a4a8 <_scanf_float+0x188>
 801a504:	b97d      	cbnz	r5, 801a526 <_scanf_float+0x206>
 801a506:	f1b9 0f00 	cmp.w	r9, #0
 801a50a:	f47f af3c 	bne.w	801a386 <_scanf_float+0x66>
 801a50e:	6822      	ldr	r2, [r4, #0]
 801a510:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a514:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a518:	f47f af39 	bne.w	801a38e <_scanf_float+0x6e>
 801a51c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a520:	6022      	str	r2, [r4, #0]
 801a522:	2501      	movs	r5, #1
 801a524:	e7c0      	b.n	801a4a8 <_scanf_float+0x188>
 801a526:	2d03      	cmp	r5, #3
 801a528:	d0e2      	beq.n	801a4f0 <_scanf_float+0x1d0>
 801a52a:	2d05      	cmp	r5, #5
 801a52c:	e7de      	b.n	801a4ec <_scanf_float+0x1cc>
 801a52e:	2d02      	cmp	r5, #2
 801a530:	f47f af26 	bne.w	801a380 <_scanf_float+0x60>
 801a534:	2503      	movs	r5, #3
 801a536:	e7b7      	b.n	801a4a8 <_scanf_float+0x188>
 801a538:	2d06      	cmp	r5, #6
 801a53a:	f47f af21 	bne.w	801a380 <_scanf_float+0x60>
 801a53e:	2507      	movs	r5, #7
 801a540:	e7b2      	b.n	801a4a8 <_scanf_float+0x188>
 801a542:	6822      	ldr	r2, [r4, #0]
 801a544:	0591      	lsls	r1, r2, #22
 801a546:	f57f af1b 	bpl.w	801a380 <_scanf_float+0x60>
 801a54a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a54e:	6022      	str	r2, [r4, #0]
 801a550:	f8cd 9004 	str.w	r9, [sp, #4]
 801a554:	e7a8      	b.n	801a4a8 <_scanf_float+0x188>
 801a556:	6822      	ldr	r2, [r4, #0]
 801a558:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a55c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a560:	d006      	beq.n	801a570 <_scanf_float+0x250>
 801a562:	0550      	lsls	r0, r2, #21
 801a564:	f57f af0c 	bpl.w	801a380 <_scanf_float+0x60>
 801a568:	f1b9 0f00 	cmp.w	r9, #0
 801a56c:	f43f af0f 	beq.w	801a38e <_scanf_float+0x6e>
 801a570:	0591      	lsls	r1, r2, #22
 801a572:	bf58      	it	pl
 801a574:	9901      	ldrpl	r1, [sp, #4]
 801a576:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a57a:	bf58      	it	pl
 801a57c:	eba9 0101 	subpl.w	r1, r9, r1
 801a580:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a584:	bf58      	it	pl
 801a586:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a58a:	6022      	str	r2, [r4, #0]
 801a58c:	f04f 0900 	mov.w	r9, #0
 801a590:	e78a      	b.n	801a4a8 <_scanf_float+0x188>
 801a592:	f04f 0a03 	mov.w	sl, #3
 801a596:	e787      	b.n	801a4a8 <_scanf_float+0x188>
 801a598:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a59c:	4639      	mov	r1, r7
 801a59e:	4640      	mov	r0, r8
 801a5a0:	4798      	blx	r3
 801a5a2:	2800      	cmp	r0, #0
 801a5a4:	f43f aedf 	beq.w	801a366 <_scanf_float+0x46>
 801a5a8:	e6ea      	b.n	801a380 <_scanf_float+0x60>
 801a5aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a5b2:	463a      	mov	r2, r7
 801a5b4:	4640      	mov	r0, r8
 801a5b6:	4798      	blx	r3
 801a5b8:	6923      	ldr	r3, [r4, #16]
 801a5ba:	3b01      	subs	r3, #1
 801a5bc:	6123      	str	r3, [r4, #16]
 801a5be:	e6ec      	b.n	801a39a <_scanf_float+0x7a>
 801a5c0:	1e6b      	subs	r3, r5, #1
 801a5c2:	2b06      	cmp	r3, #6
 801a5c4:	d825      	bhi.n	801a612 <_scanf_float+0x2f2>
 801a5c6:	2d02      	cmp	r5, #2
 801a5c8:	d836      	bhi.n	801a638 <_scanf_float+0x318>
 801a5ca:	455e      	cmp	r6, fp
 801a5cc:	f67f aee8 	bls.w	801a3a0 <_scanf_float+0x80>
 801a5d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a5d8:	463a      	mov	r2, r7
 801a5da:	4640      	mov	r0, r8
 801a5dc:	4798      	blx	r3
 801a5de:	6923      	ldr	r3, [r4, #16]
 801a5e0:	3b01      	subs	r3, #1
 801a5e2:	6123      	str	r3, [r4, #16]
 801a5e4:	e7f1      	b.n	801a5ca <_scanf_float+0x2aa>
 801a5e6:	9802      	ldr	r0, [sp, #8]
 801a5e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a5f0:	9002      	str	r0, [sp, #8]
 801a5f2:	463a      	mov	r2, r7
 801a5f4:	4640      	mov	r0, r8
 801a5f6:	4798      	blx	r3
 801a5f8:	6923      	ldr	r3, [r4, #16]
 801a5fa:	3b01      	subs	r3, #1
 801a5fc:	6123      	str	r3, [r4, #16]
 801a5fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a602:	fa5f fa8a 	uxtb.w	sl, sl
 801a606:	f1ba 0f02 	cmp.w	sl, #2
 801a60a:	d1ec      	bne.n	801a5e6 <_scanf_float+0x2c6>
 801a60c:	3d03      	subs	r5, #3
 801a60e:	b2ed      	uxtb	r5, r5
 801a610:	1b76      	subs	r6, r6, r5
 801a612:	6823      	ldr	r3, [r4, #0]
 801a614:	05da      	lsls	r2, r3, #23
 801a616:	d52f      	bpl.n	801a678 <_scanf_float+0x358>
 801a618:	055b      	lsls	r3, r3, #21
 801a61a:	d510      	bpl.n	801a63e <_scanf_float+0x31e>
 801a61c:	455e      	cmp	r6, fp
 801a61e:	f67f aebf 	bls.w	801a3a0 <_scanf_float+0x80>
 801a622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a626:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a62a:	463a      	mov	r2, r7
 801a62c:	4640      	mov	r0, r8
 801a62e:	4798      	blx	r3
 801a630:	6923      	ldr	r3, [r4, #16]
 801a632:	3b01      	subs	r3, #1
 801a634:	6123      	str	r3, [r4, #16]
 801a636:	e7f1      	b.n	801a61c <_scanf_float+0x2fc>
 801a638:	46aa      	mov	sl, r5
 801a63a:	9602      	str	r6, [sp, #8]
 801a63c:	e7df      	b.n	801a5fe <_scanf_float+0x2de>
 801a63e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a642:	6923      	ldr	r3, [r4, #16]
 801a644:	2965      	cmp	r1, #101	; 0x65
 801a646:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a64a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801a64e:	6123      	str	r3, [r4, #16]
 801a650:	d00c      	beq.n	801a66c <_scanf_float+0x34c>
 801a652:	2945      	cmp	r1, #69	; 0x45
 801a654:	d00a      	beq.n	801a66c <_scanf_float+0x34c>
 801a656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a65a:	463a      	mov	r2, r7
 801a65c:	4640      	mov	r0, r8
 801a65e:	4798      	blx	r3
 801a660:	6923      	ldr	r3, [r4, #16]
 801a662:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a666:	3b01      	subs	r3, #1
 801a668:	1eb5      	subs	r5, r6, #2
 801a66a:	6123      	str	r3, [r4, #16]
 801a66c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a670:	463a      	mov	r2, r7
 801a672:	4640      	mov	r0, r8
 801a674:	4798      	blx	r3
 801a676:	462e      	mov	r6, r5
 801a678:	6825      	ldr	r5, [r4, #0]
 801a67a:	f015 0510 	ands.w	r5, r5, #16
 801a67e:	d158      	bne.n	801a732 <_scanf_float+0x412>
 801a680:	7035      	strb	r5, [r6, #0]
 801a682:	6823      	ldr	r3, [r4, #0]
 801a684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a68c:	d11c      	bne.n	801a6c8 <_scanf_float+0x3a8>
 801a68e:	9b01      	ldr	r3, [sp, #4]
 801a690:	454b      	cmp	r3, r9
 801a692:	eba3 0209 	sub.w	r2, r3, r9
 801a696:	d124      	bne.n	801a6e2 <_scanf_float+0x3c2>
 801a698:	2200      	movs	r2, #0
 801a69a:	4659      	mov	r1, fp
 801a69c:	4640      	mov	r0, r8
 801a69e:	f000 fead 	bl	801b3fc <_strtod_r>
 801a6a2:	9b03      	ldr	r3, [sp, #12]
 801a6a4:	6821      	ldr	r1, [r4, #0]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	f011 0f02 	tst.w	r1, #2
 801a6ac:	ec57 6b10 	vmov	r6, r7, d0
 801a6b0:	f103 0204 	add.w	r2, r3, #4
 801a6b4:	d020      	beq.n	801a6f8 <_scanf_float+0x3d8>
 801a6b6:	9903      	ldr	r1, [sp, #12]
 801a6b8:	600a      	str	r2, [r1, #0]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	e9c3 6700 	strd	r6, r7, [r3]
 801a6c0:	68e3      	ldr	r3, [r4, #12]
 801a6c2:	3301      	adds	r3, #1
 801a6c4:	60e3      	str	r3, [r4, #12]
 801a6c6:	e66c      	b.n	801a3a2 <_scanf_float+0x82>
 801a6c8:	9b04      	ldr	r3, [sp, #16]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d0e4      	beq.n	801a698 <_scanf_float+0x378>
 801a6ce:	9905      	ldr	r1, [sp, #20]
 801a6d0:	230a      	movs	r3, #10
 801a6d2:	462a      	mov	r2, r5
 801a6d4:	3101      	adds	r1, #1
 801a6d6:	4640      	mov	r0, r8
 801a6d8:	f000 ff1a 	bl	801b510 <_strtol_r>
 801a6dc:	9b04      	ldr	r3, [sp, #16]
 801a6de:	9e05      	ldr	r6, [sp, #20]
 801a6e0:	1ac2      	subs	r2, r0, r3
 801a6e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a6e6:	429e      	cmp	r6, r3
 801a6e8:	bf28      	it	cs
 801a6ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a6ee:	4912      	ldr	r1, [pc, #72]	; (801a738 <_scanf_float+0x418>)
 801a6f0:	4630      	mov	r0, r6
 801a6f2:	f000 f82b 	bl	801a74c <siprintf>
 801a6f6:	e7cf      	b.n	801a698 <_scanf_float+0x378>
 801a6f8:	f011 0f04 	tst.w	r1, #4
 801a6fc:	9903      	ldr	r1, [sp, #12]
 801a6fe:	600a      	str	r2, [r1, #0]
 801a700:	d1db      	bne.n	801a6ba <_scanf_float+0x39a>
 801a702:	f8d3 8000 	ldr.w	r8, [r3]
 801a706:	ee10 2a10 	vmov	r2, s0
 801a70a:	ee10 0a10 	vmov	r0, s0
 801a70e:	463b      	mov	r3, r7
 801a710:	4639      	mov	r1, r7
 801a712:	f7e6 fa0b 	bl	8000b2c <__aeabi_dcmpun>
 801a716:	b128      	cbz	r0, 801a724 <_scanf_float+0x404>
 801a718:	4808      	ldr	r0, [pc, #32]	; (801a73c <_scanf_float+0x41c>)
 801a71a:	f000 f811 	bl	801a740 <nanf>
 801a71e:	ed88 0a00 	vstr	s0, [r8]
 801a722:	e7cd      	b.n	801a6c0 <_scanf_float+0x3a0>
 801a724:	4630      	mov	r0, r6
 801a726:	4639      	mov	r1, r7
 801a728:	f7e6 fa5e 	bl	8000be8 <__aeabi_d2f>
 801a72c:	f8c8 0000 	str.w	r0, [r8]
 801a730:	e7c6      	b.n	801a6c0 <_scanf_float+0x3a0>
 801a732:	2500      	movs	r5, #0
 801a734:	e635      	b.n	801a3a2 <_scanf_float+0x82>
 801a736:	bf00      	nop
 801a738:	080212dc 	.word	0x080212dc
 801a73c:	080216f8 	.word	0x080216f8

0801a740 <nanf>:
 801a740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a748 <nanf+0x8>
 801a744:	4770      	bx	lr
 801a746:	bf00      	nop
 801a748:	7fc00000 	.word	0x7fc00000

0801a74c <siprintf>:
 801a74c:	b40e      	push	{r1, r2, r3}
 801a74e:	b500      	push	{lr}
 801a750:	b09c      	sub	sp, #112	; 0x70
 801a752:	ab1d      	add	r3, sp, #116	; 0x74
 801a754:	9002      	str	r0, [sp, #8]
 801a756:	9006      	str	r0, [sp, #24]
 801a758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a75c:	4809      	ldr	r0, [pc, #36]	; (801a784 <siprintf+0x38>)
 801a75e:	9107      	str	r1, [sp, #28]
 801a760:	9104      	str	r1, [sp, #16]
 801a762:	4909      	ldr	r1, [pc, #36]	; (801a788 <siprintf+0x3c>)
 801a764:	f853 2b04 	ldr.w	r2, [r3], #4
 801a768:	9105      	str	r1, [sp, #20]
 801a76a:	6800      	ldr	r0, [r0, #0]
 801a76c:	9301      	str	r3, [sp, #4]
 801a76e:	a902      	add	r1, sp, #8
 801a770:	f002 fea8 	bl	801d4c4 <_svfiprintf_r>
 801a774:	9b02      	ldr	r3, [sp, #8]
 801a776:	2200      	movs	r2, #0
 801a778:	701a      	strb	r2, [r3, #0]
 801a77a:	b01c      	add	sp, #112	; 0x70
 801a77c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a780:	b003      	add	sp, #12
 801a782:	4770      	bx	lr
 801a784:	20000284 	.word	0x20000284
 801a788:	ffff0208 	.word	0xffff0208

0801a78c <strncmp>:
 801a78c:	b510      	push	{r4, lr}
 801a78e:	b16a      	cbz	r2, 801a7ac <strncmp+0x20>
 801a790:	3901      	subs	r1, #1
 801a792:	1884      	adds	r4, r0, r2
 801a794:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a798:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a79c:	4293      	cmp	r3, r2
 801a79e:	d103      	bne.n	801a7a8 <strncmp+0x1c>
 801a7a0:	42a0      	cmp	r0, r4
 801a7a2:	d001      	beq.n	801a7a8 <strncmp+0x1c>
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d1f5      	bne.n	801a794 <strncmp+0x8>
 801a7a8:	1a98      	subs	r0, r3, r2
 801a7aa:	bd10      	pop	{r4, pc}
 801a7ac:	4610      	mov	r0, r2
 801a7ae:	e7fc      	b.n	801a7aa <strncmp+0x1e>

0801a7b0 <sulp>:
 801a7b0:	b570      	push	{r4, r5, r6, lr}
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	460d      	mov	r5, r1
 801a7b6:	ec45 4b10 	vmov	d0, r4, r5
 801a7ba:	4616      	mov	r6, r2
 801a7bc:	f002 fc1e 	bl	801cffc <__ulp>
 801a7c0:	ec51 0b10 	vmov	r0, r1, d0
 801a7c4:	b17e      	cbz	r6, 801a7e6 <sulp+0x36>
 801a7c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a7ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	dd09      	ble.n	801a7e6 <sulp+0x36>
 801a7d2:	051b      	lsls	r3, r3, #20
 801a7d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a7d8:	2400      	movs	r4, #0
 801a7da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a7de:	4622      	mov	r2, r4
 801a7e0:	462b      	mov	r3, r5
 801a7e2:	f7e5 ff09 	bl	80005f8 <__aeabi_dmul>
 801a7e6:	bd70      	pop	{r4, r5, r6, pc}

0801a7e8 <_strtod_l>:
 801a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7ec:	b0a3      	sub	sp, #140	; 0x8c
 801a7ee:	461f      	mov	r7, r3
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	931e      	str	r3, [sp, #120]	; 0x78
 801a7f4:	4ba4      	ldr	r3, [pc, #656]	; (801aa88 <_strtod_l+0x2a0>)
 801a7f6:	9219      	str	r2, [sp, #100]	; 0x64
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	9307      	str	r3, [sp, #28]
 801a7fc:	4604      	mov	r4, r0
 801a7fe:	4618      	mov	r0, r3
 801a800:	4688      	mov	r8, r1
 801a802:	f7e5 fce5 	bl	80001d0 <strlen>
 801a806:	f04f 0a00 	mov.w	sl, #0
 801a80a:	4605      	mov	r5, r0
 801a80c:	f04f 0b00 	mov.w	fp, #0
 801a810:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a816:	781a      	ldrb	r2, [r3, #0]
 801a818:	2a2b      	cmp	r2, #43	; 0x2b
 801a81a:	d04c      	beq.n	801a8b6 <_strtod_l+0xce>
 801a81c:	d839      	bhi.n	801a892 <_strtod_l+0xaa>
 801a81e:	2a0d      	cmp	r2, #13
 801a820:	d832      	bhi.n	801a888 <_strtod_l+0xa0>
 801a822:	2a08      	cmp	r2, #8
 801a824:	d832      	bhi.n	801a88c <_strtod_l+0xa4>
 801a826:	2a00      	cmp	r2, #0
 801a828:	d03c      	beq.n	801a8a4 <_strtod_l+0xbc>
 801a82a:	2300      	movs	r3, #0
 801a82c:	930e      	str	r3, [sp, #56]	; 0x38
 801a82e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a830:	7833      	ldrb	r3, [r6, #0]
 801a832:	2b30      	cmp	r3, #48	; 0x30
 801a834:	f040 80b4 	bne.w	801a9a0 <_strtod_l+0x1b8>
 801a838:	7873      	ldrb	r3, [r6, #1]
 801a83a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a83e:	2b58      	cmp	r3, #88	; 0x58
 801a840:	d16c      	bne.n	801a91c <_strtod_l+0x134>
 801a842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a844:	9301      	str	r3, [sp, #4]
 801a846:	ab1e      	add	r3, sp, #120	; 0x78
 801a848:	9702      	str	r7, [sp, #8]
 801a84a:	9300      	str	r3, [sp, #0]
 801a84c:	4a8f      	ldr	r2, [pc, #572]	; (801aa8c <_strtod_l+0x2a4>)
 801a84e:	ab1f      	add	r3, sp, #124	; 0x7c
 801a850:	a91d      	add	r1, sp, #116	; 0x74
 801a852:	4620      	mov	r0, r4
 801a854:	f001 fd40 	bl	801c2d8 <__gethex>
 801a858:	f010 0707 	ands.w	r7, r0, #7
 801a85c:	4605      	mov	r5, r0
 801a85e:	d005      	beq.n	801a86c <_strtod_l+0x84>
 801a860:	2f06      	cmp	r7, #6
 801a862:	d12a      	bne.n	801a8ba <_strtod_l+0xd2>
 801a864:	3601      	adds	r6, #1
 801a866:	2300      	movs	r3, #0
 801a868:	961d      	str	r6, [sp, #116]	; 0x74
 801a86a:	930e      	str	r3, [sp, #56]	; 0x38
 801a86c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a86e:	2b00      	cmp	r3, #0
 801a870:	f040 8596 	bne.w	801b3a0 <_strtod_l+0xbb8>
 801a874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a876:	b1db      	cbz	r3, 801a8b0 <_strtod_l+0xc8>
 801a878:	4652      	mov	r2, sl
 801a87a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a87e:	ec43 2b10 	vmov	d0, r2, r3
 801a882:	b023      	add	sp, #140	; 0x8c
 801a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a888:	2a20      	cmp	r2, #32
 801a88a:	d1ce      	bne.n	801a82a <_strtod_l+0x42>
 801a88c:	3301      	adds	r3, #1
 801a88e:	931d      	str	r3, [sp, #116]	; 0x74
 801a890:	e7c0      	b.n	801a814 <_strtod_l+0x2c>
 801a892:	2a2d      	cmp	r2, #45	; 0x2d
 801a894:	d1c9      	bne.n	801a82a <_strtod_l+0x42>
 801a896:	2201      	movs	r2, #1
 801a898:	920e      	str	r2, [sp, #56]	; 0x38
 801a89a:	1c5a      	adds	r2, r3, #1
 801a89c:	921d      	str	r2, [sp, #116]	; 0x74
 801a89e:	785b      	ldrb	r3, [r3, #1]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d1c4      	bne.n	801a82e <_strtod_l+0x46>
 801a8a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a8a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	f040 8576 	bne.w	801b39c <_strtod_l+0xbb4>
 801a8b0:	4652      	mov	r2, sl
 801a8b2:	465b      	mov	r3, fp
 801a8b4:	e7e3      	b.n	801a87e <_strtod_l+0x96>
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	e7ee      	b.n	801a898 <_strtod_l+0xb0>
 801a8ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a8bc:	b13a      	cbz	r2, 801a8ce <_strtod_l+0xe6>
 801a8be:	2135      	movs	r1, #53	; 0x35
 801a8c0:	a820      	add	r0, sp, #128	; 0x80
 801a8c2:	f002 fca6 	bl	801d212 <__copybits>
 801a8c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a8c8:	4620      	mov	r0, r4
 801a8ca:	f002 f86b 	bl	801c9a4 <_Bfree>
 801a8ce:	3f01      	subs	r7, #1
 801a8d0:	2f05      	cmp	r7, #5
 801a8d2:	d807      	bhi.n	801a8e4 <_strtod_l+0xfc>
 801a8d4:	e8df f007 	tbb	[pc, r7]
 801a8d8:	1d180b0e 	.word	0x1d180b0e
 801a8dc:	030e      	.short	0x030e
 801a8de:	f04f 0b00 	mov.w	fp, #0
 801a8e2:	46da      	mov	sl, fp
 801a8e4:	0728      	lsls	r0, r5, #28
 801a8e6:	d5c1      	bpl.n	801a86c <_strtod_l+0x84>
 801a8e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a8ec:	e7be      	b.n	801a86c <_strtod_l+0x84>
 801a8ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a8f2:	e7f7      	b.n	801a8e4 <_strtod_l+0xfc>
 801a8f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a8f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a8fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a8fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a902:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a906:	e7ed      	b.n	801a8e4 <_strtod_l+0xfc>
 801a908:	f8df b184 	ldr.w	fp, [pc, #388]	; 801aa90 <_strtod_l+0x2a8>
 801a90c:	f04f 0a00 	mov.w	sl, #0
 801a910:	e7e8      	b.n	801a8e4 <_strtod_l+0xfc>
 801a912:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a916:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a91a:	e7e3      	b.n	801a8e4 <_strtod_l+0xfc>
 801a91c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a91e:	1c5a      	adds	r2, r3, #1
 801a920:	921d      	str	r2, [sp, #116]	; 0x74
 801a922:	785b      	ldrb	r3, [r3, #1]
 801a924:	2b30      	cmp	r3, #48	; 0x30
 801a926:	d0f9      	beq.n	801a91c <_strtod_l+0x134>
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d09f      	beq.n	801a86c <_strtod_l+0x84>
 801a92c:	2301      	movs	r3, #1
 801a92e:	f04f 0900 	mov.w	r9, #0
 801a932:	9304      	str	r3, [sp, #16]
 801a934:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a936:	930a      	str	r3, [sp, #40]	; 0x28
 801a938:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a93c:	464f      	mov	r7, r9
 801a93e:	220a      	movs	r2, #10
 801a940:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a942:	7806      	ldrb	r6, [r0, #0]
 801a944:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a948:	b2d9      	uxtb	r1, r3
 801a94a:	2909      	cmp	r1, #9
 801a94c:	d92a      	bls.n	801a9a4 <_strtod_l+0x1bc>
 801a94e:	9907      	ldr	r1, [sp, #28]
 801a950:	462a      	mov	r2, r5
 801a952:	f7ff ff1b 	bl	801a78c <strncmp>
 801a956:	b398      	cbz	r0, 801a9c0 <_strtod_l+0x1d8>
 801a958:	2000      	movs	r0, #0
 801a95a:	4633      	mov	r3, r6
 801a95c:	463d      	mov	r5, r7
 801a95e:	9007      	str	r0, [sp, #28]
 801a960:	4602      	mov	r2, r0
 801a962:	2b65      	cmp	r3, #101	; 0x65
 801a964:	d001      	beq.n	801a96a <_strtod_l+0x182>
 801a966:	2b45      	cmp	r3, #69	; 0x45
 801a968:	d118      	bne.n	801a99c <_strtod_l+0x1b4>
 801a96a:	b91d      	cbnz	r5, 801a974 <_strtod_l+0x18c>
 801a96c:	9b04      	ldr	r3, [sp, #16]
 801a96e:	4303      	orrs	r3, r0
 801a970:	d098      	beq.n	801a8a4 <_strtod_l+0xbc>
 801a972:	2500      	movs	r5, #0
 801a974:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a978:	f108 0301 	add.w	r3, r8, #1
 801a97c:	931d      	str	r3, [sp, #116]	; 0x74
 801a97e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a982:	2b2b      	cmp	r3, #43	; 0x2b
 801a984:	d075      	beq.n	801aa72 <_strtod_l+0x28a>
 801a986:	2b2d      	cmp	r3, #45	; 0x2d
 801a988:	d07b      	beq.n	801aa82 <_strtod_l+0x29a>
 801a98a:	f04f 0c00 	mov.w	ip, #0
 801a98e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a992:	2909      	cmp	r1, #9
 801a994:	f240 8082 	bls.w	801aa9c <_strtod_l+0x2b4>
 801a998:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a99c:	2600      	movs	r6, #0
 801a99e:	e09d      	b.n	801aadc <_strtod_l+0x2f4>
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	e7c4      	b.n	801a92e <_strtod_l+0x146>
 801a9a4:	2f08      	cmp	r7, #8
 801a9a6:	bfd8      	it	le
 801a9a8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a9aa:	f100 0001 	add.w	r0, r0, #1
 801a9ae:	bfda      	itte	le
 801a9b0:	fb02 3301 	mlale	r3, r2, r1, r3
 801a9b4:	9309      	strle	r3, [sp, #36]	; 0x24
 801a9b6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a9ba:	3701      	adds	r7, #1
 801a9bc:	901d      	str	r0, [sp, #116]	; 0x74
 801a9be:	e7bf      	b.n	801a940 <_strtod_l+0x158>
 801a9c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9c2:	195a      	adds	r2, r3, r5
 801a9c4:	921d      	str	r2, [sp, #116]	; 0x74
 801a9c6:	5d5b      	ldrb	r3, [r3, r5]
 801a9c8:	2f00      	cmp	r7, #0
 801a9ca:	d037      	beq.n	801aa3c <_strtod_l+0x254>
 801a9cc:	9007      	str	r0, [sp, #28]
 801a9ce:	463d      	mov	r5, r7
 801a9d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a9d4:	2a09      	cmp	r2, #9
 801a9d6:	d912      	bls.n	801a9fe <_strtod_l+0x216>
 801a9d8:	2201      	movs	r2, #1
 801a9da:	e7c2      	b.n	801a962 <_strtod_l+0x17a>
 801a9dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9de:	1c5a      	adds	r2, r3, #1
 801a9e0:	921d      	str	r2, [sp, #116]	; 0x74
 801a9e2:	785b      	ldrb	r3, [r3, #1]
 801a9e4:	3001      	adds	r0, #1
 801a9e6:	2b30      	cmp	r3, #48	; 0x30
 801a9e8:	d0f8      	beq.n	801a9dc <_strtod_l+0x1f4>
 801a9ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a9ee:	2a08      	cmp	r2, #8
 801a9f0:	f200 84db 	bhi.w	801b3aa <_strtod_l+0xbc2>
 801a9f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a9f6:	9007      	str	r0, [sp, #28]
 801a9f8:	2000      	movs	r0, #0
 801a9fa:	920a      	str	r2, [sp, #40]	; 0x28
 801a9fc:	4605      	mov	r5, r0
 801a9fe:	3b30      	subs	r3, #48	; 0x30
 801aa00:	f100 0201 	add.w	r2, r0, #1
 801aa04:	d014      	beq.n	801aa30 <_strtod_l+0x248>
 801aa06:	9907      	ldr	r1, [sp, #28]
 801aa08:	4411      	add	r1, r2
 801aa0a:	9107      	str	r1, [sp, #28]
 801aa0c:	462a      	mov	r2, r5
 801aa0e:	eb00 0e05 	add.w	lr, r0, r5
 801aa12:	210a      	movs	r1, #10
 801aa14:	4572      	cmp	r2, lr
 801aa16:	d113      	bne.n	801aa40 <_strtod_l+0x258>
 801aa18:	182a      	adds	r2, r5, r0
 801aa1a:	2a08      	cmp	r2, #8
 801aa1c:	f105 0501 	add.w	r5, r5, #1
 801aa20:	4405      	add	r5, r0
 801aa22:	dc1c      	bgt.n	801aa5e <_strtod_l+0x276>
 801aa24:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa26:	220a      	movs	r2, #10
 801aa28:	fb02 3301 	mla	r3, r2, r1, r3
 801aa2c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa2e:	2200      	movs	r2, #0
 801aa30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa32:	1c59      	adds	r1, r3, #1
 801aa34:	911d      	str	r1, [sp, #116]	; 0x74
 801aa36:	785b      	ldrb	r3, [r3, #1]
 801aa38:	4610      	mov	r0, r2
 801aa3a:	e7c9      	b.n	801a9d0 <_strtod_l+0x1e8>
 801aa3c:	4638      	mov	r0, r7
 801aa3e:	e7d2      	b.n	801a9e6 <_strtod_l+0x1fe>
 801aa40:	2a08      	cmp	r2, #8
 801aa42:	dc04      	bgt.n	801aa4e <_strtod_l+0x266>
 801aa44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801aa46:	434e      	muls	r6, r1
 801aa48:	9609      	str	r6, [sp, #36]	; 0x24
 801aa4a:	3201      	adds	r2, #1
 801aa4c:	e7e2      	b.n	801aa14 <_strtod_l+0x22c>
 801aa4e:	f102 0c01 	add.w	ip, r2, #1
 801aa52:	f1bc 0f10 	cmp.w	ip, #16
 801aa56:	bfd8      	it	le
 801aa58:	fb01 f909 	mulle.w	r9, r1, r9
 801aa5c:	e7f5      	b.n	801aa4a <_strtod_l+0x262>
 801aa5e:	2d10      	cmp	r5, #16
 801aa60:	bfdc      	itt	le
 801aa62:	220a      	movle	r2, #10
 801aa64:	fb02 3909 	mlale	r9, r2, r9, r3
 801aa68:	e7e1      	b.n	801aa2e <_strtod_l+0x246>
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	9307      	str	r3, [sp, #28]
 801aa6e:	2201      	movs	r2, #1
 801aa70:	e77c      	b.n	801a96c <_strtod_l+0x184>
 801aa72:	f04f 0c00 	mov.w	ip, #0
 801aa76:	f108 0302 	add.w	r3, r8, #2
 801aa7a:	931d      	str	r3, [sp, #116]	; 0x74
 801aa7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801aa80:	e785      	b.n	801a98e <_strtod_l+0x1a6>
 801aa82:	f04f 0c01 	mov.w	ip, #1
 801aa86:	e7f6      	b.n	801aa76 <_strtod_l+0x28e>
 801aa88:	08021538 	.word	0x08021538
 801aa8c:	080212e4 	.word	0x080212e4
 801aa90:	7ff00000 	.word	0x7ff00000
 801aa94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa96:	1c59      	adds	r1, r3, #1
 801aa98:	911d      	str	r1, [sp, #116]	; 0x74
 801aa9a:	785b      	ldrb	r3, [r3, #1]
 801aa9c:	2b30      	cmp	r3, #48	; 0x30
 801aa9e:	d0f9      	beq.n	801aa94 <_strtod_l+0x2ac>
 801aaa0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801aaa4:	2908      	cmp	r1, #8
 801aaa6:	f63f af79 	bhi.w	801a99c <_strtod_l+0x1b4>
 801aaaa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801aaae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aab0:	9308      	str	r3, [sp, #32]
 801aab2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aab4:	1c59      	adds	r1, r3, #1
 801aab6:	911d      	str	r1, [sp, #116]	; 0x74
 801aab8:	785b      	ldrb	r3, [r3, #1]
 801aaba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801aabe:	2e09      	cmp	r6, #9
 801aac0:	d937      	bls.n	801ab32 <_strtod_l+0x34a>
 801aac2:	9e08      	ldr	r6, [sp, #32]
 801aac4:	1b89      	subs	r1, r1, r6
 801aac6:	2908      	cmp	r1, #8
 801aac8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801aacc:	dc02      	bgt.n	801aad4 <_strtod_l+0x2ec>
 801aace:	4576      	cmp	r6, lr
 801aad0:	bfa8      	it	ge
 801aad2:	4676      	movge	r6, lr
 801aad4:	f1bc 0f00 	cmp.w	ip, #0
 801aad8:	d000      	beq.n	801aadc <_strtod_l+0x2f4>
 801aada:	4276      	negs	r6, r6
 801aadc:	2d00      	cmp	r5, #0
 801aade:	d14f      	bne.n	801ab80 <_strtod_l+0x398>
 801aae0:	9904      	ldr	r1, [sp, #16]
 801aae2:	4301      	orrs	r1, r0
 801aae4:	f47f aec2 	bne.w	801a86c <_strtod_l+0x84>
 801aae8:	2a00      	cmp	r2, #0
 801aaea:	f47f aedb 	bne.w	801a8a4 <_strtod_l+0xbc>
 801aaee:	2b69      	cmp	r3, #105	; 0x69
 801aaf0:	d027      	beq.n	801ab42 <_strtod_l+0x35a>
 801aaf2:	dc24      	bgt.n	801ab3e <_strtod_l+0x356>
 801aaf4:	2b49      	cmp	r3, #73	; 0x49
 801aaf6:	d024      	beq.n	801ab42 <_strtod_l+0x35a>
 801aaf8:	2b4e      	cmp	r3, #78	; 0x4e
 801aafa:	f47f aed3 	bne.w	801a8a4 <_strtod_l+0xbc>
 801aafe:	499e      	ldr	r1, [pc, #632]	; (801ad78 <_strtod_l+0x590>)
 801ab00:	a81d      	add	r0, sp, #116	; 0x74
 801ab02:	f001 fe41 	bl	801c788 <__match>
 801ab06:	2800      	cmp	r0, #0
 801ab08:	f43f aecc 	beq.w	801a8a4 <_strtod_l+0xbc>
 801ab0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab0e:	781b      	ldrb	r3, [r3, #0]
 801ab10:	2b28      	cmp	r3, #40	; 0x28
 801ab12:	d12d      	bne.n	801ab70 <_strtod_l+0x388>
 801ab14:	4999      	ldr	r1, [pc, #612]	; (801ad7c <_strtod_l+0x594>)
 801ab16:	aa20      	add	r2, sp, #128	; 0x80
 801ab18:	a81d      	add	r0, sp, #116	; 0x74
 801ab1a:	f001 fe49 	bl	801c7b0 <__hexnan>
 801ab1e:	2805      	cmp	r0, #5
 801ab20:	d126      	bne.n	801ab70 <_strtod_l+0x388>
 801ab22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ab24:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801ab28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ab2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ab30:	e69c      	b.n	801a86c <_strtod_l+0x84>
 801ab32:	210a      	movs	r1, #10
 801ab34:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ab38:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ab3c:	e7b9      	b.n	801aab2 <_strtod_l+0x2ca>
 801ab3e:	2b6e      	cmp	r3, #110	; 0x6e
 801ab40:	e7db      	b.n	801aafa <_strtod_l+0x312>
 801ab42:	498f      	ldr	r1, [pc, #572]	; (801ad80 <_strtod_l+0x598>)
 801ab44:	a81d      	add	r0, sp, #116	; 0x74
 801ab46:	f001 fe1f 	bl	801c788 <__match>
 801ab4a:	2800      	cmp	r0, #0
 801ab4c:	f43f aeaa 	beq.w	801a8a4 <_strtod_l+0xbc>
 801ab50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab52:	498c      	ldr	r1, [pc, #560]	; (801ad84 <_strtod_l+0x59c>)
 801ab54:	3b01      	subs	r3, #1
 801ab56:	a81d      	add	r0, sp, #116	; 0x74
 801ab58:	931d      	str	r3, [sp, #116]	; 0x74
 801ab5a:	f001 fe15 	bl	801c788 <__match>
 801ab5e:	b910      	cbnz	r0, 801ab66 <_strtod_l+0x37e>
 801ab60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab62:	3301      	adds	r3, #1
 801ab64:	931d      	str	r3, [sp, #116]	; 0x74
 801ab66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801ad94 <_strtod_l+0x5ac>
 801ab6a:	f04f 0a00 	mov.w	sl, #0
 801ab6e:	e67d      	b.n	801a86c <_strtod_l+0x84>
 801ab70:	4885      	ldr	r0, [pc, #532]	; (801ad88 <_strtod_l+0x5a0>)
 801ab72:	f002 fda9 	bl	801d6c8 <nan>
 801ab76:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ab7a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ab7e:	e675      	b.n	801a86c <_strtod_l+0x84>
 801ab80:	9b07      	ldr	r3, [sp, #28]
 801ab82:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab84:	1af3      	subs	r3, r6, r3
 801ab86:	2f00      	cmp	r7, #0
 801ab88:	bf08      	it	eq
 801ab8a:	462f      	moveq	r7, r5
 801ab8c:	2d10      	cmp	r5, #16
 801ab8e:	9308      	str	r3, [sp, #32]
 801ab90:	46a8      	mov	r8, r5
 801ab92:	bfa8      	it	ge
 801ab94:	f04f 0810 	movge.w	r8, #16
 801ab98:	f7e5 fcb4 	bl	8000504 <__aeabi_ui2d>
 801ab9c:	2d09      	cmp	r5, #9
 801ab9e:	4682      	mov	sl, r0
 801aba0:	468b      	mov	fp, r1
 801aba2:	dd13      	ble.n	801abcc <_strtod_l+0x3e4>
 801aba4:	4b79      	ldr	r3, [pc, #484]	; (801ad8c <_strtod_l+0x5a4>)
 801aba6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801abaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801abae:	f7e5 fd23 	bl	80005f8 <__aeabi_dmul>
 801abb2:	4682      	mov	sl, r0
 801abb4:	4648      	mov	r0, r9
 801abb6:	468b      	mov	fp, r1
 801abb8:	f7e5 fca4 	bl	8000504 <__aeabi_ui2d>
 801abbc:	4602      	mov	r2, r0
 801abbe:	460b      	mov	r3, r1
 801abc0:	4650      	mov	r0, sl
 801abc2:	4659      	mov	r1, fp
 801abc4:	f7e5 fb62 	bl	800028c <__adddf3>
 801abc8:	4682      	mov	sl, r0
 801abca:	468b      	mov	fp, r1
 801abcc:	2d0f      	cmp	r5, #15
 801abce:	dc38      	bgt.n	801ac42 <_strtod_l+0x45a>
 801abd0:	9b08      	ldr	r3, [sp, #32]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	f43f ae4a 	beq.w	801a86c <_strtod_l+0x84>
 801abd8:	dd24      	ble.n	801ac24 <_strtod_l+0x43c>
 801abda:	2b16      	cmp	r3, #22
 801abdc:	dc0b      	bgt.n	801abf6 <_strtod_l+0x40e>
 801abde:	4d6b      	ldr	r5, [pc, #428]	; (801ad8c <_strtod_l+0x5a4>)
 801abe0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801abe4:	e9d5 0100 	ldrd	r0, r1, [r5]
 801abe8:	4652      	mov	r2, sl
 801abea:	465b      	mov	r3, fp
 801abec:	f7e5 fd04 	bl	80005f8 <__aeabi_dmul>
 801abf0:	4682      	mov	sl, r0
 801abf2:	468b      	mov	fp, r1
 801abf4:	e63a      	b.n	801a86c <_strtod_l+0x84>
 801abf6:	9a08      	ldr	r2, [sp, #32]
 801abf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801abfc:	4293      	cmp	r3, r2
 801abfe:	db20      	blt.n	801ac42 <_strtod_l+0x45a>
 801ac00:	4c62      	ldr	r4, [pc, #392]	; (801ad8c <_strtod_l+0x5a4>)
 801ac02:	f1c5 050f 	rsb	r5, r5, #15
 801ac06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801ac0a:	4652      	mov	r2, sl
 801ac0c:	465b      	mov	r3, fp
 801ac0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac12:	f7e5 fcf1 	bl	80005f8 <__aeabi_dmul>
 801ac16:	9b08      	ldr	r3, [sp, #32]
 801ac18:	1b5d      	subs	r5, r3, r5
 801ac1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801ac1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ac22:	e7e3      	b.n	801abec <_strtod_l+0x404>
 801ac24:	9b08      	ldr	r3, [sp, #32]
 801ac26:	3316      	adds	r3, #22
 801ac28:	db0b      	blt.n	801ac42 <_strtod_l+0x45a>
 801ac2a:	9b07      	ldr	r3, [sp, #28]
 801ac2c:	4a57      	ldr	r2, [pc, #348]	; (801ad8c <_strtod_l+0x5a4>)
 801ac2e:	1b9e      	subs	r6, r3, r6
 801ac30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801ac34:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ac38:	4650      	mov	r0, sl
 801ac3a:	4659      	mov	r1, fp
 801ac3c:	f7e5 fe06 	bl	800084c <__aeabi_ddiv>
 801ac40:	e7d6      	b.n	801abf0 <_strtod_l+0x408>
 801ac42:	9b08      	ldr	r3, [sp, #32]
 801ac44:	eba5 0808 	sub.w	r8, r5, r8
 801ac48:	4498      	add	r8, r3
 801ac4a:	f1b8 0f00 	cmp.w	r8, #0
 801ac4e:	dd71      	ble.n	801ad34 <_strtod_l+0x54c>
 801ac50:	f018 030f 	ands.w	r3, r8, #15
 801ac54:	d00a      	beq.n	801ac6c <_strtod_l+0x484>
 801ac56:	494d      	ldr	r1, [pc, #308]	; (801ad8c <_strtod_l+0x5a4>)
 801ac58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ac5c:	4652      	mov	r2, sl
 801ac5e:	465b      	mov	r3, fp
 801ac60:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac64:	f7e5 fcc8 	bl	80005f8 <__aeabi_dmul>
 801ac68:	4682      	mov	sl, r0
 801ac6a:	468b      	mov	fp, r1
 801ac6c:	f038 080f 	bics.w	r8, r8, #15
 801ac70:	d04d      	beq.n	801ad0e <_strtod_l+0x526>
 801ac72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ac76:	dd22      	ble.n	801acbe <_strtod_l+0x4d6>
 801ac78:	2500      	movs	r5, #0
 801ac7a:	462e      	mov	r6, r5
 801ac7c:	9509      	str	r5, [sp, #36]	; 0x24
 801ac7e:	9507      	str	r5, [sp, #28]
 801ac80:	2322      	movs	r3, #34	; 0x22
 801ac82:	f8df b110 	ldr.w	fp, [pc, #272]	; 801ad94 <_strtod_l+0x5ac>
 801ac86:	6023      	str	r3, [r4, #0]
 801ac88:	f04f 0a00 	mov.w	sl, #0
 801ac8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	f43f adec 	beq.w	801a86c <_strtod_l+0x84>
 801ac94:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ac96:	4620      	mov	r0, r4
 801ac98:	f001 fe84 	bl	801c9a4 <_Bfree>
 801ac9c:	9907      	ldr	r1, [sp, #28]
 801ac9e:	4620      	mov	r0, r4
 801aca0:	f001 fe80 	bl	801c9a4 <_Bfree>
 801aca4:	4631      	mov	r1, r6
 801aca6:	4620      	mov	r0, r4
 801aca8:	f001 fe7c 	bl	801c9a4 <_Bfree>
 801acac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801acae:	4620      	mov	r0, r4
 801acb0:	f001 fe78 	bl	801c9a4 <_Bfree>
 801acb4:	4629      	mov	r1, r5
 801acb6:	4620      	mov	r0, r4
 801acb8:	f001 fe74 	bl	801c9a4 <_Bfree>
 801acbc:	e5d6      	b.n	801a86c <_strtod_l+0x84>
 801acbe:	2300      	movs	r3, #0
 801acc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801acc4:	4650      	mov	r0, sl
 801acc6:	4659      	mov	r1, fp
 801acc8:	4699      	mov	r9, r3
 801acca:	f1b8 0f01 	cmp.w	r8, #1
 801acce:	dc21      	bgt.n	801ad14 <_strtod_l+0x52c>
 801acd0:	b10b      	cbz	r3, 801acd6 <_strtod_l+0x4ee>
 801acd2:	4682      	mov	sl, r0
 801acd4:	468b      	mov	fp, r1
 801acd6:	4b2e      	ldr	r3, [pc, #184]	; (801ad90 <_strtod_l+0x5a8>)
 801acd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801acdc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ace0:	4652      	mov	r2, sl
 801ace2:	465b      	mov	r3, fp
 801ace4:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ace8:	f7e5 fc86 	bl	80005f8 <__aeabi_dmul>
 801acec:	4b29      	ldr	r3, [pc, #164]	; (801ad94 <_strtod_l+0x5ac>)
 801acee:	460a      	mov	r2, r1
 801acf0:	400b      	ands	r3, r1
 801acf2:	4929      	ldr	r1, [pc, #164]	; (801ad98 <_strtod_l+0x5b0>)
 801acf4:	428b      	cmp	r3, r1
 801acf6:	4682      	mov	sl, r0
 801acf8:	d8be      	bhi.n	801ac78 <_strtod_l+0x490>
 801acfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801acfe:	428b      	cmp	r3, r1
 801ad00:	bf86      	itte	hi
 801ad02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801ad9c <_strtod_l+0x5b4>
 801ad06:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801ad0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ad0e:	2300      	movs	r3, #0
 801ad10:	9304      	str	r3, [sp, #16]
 801ad12:	e081      	b.n	801ae18 <_strtod_l+0x630>
 801ad14:	f018 0f01 	tst.w	r8, #1
 801ad18:	d007      	beq.n	801ad2a <_strtod_l+0x542>
 801ad1a:	4b1d      	ldr	r3, [pc, #116]	; (801ad90 <_strtod_l+0x5a8>)
 801ad1c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad24:	f7e5 fc68 	bl	80005f8 <__aeabi_dmul>
 801ad28:	2301      	movs	r3, #1
 801ad2a:	f109 0901 	add.w	r9, r9, #1
 801ad2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ad32:	e7ca      	b.n	801acca <_strtod_l+0x4e2>
 801ad34:	d0eb      	beq.n	801ad0e <_strtod_l+0x526>
 801ad36:	f1c8 0800 	rsb	r8, r8, #0
 801ad3a:	f018 020f 	ands.w	r2, r8, #15
 801ad3e:	d00a      	beq.n	801ad56 <_strtod_l+0x56e>
 801ad40:	4b12      	ldr	r3, [pc, #72]	; (801ad8c <_strtod_l+0x5a4>)
 801ad42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ad46:	4650      	mov	r0, sl
 801ad48:	4659      	mov	r1, fp
 801ad4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad4e:	f7e5 fd7d 	bl	800084c <__aeabi_ddiv>
 801ad52:	4682      	mov	sl, r0
 801ad54:	468b      	mov	fp, r1
 801ad56:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ad5a:	d0d8      	beq.n	801ad0e <_strtod_l+0x526>
 801ad5c:	f1b8 0f1f 	cmp.w	r8, #31
 801ad60:	dd1e      	ble.n	801ada0 <_strtod_l+0x5b8>
 801ad62:	2500      	movs	r5, #0
 801ad64:	462e      	mov	r6, r5
 801ad66:	9509      	str	r5, [sp, #36]	; 0x24
 801ad68:	9507      	str	r5, [sp, #28]
 801ad6a:	2322      	movs	r3, #34	; 0x22
 801ad6c:	f04f 0a00 	mov.w	sl, #0
 801ad70:	f04f 0b00 	mov.w	fp, #0
 801ad74:	6023      	str	r3, [r4, #0]
 801ad76:	e789      	b.n	801ac8c <_strtod_l+0x4a4>
 801ad78:	080212b5 	.word	0x080212b5
 801ad7c:	080212f8 	.word	0x080212f8
 801ad80:	080212ad 	.word	0x080212ad
 801ad84:	0802143c 	.word	0x0802143c
 801ad88:	080216f8 	.word	0x080216f8
 801ad8c:	080215d8 	.word	0x080215d8
 801ad90:	080215b0 	.word	0x080215b0
 801ad94:	7ff00000 	.word	0x7ff00000
 801ad98:	7ca00000 	.word	0x7ca00000
 801ad9c:	7fefffff 	.word	0x7fefffff
 801ada0:	f018 0310 	ands.w	r3, r8, #16
 801ada4:	bf18      	it	ne
 801ada6:	236a      	movne	r3, #106	; 0x6a
 801ada8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801b160 <_strtod_l+0x978>
 801adac:	9304      	str	r3, [sp, #16]
 801adae:	4650      	mov	r0, sl
 801adb0:	4659      	mov	r1, fp
 801adb2:	2300      	movs	r3, #0
 801adb4:	f018 0f01 	tst.w	r8, #1
 801adb8:	d004      	beq.n	801adc4 <_strtod_l+0x5dc>
 801adba:	e9d9 2300 	ldrd	r2, r3, [r9]
 801adbe:	f7e5 fc1b 	bl	80005f8 <__aeabi_dmul>
 801adc2:	2301      	movs	r3, #1
 801adc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801adc8:	f109 0908 	add.w	r9, r9, #8
 801adcc:	d1f2      	bne.n	801adb4 <_strtod_l+0x5cc>
 801adce:	b10b      	cbz	r3, 801add4 <_strtod_l+0x5ec>
 801add0:	4682      	mov	sl, r0
 801add2:	468b      	mov	fp, r1
 801add4:	9b04      	ldr	r3, [sp, #16]
 801add6:	b1bb      	cbz	r3, 801ae08 <_strtod_l+0x620>
 801add8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801addc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	4659      	mov	r1, fp
 801ade4:	dd10      	ble.n	801ae08 <_strtod_l+0x620>
 801ade6:	2b1f      	cmp	r3, #31
 801ade8:	f340 8128 	ble.w	801b03c <_strtod_l+0x854>
 801adec:	2b34      	cmp	r3, #52	; 0x34
 801adee:	bfde      	ittt	le
 801adf0:	3b20      	suble	r3, #32
 801adf2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801adf6:	fa02 f303 	lslle.w	r3, r2, r3
 801adfa:	f04f 0a00 	mov.w	sl, #0
 801adfe:	bfcc      	ite	gt
 801ae00:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ae04:	ea03 0b01 	andle.w	fp, r3, r1
 801ae08:	2200      	movs	r2, #0
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	4650      	mov	r0, sl
 801ae0e:	4659      	mov	r1, fp
 801ae10:	f7e5 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae14:	2800      	cmp	r0, #0
 801ae16:	d1a4      	bne.n	801ad62 <_strtod_l+0x57a>
 801ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae1a:	9300      	str	r3, [sp, #0]
 801ae1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ae1e:	462b      	mov	r3, r5
 801ae20:	463a      	mov	r2, r7
 801ae22:	4620      	mov	r0, r4
 801ae24:	f001 fe2a 	bl	801ca7c <__s2b>
 801ae28:	9009      	str	r0, [sp, #36]	; 0x24
 801ae2a:	2800      	cmp	r0, #0
 801ae2c:	f43f af24 	beq.w	801ac78 <_strtod_l+0x490>
 801ae30:	9b07      	ldr	r3, [sp, #28]
 801ae32:	1b9e      	subs	r6, r3, r6
 801ae34:	9b08      	ldr	r3, [sp, #32]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	bfb4      	ite	lt
 801ae3a:	4633      	movlt	r3, r6
 801ae3c:	2300      	movge	r3, #0
 801ae3e:	9310      	str	r3, [sp, #64]	; 0x40
 801ae40:	9b08      	ldr	r3, [sp, #32]
 801ae42:	2500      	movs	r5, #0
 801ae44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae48:	9318      	str	r3, [sp, #96]	; 0x60
 801ae4a:	462e      	mov	r6, r5
 801ae4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae4e:	4620      	mov	r0, r4
 801ae50:	6859      	ldr	r1, [r3, #4]
 801ae52:	f001 fd67 	bl	801c924 <_Balloc>
 801ae56:	9007      	str	r0, [sp, #28]
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	f43f af11 	beq.w	801ac80 <_strtod_l+0x498>
 801ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae60:	691a      	ldr	r2, [r3, #16]
 801ae62:	3202      	adds	r2, #2
 801ae64:	f103 010c 	add.w	r1, r3, #12
 801ae68:	0092      	lsls	r2, r2, #2
 801ae6a:	300c      	adds	r0, #12
 801ae6c:	f7fe fdd8 	bl	8019a20 <memcpy>
 801ae70:	ec4b ab10 	vmov	d0, sl, fp
 801ae74:	aa20      	add	r2, sp, #128	; 0x80
 801ae76:	a91f      	add	r1, sp, #124	; 0x7c
 801ae78:	4620      	mov	r0, r4
 801ae7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801ae7e:	f002 f939 	bl	801d0f4 <__d2b>
 801ae82:	901e      	str	r0, [sp, #120]	; 0x78
 801ae84:	2800      	cmp	r0, #0
 801ae86:	f43f aefb 	beq.w	801ac80 <_strtod_l+0x498>
 801ae8a:	2101      	movs	r1, #1
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f001 fe8f 	bl	801cbb0 <__i2b>
 801ae92:	4606      	mov	r6, r0
 801ae94:	2800      	cmp	r0, #0
 801ae96:	f43f aef3 	beq.w	801ac80 <_strtod_l+0x498>
 801ae9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ae9c:	9904      	ldr	r1, [sp, #16]
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	bfab      	itete	ge
 801aea2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801aea4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801aea6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801aea8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801aeac:	bfac      	ite	ge
 801aeae:	eb03 0902 	addge.w	r9, r3, r2
 801aeb2:	1ad7      	sublt	r7, r2, r3
 801aeb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aeb6:	eba3 0801 	sub.w	r8, r3, r1
 801aeba:	4490      	add	r8, r2
 801aebc:	4ba3      	ldr	r3, [pc, #652]	; (801b14c <_strtod_l+0x964>)
 801aebe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801aec2:	4598      	cmp	r8, r3
 801aec4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801aec8:	f280 80cc 	bge.w	801b064 <_strtod_l+0x87c>
 801aecc:	eba3 0308 	sub.w	r3, r3, r8
 801aed0:	2b1f      	cmp	r3, #31
 801aed2:	eba2 0203 	sub.w	r2, r2, r3
 801aed6:	f04f 0101 	mov.w	r1, #1
 801aeda:	f300 80b6 	bgt.w	801b04a <_strtod_l+0x862>
 801aede:	fa01 f303 	lsl.w	r3, r1, r3
 801aee2:	9311      	str	r3, [sp, #68]	; 0x44
 801aee4:	2300      	movs	r3, #0
 801aee6:	930c      	str	r3, [sp, #48]	; 0x30
 801aee8:	eb09 0802 	add.w	r8, r9, r2
 801aeec:	9b04      	ldr	r3, [sp, #16]
 801aeee:	45c1      	cmp	r9, r8
 801aef0:	4417      	add	r7, r2
 801aef2:	441f      	add	r7, r3
 801aef4:	464b      	mov	r3, r9
 801aef6:	bfa8      	it	ge
 801aef8:	4643      	movge	r3, r8
 801aefa:	42bb      	cmp	r3, r7
 801aefc:	bfa8      	it	ge
 801aefe:	463b      	movge	r3, r7
 801af00:	2b00      	cmp	r3, #0
 801af02:	bfc2      	ittt	gt
 801af04:	eba8 0803 	subgt.w	r8, r8, r3
 801af08:	1aff      	subgt	r7, r7, r3
 801af0a:	eba9 0903 	subgt.w	r9, r9, r3
 801af0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801af10:	2b00      	cmp	r3, #0
 801af12:	dd17      	ble.n	801af44 <_strtod_l+0x75c>
 801af14:	4631      	mov	r1, r6
 801af16:	461a      	mov	r2, r3
 801af18:	4620      	mov	r0, r4
 801af1a:	f001 ff05 	bl	801cd28 <__pow5mult>
 801af1e:	4606      	mov	r6, r0
 801af20:	2800      	cmp	r0, #0
 801af22:	f43f aead 	beq.w	801ac80 <_strtod_l+0x498>
 801af26:	4601      	mov	r1, r0
 801af28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801af2a:	4620      	mov	r0, r4
 801af2c:	f001 fe56 	bl	801cbdc <__multiply>
 801af30:	900f      	str	r0, [sp, #60]	; 0x3c
 801af32:	2800      	cmp	r0, #0
 801af34:	f43f aea4 	beq.w	801ac80 <_strtod_l+0x498>
 801af38:	991e      	ldr	r1, [sp, #120]	; 0x78
 801af3a:	4620      	mov	r0, r4
 801af3c:	f001 fd32 	bl	801c9a4 <_Bfree>
 801af40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af42:	931e      	str	r3, [sp, #120]	; 0x78
 801af44:	f1b8 0f00 	cmp.w	r8, #0
 801af48:	f300 8091 	bgt.w	801b06e <_strtod_l+0x886>
 801af4c:	9b08      	ldr	r3, [sp, #32]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	dd08      	ble.n	801af64 <_strtod_l+0x77c>
 801af52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801af54:	9907      	ldr	r1, [sp, #28]
 801af56:	4620      	mov	r0, r4
 801af58:	f001 fee6 	bl	801cd28 <__pow5mult>
 801af5c:	9007      	str	r0, [sp, #28]
 801af5e:	2800      	cmp	r0, #0
 801af60:	f43f ae8e 	beq.w	801ac80 <_strtod_l+0x498>
 801af64:	2f00      	cmp	r7, #0
 801af66:	dd08      	ble.n	801af7a <_strtod_l+0x792>
 801af68:	9907      	ldr	r1, [sp, #28]
 801af6a:	463a      	mov	r2, r7
 801af6c:	4620      	mov	r0, r4
 801af6e:	f001 ff35 	bl	801cddc <__lshift>
 801af72:	9007      	str	r0, [sp, #28]
 801af74:	2800      	cmp	r0, #0
 801af76:	f43f ae83 	beq.w	801ac80 <_strtod_l+0x498>
 801af7a:	f1b9 0f00 	cmp.w	r9, #0
 801af7e:	dd08      	ble.n	801af92 <_strtod_l+0x7aa>
 801af80:	4631      	mov	r1, r6
 801af82:	464a      	mov	r2, r9
 801af84:	4620      	mov	r0, r4
 801af86:	f001 ff29 	bl	801cddc <__lshift>
 801af8a:	4606      	mov	r6, r0
 801af8c:	2800      	cmp	r0, #0
 801af8e:	f43f ae77 	beq.w	801ac80 <_strtod_l+0x498>
 801af92:	9a07      	ldr	r2, [sp, #28]
 801af94:	991e      	ldr	r1, [sp, #120]	; 0x78
 801af96:	4620      	mov	r0, r4
 801af98:	f001 ffa8 	bl	801ceec <__mdiff>
 801af9c:	4605      	mov	r5, r0
 801af9e:	2800      	cmp	r0, #0
 801afa0:	f43f ae6e 	beq.w	801ac80 <_strtod_l+0x498>
 801afa4:	68c3      	ldr	r3, [r0, #12]
 801afa6:	930f      	str	r3, [sp, #60]	; 0x3c
 801afa8:	2300      	movs	r3, #0
 801afaa:	60c3      	str	r3, [r0, #12]
 801afac:	4631      	mov	r1, r6
 801afae:	f001 ff81 	bl	801ceb4 <__mcmp>
 801afb2:	2800      	cmp	r0, #0
 801afb4:	da65      	bge.n	801b082 <_strtod_l+0x89a>
 801afb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801afb8:	ea53 030a 	orrs.w	r3, r3, sl
 801afbc:	f040 8087 	bne.w	801b0ce <_strtod_l+0x8e6>
 801afc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	f040 8082 	bne.w	801b0ce <_strtod_l+0x8e6>
 801afca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801afce:	0d1b      	lsrs	r3, r3, #20
 801afd0:	051b      	lsls	r3, r3, #20
 801afd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801afd6:	d97a      	bls.n	801b0ce <_strtod_l+0x8e6>
 801afd8:	696b      	ldr	r3, [r5, #20]
 801afda:	b913      	cbnz	r3, 801afe2 <_strtod_l+0x7fa>
 801afdc:	692b      	ldr	r3, [r5, #16]
 801afde:	2b01      	cmp	r3, #1
 801afe0:	dd75      	ble.n	801b0ce <_strtod_l+0x8e6>
 801afe2:	4629      	mov	r1, r5
 801afe4:	2201      	movs	r2, #1
 801afe6:	4620      	mov	r0, r4
 801afe8:	f001 fef8 	bl	801cddc <__lshift>
 801afec:	4631      	mov	r1, r6
 801afee:	4605      	mov	r5, r0
 801aff0:	f001 ff60 	bl	801ceb4 <__mcmp>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	dd6a      	ble.n	801b0ce <_strtod_l+0x8e6>
 801aff8:	9904      	ldr	r1, [sp, #16]
 801affa:	4a55      	ldr	r2, [pc, #340]	; (801b150 <_strtod_l+0x968>)
 801affc:	465b      	mov	r3, fp
 801affe:	2900      	cmp	r1, #0
 801b000:	f000 8085 	beq.w	801b10e <_strtod_l+0x926>
 801b004:	ea02 010b 	and.w	r1, r2, fp
 801b008:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b00c:	dc7f      	bgt.n	801b10e <_strtod_l+0x926>
 801b00e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b012:	f77f aeaa 	ble.w	801ad6a <_strtod_l+0x582>
 801b016:	4a4f      	ldr	r2, [pc, #316]	; (801b154 <_strtod_l+0x96c>)
 801b018:	2300      	movs	r3, #0
 801b01a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801b01e:	4650      	mov	r0, sl
 801b020:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801b024:	4659      	mov	r1, fp
 801b026:	f7e5 fae7 	bl	80005f8 <__aeabi_dmul>
 801b02a:	460b      	mov	r3, r1
 801b02c:	4303      	orrs	r3, r0
 801b02e:	bf08      	it	eq
 801b030:	2322      	moveq	r3, #34	; 0x22
 801b032:	4682      	mov	sl, r0
 801b034:	468b      	mov	fp, r1
 801b036:	bf08      	it	eq
 801b038:	6023      	streq	r3, [r4, #0]
 801b03a:	e62b      	b.n	801ac94 <_strtod_l+0x4ac>
 801b03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b040:	fa02 f303 	lsl.w	r3, r2, r3
 801b044:	ea03 0a0a 	and.w	sl, r3, sl
 801b048:	e6de      	b.n	801ae08 <_strtod_l+0x620>
 801b04a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b04e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b052:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b056:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b05a:	fa01 f308 	lsl.w	r3, r1, r8
 801b05e:	930c      	str	r3, [sp, #48]	; 0x30
 801b060:	9111      	str	r1, [sp, #68]	; 0x44
 801b062:	e741      	b.n	801aee8 <_strtod_l+0x700>
 801b064:	2300      	movs	r3, #0
 801b066:	930c      	str	r3, [sp, #48]	; 0x30
 801b068:	2301      	movs	r3, #1
 801b06a:	9311      	str	r3, [sp, #68]	; 0x44
 801b06c:	e73c      	b.n	801aee8 <_strtod_l+0x700>
 801b06e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b070:	4642      	mov	r2, r8
 801b072:	4620      	mov	r0, r4
 801b074:	f001 feb2 	bl	801cddc <__lshift>
 801b078:	901e      	str	r0, [sp, #120]	; 0x78
 801b07a:	2800      	cmp	r0, #0
 801b07c:	f47f af66 	bne.w	801af4c <_strtod_l+0x764>
 801b080:	e5fe      	b.n	801ac80 <_strtod_l+0x498>
 801b082:	465f      	mov	r7, fp
 801b084:	d16e      	bne.n	801b164 <_strtod_l+0x97c>
 801b086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b088:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b08c:	b342      	cbz	r2, 801b0e0 <_strtod_l+0x8f8>
 801b08e:	4a32      	ldr	r2, [pc, #200]	; (801b158 <_strtod_l+0x970>)
 801b090:	4293      	cmp	r3, r2
 801b092:	d128      	bne.n	801b0e6 <_strtod_l+0x8fe>
 801b094:	9b04      	ldr	r3, [sp, #16]
 801b096:	4650      	mov	r0, sl
 801b098:	b1eb      	cbz	r3, 801b0d6 <_strtod_l+0x8ee>
 801b09a:	4a2d      	ldr	r2, [pc, #180]	; (801b150 <_strtod_l+0x968>)
 801b09c:	403a      	ands	r2, r7
 801b09e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b0a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b0a6:	d819      	bhi.n	801b0dc <_strtod_l+0x8f4>
 801b0a8:	0d12      	lsrs	r2, r2, #20
 801b0aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b0ae:	fa01 f303 	lsl.w	r3, r1, r3
 801b0b2:	4298      	cmp	r0, r3
 801b0b4:	d117      	bne.n	801b0e6 <_strtod_l+0x8fe>
 801b0b6:	4b29      	ldr	r3, [pc, #164]	; (801b15c <_strtod_l+0x974>)
 801b0b8:	429f      	cmp	r7, r3
 801b0ba:	d102      	bne.n	801b0c2 <_strtod_l+0x8da>
 801b0bc:	3001      	adds	r0, #1
 801b0be:	f43f addf 	beq.w	801ac80 <_strtod_l+0x498>
 801b0c2:	4b23      	ldr	r3, [pc, #140]	; (801b150 <_strtod_l+0x968>)
 801b0c4:	403b      	ands	r3, r7
 801b0c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b0ca:	f04f 0a00 	mov.w	sl, #0
 801b0ce:	9b04      	ldr	r3, [sp, #16]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d1a0      	bne.n	801b016 <_strtod_l+0x82e>
 801b0d4:	e5de      	b.n	801ac94 <_strtod_l+0x4ac>
 801b0d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0da:	e7ea      	b.n	801b0b2 <_strtod_l+0x8ca>
 801b0dc:	460b      	mov	r3, r1
 801b0de:	e7e8      	b.n	801b0b2 <_strtod_l+0x8ca>
 801b0e0:	ea53 030a 	orrs.w	r3, r3, sl
 801b0e4:	d088      	beq.n	801aff8 <_strtod_l+0x810>
 801b0e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0e8:	b1db      	cbz	r3, 801b122 <_strtod_l+0x93a>
 801b0ea:	423b      	tst	r3, r7
 801b0ec:	d0ef      	beq.n	801b0ce <_strtod_l+0x8e6>
 801b0ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0f0:	9a04      	ldr	r2, [sp, #16]
 801b0f2:	4650      	mov	r0, sl
 801b0f4:	4659      	mov	r1, fp
 801b0f6:	b1c3      	cbz	r3, 801b12a <_strtod_l+0x942>
 801b0f8:	f7ff fb5a 	bl	801a7b0 <sulp>
 801b0fc:	4602      	mov	r2, r0
 801b0fe:	460b      	mov	r3, r1
 801b100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b104:	f7e5 f8c2 	bl	800028c <__adddf3>
 801b108:	4682      	mov	sl, r0
 801b10a:	468b      	mov	fp, r1
 801b10c:	e7df      	b.n	801b0ce <_strtod_l+0x8e6>
 801b10e:	4013      	ands	r3, r2
 801b110:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b114:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b118:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b11c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b120:	e7d5      	b.n	801b0ce <_strtod_l+0x8e6>
 801b122:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b124:	ea13 0f0a 	tst.w	r3, sl
 801b128:	e7e0      	b.n	801b0ec <_strtod_l+0x904>
 801b12a:	f7ff fb41 	bl	801a7b0 <sulp>
 801b12e:	4602      	mov	r2, r0
 801b130:	460b      	mov	r3, r1
 801b132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b136:	f7e5 f8a7 	bl	8000288 <__aeabi_dsub>
 801b13a:	2200      	movs	r2, #0
 801b13c:	2300      	movs	r3, #0
 801b13e:	4682      	mov	sl, r0
 801b140:	468b      	mov	fp, r1
 801b142:	f7e5 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 801b146:	2800      	cmp	r0, #0
 801b148:	d0c1      	beq.n	801b0ce <_strtod_l+0x8e6>
 801b14a:	e60e      	b.n	801ad6a <_strtod_l+0x582>
 801b14c:	fffffc02 	.word	0xfffffc02
 801b150:	7ff00000 	.word	0x7ff00000
 801b154:	39500000 	.word	0x39500000
 801b158:	000fffff 	.word	0x000fffff
 801b15c:	7fefffff 	.word	0x7fefffff
 801b160:	08021310 	.word	0x08021310
 801b164:	4631      	mov	r1, r6
 801b166:	4628      	mov	r0, r5
 801b168:	f002 f820 	bl	801d1ac <__ratio>
 801b16c:	ec59 8b10 	vmov	r8, r9, d0
 801b170:	ee10 0a10 	vmov	r0, s0
 801b174:	2200      	movs	r2, #0
 801b176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b17a:	4649      	mov	r1, r9
 801b17c:	f7e5 fcb8 	bl	8000af0 <__aeabi_dcmple>
 801b180:	2800      	cmp	r0, #0
 801b182:	d07c      	beq.n	801b27e <_strtod_l+0xa96>
 801b184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b186:	2b00      	cmp	r3, #0
 801b188:	d04c      	beq.n	801b224 <_strtod_l+0xa3c>
 801b18a:	4b95      	ldr	r3, [pc, #596]	; (801b3e0 <_strtod_l+0xbf8>)
 801b18c:	2200      	movs	r2, #0
 801b18e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b192:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b3e0 <_strtod_l+0xbf8>
 801b196:	f04f 0800 	mov.w	r8, #0
 801b19a:	4b92      	ldr	r3, [pc, #584]	; (801b3e4 <_strtod_l+0xbfc>)
 801b19c:	403b      	ands	r3, r7
 801b19e:	9311      	str	r3, [sp, #68]	; 0x44
 801b1a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b1a2:	4b91      	ldr	r3, [pc, #580]	; (801b3e8 <_strtod_l+0xc00>)
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	f040 80b2 	bne.w	801b30e <_strtod_l+0xb26>
 801b1aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b1ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b1b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b1b6:	ec4b ab10 	vmov	d0, sl, fp
 801b1ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b1be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b1c2:	f001 ff1b 	bl	801cffc <__ulp>
 801b1c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b1ca:	ec53 2b10 	vmov	r2, r3, d0
 801b1ce:	f7e5 fa13 	bl	80005f8 <__aeabi_dmul>
 801b1d2:	4652      	mov	r2, sl
 801b1d4:	465b      	mov	r3, fp
 801b1d6:	f7e5 f859 	bl	800028c <__adddf3>
 801b1da:	460b      	mov	r3, r1
 801b1dc:	4981      	ldr	r1, [pc, #516]	; (801b3e4 <_strtod_l+0xbfc>)
 801b1de:	4a83      	ldr	r2, [pc, #524]	; (801b3ec <_strtod_l+0xc04>)
 801b1e0:	4019      	ands	r1, r3
 801b1e2:	4291      	cmp	r1, r2
 801b1e4:	4682      	mov	sl, r0
 801b1e6:	d95e      	bls.n	801b2a6 <_strtod_l+0xabe>
 801b1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b1ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b1ee:	4293      	cmp	r3, r2
 801b1f0:	d103      	bne.n	801b1fa <_strtod_l+0xa12>
 801b1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1f4:	3301      	adds	r3, #1
 801b1f6:	f43f ad43 	beq.w	801ac80 <_strtod_l+0x498>
 801b1fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b3f8 <_strtod_l+0xc10>
 801b1fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b202:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b204:	4620      	mov	r0, r4
 801b206:	f001 fbcd 	bl	801c9a4 <_Bfree>
 801b20a:	9907      	ldr	r1, [sp, #28]
 801b20c:	4620      	mov	r0, r4
 801b20e:	f001 fbc9 	bl	801c9a4 <_Bfree>
 801b212:	4631      	mov	r1, r6
 801b214:	4620      	mov	r0, r4
 801b216:	f001 fbc5 	bl	801c9a4 <_Bfree>
 801b21a:	4629      	mov	r1, r5
 801b21c:	4620      	mov	r0, r4
 801b21e:	f001 fbc1 	bl	801c9a4 <_Bfree>
 801b222:	e613      	b.n	801ae4c <_strtod_l+0x664>
 801b224:	f1ba 0f00 	cmp.w	sl, #0
 801b228:	d11b      	bne.n	801b262 <_strtod_l+0xa7a>
 801b22a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b22e:	b9f3      	cbnz	r3, 801b26e <_strtod_l+0xa86>
 801b230:	4b6b      	ldr	r3, [pc, #428]	; (801b3e0 <_strtod_l+0xbf8>)
 801b232:	2200      	movs	r2, #0
 801b234:	4640      	mov	r0, r8
 801b236:	4649      	mov	r1, r9
 801b238:	f7e5 fc50 	bl	8000adc <__aeabi_dcmplt>
 801b23c:	b9d0      	cbnz	r0, 801b274 <_strtod_l+0xa8c>
 801b23e:	4640      	mov	r0, r8
 801b240:	4649      	mov	r1, r9
 801b242:	4b6b      	ldr	r3, [pc, #428]	; (801b3f0 <_strtod_l+0xc08>)
 801b244:	2200      	movs	r2, #0
 801b246:	f7e5 f9d7 	bl	80005f8 <__aeabi_dmul>
 801b24a:	4680      	mov	r8, r0
 801b24c:	4689      	mov	r9, r1
 801b24e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b252:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b256:	931b      	str	r3, [sp, #108]	; 0x6c
 801b258:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b25c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b260:	e79b      	b.n	801b19a <_strtod_l+0x9b2>
 801b262:	f1ba 0f01 	cmp.w	sl, #1
 801b266:	d102      	bne.n	801b26e <_strtod_l+0xa86>
 801b268:	2f00      	cmp	r7, #0
 801b26a:	f43f ad7e 	beq.w	801ad6a <_strtod_l+0x582>
 801b26e:	4b61      	ldr	r3, [pc, #388]	; (801b3f4 <_strtod_l+0xc0c>)
 801b270:	2200      	movs	r2, #0
 801b272:	e78c      	b.n	801b18e <_strtod_l+0x9a6>
 801b274:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b3f0 <_strtod_l+0xc08>
 801b278:	f04f 0800 	mov.w	r8, #0
 801b27c:	e7e7      	b.n	801b24e <_strtod_l+0xa66>
 801b27e:	4b5c      	ldr	r3, [pc, #368]	; (801b3f0 <_strtod_l+0xc08>)
 801b280:	4640      	mov	r0, r8
 801b282:	4649      	mov	r1, r9
 801b284:	2200      	movs	r2, #0
 801b286:	f7e5 f9b7 	bl	80005f8 <__aeabi_dmul>
 801b28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b28c:	4680      	mov	r8, r0
 801b28e:	4689      	mov	r9, r1
 801b290:	b933      	cbnz	r3, 801b2a0 <_strtod_l+0xab8>
 801b292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b296:	9012      	str	r0, [sp, #72]	; 0x48
 801b298:	9313      	str	r3, [sp, #76]	; 0x4c
 801b29a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b29e:	e7dd      	b.n	801b25c <_strtod_l+0xa74>
 801b2a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b2a4:	e7f9      	b.n	801b29a <_strtod_l+0xab2>
 801b2a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b2aa:	9b04      	ldr	r3, [sp, #16]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d1a8      	bne.n	801b202 <_strtod_l+0xa1a>
 801b2b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b2b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b2b6:	0d1b      	lsrs	r3, r3, #20
 801b2b8:	051b      	lsls	r3, r3, #20
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	d1a1      	bne.n	801b202 <_strtod_l+0xa1a>
 801b2be:	4640      	mov	r0, r8
 801b2c0:	4649      	mov	r1, r9
 801b2c2:	f7e5 fcf9 	bl	8000cb8 <__aeabi_d2lz>
 801b2c6:	f7e5 f969 	bl	800059c <__aeabi_l2d>
 801b2ca:	4602      	mov	r2, r0
 801b2cc:	460b      	mov	r3, r1
 801b2ce:	4640      	mov	r0, r8
 801b2d0:	4649      	mov	r1, r9
 801b2d2:	f7e4 ffd9 	bl	8000288 <__aeabi_dsub>
 801b2d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b2dc:	ea43 030a 	orr.w	r3, r3, sl
 801b2e0:	4313      	orrs	r3, r2
 801b2e2:	4680      	mov	r8, r0
 801b2e4:	4689      	mov	r9, r1
 801b2e6:	d053      	beq.n	801b390 <_strtod_l+0xba8>
 801b2e8:	a335      	add	r3, pc, #212	; (adr r3, 801b3c0 <_strtod_l+0xbd8>)
 801b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ee:	f7e5 fbf5 	bl	8000adc <__aeabi_dcmplt>
 801b2f2:	2800      	cmp	r0, #0
 801b2f4:	f47f acce 	bne.w	801ac94 <_strtod_l+0x4ac>
 801b2f8:	a333      	add	r3, pc, #204	; (adr r3, 801b3c8 <_strtod_l+0xbe0>)
 801b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2fe:	4640      	mov	r0, r8
 801b300:	4649      	mov	r1, r9
 801b302:	f7e5 fc09 	bl	8000b18 <__aeabi_dcmpgt>
 801b306:	2800      	cmp	r0, #0
 801b308:	f43f af7b 	beq.w	801b202 <_strtod_l+0xa1a>
 801b30c:	e4c2      	b.n	801ac94 <_strtod_l+0x4ac>
 801b30e:	9b04      	ldr	r3, [sp, #16]
 801b310:	b333      	cbz	r3, 801b360 <_strtod_l+0xb78>
 801b312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b314:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b318:	d822      	bhi.n	801b360 <_strtod_l+0xb78>
 801b31a:	a32d      	add	r3, pc, #180	; (adr r3, 801b3d0 <_strtod_l+0xbe8>)
 801b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b320:	4640      	mov	r0, r8
 801b322:	4649      	mov	r1, r9
 801b324:	f7e5 fbe4 	bl	8000af0 <__aeabi_dcmple>
 801b328:	b1a0      	cbz	r0, 801b354 <_strtod_l+0xb6c>
 801b32a:	4649      	mov	r1, r9
 801b32c:	4640      	mov	r0, r8
 801b32e:	f7e5 fc3b 	bl	8000ba8 <__aeabi_d2uiz>
 801b332:	2801      	cmp	r0, #1
 801b334:	bf38      	it	cc
 801b336:	2001      	movcc	r0, #1
 801b338:	f7e5 f8e4 	bl	8000504 <__aeabi_ui2d>
 801b33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b33e:	4680      	mov	r8, r0
 801b340:	4689      	mov	r9, r1
 801b342:	bb13      	cbnz	r3, 801b38a <_strtod_l+0xba2>
 801b344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b348:	9014      	str	r0, [sp, #80]	; 0x50
 801b34a:	9315      	str	r3, [sp, #84]	; 0x54
 801b34c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b350:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b356:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b358:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b35c:	1a9b      	subs	r3, r3, r2
 801b35e:	930d      	str	r3, [sp, #52]	; 0x34
 801b360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b364:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b36c:	f001 fe46 	bl	801cffc <__ulp>
 801b370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b374:	ec53 2b10 	vmov	r2, r3, d0
 801b378:	f7e5 f93e 	bl	80005f8 <__aeabi_dmul>
 801b37c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b380:	f7e4 ff84 	bl	800028c <__adddf3>
 801b384:	4682      	mov	sl, r0
 801b386:	468b      	mov	fp, r1
 801b388:	e78f      	b.n	801b2aa <_strtod_l+0xac2>
 801b38a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b38e:	e7dd      	b.n	801b34c <_strtod_l+0xb64>
 801b390:	a311      	add	r3, pc, #68	; (adr r3, 801b3d8 <_strtod_l+0xbf0>)
 801b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b396:	f7e5 fba1 	bl	8000adc <__aeabi_dcmplt>
 801b39a:	e7b4      	b.n	801b306 <_strtod_l+0xb1e>
 801b39c:	2300      	movs	r3, #0
 801b39e:	930e      	str	r3, [sp, #56]	; 0x38
 801b3a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b3a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b3a4:	6013      	str	r3, [r2, #0]
 801b3a6:	f7ff ba65 	b.w	801a874 <_strtod_l+0x8c>
 801b3aa:	2b65      	cmp	r3, #101	; 0x65
 801b3ac:	f43f ab5d 	beq.w	801aa6a <_strtod_l+0x282>
 801b3b0:	2b45      	cmp	r3, #69	; 0x45
 801b3b2:	f43f ab5a 	beq.w	801aa6a <_strtod_l+0x282>
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	f7ff bb92 	b.w	801aae0 <_strtod_l+0x2f8>
 801b3bc:	f3af 8000 	nop.w
 801b3c0:	94a03595 	.word	0x94a03595
 801b3c4:	3fdfffff 	.word	0x3fdfffff
 801b3c8:	35afe535 	.word	0x35afe535
 801b3cc:	3fe00000 	.word	0x3fe00000
 801b3d0:	ffc00000 	.word	0xffc00000
 801b3d4:	41dfffff 	.word	0x41dfffff
 801b3d8:	94a03595 	.word	0x94a03595
 801b3dc:	3fcfffff 	.word	0x3fcfffff
 801b3e0:	3ff00000 	.word	0x3ff00000
 801b3e4:	7ff00000 	.word	0x7ff00000
 801b3e8:	7fe00000 	.word	0x7fe00000
 801b3ec:	7c9fffff 	.word	0x7c9fffff
 801b3f0:	3fe00000 	.word	0x3fe00000
 801b3f4:	bff00000 	.word	0xbff00000
 801b3f8:	7fefffff 	.word	0x7fefffff

0801b3fc <_strtod_r>:
 801b3fc:	4b01      	ldr	r3, [pc, #4]	; (801b404 <_strtod_r+0x8>)
 801b3fe:	f7ff b9f3 	b.w	801a7e8 <_strtod_l>
 801b402:	bf00      	nop
 801b404:	200002ec 	.word	0x200002ec

0801b408 <_strtol_l.isra.0>:
 801b408:	2b01      	cmp	r3, #1
 801b40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b40e:	d001      	beq.n	801b414 <_strtol_l.isra.0+0xc>
 801b410:	2b24      	cmp	r3, #36	; 0x24
 801b412:	d906      	bls.n	801b422 <_strtol_l.isra.0+0x1a>
 801b414:	f7fe fada 	bl	80199cc <__errno>
 801b418:	2316      	movs	r3, #22
 801b41a:	6003      	str	r3, [r0, #0]
 801b41c:	2000      	movs	r0, #0
 801b41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b422:	4f3a      	ldr	r7, [pc, #232]	; (801b50c <_strtol_l.isra.0+0x104>)
 801b424:	468e      	mov	lr, r1
 801b426:	4676      	mov	r6, lr
 801b428:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b42c:	5de5      	ldrb	r5, [r4, r7]
 801b42e:	f015 0508 	ands.w	r5, r5, #8
 801b432:	d1f8      	bne.n	801b426 <_strtol_l.isra.0+0x1e>
 801b434:	2c2d      	cmp	r4, #45	; 0x2d
 801b436:	d134      	bne.n	801b4a2 <_strtol_l.isra.0+0x9a>
 801b438:	f89e 4000 	ldrb.w	r4, [lr]
 801b43c:	f04f 0801 	mov.w	r8, #1
 801b440:	f106 0e02 	add.w	lr, r6, #2
 801b444:	2b00      	cmp	r3, #0
 801b446:	d05c      	beq.n	801b502 <_strtol_l.isra.0+0xfa>
 801b448:	2b10      	cmp	r3, #16
 801b44a:	d10c      	bne.n	801b466 <_strtol_l.isra.0+0x5e>
 801b44c:	2c30      	cmp	r4, #48	; 0x30
 801b44e:	d10a      	bne.n	801b466 <_strtol_l.isra.0+0x5e>
 801b450:	f89e 4000 	ldrb.w	r4, [lr]
 801b454:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b458:	2c58      	cmp	r4, #88	; 0x58
 801b45a:	d14d      	bne.n	801b4f8 <_strtol_l.isra.0+0xf0>
 801b45c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b460:	2310      	movs	r3, #16
 801b462:	f10e 0e02 	add.w	lr, lr, #2
 801b466:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b46a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801b46e:	2600      	movs	r6, #0
 801b470:	fbbc f9f3 	udiv	r9, ip, r3
 801b474:	4635      	mov	r5, r6
 801b476:	fb03 ca19 	mls	sl, r3, r9, ip
 801b47a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b47e:	2f09      	cmp	r7, #9
 801b480:	d818      	bhi.n	801b4b4 <_strtol_l.isra.0+0xac>
 801b482:	463c      	mov	r4, r7
 801b484:	42a3      	cmp	r3, r4
 801b486:	dd24      	ble.n	801b4d2 <_strtol_l.isra.0+0xca>
 801b488:	2e00      	cmp	r6, #0
 801b48a:	db1f      	blt.n	801b4cc <_strtol_l.isra.0+0xc4>
 801b48c:	45a9      	cmp	r9, r5
 801b48e:	d31d      	bcc.n	801b4cc <_strtol_l.isra.0+0xc4>
 801b490:	d101      	bne.n	801b496 <_strtol_l.isra.0+0x8e>
 801b492:	45a2      	cmp	sl, r4
 801b494:	db1a      	blt.n	801b4cc <_strtol_l.isra.0+0xc4>
 801b496:	fb05 4503 	mla	r5, r5, r3, r4
 801b49a:	2601      	movs	r6, #1
 801b49c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b4a0:	e7eb      	b.n	801b47a <_strtol_l.isra.0+0x72>
 801b4a2:	2c2b      	cmp	r4, #43	; 0x2b
 801b4a4:	bf08      	it	eq
 801b4a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b4aa:	46a8      	mov	r8, r5
 801b4ac:	bf08      	it	eq
 801b4ae:	f106 0e02 	addeq.w	lr, r6, #2
 801b4b2:	e7c7      	b.n	801b444 <_strtol_l.isra.0+0x3c>
 801b4b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b4b8:	2f19      	cmp	r7, #25
 801b4ba:	d801      	bhi.n	801b4c0 <_strtol_l.isra.0+0xb8>
 801b4bc:	3c37      	subs	r4, #55	; 0x37
 801b4be:	e7e1      	b.n	801b484 <_strtol_l.isra.0+0x7c>
 801b4c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b4c4:	2f19      	cmp	r7, #25
 801b4c6:	d804      	bhi.n	801b4d2 <_strtol_l.isra.0+0xca>
 801b4c8:	3c57      	subs	r4, #87	; 0x57
 801b4ca:	e7db      	b.n	801b484 <_strtol_l.isra.0+0x7c>
 801b4cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801b4d0:	e7e4      	b.n	801b49c <_strtol_l.isra.0+0x94>
 801b4d2:	2e00      	cmp	r6, #0
 801b4d4:	da05      	bge.n	801b4e2 <_strtol_l.isra.0+0xda>
 801b4d6:	2322      	movs	r3, #34	; 0x22
 801b4d8:	6003      	str	r3, [r0, #0]
 801b4da:	4665      	mov	r5, ip
 801b4dc:	b942      	cbnz	r2, 801b4f0 <_strtol_l.isra.0+0xe8>
 801b4de:	4628      	mov	r0, r5
 801b4e0:	e79d      	b.n	801b41e <_strtol_l.isra.0+0x16>
 801b4e2:	f1b8 0f00 	cmp.w	r8, #0
 801b4e6:	d000      	beq.n	801b4ea <_strtol_l.isra.0+0xe2>
 801b4e8:	426d      	negs	r5, r5
 801b4ea:	2a00      	cmp	r2, #0
 801b4ec:	d0f7      	beq.n	801b4de <_strtol_l.isra.0+0xd6>
 801b4ee:	b10e      	cbz	r6, 801b4f4 <_strtol_l.isra.0+0xec>
 801b4f0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801b4f4:	6011      	str	r1, [r2, #0]
 801b4f6:	e7f2      	b.n	801b4de <_strtol_l.isra.0+0xd6>
 801b4f8:	2430      	movs	r4, #48	; 0x30
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d1b3      	bne.n	801b466 <_strtol_l.isra.0+0x5e>
 801b4fe:	2308      	movs	r3, #8
 801b500:	e7b1      	b.n	801b466 <_strtol_l.isra.0+0x5e>
 801b502:	2c30      	cmp	r4, #48	; 0x30
 801b504:	d0a4      	beq.n	801b450 <_strtol_l.isra.0+0x48>
 801b506:	230a      	movs	r3, #10
 801b508:	e7ad      	b.n	801b466 <_strtol_l.isra.0+0x5e>
 801b50a:	bf00      	nop
 801b50c:	08021339 	.word	0x08021339

0801b510 <_strtol_r>:
 801b510:	f7ff bf7a 	b.w	801b408 <_strtol_l.isra.0>

0801b514 <quorem>:
 801b514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b518:	6903      	ldr	r3, [r0, #16]
 801b51a:	690c      	ldr	r4, [r1, #16]
 801b51c:	42a3      	cmp	r3, r4
 801b51e:	4607      	mov	r7, r0
 801b520:	f2c0 8081 	blt.w	801b626 <quorem+0x112>
 801b524:	3c01      	subs	r4, #1
 801b526:	f101 0814 	add.w	r8, r1, #20
 801b52a:	f100 0514 	add.w	r5, r0, #20
 801b52e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b532:	9301      	str	r3, [sp, #4]
 801b534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b53c:	3301      	adds	r3, #1
 801b53e:	429a      	cmp	r2, r3
 801b540:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b548:	fbb2 f6f3 	udiv	r6, r2, r3
 801b54c:	d331      	bcc.n	801b5b2 <quorem+0x9e>
 801b54e:	f04f 0e00 	mov.w	lr, #0
 801b552:	4640      	mov	r0, r8
 801b554:	46ac      	mov	ip, r5
 801b556:	46f2      	mov	sl, lr
 801b558:	f850 2b04 	ldr.w	r2, [r0], #4
 801b55c:	b293      	uxth	r3, r2
 801b55e:	fb06 e303 	mla	r3, r6, r3, lr
 801b562:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b566:	b29b      	uxth	r3, r3
 801b568:	ebaa 0303 	sub.w	r3, sl, r3
 801b56c:	0c12      	lsrs	r2, r2, #16
 801b56e:	f8dc a000 	ldr.w	sl, [ip]
 801b572:	fb06 e202 	mla	r2, r6, r2, lr
 801b576:	fa13 f38a 	uxtah	r3, r3, sl
 801b57a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b57e:	fa1f fa82 	uxth.w	sl, r2
 801b582:	f8dc 2000 	ldr.w	r2, [ip]
 801b586:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801b58a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b58e:	b29b      	uxth	r3, r3
 801b590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b594:	4581      	cmp	r9, r0
 801b596:	f84c 3b04 	str.w	r3, [ip], #4
 801b59a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b59e:	d2db      	bcs.n	801b558 <quorem+0x44>
 801b5a0:	f855 300b 	ldr.w	r3, [r5, fp]
 801b5a4:	b92b      	cbnz	r3, 801b5b2 <quorem+0x9e>
 801b5a6:	9b01      	ldr	r3, [sp, #4]
 801b5a8:	3b04      	subs	r3, #4
 801b5aa:	429d      	cmp	r5, r3
 801b5ac:	461a      	mov	r2, r3
 801b5ae:	d32e      	bcc.n	801b60e <quorem+0xfa>
 801b5b0:	613c      	str	r4, [r7, #16]
 801b5b2:	4638      	mov	r0, r7
 801b5b4:	f001 fc7e 	bl	801ceb4 <__mcmp>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	db24      	blt.n	801b606 <quorem+0xf2>
 801b5bc:	3601      	adds	r6, #1
 801b5be:	4628      	mov	r0, r5
 801b5c0:	f04f 0c00 	mov.w	ip, #0
 801b5c4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b5c8:	f8d0 e000 	ldr.w	lr, [r0]
 801b5cc:	b293      	uxth	r3, r2
 801b5ce:	ebac 0303 	sub.w	r3, ip, r3
 801b5d2:	0c12      	lsrs	r2, r2, #16
 801b5d4:	fa13 f38e 	uxtah	r3, r3, lr
 801b5d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b5dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5e0:	b29b      	uxth	r3, r3
 801b5e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5e6:	45c1      	cmp	r9, r8
 801b5e8:	f840 3b04 	str.w	r3, [r0], #4
 801b5ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b5f0:	d2e8      	bcs.n	801b5c4 <quorem+0xb0>
 801b5f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5fa:	b922      	cbnz	r2, 801b606 <quorem+0xf2>
 801b5fc:	3b04      	subs	r3, #4
 801b5fe:	429d      	cmp	r5, r3
 801b600:	461a      	mov	r2, r3
 801b602:	d30a      	bcc.n	801b61a <quorem+0x106>
 801b604:	613c      	str	r4, [r7, #16]
 801b606:	4630      	mov	r0, r6
 801b608:	b003      	add	sp, #12
 801b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b60e:	6812      	ldr	r2, [r2, #0]
 801b610:	3b04      	subs	r3, #4
 801b612:	2a00      	cmp	r2, #0
 801b614:	d1cc      	bne.n	801b5b0 <quorem+0x9c>
 801b616:	3c01      	subs	r4, #1
 801b618:	e7c7      	b.n	801b5aa <quorem+0x96>
 801b61a:	6812      	ldr	r2, [r2, #0]
 801b61c:	3b04      	subs	r3, #4
 801b61e:	2a00      	cmp	r2, #0
 801b620:	d1f0      	bne.n	801b604 <quorem+0xf0>
 801b622:	3c01      	subs	r4, #1
 801b624:	e7eb      	b.n	801b5fe <quorem+0xea>
 801b626:	2000      	movs	r0, #0
 801b628:	e7ee      	b.n	801b608 <quorem+0xf4>
 801b62a:	0000      	movs	r0, r0
 801b62c:	0000      	movs	r0, r0
	...

0801b630 <_dtoa_r>:
 801b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b634:	ed2d 8b02 	vpush	{d8}
 801b638:	ec57 6b10 	vmov	r6, r7, d0
 801b63c:	b095      	sub	sp, #84	; 0x54
 801b63e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b644:	9105      	str	r1, [sp, #20]
 801b646:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b64a:	4604      	mov	r4, r0
 801b64c:	9209      	str	r2, [sp, #36]	; 0x24
 801b64e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b650:	b975      	cbnz	r5, 801b670 <_dtoa_r+0x40>
 801b652:	2010      	movs	r0, #16
 801b654:	f001 f94c 	bl	801c8f0 <malloc>
 801b658:	4602      	mov	r2, r0
 801b65a:	6260      	str	r0, [r4, #36]	; 0x24
 801b65c:	b920      	cbnz	r0, 801b668 <_dtoa_r+0x38>
 801b65e:	4bb2      	ldr	r3, [pc, #712]	; (801b928 <_dtoa_r+0x2f8>)
 801b660:	21ea      	movs	r1, #234	; 0xea
 801b662:	48b2      	ldr	r0, [pc, #712]	; (801b92c <_dtoa_r+0x2fc>)
 801b664:	f002 f856 	bl	801d714 <__assert_func>
 801b668:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b66c:	6005      	str	r5, [r0, #0]
 801b66e:	60c5      	str	r5, [r0, #12]
 801b670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b672:	6819      	ldr	r1, [r3, #0]
 801b674:	b151      	cbz	r1, 801b68c <_dtoa_r+0x5c>
 801b676:	685a      	ldr	r2, [r3, #4]
 801b678:	604a      	str	r2, [r1, #4]
 801b67a:	2301      	movs	r3, #1
 801b67c:	4093      	lsls	r3, r2
 801b67e:	608b      	str	r3, [r1, #8]
 801b680:	4620      	mov	r0, r4
 801b682:	f001 f98f 	bl	801c9a4 <_Bfree>
 801b686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b688:	2200      	movs	r2, #0
 801b68a:	601a      	str	r2, [r3, #0]
 801b68c:	1e3b      	subs	r3, r7, #0
 801b68e:	bfb9      	ittee	lt
 801b690:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b694:	9303      	strlt	r3, [sp, #12]
 801b696:	2300      	movge	r3, #0
 801b698:	f8c8 3000 	strge.w	r3, [r8]
 801b69c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801b6a0:	4ba3      	ldr	r3, [pc, #652]	; (801b930 <_dtoa_r+0x300>)
 801b6a2:	bfbc      	itt	lt
 801b6a4:	2201      	movlt	r2, #1
 801b6a6:	f8c8 2000 	strlt.w	r2, [r8]
 801b6aa:	ea33 0309 	bics.w	r3, r3, r9
 801b6ae:	d11b      	bne.n	801b6e8 <_dtoa_r+0xb8>
 801b6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b6b2:	f242 730f 	movw	r3, #9999	; 0x270f
 801b6b6:	6013      	str	r3, [r2, #0]
 801b6b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b6bc:	4333      	orrs	r3, r6
 801b6be:	f000 857a 	beq.w	801c1b6 <_dtoa_r+0xb86>
 801b6c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6c4:	b963      	cbnz	r3, 801b6e0 <_dtoa_r+0xb0>
 801b6c6:	4b9b      	ldr	r3, [pc, #620]	; (801b934 <_dtoa_r+0x304>)
 801b6c8:	e024      	b.n	801b714 <_dtoa_r+0xe4>
 801b6ca:	4b9b      	ldr	r3, [pc, #620]	; (801b938 <_dtoa_r+0x308>)
 801b6cc:	9300      	str	r3, [sp, #0]
 801b6ce:	3308      	adds	r3, #8
 801b6d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b6d2:	6013      	str	r3, [r2, #0]
 801b6d4:	9800      	ldr	r0, [sp, #0]
 801b6d6:	b015      	add	sp, #84	; 0x54
 801b6d8:	ecbd 8b02 	vpop	{d8}
 801b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6e0:	4b94      	ldr	r3, [pc, #592]	; (801b934 <_dtoa_r+0x304>)
 801b6e2:	9300      	str	r3, [sp, #0]
 801b6e4:	3303      	adds	r3, #3
 801b6e6:	e7f3      	b.n	801b6d0 <_dtoa_r+0xa0>
 801b6e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6ec:	2200      	movs	r2, #0
 801b6ee:	ec51 0b17 	vmov	r0, r1, d7
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b6f8:	f7e5 f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 801b6fc:	4680      	mov	r8, r0
 801b6fe:	b158      	cbz	r0, 801b718 <_dtoa_r+0xe8>
 801b700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b702:	2301      	movs	r3, #1
 801b704:	6013      	str	r3, [r2, #0]
 801b706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b708:	2b00      	cmp	r3, #0
 801b70a:	f000 8551 	beq.w	801c1b0 <_dtoa_r+0xb80>
 801b70e:	488b      	ldr	r0, [pc, #556]	; (801b93c <_dtoa_r+0x30c>)
 801b710:	6018      	str	r0, [r3, #0]
 801b712:	1e43      	subs	r3, r0, #1
 801b714:	9300      	str	r3, [sp, #0]
 801b716:	e7dd      	b.n	801b6d4 <_dtoa_r+0xa4>
 801b718:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b71c:	aa12      	add	r2, sp, #72	; 0x48
 801b71e:	a913      	add	r1, sp, #76	; 0x4c
 801b720:	4620      	mov	r0, r4
 801b722:	f001 fce7 	bl	801d0f4 <__d2b>
 801b726:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b72a:	4683      	mov	fp, r0
 801b72c:	2d00      	cmp	r5, #0
 801b72e:	d07c      	beq.n	801b82a <_dtoa_r+0x1fa>
 801b730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b732:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b73a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801b73e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b74a:	4b7d      	ldr	r3, [pc, #500]	; (801b940 <_dtoa_r+0x310>)
 801b74c:	2200      	movs	r2, #0
 801b74e:	4630      	mov	r0, r6
 801b750:	4639      	mov	r1, r7
 801b752:	f7e4 fd99 	bl	8000288 <__aeabi_dsub>
 801b756:	a36e      	add	r3, pc, #440	; (adr r3, 801b910 <_dtoa_r+0x2e0>)
 801b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b75c:	f7e4 ff4c 	bl	80005f8 <__aeabi_dmul>
 801b760:	a36d      	add	r3, pc, #436	; (adr r3, 801b918 <_dtoa_r+0x2e8>)
 801b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b766:	f7e4 fd91 	bl	800028c <__adddf3>
 801b76a:	4606      	mov	r6, r0
 801b76c:	4628      	mov	r0, r5
 801b76e:	460f      	mov	r7, r1
 801b770:	f7e4 fed8 	bl	8000524 <__aeabi_i2d>
 801b774:	a36a      	add	r3, pc, #424	; (adr r3, 801b920 <_dtoa_r+0x2f0>)
 801b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b77a:	f7e4 ff3d 	bl	80005f8 <__aeabi_dmul>
 801b77e:	4602      	mov	r2, r0
 801b780:	460b      	mov	r3, r1
 801b782:	4630      	mov	r0, r6
 801b784:	4639      	mov	r1, r7
 801b786:	f7e4 fd81 	bl	800028c <__adddf3>
 801b78a:	4606      	mov	r6, r0
 801b78c:	460f      	mov	r7, r1
 801b78e:	f7e5 f9e3 	bl	8000b58 <__aeabi_d2iz>
 801b792:	2200      	movs	r2, #0
 801b794:	4682      	mov	sl, r0
 801b796:	2300      	movs	r3, #0
 801b798:	4630      	mov	r0, r6
 801b79a:	4639      	mov	r1, r7
 801b79c:	f7e5 f99e 	bl	8000adc <__aeabi_dcmplt>
 801b7a0:	b148      	cbz	r0, 801b7b6 <_dtoa_r+0x186>
 801b7a2:	4650      	mov	r0, sl
 801b7a4:	f7e4 febe 	bl	8000524 <__aeabi_i2d>
 801b7a8:	4632      	mov	r2, r6
 801b7aa:	463b      	mov	r3, r7
 801b7ac:	f7e5 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 801b7b0:	b908      	cbnz	r0, 801b7b6 <_dtoa_r+0x186>
 801b7b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b7b6:	f1ba 0f16 	cmp.w	sl, #22
 801b7ba:	d854      	bhi.n	801b866 <_dtoa_r+0x236>
 801b7bc:	4b61      	ldr	r3, [pc, #388]	; (801b944 <_dtoa_r+0x314>)
 801b7be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b7ca:	f7e5 f987 	bl	8000adc <__aeabi_dcmplt>
 801b7ce:	2800      	cmp	r0, #0
 801b7d0:	d04b      	beq.n	801b86a <_dtoa_r+0x23a>
 801b7d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	930e      	str	r3, [sp, #56]	; 0x38
 801b7da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b7dc:	1b5d      	subs	r5, r3, r5
 801b7de:	1e6b      	subs	r3, r5, #1
 801b7e0:	9304      	str	r3, [sp, #16]
 801b7e2:	bf43      	ittte	mi
 801b7e4:	2300      	movmi	r3, #0
 801b7e6:	f1c5 0801 	rsbmi	r8, r5, #1
 801b7ea:	9304      	strmi	r3, [sp, #16]
 801b7ec:	f04f 0800 	movpl.w	r8, #0
 801b7f0:	f1ba 0f00 	cmp.w	sl, #0
 801b7f4:	db3b      	blt.n	801b86e <_dtoa_r+0x23e>
 801b7f6:	9b04      	ldr	r3, [sp, #16]
 801b7f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b7fc:	4453      	add	r3, sl
 801b7fe:	9304      	str	r3, [sp, #16]
 801b800:	2300      	movs	r3, #0
 801b802:	9306      	str	r3, [sp, #24]
 801b804:	9b05      	ldr	r3, [sp, #20]
 801b806:	2b09      	cmp	r3, #9
 801b808:	d869      	bhi.n	801b8de <_dtoa_r+0x2ae>
 801b80a:	2b05      	cmp	r3, #5
 801b80c:	bfc4      	itt	gt
 801b80e:	3b04      	subgt	r3, #4
 801b810:	9305      	strgt	r3, [sp, #20]
 801b812:	9b05      	ldr	r3, [sp, #20]
 801b814:	f1a3 0302 	sub.w	r3, r3, #2
 801b818:	bfcc      	ite	gt
 801b81a:	2500      	movgt	r5, #0
 801b81c:	2501      	movle	r5, #1
 801b81e:	2b03      	cmp	r3, #3
 801b820:	d869      	bhi.n	801b8f6 <_dtoa_r+0x2c6>
 801b822:	e8df f003 	tbb	[pc, r3]
 801b826:	4e2c      	.short	0x4e2c
 801b828:	5a4c      	.short	0x5a4c
 801b82a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801b82e:	441d      	add	r5, r3
 801b830:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b834:	2b20      	cmp	r3, #32
 801b836:	bfc1      	itttt	gt
 801b838:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b83c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b840:	fa09 f303 	lslgt.w	r3, r9, r3
 801b844:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b848:	bfda      	itte	le
 801b84a:	f1c3 0320 	rsble	r3, r3, #32
 801b84e:	fa06 f003 	lslle.w	r0, r6, r3
 801b852:	4318      	orrgt	r0, r3
 801b854:	f7e4 fe56 	bl	8000504 <__aeabi_ui2d>
 801b858:	2301      	movs	r3, #1
 801b85a:	4606      	mov	r6, r0
 801b85c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b860:	3d01      	subs	r5, #1
 801b862:	9310      	str	r3, [sp, #64]	; 0x40
 801b864:	e771      	b.n	801b74a <_dtoa_r+0x11a>
 801b866:	2301      	movs	r3, #1
 801b868:	e7b6      	b.n	801b7d8 <_dtoa_r+0x1a8>
 801b86a:	900e      	str	r0, [sp, #56]	; 0x38
 801b86c:	e7b5      	b.n	801b7da <_dtoa_r+0x1aa>
 801b86e:	f1ca 0300 	rsb	r3, sl, #0
 801b872:	9306      	str	r3, [sp, #24]
 801b874:	2300      	movs	r3, #0
 801b876:	eba8 080a 	sub.w	r8, r8, sl
 801b87a:	930d      	str	r3, [sp, #52]	; 0x34
 801b87c:	e7c2      	b.n	801b804 <_dtoa_r+0x1d4>
 801b87e:	2300      	movs	r3, #0
 801b880:	9308      	str	r3, [sp, #32]
 801b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b884:	2b00      	cmp	r3, #0
 801b886:	dc39      	bgt.n	801b8fc <_dtoa_r+0x2cc>
 801b888:	f04f 0901 	mov.w	r9, #1
 801b88c:	f8cd 9004 	str.w	r9, [sp, #4]
 801b890:	464b      	mov	r3, r9
 801b892:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b896:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b898:	2200      	movs	r2, #0
 801b89a:	6042      	str	r2, [r0, #4]
 801b89c:	2204      	movs	r2, #4
 801b89e:	f102 0614 	add.w	r6, r2, #20
 801b8a2:	429e      	cmp	r6, r3
 801b8a4:	6841      	ldr	r1, [r0, #4]
 801b8a6:	d92f      	bls.n	801b908 <_dtoa_r+0x2d8>
 801b8a8:	4620      	mov	r0, r4
 801b8aa:	f001 f83b 	bl	801c924 <_Balloc>
 801b8ae:	9000      	str	r0, [sp, #0]
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	d14b      	bne.n	801b94c <_dtoa_r+0x31c>
 801b8b4:	4b24      	ldr	r3, [pc, #144]	; (801b948 <_dtoa_r+0x318>)
 801b8b6:	4602      	mov	r2, r0
 801b8b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b8bc:	e6d1      	b.n	801b662 <_dtoa_r+0x32>
 801b8be:	2301      	movs	r3, #1
 801b8c0:	e7de      	b.n	801b880 <_dtoa_r+0x250>
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	9308      	str	r3, [sp, #32]
 801b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8c8:	eb0a 0903 	add.w	r9, sl, r3
 801b8cc:	f109 0301 	add.w	r3, r9, #1
 801b8d0:	2b01      	cmp	r3, #1
 801b8d2:	9301      	str	r3, [sp, #4]
 801b8d4:	bfb8      	it	lt
 801b8d6:	2301      	movlt	r3, #1
 801b8d8:	e7dd      	b.n	801b896 <_dtoa_r+0x266>
 801b8da:	2301      	movs	r3, #1
 801b8dc:	e7f2      	b.n	801b8c4 <_dtoa_r+0x294>
 801b8de:	2501      	movs	r5, #1
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	9305      	str	r3, [sp, #20]
 801b8e4:	9508      	str	r5, [sp, #32]
 801b8e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	f8cd 9004 	str.w	r9, [sp, #4]
 801b8f0:	2312      	movs	r3, #18
 801b8f2:	9209      	str	r2, [sp, #36]	; 0x24
 801b8f4:	e7cf      	b.n	801b896 <_dtoa_r+0x266>
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	9308      	str	r3, [sp, #32]
 801b8fa:	e7f4      	b.n	801b8e6 <_dtoa_r+0x2b6>
 801b8fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b900:	f8cd 9004 	str.w	r9, [sp, #4]
 801b904:	464b      	mov	r3, r9
 801b906:	e7c6      	b.n	801b896 <_dtoa_r+0x266>
 801b908:	3101      	adds	r1, #1
 801b90a:	6041      	str	r1, [r0, #4]
 801b90c:	0052      	lsls	r2, r2, #1
 801b90e:	e7c6      	b.n	801b89e <_dtoa_r+0x26e>
 801b910:	636f4361 	.word	0x636f4361
 801b914:	3fd287a7 	.word	0x3fd287a7
 801b918:	8b60c8b3 	.word	0x8b60c8b3
 801b91c:	3fc68a28 	.word	0x3fc68a28
 801b920:	509f79fb 	.word	0x509f79fb
 801b924:	3fd34413 	.word	0x3fd34413
 801b928:	08021446 	.word	0x08021446
 801b92c:	0802145d 	.word	0x0802145d
 801b930:	7ff00000 	.word	0x7ff00000
 801b934:	08021442 	.word	0x08021442
 801b938:	08021439 	.word	0x08021439
 801b93c:	080212b9 	.word	0x080212b9
 801b940:	3ff80000 	.word	0x3ff80000
 801b944:	080215d8 	.word	0x080215d8
 801b948:	080214bc 	.word	0x080214bc
 801b94c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b94e:	9a00      	ldr	r2, [sp, #0]
 801b950:	601a      	str	r2, [r3, #0]
 801b952:	9b01      	ldr	r3, [sp, #4]
 801b954:	2b0e      	cmp	r3, #14
 801b956:	f200 80ad 	bhi.w	801bab4 <_dtoa_r+0x484>
 801b95a:	2d00      	cmp	r5, #0
 801b95c:	f000 80aa 	beq.w	801bab4 <_dtoa_r+0x484>
 801b960:	f1ba 0f00 	cmp.w	sl, #0
 801b964:	dd36      	ble.n	801b9d4 <_dtoa_r+0x3a4>
 801b966:	4ac3      	ldr	r2, [pc, #780]	; (801bc74 <_dtoa_r+0x644>)
 801b968:	f00a 030f 	and.w	r3, sl, #15
 801b96c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b970:	ed93 7b00 	vldr	d7, [r3]
 801b974:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801b978:	ea4f 172a 	mov.w	r7, sl, asr #4
 801b97c:	eeb0 8a47 	vmov.f32	s16, s14
 801b980:	eef0 8a67 	vmov.f32	s17, s15
 801b984:	d016      	beq.n	801b9b4 <_dtoa_r+0x384>
 801b986:	4bbc      	ldr	r3, [pc, #752]	; (801bc78 <_dtoa_r+0x648>)
 801b988:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b98c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b990:	f7e4 ff5c 	bl	800084c <__aeabi_ddiv>
 801b994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b998:	f007 070f 	and.w	r7, r7, #15
 801b99c:	2503      	movs	r5, #3
 801b99e:	4eb6      	ldr	r6, [pc, #728]	; (801bc78 <_dtoa_r+0x648>)
 801b9a0:	b957      	cbnz	r7, 801b9b8 <_dtoa_r+0x388>
 801b9a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9a6:	ec53 2b18 	vmov	r2, r3, d8
 801b9aa:	f7e4 ff4f 	bl	800084c <__aeabi_ddiv>
 801b9ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9b2:	e029      	b.n	801ba08 <_dtoa_r+0x3d8>
 801b9b4:	2502      	movs	r5, #2
 801b9b6:	e7f2      	b.n	801b99e <_dtoa_r+0x36e>
 801b9b8:	07f9      	lsls	r1, r7, #31
 801b9ba:	d508      	bpl.n	801b9ce <_dtoa_r+0x39e>
 801b9bc:	ec51 0b18 	vmov	r0, r1, d8
 801b9c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b9c4:	f7e4 fe18 	bl	80005f8 <__aeabi_dmul>
 801b9c8:	ec41 0b18 	vmov	d8, r0, r1
 801b9cc:	3501      	adds	r5, #1
 801b9ce:	107f      	asrs	r7, r7, #1
 801b9d0:	3608      	adds	r6, #8
 801b9d2:	e7e5      	b.n	801b9a0 <_dtoa_r+0x370>
 801b9d4:	f000 80a6 	beq.w	801bb24 <_dtoa_r+0x4f4>
 801b9d8:	f1ca 0600 	rsb	r6, sl, #0
 801b9dc:	4ba5      	ldr	r3, [pc, #660]	; (801bc74 <_dtoa_r+0x644>)
 801b9de:	4fa6      	ldr	r7, [pc, #664]	; (801bc78 <_dtoa_r+0x648>)
 801b9e0:	f006 020f 	and.w	r2, r6, #15
 801b9e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b9f0:	f7e4 fe02 	bl	80005f8 <__aeabi_dmul>
 801b9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9f8:	1136      	asrs	r6, r6, #4
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	2502      	movs	r5, #2
 801b9fe:	2e00      	cmp	r6, #0
 801ba00:	f040 8085 	bne.w	801bb0e <_dtoa_r+0x4de>
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d1d2      	bne.n	801b9ae <_dtoa_r+0x37e>
 801ba08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	f000 808c 	beq.w	801bb28 <_dtoa_r+0x4f8>
 801ba10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ba14:	4b99      	ldr	r3, [pc, #612]	; (801bc7c <_dtoa_r+0x64c>)
 801ba16:	2200      	movs	r2, #0
 801ba18:	4630      	mov	r0, r6
 801ba1a:	4639      	mov	r1, r7
 801ba1c:	f7e5 f85e 	bl	8000adc <__aeabi_dcmplt>
 801ba20:	2800      	cmp	r0, #0
 801ba22:	f000 8081 	beq.w	801bb28 <_dtoa_r+0x4f8>
 801ba26:	9b01      	ldr	r3, [sp, #4]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d07d      	beq.n	801bb28 <_dtoa_r+0x4f8>
 801ba2c:	f1b9 0f00 	cmp.w	r9, #0
 801ba30:	dd3c      	ble.n	801baac <_dtoa_r+0x47c>
 801ba32:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801ba36:	9307      	str	r3, [sp, #28]
 801ba38:	2200      	movs	r2, #0
 801ba3a:	4b91      	ldr	r3, [pc, #580]	; (801bc80 <_dtoa_r+0x650>)
 801ba3c:	4630      	mov	r0, r6
 801ba3e:	4639      	mov	r1, r7
 801ba40:	f7e4 fdda 	bl	80005f8 <__aeabi_dmul>
 801ba44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba48:	3501      	adds	r5, #1
 801ba4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ba4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ba52:	4628      	mov	r0, r5
 801ba54:	f7e4 fd66 	bl	8000524 <__aeabi_i2d>
 801ba58:	4632      	mov	r2, r6
 801ba5a:	463b      	mov	r3, r7
 801ba5c:	f7e4 fdcc 	bl	80005f8 <__aeabi_dmul>
 801ba60:	4b88      	ldr	r3, [pc, #544]	; (801bc84 <_dtoa_r+0x654>)
 801ba62:	2200      	movs	r2, #0
 801ba64:	f7e4 fc12 	bl	800028c <__adddf3>
 801ba68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ba6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba70:	9303      	str	r3, [sp, #12]
 801ba72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d15c      	bne.n	801bb32 <_dtoa_r+0x502>
 801ba78:	4b83      	ldr	r3, [pc, #524]	; (801bc88 <_dtoa_r+0x658>)
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	4630      	mov	r0, r6
 801ba7e:	4639      	mov	r1, r7
 801ba80:	f7e4 fc02 	bl	8000288 <__aeabi_dsub>
 801ba84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ba88:	4606      	mov	r6, r0
 801ba8a:	460f      	mov	r7, r1
 801ba8c:	f7e5 f844 	bl	8000b18 <__aeabi_dcmpgt>
 801ba90:	2800      	cmp	r0, #0
 801ba92:	f040 8296 	bne.w	801bfc2 <_dtoa_r+0x992>
 801ba96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ba9a:	4630      	mov	r0, r6
 801ba9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801baa0:	4639      	mov	r1, r7
 801baa2:	f7e5 f81b 	bl	8000adc <__aeabi_dcmplt>
 801baa6:	2800      	cmp	r0, #0
 801baa8:	f040 8288 	bne.w	801bfbc <_dtoa_r+0x98c>
 801baac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f2c0 8158 	blt.w	801bd6c <_dtoa_r+0x73c>
 801babc:	f1ba 0f0e 	cmp.w	sl, #14
 801bac0:	f300 8154 	bgt.w	801bd6c <_dtoa_r+0x73c>
 801bac4:	4b6b      	ldr	r3, [pc, #428]	; (801bc74 <_dtoa_r+0x644>)
 801bac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801baca:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f280 80e3 	bge.w	801bc9c <_dtoa_r+0x66c>
 801bad6:	9b01      	ldr	r3, [sp, #4]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	f300 80df 	bgt.w	801bc9c <_dtoa_r+0x66c>
 801bade:	f040 826d 	bne.w	801bfbc <_dtoa_r+0x98c>
 801bae2:	4b69      	ldr	r3, [pc, #420]	; (801bc88 <_dtoa_r+0x658>)
 801bae4:	2200      	movs	r2, #0
 801bae6:	4640      	mov	r0, r8
 801bae8:	4649      	mov	r1, r9
 801baea:	f7e4 fd85 	bl	80005f8 <__aeabi_dmul>
 801baee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801baf2:	f7e5 f807 	bl	8000b04 <__aeabi_dcmpge>
 801baf6:	9e01      	ldr	r6, [sp, #4]
 801baf8:	4637      	mov	r7, r6
 801bafa:	2800      	cmp	r0, #0
 801bafc:	f040 8243 	bne.w	801bf86 <_dtoa_r+0x956>
 801bb00:	9d00      	ldr	r5, [sp, #0]
 801bb02:	2331      	movs	r3, #49	; 0x31
 801bb04:	f805 3b01 	strb.w	r3, [r5], #1
 801bb08:	f10a 0a01 	add.w	sl, sl, #1
 801bb0c:	e23f      	b.n	801bf8e <_dtoa_r+0x95e>
 801bb0e:	07f2      	lsls	r2, r6, #31
 801bb10:	d505      	bpl.n	801bb1e <_dtoa_r+0x4ee>
 801bb12:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb16:	f7e4 fd6f 	bl	80005f8 <__aeabi_dmul>
 801bb1a:	3501      	adds	r5, #1
 801bb1c:	2301      	movs	r3, #1
 801bb1e:	1076      	asrs	r6, r6, #1
 801bb20:	3708      	adds	r7, #8
 801bb22:	e76c      	b.n	801b9fe <_dtoa_r+0x3ce>
 801bb24:	2502      	movs	r5, #2
 801bb26:	e76f      	b.n	801ba08 <_dtoa_r+0x3d8>
 801bb28:	9b01      	ldr	r3, [sp, #4]
 801bb2a:	f8cd a01c 	str.w	sl, [sp, #28]
 801bb2e:	930c      	str	r3, [sp, #48]	; 0x30
 801bb30:	e78d      	b.n	801ba4e <_dtoa_r+0x41e>
 801bb32:	9900      	ldr	r1, [sp, #0]
 801bb34:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bb36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bb38:	4b4e      	ldr	r3, [pc, #312]	; (801bc74 <_dtoa_r+0x644>)
 801bb3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb3e:	4401      	add	r1, r0
 801bb40:	9102      	str	r1, [sp, #8]
 801bb42:	9908      	ldr	r1, [sp, #32]
 801bb44:	eeb0 8a47 	vmov.f32	s16, s14
 801bb48:	eef0 8a67 	vmov.f32	s17, s15
 801bb4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bb54:	2900      	cmp	r1, #0
 801bb56:	d045      	beq.n	801bbe4 <_dtoa_r+0x5b4>
 801bb58:	494c      	ldr	r1, [pc, #304]	; (801bc8c <_dtoa_r+0x65c>)
 801bb5a:	2000      	movs	r0, #0
 801bb5c:	f7e4 fe76 	bl	800084c <__aeabi_ddiv>
 801bb60:	ec53 2b18 	vmov	r2, r3, d8
 801bb64:	f7e4 fb90 	bl	8000288 <__aeabi_dsub>
 801bb68:	9d00      	ldr	r5, [sp, #0]
 801bb6a:	ec41 0b18 	vmov	d8, r0, r1
 801bb6e:	4639      	mov	r1, r7
 801bb70:	4630      	mov	r0, r6
 801bb72:	f7e4 fff1 	bl	8000b58 <__aeabi_d2iz>
 801bb76:	900c      	str	r0, [sp, #48]	; 0x30
 801bb78:	f7e4 fcd4 	bl	8000524 <__aeabi_i2d>
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	460b      	mov	r3, r1
 801bb80:	4630      	mov	r0, r6
 801bb82:	4639      	mov	r1, r7
 801bb84:	f7e4 fb80 	bl	8000288 <__aeabi_dsub>
 801bb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb8a:	3330      	adds	r3, #48	; 0x30
 801bb8c:	f805 3b01 	strb.w	r3, [r5], #1
 801bb90:	ec53 2b18 	vmov	r2, r3, d8
 801bb94:	4606      	mov	r6, r0
 801bb96:	460f      	mov	r7, r1
 801bb98:	f7e4 ffa0 	bl	8000adc <__aeabi_dcmplt>
 801bb9c:	2800      	cmp	r0, #0
 801bb9e:	d165      	bne.n	801bc6c <_dtoa_r+0x63c>
 801bba0:	4632      	mov	r2, r6
 801bba2:	463b      	mov	r3, r7
 801bba4:	4935      	ldr	r1, [pc, #212]	; (801bc7c <_dtoa_r+0x64c>)
 801bba6:	2000      	movs	r0, #0
 801bba8:	f7e4 fb6e 	bl	8000288 <__aeabi_dsub>
 801bbac:	ec53 2b18 	vmov	r2, r3, d8
 801bbb0:	f7e4 ff94 	bl	8000adc <__aeabi_dcmplt>
 801bbb4:	2800      	cmp	r0, #0
 801bbb6:	f040 80b9 	bne.w	801bd2c <_dtoa_r+0x6fc>
 801bbba:	9b02      	ldr	r3, [sp, #8]
 801bbbc:	429d      	cmp	r5, r3
 801bbbe:	f43f af75 	beq.w	801baac <_dtoa_r+0x47c>
 801bbc2:	4b2f      	ldr	r3, [pc, #188]	; (801bc80 <_dtoa_r+0x650>)
 801bbc4:	ec51 0b18 	vmov	r0, r1, d8
 801bbc8:	2200      	movs	r2, #0
 801bbca:	f7e4 fd15 	bl	80005f8 <__aeabi_dmul>
 801bbce:	4b2c      	ldr	r3, [pc, #176]	; (801bc80 <_dtoa_r+0x650>)
 801bbd0:	ec41 0b18 	vmov	d8, r0, r1
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	4630      	mov	r0, r6
 801bbd8:	4639      	mov	r1, r7
 801bbda:	f7e4 fd0d 	bl	80005f8 <__aeabi_dmul>
 801bbde:	4606      	mov	r6, r0
 801bbe0:	460f      	mov	r7, r1
 801bbe2:	e7c4      	b.n	801bb6e <_dtoa_r+0x53e>
 801bbe4:	ec51 0b17 	vmov	r0, r1, d7
 801bbe8:	f7e4 fd06 	bl	80005f8 <__aeabi_dmul>
 801bbec:	9b02      	ldr	r3, [sp, #8]
 801bbee:	9d00      	ldr	r5, [sp, #0]
 801bbf0:	930c      	str	r3, [sp, #48]	; 0x30
 801bbf2:	ec41 0b18 	vmov	d8, r0, r1
 801bbf6:	4639      	mov	r1, r7
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	f7e4 ffad 	bl	8000b58 <__aeabi_d2iz>
 801bbfe:	9011      	str	r0, [sp, #68]	; 0x44
 801bc00:	f7e4 fc90 	bl	8000524 <__aeabi_i2d>
 801bc04:	4602      	mov	r2, r0
 801bc06:	460b      	mov	r3, r1
 801bc08:	4630      	mov	r0, r6
 801bc0a:	4639      	mov	r1, r7
 801bc0c:	f7e4 fb3c 	bl	8000288 <__aeabi_dsub>
 801bc10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc12:	3330      	adds	r3, #48	; 0x30
 801bc14:	f805 3b01 	strb.w	r3, [r5], #1
 801bc18:	9b02      	ldr	r3, [sp, #8]
 801bc1a:	429d      	cmp	r5, r3
 801bc1c:	4606      	mov	r6, r0
 801bc1e:	460f      	mov	r7, r1
 801bc20:	f04f 0200 	mov.w	r2, #0
 801bc24:	d134      	bne.n	801bc90 <_dtoa_r+0x660>
 801bc26:	4b19      	ldr	r3, [pc, #100]	; (801bc8c <_dtoa_r+0x65c>)
 801bc28:	ec51 0b18 	vmov	r0, r1, d8
 801bc2c:	f7e4 fb2e 	bl	800028c <__adddf3>
 801bc30:	4602      	mov	r2, r0
 801bc32:	460b      	mov	r3, r1
 801bc34:	4630      	mov	r0, r6
 801bc36:	4639      	mov	r1, r7
 801bc38:	f7e4 ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 801bc3c:	2800      	cmp	r0, #0
 801bc3e:	d175      	bne.n	801bd2c <_dtoa_r+0x6fc>
 801bc40:	ec53 2b18 	vmov	r2, r3, d8
 801bc44:	4911      	ldr	r1, [pc, #68]	; (801bc8c <_dtoa_r+0x65c>)
 801bc46:	2000      	movs	r0, #0
 801bc48:	f7e4 fb1e 	bl	8000288 <__aeabi_dsub>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	460b      	mov	r3, r1
 801bc50:	4630      	mov	r0, r6
 801bc52:	4639      	mov	r1, r7
 801bc54:	f7e4 ff42 	bl	8000adc <__aeabi_dcmplt>
 801bc58:	2800      	cmp	r0, #0
 801bc5a:	f43f af27 	beq.w	801baac <_dtoa_r+0x47c>
 801bc5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bc60:	1e6b      	subs	r3, r5, #1
 801bc62:	930c      	str	r3, [sp, #48]	; 0x30
 801bc64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bc68:	2b30      	cmp	r3, #48	; 0x30
 801bc6a:	d0f8      	beq.n	801bc5e <_dtoa_r+0x62e>
 801bc6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bc70:	e04a      	b.n	801bd08 <_dtoa_r+0x6d8>
 801bc72:	bf00      	nop
 801bc74:	080215d8 	.word	0x080215d8
 801bc78:	080215b0 	.word	0x080215b0
 801bc7c:	3ff00000 	.word	0x3ff00000
 801bc80:	40240000 	.word	0x40240000
 801bc84:	401c0000 	.word	0x401c0000
 801bc88:	40140000 	.word	0x40140000
 801bc8c:	3fe00000 	.word	0x3fe00000
 801bc90:	4baf      	ldr	r3, [pc, #700]	; (801bf50 <_dtoa_r+0x920>)
 801bc92:	f7e4 fcb1 	bl	80005f8 <__aeabi_dmul>
 801bc96:	4606      	mov	r6, r0
 801bc98:	460f      	mov	r7, r1
 801bc9a:	e7ac      	b.n	801bbf6 <_dtoa_r+0x5c6>
 801bc9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bca0:	9d00      	ldr	r5, [sp, #0]
 801bca2:	4642      	mov	r2, r8
 801bca4:	464b      	mov	r3, r9
 801bca6:	4630      	mov	r0, r6
 801bca8:	4639      	mov	r1, r7
 801bcaa:	f7e4 fdcf 	bl	800084c <__aeabi_ddiv>
 801bcae:	f7e4 ff53 	bl	8000b58 <__aeabi_d2iz>
 801bcb2:	9002      	str	r0, [sp, #8]
 801bcb4:	f7e4 fc36 	bl	8000524 <__aeabi_i2d>
 801bcb8:	4642      	mov	r2, r8
 801bcba:	464b      	mov	r3, r9
 801bcbc:	f7e4 fc9c 	bl	80005f8 <__aeabi_dmul>
 801bcc0:	4602      	mov	r2, r0
 801bcc2:	460b      	mov	r3, r1
 801bcc4:	4630      	mov	r0, r6
 801bcc6:	4639      	mov	r1, r7
 801bcc8:	f7e4 fade 	bl	8000288 <__aeabi_dsub>
 801bccc:	9e02      	ldr	r6, [sp, #8]
 801bcce:	9f01      	ldr	r7, [sp, #4]
 801bcd0:	3630      	adds	r6, #48	; 0x30
 801bcd2:	f805 6b01 	strb.w	r6, [r5], #1
 801bcd6:	9e00      	ldr	r6, [sp, #0]
 801bcd8:	1bae      	subs	r6, r5, r6
 801bcda:	42b7      	cmp	r7, r6
 801bcdc:	4602      	mov	r2, r0
 801bcde:	460b      	mov	r3, r1
 801bce0:	d137      	bne.n	801bd52 <_dtoa_r+0x722>
 801bce2:	f7e4 fad3 	bl	800028c <__adddf3>
 801bce6:	4642      	mov	r2, r8
 801bce8:	464b      	mov	r3, r9
 801bcea:	4606      	mov	r6, r0
 801bcec:	460f      	mov	r7, r1
 801bcee:	f7e4 ff13 	bl	8000b18 <__aeabi_dcmpgt>
 801bcf2:	b9c8      	cbnz	r0, 801bd28 <_dtoa_r+0x6f8>
 801bcf4:	4642      	mov	r2, r8
 801bcf6:	464b      	mov	r3, r9
 801bcf8:	4630      	mov	r0, r6
 801bcfa:	4639      	mov	r1, r7
 801bcfc:	f7e4 fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd00:	b110      	cbz	r0, 801bd08 <_dtoa_r+0x6d8>
 801bd02:	9b02      	ldr	r3, [sp, #8]
 801bd04:	07d9      	lsls	r1, r3, #31
 801bd06:	d40f      	bmi.n	801bd28 <_dtoa_r+0x6f8>
 801bd08:	4620      	mov	r0, r4
 801bd0a:	4659      	mov	r1, fp
 801bd0c:	f000 fe4a 	bl	801c9a4 <_Bfree>
 801bd10:	2300      	movs	r3, #0
 801bd12:	702b      	strb	r3, [r5, #0]
 801bd14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd16:	f10a 0001 	add.w	r0, sl, #1
 801bd1a:	6018      	str	r0, [r3, #0]
 801bd1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	f43f acd8 	beq.w	801b6d4 <_dtoa_r+0xa4>
 801bd24:	601d      	str	r5, [r3, #0]
 801bd26:	e4d5      	b.n	801b6d4 <_dtoa_r+0xa4>
 801bd28:	f8cd a01c 	str.w	sl, [sp, #28]
 801bd2c:	462b      	mov	r3, r5
 801bd2e:	461d      	mov	r5, r3
 801bd30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd34:	2a39      	cmp	r2, #57	; 0x39
 801bd36:	d108      	bne.n	801bd4a <_dtoa_r+0x71a>
 801bd38:	9a00      	ldr	r2, [sp, #0]
 801bd3a:	429a      	cmp	r2, r3
 801bd3c:	d1f7      	bne.n	801bd2e <_dtoa_r+0x6fe>
 801bd3e:	9a07      	ldr	r2, [sp, #28]
 801bd40:	9900      	ldr	r1, [sp, #0]
 801bd42:	3201      	adds	r2, #1
 801bd44:	9207      	str	r2, [sp, #28]
 801bd46:	2230      	movs	r2, #48	; 0x30
 801bd48:	700a      	strb	r2, [r1, #0]
 801bd4a:	781a      	ldrb	r2, [r3, #0]
 801bd4c:	3201      	adds	r2, #1
 801bd4e:	701a      	strb	r2, [r3, #0]
 801bd50:	e78c      	b.n	801bc6c <_dtoa_r+0x63c>
 801bd52:	4b7f      	ldr	r3, [pc, #508]	; (801bf50 <_dtoa_r+0x920>)
 801bd54:	2200      	movs	r2, #0
 801bd56:	f7e4 fc4f 	bl	80005f8 <__aeabi_dmul>
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	4606      	mov	r6, r0
 801bd60:	460f      	mov	r7, r1
 801bd62:	f7e4 feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 801bd66:	2800      	cmp	r0, #0
 801bd68:	d09b      	beq.n	801bca2 <_dtoa_r+0x672>
 801bd6a:	e7cd      	b.n	801bd08 <_dtoa_r+0x6d8>
 801bd6c:	9a08      	ldr	r2, [sp, #32]
 801bd6e:	2a00      	cmp	r2, #0
 801bd70:	f000 80c4 	beq.w	801befc <_dtoa_r+0x8cc>
 801bd74:	9a05      	ldr	r2, [sp, #20]
 801bd76:	2a01      	cmp	r2, #1
 801bd78:	f300 80a8 	bgt.w	801becc <_dtoa_r+0x89c>
 801bd7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd7e:	2a00      	cmp	r2, #0
 801bd80:	f000 80a0 	beq.w	801bec4 <_dtoa_r+0x894>
 801bd84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bd88:	9e06      	ldr	r6, [sp, #24]
 801bd8a:	4645      	mov	r5, r8
 801bd8c:	9a04      	ldr	r2, [sp, #16]
 801bd8e:	2101      	movs	r1, #1
 801bd90:	441a      	add	r2, r3
 801bd92:	4620      	mov	r0, r4
 801bd94:	4498      	add	r8, r3
 801bd96:	9204      	str	r2, [sp, #16]
 801bd98:	f000 ff0a 	bl	801cbb0 <__i2b>
 801bd9c:	4607      	mov	r7, r0
 801bd9e:	2d00      	cmp	r5, #0
 801bda0:	dd0b      	ble.n	801bdba <_dtoa_r+0x78a>
 801bda2:	9b04      	ldr	r3, [sp, #16]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	dd08      	ble.n	801bdba <_dtoa_r+0x78a>
 801bda8:	42ab      	cmp	r3, r5
 801bdaa:	9a04      	ldr	r2, [sp, #16]
 801bdac:	bfa8      	it	ge
 801bdae:	462b      	movge	r3, r5
 801bdb0:	eba8 0803 	sub.w	r8, r8, r3
 801bdb4:	1aed      	subs	r5, r5, r3
 801bdb6:	1ad3      	subs	r3, r2, r3
 801bdb8:	9304      	str	r3, [sp, #16]
 801bdba:	9b06      	ldr	r3, [sp, #24]
 801bdbc:	b1fb      	cbz	r3, 801bdfe <_dtoa_r+0x7ce>
 801bdbe:	9b08      	ldr	r3, [sp, #32]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	f000 809f 	beq.w	801bf04 <_dtoa_r+0x8d4>
 801bdc6:	2e00      	cmp	r6, #0
 801bdc8:	dd11      	ble.n	801bdee <_dtoa_r+0x7be>
 801bdca:	4639      	mov	r1, r7
 801bdcc:	4632      	mov	r2, r6
 801bdce:	4620      	mov	r0, r4
 801bdd0:	f000 ffaa 	bl	801cd28 <__pow5mult>
 801bdd4:	465a      	mov	r2, fp
 801bdd6:	4601      	mov	r1, r0
 801bdd8:	4607      	mov	r7, r0
 801bdda:	4620      	mov	r0, r4
 801bddc:	f000 fefe 	bl	801cbdc <__multiply>
 801bde0:	4659      	mov	r1, fp
 801bde2:	9007      	str	r0, [sp, #28]
 801bde4:	4620      	mov	r0, r4
 801bde6:	f000 fddd 	bl	801c9a4 <_Bfree>
 801bdea:	9b07      	ldr	r3, [sp, #28]
 801bdec:	469b      	mov	fp, r3
 801bdee:	9b06      	ldr	r3, [sp, #24]
 801bdf0:	1b9a      	subs	r2, r3, r6
 801bdf2:	d004      	beq.n	801bdfe <_dtoa_r+0x7ce>
 801bdf4:	4659      	mov	r1, fp
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f000 ff96 	bl	801cd28 <__pow5mult>
 801bdfc:	4683      	mov	fp, r0
 801bdfe:	2101      	movs	r1, #1
 801be00:	4620      	mov	r0, r4
 801be02:	f000 fed5 	bl	801cbb0 <__i2b>
 801be06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be08:	2b00      	cmp	r3, #0
 801be0a:	4606      	mov	r6, r0
 801be0c:	dd7c      	ble.n	801bf08 <_dtoa_r+0x8d8>
 801be0e:	461a      	mov	r2, r3
 801be10:	4601      	mov	r1, r0
 801be12:	4620      	mov	r0, r4
 801be14:	f000 ff88 	bl	801cd28 <__pow5mult>
 801be18:	9b05      	ldr	r3, [sp, #20]
 801be1a:	2b01      	cmp	r3, #1
 801be1c:	4606      	mov	r6, r0
 801be1e:	dd76      	ble.n	801bf0e <_dtoa_r+0x8de>
 801be20:	2300      	movs	r3, #0
 801be22:	9306      	str	r3, [sp, #24]
 801be24:	6933      	ldr	r3, [r6, #16]
 801be26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801be2a:	6918      	ldr	r0, [r3, #16]
 801be2c:	f000 fe70 	bl	801cb10 <__hi0bits>
 801be30:	f1c0 0020 	rsb	r0, r0, #32
 801be34:	9b04      	ldr	r3, [sp, #16]
 801be36:	4418      	add	r0, r3
 801be38:	f010 001f 	ands.w	r0, r0, #31
 801be3c:	f000 8086 	beq.w	801bf4c <_dtoa_r+0x91c>
 801be40:	f1c0 0320 	rsb	r3, r0, #32
 801be44:	2b04      	cmp	r3, #4
 801be46:	dd7f      	ble.n	801bf48 <_dtoa_r+0x918>
 801be48:	f1c0 001c 	rsb	r0, r0, #28
 801be4c:	9b04      	ldr	r3, [sp, #16]
 801be4e:	4403      	add	r3, r0
 801be50:	4480      	add	r8, r0
 801be52:	4405      	add	r5, r0
 801be54:	9304      	str	r3, [sp, #16]
 801be56:	f1b8 0f00 	cmp.w	r8, #0
 801be5a:	dd05      	ble.n	801be68 <_dtoa_r+0x838>
 801be5c:	4659      	mov	r1, fp
 801be5e:	4642      	mov	r2, r8
 801be60:	4620      	mov	r0, r4
 801be62:	f000 ffbb 	bl	801cddc <__lshift>
 801be66:	4683      	mov	fp, r0
 801be68:	9b04      	ldr	r3, [sp, #16]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	dd05      	ble.n	801be7a <_dtoa_r+0x84a>
 801be6e:	4631      	mov	r1, r6
 801be70:	461a      	mov	r2, r3
 801be72:	4620      	mov	r0, r4
 801be74:	f000 ffb2 	bl	801cddc <__lshift>
 801be78:	4606      	mov	r6, r0
 801be7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d069      	beq.n	801bf54 <_dtoa_r+0x924>
 801be80:	4631      	mov	r1, r6
 801be82:	4658      	mov	r0, fp
 801be84:	f001 f816 	bl	801ceb4 <__mcmp>
 801be88:	2800      	cmp	r0, #0
 801be8a:	da63      	bge.n	801bf54 <_dtoa_r+0x924>
 801be8c:	2300      	movs	r3, #0
 801be8e:	4659      	mov	r1, fp
 801be90:	220a      	movs	r2, #10
 801be92:	4620      	mov	r0, r4
 801be94:	f000 fda8 	bl	801c9e8 <__multadd>
 801be98:	9b08      	ldr	r3, [sp, #32]
 801be9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801be9e:	4683      	mov	fp, r0
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	f000 818f 	beq.w	801c1c4 <_dtoa_r+0xb94>
 801bea6:	4639      	mov	r1, r7
 801bea8:	2300      	movs	r3, #0
 801beaa:	220a      	movs	r2, #10
 801beac:	4620      	mov	r0, r4
 801beae:	f000 fd9b 	bl	801c9e8 <__multadd>
 801beb2:	f1b9 0f00 	cmp.w	r9, #0
 801beb6:	4607      	mov	r7, r0
 801beb8:	f300 808e 	bgt.w	801bfd8 <_dtoa_r+0x9a8>
 801bebc:	9b05      	ldr	r3, [sp, #20]
 801bebe:	2b02      	cmp	r3, #2
 801bec0:	dc50      	bgt.n	801bf64 <_dtoa_r+0x934>
 801bec2:	e089      	b.n	801bfd8 <_dtoa_r+0x9a8>
 801bec4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801beca:	e75d      	b.n	801bd88 <_dtoa_r+0x758>
 801becc:	9b01      	ldr	r3, [sp, #4]
 801bece:	1e5e      	subs	r6, r3, #1
 801bed0:	9b06      	ldr	r3, [sp, #24]
 801bed2:	42b3      	cmp	r3, r6
 801bed4:	bfbf      	itttt	lt
 801bed6:	9b06      	ldrlt	r3, [sp, #24]
 801bed8:	9606      	strlt	r6, [sp, #24]
 801beda:	1af2      	sublt	r2, r6, r3
 801bedc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801bede:	bfb6      	itet	lt
 801bee0:	189b      	addlt	r3, r3, r2
 801bee2:	1b9e      	subge	r6, r3, r6
 801bee4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801bee6:	9b01      	ldr	r3, [sp, #4]
 801bee8:	bfb8      	it	lt
 801beea:	2600      	movlt	r6, #0
 801beec:	2b00      	cmp	r3, #0
 801beee:	bfb5      	itete	lt
 801bef0:	eba8 0503 	sublt.w	r5, r8, r3
 801bef4:	9b01      	ldrge	r3, [sp, #4]
 801bef6:	2300      	movlt	r3, #0
 801bef8:	4645      	movge	r5, r8
 801befa:	e747      	b.n	801bd8c <_dtoa_r+0x75c>
 801befc:	9e06      	ldr	r6, [sp, #24]
 801befe:	9f08      	ldr	r7, [sp, #32]
 801bf00:	4645      	mov	r5, r8
 801bf02:	e74c      	b.n	801bd9e <_dtoa_r+0x76e>
 801bf04:	9a06      	ldr	r2, [sp, #24]
 801bf06:	e775      	b.n	801bdf4 <_dtoa_r+0x7c4>
 801bf08:	9b05      	ldr	r3, [sp, #20]
 801bf0a:	2b01      	cmp	r3, #1
 801bf0c:	dc18      	bgt.n	801bf40 <_dtoa_r+0x910>
 801bf0e:	9b02      	ldr	r3, [sp, #8]
 801bf10:	b9b3      	cbnz	r3, 801bf40 <_dtoa_r+0x910>
 801bf12:	9b03      	ldr	r3, [sp, #12]
 801bf14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bf18:	b9a3      	cbnz	r3, 801bf44 <_dtoa_r+0x914>
 801bf1a:	9b03      	ldr	r3, [sp, #12]
 801bf1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf20:	0d1b      	lsrs	r3, r3, #20
 801bf22:	051b      	lsls	r3, r3, #20
 801bf24:	b12b      	cbz	r3, 801bf32 <_dtoa_r+0x902>
 801bf26:	9b04      	ldr	r3, [sp, #16]
 801bf28:	3301      	adds	r3, #1
 801bf2a:	9304      	str	r3, [sp, #16]
 801bf2c:	f108 0801 	add.w	r8, r8, #1
 801bf30:	2301      	movs	r3, #1
 801bf32:	9306      	str	r3, [sp, #24]
 801bf34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	f47f af74 	bne.w	801be24 <_dtoa_r+0x7f4>
 801bf3c:	2001      	movs	r0, #1
 801bf3e:	e779      	b.n	801be34 <_dtoa_r+0x804>
 801bf40:	2300      	movs	r3, #0
 801bf42:	e7f6      	b.n	801bf32 <_dtoa_r+0x902>
 801bf44:	9b02      	ldr	r3, [sp, #8]
 801bf46:	e7f4      	b.n	801bf32 <_dtoa_r+0x902>
 801bf48:	d085      	beq.n	801be56 <_dtoa_r+0x826>
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	301c      	adds	r0, #28
 801bf4e:	e77d      	b.n	801be4c <_dtoa_r+0x81c>
 801bf50:	40240000 	.word	0x40240000
 801bf54:	9b01      	ldr	r3, [sp, #4]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	dc38      	bgt.n	801bfcc <_dtoa_r+0x99c>
 801bf5a:	9b05      	ldr	r3, [sp, #20]
 801bf5c:	2b02      	cmp	r3, #2
 801bf5e:	dd35      	ble.n	801bfcc <_dtoa_r+0x99c>
 801bf60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801bf64:	f1b9 0f00 	cmp.w	r9, #0
 801bf68:	d10d      	bne.n	801bf86 <_dtoa_r+0x956>
 801bf6a:	4631      	mov	r1, r6
 801bf6c:	464b      	mov	r3, r9
 801bf6e:	2205      	movs	r2, #5
 801bf70:	4620      	mov	r0, r4
 801bf72:	f000 fd39 	bl	801c9e8 <__multadd>
 801bf76:	4601      	mov	r1, r0
 801bf78:	4606      	mov	r6, r0
 801bf7a:	4658      	mov	r0, fp
 801bf7c:	f000 ff9a 	bl	801ceb4 <__mcmp>
 801bf80:	2800      	cmp	r0, #0
 801bf82:	f73f adbd 	bgt.w	801bb00 <_dtoa_r+0x4d0>
 801bf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf88:	9d00      	ldr	r5, [sp, #0]
 801bf8a:	ea6f 0a03 	mvn.w	sl, r3
 801bf8e:	f04f 0800 	mov.w	r8, #0
 801bf92:	4631      	mov	r1, r6
 801bf94:	4620      	mov	r0, r4
 801bf96:	f000 fd05 	bl	801c9a4 <_Bfree>
 801bf9a:	2f00      	cmp	r7, #0
 801bf9c:	f43f aeb4 	beq.w	801bd08 <_dtoa_r+0x6d8>
 801bfa0:	f1b8 0f00 	cmp.w	r8, #0
 801bfa4:	d005      	beq.n	801bfb2 <_dtoa_r+0x982>
 801bfa6:	45b8      	cmp	r8, r7
 801bfa8:	d003      	beq.n	801bfb2 <_dtoa_r+0x982>
 801bfaa:	4641      	mov	r1, r8
 801bfac:	4620      	mov	r0, r4
 801bfae:	f000 fcf9 	bl	801c9a4 <_Bfree>
 801bfb2:	4639      	mov	r1, r7
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f000 fcf5 	bl	801c9a4 <_Bfree>
 801bfba:	e6a5      	b.n	801bd08 <_dtoa_r+0x6d8>
 801bfbc:	2600      	movs	r6, #0
 801bfbe:	4637      	mov	r7, r6
 801bfc0:	e7e1      	b.n	801bf86 <_dtoa_r+0x956>
 801bfc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bfc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bfc8:	4637      	mov	r7, r6
 801bfca:	e599      	b.n	801bb00 <_dtoa_r+0x4d0>
 801bfcc:	9b08      	ldr	r3, [sp, #32]
 801bfce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	f000 80fd 	beq.w	801c1d2 <_dtoa_r+0xba2>
 801bfd8:	2d00      	cmp	r5, #0
 801bfda:	dd05      	ble.n	801bfe8 <_dtoa_r+0x9b8>
 801bfdc:	4639      	mov	r1, r7
 801bfde:	462a      	mov	r2, r5
 801bfe0:	4620      	mov	r0, r4
 801bfe2:	f000 fefb 	bl	801cddc <__lshift>
 801bfe6:	4607      	mov	r7, r0
 801bfe8:	9b06      	ldr	r3, [sp, #24]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d05c      	beq.n	801c0a8 <_dtoa_r+0xa78>
 801bfee:	6879      	ldr	r1, [r7, #4]
 801bff0:	4620      	mov	r0, r4
 801bff2:	f000 fc97 	bl	801c924 <_Balloc>
 801bff6:	4605      	mov	r5, r0
 801bff8:	b928      	cbnz	r0, 801c006 <_dtoa_r+0x9d6>
 801bffa:	4b80      	ldr	r3, [pc, #512]	; (801c1fc <_dtoa_r+0xbcc>)
 801bffc:	4602      	mov	r2, r0
 801bffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c002:	f7ff bb2e 	b.w	801b662 <_dtoa_r+0x32>
 801c006:	693a      	ldr	r2, [r7, #16]
 801c008:	3202      	adds	r2, #2
 801c00a:	0092      	lsls	r2, r2, #2
 801c00c:	f107 010c 	add.w	r1, r7, #12
 801c010:	300c      	adds	r0, #12
 801c012:	f7fd fd05 	bl	8019a20 <memcpy>
 801c016:	2201      	movs	r2, #1
 801c018:	4629      	mov	r1, r5
 801c01a:	4620      	mov	r0, r4
 801c01c:	f000 fede 	bl	801cddc <__lshift>
 801c020:	9b00      	ldr	r3, [sp, #0]
 801c022:	3301      	adds	r3, #1
 801c024:	9301      	str	r3, [sp, #4]
 801c026:	9b00      	ldr	r3, [sp, #0]
 801c028:	444b      	add	r3, r9
 801c02a:	9307      	str	r3, [sp, #28]
 801c02c:	9b02      	ldr	r3, [sp, #8]
 801c02e:	f003 0301 	and.w	r3, r3, #1
 801c032:	46b8      	mov	r8, r7
 801c034:	9306      	str	r3, [sp, #24]
 801c036:	4607      	mov	r7, r0
 801c038:	9b01      	ldr	r3, [sp, #4]
 801c03a:	4631      	mov	r1, r6
 801c03c:	3b01      	subs	r3, #1
 801c03e:	4658      	mov	r0, fp
 801c040:	9302      	str	r3, [sp, #8]
 801c042:	f7ff fa67 	bl	801b514 <quorem>
 801c046:	4603      	mov	r3, r0
 801c048:	3330      	adds	r3, #48	; 0x30
 801c04a:	9004      	str	r0, [sp, #16]
 801c04c:	4641      	mov	r1, r8
 801c04e:	4658      	mov	r0, fp
 801c050:	9308      	str	r3, [sp, #32]
 801c052:	f000 ff2f 	bl	801ceb4 <__mcmp>
 801c056:	463a      	mov	r2, r7
 801c058:	4681      	mov	r9, r0
 801c05a:	4631      	mov	r1, r6
 801c05c:	4620      	mov	r0, r4
 801c05e:	f000 ff45 	bl	801ceec <__mdiff>
 801c062:	68c2      	ldr	r2, [r0, #12]
 801c064:	9b08      	ldr	r3, [sp, #32]
 801c066:	4605      	mov	r5, r0
 801c068:	bb02      	cbnz	r2, 801c0ac <_dtoa_r+0xa7c>
 801c06a:	4601      	mov	r1, r0
 801c06c:	4658      	mov	r0, fp
 801c06e:	f000 ff21 	bl	801ceb4 <__mcmp>
 801c072:	9b08      	ldr	r3, [sp, #32]
 801c074:	4602      	mov	r2, r0
 801c076:	4629      	mov	r1, r5
 801c078:	4620      	mov	r0, r4
 801c07a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c07e:	f000 fc91 	bl	801c9a4 <_Bfree>
 801c082:	9b05      	ldr	r3, [sp, #20]
 801c084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c086:	9d01      	ldr	r5, [sp, #4]
 801c088:	ea43 0102 	orr.w	r1, r3, r2
 801c08c:	9b06      	ldr	r3, [sp, #24]
 801c08e:	430b      	orrs	r3, r1
 801c090:	9b08      	ldr	r3, [sp, #32]
 801c092:	d10d      	bne.n	801c0b0 <_dtoa_r+0xa80>
 801c094:	2b39      	cmp	r3, #57	; 0x39
 801c096:	d029      	beq.n	801c0ec <_dtoa_r+0xabc>
 801c098:	f1b9 0f00 	cmp.w	r9, #0
 801c09c:	dd01      	ble.n	801c0a2 <_dtoa_r+0xa72>
 801c09e:	9b04      	ldr	r3, [sp, #16]
 801c0a0:	3331      	adds	r3, #49	; 0x31
 801c0a2:	9a02      	ldr	r2, [sp, #8]
 801c0a4:	7013      	strb	r3, [r2, #0]
 801c0a6:	e774      	b.n	801bf92 <_dtoa_r+0x962>
 801c0a8:	4638      	mov	r0, r7
 801c0aa:	e7b9      	b.n	801c020 <_dtoa_r+0x9f0>
 801c0ac:	2201      	movs	r2, #1
 801c0ae:	e7e2      	b.n	801c076 <_dtoa_r+0xa46>
 801c0b0:	f1b9 0f00 	cmp.w	r9, #0
 801c0b4:	db06      	blt.n	801c0c4 <_dtoa_r+0xa94>
 801c0b6:	9905      	ldr	r1, [sp, #20]
 801c0b8:	ea41 0909 	orr.w	r9, r1, r9
 801c0bc:	9906      	ldr	r1, [sp, #24]
 801c0be:	ea59 0101 	orrs.w	r1, r9, r1
 801c0c2:	d120      	bne.n	801c106 <_dtoa_r+0xad6>
 801c0c4:	2a00      	cmp	r2, #0
 801c0c6:	ddec      	ble.n	801c0a2 <_dtoa_r+0xa72>
 801c0c8:	4659      	mov	r1, fp
 801c0ca:	2201      	movs	r2, #1
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	9301      	str	r3, [sp, #4]
 801c0d0:	f000 fe84 	bl	801cddc <__lshift>
 801c0d4:	4631      	mov	r1, r6
 801c0d6:	4683      	mov	fp, r0
 801c0d8:	f000 feec 	bl	801ceb4 <__mcmp>
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	9b01      	ldr	r3, [sp, #4]
 801c0e0:	dc02      	bgt.n	801c0e8 <_dtoa_r+0xab8>
 801c0e2:	d1de      	bne.n	801c0a2 <_dtoa_r+0xa72>
 801c0e4:	07da      	lsls	r2, r3, #31
 801c0e6:	d5dc      	bpl.n	801c0a2 <_dtoa_r+0xa72>
 801c0e8:	2b39      	cmp	r3, #57	; 0x39
 801c0ea:	d1d8      	bne.n	801c09e <_dtoa_r+0xa6e>
 801c0ec:	9a02      	ldr	r2, [sp, #8]
 801c0ee:	2339      	movs	r3, #57	; 0x39
 801c0f0:	7013      	strb	r3, [r2, #0]
 801c0f2:	462b      	mov	r3, r5
 801c0f4:	461d      	mov	r5, r3
 801c0f6:	3b01      	subs	r3, #1
 801c0f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c0fc:	2a39      	cmp	r2, #57	; 0x39
 801c0fe:	d050      	beq.n	801c1a2 <_dtoa_r+0xb72>
 801c100:	3201      	adds	r2, #1
 801c102:	701a      	strb	r2, [r3, #0]
 801c104:	e745      	b.n	801bf92 <_dtoa_r+0x962>
 801c106:	2a00      	cmp	r2, #0
 801c108:	dd03      	ble.n	801c112 <_dtoa_r+0xae2>
 801c10a:	2b39      	cmp	r3, #57	; 0x39
 801c10c:	d0ee      	beq.n	801c0ec <_dtoa_r+0xabc>
 801c10e:	3301      	adds	r3, #1
 801c110:	e7c7      	b.n	801c0a2 <_dtoa_r+0xa72>
 801c112:	9a01      	ldr	r2, [sp, #4]
 801c114:	9907      	ldr	r1, [sp, #28]
 801c116:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c11a:	428a      	cmp	r2, r1
 801c11c:	d02a      	beq.n	801c174 <_dtoa_r+0xb44>
 801c11e:	4659      	mov	r1, fp
 801c120:	2300      	movs	r3, #0
 801c122:	220a      	movs	r2, #10
 801c124:	4620      	mov	r0, r4
 801c126:	f000 fc5f 	bl	801c9e8 <__multadd>
 801c12a:	45b8      	cmp	r8, r7
 801c12c:	4683      	mov	fp, r0
 801c12e:	f04f 0300 	mov.w	r3, #0
 801c132:	f04f 020a 	mov.w	r2, #10
 801c136:	4641      	mov	r1, r8
 801c138:	4620      	mov	r0, r4
 801c13a:	d107      	bne.n	801c14c <_dtoa_r+0xb1c>
 801c13c:	f000 fc54 	bl	801c9e8 <__multadd>
 801c140:	4680      	mov	r8, r0
 801c142:	4607      	mov	r7, r0
 801c144:	9b01      	ldr	r3, [sp, #4]
 801c146:	3301      	adds	r3, #1
 801c148:	9301      	str	r3, [sp, #4]
 801c14a:	e775      	b.n	801c038 <_dtoa_r+0xa08>
 801c14c:	f000 fc4c 	bl	801c9e8 <__multadd>
 801c150:	4639      	mov	r1, r7
 801c152:	4680      	mov	r8, r0
 801c154:	2300      	movs	r3, #0
 801c156:	220a      	movs	r2, #10
 801c158:	4620      	mov	r0, r4
 801c15a:	f000 fc45 	bl	801c9e8 <__multadd>
 801c15e:	4607      	mov	r7, r0
 801c160:	e7f0      	b.n	801c144 <_dtoa_r+0xb14>
 801c162:	f1b9 0f00 	cmp.w	r9, #0
 801c166:	9a00      	ldr	r2, [sp, #0]
 801c168:	bfcc      	ite	gt
 801c16a:	464d      	movgt	r5, r9
 801c16c:	2501      	movle	r5, #1
 801c16e:	4415      	add	r5, r2
 801c170:	f04f 0800 	mov.w	r8, #0
 801c174:	4659      	mov	r1, fp
 801c176:	2201      	movs	r2, #1
 801c178:	4620      	mov	r0, r4
 801c17a:	9301      	str	r3, [sp, #4]
 801c17c:	f000 fe2e 	bl	801cddc <__lshift>
 801c180:	4631      	mov	r1, r6
 801c182:	4683      	mov	fp, r0
 801c184:	f000 fe96 	bl	801ceb4 <__mcmp>
 801c188:	2800      	cmp	r0, #0
 801c18a:	dcb2      	bgt.n	801c0f2 <_dtoa_r+0xac2>
 801c18c:	d102      	bne.n	801c194 <_dtoa_r+0xb64>
 801c18e:	9b01      	ldr	r3, [sp, #4]
 801c190:	07db      	lsls	r3, r3, #31
 801c192:	d4ae      	bmi.n	801c0f2 <_dtoa_r+0xac2>
 801c194:	462b      	mov	r3, r5
 801c196:	461d      	mov	r5, r3
 801c198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c19c:	2a30      	cmp	r2, #48	; 0x30
 801c19e:	d0fa      	beq.n	801c196 <_dtoa_r+0xb66>
 801c1a0:	e6f7      	b.n	801bf92 <_dtoa_r+0x962>
 801c1a2:	9a00      	ldr	r2, [sp, #0]
 801c1a4:	429a      	cmp	r2, r3
 801c1a6:	d1a5      	bne.n	801c0f4 <_dtoa_r+0xac4>
 801c1a8:	f10a 0a01 	add.w	sl, sl, #1
 801c1ac:	2331      	movs	r3, #49	; 0x31
 801c1ae:	e779      	b.n	801c0a4 <_dtoa_r+0xa74>
 801c1b0:	4b13      	ldr	r3, [pc, #76]	; (801c200 <_dtoa_r+0xbd0>)
 801c1b2:	f7ff baaf 	b.w	801b714 <_dtoa_r+0xe4>
 801c1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	f47f aa86 	bne.w	801b6ca <_dtoa_r+0x9a>
 801c1be:	4b11      	ldr	r3, [pc, #68]	; (801c204 <_dtoa_r+0xbd4>)
 801c1c0:	f7ff baa8 	b.w	801b714 <_dtoa_r+0xe4>
 801c1c4:	f1b9 0f00 	cmp.w	r9, #0
 801c1c8:	dc03      	bgt.n	801c1d2 <_dtoa_r+0xba2>
 801c1ca:	9b05      	ldr	r3, [sp, #20]
 801c1cc:	2b02      	cmp	r3, #2
 801c1ce:	f73f aec9 	bgt.w	801bf64 <_dtoa_r+0x934>
 801c1d2:	9d00      	ldr	r5, [sp, #0]
 801c1d4:	4631      	mov	r1, r6
 801c1d6:	4658      	mov	r0, fp
 801c1d8:	f7ff f99c 	bl	801b514 <quorem>
 801c1dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c1e0:	f805 3b01 	strb.w	r3, [r5], #1
 801c1e4:	9a00      	ldr	r2, [sp, #0]
 801c1e6:	1aaa      	subs	r2, r5, r2
 801c1e8:	4591      	cmp	r9, r2
 801c1ea:	ddba      	ble.n	801c162 <_dtoa_r+0xb32>
 801c1ec:	4659      	mov	r1, fp
 801c1ee:	2300      	movs	r3, #0
 801c1f0:	220a      	movs	r2, #10
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	f000 fbf8 	bl	801c9e8 <__multadd>
 801c1f8:	4683      	mov	fp, r0
 801c1fa:	e7eb      	b.n	801c1d4 <_dtoa_r+0xba4>
 801c1fc:	080214bc 	.word	0x080214bc
 801c200:	080212b8 	.word	0x080212b8
 801c204:	08021439 	.word	0x08021439

0801c208 <rshift>:
 801c208:	6903      	ldr	r3, [r0, #16]
 801c20a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c20e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c212:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c216:	f100 0414 	add.w	r4, r0, #20
 801c21a:	dd45      	ble.n	801c2a8 <rshift+0xa0>
 801c21c:	f011 011f 	ands.w	r1, r1, #31
 801c220:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c224:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c228:	d10c      	bne.n	801c244 <rshift+0x3c>
 801c22a:	f100 0710 	add.w	r7, r0, #16
 801c22e:	4629      	mov	r1, r5
 801c230:	42b1      	cmp	r1, r6
 801c232:	d334      	bcc.n	801c29e <rshift+0x96>
 801c234:	1a9b      	subs	r3, r3, r2
 801c236:	009b      	lsls	r3, r3, #2
 801c238:	1eea      	subs	r2, r5, #3
 801c23a:	4296      	cmp	r6, r2
 801c23c:	bf38      	it	cc
 801c23e:	2300      	movcc	r3, #0
 801c240:	4423      	add	r3, r4
 801c242:	e015      	b.n	801c270 <rshift+0x68>
 801c244:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c248:	f1c1 0820 	rsb	r8, r1, #32
 801c24c:	40cf      	lsrs	r7, r1
 801c24e:	f105 0e04 	add.w	lr, r5, #4
 801c252:	46a1      	mov	r9, r4
 801c254:	4576      	cmp	r6, lr
 801c256:	46f4      	mov	ip, lr
 801c258:	d815      	bhi.n	801c286 <rshift+0x7e>
 801c25a:	1a9b      	subs	r3, r3, r2
 801c25c:	009a      	lsls	r2, r3, #2
 801c25e:	3a04      	subs	r2, #4
 801c260:	3501      	adds	r5, #1
 801c262:	42ae      	cmp	r6, r5
 801c264:	bf38      	it	cc
 801c266:	2200      	movcc	r2, #0
 801c268:	18a3      	adds	r3, r4, r2
 801c26a:	50a7      	str	r7, [r4, r2]
 801c26c:	b107      	cbz	r7, 801c270 <rshift+0x68>
 801c26e:	3304      	adds	r3, #4
 801c270:	1b1a      	subs	r2, r3, r4
 801c272:	42a3      	cmp	r3, r4
 801c274:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c278:	bf08      	it	eq
 801c27a:	2300      	moveq	r3, #0
 801c27c:	6102      	str	r2, [r0, #16]
 801c27e:	bf08      	it	eq
 801c280:	6143      	streq	r3, [r0, #20]
 801c282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c286:	f8dc c000 	ldr.w	ip, [ip]
 801c28a:	fa0c fc08 	lsl.w	ip, ip, r8
 801c28e:	ea4c 0707 	orr.w	r7, ip, r7
 801c292:	f849 7b04 	str.w	r7, [r9], #4
 801c296:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c29a:	40cf      	lsrs	r7, r1
 801c29c:	e7da      	b.n	801c254 <rshift+0x4c>
 801c29e:	f851 cb04 	ldr.w	ip, [r1], #4
 801c2a2:	f847 cf04 	str.w	ip, [r7, #4]!
 801c2a6:	e7c3      	b.n	801c230 <rshift+0x28>
 801c2a8:	4623      	mov	r3, r4
 801c2aa:	e7e1      	b.n	801c270 <rshift+0x68>

0801c2ac <__hexdig_fun>:
 801c2ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c2b0:	2b09      	cmp	r3, #9
 801c2b2:	d802      	bhi.n	801c2ba <__hexdig_fun+0xe>
 801c2b4:	3820      	subs	r0, #32
 801c2b6:	b2c0      	uxtb	r0, r0
 801c2b8:	4770      	bx	lr
 801c2ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c2be:	2b05      	cmp	r3, #5
 801c2c0:	d801      	bhi.n	801c2c6 <__hexdig_fun+0x1a>
 801c2c2:	3847      	subs	r0, #71	; 0x47
 801c2c4:	e7f7      	b.n	801c2b6 <__hexdig_fun+0xa>
 801c2c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c2ca:	2b05      	cmp	r3, #5
 801c2cc:	d801      	bhi.n	801c2d2 <__hexdig_fun+0x26>
 801c2ce:	3827      	subs	r0, #39	; 0x27
 801c2d0:	e7f1      	b.n	801c2b6 <__hexdig_fun+0xa>
 801c2d2:	2000      	movs	r0, #0
 801c2d4:	4770      	bx	lr
	...

0801c2d8 <__gethex>:
 801c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2dc:	ed2d 8b02 	vpush	{d8}
 801c2e0:	b089      	sub	sp, #36	; 0x24
 801c2e2:	ee08 0a10 	vmov	s16, r0
 801c2e6:	9304      	str	r3, [sp, #16]
 801c2e8:	4bbc      	ldr	r3, [pc, #752]	; (801c5dc <__gethex+0x304>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	9301      	str	r3, [sp, #4]
 801c2ee:	4618      	mov	r0, r3
 801c2f0:	468b      	mov	fp, r1
 801c2f2:	4690      	mov	r8, r2
 801c2f4:	f7e3 ff6c 	bl	80001d0 <strlen>
 801c2f8:	9b01      	ldr	r3, [sp, #4]
 801c2fa:	f8db 2000 	ldr.w	r2, [fp]
 801c2fe:	4403      	add	r3, r0
 801c300:	4682      	mov	sl, r0
 801c302:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c306:	9305      	str	r3, [sp, #20]
 801c308:	1c93      	adds	r3, r2, #2
 801c30a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c30e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c312:	32fe      	adds	r2, #254	; 0xfe
 801c314:	18d1      	adds	r1, r2, r3
 801c316:	461f      	mov	r7, r3
 801c318:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c31c:	9100      	str	r1, [sp, #0]
 801c31e:	2830      	cmp	r0, #48	; 0x30
 801c320:	d0f8      	beq.n	801c314 <__gethex+0x3c>
 801c322:	f7ff ffc3 	bl	801c2ac <__hexdig_fun>
 801c326:	4604      	mov	r4, r0
 801c328:	2800      	cmp	r0, #0
 801c32a:	d13a      	bne.n	801c3a2 <__gethex+0xca>
 801c32c:	9901      	ldr	r1, [sp, #4]
 801c32e:	4652      	mov	r2, sl
 801c330:	4638      	mov	r0, r7
 801c332:	f7fe fa2b 	bl	801a78c <strncmp>
 801c336:	4605      	mov	r5, r0
 801c338:	2800      	cmp	r0, #0
 801c33a:	d168      	bne.n	801c40e <__gethex+0x136>
 801c33c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c340:	eb07 060a 	add.w	r6, r7, sl
 801c344:	f7ff ffb2 	bl	801c2ac <__hexdig_fun>
 801c348:	2800      	cmp	r0, #0
 801c34a:	d062      	beq.n	801c412 <__gethex+0x13a>
 801c34c:	4633      	mov	r3, r6
 801c34e:	7818      	ldrb	r0, [r3, #0]
 801c350:	2830      	cmp	r0, #48	; 0x30
 801c352:	461f      	mov	r7, r3
 801c354:	f103 0301 	add.w	r3, r3, #1
 801c358:	d0f9      	beq.n	801c34e <__gethex+0x76>
 801c35a:	f7ff ffa7 	bl	801c2ac <__hexdig_fun>
 801c35e:	2301      	movs	r3, #1
 801c360:	fab0 f480 	clz	r4, r0
 801c364:	0964      	lsrs	r4, r4, #5
 801c366:	4635      	mov	r5, r6
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	463a      	mov	r2, r7
 801c36c:	4616      	mov	r6, r2
 801c36e:	3201      	adds	r2, #1
 801c370:	7830      	ldrb	r0, [r6, #0]
 801c372:	f7ff ff9b 	bl	801c2ac <__hexdig_fun>
 801c376:	2800      	cmp	r0, #0
 801c378:	d1f8      	bne.n	801c36c <__gethex+0x94>
 801c37a:	9901      	ldr	r1, [sp, #4]
 801c37c:	4652      	mov	r2, sl
 801c37e:	4630      	mov	r0, r6
 801c380:	f7fe fa04 	bl	801a78c <strncmp>
 801c384:	b980      	cbnz	r0, 801c3a8 <__gethex+0xd0>
 801c386:	b94d      	cbnz	r5, 801c39c <__gethex+0xc4>
 801c388:	eb06 050a 	add.w	r5, r6, sl
 801c38c:	462a      	mov	r2, r5
 801c38e:	4616      	mov	r6, r2
 801c390:	3201      	adds	r2, #1
 801c392:	7830      	ldrb	r0, [r6, #0]
 801c394:	f7ff ff8a 	bl	801c2ac <__hexdig_fun>
 801c398:	2800      	cmp	r0, #0
 801c39a:	d1f8      	bne.n	801c38e <__gethex+0xb6>
 801c39c:	1bad      	subs	r5, r5, r6
 801c39e:	00ad      	lsls	r5, r5, #2
 801c3a0:	e004      	b.n	801c3ac <__gethex+0xd4>
 801c3a2:	2400      	movs	r4, #0
 801c3a4:	4625      	mov	r5, r4
 801c3a6:	e7e0      	b.n	801c36a <__gethex+0x92>
 801c3a8:	2d00      	cmp	r5, #0
 801c3aa:	d1f7      	bne.n	801c39c <__gethex+0xc4>
 801c3ac:	7833      	ldrb	r3, [r6, #0]
 801c3ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c3b2:	2b50      	cmp	r3, #80	; 0x50
 801c3b4:	d13b      	bne.n	801c42e <__gethex+0x156>
 801c3b6:	7873      	ldrb	r3, [r6, #1]
 801c3b8:	2b2b      	cmp	r3, #43	; 0x2b
 801c3ba:	d02c      	beq.n	801c416 <__gethex+0x13e>
 801c3bc:	2b2d      	cmp	r3, #45	; 0x2d
 801c3be:	d02e      	beq.n	801c41e <__gethex+0x146>
 801c3c0:	1c71      	adds	r1, r6, #1
 801c3c2:	f04f 0900 	mov.w	r9, #0
 801c3c6:	7808      	ldrb	r0, [r1, #0]
 801c3c8:	f7ff ff70 	bl	801c2ac <__hexdig_fun>
 801c3cc:	1e43      	subs	r3, r0, #1
 801c3ce:	b2db      	uxtb	r3, r3
 801c3d0:	2b18      	cmp	r3, #24
 801c3d2:	d82c      	bhi.n	801c42e <__gethex+0x156>
 801c3d4:	f1a0 0210 	sub.w	r2, r0, #16
 801c3d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c3dc:	f7ff ff66 	bl	801c2ac <__hexdig_fun>
 801c3e0:	1e43      	subs	r3, r0, #1
 801c3e2:	b2db      	uxtb	r3, r3
 801c3e4:	2b18      	cmp	r3, #24
 801c3e6:	d91d      	bls.n	801c424 <__gethex+0x14c>
 801c3e8:	f1b9 0f00 	cmp.w	r9, #0
 801c3ec:	d000      	beq.n	801c3f0 <__gethex+0x118>
 801c3ee:	4252      	negs	r2, r2
 801c3f0:	4415      	add	r5, r2
 801c3f2:	f8cb 1000 	str.w	r1, [fp]
 801c3f6:	b1e4      	cbz	r4, 801c432 <__gethex+0x15a>
 801c3f8:	9b00      	ldr	r3, [sp, #0]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	bf14      	ite	ne
 801c3fe:	2700      	movne	r7, #0
 801c400:	2706      	moveq	r7, #6
 801c402:	4638      	mov	r0, r7
 801c404:	b009      	add	sp, #36	; 0x24
 801c406:	ecbd 8b02 	vpop	{d8}
 801c40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c40e:	463e      	mov	r6, r7
 801c410:	4625      	mov	r5, r4
 801c412:	2401      	movs	r4, #1
 801c414:	e7ca      	b.n	801c3ac <__gethex+0xd4>
 801c416:	f04f 0900 	mov.w	r9, #0
 801c41a:	1cb1      	adds	r1, r6, #2
 801c41c:	e7d3      	b.n	801c3c6 <__gethex+0xee>
 801c41e:	f04f 0901 	mov.w	r9, #1
 801c422:	e7fa      	b.n	801c41a <__gethex+0x142>
 801c424:	230a      	movs	r3, #10
 801c426:	fb03 0202 	mla	r2, r3, r2, r0
 801c42a:	3a10      	subs	r2, #16
 801c42c:	e7d4      	b.n	801c3d8 <__gethex+0x100>
 801c42e:	4631      	mov	r1, r6
 801c430:	e7df      	b.n	801c3f2 <__gethex+0x11a>
 801c432:	1bf3      	subs	r3, r6, r7
 801c434:	3b01      	subs	r3, #1
 801c436:	4621      	mov	r1, r4
 801c438:	2b07      	cmp	r3, #7
 801c43a:	dc0b      	bgt.n	801c454 <__gethex+0x17c>
 801c43c:	ee18 0a10 	vmov	r0, s16
 801c440:	f000 fa70 	bl	801c924 <_Balloc>
 801c444:	4604      	mov	r4, r0
 801c446:	b940      	cbnz	r0, 801c45a <__gethex+0x182>
 801c448:	4b65      	ldr	r3, [pc, #404]	; (801c5e0 <__gethex+0x308>)
 801c44a:	4602      	mov	r2, r0
 801c44c:	21de      	movs	r1, #222	; 0xde
 801c44e:	4865      	ldr	r0, [pc, #404]	; (801c5e4 <__gethex+0x30c>)
 801c450:	f001 f960 	bl	801d714 <__assert_func>
 801c454:	3101      	adds	r1, #1
 801c456:	105b      	asrs	r3, r3, #1
 801c458:	e7ee      	b.n	801c438 <__gethex+0x160>
 801c45a:	f100 0914 	add.w	r9, r0, #20
 801c45e:	f04f 0b00 	mov.w	fp, #0
 801c462:	f1ca 0301 	rsb	r3, sl, #1
 801c466:	f8cd 9008 	str.w	r9, [sp, #8]
 801c46a:	f8cd b000 	str.w	fp, [sp]
 801c46e:	9306      	str	r3, [sp, #24]
 801c470:	42b7      	cmp	r7, r6
 801c472:	d340      	bcc.n	801c4f6 <__gethex+0x21e>
 801c474:	9802      	ldr	r0, [sp, #8]
 801c476:	9b00      	ldr	r3, [sp, #0]
 801c478:	f840 3b04 	str.w	r3, [r0], #4
 801c47c:	eba0 0009 	sub.w	r0, r0, r9
 801c480:	1080      	asrs	r0, r0, #2
 801c482:	0146      	lsls	r6, r0, #5
 801c484:	6120      	str	r0, [r4, #16]
 801c486:	4618      	mov	r0, r3
 801c488:	f000 fb42 	bl	801cb10 <__hi0bits>
 801c48c:	1a30      	subs	r0, r6, r0
 801c48e:	f8d8 6000 	ldr.w	r6, [r8]
 801c492:	42b0      	cmp	r0, r6
 801c494:	dd63      	ble.n	801c55e <__gethex+0x286>
 801c496:	1b87      	subs	r7, r0, r6
 801c498:	4639      	mov	r1, r7
 801c49a:	4620      	mov	r0, r4
 801c49c:	f000 fedc 	bl	801d258 <__any_on>
 801c4a0:	4682      	mov	sl, r0
 801c4a2:	b1a8      	cbz	r0, 801c4d0 <__gethex+0x1f8>
 801c4a4:	1e7b      	subs	r3, r7, #1
 801c4a6:	1159      	asrs	r1, r3, #5
 801c4a8:	f003 021f 	and.w	r2, r3, #31
 801c4ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c4b0:	f04f 0a01 	mov.w	sl, #1
 801c4b4:	fa0a f202 	lsl.w	r2, sl, r2
 801c4b8:	420a      	tst	r2, r1
 801c4ba:	d009      	beq.n	801c4d0 <__gethex+0x1f8>
 801c4bc:	4553      	cmp	r3, sl
 801c4be:	dd05      	ble.n	801c4cc <__gethex+0x1f4>
 801c4c0:	1eb9      	subs	r1, r7, #2
 801c4c2:	4620      	mov	r0, r4
 801c4c4:	f000 fec8 	bl	801d258 <__any_on>
 801c4c8:	2800      	cmp	r0, #0
 801c4ca:	d145      	bne.n	801c558 <__gethex+0x280>
 801c4cc:	f04f 0a02 	mov.w	sl, #2
 801c4d0:	4639      	mov	r1, r7
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f7ff fe98 	bl	801c208 <rshift>
 801c4d8:	443d      	add	r5, r7
 801c4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c4de:	42ab      	cmp	r3, r5
 801c4e0:	da4c      	bge.n	801c57c <__gethex+0x2a4>
 801c4e2:	ee18 0a10 	vmov	r0, s16
 801c4e6:	4621      	mov	r1, r4
 801c4e8:	f000 fa5c 	bl	801c9a4 <_Bfree>
 801c4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	6013      	str	r3, [r2, #0]
 801c4f2:	27a3      	movs	r7, #163	; 0xa3
 801c4f4:	e785      	b.n	801c402 <__gethex+0x12a>
 801c4f6:	1e73      	subs	r3, r6, #1
 801c4f8:	9a05      	ldr	r2, [sp, #20]
 801c4fa:	9303      	str	r3, [sp, #12]
 801c4fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c500:	4293      	cmp	r3, r2
 801c502:	d019      	beq.n	801c538 <__gethex+0x260>
 801c504:	f1bb 0f20 	cmp.w	fp, #32
 801c508:	d107      	bne.n	801c51a <__gethex+0x242>
 801c50a:	9b02      	ldr	r3, [sp, #8]
 801c50c:	9a00      	ldr	r2, [sp, #0]
 801c50e:	f843 2b04 	str.w	r2, [r3], #4
 801c512:	9302      	str	r3, [sp, #8]
 801c514:	2300      	movs	r3, #0
 801c516:	9300      	str	r3, [sp, #0]
 801c518:	469b      	mov	fp, r3
 801c51a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c51e:	f7ff fec5 	bl	801c2ac <__hexdig_fun>
 801c522:	9b00      	ldr	r3, [sp, #0]
 801c524:	f000 000f 	and.w	r0, r0, #15
 801c528:	fa00 f00b 	lsl.w	r0, r0, fp
 801c52c:	4303      	orrs	r3, r0
 801c52e:	9300      	str	r3, [sp, #0]
 801c530:	f10b 0b04 	add.w	fp, fp, #4
 801c534:	9b03      	ldr	r3, [sp, #12]
 801c536:	e00d      	b.n	801c554 <__gethex+0x27c>
 801c538:	9b03      	ldr	r3, [sp, #12]
 801c53a:	9a06      	ldr	r2, [sp, #24]
 801c53c:	4413      	add	r3, r2
 801c53e:	42bb      	cmp	r3, r7
 801c540:	d3e0      	bcc.n	801c504 <__gethex+0x22c>
 801c542:	4618      	mov	r0, r3
 801c544:	9901      	ldr	r1, [sp, #4]
 801c546:	9307      	str	r3, [sp, #28]
 801c548:	4652      	mov	r2, sl
 801c54a:	f7fe f91f 	bl	801a78c <strncmp>
 801c54e:	9b07      	ldr	r3, [sp, #28]
 801c550:	2800      	cmp	r0, #0
 801c552:	d1d7      	bne.n	801c504 <__gethex+0x22c>
 801c554:	461e      	mov	r6, r3
 801c556:	e78b      	b.n	801c470 <__gethex+0x198>
 801c558:	f04f 0a03 	mov.w	sl, #3
 801c55c:	e7b8      	b.n	801c4d0 <__gethex+0x1f8>
 801c55e:	da0a      	bge.n	801c576 <__gethex+0x29e>
 801c560:	1a37      	subs	r7, r6, r0
 801c562:	4621      	mov	r1, r4
 801c564:	ee18 0a10 	vmov	r0, s16
 801c568:	463a      	mov	r2, r7
 801c56a:	f000 fc37 	bl	801cddc <__lshift>
 801c56e:	1bed      	subs	r5, r5, r7
 801c570:	4604      	mov	r4, r0
 801c572:	f100 0914 	add.w	r9, r0, #20
 801c576:	f04f 0a00 	mov.w	sl, #0
 801c57a:	e7ae      	b.n	801c4da <__gethex+0x202>
 801c57c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c580:	42a8      	cmp	r0, r5
 801c582:	dd72      	ble.n	801c66a <__gethex+0x392>
 801c584:	1b45      	subs	r5, r0, r5
 801c586:	42ae      	cmp	r6, r5
 801c588:	dc36      	bgt.n	801c5f8 <__gethex+0x320>
 801c58a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c58e:	2b02      	cmp	r3, #2
 801c590:	d02a      	beq.n	801c5e8 <__gethex+0x310>
 801c592:	2b03      	cmp	r3, #3
 801c594:	d02c      	beq.n	801c5f0 <__gethex+0x318>
 801c596:	2b01      	cmp	r3, #1
 801c598:	d115      	bne.n	801c5c6 <__gethex+0x2ee>
 801c59a:	42ae      	cmp	r6, r5
 801c59c:	d113      	bne.n	801c5c6 <__gethex+0x2ee>
 801c59e:	2e01      	cmp	r6, #1
 801c5a0:	d10b      	bne.n	801c5ba <__gethex+0x2e2>
 801c5a2:	9a04      	ldr	r2, [sp, #16]
 801c5a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c5a8:	6013      	str	r3, [r2, #0]
 801c5aa:	2301      	movs	r3, #1
 801c5ac:	6123      	str	r3, [r4, #16]
 801c5ae:	f8c9 3000 	str.w	r3, [r9]
 801c5b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c5b4:	2762      	movs	r7, #98	; 0x62
 801c5b6:	601c      	str	r4, [r3, #0]
 801c5b8:	e723      	b.n	801c402 <__gethex+0x12a>
 801c5ba:	1e71      	subs	r1, r6, #1
 801c5bc:	4620      	mov	r0, r4
 801c5be:	f000 fe4b 	bl	801d258 <__any_on>
 801c5c2:	2800      	cmp	r0, #0
 801c5c4:	d1ed      	bne.n	801c5a2 <__gethex+0x2ca>
 801c5c6:	ee18 0a10 	vmov	r0, s16
 801c5ca:	4621      	mov	r1, r4
 801c5cc:	f000 f9ea 	bl	801c9a4 <_Bfree>
 801c5d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c5d2:	2300      	movs	r3, #0
 801c5d4:	6013      	str	r3, [r2, #0]
 801c5d6:	2750      	movs	r7, #80	; 0x50
 801c5d8:	e713      	b.n	801c402 <__gethex+0x12a>
 801c5da:	bf00      	nop
 801c5dc:	08021538 	.word	0x08021538
 801c5e0:	080214bc 	.word	0x080214bc
 801c5e4:	080214cd 	.word	0x080214cd
 801c5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d1eb      	bne.n	801c5c6 <__gethex+0x2ee>
 801c5ee:	e7d8      	b.n	801c5a2 <__gethex+0x2ca>
 801c5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d1d5      	bne.n	801c5a2 <__gethex+0x2ca>
 801c5f6:	e7e6      	b.n	801c5c6 <__gethex+0x2ee>
 801c5f8:	1e6f      	subs	r7, r5, #1
 801c5fa:	f1ba 0f00 	cmp.w	sl, #0
 801c5fe:	d131      	bne.n	801c664 <__gethex+0x38c>
 801c600:	b127      	cbz	r7, 801c60c <__gethex+0x334>
 801c602:	4639      	mov	r1, r7
 801c604:	4620      	mov	r0, r4
 801c606:	f000 fe27 	bl	801d258 <__any_on>
 801c60a:	4682      	mov	sl, r0
 801c60c:	117b      	asrs	r3, r7, #5
 801c60e:	2101      	movs	r1, #1
 801c610:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c614:	f007 071f 	and.w	r7, r7, #31
 801c618:	fa01 f707 	lsl.w	r7, r1, r7
 801c61c:	421f      	tst	r7, r3
 801c61e:	4629      	mov	r1, r5
 801c620:	4620      	mov	r0, r4
 801c622:	bf18      	it	ne
 801c624:	f04a 0a02 	orrne.w	sl, sl, #2
 801c628:	1b76      	subs	r6, r6, r5
 801c62a:	f7ff fded 	bl	801c208 <rshift>
 801c62e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c632:	2702      	movs	r7, #2
 801c634:	f1ba 0f00 	cmp.w	sl, #0
 801c638:	d048      	beq.n	801c6cc <__gethex+0x3f4>
 801c63a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c63e:	2b02      	cmp	r3, #2
 801c640:	d015      	beq.n	801c66e <__gethex+0x396>
 801c642:	2b03      	cmp	r3, #3
 801c644:	d017      	beq.n	801c676 <__gethex+0x39e>
 801c646:	2b01      	cmp	r3, #1
 801c648:	d109      	bne.n	801c65e <__gethex+0x386>
 801c64a:	f01a 0f02 	tst.w	sl, #2
 801c64e:	d006      	beq.n	801c65e <__gethex+0x386>
 801c650:	f8d9 0000 	ldr.w	r0, [r9]
 801c654:	ea4a 0a00 	orr.w	sl, sl, r0
 801c658:	f01a 0f01 	tst.w	sl, #1
 801c65c:	d10e      	bne.n	801c67c <__gethex+0x3a4>
 801c65e:	f047 0710 	orr.w	r7, r7, #16
 801c662:	e033      	b.n	801c6cc <__gethex+0x3f4>
 801c664:	f04f 0a01 	mov.w	sl, #1
 801c668:	e7d0      	b.n	801c60c <__gethex+0x334>
 801c66a:	2701      	movs	r7, #1
 801c66c:	e7e2      	b.n	801c634 <__gethex+0x35c>
 801c66e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c670:	f1c3 0301 	rsb	r3, r3, #1
 801c674:	9315      	str	r3, [sp, #84]	; 0x54
 801c676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d0f0      	beq.n	801c65e <__gethex+0x386>
 801c67c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c680:	f104 0314 	add.w	r3, r4, #20
 801c684:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c688:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c68c:	f04f 0c00 	mov.w	ip, #0
 801c690:	4618      	mov	r0, r3
 801c692:	f853 2b04 	ldr.w	r2, [r3], #4
 801c696:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801c69a:	d01c      	beq.n	801c6d6 <__gethex+0x3fe>
 801c69c:	3201      	adds	r2, #1
 801c69e:	6002      	str	r2, [r0, #0]
 801c6a0:	2f02      	cmp	r7, #2
 801c6a2:	f104 0314 	add.w	r3, r4, #20
 801c6a6:	d13f      	bne.n	801c728 <__gethex+0x450>
 801c6a8:	f8d8 2000 	ldr.w	r2, [r8]
 801c6ac:	3a01      	subs	r2, #1
 801c6ae:	42b2      	cmp	r2, r6
 801c6b0:	d10a      	bne.n	801c6c8 <__gethex+0x3f0>
 801c6b2:	1171      	asrs	r1, r6, #5
 801c6b4:	2201      	movs	r2, #1
 801c6b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c6ba:	f006 061f 	and.w	r6, r6, #31
 801c6be:	fa02 f606 	lsl.w	r6, r2, r6
 801c6c2:	421e      	tst	r6, r3
 801c6c4:	bf18      	it	ne
 801c6c6:	4617      	movne	r7, r2
 801c6c8:	f047 0720 	orr.w	r7, r7, #32
 801c6cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c6ce:	601c      	str	r4, [r3, #0]
 801c6d0:	9b04      	ldr	r3, [sp, #16]
 801c6d2:	601d      	str	r5, [r3, #0]
 801c6d4:	e695      	b.n	801c402 <__gethex+0x12a>
 801c6d6:	4299      	cmp	r1, r3
 801c6d8:	f843 cc04 	str.w	ip, [r3, #-4]
 801c6dc:	d8d8      	bhi.n	801c690 <__gethex+0x3b8>
 801c6de:	68a3      	ldr	r3, [r4, #8]
 801c6e0:	459b      	cmp	fp, r3
 801c6e2:	db19      	blt.n	801c718 <__gethex+0x440>
 801c6e4:	6861      	ldr	r1, [r4, #4]
 801c6e6:	ee18 0a10 	vmov	r0, s16
 801c6ea:	3101      	adds	r1, #1
 801c6ec:	f000 f91a 	bl	801c924 <_Balloc>
 801c6f0:	4681      	mov	r9, r0
 801c6f2:	b918      	cbnz	r0, 801c6fc <__gethex+0x424>
 801c6f4:	4b1a      	ldr	r3, [pc, #104]	; (801c760 <__gethex+0x488>)
 801c6f6:	4602      	mov	r2, r0
 801c6f8:	2184      	movs	r1, #132	; 0x84
 801c6fa:	e6a8      	b.n	801c44e <__gethex+0x176>
 801c6fc:	6922      	ldr	r2, [r4, #16]
 801c6fe:	3202      	adds	r2, #2
 801c700:	f104 010c 	add.w	r1, r4, #12
 801c704:	0092      	lsls	r2, r2, #2
 801c706:	300c      	adds	r0, #12
 801c708:	f7fd f98a 	bl	8019a20 <memcpy>
 801c70c:	4621      	mov	r1, r4
 801c70e:	ee18 0a10 	vmov	r0, s16
 801c712:	f000 f947 	bl	801c9a4 <_Bfree>
 801c716:	464c      	mov	r4, r9
 801c718:	6923      	ldr	r3, [r4, #16]
 801c71a:	1c5a      	adds	r2, r3, #1
 801c71c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c720:	6122      	str	r2, [r4, #16]
 801c722:	2201      	movs	r2, #1
 801c724:	615a      	str	r2, [r3, #20]
 801c726:	e7bb      	b.n	801c6a0 <__gethex+0x3c8>
 801c728:	6922      	ldr	r2, [r4, #16]
 801c72a:	455a      	cmp	r2, fp
 801c72c:	dd0b      	ble.n	801c746 <__gethex+0x46e>
 801c72e:	2101      	movs	r1, #1
 801c730:	4620      	mov	r0, r4
 801c732:	f7ff fd69 	bl	801c208 <rshift>
 801c736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c73a:	3501      	adds	r5, #1
 801c73c:	42ab      	cmp	r3, r5
 801c73e:	f6ff aed0 	blt.w	801c4e2 <__gethex+0x20a>
 801c742:	2701      	movs	r7, #1
 801c744:	e7c0      	b.n	801c6c8 <__gethex+0x3f0>
 801c746:	f016 061f 	ands.w	r6, r6, #31
 801c74a:	d0fa      	beq.n	801c742 <__gethex+0x46a>
 801c74c:	449a      	add	sl, r3
 801c74e:	f1c6 0620 	rsb	r6, r6, #32
 801c752:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801c756:	f000 f9db 	bl	801cb10 <__hi0bits>
 801c75a:	42b0      	cmp	r0, r6
 801c75c:	dbe7      	blt.n	801c72e <__gethex+0x456>
 801c75e:	e7f0      	b.n	801c742 <__gethex+0x46a>
 801c760:	080214bc 	.word	0x080214bc

0801c764 <L_shift>:
 801c764:	f1c2 0208 	rsb	r2, r2, #8
 801c768:	0092      	lsls	r2, r2, #2
 801c76a:	b570      	push	{r4, r5, r6, lr}
 801c76c:	f1c2 0620 	rsb	r6, r2, #32
 801c770:	6843      	ldr	r3, [r0, #4]
 801c772:	6804      	ldr	r4, [r0, #0]
 801c774:	fa03 f506 	lsl.w	r5, r3, r6
 801c778:	432c      	orrs	r4, r5
 801c77a:	40d3      	lsrs	r3, r2
 801c77c:	6004      	str	r4, [r0, #0]
 801c77e:	f840 3f04 	str.w	r3, [r0, #4]!
 801c782:	4288      	cmp	r0, r1
 801c784:	d3f4      	bcc.n	801c770 <L_shift+0xc>
 801c786:	bd70      	pop	{r4, r5, r6, pc}

0801c788 <__match>:
 801c788:	b530      	push	{r4, r5, lr}
 801c78a:	6803      	ldr	r3, [r0, #0]
 801c78c:	3301      	adds	r3, #1
 801c78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c792:	b914      	cbnz	r4, 801c79a <__match+0x12>
 801c794:	6003      	str	r3, [r0, #0]
 801c796:	2001      	movs	r0, #1
 801c798:	bd30      	pop	{r4, r5, pc}
 801c79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c79e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c7a2:	2d19      	cmp	r5, #25
 801c7a4:	bf98      	it	ls
 801c7a6:	3220      	addls	r2, #32
 801c7a8:	42a2      	cmp	r2, r4
 801c7aa:	d0f0      	beq.n	801c78e <__match+0x6>
 801c7ac:	2000      	movs	r0, #0
 801c7ae:	e7f3      	b.n	801c798 <__match+0x10>

0801c7b0 <__hexnan>:
 801c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b4:	680b      	ldr	r3, [r1, #0]
 801c7b6:	6801      	ldr	r1, [r0, #0]
 801c7b8:	115e      	asrs	r6, r3, #5
 801c7ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c7be:	f013 031f 	ands.w	r3, r3, #31
 801c7c2:	b087      	sub	sp, #28
 801c7c4:	bf18      	it	ne
 801c7c6:	3604      	addne	r6, #4
 801c7c8:	2500      	movs	r5, #0
 801c7ca:	1f37      	subs	r7, r6, #4
 801c7cc:	4682      	mov	sl, r0
 801c7ce:	4690      	mov	r8, r2
 801c7d0:	9301      	str	r3, [sp, #4]
 801c7d2:	f846 5c04 	str.w	r5, [r6, #-4]
 801c7d6:	46b9      	mov	r9, r7
 801c7d8:	463c      	mov	r4, r7
 801c7da:	9502      	str	r5, [sp, #8]
 801c7dc:	46ab      	mov	fp, r5
 801c7de:	784a      	ldrb	r2, [r1, #1]
 801c7e0:	1c4b      	adds	r3, r1, #1
 801c7e2:	9303      	str	r3, [sp, #12]
 801c7e4:	b342      	cbz	r2, 801c838 <__hexnan+0x88>
 801c7e6:	4610      	mov	r0, r2
 801c7e8:	9105      	str	r1, [sp, #20]
 801c7ea:	9204      	str	r2, [sp, #16]
 801c7ec:	f7ff fd5e 	bl	801c2ac <__hexdig_fun>
 801c7f0:	2800      	cmp	r0, #0
 801c7f2:	d14f      	bne.n	801c894 <__hexnan+0xe4>
 801c7f4:	9a04      	ldr	r2, [sp, #16]
 801c7f6:	9905      	ldr	r1, [sp, #20]
 801c7f8:	2a20      	cmp	r2, #32
 801c7fa:	d818      	bhi.n	801c82e <__hexnan+0x7e>
 801c7fc:	9b02      	ldr	r3, [sp, #8]
 801c7fe:	459b      	cmp	fp, r3
 801c800:	dd13      	ble.n	801c82a <__hexnan+0x7a>
 801c802:	454c      	cmp	r4, r9
 801c804:	d206      	bcs.n	801c814 <__hexnan+0x64>
 801c806:	2d07      	cmp	r5, #7
 801c808:	dc04      	bgt.n	801c814 <__hexnan+0x64>
 801c80a:	462a      	mov	r2, r5
 801c80c:	4649      	mov	r1, r9
 801c80e:	4620      	mov	r0, r4
 801c810:	f7ff ffa8 	bl	801c764 <L_shift>
 801c814:	4544      	cmp	r4, r8
 801c816:	d950      	bls.n	801c8ba <__hexnan+0x10a>
 801c818:	2300      	movs	r3, #0
 801c81a:	f1a4 0904 	sub.w	r9, r4, #4
 801c81e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c822:	f8cd b008 	str.w	fp, [sp, #8]
 801c826:	464c      	mov	r4, r9
 801c828:	461d      	mov	r5, r3
 801c82a:	9903      	ldr	r1, [sp, #12]
 801c82c:	e7d7      	b.n	801c7de <__hexnan+0x2e>
 801c82e:	2a29      	cmp	r2, #41	; 0x29
 801c830:	d156      	bne.n	801c8e0 <__hexnan+0x130>
 801c832:	3102      	adds	r1, #2
 801c834:	f8ca 1000 	str.w	r1, [sl]
 801c838:	f1bb 0f00 	cmp.w	fp, #0
 801c83c:	d050      	beq.n	801c8e0 <__hexnan+0x130>
 801c83e:	454c      	cmp	r4, r9
 801c840:	d206      	bcs.n	801c850 <__hexnan+0xa0>
 801c842:	2d07      	cmp	r5, #7
 801c844:	dc04      	bgt.n	801c850 <__hexnan+0xa0>
 801c846:	462a      	mov	r2, r5
 801c848:	4649      	mov	r1, r9
 801c84a:	4620      	mov	r0, r4
 801c84c:	f7ff ff8a 	bl	801c764 <L_shift>
 801c850:	4544      	cmp	r4, r8
 801c852:	d934      	bls.n	801c8be <__hexnan+0x10e>
 801c854:	f1a8 0204 	sub.w	r2, r8, #4
 801c858:	4623      	mov	r3, r4
 801c85a:	f853 1b04 	ldr.w	r1, [r3], #4
 801c85e:	f842 1f04 	str.w	r1, [r2, #4]!
 801c862:	429f      	cmp	r7, r3
 801c864:	d2f9      	bcs.n	801c85a <__hexnan+0xaa>
 801c866:	1b3b      	subs	r3, r7, r4
 801c868:	f023 0303 	bic.w	r3, r3, #3
 801c86c:	3304      	adds	r3, #4
 801c86e:	3401      	adds	r4, #1
 801c870:	3e03      	subs	r6, #3
 801c872:	42b4      	cmp	r4, r6
 801c874:	bf88      	it	hi
 801c876:	2304      	movhi	r3, #4
 801c878:	4443      	add	r3, r8
 801c87a:	2200      	movs	r2, #0
 801c87c:	f843 2b04 	str.w	r2, [r3], #4
 801c880:	429f      	cmp	r7, r3
 801c882:	d2fb      	bcs.n	801c87c <__hexnan+0xcc>
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	b91b      	cbnz	r3, 801c890 <__hexnan+0xe0>
 801c888:	4547      	cmp	r7, r8
 801c88a:	d127      	bne.n	801c8dc <__hexnan+0x12c>
 801c88c:	2301      	movs	r3, #1
 801c88e:	603b      	str	r3, [r7, #0]
 801c890:	2005      	movs	r0, #5
 801c892:	e026      	b.n	801c8e2 <__hexnan+0x132>
 801c894:	3501      	adds	r5, #1
 801c896:	2d08      	cmp	r5, #8
 801c898:	f10b 0b01 	add.w	fp, fp, #1
 801c89c:	dd06      	ble.n	801c8ac <__hexnan+0xfc>
 801c89e:	4544      	cmp	r4, r8
 801c8a0:	d9c3      	bls.n	801c82a <__hexnan+0x7a>
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	f844 3c04 	str.w	r3, [r4, #-4]
 801c8a8:	2501      	movs	r5, #1
 801c8aa:	3c04      	subs	r4, #4
 801c8ac:	6822      	ldr	r2, [r4, #0]
 801c8ae:	f000 000f 	and.w	r0, r0, #15
 801c8b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c8b6:	6022      	str	r2, [r4, #0]
 801c8b8:	e7b7      	b.n	801c82a <__hexnan+0x7a>
 801c8ba:	2508      	movs	r5, #8
 801c8bc:	e7b5      	b.n	801c82a <__hexnan+0x7a>
 801c8be:	9b01      	ldr	r3, [sp, #4]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d0df      	beq.n	801c884 <__hexnan+0xd4>
 801c8c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c8c8:	f1c3 0320 	rsb	r3, r3, #32
 801c8cc:	fa22 f303 	lsr.w	r3, r2, r3
 801c8d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c8d4:	401a      	ands	r2, r3
 801c8d6:	f846 2c04 	str.w	r2, [r6, #-4]
 801c8da:	e7d3      	b.n	801c884 <__hexnan+0xd4>
 801c8dc:	3f04      	subs	r7, #4
 801c8de:	e7d1      	b.n	801c884 <__hexnan+0xd4>
 801c8e0:	2004      	movs	r0, #4
 801c8e2:	b007      	add	sp, #28
 801c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8e8 <_localeconv_r>:
 801c8e8:	4800      	ldr	r0, [pc, #0]	; (801c8ec <_localeconv_r+0x4>)
 801c8ea:	4770      	bx	lr
 801c8ec:	200003dc 	.word	0x200003dc

0801c8f0 <malloc>:
 801c8f0:	4b02      	ldr	r3, [pc, #8]	; (801c8fc <malloc+0xc>)
 801c8f2:	4601      	mov	r1, r0
 801c8f4:	6818      	ldr	r0, [r3, #0]
 801c8f6:	f000 bd2f 	b.w	801d358 <_malloc_r>
 801c8fa:	bf00      	nop
 801c8fc:	20000284 	.word	0x20000284

0801c900 <__ascii_mbtowc>:
 801c900:	b082      	sub	sp, #8
 801c902:	b901      	cbnz	r1, 801c906 <__ascii_mbtowc+0x6>
 801c904:	a901      	add	r1, sp, #4
 801c906:	b142      	cbz	r2, 801c91a <__ascii_mbtowc+0x1a>
 801c908:	b14b      	cbz	r3, 801c91e <__ascii_mbtowc+0x1e>
 801c90a:	7813      	ldrb	r3, [r2, #0]
 801c90c:	600b      	str	r3, [r1, #0]
 801c90e:	7812      	ldrb	r2, [r2, #0]
 801c910:	1e10      	subs	r0, r2, #0
 801c912:	bf18      	it	ne
 801c914:	2001      	movne	r0, #1
 801c916:	b002      	add	sp, #8
 801c918:	4770      	bx	lr
 801c91a:	4610      	mov	r0, r2
 801c91c:	e7fb      	b.n	801c916 <__ascii_mbtowc+0x16>
 801c91e:	f06f 0001 	mvn.w	r0, #1
 801c922:	e7f8      	b.n	801c916 <__ascii_mbtowc+0x16>

0801c924 <_Balloc>:
 801c924:	b570      	push	{r4, r5, r6, lr}
 801c926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c928:	4604      	mov	r4, r0
 801c92a:	460d      	mov	r5, r1
 801c92c:	b976      	cbnz	r6, 801c94c <_Balloc+0x28>
 801c92e:	2010      	movs	r0, #16
 801c930:	f7ff ffde 	bl	801c8f0 <malloc>
 801c934:	4602      	mov	r2, r0
 801c936:	6260      	str	r0, [r4, #36]	; 0x24
 801c938:	b920      	cbnz	r0, 801c944 <_Balloc+0x20>
 801c93a:	4b18      	ldr	r3, [pc, #96]	; (801c99c <_Balloc+0x78>)
 801c93c:	4818      	ldr	r0, [pc, #96]	; (801c9a0 <_Balloc+0x7c>)
 801c93e:	2166      	movs	r1, #102	; 0x66
 801c940:	f000 fee8 	bl	801d714 <__assert_func>
 801c944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c948:	6006      	str	r6, [r0, #0]
 801c94a:	60c6      	str	r6, [r0, #12]
 801c94c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c94e:	68f3      	ldr	r3, [r6, #12]
 801c950:	b183      	cbz	r3, 801c974 <_Balloc+0x50>
 801c952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c954:	68db      	ldr	r3, [r3, #12]
 801c956:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c95a:	b9b8      	cbnz	r0, 801c98c <_Balloc+0x68>
 801c95c:	2101      	movs	r1, #1
 801c95e:	fa01 f605 	lsl.w	r6, r1, r5
 801c962:	1d72      	adds	r2, r6, #5
 801c964:	0092      	lsls	r2, r2, #2
 801c966:	4620      	mov	r0, r4
 801c968:	f000 fc97 	bl	801d29a <_calloc_r>
 801c96c:	b160      	cbz	r0, 801c988 <_Balloc+0x64>
 801c96e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c972:	e00e      	b.n	801c992 <_Balloc+0x6e>
 801c974:	2221      	movs	r2, #33	; 0x21
 801c976:	2104      	movs	r1, #4
 801c978:	4620      	mov	r0, r4
 801c97a:	f000 fc8e 	bl	801d29a <_calloc_r>
 801c97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c980:	60f0      	str	r0, [r6, #12]
 801c982:	68db      	ldr	r3, [r3, #12]
 801c984:	2b00      	cmp	r3, #0
 801c986:	d1e4      	bne.n	801c952 <_Balloc+0x2e>
 801c988:	2000      	movs	r0, #0
 801c98a:	bd70      	pop	{r4, r5, r6, pc}
 801c98c:	6802      	ldr	r2, [r0, #0]
 801c98e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c992:	2300      	movs	r3, #0
 801c994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c998:	e7f7      	b.n	801c98a <_Balloc+0x66>
 801c99a:	bf00      	nop
 801c99c:	08021446 	.word	0x08021446
 801c9a0:	0802154c 	.word	0x0802154c

0801c9a4 <_Bfree>:
 801c9a4:	b570      	push	{r4, r5, r6, lr}
 801c9a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c9a8:	4605      	mov	r5, r0
 801c9aa:	460c      	mov	r4, r1
 801c9ac:	b976      	cbnz	r6, 801c9cc <_Bfree+0x28>
 801c9ae:	2010      	movs	r0, #16
 801c9b0:	f7ff ff9e 	bl	801c8f0 <malloc>
 801c9b4:	4602      	mov	r2, r0
 801c9b6:	6268      	str	r0, [r5, #36]	; 0x24
 801c9b8:	b920      	cbnz	r0, 801c9c4 <_Bfree+0x20>
 801c9ba:	4b09      	ldr	r3, [pc, #36]	; (801c9e0 <_Bfree+0x3c>)
 801c9bc:	4809      	ldr	r0, [pc, #36]	; (801c9e4 <_Bfree+0x40>)
 801c9be:	218a      	movs	r1, #138	; 0x8a
 801c9c0:	f000 fea8 	bl	801d714 <__assert_func>
 801c9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9c8:	6006      	str	r6, [r0, #0]
 801c9ca:	60c6      	str	r6, [r0, #12]
 801c9cc:	b13c      	cbz	r4, 801c9de <_Bfree+0x3a>
 801c9ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c9d0:	6862      	ldr	r2, [r4, #4]
 801c9d2:	68db      	ldr	r3, [r3, #12]
 801c9d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c9d8:	6021      	str	r1, [r4, #0]
 801c9da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c9de:	bd70      	pop	{r4, r5, r6, pc}
 801c9e0:	08021446 	.word	0x08021446
 801c9e4:	0802154c 	.word	0x0802154c

0801c9e8 <__multadd>:
 801c9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9ec:	690e      	ldr	r6, [r1, #16]
 801c9ee:	4607      	mov	r7, r0
 801c9f0:	4698      	mov	r8, r3
 801c9f2:	460c      	mov	r4, r1
 801c9f4:	f101 0014 	add.w	r0, r1, #20
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	6805      	ldr	r5, [r0, #0]
 801c9fc:	b2a9      	uxth	r1, r5
 801c9fe:	fb02 8101 	mla	r1, r2, r1, r8
 801ca02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801ca06:	0c2d      	lsrs	r5, r5, #16
 801ca08:	fb02 c505 	mla	r5, r2, r5, ip
 801ca0c:	b289      	uxth	r1, r1
 801ca0e:	3301      	adds	r3, #1
 801ca10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801ca14:	429e      	cmp	r6, r3
 801ca16:	f840 1b04 	str.w	r1, [r0], #4
 801ca1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801ca1e:	dcec      	bgt.n	801c9fa <__multadd+0x12>
 801ca20:	f1b8 0f00 	cmp.w	r8, #0
 801ca24:	d022      	beq.n	801ca6c <__multadd+0x84>
 801ca26:	68a3      	ldr	r3, [r4, #8]
 801ca28:	42b3      	cmp	r3, r6
 801ca2a:	dc19      	bgt.n	801ca60 <__multadd+0x78>
 801ca2c:	6861      	ldr	r1, [r4, #4]
 801ca2e:	4638      	mov	r0, r7
 801ca30:	3101      	adds	r1, #1
 801ca32:	f7ff ff77 	bl	801c924 <_Balloc>
 801ca36:	4605      	mov	r5, r0
 801ca38:	b928      	cbnz	r0, 801ca46 <__multadd+0x5e>
 801ca3a:	4602      	mov	r2, r0
 801ca3c:	4b0d      	ldr	r3, [pc, #52]	; (801ca74 <__multadd+0x8c>)
 801ca3e:	480e      	ldr	r0, [pc, #56]	; (801ca78 <__multadd+0x90>)
 801ca40:	21b5      	movs	r1, #181	; 0xb5
 801ca42:	f000 fe67 	bl	801d714 <__assert_func>
 801ca46:	6922      	ldr	r2, [r4, #16]
 801ca48:	3202      	adds	r2, #2
 801ca4a:	f104 010c 	add.w	r1, r4, #12
 801ca4e:	0092      	lsls	r2, r2, #2
 801ca50:	300c      	adds	r0, #12
 801ca52:	f7fc ffe5 	bl	8019a20 <memcpy>
 801ca56:	4621      	mov	r1, r4
 801ca58:	4638      	mov	r0, r7
 801ca5a:	f7ff ffa3 	bl	801c9a4 <_Bfree>
 801ca5e:	462c      	mov	r4, r5
 801ca60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ca64:	3601      	adds	r6, #1
 801ca66:	f8c3 8014 	str.w	r8, [r3, #20]
 801ca6a:	6126      	str	r6, [r4, #16]
 801ca6c:	4620      	mov	r0, r4
 801ca6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca72:	bf00      	nop
 801ca74:	080214bc 	.word	0x080214bc
 801ca78:	0802154c 	.word	0x0802154c

0801ca7c <__s2b>:
 801ca7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca80:	460c      	mov	r4, r1
 801ca82:	4615      	mov	r5, r2
 801ca84:	461f      	mov	r7, r3
 801ca86:	2209      	movs	r2, #9
 801ca88:	3308      	adds	r3, #8
 801ca8a:	4606      	mov	r6, r0
 801ca8c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ca90:	2100      	movs	r1, #0
 801ca92:	2201      	movs	r2, #1
 801ca94:	429a      	cmp	r2, r3
 801ca96:	db09      	blt.n	801caac <__s2b+0x30>
 801ca98:	4630      	mov	r0, r6
 801ca9a:	f7ff ff43 	bl	801c924 <_Balloc>
 801ca9e:	b940      	cbnz	r0, 801cab2 <__s2b+0x36>
 801caa0:	4602      	mov	r2, r0
 801caa2:	4b19      	ldr	r3, [pc, #100]	; (801cb08 <__s2b+0x8c>)
 801caa4:	4819      	ldr	r0, [pc, #100]	; (801cb0c <__s2b+0x90>)
 801caa6:	21ce      	movs	r1, #206	; 0xce
 801caa8:	f000 fe34 	bl	801d714 <__assert_func>
 801caac:	0052      	lsls	r2, r2, #1
 801caae:	3101      	adds	r1, #1
 801cab0:	e7f0      	b.n	801ca94 <__s2b+0x18>
 801cab2:	9b08      	ldr	r3, [sp, #32]
 801cab4:	6143      	str	r3, [r0, #20]
 801cab6:	2d09      	cmp	r5, #9
 801cab8:	f04f 0301 	mov.w	r3, #1
 801cabc:	6103      	str	r3, [r0, #16]
 801cabe:	dd16      	ble.n	801caee <__s2b+0x72>
 801cac0:	f104 0909 	add.w	r9, r4, #9
 801cac4:	46c8      	mov	r8, r9
 801cac6:	442c      	add	r4, r5
 801cac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cacc:	4601      	mov	r1, r0
 801cace:	3b30      	subs	r3, #48	; 0x30
 801cad0:	220a      	movs	r2, #10
 801cad2:	4630      	mov	r0, r6
 801cad4:	f7ff ff88 	bl	801c9e8 <__multadd>
 801cad8:	45a0      	cmp	r8, r4
 801cada:	d1f5      	bne.n	801cac8 <__s2b+0x4c>
 801cadc:	f1a5 0408 	sub.w	r4, r5, #8
 801cae0:	444c      	add	r4, r9
 801cae2:	1b2d      	subs	r5, r5, r4
 801cae4:	1963      	adds	r3, r4, r5
 801cae6:	42bb      	cmp	r3, r7
 801cae8:	db04      	blt.n	801caf4 <__s2b+0x78>
 801caea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801caee:	340a      	adds	r4, #10
 801caf0:	2509      	movs	r5, #9
 801caf2:	e7f6      	b.n	801cae2 <__s2b+0x66>
 801caf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801caf8:	4601      	mov	r1, r0
 801cafa:	3b30      	subs	r3, #48	; 0x30
 801cafc:	220a      	movs	r2, #10
 801cafe:	4630      	mov	r0, r6
 801cb00:	f7ff ff72 	bl	801c9e8 <__multadd>
 801cb04:	e7ee      	b.n	801cae4 <__s2b+0x68>
 801cb06:	bf00      	nop
 801cb08:	080214bc 	.word	0x080214bc
 801cb0c:	0802154c 	.word	0x0802154c

0801cb10 <__hi0bits>:
 801cb10:	0c03      	lsrs	r3, r0, #16
 801cb12:	041b      	lsls	r3, r3, #16
 801cb14:	b9d3      	cbnz	r3, 801cb4c <__hi0bits+0x3c>
 801cb16:	0400      	lsls	r0, r0, #16
 801cb18:	2310      	movs	r3, #16
 801cb1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cb1e:	bf04      	itt	eq
 801cb20:	0200      	lsleq	r0, r0, #8
 801cb22:	3308      	addeq	r3, #8
 801cb24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cb28:	bf04      	itt	eq
 801cb2a:	0100      	lsleq	r0, r0, #4
 801cb2c:	3304      	addeq	r3, #4
 801cb2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cb32:	bf04      	itt	eq
 801cb34:	0080      	lsleq	r0, r0, #2
 801cb36:	3302      	addeq	r3, #2
 801cb38:	2800      	cmp	r0, #0
 801cb3a:	db05      	blt.n	801cb48 <__hi0bits+0x38>
 801cb3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cb40:	f103 0301 	add.w	r3, r3, #1
 801cb44:	bf08      	it	eq
 801cb46:	2320      	moveq	r3, #32
 801cb48:	4618      	mov	r0, r3
 801cb4a:	4770      	bx	lr
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	e7e4      	b.n	801cb1a <__hi0bits+0xa>

0801cb50 <__lo0bits>:
 801cb50:	6803      	ldr	r3, [r0, #0]
 801cb52:	f013 0207 	ands.w	r2, r3, #7
 801cb56:	4601      	mov	r1, r0
 801cb58:	d00b      	beq.n	801cb72 <__lo0bits+0x22>
 801cb5a:	07da      	lsls	r2, r3, #31
 801cb5c:	d424      	bmi.n	801cba8 <__lo0bits+0x58>
 801cb5e:	0798      	lsls	r0, r3, #30
 801cb60:	bf49      	itett	mi
 801cb62:	085b      	lsrmi	r3, r3, #1
 801cb64:	089b      	lsrpl	r3, r3, #2
 801cb66:	2001      	movmi	r0, #1
 801cb68:	600b      	strmi	r3, [r1, #0]
 801cb6a:	bf5c      	itt	pl
 801cb6c:	600b      	strpl	r3, [r1, #0]
 801cb6e:	2002      	movpl	r0, #2
 801cb70:	4770      	bx	lr
 801cb72:	b298      	uxth	r0, r3
 801cb74:	b9b0      	cbnz	r0, 801cba4 <__lo0bits+0x54>
 801cb76:	0c1b      	lsrs	r3, r3, #16
 801cb78:	2010      	movs	r0, #16
 801cb7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801cb7e:	bf04      	itt	eq
 801cb80:	0a1b      	lsreq	r3, r3, #8
 801cb82:	3008      	addeq	r0, #8
 801cb84:	071a      	lsls	r2, r3, #28
 801cb86:	bf04      	itt	eq
 801cb88:	091b      	lsreq	r3, r3, #4
 801cb8a:	3004      	addeq	r0, #4
 801cb8c:	079a      	lsls	r2, r3, #30
 801cb8e:	bf04      	itt	eq
 801cb90:	089b      	lsreq	r3, r3, #2
 801cb92:	3002      	addeq	r0, #2
 801cb94:	07da      	lsls	r2, r3, #31
 801cb96:	d403      	bmi.n	801cba0 <__lo0bits+0x50>
 801cb98:	085b      	lsrs	r3, r3, #1
 801cb9a:	f100 0001 	add.w	r0, r0, #1
 801cb9e:	d005      	beq.n	801cbac <__lo0bits+0x5c>
 801cba0:	600b      	str	r3, [r1, #0]
 801cba2:	4770      	bx	lr
 801cba4:	4610      	mov	r0, r2
 801cba6:	e7e8      	b.n	801cb7a <__lo0bits+0x2a>
 801cba8:	2000      	movs	r0, #0
 801cbaa:	4770      	bx	lr
 801cbac:	2020      	movs	r0, #32
 801cbae:	4770      	bx	lr

0801cbb0 <__i2b>:
 801cbb0:	b510      	push	{r4, lr}
 801cbb2:	460c      	mov	r4, r1
 801cbb4:	2101      	movs	r1, #1
 801cbb6:	f7ff feb5 	bl	801c924 <_Balloc>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	b928      	cbnz	r0, 801cbca <__i2b+0x1a>
 801cbbe:	4b05      	ldr	r3, [pc, #20]	; (801cbd4 <__i2b+0x24>)
 801cbc0:	4805      	ldr	r0, [pc, #20]	; (801cbd8 <__i2b+0x28>)
 801cbc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cbc6:	f000 fda5 	bl	801d714 <__assert_func>
 801cbca:	2301      	movs	r3, #1
 801cbcc:	6144      	str	r4, [r0, #20]
 801cbce:	6103      	str	r3, [r0, #16]
 801cbd0:	bd10      	pop	{r4, pc}
 801cbd2:	bf00      	nop
 801cbd4:	080214bc 	.word	0x080214bc
 801cbd8:	0802154c 	.word	0x0802154c

0801cbdc <__multiply>:
 801cbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbe0:	4614      	mov	r4, r2
 801cbe2:	690a      	ldr	r2, [r1, #16]
 801cbe4:	6923      	ldr	r3, [r4, #16]
 801cbe6:	429a      	cmp	r2, r3
 801cbe8:	bfb8      	it	lt
 801cbea:	460b      	movlt	r3, r1
 801cbec:	460d      	mov	r5, r1
 801cbee:	bfbc      	itt	lt
 801cbf0:	4625      	movlt	r5, r4
 801cbf2:	461c      	movlt	r4, r3
 801cbf4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801cbf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cbfc:	68ab      	ldr	r3, [r5, #8]
 801cbfe:	6869      	ldr	r1, [r5, #4]
 801cc00:	eb0a 0709 	add.w	r7, sl, r9
 801cc04:	42bb      	cmp	r3, r7
 801cc06:	b085      	sub	sp, #20
 801cc08:	bfb8      	it	lt
 801cc0a:	3101      	addlt	r1, #1
 801cc0c:	f7ff fe8a 	bl	801c924 <_Balloc>
 801cc10:	b930      	cbnz	r0, 801cc20 <__multiply+0x44>
 801cc12:	4602      	mov	r2, r0
 801cc14:	4b42      	ldr	r3, [pc, #264]	; (801cd20 <__multiply+0x144>)
 801cc16:	4843      	ldr	r0, [pc, #268]	; (801cd24 <__multiply+0x148>)
 801cc18:	f240 115d 	movw	r1, #349	; 0x15d
 801cc1c:	f000 fd7a 	bl	801d714 <__assert_func>
 801cc20:	f100 0614 	add.w	r6, r0, #20
 801cc24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801cc28:	4633      	mov	r3, r6
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	4543      	cmp	r3, r8
 801cc2e:	d31e      	bcc.n	801cc6e <__multiply+0x92>
 801cc30:	f105 0c14 	add.w	ip, r5, #20
 801cc34:	f104 0314 	add.w	r3, r4, #20
 801cc38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801cc3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801cc40:	9202      	str	r2, [sp, #8]
 801cc42:	ebac 0205 	sub.w	r2, ip, r5
 801cc46:	3a15      	subs	r2, #21
 801cc48:	f022 0203 	bic.w	r2, r2, #3
 801cc4c:	3204      	adds	r2, #4
 801cc4e:	f105 0115 	add.w	r1, r5, #21
 801cc52:	458c      	cmp	ip, r1
 801cc54:	bf38      	it	cc
 801cc56:	2204      	movcc	r2, #4
 801cc58:	9201      	str	r2, [sp, #4]
 801cc5a:	9a02      	ldr	r2, [sp, #8]
 801cc5c:	9303      	str	r3, [sp, #12]
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d808      	bhi.n	801cc74 <__multiply+0x98>
 801cc62:	2f00      	cmp	r7, #0
 801cc64:	dc55      	bgt.n	801cd12 <__multiply+0x136>
 801cc66:	6107      	str	r7, [r0, #16]
 801cc68:	b005      	add	sp, #20
 801cc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc6e:	f843 2b04 	str.w	r2, [r3], #4
 801cc72:	e7db      	b.n	801cc2c <__multiply+0x50>
 801cc74:	f8b3 a000 	ldrh.w	sl, [r3]
 801cc78:	f1ba 0f00 	cmp.w	sl, #0
 801cc7c:	d020      	beq.n	801ccc0 <__multiply+0xe4>
 801cc7e:	f105 0e14 	add.w	lr, r5, #20
 801cc82:	46b1      	mov	r9, r6
 801cc84:	2200      	movs	r2, #0
 801cc86:	f85e 4b04 	ldr.w	r4, [lr], #4
 801cc8a:	f8d9 b000 	ldr.w	fp, [r9]
 801cc8e:	b2a1      	uxth	r1, r4
 801cc90:	fa1f fb8b 	uxth.w	fp, fp
 801cc94:	fb0a b101 	mla	r1, sl, r1, fp
 801cc98:	4411      	add	r1, r2
 801cc9a:	f8d9 2000 	ldr.w	r2, [r9]
 801cc9e:	0c24      	lsrs	r4, r4, #16
 801cca0:	0c12      	lsrs	r2, r2, #16
 801cca2:	fb0a 2404 	mla	r4, sl, r4, r2
 801cca6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801ccaa:	b289      	uxth	r1, r1
 801ccac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ccb0:	45f4      	cmp	ip, lr
 801ccb2:	f849 1b04 	str.w	r1, [r9], #4
 801ccb6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801ccba:	d8e4      	bhi.n	801cc86 <__multiply+0xaa>
 801ccbc:	9901      	ldr	r1, [sp, #4]
 801ccbe:	5072      	str	r2, [r6, r1]
 801ccc0:	9a03      	ldr	r2, [sp, #12]
 801ccc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ccc6:	3304      	adds	r3, #4
 801ccc8:	f1b9 0f00 	cmp.w	r9, #0
 801cccc:	d01f      	beq.n	801cd0e <__multiply+0x132>
 801ccce:	6834      	ldr	r4, [r6, #0]
 801ccd0:	f105 0114 	add.w	r1, r5, #20
 801ccd4:	46b6      	mov	lr, r6
 801ccd6:	f04f 0a00 	mov.w	sl, #0
 801ccda:	880a      	ldrh	r2, [r1, #0]
 801ccdc:	f8be b002 	ldrh.w	fp, [lr, #2]
 801cce0:	fb09 b202 	mla	r2, r9, r2, fp
 801cce4:	4492      	add	sl, r2
 801cce6:	b2a4      	uxth	r4, r4
 801cce8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ccec:	f84e 4b04 	str.w	r4, [lr], #4
 801ccf0:	f851 4b04 	ldr.w	r4, [r1], #4
 801ccf4:	f8be 2000 	ldrh.w	r2, [lr]
 801ccf8:	0c24      	lsrs	r4, r4, #16
 801ccfa:	fb09 2404 	mla	r4, r9, r4, r2
 801ccfe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801cd02:	458c      	cmp	ip, r1
 801cd04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801cd08:	d8e7      	bhi.n	801ccda <__multiply+0xfe>
 801cd0a:	9a01      	ldr	r2, [sp, #4]
 801cd0c:	50b4      	str	r4, [r6, r2]
 801cd0e:	3604      	adds	r6, #4
 801cd10:	e7a3      	b.n	801cc5a <__multiply+0x7e>
 801cd12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d1a5      	bne.n	801cc66 <__multiply+0x8a>
 801cd1a:	3f01      	subs	r7, #1
 801cd1c:	e7a1      	b.n	801cc62 <__multiply+0x86>
 801cd1e:	bf00      	nop
 801cd20:	080214bc 	.word	0x080214bc
 801cd24:	0802154c 	.word	0x0802154c

0801cd28 <__pow5mult>:
 801cd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd2c:	4615      	mov	r5, r2
 801cd2e:	f012 0203 	ands.w	r2, r2, #3
 801cd32:	4606      	mov	r6, r0
 801cd34:	460f      	mov	r7, r1
 801cd36:	d007      	beq.n	801cd48 <__pow5mult+0x20>
 801cd38:	4c25      	ldr	r4, [pc, #148]	; (801cdd0 <__pow5mult+0xa8>)
 801cd3a:	3a01      	subs	r2, #1
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cd42:	f7ff fe51 	bl	801c9e8 <__multadd>
 801cd46:	4607      	mov	r7, r0
 801cd48:	10ad      	asrs	r5, r5, #2
 801cd4a:	d03d      	beq.n	801cdc8 <__pow5mult+0xa0>
 801cd4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cd4e:	b97c      	cbnz	r4, 801cd70 <__pow5mult+0x48>
 801cd50:	2010      	movs	r0, #16
 801cd52:	f7ff fdcd 	bl	801c8f0 <malloc>
 801cd56:	4602      	mov	r2, r0
 801cd58:	6270      	str	r0, [r6, #36]	; 0x24
 801cd5a:	b928      	cbnz	r0, 801cd68 <__pow5mult+0x40>
 801cd5c:	4b1d      	ldr	r3, [pc, #116]	; (801cdd4 <__pow5mult+0xac>)
 801cd5e:	481e      	ldr	r0, [pc, #120]	; (801cdd8 <__pow5mult+0xb0>)
 801cd60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801cd64:	f000 fcd6 	bl	801d714 <__assert_func>
 801cd68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cd6c:	6004      	str	r4, [r0, #0]
 801cd6e:	60c4      	str	r4, [r0, #12]
 801cd70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cd74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cd78:	b94c      	cbnz	r4, 801cd8e <__pow5mult+0x66>
 801cd7a:	f240 2171 	movw	r1, #625	; 0x271
 801cd7e:	4630      	mov	r0, r6
 801cd80:	f7ff ff16 	bl	801cbb0 <__i2b>
 801cd84:	2300      	movs	r3, #0
 801cd86:	f8c8 0008 	str.w	r0, [r8, #8]
 801cd8a:	4604      	mov	r4, r0
 801cd8c:	6003      	str	r3, [r0, #0]
 801cd8e:	f04f 0900 	mov.w	r9, #0
 801cd92:	07eb      	lsls	r3, r5, #31
 801cd94:	d50a      	bpl.n	801cdac <__pow5mult+0x84>
 801cd96:	4639      	mov	r1, r7
 801cd98:	4622      	mov	r2, r4
 801cd9a:	4630      	mov	r0, r6
 801cd9c:	f7ff ff1e 	bl	801cbdc <__multiply>
 801cda0:	4639      	mov	r1, r7
 801cda2:	4680      	mov	r8, r0
 801cda4:	4630      	mov	r0, r6
 801cda6:	f7ff fdfd 	bl	801c9a4 <_Bfree>
 801cdaa:	4647      	mov	r7, r8
 801cdac:	106d      	asrs	r5, r5, #1
 801cdae:	d00b      	beq.n	801cdc8 <__pow5mult+0xa0>
 801cdb0:	6820      	ldr	r0, [r4, #0]
 801cdb2:	b938      	cbnz	r0, 801cdc4 <__pow5mult+0x9c>
 801cdb4:	4622      	mov	r2, r4
 801cdb6:	4621      	mov	r1, r4
 801cdb8:	4630      	mov	r0, r6
 801cdba:	f7ff ff0f 	bl	801cbdc <__multiply>
 801cdbe:	6020      	str	r0, [r4, #0]
 801cdc0:	f8c0 9000 	str.w	r9, [r0]
 801cdc4:	4604      	mov	r4, r0
 801cdc6:	e7e4      	b.n	801cd92 <__pow5mult+0x6a>
 801cdc8:	4638      	mov	r0, r7
 801cdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdce:	bf00      	nop
 801cdd0:	080216a0 	.word	0x080216a0
 801cdd4:	08021446 	.word	0x08021446
 801cdd8:	0802154c 	.word	0x0802154c

0801cddc <__lshift>:
 801cddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cde0:	460c      	mov	r4, r1
 801cde2:	6849      	ldr	r1, [r1, #4]
 801cde4:	6923      	ldr	r3, [r4, #16]
 801cde6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cdea:	68a3      	ldr	r3, [r4, #8]
 801cdec:	4607      	mov	r7, r0
 801cdee:	4691      	mov	r9, r2
 801cdf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cdf4:	f108 0601 	add.w	r6, r8, #1
 801cdf8:	42b3      	cmp	r3, r6
 801cdfa:	db0b      	blt.n	801ce14 <__lshift+0x38>
 801cdfc:	4638      	mov	r0, r7
 801cdfe:	f7ff fd91 	bl	801c924 <_Balloc>
 801ce02:	4605      	mov	r5, r0
 801ce04:	b948      	cbnz	r0, 801ce1a <__lshift+0x3e>
 801ce06:	4602      	mov	r2, r0
 801ce08:	4b28      	ldr	r3, [pc, #160]	; (801ceac <__lshift+0xd0>)
 801ce0a:	4829      	ldr	r0, [pc, #164]	; (801ceb0 <__lshift+0xd4>)
 801ce0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ce10:	f000 fc80 	bl	801d714 <__assert_func>
 801ce14:	3101      	adds	r1, #1
 801ce16:	005b      	lsls	r3, r3, #1
 801ce18:	e7ee      	b.n	801cdf8 <__lshift+0x1c>
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	f100 0114 	add.w	r1, r0, #20
 801ce20:	f100 0210 	add.w	r2, r0, #16
 801ce24:	4618      	mov	r0, r3
 801ce26:	4553      	cmp	r3, sl
 801ce28:	db33      	blt.n	801ce92 <__lshift+0xb6>
 801ce2a:	6920      	ldr	r0, [r4, #16]
 801ce2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ce30:	f104 0314 	add.w	r3, r4, #20
 801ce34:	f019 091f 	ands.w	r9, r9, #31
 801ce38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ce3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ce40:	d02b      	beq.n	801ce9a <__lshift+0xbe>
 801ce42:	f1c9 0e20 	rsb	lr, r9, #32
 801ce46:	468a      	mov	sl, r1
 801ce48:	2200      	movs	r2, #0
 801ce4a:	6818      	ldr	r0, [r3, #0]
 801ce4c:	fa00 f009 	lsl.w	r0, r0, r9
 801ce50:	4302      	orrs	r2, r0
 801ce52:	f84a 2b04 	str.w	r2, [sl], #4
 801ce56:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce5a:	459c      	cmp	ip, r3
 801ce5c:	fa22 f20e 	lsr.w	r2, r2, lr
 801ce60:	d8f3      	bhi.n	801ce4a <__lshift+0x6e>
 801ce62:	ebac 0304 	sub.w	r3, ip, r4
 801ce66:	3b15      	subs	r3, #21
 801ce68:	f023 0303 	bic.w	r3, r3, #3
 801ce6c:	3304      	adds	r3, #4
 801ce6e:	f104 0015 	add.w	r0, r4, #21
 801ce72:	4584      	cmp	ip, r0
 801ce74:	bf38      	it	cc
 801ce76:	2304      	movcc	r3, #4
 801ce78:	50ca      	str	r2, [r1, r3]
 801ce7a:	b10a      	cbz	r2, 801ce80 <__lshift+0xa4>
 801ce7c:	f108 0602 	add.w	r6, r8, #2
 801ce80:	3e01      	subs	r6, #1
 801ce82:	4638      	mov	r0, r7
 801ce84:	612e      	str	r6, [r5, #16]
 801ce86:	4621      	mov	r1, r4
 801ce88:	f7ff fd8c 	bl	801c9a4 <_Bfree>
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce92:	f842 0f04 	str.w	r0, [r2, #4]!
 801ce96:	3301      	adds	r3, #1
 801ce98:	e7c5      	b.n	801ce26 <__lshift+0x4a>
 801ce9a:	3904      	subs	r1, #4
 801ce9c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cea0:	f841 2f04 	str.w	r2, [r1, #4]!
 801cea4:	459c      	cmp	ip, r3
 801cea6:	d8f9      	bhi.n	801ce9c <__lshift+0xc0>
 801cea8:	e7ea      	b.n	801ce80 <__lshift+0xa4>
 801ceaa:	bf00      	nop
 801ceac:	080214bc 	.word	0x080214bc
 801ceb0:	0802154c 	.word	0x0802154c

0801ceb4 <__mcmp>:
 801ceb4:	b530      	push	{r4, r5, lr}
 801ceb6:	6902      	ldr	r2, [r0, #16]
 801ceb8:	690c      	ldr	r4, [r1, #16]
 801ceba:	1b12      	subs	r2, r2, r4
 801cebc:	d10e      	bne.n	801cedc <__mcmp+0x28>
 801cebe:	f100 0314 	add.w	r3, r0, #20
 801cec2:	3114      	adds	r1, #20
 801cec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ced0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ced4:	42a5      	cmp	r5, r4
 801ced6:	d003      	beq.n	801cee0 <__mcmp+0x2c>
 801ced8:	d305      	bcc.n	801cee6 <__mcmp+0x32>
 801ceda:	2201      	movs	r2, #1
 801cedc:	4610      	mov	r0, r2
 801cede:	bd30      	pop	{r4, r5, pc}
 801cee0:	4283      	cmp	r3, r0
 801cee2:	d3f3      	bcc.n	801cecc <__mcmp+0x18>
 801cee4:	e7fa      	b.n	801cedc <__mcmp+0x28>
 801cee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ceea:	e7f7      	b.n	801cedc <__mcmp+0x28>

0801ceec <__mdiff>:
 801ceec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef0:	460c      	mov	r4, r1
 801cef2:	4606      	mov	r6, r0
 801cef4:	4611      	mov	r1, r2
 801cef6:	4620      	mov	r0, r4
 801cef8:	4617      	mov	r7, r2
 801cefa:	f7ff ffdb 	bl	801ceb4 <__mcmp>
 801cefe:	1e05      	subs	r5, r0, #0
 801cf00:	d110      	bne.n	801cf24 <__mdiff+0x38>
 801cf02:	4629      	mov	r1, r5
 801cf04:	4630      	mov	r0, r6
 801cf06:	f7ff fd0d 	bl	801c924 <_Balloc>
 801cf0a:	b930      	cbnz	r0, 801cf1a <__mdiff+0x2e>
 801cf0c:	4b39      	ldr	r3, [pc, #228]	; (801cff4 <__mdiff+0x108>)
 801cf0e:	4602      	mov	r2, r0
 801cf10:	f240 2132 	movw	r1, #562	; 0x232
 801cf14:	4838      	ldr	r0, [pc, #224]	; (801cff8 <__mdiff+0x10c>)
 801cf16:	f000 fbfd 	bl	801d714 <__assert_func>
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cf20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf24:	bfa4      	itt	ge
 801cf26:	463b      	movge	r3, r7
 801cf28:	4627      	movge	r7, r4
 801cf2a:	4630      	mov	r0, r6
 801cf2c:	6879      	ldr	r1, [r7, #4]
 801cf2e:	bfa6      	itte	ge
 801cf30:	461c      	movge	r4, r3
 801cf32:	2500      	movge	r5, #0
 801cf34:	2501      	movlt	r5, #1
 801cf36:	f7ff fcf5 	bl	801c924 <_Balloc>
 801cf3a:	b920      	cbnz	r0, 801cf46 <__mdiff+0x5a>
 801cf3c:	4b2d      	ldr	r3, [pc, #180]	; (801cff4 <__mdiff+0x108>)
 801cf3e:	4602      	mov	r2, r0
 801cf40:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cf44:	e7e6      	b.n	801cf14 <__mdiff+0x28>
 801cf46:	693e      	ldr	r6, [r7, #16]
 801cf48:	60c5      	str	r5, [r0, #12]
 801cf4a:	6925      	ldr	r5, [r4, #16]
 801cf4c:	f107 0114 	add.w	r1, r7, #20
 801cf50:	f104 0914 	add.w	r9, r4, #20
 801cf54:	f100 0e14 	add.w	lr, r0, #20
 801cf58:	f107 0210 	add.w	r2, r7, #16
 801cf5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801cf60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801cf64:	46f2      	mov	sl, lr
 801cf66:	2700      	movs	r7, #0
 801cf68:	f859 3b04 	ldr.w	r3, [r9], #4
 801cf6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cf70:	fa1f f883 	uxth.w	r8, r3
 801cf74:	fa17 f78b 	uxtah	r7, r7, fp
 801cf78:	0c1b      	lsrs	r3, r3, #16
 801cf7a:	eba7 0808 	sub.w	r8, r7, r8
 801cf7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cf82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cf86:	fa1f f888 	uxth.w	r8, r8
 801cf8a:	141f      	asrs	r7, r3, #16
 801cf8c:	454d      	cmp	r5, r9
 801cf8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cf92:	f84a 3b04 	str.w	r3, [sl], #4
 801cf96:	d8e7      	bhi.n	801cf68 <__mdiff+0x7c>
 801cf98:	1b2b      	subs	r3, r5, r4
 801cf9a:	3b15      	subs	r3, #21
 801cf9c:	f023 0303 	bic.w	r3, r3, #3
 801cfa0:	3304      	adds	r3, #4
 801cfa2:	3415      	adds	r4, #21
 801cfa4:	42a5      	cmp	r5, r4
 801cfa6:	bf38      	it	cc
 801cfa8:	2304      	movcc	r3, #4
 801cfaa:	4419      	add	r1, r3
 801cfac:	4473      	add	r3, lr
 801cfae:	469e      	mov	lr, r3
 801cfb0:	460d      	mov	r5, r1
 801cfb2:	4565      	cmp	r5, ip
 801cfb4:	d30e      	bcc.n	801cfd4 <__mdiff+0xe8>
 801cfb6:	f10c 0203 	add.w	r2, ip, #3
 801cfba:	1a52      	subs	r2, r2, r1
 801cfbc:	f022 0203 	bic.w	r2, r2, #3
 801cfc0:	3903      	subs	r1, #3
 801cfc2:	458c      	cmp	ip, r1
 801cfc4:	bf38      	it	cc
 801cfc6:	2200      	movcc	r2, #0
 801cfc8:	441a      	add	r2, r3
 801cfca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cfce:	b17b      	cbz	r3, 801cff0 <__mdiff+0x104>
 801cfd0:	6106      	str	r6, [r0, #16]
 801cfd2:	e7a5      	b.n	801cf20 <__mdiff+0x34>
 801cfd4:	f855 8b04 	ldr.w	r8, [r5], #4
 801cfd8:	fa17 f488 	uxtah	r4, r7, r8
 801cfdc:	1422      	asrs	r2, r4, #16
 801cfde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801cfe2:	b2a4      	uxth	r4, r4
 801cfe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801cfe8:	f84e 4b04 	str.w	r4, [lr], #4
 801cfec:	1417      	asrs	r7, r2, #16
 801cfee:	e7e0      	b.n	801cfb2 <__mdiff+0xc6>
 801cff0:	3e01      	subs	r6, #1
 801cff2:	e7ea      	b.n	801cfca <__mdiff+0xde>
 801cff4:	080214bc 	.word	0x080214bc
 801cff8:	0802154c 	.word	0x0802154c

0801cffc <__ulp>:
 801cffc:	b082      	sub	sp, #8
 801cffe:	ed8d 0b00 	vstr	d0, [sp]
 801d002:	9b01      	ldr	r3, [sp, #4]
 801d004:	4912      	ldr	r1, [pc, #72]	; (801d050 <__ulp+0x54>)
 801d006:	4019      	ands	r1, r3
 801d008:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d00c:	2900      	cmp	r1, #0
 801d00e:	dd05      	ble.n	801d01c <__ulp+0x20>
 801d010:	2200      	movs	r2, #0
 801d012:	460b      	mov	r3, r1
 801d014:	ec43 2b10 	vmov	d0, r2, r3
 801d018:	b002      	add	sp, #8
 801d01a:	4770      	bx	lr
 801d01c:	4249      	negs	r1, r1
 801d01e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d022:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d026:	f04f 0200 	mov.w	r2, #0
 801d02a:	f04f 0300 	mov.w	r3, #0
 801d02e:	da04      	bge.n	801d03a <__ulp+0x3e>
 801d030:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d034:	fa41 f300 	asr.w	r3, r1, r0
 801d038:	e7ec      	b.n	801d014 <__ulp+0x18>
 801d03a:	f1a0 0114 	sub.w	r1, r0, #20
 801d03e:	291e      	cmp	r1, #30
 801d040:	bfda      	itte	le
 801d042:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d046:	fa20 f101 	lsrle.w	r1, r0, r1
 801d04a:	2101      	movgt	r1, #1
 801d04c:	460a      	mov	r2, r1
 801d04e:	e7e1      	b.n	801d014 <__ulp+0x18>
 801d050:	7ff00000 	.word	0x7ff00000

0801d054 <__b2d>:
 801d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d056:	6905      	ldr	r5, [r0, #16]
 801d058:	f100 0714 	add.w	r7, r0, #20
 801d05c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d060:	1f2e      	subs	r6, r5, #4
 801d062:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d066:	4620      	mov	r0, r4
 801d068:	f7ff fd52 	bl	801cb10 <__hi0bits>
 801d06c:	f1c0 0320 	rsb	r3, r0, #32
 801d070:	280a      	cmp	r0, #10
 801d072:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d0f0 <__b2d+0x9c>
 801d076:	600b      	str	r3, [r1, #0]
 801d078:	dc14      	bgt.n	801d0a4 <__b2d+0x50>
 801d07a:	f1c0 0e0b 	rsb	lr, r0, #11
 801d07e:	fa24 f10e 	lsr.w	r1, r4, lr
 801d082:	42b7      	cmp	r7, r6
 801d084:	ea41 030c 	orr.w	r3, r1, ip
 801d088:	bf34      	ite	cc
 801d08a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d08e:	2100      	movcs	r1, #0
 801d090:	3015      	adds	r0, #21
 801d092:	fa04 f000 	lsl.w	r0, r4, r0
 801d096:	fa21 f10e 	lsr.w	r1, r1, lr
 801d09a:	ea40 0201 	orr.w	r2, r0, r1
 801d09e:	ec43 2b10 	vmov	d0, r2, r3
 801d0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0a4:	42b7      	cmp	r7, r6
 801d0a6:	bf3a      	itte	cc
 801d0a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d0ac:	f1a5 0608 	subcc.w	r6, r5, #8
 801d0b0:	2100      	movcs	r1, #0
 801d0b2:	380b      	subs	r0, #11
 801d0b4:	d017      	beq.n	801d0e6 <__b2d+0x92>
 801d0b6:	f1c0 0c20 	rsb	ip, r0, #32
 801d0ba:	fa04 f500 	lsl.w	r5, r4, r0
 801d0be:	42be      	cmp	r6, r7
 801d0c0:	fa21 f40c 	lsr.w	r4, r1, ip
 801d0c4:	ea45 0504 	orr.w	r5, r5, r4
 801d0c8:	bf8c      	ite	hi
 801d0ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d0ce:	2400      	movls	r4, #0
 801d0d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d0d4:	fa01 f000 	lsl.w	r0, r1, r0
 801d0d8:	fa24 f40c 	lsr.w	r4, r4, ip
 801d0dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d0e0:	ea40 0204 	orr.w	r2, r0, r4
 801d0e4:	e7db      	b.n	801d09e <__b2d+0x4a>
 801d0e6:	ea44 030c 	orr.w	r3, r4, ip
 801d0ea:	460a      	mov	r2, r1
 801d0ec:	e7d7      	b.n	801d09e <__b2d+0x4a>
 801d0ee:	bf00      	nop
 801d0f0:	3ff00000 	.word	0x3ff00000

0801d0f4 <__d2b>:
 801d0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d0f8:	4689      	mov	r9, r1
 801d0fa:	2101      	movs	r1, #1
 801d0fc:	ec57 6b10 	vmov	r6, r7, d0
 801d100:	4690      	mov	r8, r2
 801d102:	f7ff fc0f 	bl	801c924 <_Balloc>
 801d106:	4604      	mov	r4, r0
 801d108:	b930      	cbnz	r0, 801d118 <__d2b+0x24>
 801d10a:	4602      	mov	r2, r0
 801d10c:	4b25      	ldr	r3, [pc, #148]	; (801d1a4 <__d2b+0xb0>)
 801d10e:	4826      	ldr	r0, [pc, #152]	; (801d1a8 <__d2b+0xb4>)
 801d110:	f240 310a 	movw	r1, #778	; 0x30a
 801d114:	f000 fafe 	bl	801d714 <__assert_func>
 801d118:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d11c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d120:	bb35      	cbnz	r5, 801d170 <__d2b+0x7c>
 801d122:	2e00      	cmp	r6, #0
 801d124:	9301      	str	r3, [sp, #4]
 801d126:	d028      	beq.n	801d17a <__d2b+0x86>
 801d128:	4668      	mov	r0, sp
 801d12a:	9600      	str	r6, [sp, #0]
 801d12c:	f7ff fd10 	bl	801cb50 <__lo0bits>
 801d130:	9900      	ldr	r1, [sp, #0]
 801d132:	b300      	cbz	r0, 801d176 <__d2b+0x82>
 801d134:	9a01      	ldr	r2, [sp, #4]
 801d136:	f1c0 0320 	rsb	r3, r0, #32
 801d13a:	fa02 f303 	lsl.w	r3, r2, r3
 801d13e:	430b      	orrs	r3, r1
 801d140:	40c2      	lsrs	r2, r0
 801d142:	6163      	str	r3, [r4, #20]
 801d144:	9201      	str	r2, [sp, #4]
 801d146:	9b01      	ldr	r3, [sp, #4]
 801d148:	61a3      	str	r3, [r4, #24]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	bf14      	ite	ne
 801d14e:	2202      	movne	r2, #2
 801d150:	2201      	moveq	r2, #1
 801d152:	6122      	str	r2, [r4, #16]
 801d154:	b1d5      	cbz	r5, 801d18c <__d2b+0x98>
 801d156:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d15a:	4405      	add	r5, r0
 801d15c:	f8c9 5000 	str.w	r5, [r9]
 801d160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d164:	f8c8 0000 	str.w	r0, [r8]
 801d168:	4620      	mov	r0, r4
 801d16a:	b003      	add	sp, #12
 801d16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d174:	e7d5      	b.n	801d122 <__d2b+0x2e>
 801d176:	6161      	str	r1, [r4, #20]
 801d178:	e7e5      	b.n	801d146 <__d2b+0x52>
 801d17a:	a801      	add	r0, sp, #4
 801d17c:	f7ff fce8 	bl	801cb50 <__lo0bits>
 801d180:	9b01      	ldr	r3, [sp, #4]
 801d182:	6163      	str	r3, [r4, #20]
 801d184:	2201      	movs	r2, #1
 801d186:	6122      	str	r2, [r4, #16]
 801d188:	3020      	adds	r0, #32
 801d18a:	e7e3      	b.n	801d154 <__d2b+0x60>
 801d18c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d190:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d194:	f8c9 0000 	str.w	r0, [r9]
 801d198:	6918      	ldr	r0, [r3, #16]
 801d19a:	f7ff fcb9 	bl	801cb10 <__hi0bits>
 801d19e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d1a2:	e7df      	b.n	801d164 <__d2b+0x70>
 801d1a4:	080214bc 	.word	0x080214bc
 801d1a8:	0802154c 	.word	0x0802154c

0801d1ac <__ratio>:
 801d1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1b0:	4688      	mov	r8, r1
 801d1b2:	4669      	mov	r1, sp
 801d1b4:	4681      	mov	r9, r0
 801d1b6:	f7ff ff4d 	bl	801d054 <__b2d>
 801d1ba:	a901      	add	r1, sp, #4
 801d1bc:	4640      	mov	r0, r8
 801d1be:	ec55 4b10 	vmov	r4, r5, d0
 801d1c2:	f7ff ff47 	bl	801d054 <__b2d>
 801d1c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d1ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d1ce:	eba3 0c02 	sub.w	ip, r3, r2
 801d1d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d1d6:	1a9b      	subs	r3, r3, r2
 801d1d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d1dc:	ec51 0b10 	vmov	r0, r1, d0
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	bfd6      	itet	le
 801d1e4:	460a      	movle	r2, r1
 801d1e6:	462a      	movgt	r2, r5
 801d1e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d1ec:	468b      	mov	fp, r1
 801d1ee:	462f      	mov	r7, r5
 801d1f0:	bfd4      	ite	le
 801d1f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d1f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	ee10 2a10 	vmov	r2, s0
 801d200:	465b      	mov	r3, fp
 801d202:	4639      	mov	r1, r7
 801d204:	f7e3 fb22 	bl	800084c <__aeabi_ddiv>
 801d208:	ec41 0b10 	vmov	d0, r0, r1
 801d20c:	b003      	add	sp, #12
 801d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d212 <__copybits>:
 801d212:	3901      	subs	r1, #1
 801d214:	b570      	push	{r4, r5, r6, lr}
 801d216:	1149      	asrs	r1, r1, #5
 801d218:	6914      	ldr	r4, [r2, #16]
 801d21a:	3101      	adds	r1, #1
 801d21c:	f102 0314 	add.w	r3, r2, #20
 801d220:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d224:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d228:	1f05      	subs	r5, r0, #4
 801d22a:	42a3      	cmp	r3, r4
 801d22c:	d30c      	bcc.n	801d248 <__copybits+0x36>
 801d22e:	1aa3      	subs	r3, r4, r2
 801d230:	3b11      	subs	r3, #17
 801d232:	f023 0303 	bic.w	r3, r3, #3
 801d236:	3211      	adds	r2, #17
 801d238:	42a2      	cmp	r2, r4
 801d23a:	bf88      	it	hi
 801d23c:	2300      	movhi	r3, #0
 801d23e:	4418      	add	r0, r3
 801d240:	2300      	movs	r3, #0
 801d242:	4288      	cmp	r0, r1
 801d244:	d305      	bcc.n	801d252 <__copybits+0x40>
 801d246:	bd70      	pop	{r4, r5, r6, pc}
 801d248:	f853 6b04 	ldr.w	r6, [r3], #4
 801d24c:	f845 6f04 	str.w	r6, [r5, #4]!
 801d250:	e7eb      	b.n	801d22a <__copybits+0x18>
 801d252:	f840 3b04 	str.w	r3, [r0], #4
 801d256:	e7f4      	b.n	801d242 <__copybits+0x30>

0801d258 <__any_on>:
 801d258:	f100 0214 	add.w	r2, r0, #20
 801d25c:	6900      	ldr	r0, [r0, #16]
 801d25e:	114b      	asrs	r3, r1, #5
 801d260:	4298      	cmp	r0, r3
 801d262:	b510      	push	{r4, lr}
 801d264:	db11      	blt.n	801d28a <__any_on+0x32>
 801d266:	dd0a      	ble.n	801d27e <__any_on+0x26>
 801d268:	f011 011f 	ands.w	r1, r1, #31
 801d26c:	d007      	beq.n	801d27e <__any_on+0x26>
 801d26e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d272:	fa24 f001 	lsr.w	r0, r4, r1
 801d276:	fa00 f101 	lsl.w	r1, r0, r1
 801d27a:	428c      	cmp	r4, r1
 801d27c:	d10b      	bne.n	801d296 <__any_on+0x3e>
 801d27e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d282:	4293      	cmp	r3, r2
 801d284:	d803      	bhi.n	801d28e <__any_on+0x36>
 801d286:	2000      	movs	r0, #0
 801d288:	bd10      	pop	{r4, pc}
 801d28a:	4603      	mov	r3, r0
 801d28c:	e7f7      	b.n	801d27e <__any_on+0x26>
 801d28e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d292:	2900      	cmp	r1, #0
 801d294:	d0f5      	beq.n	801d282 <__any_on+0x2a>
 801d296:	2001      	movs	r0, #1
 801d298:	e7f6      	b.n	801d288 <__any_on+0x30>

0801d29a <_calloc_r>:
 801d29a:	b513      	push	{r0, r1, r4, lr}
 801d29c:	434a      	muls	r2, r1
 801d29e:	4611      	mov	r1, r2
 801d2a0:	9201      	str	r2, [sp, #4]
 801d2a2:	f000 f859 	bl	801d358 <_malloc_r>
 801d2a6:	4604      	mov	r4, r0
 801d2a8:	b118      	cbz	r0, 801d2b2 <_calloc_r+0x18>
 801d2aa:	9a01      	ldr	r2, [sp, #4]
 801d2ac:	2100      	movs	r1, #0
 801d2ae:	f7fc fbc5 	bl	8019a3c <memset>
 801d2b2:	4620      	mov	r0, r4
 801d2b4:	b002      	add	sp, #8
 801d2b6:	bd10      	pop	{r4, pc}

0801d2b8 <_free_r>:
 801d2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d2ba:	2900      	cmp	r1, #0
 801d2bc:	d048      	beq.n	801d350 <_free_r+0x98>
 801d2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d2c2:	9001      	str	r0, [sp, #4]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	f1a1 0404 	sub.w	r4, r1, #4
 801d2ca:	bfb8      	it	lt
 801d2cc:	18e4      	addlt	r4, r4, r3
 801d2ce:	f000 fa6b 	bl	801d7a8 <__malloc_lock>
 801d2d2:	4a20      	ldr	r2, [pc, #128]	; (801d354 <_free_r+0x9c>)
 801d2d4:	9801      	ldr	r0, [sp, #4]
 801d2d6:	6813      	ldr	r3, [r2, #0]
 801d2d8:	4615      	mov	r5, r2
 801d2da:	b933      	cbnz	r3, 801d2ea <_free_r+0x32>
 801d2dc:	6063      	str	r3, [r4, #4]
 801d2de:	6014      	str	r4, [r2, #0]
 801d2e0:	b003      	add	sp, #12
 801d2e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d2e6:	f000 ba65 	b.w	801d7b4 <__malloc_unlock>
 801d2ea:	42a3      	cmp	r3, r4
 801d2ec:	d90b      	bls.n	801d306 <_free_r+0x4e>
 801d2ee:	6821      	ldr	r1, [r4, #0]
 801d2f0:	1862      	adds	r2, r4, r1
 801d2f2:	4293      	cmp	r3, r2
 801d2f4:	bf04      	itt	eq
 801d2f6:	681a      	ldreq	r2, [r3, #0]
 801d2f8:	685b      	ldreq	r3, [r3, #4]
 801d2fa:	6063      	str	r3, [r4, #4]
 801d2fc:	bf04      	itt	eq
 801d2fe:	1852      	addeq	r2, r2, r1
 801d300:	6022      	streq	r2, [r4, #0]
 801d302:	602c      	str	r4, [r5, #0]
 801d304:	e7ec      	b.n	801d2e0 <_free_r+0x28>
 801d306:	461a      	mov	r2, r3
 801d308:	685b      	ldr	r3, [r3, #4]
 801d30a:	b10b      	cbz	r3, 801d310 <_free_r+0x58>
 801d30c:	42a3      	cmp	r3, r4
 801d30e:	d9fa      	bls.n	801d306 <_free_r+0x4e>
 801d310:	6811      	ldr	r1, [r2, #0]
 801d312:	1855      	adds	r5, r2, r1
 801d314:	42a5      	cmp	r5, r4
 801d316:	d10b      	bne.n	801d330 <_free_r+0x78>
 801d318:	6824      	ldr	r4, [r4, #0]
 801d31a:	4421      	add	r1, r4
 801d31c:	1854      	adds	r4, r2, r1
 801d31e:	42a3      	cmp	r3, r4
 801d320:	6011      	str	r1, [r2, #0]
 801d322:	d1dd      	bne.n	801d2e0 <_free_r+0x28>
 801d324:	681c      	ldr	r4, [r3, #0]
 801d326:	685b      	ldr	r3, [r3, #4]
 801d328:	6053      	str	r3, [r2, #4]
 801d32a:	4421      	add	r1, r4
 801d32c:	6011      	str	r1, [r2, #0]
 801d32e:	e7d7      	b.n	801d2e0 <_free_r+0x28>
 801d330:	d902      	bls.n	801d338 <_free_r+0x80>
 801d332:	230c      	movs	r3, #12
 801d334:	6003      	str	r3, [r0, #0]
 801d336:	e7d3      	b.n	801d2e0 <_free_r+0x28>
 801d338:	6825      	ldr	r5, [r4, #0]
 801d33a:	1961      	adds	r1, r4, r5
 801d33c:	428b      	cmp	r3, r1
 801d33e:	bf04      	itt	eq
 801d340:	6819      	ldreq	r1, [r3, #0]
 801d342:	685b      	ldreq	r3, [r3, #4]
 801d344:	6063      	str	r3, [r4, #4]
 801d346:	bf04      	itt	eq
 801d348:	1949      	addeq	r1, r1, r5
 801d34a:	6021      	streq	r1, [r4, #0]
 801d34c:	6054      	str	r4, [r2, #4]
 801d34e:	e7c7      	b.n	801d2e0 <_free_r+0x28>
 801d350:	b003      	add	sp, #12
 801d352:	bd30      	pop	{r4, r5, pc}
 801d354:	20004dcc 	.word	0x20004dcc

0801d358 <_malloc_r>:
 801d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d35a:	1ccd      	adds	r5, r1, #3
 801d35c:	f025 0503 	bic.w	r5, r5, #3
 801d360:	3508      	adds	r5, #8
 801d362:	2d0c      	cmp	r5, #12
 801d364:	bf38      	it	cc
 801d366:	250c      	movcc	r5, #12
 801d368:	2d00      	cmp	r5, #0
 801d36a:	4606      	mov	r6, r0
 801d36c:	db01      	blt.n	801d372 <_malloc_r+0x1a>
 801d36e:	42a9      	cmp	r1, r5
 801d370:	d903      	bls.n	801d37a <_malloc_r+0x22>
 801d372:	230c      	movs	r3, #12
 801d374:	6033      	str	r3, [r6, #0]
 801d376:	2000      	movs	r0, #0
 801d378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d37a:	f000 fa15 	bl	801d7a8 <__malloc_lock>
 801d37e:	4921      	ldr	r1, [pc, #132]	; (801d404 <_malloc_r+0xac>)
 801d380:	680a      	ldr	r2, [r1, #0]
 801d382:	4614      	mov	r4, r2
 801d384:	b99c      	cbnz	r4, 801d3ae <_malloc_r+0x56>
 801d386:	4f20      	ldr	r7, [pc, #128]	; (801d408 <_malloc_r+0xb0>)
 801d388:	683b      	ldr	r3, [r7, #0]
 801d38a:	b923      	cbnz	r3, 801d396 <_malloc_r+0x3e>
 801d38c:	4621      	mov	r1, r4
 801d38e:	4630      	mov	r0, r6
 801d390:	f000 f9a2 	bl	801d6d8 <_sbrk_r>
 801d394:	6038      	str	r0, [r7, #0]
 801d396:	4629      	mov	r1, r5
 801d398:	4630      	mov	r0, r6
 801d39a:	f000 f99d 	bl	801d6d8 <_sbrk_r>
 801d39e:	1c43      	adds	r3, r0, #1
 801d3a0:	d123      	bne.n	801d3ea <_malloc_r+0x92>
 801d3a2:	230c      	movs	r3, #12
 801d3a4:	6033      	str	r3, [r6, #0]
 801d3a6:	4630      	mov	r0, r6
 801d3a8:	f000 fa04 	bl	801d7b4 <__malloc_unlock>
 801d3ac:	e7e3      	b.n	801d376 <_malloc_r+0x1e>
 801d3ae:	6823      	ldr	r3, [r4, #0]
 801d3b0:	1b5b      	subs	r3, r3, r5
 801d3b2:	d417      	bmi.n	801d3e4 <_malloc_r+0x8c>
 801d3b4:	2b0b      	cmp	r3, #11
 801d3b6:	d903      	bls.n	801d3c0 <_malloc_r+0x68>
 801d3b8:	6023      	str	r3, [r4, #0]
 801d3ba:	441c      	add	r4, r3
 801d3bc:	6025      	str	r5, [r4, #0]
 801d3be:	e004      	b.n	801d3ca <_malloc_r+0x72>
 801d3c0:	6863      	ldr	r3, [r4, #4]
 801d3c2:	42a2      	cmp	r2, r4
 801d3c4:	bf0c      	ite	eq
 801d3c6:	600b      	streq	r3, [r1, #0]
 801d3c8:	6053      	strne	r3, [r2, #4]
 801d3ca:	4630      	mov	r0, r6
 801d3cc:	f000 f9f2 	bl	801d7b4 <__malloc_unlock>
 801d3d0:	f104 000b 	add.w	r0, r4, #11
 801d3d4:	1d23      	adds	r3, r4, #4
 801d3d6:	f020 0007 	bic.w	r0, r0, #7
 801d3da:	1ac2      	subs	r2, r0, r3
 801d3dc:	d0cc      	beq.n	801d378 <_malloc_r+0x20>
 801d3de:	1a1b      	subs	r3, r3, r0
 801d3e0:	50a3      	str	r3, [r4, r2]
 801d3e2:	e7c9      	b.n	801d378 <_malloc_r+0x20>
 801d3e4:	4622      	mov	r2, r4
 801d3e6:	6864      	ldr	r4, [r4, #4]
 801d3e8:	e7cc      	b.n	801d384 <_malloc_r+0x2c>
 801d3ea:	1cc4      	adds	r4, r0, #3
 801d3ec:	f024 0403 	bic.w	r4, r4, #3
 801d3f0:	42a0      	cmp	r0, r4
 801d3f2:	d0e3      	beq.n	801d3bc <_malloc_r+0x64>
 801d3f4:	1a21      	subs	r1, r4, r0
 801d3f6:	4630      	mov	r0, r6
 801d3f8:	f000 f96e 	bl	801d6d8 <_sbrk_r>
 801d3fc:	3001      	adds	r0, #1
 801d3fe:	d1dd      	bne.n	801d3bc <_malloc_r+0x64>
 801d400:	e7cf      	b.n	801d3a2 <_malloc_r+0x4a>
 801d402:	bf00      	nop
 801d404:	20004dcc 	.word	0x20004dcc
 801d408:	20004dd0 	.word	0x20004dd0

0801d40c <__ssputs_r>:
 801d40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d410:	688e      	ldr	r6, [r1, #8]
 801d412:	429e      	cmp	r6, r3
 801d414:	4682      	mov	sl, r0
 801d416:	460c      	mov	r4, r1
 801d418:	4690      	mov	r8, r2
 801d41a:	461f      	mov	r7, r3
 801d41c:	d838      	bhi.n	801d490 <__ssputs_r+0x84>
 801d41e:	898a      	ldrh	r2, [r1, #12]
 801d420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d424:	d032      	beq.n	801d48c <__ssputs_r+0x80>
 801d426:	6825      	ldr	r5, [r4, #0]
 801d428:	6909      	ldr	r1, [r1, #16]
 801d42a:	eba5 0901 	sub.w	r9, r5, r1
 801d42e:	6965      	ldr	r5, [r4, #20]
 801d430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d438:	3301      	adds	r3, #1
 801d43a:	444b      	add	r3, r9
 801d43c:	106d      	asrs	r5, r5, #1
 801d43e:	429d      	cmp	r5, r3
 801d440:	bf38      	it	cc
 801d442:	461d      	movcc	r5, r3
 801d444:	0553      	lsls	r3, r2, #21
 801d446:	d531      	bpl.n	801d4ac <__ssputs_r+0xa0>
 801d448:	4629      	mov	r1, r5
 801d44a:	f7ff ff85 	bl	801d358 <_malloc_r>
 801d44e:	4606      	mov	r6, r0
 801d450:	b950      	cbnz	r0, 801d468 <__ssputs_r+0x5c>
 801d452:	230c      	movs	r3, #12
 801d454:	f8ca 3000 	str.w	r3, [sl]
 801d458:	89a3      	ldrh	r3, [r4, #12]
 801d45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d45e:	81a3      	strh	r3, [r4, #12]
 801d460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d468:	6921      	ldr	r1, [r4, #16]
 801d46a:	464a      	mov	r2, r9
 801d46c:	f7fc fad8 	bl	8019a20 <memcpy>
 801d470:	89a3      	ldrh	r3, [r4, #12]
 801d472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d47a:	81a3      	strh	r3, [r4, #12]
 801d47c:	6126      	str	r6, [r4, #16]
 801d47e:	6165      	str	r5, [r4, #20]
 801d480:	444e      	add	r6, r9
 801d482:	eba5 0509 	sub.w	r5, r5, r9
 801d486:	6026      	str	r6, [r4, #0]
 801d488:	60a5      	str	r5, [r4, #8]
 801d48a:	463e      	mov	r6, r7
 801d48c:	42be      	cmp	r6, r7
 801d48e:	d900      	bls.n	801d492 <__ssputs_r+0x86>
 801d490:	463e      	mov	r6, r7
 801d492:	4632      	mov	r2, r6
 801d494:	6820      	ldr	r0, [r4, #0]
 801d496:	4641      	mov	r1, r8
 801d498:	f000 f96c 	bl	801d774 <memmove>
 801d49c:	68a3      	ldr	r3, [r4, #8]
 801d49e:	6822      	ldr	r2, [r4, #0]
 801d4a0:	1b9b      	subs	r3, r3, r6
 801d4a2:	4432      	add	r2, r6
 801d4a4:	60a3      	str	r3, [r4, #8]
 801d4a6:	6022      	str	r2, [r4, #0]
 801d4a8:	2000      	movs	r0, #0
 801d4aa:	e7db      	b.n	801d464 <__ssputs_r+0x58>
 801d4ac:	462a      	mov	r2, r5
 801d4ae:	f000 f987 	bl	801d7c0 <_realloc_r>
 801d4b2:	4606      	mov	r6, r0
 801d4b4:	2800      	cmp	r0, #0
 801d4b6:	d1e1      	bne.n	801d47c <__ssputs_r+0x70>
 801d4b8:	6921      	ldr	r1, [r4, #16]
 801d4ba:	4650      	mov	r0, sl
 801d4bc:	f7ff fefc 	bl	801d2b8 <_free_r>
 801d4c0:	e7c7      	b.n	801d452 <__ssputs_r+0x46>
	...

0801d4c4 <_svfiprintf_r>:
 801d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4c8:	4698      	mov	r8, r3
 801d4ca:	898b      	ldrh	r3, [r1, #12]
 801d4cc:	061b      	lsls	r3, r3, #24
 801d4ce:	b09d      	sub	sp, #116	; 0x74
 801d4d0:	4607      	mov	r7, r0
 801d4d2:	460d      	mov	r5, r1
 801d4d4:	4614      	mov	r4, r2
 801d4d6:	d50e      	bpl.n	801d4f6 <_svfiprintf_r+0x32>
 801d4d8:	690b      	ldr	r3, [r1, #16]
 801d4da:	b963      	cbnz	r3, 801d4f6 <_svfiprintf_r+0x32>
 801d4dc:	2140      	movs	r1, #64	; 0x40
 801d4de:	f7ff ff3b 	bl	801d358 <_malloc_r>
 801d4e2:	6028      	str	r0, [r5, #0]
 801d4e4:	6128      	str	r0, [r5, #16]
 801d4e6:	b920      	cbnz	r0, 801d4f2 <_svfiprintf_r+0x2e>
 801d4e8:	230c      	movs	r3, #12
 801d4ea:	603b      	str	r3, [r7, #0]
 801d4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d4f0:	e0d1      	b.n	801d696 <_svfiprintf_r+0x1d2>
 801d4f2:	2340      	movs	r3, #64	; 0x40
 801d4f4:	616b      	str	r3, [r5, #20]
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	9309      	str	r3, [sp, #36]	; 0x24
 801d4fa:	2320      	movs	r3, #32
 801d4fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d500:	f8cd 800c 	str.w	r8, [sp, #12]
 801d504:	2330      	movs	r3, #48	; 0x30
 801d506:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d6b0 <_svfiprintf_r+0x1ec>
 801d50a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d50e:	f04f 0901 	mov.w	r9, #1
 801d512:	4623      	mov	r3, r4
 801d514:	469a      	mov	sl, r3
 801d516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d51a:	b10a      	cbz	r2, 801d520 <_svfiprintf_r+0x5c>
 801d51c:	2a25      	cmp	r2, #37	; 0x25
 801d51e:	d1f9      	bne.n	801d514 <_svfiprintf_r+0x50>
 801d520:	ebba 0b04 	subs.w	fp, sl, r4
 801d524:	d00b      	beq.n	801d53e <_svfiprintf_r+0x7a>
 801d526:	465b      	mov	r3, fp
 801d528:	4622      	mov	r2, r4
 801d52a:	4629      	mov	r1, r5
 801d52c:	4638      	mov	r0, r7
 801d52e:	f7ff ff6d 	bl	801d40c <__ssputs_r>
 801d532:	3001      	adds	r0, #1
 801d534:	f000 80aa 	beq.w	801d68c <_svfiprintf_r+0x1c8>
 801d538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d53a:	445a      	add	r2, fp
 801d53c:	9209      	str	r2, [sp, #36]	; 0x24
 801d53e:	f89a 3000 	ldrb.w	r3, [sl]
 801d542:	2b00      	cmp	r3, #0
 801d544:	f000 80a2 	beq.w	801d68c <_svfiprintf_r+0x1c8>
 801d548:	2300      	movs	r3, #0
 801d54a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d54e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d552:	f10a 0a01 	add.w	sl, sl, #1
 801d556:	9304      	str	r3, [sp, #16]
 801d558:	9307      	str	r3, [sp, #28]
 801d55a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d55e:	931a      	str	r3, [sp, #104]	; 0x68
 801d560:	4654      	mov	r4, sl
 801d562:	2205      	movs	r2, #5
 801d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d568:	4851      	ldr	r0, [pc, #324]	; (801d6b0 <_svfiprintf_r+0x1ec>)
 801d56a:	f7e2 fe39 	bl	80001e0 <memchr>
 801d56e:	9a04      	ldr	r2, [sp, #16]
 801d570:	b9d8      	cbnz	r0, 801d5aa <_svfiprintf_r+0xe6>
 801d572:	06d0      	lsls	r0, r2, #27
 801d574:	bf44      	itt	mi
 801d576:	2320      	movmi	r3, #32
 801d578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d57c:	0711      	lsls	r1, r2, #28
 801d57e:	bf44      	itt	mi
 801d580:	232b      	movmi	r3, #43	; 0x2b
 801d582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d586:	f89a 3000 	ldrb.w	r3, [sl]
 801d58a:	2b2a      	cmp	r3, #42	; 0x2a
 801d58c:	d015      	beq.n	801d5ba <_svfiprintf_r+0xf6>
 801d58e:	9a07      	ldr	r2, [sp, #28]
 801d590:	4654      	mov	r4, sl
 801d592:	2000      	movs	r0, #0
 801d594:	f04f 0c0a 	mov.w	ip, #10
 801d598:	4621      	mov	r1, r4
 801d59a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d59e:	3b30      	subs	r3, #48	; 0x30
 801d5a0:	2b09      	cmp	r3, #9
 801d5a2:	d94e      	bls.n	801d642 <_svfiprintf_r+0x17e>
 801d5a4:	b1b0      	cbz	r0, 801d5d4 <_svfiprintf_r+0x110>
 801d5a6:	9207      	str	r2, [sp, #28]
 801d5a8:	e014      	b.n	801d5d4 <_svfiprintf_r+0x110>
 801d5aa:	eba0 0308 	sub.w	r3, r0, r8
 801d5ae:	fa09 f303 	lsl.w	r3, r9, r3
 801d5b2:	4313      	orrs	r3, r2
 801d5b4:	9304      	str	r3, [sp, #16]
 801d5b6:	46a2      	mov	sl, r4
 801d5b8:	e7d2      	b.n	801d560 <_svfiprintf_r+0x9c>
 801d5ba:	9b03      	ldr	r3, [sp, #12]
 801d5bc:	1d19      	adds	r1, r3, #4
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	9103      	str	r1, [sp, #12]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	bfbb      	ittet	lt
 801d5c6:	425b      	neglt	r3, r3
 801d5c8:	f042 0202 	orrlt.w	r2, r2, #2
 801d5cc:	9307      	strge	r3, [sp, #28]
 801d5ce:	9307      	strlt	r3, [sp, #28]
 801d5d0:	bfb8      	it	lt
 801d5d2:	9204      	strlt	r2, [sp, #16]
 801d5d4:	7823      	ldrb	r3, [r4, #0]
 801d5d6:	2b2e      	cmp	r3, #46	; 0x2e
 801d5d8:	d10c      	bne.n	801d5f4 <_svfiprintf_r+0x130>
 801d5da:	7863      	ldrb	r3, [r4, #1]
 801d5dc:	2b2a      	cmp	r3, #42	; 0x2a
 801d5de:	d135      	bne.n	801d64c <_svfiprintf_r+0x188>
 801d5e0:	9b03      	ldr	r3, [sp, #12]
 801d5e2:	1d1a      	adds	r2, r3, #4
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	9203      	str	r2, [sp, #12]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	bfb8      	it	lt
 801d5ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d5f0:	3402      	adds	r4, #2
 801d5f2:	9305      	str	r3, [sp, #20]
 801d5f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d6c0 <_svfiprintf_r+0x1fc>
 801d5f8:	7821      	ldrb	r1, [r4, #0]
 801d5fa:	2203      	movs	r2, #3
 801d5fc:	4650      	mov	r0, sl
 801d5fe:	f7e2 fdef 	bl	80001e0 <memchr>
 801d602:	b140      	cbz	r0, 801d616 <_svfiprintf_r+0x152>
 801d604:	2340      	movs	r3, #64	; 0x40
 801d606:	eba0 000a 	sub.w	r0, r0, sl
 801d60a:	fa03 f000 	lsl.w	r0, r3, r0
 801d60e:	9b04      	ldr	r3, [sp, #16]
 801d610:	4303      	orrs	r3, r0
 801d612:	3401      	adds	r4, #1
 801d614:	9304      	str	r3, [sp, #16]
 801d616:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d61a:	4826      	ldr	r0, [pc, #152]	; (801d6b4 <_svfiprintf_r+0x1f0>)
 801d61c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d620:	2206      	movs	r2, #6
 801d622:	f7e2 fddd 	bl	80001e0 <memchr>
 801d626:	2800      	cmp	r0, #0
 801d628:	d038      	beq.n	801d69c <_svfiprintf_r+0x1d8>
 801d62a:	4b23      	ldr	r3, [pc, #140]	; (801d6b8 <_svfiprintf_r+0x1f4>)
 801d62c:	bb1b      	cbnz	r3, 801d676 <_svfiprintf_r+0x1b2>
 801d62e:	9b03      	ldr	r3, [sp, #12]
 801d630:	3307      	adds	r3, #7
 801d632:	f023 0307 	bic.w	r3, r3, #7
 801d636:	3308      	adds	r3, #8
 801d638:	9303      	str	r3, [sp, #12]
 801d63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d63c:	4433      	add	r3, r6
 801d63e:	9309      	str	r3, [sp, #36]	; 0x24
 801d640:	e767      	b.n	801d512 <_svfiprintf_r+0x4e>
 801d642:	fb0c 3202 	mla	r2, ip, r2, r3
 801d646:	460c      	mov	r4, r1
 801d648:	2001      	movs	r0, #1
 801d64a:	e7a5      	b.n	801d598 <_svfiprintf_r+0xd4>
 801d64c:	2300      	movs	r3, #0
 801d64e:	3401      	adds	r4, #1
 801d650:	9305      	str	r3, [sp, #20]
 801d652:	4619      	mov	r1, r3
 801d654:	f04f 0c0a 	mov.w	ip, #10
 801d658:	4620      	mov	r0, r4
 801d65a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d65e:	3a30      	subs	r2, #48	; 0x30
 801d660:	2a09      	cmp	r2, #9
 801d662:	d903      	bls.n	801d66c <_svfiprintf_r+0x1a8>
 801d664:	2b00      	cmp	r3, #0
 801d666:	d0c5      	beq.n	801d5f4 <_svfiprintf_r+0x130>
 801d668:	9105      	str	r1, [sp, #20]
 801d66a:	e7c3      	b.n	801d5f4 <_svfiprintf_r+0x130>
 801d66c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d670:	4604      	mov	r4, r0
 801d672:	2301      	movs	r3, #1
 801d674:	e7f0      	b.n	801d658 <_svfiprintf_r+0x194>
 801d676:	ab03      	add	r3, sp, #12
 801d678:	9300      	str	r3, [sp, #0]
 801d67a:	462a      	mov	r2, r5
 801d67c:	4b0f      	ldr	r3, [pc, #60]	; (801d6bc <_svfiprintf_r+0x1f8>)
 801d67e:	a904      	add	r1, sp, #16
 801d680:	4638      	mov	r0, r7
 801d682:	f7fc fa83 	bl	8019b8c <_printf_float>
 801d686:	1c42      	adds	r2, r0, #1
 801d688:	4606      	mov	r6, r0
 801d68a:	d1d6      	bne.n	801d63a <_svfiprintf_r+0x176>
 801d68c:	89ab      	ldrh	r3, [r5, #12]
 801d68e:	065b      	lsls	r3, r3, #25
 801d690:	f53f af2c 	bmi.w	801d4ec <_svfiprintf_r+0x28>
 801d694:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d696:	b01d      	add	sp, #116	; 0x74
 801d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d69c:	ab03      	add	r3, sp, #12
 801d69e:	9300      	str	r3, [sp, #0]
 801d6a0:	462a      	mov	r2, r5
 801d6a2:	4b06      	ldr	r3, [pc, #24]	; (801d6bc <_svfiprintf_r+0x1f8>)
 801d6a4:	a904      	add	r1, sp, #16
 801d6a6:	4638      	mov	r0, r7
 801d6a8:	f7fc fd14 	bl	801a0d4 <_printf_i>
 801d6ac:	e7eb      	b.n	801d686 <_svfiprintf_r+0x1c2>
 801d6ae:	bf00      	nop
 801d6b0:	080216ac 	.word	0x080216ac
 801d6b4:	080216b6 	.word	0x080216b6
 801d6b8:	08019b8d 	.word	0x08019b8d
 801d6bc:	0801d40d 	.word	0x0801d40d
 801d6c0:	080216b2 	.word	0x080216b2
 801d6c4:	00000000 	.word	0x00000000

0801d6c8 <nan>:
 801d6c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d6d0 <nan+0x8>
 801d6cc:	4770      	bx	lr
 801d6ce:	bf00      	nop
 801d6d0:	00000000 	.word	0x00000000
 801d6d4:	7ff80000 	.word	0x7ff80000

0801d6d8 <_sbrk_r>:
 801d6d8:	b538      	push	{r3, r4, r5, lr}
 801d6da:	4d06      	ldr	r5, [pc, #24]	; (801d6f4 <_sbrk_r+0x1c>)
 801d6dc:	2300      	movs	r3, #0
 801d6de:	4604      	mov	r4, r0
 801d6e0:	4608      	mov	r0, r1
 801d6e2:	602b      	str	r3, [r5, #0]
 801d6e4:	f7ee fd9c 	bl	800c220 <_sbrk>
 801d6e8:	1c43      	adds	r3, r0, #1
 801d6ea:	d102      	bne.n	801d6f2 <_sbrk_r+0x1a>
 801d6ec:	682b      	ldr	r3, [r5, #0]
 801d6ee:	b103      	cbz	r3, 801d6f2 <_sbrk_r+0x1a>
 801d6f0:	6023      	str	r3, [r4, #0]
 801d6f2:	bd38      	pop	{r3, r4, r5, pc}
 801d6f4:	20009d44 	.word	0x20009d44

0801d6f8 <__ascii_wctomb>:
 801d6f8:	b149      	cbz	r1, 801d70e <__ascii_wctomb+0x16>
 801d6fa:	2aff      	cmp	r2, #255	; 0xff
 801d6fc:	bf85      	ittet	hi
 801d6fe:	238a      	movhi	r3, #138	; 0x8a
 801d700:	6003      	strhi	r3, [r0, #0]
 801d702:	700a      	strbls	r2, [r1, #0]
 801d704:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d708:	bf98      	it	ls
 801d70a:	2001      	movls	r0, #1
 801d70c:	4770      	bx	lr
 801d70e:	4608      	mov	r0, r1
 801d710:	4770      	bx	lr
	...

0801d714 <__assert_func>:
 801d714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d716:	4614      	mov	r4, r2
 801d718:	461a      	mov	r2, r3
 801d71a:	4b09      	ldr	r3, [pc, #36]	; (801d740 <__assert_func+0x2c>)
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	4605      	mov	r5, r0
 801d720:	68d8      	ldr	r0, [r3, #12]
 801d722:	b14c      	cbz	r4, 801d738 <__assert_func+0x24>
 801d724:	4b07      	ldr	r3, [pc, #28]	; (801d744 <__assert_func+0x30>)
 801d726:	9100      	str	r1, [sp, #0]
 801d728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d72c:	4906      	ldr	r1, [pc, #24]	; (801d748 <__assert_func+0x34>)
 801d72e:	462b      	mov	r3, r5
 801d730:	f000 f80e 	bl	801d750 <fiprintf>
 801d734:	f000 fa84 	bl	801dc40 <abort>
 801d738:	4b04      	ldr	r3, [pc, #16]	; (801d74c <__assert_func+0x38>)
 801d73a:	461c      	mov	r4, r3
 801d73c:	e7f3      	b.n	801d726 <__assert_func+0x12>
 801d73e:	bf00      	nop
 801d740:	20000284 	.word	0x20000284
 801d744:	080216bd 	.word	0x080216bd
 801d748:	080216ca 	.word	0x080216ca
 801d74c:	080216f8 	.word	0x080216f8

0801d750 <fiprintf>:
 801d750:	b40e      	push	{r1, r2, r3}
 801d752:	b503      	push	{r0, r1, lr}
 801d754:	4601      	mov	r1, r0
 801d756:	ab03      	add	r3, sp, #12
 801d758:	4805      	ldr	r0, [pc, #20]	; (801d770 <fiprintf+0x20>)
 801d75a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d75e:	6800      	ldr	r0, [r0, #0]
 801d760:	9301      	str	r3, [sp, #4]
 801d762:	f000 f87d 	bl	801d860 <_vfiprintf_r>
 801d766:	b002      	add	sp, #8
 801d768:	f85d eb04 	ldr.w	lr, [sp], #4
 801d76c:	b003      	add	sp, #12
 801d76e:	4770      	bx	lr
 801d770:	20000284 	.word	0x20000284

0801d774 <memmove>:
 801d774:	4288      	cmp	r0, r1
 801d776:	b510      	push	{r4, lr}
 801d778:	eb01 0402 	add.w	r4, r1, r2
 801d77c:	d902      	bls.n	801d784 <memmove+0x10>
 801d77e:	4284      	cmp	r4, r0
 801d780:	4623      	mov	r3, r4
 801d782:	d807      	bhi.n	801d794 <memmove+0x20>
 801d784:	1e43      	subs	r3, r0, #1
 801d786:	42a1      	cmp	r1, r4
 801d788:	d008      	beq.n	801d79c <memmove+0x28>
 801d78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d78e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d792:	e7f8      	b.n	801d786 <memmove+0x12>
 801d794:	4402      	add	r2, r0
 801d796:	4601      	mov	r1, r0
 801d798:	428a      	cmp	r2, r1
 801d79a:	d100      	bne.n	801d79e <memmove+0x2a>
 801d79c:	bd10      	pop	{r4, pc}
 801d79e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d7a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d7a6:	e7f7      	b.n	801d798 <memmove+0x24>

0801d7a8 <__malloc_lock>:
 801d7a8:	4801      	ldr	r0, [pc, #4]	; (801d7b0 <__malloc_lock+0x8>)
 801d7aa:	f000 bc09 	b.w	801dfc0 <__retarget_lock_acquire_recursive>
 801d7ae:	bf00      	nop
 801d7b0:	20009d4c 	.word	0x20009d4c

0801d7b4 <__malloc_unlock>:
 801d7b4:	4801      	ldr	r0, [pc, #4]	; (801d7bc <__malloc_unlock+0x8>)
 801d7b6:	f000 bc04 	b.w	801dfc2 <__retarget_lock_release_recursive>
 801d7ba:	bf00      	nop
 801d7bc:	20009d4c 	.word	0x20009d4c

0801d7c0 <_realloc_r>:
 801d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7c2:	4607      	mov	r7, r0
 801d7c4:	4614      	mov	r4, r2
 801d7c6:	460e      	mov	r6, r1
 801d7c8:	b921      	cbnz	r1, 801d7d4 <_realloc_r+0x14>
 801d7ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d7ce:	4611      	mov	r1, r2
 801d7d0:	f7ff bdc2 	b.w	801d358 <_malloc_r>
 801d7d4:	b922      	cbnz	r2, 801d7e0 <_realloc_r+0x20>
 801d7d6:	f7ff fd6f 	bl	801d2b8 <_free_r>
 801d7da:	4625      	mov	r5, r4
 801d7dc:	4628      	mov	r0, r5
 801d7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7e0:	f000 fc54 	bl	801e08c <_malloc_usable_size_r>
 801d7e4:	42a0      	cmp	r0, r4
 801d7e6:	d20f      	bcs.n	801d808 <_realloc_r+0x48>
 801d7e8:	4621      	mov	r1, r4
 801d7ea:	4638      	mov	r0, r7
 801d7ec:	f7ff fdb4 	bl	801d358 <_malloc_r>
 801d7f0:	4605      	mov	r5, r0
 801d7f2:	2800      	cmp	r0, #0
 801d7f4:	d0f2      	beq.n	801d7dc <_realloc_r+0x1c>
 801d7f6:	4631      	mov	r1, r6
 801d7f8:	4622      	mov	r2, r4
 801d7fa:	f7fc f911 	bl	8019a20 <memcpy>
 801d7fe:	4631      	mov	r1, r6
 801d800:	4638      	mov	r0, r7
 801d802:	f7ff fd59 	bl	801d2b8 <_free_r>
 801d806:	e7e9      	b.n	801d7dc <_realloc_r+0x1c>
 801d808:	4635      	mov	r5, r6
 801d80a:	e7e7      	b.n	801d7dc <_realloc_r+0x1c>

0801d80c <__sfputc_r>:
 801d80c:	6893      	ldr	r3, [r2, #8]
 801d80e:	3b01      	subs	r3, #1
 801d810:	2b00      	cmp	r3, #0
 801d812:	b410      	push	{r4}
 801d814:	6093      	str	r3, [r2, #8]
 801d816:	da08      	bge.n	801d82a <__sfputc_r+0x1e>
 801d818:	6994      	ldr	r4, [r2, #24]
 801d81a:	42a3      	cmp	r3, r4
 801d81c:	db01      	blt.n	801d822 <__sfputc_r+0x16>
 801d81e:	290a      	cmp	r1, #10
 801d820:	d103      	bne.n	801d82a <__sfputc_r+0x1e>
 801d822:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d826:	f000 b94b 	b.w	801dac0 <__swbuf_r>
 801d82a:	6813      	ldr	r3, [r2, #0]
 801d82c:	1c58      	adds	r0, r3, #1
 801d82e:	6010      	str	r0, [r2, #0]
 801d830:	7019      	strb	r1, [r3, #0]
 801d832:	4608      	mov	r0, r1
 801d834:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d838:	4770      	bx	lr

0801d83a <__sfputs_r>:
 801d83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d83c:	4606      	mov	r6, r0
 801d83e:	460f      	mov	r7, r1
 801d840:	4614      	mov	r4, r2
 801d842:	18d5      	adds	r5, r2, r3
 801d844:	42ac      	cmp	r4, r5
 801d846:	d101      	bne.n	801d84c <__sfputs_r+0x12>
 801d848:	2000      	movs	r0, #0
 801d84a:	e007      	b.n	801d85c <__sfputs_r+0x22>
 801d84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d850:	463a      	mov	r2, r7
 801d852:	4630      	mov	r0, r6
 801d854:	f7ff ffda 	bl	801d80c <__sfputc_r>
 801d858:	1c43      	adds	r3, r0, #1
 801d85a:	d1f3      	bne.n	801d844 <__sfputs_r+0xa>
 801d85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d860 <_vfiprintf_r>:
 801d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d864:	460d      	mov	r5, r1
 801d866:	b09d      	sub	sp, #116	; 0x74
 801d868:	4614      	mov	r4, r2
 801d86a:	4698      	mov	r8, r3
 801d86c:	4606      	mov	r6, r0
 801d86e:	b118      	cbz	r0, 801d878 <_vfiprintf_r+0x18>
 801d870:	6983      	ldr	r3, [r0, #24]
 801d872:	b90b      	cbnz	r3, 801d878 <_vfiprintf_r+0x18>
 801d874:	f000 fb06 	bl	801de84 <__sinit>
 801d878:	4b89      	ldr	r3, [pc, #548]	; (801daa0 <_vfiprintf_r+0x240>)
 801d87a:	429d      	cmp	r5, r3
 801d87c:	d11b      	bne.n	801d8b6 <_vfiprintf_r+0x56>
 801d87e:	6875      	ldr	r5, [r6, #4]
 801d880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d882:	07d9      	lsls	r1, r3, #31
 801d884:	d405      	bmi.n	801d892 <_vfiprintf_r+0x32>
 801d886:	89ab      	ldrh	r3, [r5, #12]
 801d888:	059a      	lsls	r2, r3, #22
 801d88a:	d402      	bmi.n	801d892 <_vfiprintf_r+0x32>
 801d88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d88e:	f000 fb97 	bl	801dfc0 <__retarget_lock_acquire_recursive>
 801d892:	89ab      	ldrh	r3, [r5, #12]
 801d894:	071b      	lsls	r3, r3, #28
 801d896:	d501      	bpl.n	801d89c <_vfiprintf_r+0x3c>
 801d898:	692b      	ldr	r3, [r5, #16]
 801d89a:	b9eb      	cbnz	r3, 801d8d8 <_vfiprintf_r+0x78>
 801d89c:	4629      	mov	r1, r5
 801d89e:	4630      	mov	r0, r6
 801d8a0:	f000 f960 	bl	801db64 <__swsetup_r>
 801d8a4:	b1c0      	cbz	r0, 801d8d8 <_vfiprintf_r+0x78>
 801d8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d8a8:	07dc      	lsls	r4, r3, #31
 801d8aa:	d50e      	bpl.n	801d8ca <_vfiprintf_r+0x6a>
 801d8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d8b0:	b01d      	add	sp, #116	; 0x74
 801d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8b6:	4b7b      	ldr	r3, [pc, #492]	; (801daa4 <_vfiprintf_r+0x244>)
 801d8b8:	429d      	cmp	r5, r3
 801d8ba:	d101      	bne.n	801d8c0 <_vfiprintf_r+0x60>
 801d8bc:	68b5      	ldr	r5, [r6, #8]
 801d8be:	e7df      	b.n	801d880 <_vfiprintf_r+0x20>
 801d8c0:	4b79      	ldr	r3, [pc, #484]	; (801daa8 <_vfiprintf_r+0x248>)
 801d8c2:	429d      	cmp	r5, r3
 801d8c4:	bf08      	it	eq
 801d8c6:	68f5      	ldreq	r5, [r6, #12]
 801d8c8:	e7da      	b.n	801d880 <_vfiprintf_r+0x20>
 801d8ca:	89ab      	ldrh	r3, [r5, #12]
 801d8cc:	0598      	lsls	r0, r3, #22
 801d8ce:	d4ed      	bmi.n	801d8ac <_vfiprintf_r+0x4c>
 801d8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d8d2:	f000 fb76 	bl	801dfc2 <__retarget_lock_release_recursive>
 801d8d6:	e7e9      	b.n	801d8ac <_vfiprintf_r+0x4c>
 801d8d8:	2300      	movs	r3, #0
 801d8da:	9309      	str	r3, [sp, #36]	; 0x24
 801d8dc:	2320      	movs	r3, #32
 801d8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d8e2:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8e6:	2330      	movs	r3, #48	; 0x30
 801d8e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801daac <_vfiprintf_r+0x24c>
 801d8ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d8f0:	f04f 0901 	mov.w	r9, #1
 801d8f4:	4623      	mov	r3, r4
 801d8f6:	469a      	mov	sl, r3
 801d8f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8fc:	b10a      	cbz	r2, 801d902 <_vfiprintf_r+0xa2>
 801d8fe:	2a25      	cmp	r2, #37	; 0x25
 801d900:	d1f9      	bne.n	801d8f6 <_vfiprintf_r+0x96>
 801d902:	ebba 0b04 	subs.w	fp, sl, r4
 801d906:	d00b      	beq.n	801d920 <_vfiprintf_r+0xc0>
 801d908:	465b      	mov	r3, fp
 801d90a:	4622      	mov	r2, r4
 801d90c:	4629      	mov	r1, r5
 801d90e:	4630      	mov	r0, r6
 801d910:	f7ff ff93 	bl	801d83a <__sfputs_r>
 801d914:	3001      	adds	r0, #1
 801d916:	f000 80aa 	beq.w	801da6e <_vfiprintf_r+0x20e>
 801d91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d91c:	445a      	add	r2, fp
 801d91e:	9209      	str	r2, [sp, #36]	; 0x24
 801d920:	f89a 3000 	ldrb.w	r3, [sl]
 801d924:	2b00      	cmp	r3, #0
 801d926:	f000 80a2 	beq.w	801da6e <_vfiprintf_r+0x20e>
 801d92a:	2300      	movs	r3, #0
 801d92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d934:	f10a 0a01 	add.w	sl, sl, #1
 801d938:	9304      	str	r3, [sp, #16]
 801d93a:	9307      	str	r3, [sp, #28]
 801d93c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d940:	931a      	str	r3, [sp, #104]	; 0x68
 801d942:	4654      	mov	r4, sl
 801d944:	2205      	movs	r2, #5
 801d946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d94a:	4858      	ldr	r0, [pc, #352]	; (801daac <_vfiprintf_r+0x24c>)
 801d94c:	f7e2 fc48 	bl	80001e0 <memchr>
 801d950:	9a04      	ldr	r2, [sp, #16]
 801d952:	b9d8      	cbnz	r0, 801d98c <_vfiprintf_r+0x12c>
 801d954:	06d1      	lsls	r1, r2, #27
 801d956:	bf44      	itt	mi
 801d958:	2320      	movmi	r3, #32
 801d95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d95e:	0713      	lsls	r3, r2, #28
 801d960:	bf44      	itt	mi
 801d962:	232b      	movmi	r3, #43	; 0x2b
 801d964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d968:	f89a 3000 	ldrb.w	r3, [sl]
 801d96c:	2b2a      	cmp	r3, #42	; 0x2a
 801d96e:	d015      	beq.n	801d99c <_vfiprintf_r+0x13c>
 801d970:	9a07      	ldr	r2, [sp, #28]
 801d972:	4654      	mov	r4, sl
 801d974:	2000      	movs	r0, #0
 801d976:	f04f 0c0a 	mov.w	ip, #10
 801d97a:	4621      	mov	r1, r4
 801d97c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d980:	3b30      	subs	r3, #48	; 0x30
 801d982:	2b09      	cmp	r3, #9
 801d984:	d94e      	bls.n	801da24 <_vfiprintf_r+0x1c4>
 801d986:	b1b0      	cbz	r0, 801d9b6 <_vfiprintf_r+0x156>
 801d988:	9207      	str	r2, [sp, #28]
 801d98a:	e014      	b.n	801d9b6 <_vfiprintf_r+0x156>
 801d98c:	eba0 0308 	sub.w	r3, r0, r8
 801d990:	fa09 f303 	lsl.w	r3, r9, r3
 801d994:	4313      	orrs	r3, r2
 801d996:	9304      	str	r3, [sp, #16]
 801d998:	46a2      	mov	sl, r4
 801d99a:	e7d2      	b.n	801d942 <_vfiprintf_r+0xe2>
 801d99c:	9b03      	ldr	r3, [sp, #12]
 801d99e:	1d19      	adds	r1, r3, #4
 801d9a0:	681b      	ldr	r3, [r3, #0]
 801d9a2:	9103      	str	r1, [sp, #12]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	bfbb      	ittet	lt
 801d9a8:	425b      	neglt	r3, r3
 801d9aa:	f042 0202 	orrlt.w	r2, r2, #2
 801d9ae:	9307      	strge	r3, [sp, #28]
 801d9b0:	9307      	strlt	r3, [sp, #28]
 801d9b2:	bfb8      	it	lt
 801d9b4:	9204      	strlt	r2, [sp, #16]
 801d9b6:	7823      	ldrb	r3, [r4, #0]
 801d9b8:	2b2e      	cmp	r3, #46	; 0x2e
 801d9ba:	d10c      	bne.n	801d9d6 <_vfiprintf_r+0x176>
 801d9bc:	7863      	ldrb	r3, [r4, #1]
 801d9be:	2b2a      	cmp	r3, #42	; 0x2a
 801d9c0:	d135      	bne.n	801da2e <_vfiprintf_r+0x1ce>
 801d9c2:	9b03      	ldr	r3, [sp, #12]
 801d9c4:	1d1a      	adds	r2, r3, #4
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	9203      	str	r2, [sp, #12]
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	bfb8      	it	lt
 801d9ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d9d2:	3402      	adds	r4, #2
 801d9d4:	9305      	str	r3, [sp, #20]
 801d9d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801dabc <_vfiprintf_r+0x25c>
 801d9da:	7821      	ldrb	r1, [r4, #0]
 801d9dc:	2203      	movs	r2, #3
 801d9de:	4650      	mov	r0, sl
 801d9e0:	f7e2 fbfe 	bl	80001e0 <memchr>
 801d9e4:	b140      	cbz	r0, 801d9f8 <_vfiprintf_r+0x198>
 801d9e6:	2340      	movs	r3, #64	; 0x40
 801d9e8:	eba0 000a 	sub.w	r0, r0, sl
 801d9ec:	fa03 f000 	lsl.w	r0, r3, r0
 801d9f0:	9b04      	ldr	r3, [sp, #16]
 801d9f2:	4303      	orrs	r3, r0
 801d9f4:	3401      	adds	r4, #1
 801d9f6:	9304      	str	r3, [sp, #16]
 801d9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9fc:	482c      	ldr	r0, [pc, #176]	; (801dab0 <_vfiprintf_r+0x250>)
 801d9fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da02:	2206      	movs	r2, #6
 801da04:	f7e2 fbec 	bl	80001e0 <memchr>
 801da08:	2800      	cmp	r0, #0
 801da0a:	d03f      	beq.n	801da8c <_vfiprintf_r+0x22c>
 801da0c:	4b29      	ldr	r3, [pc, #164]	; (801dab4 <_vfiprintf_r+0x254>)
 801da0e:	bb1b      	cbnz	r3, 801da58 <_vfiprintf_r+0x1f8>
 801da10:	9b03      	ldr	r3, [sp, #12]
 801da12:	3307      	adds	r3, #7
 801da14:	f023 0307 	bic.w	r3, r3, #7
 801da18:	3308      	adds	r3, #8
 801da1a:	9303      	str	r3, [sp, #12]
 801da1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da1e:	443b      	add	r3, r7
 801da20:	9309      	str	r3, [sp, #36]	; 0x24
 801da22:	e767      	b.n	801d8f4 <_vfiprintf_r+0x94>
 801da24:	fb0c 3202 	mla	r2, ip, r2, r3
 801da28:	460c      	mov	r4, r1
 801da2a:	2001      	movs	r0, #1
 801da2c:	e7a5      	b.n	801d97a <_vfiprintf_r+0x11a>
 801da2e:	2300      	movs	r3, #0
 801da30:	3401      	adds	r4, #1
 801da32:	9305      	str	r3, [sp, #20]
 801da34:	4619      	mov	r1, r3
 801da36:	f04f 0c0a 	mov.w	ip, #10
 801da3a:	4620      	mov	r0, r4
 801da3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da40:	3a30      	subs	r2, #48	; 0x30
 801da42:	2a09      	cmp	r2, #9
 801da44:	d903      	bls.n	801da4e <_vfiprintf_r+0x1ee>
 801da46:	2b00      	cmp	r3, #0
 801da48:	d0c5      	beq.n	801d9d6 <_vfiprintf_r+0x176>
 801da4a:	9105      	str	r1, [sp, #20]
 801da4c:	e7c3      	b.n	801d9d6 <_vfiprintf_r+0x176>
 801da4e:	fb0c 2101 	mla	r1, ip, r1, r2
 801da52:	4604      	mov	r4, r0
 801da54:	2301      	movs	r3, #1
 801da56:	e7f0      	b.n	801da3a <_vfiprintf_r+0x1da>
 801da58:	ab03      	add	r3, sp, #12
 801da5a:	9300      	str	r3, [sp, #0]
 801da5c:	462a      	mov	r2, r5
 801da5e:	4b16      	ldr	r3, [pc, #88]	; (801dab8 <_vfiprintf_r+0x258>)
 801da60:	a904      	add	r1, sp, #16
 801da62:	4630      	mov	r0, r6
 801da64:	f7fc f892 	bl	8019b8c <_printf_float>
 801da68:	4607      	mov	r7, r0
 801da6a:	1c78      	adds	r0, r7, #1
 801da6c:	d1d6      	bne.n	801da1c <_vfiprintf_r+0x1bc>
 801da6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801da70:	07d9      	lsls	r1, r3, #31
 801da72:	d405      	bmi.n	801da80 <_vfiprintf_r+0x220>
 801da74:	89ab      	ldrh	r3, [r5, #12]
 801da76:	059a      	lsls	r2, r3, #22
 801da78:	d402      	bmi.n	801da80 <_vfiprintf_r+0x220>
 801da7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801da7c:	f000 faa1 	bl	801dfc2 <__retarget_lock_release_recursive>
 801da80:	89ab      	ldrh	r3, [r5, #12]
 801da82:	065b      	lsls	r3, r3, #25
 801da84:	f53f af12 	bmi.w	801d8ac <_vfiprintf_r+0x4c>
 801da88:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da8a:	e711      	b.n	801d8b0 <_vfiprintf_r+0x50>
 801da8c:	ab03      	add	r3, sp, #12
 801da8e:	9300      	str	r3, [sp, #0]
 801da90:	462a      	mov	r2, r5
 801da92:	4b09      	ldr	r3, [pc, #36]	; (801dab8 <_vfiprintf_r+0x258>)
 801da94:	a904      	add	r1, sp, #16
 801da96:	4630      	mov	r0, r6
 801da98:	f7fc fb1c 	bl	801a0d4 <_printf_i>
 801da9c:	e7e4      	b.n	801da68 <_vfiprintf_r+0x208>
 801da9e:	bf00      	nop
 801daa0:	0802171c 	.word	0x0802171c
 801daa4:	0802173c 	.word	0x0802173c
 801daa8:	080216fc 	.word	0x080216fc
 801daac:	080216ac 	.word	0x080216ac
 801dab0:	080216b6 	.word	0x080216b6
 801dab4:	08019b8d 	.word	0x08019b8d
 801dab8:	0801d83b 	.word	0x0801d83b
 801dabc:	080216b2 	.word	0x080216b2

0801dac0 <__swbuf_r>:
 801dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dac2:	460e      	mov	r6, r1
 801dac4:	4614      	mov	r4, r2
 801dac6:	4605      	mov	r5, r0
 801dac8:	b118      	cbz	r0, 801dad2 <__swbuf_r+0x12>
 801daca:	6983      	ldr	r3, [r0, #24]
 801dacc:	b90b      	cbnz	r3, 801dad2 <__swbuf_r+0x12>
 801dace:	f000 f9d9 	bl	801de84 <__sinit>
 801dad2:	4b21      	ldr	r3, [pc, #132]	; (801db58 <__swbuf_r+0x98>)
 801dad4:	429c      	cmp	r4, r3
 801dad6:	d12b      	bne.n	801db30 <__swbuf_r+0x70>
 801dad8:	686c      	ldr	r4, [r5, #4]
 801dada:	69a3      	ldr	r3, [r4, #24]
 801dadc:	60a3      	str	r3, [r4, #8]
 801dade:	89a3      	ldrh	r3, [r4, #12]
 801dae0:	071a      	lsls	r2, r3, #28
 801dae2:	d52f      	bpl.n	801db44 <__swbuf_r+0x84>
 801dae4:	6923      	ldr	r3, [r4, #16]
 801dae6:	b36b      	cbz	r3, 801db44 <__swbuf_r+0x84>
 801dae8:	6923      	ldr	r3, [r4, #16]
 801daea:	6820      	ldr	r0, [r4, #0]
 801daec:	1ac0      	subs	r0, r0, r3
 801daee:	6963      	ldr	r3, [r4, #20]
 801daf0:	b2f6      	uxtb	r6, r6
 801daf2:	4283      	cmp	r3, r0
 801daf4:	4637      	mov	r7, r6
 801daf6:	dc04      	bgt.n	801db02 <__swbuf_r+0x42>
 801daf8:	4621      	mov	r1, r4
 801dafa:	4628      	mov	r0, r5
 801dafc:	f000 f92e 	bl	801dd5c <_fflush_r>
 801db00:	bb30      	cbnz	r0, 801db50 <__swbuf_r+0x90>
 801db02:	68a3      	ldr	r3, [r4, #8]
 801db04:	3b01      	subs	r3, #1
 801db06:	60a3      	str	r3, [r4, #8]
 801db08:	6823      	ldr	r3, [r4, #0]
 801db0a:	1c5a      	adds	r2, r3, #1
 801db0c:	6022      	str	r2, [r4, #0]
 801db0e:	701e      	strb	r6, [r3, #0]
 801db10:	6963      	ldr	r3, [r4, #20]
 801db12:	3001      	adds	r0, #1
 801db14:	4283      	cmp	r3, r0
 801db16:	d004      	beq.n	801db22 <__swbuf_r+0x62>
 801db18:	89a3      	ldrh	r3, [r4, #12]
 801db1a:	07db      	lsls	r3, r3, #31
 801db1c:	d506      	bpl.n	801db2c <__swbuf_r+0x6c>
 801db1e:	2e0a      	cmp	r6, #10
 801db20:	d104      	bne.n	801db2c <__swbuf_r+0x6c>
 801db22:	4621      	mov	r1, r4
 801db24:	4628      	mov	r0, r5
 801db26:	f000 f919 	bl	801dd5c <_fflush_r>
 801db2a:	b988      	cbnz	r0, 801db50 <__swbuf_r+0x90>
 801db2c:	4638      	mov	r0, r7
 801db2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db30:	4b0a      	ldr	r3, [pc, #40]	; (801db5c <__swbuf_r+0x9c>)
 801db32:	429c      	cmp	r4, r3
 801db34:	d101      	bne.n	801db3a <__swbuf_r+0x7a>
 801db36:	68ac      	ldr	r4, [r5, #8]
 801db38:	e7cf      	b.n	801dada <__swbuf_r+0x1a>
 801db3a:	4b09      	ldr	r3, [pc, #36]	; (801db60 <__swbuf_r+0xa0>)
 801db3c:	429c      	cmp	r4, r3
 801db3e:	bf08      	it	eq
 801db40:	68ec      	ldreq	r4, [r5, #12]
 801db42:	e7ca      	b.n	801dada <__swbuf_r+0x1a>
 801db44:	4621      	mov	r1, r4
 801db46:	4628      	mov	r0, r5
 801db48:	f000 f80c 	bl	801db64 <__swsetup_r>
 801db4c:	2800      	cmp	r0, #0
 801db4e:	d0cb      	beq.n	801dae8 <__swbuf_r+0x28>
 801db50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801db54:	e7ea      	b.n	801db2c <__swbuf_r+0x6c>
 801db56:	bf00      	nop
 801db58:	0802171c 	.word	0x0802171c
 801db5c:	0802173c 	.word	0x0802173c
 801db60:	080216fc 	.word	0x080216fc

0801db64 <__swsetup_r>:
 801db64:	4b32      	ldr	r3, [pc, #200]	; (801dc30 <__swsetup_r+0xcc>)
 801db66:	b570      	push	{r4, r5, r6, lr}
 801db68:	681d      	ldr	r5, [r3, #0]
 801db6a:	4606      	mov	r6, r0
 801db6c:	460c      	mov	r4, r1
 801db6e:	b125      	cbz	r5, 801db7a <__swsetup_r+0x16>
 801db70:	69ab      	ldr	r3, [r5, #24]
 801db72:	b913      	cbnz	r3, 801db7a <__swsetup_r+0x16>
 801db74:	4628      	mov	r0, r5
 801db76:	f000 f985 	bl	801de84 <__sinit>
 801db7a:	4b2e      	ldr	r3, [pc, #184]	; (801dc34 <__swsetup_r+0xd0>)
 801db7c:	429c      	cmp	r4, r3
 801db7e:	d10f      	bne.n	801dba0 <__swsetup_r+0x3c>
 801db80:	686c      	ldr	r4, [r5, #4]
 801db82:	89a3      	ldrh	r3, [r4, #12]
 801db84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801db88:	0719      	lsls	r1, r3, #28
 801db8a:	d42c      	bmi.n	801dbe6 <__swsetup_r+0x82>
 801db8c:	06dd      	lsls	r5, r3, #27
 801db8e:	d411      	bmi.n	801dbb4 <__swsetup_r+0x50>
 801db90:	2309      	movs	r3, #9
 801db92:	6033      	str	r3, [r6, #0]
 801db94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801db98:	81a3      	strh	r3, [r4, #12]
 801db9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801db9e:	e03e      	b.n	801dc1e <__swsetup_r+0xba>
 801dba0:	4b25      	ldr	r3, [pc, #148]	; (801dc38 <__swsetup_r+0xd4>)
 801dba2:	429c      	cmp	r4, r3
 801dba4:	d101      	bne.n	801dbaa <__swsetup_r+0x46>
 801dba6:	68ac      	ldr	r4, [r5, #8]
 801dba8:	e7eb      	b.n	801db82 <__swsetup_r+0x1e>
 801dbaa:	4b24      	ldr	r3, [pc, #144]	; (801dc3c <__swsetup_r+0xd8>)
 801dbac:	429c      	cmp	r4, r3
 801dbae:	bf08      	it	eq
 801dbb0:	68ec      	ldreq	r4, [r5, #12]
 801dbb2:	e7e6      	b.n	801db82 <__swsetup_r+0x1e>
 801dbb4:	0758      	lsls	r0, r3, #29
 801dbb6:	d512      	bpl.n	801dbde <__swsetup_r+0x7a>
 801dbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dbba:	b141      	cbz	r1, 801dbce <__swsetup_r+0x6a>
 801dbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dbc0:	4299      	cmp	r1, r3
 801dbc2:	d002      	beq.n	801dbca <__swsetup_r+0x66>
 801dbc4:	4630      	mov	r0, r6
 801dbc6:	f7ff fb77 	bl	801d2b8 <_free_r>
 801dbca:	2300      	movs	r3, #0
 801dbcc:	6363      	str	r3, [r4, #52]	; 0x34
 801dbce:	89a3      	ldrh	r3, [r4, #12]
 801dbd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dbd4:	81a3      	strh	r3, [r4, #12]
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	6063      	str	r3, [r4, #4]
 801dbda:	6923      	ldr	r3, [r4, #16]
 801dbdc:	6023      	str	r3, [r4, #0]
 801dbde:	89a3      	ldrh	r3, [r4, #12]
 801dbe0:	f043 0308 	orr.w	r3, r3, #8
 801dbe4:	81a3      	strh	r3, [r4, #12]
 801dbe6:	6923      	ldr	r3, [r4, #16]
 801dbe8:	b94b      	cbnz	r3, 801dbfe <__swsetup_r+0x9a>
 801dbea:	89a3      	ldrh	r3, [r4, #12]
 801dbec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dbf4:	d003      	beq.n	801dbfe <__swsetup_r+0x9a>
 801dbf6:	4621      	mov	r1, r4
 801dbf8:	4630      	mov	r0, r6
 801dbfa:	f000 fa07 	bl	801e00c <__smakebuf_r>
 801dbfe:	89a0      	ldrh	r0, [r4, #12]
 801dc00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dc04:	f010 0301 	ands.w	r3, r0, #1
 801dc08:	d00a      	beq.n	801dc20 <__swsetup_r+0xbc>
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	60a3      	str	r3, [r4, #8]
 801dc0e:	6963      	ldr	r3, [r4, #20]
 801dc10:	425b      	negs	r3, r3
 801dc12:	61a3      	str	r3, [r4, #24]
 801dc14:	6923      	ldr	r3, [r4, #16]
 801dc16:	b943      	cbnz	r3, 801dc2a <__swsetup_r+0xc6>
 801dc18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dc1c:	d1ba      	bne.n	801db94 <__swsetup_r+0x30>
 801dc1e:	bd70      	pop	{r4, r5, r6, pc}
 801dc20:	0781      	lsls	r1, r0, #30
 801dc22:	bf58      	it	pl
 801dc24:	6963      	ldrpl	r3, [r4, #20]
 801dc26:	60a3      	str	r3, [r4, #8]
 801dc28:	e7f4      	b.n	801dc14 <__swsetup_r+0xb0>
 801dc2a:	2000      	movs	r0, #0
 801dc2c:	e7f7      	b.n	801dc1e <__swsetup_r+0xba>
 801dc2e:	bf00      	nop
 801dc30:	20000284 	.word	0x20000284
 801dc34:	0802171c 	.word	0x0802171c
 801dc38:	0802173c 	.word	0x0802173c
 801dc3c:	080216fc 	.word	0x080216fc

0801dc40 <abort>:
 801dc40:	b508      	push	{r3, lr}
 801dc42:	2006      	movs	r0, #6
 801dc44:	f000 fa52 	bl	801e0ec <raise>
 801dc48:	2001      	movs	r0, #1
 801dc4a:	f7ee fa71 	bl	800c130 <_exit>
	...

0801dc50 <__sflush_r>:
 801dc50:	898a      	ldrh	r2, [r1, #12]
 801dc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc56:	4605      	mov	r5, r0
 801dc58:	0710      	lsls	r0, r2, #28
 801dc5a:	460c      	mov	r4, r1
 801dc5c:	d458      	bmi.n	801dd10 <__sflush_r+0xc0>
 801dc5e:	684b      	ldr	r3, [r1, #4]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	dc05      	bgt.n	801dc70 <__sflush_r+0x20>
 801dc64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	dc02      	bgt.n	801dc70 <__sflush_r+0x20>
 801dc6a:	2000      	movs	r0, #0
 801dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc72:	2e00      	cmp	r6, #0
 801dc74:	d0f9      	beq.n	801dc6a <__sflush_r+0x1a>
 801dc76:	2300      	movs	r3, #0
 801dc78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dc7c:	682f      	ldr	r7, [r5, #0]
 801dc7e:	602b      	str	r3, [r5, #0]
 801dc80:	d032      	beq.n	801dce8 <__sflush_r+0x98>
 801dc82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dc84:	89a3      	ldrh	r3, [r4, #12]
 801dc86:	075a      	lsls	r2, r3, #29
 801dc88:	d505      	bpl.n	801dc96 <__sflush_r+0x46>
 801dc8a:	6863      	ldr	r3, [r4, #4]
 801dc8c:	1ac0      	subs	r0, r0, r3
 801dc8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dc90:	b10b      	cbz	r3, 801dc96 <__sflush_r+0x46>
 801dc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc94:	1ac0      	subs	r0, r0, r3
 801dc96:	2300      	movs	r3, #0
 801dc98:	4602      	mov	r2, r0
 801dc9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dc9c:	6a21      	ldr	r1, [r4, #32]
 801dc9e:	4628      	mov	r0, r5
 801dca0:	47b0      	blx	r6
 801dca2:	1c43      	adds	r3, r0, #1
 801dca4:	89a3      	ldrh	r3, [r4, #12]
 801dca6:	d106      	bne.n	801dcb6 <__sflush_r+0x66>
 801dca8:	6829      	ldr	r1, [r5, #0]
 801dcaa:	291d      	cmp	r1, #29
 801dcac:	d82c      	bhi.n	801dd08 <__sflush_r+0xb8>
 801dcae:	4a2a      	ldr	r2, [pc, #168]	; (801dd58 <__sflush_r+0x108>)
 801dcb0:	40ca      	lsrs	r2, r1
 801dcb2:	07d6      	lsls	r6, r2, #31
 801dcb4:	d528      	bpl.n	801dd08 <__sflush_r+0xb8>
 801dcb6:	2200      	movs	r2, #0
 801dcb8:	6062      	str	r2, [r4, #4]
 801dcba:	04d9      	lsls	r1, r3, #19
 801dcbc:	6922      	ldr	r2, [r4, #16]
 801dcbe:	6022      	str	r2, [r4, #0]
 801dcc0:	d504      	bpl.n	801dccc <__sflush_r+0x7c>
 801dcc2:	1c42      	adds	r2, r0, #1
 801dcc4:	d101      	bne.n	801dcca <__sflush_r+0x7a>
 801dcc6:	682b      	ldr	r3, [r5, #0]
 801dcc8:	b903      	cbnz	r3, 801dccc <__sflush_r+0x7c>
 801dcca:	6560      	str	r0, [r4, #84]	; 0x54
 801dccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dcce:	602f      	str	r7, [r5, #0]
 801dcd0:	2900      	cmp	r1, #0
 801dcd2:	d0ca      	beq.n	801dc6a <__sflush_r+0x1a>
 801dcd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dcd8:	4299      	cmp	r1, r3
 801dcda:	d002      	beq.n	801dce2 <__sflush_r+0x92>
 801dcdc:	4628      	mov	r0, r5
 801dcde:	f7ff faeb 	bl	801d2b8 <_free_r>
 801dce2:	2000      	movs	r0, #0
 801dce4:	6360      	str	r0, [r4, #52]	; 0x34
 801dce6:	e7c1      	b.n	801dc6c <__sflush_r+0x1c>
 801dce8:	6a21      	ldr	r1, [r4, #32]
 801dcea:	2301      	movs	r3, #1
 801dcec:	4628      	mov	r0, r5
 801dcee:	47b0      	blx	r6
 801dcf0:	1c41      	adds	r1, r0, #1
 801dcf2:	d1c7      	bne.n	801dc84 <__sflush_r+0x34>
 801dcf4:	682b      	ldr	r3, [r5, #0]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d0c4      	beq.n	801dc84 <__sflush_r+0x34>
 801dcfa:	2b1d      	cmp	r3, #29
 801dcfc:	d001      	beq.n	801dd02 <__sflush_r+0xb2>
 801dcfe:	2b16      	cmp	r3, #22
 801dd00:	d101      	bne.n	801dd06 <__sflush_r+0xb6>
 801dd02:	602f      	str	r7, [r5, #0]
 801dd04:	e7b1      	b.n	801dc6a <__sflush_r+0x1a>
 801dd06:	89a3      	ldrh	r3, [r4, #12]
 801dd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd0c:	81a3      	strh	r3, [r4, #12]
 801dd0e:	e7ad      	b.n	801dc6c <__sflush_r+0x1c>
 801dd10:	690f      	ldr	r7, [r1, #16]
 801dd12:	2f00      	cmp	r7, #0
 801dd14:	d0a9      	beq.n	801dc6a <__sflush_r+0x1a>
 801dd16:	0793      	lsls	r3, r2, #30
 801dd18:	680e      	ldr	r6, [r1, #0]
 801dd1a:	bf08      	it	eq
 801dd1c:	694b      	ldreq	r3, [r1, #20]
 801dd1e:	600f      	str	r7, [r1, #0]
 801dd20:	bf18      	it	ne
 801dd22:	2300      	movne	r3, #0
 801dd24:	eba6 0807 	sub.w	r8, r6, r7
 801dd28:	608b      	str	r3, [r1, #8]
 801dd2a:	f1b8 0f00 	cmp.w	r8, #0
 801dd2e:	dd9c      	ble.n	801dc6a <__sflush_r+0x1a>
 801dd30:	6a21      	ldr	r1, [r4, #32]
 801dd32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dd34:	4643      	mov	r3, r8
 801dd36:	463a      	mov	r2, r7
 801dd38:	4628      	mov	r0, r5
 801dd3a:	47b0      	blx	r6
 801dd3c:	2800      	cmp	r0, #0
 801dd3e:	dc06      	bgt.n	801dd4e <__sflush_r+0xfe>
 801dd40:	89a3      	ldrh	r3, [r4, #12]
 801dd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd46:	81a3      	strh	r3, [r4, #12]
 801dd48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dd4c:	e78e      	b.n	801dc6c <__sflush_r+0x1c>
 801dd4e:	4407      	add	r7, r0
 801dd50:	eba8 0800 	sub.w	r8, r8, r0
 801dd54:	e7e9      	b.n	801dd2a <__sflush_r+0xda>
 801dd56:	bf00      	nop
 801dd58:	20400001 	.word	0x20400001

0801dd5c <_fflush_r>:
 801dd5c:	b538      	push	{r3, r4, r5, lr}
 801dd5e:	690b      	ldr	r3, [r1, #16]
 801dd60:	4605      	mov	r5, r0
 801dd62:	460c      	mov	r4, r1
 801dd64:	b913      	cbnz	r3, 801dd6c <_fflush_r+0x10>
 801dd66:	2500      	movs	r5, #0
 801dd68:	4628      	mov	r0, r5
 801dd6a:	bd38      	pop	{r3, r4, r5, pc}
 801dd6c:	b118      	cbz	r0, 801dd76 <_fflush_r+0x1a>
 801dd6e:	6983      	ldr	r3, [r0, #24]
 801dd70:	b90b      	cbnz	r3, 801dd76 <_fflush_r+0x1a>
 801dd72:	f000 f887 	bl	801de84 <__sinit>
 801dd76:	4b14      	ldr	r3, [pc, #80]	; (801ddc8 <_fflush_r+0x6c>)
 801dd78:	429c      	cmp	r4, r3
 801dd7a:	d11b      	bne.n	801ddb4 <_fflush_r+0x58>
 801dd7c:	686c      	ldr	r4, [r5, #4]
 801dd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd82:	2b00      	cmp	r3, #0
 801dd84:	d0ef      	beq.n	801dd66 <_fflush_r+0xa>
 801dd86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dd88:	07d0      	lsls	r0, r2, #31
 801dd8a:	d404      	bmi.n	801dd96 <_fflush_r+0x3a>
 801dd8c:	0599      	lsls	r1, r3, #22
 801dd8e:	d402      	bmi.n	801dd96 <_fflush_r+0x3a>
 801dd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd92:	f000 f915 	bl	801dfc0 <__retarget_lock_acquire_recursive>
 801dd96:	4628      	mov	r0, r5
 801dd98:	4621      	mov	r1, r4
 801dd9a:	f7ff ff59 	bl	801dc50 <__sflush_r>
 801dd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dda0:	07da      	lsls	r2, r3, #31
 801dda2:	4605      	mov	r5, r0
 801dda4:	d4e0      	bmi.n	801dd68 <_fflush_r+0xc>
 801dda6:	89a3      	ldrh	r3, [r4, #12]
 801dda8:	059b      	lsls	r3, r3, #22
 801ddaa:	d4dd      	bmi.n	801dd68 <_fflush_r+0xc>
 801ddac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ddae:	f000 f908 	bl	801dfc2 <__retarget_lock_release_recursive>
 801ddb2:	e7d9      	b.n	801dd68 <_fflush_r+0xc>
 801ddb4:	4b05      	ldr	r3, [pc, #20]	; (801ddcc <_fflush_r+0x70>)
 801ddb6:	429c      	cmp	r4, r3
 801ddb8:	d101      	bne.n	801ddbe <_fflush_r+0x62>
 801ddba:	68ac      	ldr	r4, [r5, #8]
 801ddbc:	e7df      	b.n	801dd7e <_fflush_r+0x22>
 801ddbe:	4b04      	ldr	r3, [pc, #16]	; (801ddd0 <_fflush_r+0x74>)
 801ddc0:	429c      	cmp	r4, r3
 801ddc2:	bf08      	it	eq
 801ddc4:	68ec      	ldreq	r4, [r5, #12]
 801ddc6:	e7da      	b.n	801dd7e <_fflush_r+0x22>
 801ddc8:	0802171c 	.word	0x0802171c
 801ddcc:	0802173c 	.word	0x0802173c
 801ddd0:	080216fc 	.word	0x080216fc

0801ddd4 <std>:
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	b510      	push	{r4, lr}
 801ddd8:	4604      	mov	r4, r0
 801ddda:	e9c0 3300 	strd	r3, r3, [r0]
 801ddde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dde2:	6083      	str	r3, [r0, #8]
 801dde4:	8181      	strh	r1, [r0, #12]
 801dde6:	6643      	str	r3, [r0, #100]	; 0x64
 801dde8:	81c2      	strh	r2, [r0, #14]
 801ddea:	6183      	str	r3, [r0, #24]
 801ddec:	4619      	mov	r1, r3
 801ddee:	2208      	movs	r2, #8
 801ddf0:	305c      	adds	r0, #92	; 0x5c
 801ddf2:	f7fb fe23 	bl	8019a3c <memset>
 801ddf6:	4b05      	ldr	r3, [pc, #20]	; (801de0c <std+0x38>)
 801ddf8:	6263      	str	r3, [r4, #36]	; 0x24
 801ddfa:	4b05      	ldr	r3, [pc, #20]	; (801de10 <std+0x3c>)
 801ddfc:	62a3      	str	r3, [r4, #40]	; 0x28
 801ddfe:	4b05      	ldr	r3, [pc, #20]	; (801de14 <std+0x40>)
 801de00:	62e3      	str	r3, [r4, #44]	; 0x2c
 801de02:	4b05      	ldr	r3, [pc, #20]	; (801de18 <std+0x44>)
 801de04:	6224      	str	r4, [r4, #32]
 801de06:	6323      	str	r3, [r4, #48]	; 0x30
 801de08:	bd10      	pop	{r4, pc}
 801de0a:	bf00      	nop
 801de0c:	0801e125 	.word	0x0801e125
 801de10:	0801e147 	.word	0x0801e147
 801de14:	0801e17f 	.word	0x0801e17f
 801de18:	0801e1a3 	.word	0x0801e1a3

0801de1c <_cleanup_r>:
 801de1c:	4901      	ldr	r1, [pc, #4]	; (801de24 <_cleanup_r+0x8>)
 801de1e:	f000 b8af 	b.w	801df80 <_fwalk_reent>
 801de22:	bf00      	nop
 801de24:	0801dd5d 	.word	0x0801dd5d

0801de28 <__sfmoreglue>:
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	1e4a      	subs	r2, r1, #1
 801de2c:	2568      	movs	r5, #104	; 0x68
 801de2e:	4355      	muls	r5, r2
 801de30:	460e      	mov	r6, r1
 801de32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801de36:	f7ff fa8f 	bl	801d358 <_malloc_r>
 801de3a:	4604      	mov	r4, r0
 801de3c:	b140      	cbz	r0, 801de50 <__sfmoreglue+0x28>
 801de3e:	2100      	movs	r1, #0
 801de40:	e9c0 1600 	strd	r1, r6, [r0]
 801de44:	300c      	adds	r0, #12
 801de46:	60a0      	str	r0, [r4, #8]
 801de48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801de4c:	f7fb fdf6 	bl	8019a3c <memset>
 801de50:	4620      	mov	r0, r4
 801de52:	bd70      	pop	{r4, r5, r6, pc}

0801de54 <__sfp_lock_acquire>:
 801de54:	4801      	ldr	r0, [pc, #4]	; (801de5c <__sfp_lock_acquire+0x8>)
 801de56:	f000 b8b3 	b.w	801dfc0 <__retarget_lock_acquire_recursive>
 801de5a:	bf00      	nop
 801de5c:	20009d50 	.word	0x20009d50

0801de60 <__sfp_lock_release>:
 801de60:	4801      	ldr	r0, [pc, #4]	; (801de68 <__sfp_lock_release+0x8>)
 801de62:	f000 b8ae 	b.w	801dfc2 <__retarget_lock_release_recursive>
 801de66:	bf00      	nop
 801de68:	20009d50 	.word	0x20009d50

0801de6c <__sinit_lock_acquire>:
 801de6c:	4801      	ldr	r0, [pc, #4]	; (801de74 <__sinit_lock_acquire+0x8>)
 801de6e:	f000 b8a7 	b.w	801dfc0 <__retarget_lock_acquire_recursive>
 801de72:	bf00      	nop
 801de74:	20009d4b 	.word	0x20009d4b

0801de78 <__sinit_lock_release>:
 801de78:	4801      	ldr	r0, [pc, #4]	; (801de80 <__sinit_lock_release+0x8>)
 801de7a:	f000 b8a2 	b.w	801dfc2 <__retarget_lock_release_recursive>
 801de7e:	bf00      	nop
 801de80:	20009d4b 	.word	0x20009d4b

0801de84 <__sinit>:
 801de84:	b510      	push	{r4, lr}
 801de86:	4604      	mov	r4, r0
 801de88:	f7ff fff0 	bl	801de6c <__sinit_lock_acquire>
 801de8c:	69a3      	ldr	r3, [r4, #24]
 801de8e:	b11b      	cbz	r3, 801de98 <__sinit+0x14>
 801de90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de94:	f7ff bff0 	b.w	801de78 <__sinit_lock_release>
 801de98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de9c:	6523      	str	r3, [r4, #80]	; 0x50
 801de9e:	4b13      	ldr	r3, [pc, #76]	; (801deec <__sinit+0x68>)
 801dea0:	4a13      	ldr	r2, [pc, #76]	; (801def0 <__sinit+0x6c>)
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	62a2      	str	r2, [r4, #40]	; 0x28
 801dea6:	42a3      	cmp	r3, r4
 801dea8:	bf04      	itt	eq
 801deaa:	2301      	moveq	r3, #1
 801deac:	61a3      	streq	r3, [r4, #24]
 801deae:	4620      	mov	r0, r4
 801deb0:	f000 f820 	bl	801def4 <__sfp>
 801deb4:	6060      	str	r0, [r4, #4]
 801deb6:	4620      	mov	r0, r4
 801deb8:	f000 f81c 	bl	801def4 <__sfp>
 801debc:	60a0      	str	r0, [r4, #8]
 801debe:	4620      	mov	r0, r4
 801dec0:	f000 f818 	bl	801def4 <__sfp>
 801dec4:	2200      	movs	r2, #0
 801dec6:	60e0      	str	r0, [r4, #12]
 801dec8:	2104      	movs	r1, #4
 801deca:	6860      	ldr	r0, [r4, #4]
 801decc:	f7ff ff82 	bl	801ddd4 <std>
 801ded0:	68a0      	ldr	r0, [r4, #8]
 801ded2:	2201      	movs	r2, #1
 801ded4:	2109      	movs	r1, #9
 801ded6:	f7ff ff7d 	bl	801ddd4 <std>
 801deda:	68e0      	ldr	r0, [r4, #12]
 801dedc:	2202      	movs	r2, #2
 801dede:	2112      	movs	r1, #18
 801dee0:	f7ff ff78 	bl	801ddd4 <std>
 801dee4:	2301      	movs	r3, #1
 801dee6:	61a3      	str	r3, [r4, #24]
 801dee8:	e7d2      	b.n	801de90 <__sinit+0xc>
 801deea:	bf00      	nop
 801deec:	080212a4 	.word	0x080212a4
 801def0:	0801de1d 	.word	0x0801de1d

0801def4 <__sfp>:
 801def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801def6:	4607      	mov	r7, r0
 801def8:	f7ff ffac 	bl	801de54 <__sfp_lock_acquire>
 801defc:	4b1e      	ldr	r3, [pc, #120]	; (801df78 <__sfp+0x84>)
 801defe:	681e      	ldr	r6, [r3, #0]
 801df00:	69b3      	ldr	r3, [r6, #24]
 801df02:	b913      	cbnz	r3, 801df0a <__sfp+0x16>
 801df04:	4630      	mov	r0, r6
 801df06:	f7ff ffbd 	bl	801de84 <__sinit>
 801df0a:	3648      	adds	r6, #72	; 0x48
 801df0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801df10:	3b01      	subs	r3, #1
 801df12:	d503      	bpl.n	801df1c <__sfp+0x28>
 801df14:	6833      	ldr	r3, [r6, #0]
 801df16:	b30b      	cbz	r3, 801df5c <__sfp+0x68>
 801df18:	6836      	ldr	r6, [r6, #0]
 801df1a:	e7f7      	b.n	801df0c <__sfp+0x18>
 801df1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801df20:	b9d5      	cbnz	r5, 801df58 <__sfp+0x64>
 801df22:	4b16      	ldr	r3, [pc, #88]	; (801df7c <__sfp+0x88>)
 801df24:	60e3      	str	r3, [r4, #12]
 801df26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801df2a:	6665      	str	r5, [r4, #100]	; 0x64
 801df2c:	f000 f847 	bl	801dfbe <__retarget_lock_init_recursive>
 801df30:	f7ff ff96 	bl	801de60 <__sfp_lock_release>
 801df34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801df38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801df3c:	6025      	str	r5, [r4, #0]
 801df3e:	61a5      	str	r5, [r4, #24]
 801df40:	2208      	movs	r2, #8
 801df42:	4629      	mov	r1, r5
 801df44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801df48:	f7fb fd78 	bl	8019a3c <memset>
 801df4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801df50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801df54:	4620      	mov	r0, r4
 801df56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df58:	3468      	adds	r4, #104	; 0x68
 801df5a:	e7d9      	b.n	801df10 <__sfp+0x1c>
 801df5c:	2104      	movs	r1, #4
 801df5e:	4638      	mov	r0, r7
 801df60:	f7ff ff62 	bl	801de28 <__sfmoreglue>
 801df64:	4604      	mov	r4, r0
 801df66:	6030      	str	r0, [r6, #0]
 801df68:	2800      	cmp	r0, #0
 801df6a:	d1d5      	bne.n	801df18 <__sfp+0x24>
 801df6c:	f7ff ff78 	bl	801de60 <__sfp_lock_release>
 801df70:	230c      	movs	r3, #12
 801df72:	603b      	str	r3, [r7, #0]
 801df74:	e7ee      	b.n	801df54 <__sfp+0x60>
 801df76:	bf00      	nop
 801df78:	080212a4 	.word	0x080212a4
 801df7c:	ffff0001 	.word	0xffff0001

0801df80 <_fwalk_reent>:
 801df80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df84:	4606      	mov	r6, r0
 801df86:	4688      	mov	r8, r1
 801df88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df8c:	2700      	movs	r7, #0
 801df8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df92:	f1b9 0901 	subs.w	r9, r9, #1
 801df96:	d505      	bpl.n	801dfa4 <_fwalk_reent+0x24>
 801df98:	6824      	ldr	r4, [r4, #0]
 801df9a:	2c00      	cmp	r4, #0
 801df9c:	d1f7      	bne.n	801df8e <_fwalk_reent+0xe>
 801df9e:	4638      	mov	r0, r7
 801dfa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfa4:	89ab      	ldrh	r3, [r5, #12]
 801dfa6:	2b01      	cmp	r3, #1
 801dfa8:	d907      	bls.n	801dfba <_fwalk_reent+0x3a>
 801dfaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dfae:	3301      	adds	r3, #1
 801dfb0:	d003      	beq.n	801dfba <_fwalk_reent+0x3a>
 801dfb2:	4629      	mov	r1, r5
 801dfb4:	4630      	mov	r0, r6
 801dfb6:	47c0      	blx	r8
 801dfb8:	4307      	orrs	r7, r0
 801dfba:	3568      	adds	r5, #104	; 0x68
 801dfbc:	e7e9      	b.n	801df92 <_fwalk_reent+0x12>

0801dfbe <__retarget_lock_init_recursive>:
 801dfbe:	4770      	bx	lr

0801dfc0 <__retarget_lock_acquire_recursive>:
 801dfc0:	4770      	bx	lr

0801dfc2 <__retarget_lock_release_recursive>:
 801dfc2:	4770      	bx	lr

0801dfc4 <__swhatbuf_r>:
 801dfc4:	b570      	push	{r4, r5, r6, lr}
 801dfc6:	460e      	mov	r6, r1
 801dfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfcc:	2900      	cmp	r1, #0
 801dfce:	b096      	sub	sp, #88	; 0x58
 801dfd0:	4614      	mov	r4, r2
 801dfd2:	461d      	mov	r5, r3
 801dfd4:	da07      	bge.n	801dfe6 <__swhatbuf_r+0x22>
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	602b      	str	r3, [r5, #0]
 801dfda:	89b3      	ldrh	r3, [r6, #12]
 801dfdc:	061a      	lsls	r2, r3, #24
 801dfde:	d410      	bmi.n	801e002 <__swhatbuf_r+0x3e>
 801dfe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dfe4:	e00e      	b.n	801e004 <__swhatbuf_r+0x40>
 801dfe6:	466a      	mov	r2, sp
 801dfe8:	f000 f902 	bl	801e1f0 <_fstat_r>
 801dfec:	2800      	cmp	r0, #0
 801dfee:	dbf2      	blt.n	801dfd6 <__swhatbuf_r+0x12>
 801dff0:	9a01      	ldr	r2, [sp, #4]
 801dff2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dff6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dffa:	425a      	negs	r2, r3
 801dffc:	415a      	adcs	r2, r3
 801dffe:	602a      	str	r2, [r5, #0]
 801e000:	e7ee      	b.n	801dfe0 <__swhatbuf_r+0x1c>
 801e002:	2340      	movs	r3, #64	; 0x40
 801e004:	2000      	movs	r0, #0
 801e006:	6023      	str	r3, [r4, #0]
 801e008:	b016      	add	sp, #88	; 0x58
 801e00a:	bd70      	pop	{r4, r5, r6, pc}

0801e00c <__smakebuf_r>:
 801e00c:	898b      	ldrh	r3, [r1, #12]
 801e00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e010:	079d      	lsls	r5, r3, #30
 801e012:	4606      	mov	r6, r0
 801e014:	460c      	mov	r4, r1
 801e016:	d507      	bpl.n	801e028 <__smakebuf_r+0x1c>
 801e018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e01c:	6023      	str	r3, [r4, #0]
 801e01e:	6123      	str	r3, [r4, #16]
 801e020:	2301      	movs	r3, #1
 801e022:	6163      	str	r3, [r4, #20]
 801e024:	b002      	add	sp, #8
 801e026:	bd70      	pop	{r4, r5, r6, pc}
 801e028:	ab01      	add	r3, sp, #4
 801e02a:	466a      	mov	r2, sp
 801e02c:	f7ff ffca 	bl	801dfc4 <__swhatbuf_r>
 801e030:	9900      	ldr	r1, [sp, #0]
 801e032:	4605      	mov	r5, r0
 801e034:	4630      	mov	r0, r6
 801e036:	f7ff f98f 	bl	801d358 <_malloc_r>
 801e03a:	b948      	cbnz	r0, 801e050 <__smakebuf_r+0x44>
 801e03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e040:	059a      	lsls	r2, r3, #22
 801e042:	d4ef      	bmi.n	801e024 <__smakebuf_r+0x18>
 801e044:	f023 0303 	bic.w	r3, r3, #3
 801e048:	f043 0302 	orr.w	r3, r3, #2
 801e04c:	81a3      	strh	r3, [r4, #12]
 801e04e:	e7e3      	b.n	801e018 <__smakebuf_r+0xc>
 801e050:	4b0d      	ldr	r3, [pc, #52]	; (801e088 <__smakebuf_r+0x7c>)
 801e052:	62b3      	str	r3, [r6, #40]	; 0x28
 801e054:	89a3      	ldrh	r3, [r4, #12]
 801e056:	6020      	str	r0, [r4, #0]
 801e058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e05c:	81a3      	strh	r3, [r4, #12]
 801e05e:	9b00      	ldr	r3, [sp, #0]
 801e060:	6163      	str	r3, [r4, #20]
 801e062:	9b01      	ldr	r3, [sp, #4]
 801e064:	6120      	str	r0, [r4, #16]
 801e066:	b15b      	cbz	r3, 801e080 <__smakebuf_r+0x74>
 801e068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e06c:	4630      	mov	r0, r6
 801e06e:	f000 f8d1 	bl	801e214 <_isatty_r>
 801e072:	b128      	cbz	r0, 801e080 <__smakebuf_r+0x74>
 801e074:	89a3      	ldrh	r3, [r4, #12]
 801e076:	f023 0303 	bic.w	r3, r3, #3
 801e07a:	f043 0301 	orr.w	r3, r3, #1
 801e07e:	81a3      	strh	r3, [r4, #12]
 801e080:	89a0      	ldrh	r0, [r4, #12]
 801e082:	4305      	orrs	r5, r0
 801e084:	81a5      	strh	r5, [r4, #12]
 801e086:	e7cd      	b.n	801e024 <__smakebuf_r+0x18>
 801e088:	0801de1d 	.word	0x0801de1d

0801e08c <_malloc_usable_size_r>:
 801e08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e090:	1f18      	subs	r0, r3, #4
 801e092:	2b00      	cmp	r3, #0
 801e094:	bfbc      	itt	lt
 801e096:	580b      	ldrlt	r3, [r1, r0]
 801e098:	18c0      	addlt	r0, r0, r3
 801e09a:	4770      	bx	lr

0801e09c <_raise_r>:
 801e09c:	291f      	cmp	r1, #31
 801e09e:	b538      	push	{r3, r4, r5, lr}
 801e0a0:	4604      	mov	r4, r0
 801e0a2:	460d      	mov	r5, r1
 801e0a4:	d904      	bls.n	801e0b0 <_raise_r+0x14>
 801e0a6:	2316      	movs	r3, #22
 801e0a8:	6003      	str	r3, [r0, #0]
 801e0aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e0ae:	bd38      	pop	{r3, r4, r5, pc}
 801e0b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e0b2:	b112      	cbz	r2, 801e0ba <_raise_r+0x1e>
 801e0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e0b8:	b94b      	cbnz	r3, 801e0ce <_raise_r+0x32>
 801e0ba:	4620      	mov	r0, r4
 801e0bc:	f000 f830 	bl	801e120 <_getpid_r>
 801e0c0:	462a      	mov	r2, r5
 801e0c2:	4601      	mov	r1, r0
 801e0c4:	4620      	mov	r0, r4
 801e0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e0ca:	f000 b817 	b.w	801e0fc <_kill_r>
 801e0ce:	2b01      	cmp	r3, #1
 801e0d0:	d00a      	beq.n	801e0e8 <_raise_r+0x4c>
 801e0d2:	1c59      	adds	r1, r3, #1
 801e0d4:	d103      	bne.n	801e0de <_raise_r+0x42>
 801e0d6:	2316      	movs	r3, #22
 801e0d8:	6003      	str	r3, [r0, #0]
 801e0da:	2001      	movs	r0, #1
 801e0dc:	e7e7      	b.n	801e0ae <_raise_r+0x12>
 801e0de:	2400      	movs	r4, #0
 801e0e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e0e4:	4628      	mov	r0, r5
 801e0e6:	4798      	blx	r3
 801e0e8:	2000      	movs	r0, #0
 801e0ea:	e7e0      	b.n	801e0ae <_raise_r+0x12>

0801e0ec <raise>:
 801e0ec:	4b02      	ldr	r3, [pc, #8]	; (801e0f8 <raise+0xc>)
 801e0ee:	4601      	mov	r1, r0
 801e0f0:	6818      	ldr	r0, [r3, #0]
 801e0f2:	f7ff bfd3 	b.w	801e09c <_raise_r>
 801e0f6:	bf00      	nop
 801e0f8:	20000284 	.word	0x20000284

0801e0fc <_kill_r>:
 801e0fc:	b538      	push	{r3, r4, r5, lr}
 801e0fe:	4d07      	ldr	r5, [pc, #28]	; (801e11c <_kill_r+0x20>)
 801e100:	2300      	movs	r3, #0
 801e102:	4604      	mov	r4, r0
 801e104:	4608      	mov	r0, r1
 801e106:	4611      	mov	r1, r2
 801e108:	602b      	str	r3, [r5, #0]
 801e10a:	f7ee f801 	bl	800c110 <_kill>
 801e10e:	1c43      	adds	r3, r0, #1
 801e110:	d102      	bne.n	801e118 <_kill_r+0x1c>
 801e112:	682b      	ldr	r3, [r5, #0]
 801e114:	b103      	cbz	r3, 801e118 <_kill_r+0x1c>
 801e116:	6023      	str	r3, [r4, #0]
 801e118:	bd38      	pop	{r3, r4, r5, pc}
 801e11a:	bf00      	nop
 801e11c:	20009d44 	.word	0x20009d44

0801e120 <_getpid_r>:
 801e120:	f7ed bfee 	b.w	800c100 <_getpid>

0801e124 <__sread>:
 801e124:	b510      	push	{r4, lr}
 801e126:	460c      	mov	r4, r1
 801e128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e12c:	f000 f894 	bl	801e258 <_read_r>
 801e130:	2800      	cmp	r0, #0
 801e132:	bfab      	itete	ge
 801e134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e136:	89a3      	ldrhlt	r3, [r4, #12]
 801e138:	181b      	addge	r3, r3, r0
 801e13a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e13e:	bfac      	ite	ge
 801e140:	6563      	strge	r3, [r4, #84]	; 0x54
 801e142:	81a3      	strhlt	r3, [r4, #12]
 801e144:	bd10      	pop	{r4, pc}

0801e146 <__swrite>:
 801e146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e14a:	461f      	mov	r7, r3
 801e14c:	898b      	ldrh	r3, [r1, #12]
 801e14e:	05db      	lsls	r3, r3, #23
 801e150:	4605      	mov	r5, r0
 801e152:	460c      	mov	r4, r1
 801e154:	4616      	mov	r6, r2
 801e156:	d505      	bpl.n	801e164 <__swrite+0x1e>
 801e158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e15c:	2302      	movs	r3, #2
 801e15e:	2200      	movs	r2, #0
 801e160:	f000 f868 	bl	801e234 <_lseek_r>
 801e164:	89a3      	ldrh	r3, [r4, #12]
 801e166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e16a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e16e:	81a3      	strh	r3, [r4, #12]
 801e170:	4632      	mov	r2, r6
 801e172:	463b      	mov	r3, r7
 801e174:	4628      	mov	r0, r5
 801e176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e17a:	f000 b817 	b.w	801e1ac <_write_r>

0801e17e <__sseek>:
 801e17e:	b510      	push	{r4, lr}
 801e180:	460c      	mov	r4, r1
 801e182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e186:	f000 f855 	bl	801e234 <_lseek_r>
 801e18a:	1c43      	adds	r3, r0, #1
 801e18c:	89a3      	ldrh	r3, [r4, #12]
 801e18e:	bf15      	itete	ne
 801e190:	6560      	strne	r0, [r4, #84]	; 0x54
 801e192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e19a:	81a3      	strheq	r3, [r4, #12]
 801e19c:	bf18      	it	ne
 801e19e:	81a3      	strhne	r3, [r4, #12]
 801e1a0:	bd10      	pop	{r4, pc}

0801e1a2 <__sclose>:
 801e1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1a6:	f000 b813 	b.w	801e1d0 <_close_r>
	...

0801e1ac <_write_r>:
 801e1ac:	b538      	push	{r3, r4, r5, lr}
 801e1ae:	4d07      	ldr	r5, [pc, #28]	; (801e1cc <_write_r+0x20>)
 801e1b0:	4604      	mov	r4, r0
 801e1b2:	4608      	mov	r0, r1
 801e1b4:	4611      	mov	r1, r2
 801e1b6:	2200      	movs	r2, #0
 801e1b8:	602a      	str	r2, [r5, #0]
 801e1ba:	461a      	mov	r2, r3
 801e1bc:	f7ed ffdf 	bl	800c17e <_write>
 801e1c0:	1c43      	adds	r3, r0, #1
 801e1c2:	d102      	bne.n	801e1ca <_write_r+0x1e>
 801e1c4:	682b      	ldr	r3, [r5, #0]
 801e1c6:	b103      	cbz	r3, 801e1ca <_write_r+0x1e>
 801e1c8:	6023      	str	r3, [r4, #0]
 801e1ca:	bd38      	pop	{r3, r4, r5, pc}
 801e1cc:	20009d44 	.word	0x20009d44

0801e1d0 <_close_r>:
 801e1d0:	b538      	push	{r3, r4, r5, lr}
 801e1d2:	4d06      	ldr	r5, [pc, #24]	; (801e1ec <_close_r+0x1c>)
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	4604      	mov	r4, r0
 801e1d8:	4608      	mov	r0, r1
 801e1da:	602b      	str	r3, [r5, #0]
 801e1dc:	f7ed ffeb 	bl	800c1b6 <_close>
 801e1e0:	1c43      	adds	r3, r0, #1
 801e1e2:	d102      	bne.n	801e1ea <_close_r+0x1a>
 801e1e4:	682b      	ldr	r3, [r5, #0]
 801e1e6:	b103      	cbz	r3, 801e1ea <_close_r+0x1a>
 801e1e8:	6023      	str	r3, [r4, #0]
 801e1ea:	bd38      	pop	{r3, r4, r5, pc}
 801e1ec:	20009d44 	.word	0x20009d44

0801e1f0 <_fstat_r>:
 801e1f0:	b538      	push	{r3, r4, r5, lr}
 801e1f2:	4d07      	ldr	r5, [pc, #28]	; (801e210 <_fstat_r+0x20>)
 801e1f4:	2300      	movs	r3, #0
 801e1f6:	4604      	mov	r4, r0
 801e1f8:	4608      	mov	r0, r1
 801e1fa:	4611      	mov	r1, r2
 801e1fc:	602b      	str	r3, [r5, #0]
 801e1fe:	f7ed ffe6 	bl	800c1ce <_fstat>
 801e202:	1c43      	adds	r3, r0, #1
 801e204:	d102      	bne.n	801e20c <_fstat_r+0x1c>
 801e206:	682b      	ldr	r3, [r5, #0]
 801e208:	b103      	cbz	r3, 801e20c <_fstat_r+0x1c>
 801e20a:	6023      	str	r3, [r4, #0]
 801e20c:	bd38      	pop	{r3, r4, r5, pc}
 801e20e:	bf00      	nop
 801e210:	20009d44 	.word	0x20009d44

0801e214 <_isatty_r>:
 801e214:	b538      	push	{r3, r4, r5, lr}
 801e216:	4d06      	ldr	r5, [pc, #24]	; (801e230 <_isatty_r+0x1c>)
 801e218:	2300      	movs	r3, #0
 801e21a:	4604      	mov	r4, r0
 801e21c:	4608      	mov	r0, r1
 801e21e:	602b      	str	r3, [r5, #0]
 801e220:	f7ed ffe5 	bl	800c1ee <_isatty>
 801e224:	1c43      	adds	r3, r0, #1
 801e226:	d102      	bne.n	801e22e <_isatty_r+0x1a>
 801e228:	682b      	ldr	r3, [r5, #0]
 801e22a:	b103      	cbz	r3, 801e22e <_isatty_r+0x1a>
 801e22c:	6023      	str	r3, [r4, #0]
 801e22e:	bd38      	pop	{r3, r4, r5, pc}
 801e230:	20009d44 	.word	0x20009d44

0801e234 <_lseek_r>:
 801e234:	b538      	push	{r3, r4, r5, lr}
 801e236:	4d07      	ldr	r5, [pc, #28]	; (801e254 <_lseek_r+0x20>)
 801e238:	4604      	mov	r4, r0
 801e23a:	4608      	mov	r0, r1
 801e23c:	4611      	mov	r1, r2
 801e23e:	2200      	movs	r2, #0
 801e240:	602a      	str	r2, [r5, #0]
 801e242:	461a      	mov	r2, r3
 801e244:	f7ed ffde 	bl	800c204 <_lseek>
 801e248:	1c43      	adds	r3, r0, #1
 801e24a:	d102      	bne.n	801e252 <_lseek_r+0x1e>
 801e24c:	682b      	ldr	r3, [r5, #0]
 801e24e:	b103      	cbz	r3, 801e252 <_lseek_r+0x1e>
 801e250:	6023      	str	r3, [r4, #0]
 801e252:	bd38      	pop	{r3, r4, r5, pc}
 801e254:	20009d44 	.word	0x20009d44

0801e258 <_read_r>:
 801e258:	b538      	push	{r3, r4, r5, lr}
 801e25a:	4d07      	ldr	r5, [pc, #28]	; (801e278 <_read_r+0x20>)
 801e25c:	4604      	mov	r4, r0
 801e25e:	4608      	mov	r0, r1
 801e260:	4611      	mov	r1, r2
 801e262:	2200      	movs	r2, #0
 801e264:	602a      	str	r2, [r5, #0]
 801e266:	461a      	mov	r2, r3
 801e268:	f7ed ff6c 	bl	800c144 <_read>
 801e26c:	1c43      	adds	r3, r0, #1
 801e26e:	d102      	bne.n	801e276 <_read_r+0x1e>
 801e270:	682b      	ldr	r3, [r5, #0]
 801e272:	b103      	cbz	r3, 801e276 <_read_r+0x1e>
 801e274:	6023      	str	r3, [r4, #0]
 801e276:	bd38      	pop	{r3, r4, r5, pc}
 801e278:	20009d44 	.word	0x20009d44

0801e27c <atanf>:
 801e27c:	b538      	push	{r3, r4, r5, lr}
 801e27e:	ee10 5a10 	vmov	r5, s0
 801e282:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801e286:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801e28a:	eef0 7a40 	vmov.f32	s15, s0
 801e28e:	db10      	blt.n	801e2b2 <atanf+0x36>
 801e290:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e294:	dd04      	ble.n	801e2a0 <atanf+0x24>
 801e296:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e29a:	eeb0 0a67 	vmov.f32	s0, s15
 801e29e:	bd38      	pop	{r3, r4, r5, pc}
 801e2a0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e3d8 <atanf+0x15c>
 801e2a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801e3dc <atanf+0x160>
 801e2a8:	2d00      	cmp	r5, #0
 801e2aa:	bfd8      	it	le
 801e2ac:	eef0 7a40 	vmovle.f32	s15, s0
 801e2b0:	e7f3      	b.n	801e29a <atanf+0x1e>
 801e2b2:	4b4b      	ldr	r3, [pc, #300]	; (801e3e0 <atanf+0x164>)
 801e2b4:	429c      	cmp	r4, r3
 801e2b6:	dc10      	bgt.n	801e2da <atanf+0x5e>
 801e2b8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801e2bc:	da0a      	bge.n	801e2d4 <atanf+0x58>
 801e2be:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e3e4 <atanf+0x168>
 801e2c2:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e2ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2d2:	dce2      	bgt.n	801e29a <atanf+0x1e>
 801e2d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2d8:	e013      	b.n	801e302 <atanf+0x86>
 801e2da:	f000 f8e3 	bl	801e4a4 <fabsf>
 801e2de:	4b42      	ldr	r3, [pc, #264]	; (801e3e8 <atanf+0x16c>)
 801e2e0:	429c      	cmp	r4, r3
 801e2e2:	dc4f      	bgt.n	801e384 <atanf+0x108>
 801e2e4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e2e8:	429c      	cmp	r4, r3
 801e2ea:	dc41      	bgt.n	801e370 <atanf+0xf4>
 801e2ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e2f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e2f4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e2fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e302:	1c5a      	adds	r2, r3, #1
 801e304:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e308:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e3ec <atanf+0x170>
 801e30c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801e3f0 <atanf+0x174>
 801e310:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e3f4 <atanf+0x178>
 801e314:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801e3f8 <atanf+0x17c>
 801e318:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e31c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e320:	eddf 5a36 	vldr	s11, [pc, #216]	; 801e3fc <atanf+0x180>
 801e324:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e328:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801e400 <atanf+0x184>
 801e32c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e330:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e404 <atanf+0x188>
 801e334:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e338:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801e408 <atanf+0x18c>
 801e33c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e340:	eddf 5a32 	vldr	s11, [pc, #200]	; 801e40c <atanf+0x190>
 801e344:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e348:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801e410 <atanf+0x194>
 801e34c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e350:	eddf 5a30 	vldr	s11, [pc, #192]	; 801e414 <atanf+0x198>
 801e354:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e358:	eea5 0a87 	vfma.f32	s0, s11, s14
 801e35c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e360:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e364:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e368:	d121      	bne.n	801e3ae <atanf+0x132>
 801e36a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e36e:	e794      	b.n	801e29a <atanf+0x1e>
 801e370:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e374:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e378:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e37c:	2301      	movs	r3, #1
 801e37e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e382:	e7be      	b.n	801e302 <atanf+0x86>
 801e384:	4b24      	ldr	r3, [pc, #144]	; (801e418 <atanf+0x19c>)
 801e386:	429c      	cmp	r4, r3
 801e388:	dc0b      	bgt.n	801e3a2 <atanf+0x126>
 801e38a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e38e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e392:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e396:	2302      	movs	r3, #2
 801e398:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e39c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e3a0:	e7af      	b.n	801e302 <atanf+0x86>
 801e3a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e3a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e3aa:	2303      	movs	r3, #3
 801e3ac:	e7a9      	b.n	801e302 <atanf+0x86>
 801e3ae:	4a1b      	ldr	r2, [pc, #108]	; (801e41c <atanf+0x1a0>)
 801e3b0:	491b      	ldr	r1, [pc, #108]	; (801e420 <atanf+0x1a4>)
 801e3b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e3b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e3ba:	ed93 7a00 	vldr	s14, [r3]
 801e3be:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e3c2:	2d00      	cmp	r5, #0
 801e3c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e3c8:	ed92 0a00 	vldr	s0, [r2]
 801e3cc:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e3d0:	bfb8      	it	lt
 801e3d2:	eef1 7a67 	vneglt.f32	s15, s15
 801e3d6:	e760      	b.n	801e29a <atanf+0x1e>
 801e3d8:	3fc90fdb 	.word	0x3fc90fdb
 801e3dc:	bfc90fdb 	.word	0xbfc90fdb
 801e3e0:	3edfffff 	.word	0x3edfffff
 801e3e4:	7149f2ca 	.word	0x7149f2ca
 801e3e8:	3f97ffff 	.word	0x3f97ffff
 801e3ec:	3c8569d7 	.word	0x3c8569d7
 801e3f0:	3d4bda59 	.word	0x3d4bda59
 801e3f4:	bd15a221 	.word	0xbd15a221
 801e3f8:	be4ccccd 	.word	0xbe4ccccd
 801e3fc:	3d886b35 	.word	0x3d886b35
 801e400:	3dba2e6e 	.word	0x3dba2e6e
 801e404:	3e124925 	.word	0x3e124925
 801e408:	3eaaaaab 	.word	0x3eaaaaab
 801e40c:	bd6ef16b 	.word	0xbd6ef16b
 801e410:	bd9d8795 	.word	0xbd9d8795
 801e414:	bde38e38 	.word	0xbde38e38
 801e418:	401bffff 	.word	0x401bffff
 801e41c:	0802175c 	.word	0x0802175c
 801e420:	0802176c 	.word	0x0802176c

0801e424 <cosf>:
 801e424:	ee10 3a10 	vmov	r3, s0
 801e428:	b507      	push	{r0, r1, r2, lr}
 801e42a:	4a1c      	ldr	r2, [pc, #112]	; (801e49c <cosf+0x78>)
 801e42c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e430:	4293      	cmp	r3, r2
 801e432:	dc04      	bgt.n	801e43e <cosf+0x1a>
 801e434:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801e4a0 <cosf+0x7c>
 801e438:	f000 fdb8 	bl	801efac <__kernel_cosf>
 801e43c:	e004      	b.n	801e448 <cosf+0x24>
 801e43e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e442:	db04      	blt.n	801e44e <cosf+0x2a>
 801e444:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e448:	b003      	add	sp, #12
 801e44a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e44e:	4668      	mov	r0, sp
 801e450:	f000 fc6c 	bl	801ed2c <__ieee754_rem_pio2f>
 801e454:	f000 0003 	and.w	r0, r0, #3
 801e458:	2801      	cmp	r0, #1
 801e45a:	d007      	beq.n	801e46c <cosf+0x48>
 801e45c:	2802      	cmp	r0, #2
 801e45e:	d00e      	beq.n	801e47e <cosf+0x5a>
 801e460:	b9a0      	cbnz	r0, 801e48c <cosf+0x68>
 801e462:	eddd 0a01 	vldr	s1, [sp, #4]
 801e466:	ed9d 0a00 	vldr	s0, [sp]
 801e46a:	e7e5      	b.n	801e438 <cosf+0x14>
 801e46c:	eddd 0a01 	vldr	s1, [sp, #4]
 801e470:	ed9d 0a00 	vldr	s0, [sp]
 801e474:	f001 f884 	bl	801f580 <__kernel_sinf>
 801e478:	eeb1 0a40 	vneg.f32	s0, s0
 801e47c:	e7e4      	b.n	801e448 <cosf+0x24>
 801e47e:	eddd 0a01 	vldr	s1, [sp, #4]
 801e482:	ed9d 0a00 	vldr	s0, [sp]
 801e486:	f000 fd91 	bl	801efac <__kernel_cosf>
 801e48a:	e7f5      	b.n	801e478 <cosf+0x54>
 801e48c:	eddd 0a01 	vldr	s1, [sp, #4]
 801e490:	ed9d 0a00 	vldr	s0, [sp]
 801e494:	2001      	movs	r0, #1
 801e496:	f001 f873 	bl	801f580 <__kernel_sinf>
 801e49a:	e7d5      	b.n	801e448 <cosf+0x24>
 801e49c:	3f490fd8 	.word	0x3f490fd8
 801e4a0:	00000000 	.word	0x00000000

0801e4a4 <fabsf>:
 801e4a4:	ee10 3a10 	vmov	r3, s0
 801e4a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e4ac:	ee00 3a10 	vmov	s0, r3
 801e4b0:	4770      	bx	lr
	...

0801e4b4 <sinf>:
 801e4b4:	ee10 3a10 	vmov	r3, s0
 801e4b8:	b507      	push	{r0, r1, r2, lr}
 801e4ba:	4a1d      	ldr	r2, [pc, #116]	; (801e530 <sinf+0x7c>)
 801e4bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e4c0:	4293      	cmp	r3, r2
 801e4c2:	dc05      	bgt.n	801e4d0 <sinf+0x1c>
 801e4c4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801e534 <sinf+0x80>
 801e4c8:	2000      	movs	r0, #0
 801e4ca:	f001 f859 	bl	801f580 <__kernel_sinf>
 801e4ce:	e004      	b.n	801e4da <sinf+0x26>
 801e4d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e4d4:	db04      	blt.n	801e4e0 <sinf+0x2c>
 801e4d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e4da:	b003      	add	sp, #12
 801e4dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e4e0:	4668      	mov	r0, sp
 801e4e2:	f000 fc23 	bl	801ed2c <__ieee754_rem_pio2f>
 801e4e6:	f000 0003 	and.w	r0, r0, #3
 801e4ea:	2801      	cmp	r0, #1
 801e4ec:	d008      	beq.n	801e500 <sinf+0x4c>
 801e4ee:	2802      	cmp	r0, #2
 801e4f0:	d00d      	beq.n	801e50e <sinf+0x5a>
 801e4f2:	b9b0      	cbnz	r0, 801e522 <sinf+0x6e>
 801e4f4:	eddd 0a01 	vldr	s1, [sp, #4]
 801e4f8:	ed9d 0a00 	vldr	s0, [sp]
 801e4fc:	2001      	movs	r0, #1
 801e4fe:	e7e4      	b.n	801e4ca <sinf+0x16>
 801e500:	eddd 0a01 	vldr	s1, [sp, #4]
 801e504:	ed9d 0a00 	vldr	s0, [sp]
 801e508:	f000 fd50 	bl	801efac <__kernel_cosf>
 801e50c:	e7e5      	b.n	801e4da <sinf+0x26>
 801e50e:	eddd 0a01 	vldr	s1, [sp, #4]
 801e512:	ed9d 0a00 	vldr	s0, [sp]
 801e516:	2001      	movs	r0, #1
 801e518:	f001 f832 	bl	801f580 <__kernel_sinf>
 801e51c:	eeb1 0a40 	vneg.f32	s0, s0
 801e520:	e7db      	b.n	801e4da <sinf+0x26>
 801e522:	eddd 0a01 	vldr	s1, [sp, #4]
 801e526:	ed9d 0a00 	vldr	s0, [sp]
 801e52a:	f000 fd3f 	bl	801efac <__kernel_cosf>
 801e52e:	e7f5      	b.n	801e51c <sinf+0x68>
 801e530:	3f490fd8 	.word	0x3f490fd8
 801e534:	00000000 	.word	0x00000000

0801e538 <atan2f>:
 801e538:	f000 b898 	b.w	801e66c <__ieee754_atan2f>

0801e53c <powf>:
 801e53c:	b508      	push	{r3, lr}
 801e53e:	ed2d 8b04 	vpush	{d8-d9}
 801e542:	eeb0 9a40 	vmov.f32	s18, s0
 801e546:	eef0 8a60 	vmov.f32	s17, s1
 801e54a:	f000 f92f 	bl	801e7ac <__ieee754_powf>
 801e54e:	4b43      	ldr	r3, [pc, #268]	; (801e65c <powf+0x120>)
 801e550:	f993 3000 	ldrsb.w	r3, [r3]
 801e554:	3301      	adds	r3, #1
 801e556:	eeb0 8a40 	vmov.f32	s16, s0
 801e55a:	d012      	beq.n	801e582 <powf+0x46>
 801e55c:	eef4 8a68 	vcmp.f32	s17, s17
 801e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e564:	d60d      	bvs.n	801e582 <powf+0x46>
 801e566:	eeb4 9a49 	vcmp.f32	s18, s18
 801e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e56e:	d70d      	bvc.n	801e58c <powf+0x50>
 801e570:	eef5 8a40 	vcmp.f32	s17, #0.0
 801e574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e578:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e57c:	bf08      	it	eq
 801e57e:	eeb0 8a67 	vmoveq.f32	s16, s15
 801e582:	eeb0 0a48 	vmov.f32	s0, s16
 801e586:	ecbd 8b04 	vpop	{d8-d9}
 801e58a:	bd08      	pop	{r3, pc}
 801e58c:	eddf 9a34 	vldr	s19, [pc, #208]	; 801e660 <powf+0x124>
 801e590:	eeb4 9a69 	vcmp.f32	s18, s19
 801e594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e598:	d116      	bne.n	801e5c8 <powf+0x8c>
 801e59a:	eef4 8a69 	vcmp.f32	s17, s19
 801e59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5a2:	d057      	beq.n	801e654 <powf+0x118>
 801e5a4:	eeb0 0a68 	vmov.f32	s0, s17
 801e5a8:	f001 f832 	bl	801f610 <finitef>
 801e5ac:	2800      	cmp	r0, #0
 801e5ae:	d0e8      	beq.n	801e582 <powf+0x46>
 801e5b0:	eef4 8ae9 	vcmpe.f32	s17, s19
 801e5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5b8:	d5e3      	bpl.n	801e582 <powf+0x46>
 801e5ba:	f7fb fa07 	bl	80199cc <__errno>
 801e5be:	2321      	movs	r3, #33	; 0x21
 801e5c0:	6003      	str	r3, [r0, #0]
 801e5c2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801e664 <powf+0x128>
 801e5c6:	e7dc      	b.n	801e582 <powf+0x46>
 801e5c8:	f001 f822 	bl	801f610 <finitef>
 801e5cc:	bb50      	cbnz	r0, 801e624 <powf+0xe8>
 801e5ce:	eeb0 0a49 	vmov.f32	s0, s18
 801e5d2:	f001 f81d 	bl	801f610 <finitef>
 801e5d6:	b328      	cbz	r0, 801e624 <powf+0xe8>
 801e5d8:	eeb0 0a68 	vmov.f32	s0, s17
 801e5dc:	f001 f818 	bl	801f610 <finitef>
 801e5e0:	b300      	cbz	r0, 801e624 <powf+0xe8>
 801e5e2:	eeb4 8a48 	vcmp.f32	s16, s16
 801e5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ea:	d706      	bvc.n	801e5fa <powf+0xbe>
 801e5ec:	f7fb f9ee 	bl	80199cc <__errno>
 801e5f0:	2321      	movs	r3, #33	; 0x21
 801e5f2:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 801e5f6:	6003      	str	r3, [r0, #0]
 801e5f8:	e7c3      	b.n	801e582 <powf+0x46>
 801e5fa:	f7fb f9e7 	bl	80199cc <__errno>
 801e5fe:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801e602:	2322      	movs	r3, #34	; 0x22
 801e604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e608:	6003      	str	r3, [r0, #0]
 801e60a:	d508      	bpl.n	801e61e <powf+0xe2>
 801e60c:	eeb0 0a68 	vmov.f32	s0, s17
 801e610:	f001 f84e 	bl	801f6b0 <rintf>
 801e614:	eeb4 0a68 	vcmp.f32	s0, s17
 801e618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e61c:	d1d1      	bne.n	801e5c2 <powf+0x86>
 801e61e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801e668 <powf+0x12c>
 801e622:	e7ae      	b.n	801e582 <powf+0x46>
 801e624:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e62c:	d1a9      	bne.n	801e582 <powf+0x46>
 801e62e:	eeb0 0a49 	vmov.f32	s0, s18
 801e632:	f000 ffed 	bl	801f610 <finitef>
 801e636:	2800      	cmp	r0, #0
 801e638:	d0a3      	beq.n	801e582 <powf+0x46>
 801e63a:	eeb0 0a68 	vmov.f32	s0, s17
 801e63e:	f000 ffe7 	bl	801f610 <finitef>
 801e642:	2800      	cmp	r0, #0
 801e644:	d09d      	beq.n	801e582 <powf+0x46>
 801e646:	f7fb f9c1 	bl	80199cc <__errno>
 801e64a:	2322      	movs	r3, #34	; 0x22
 801e64c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801e660 <powf+0x124>
 801e650:	6003      	str	r3, [r0, #0]
 801e652:	e796      	b.n	801e582 <powf+0x46>
 801e654:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e658:	e793      	b.n	801e582 <powf+0x46>
 801e65a:	bf00      	nop
 801e65c:	20000458 	.word	0x20000458
 801e660:	00000000 	.word	0x00000000
 801e664:	ff800000 	.word	0xff800000
 801e668:	7f800000 	.word	0x7f800000

0801e66c <__ieee754_atan2f>:
 801e66c:	ee10 2a90 	vmov	r2, s1
 801e670:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801e674:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e678:	b510      	push	{r4, lr}
 801e67a:	eef0 7a40 	vmov.f32	s15, s0
 801e67e:	dc06      	bgt.n	801e68e <__ieee754_atan2f+0x22>
 801e680:	ee10 0a10 	vmov	r0, s0
 801e684:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801e688:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e68c:	dd04      	ble.n	801e698 <__ieee754_atan2f+0x2c>
 801e68e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801e692:	eeb0 0a67 	vmov.f32	s0, s15
 801e696:	bd10      	pop	{r4, pc}
 801e698:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801e69c:	d103      	bne.n	801e6a6 <__ieee754_atan2f+0x3a>
 801e69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6a2:	f7ff bdeb 	b.w	801e27c <atanf>
 801e6a6:	1794      	asrs	r4, r2, #30
 801e6a8:	f004 0402 	and.w	r4, r4, #2
 801e6ac:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801e6b0:	b943      	cbnz	r3, 801e6c4 <__ieee754_atan2f+0x58>
 801e6b2:	2c02      	cmp	r4, #2
 801e6b4:	d05e      	beq.n	801e774 <__ieee754_atan2f+0x108>
 801e6b6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801e788 <__ieee754_atan2f+0x11c>
 801e6ba:	2c03      	cmp	r4, #3
 801e6bc:	bf08      	it	eq
 801e6be:	eef0 7a47 	vmoveq.f32	s15, s14
 801e6c2:	e7e6      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e6c4:	b941      	cbnz	r1, 801e6d8 <__ieee754_atan2f+0x6c>
 801e6c6:	eddf 7a31 	vldr	s15, [pc, #196]	; 801e78c <__ieee754_atan2f+0x120>
 801e6ca:	ed9f 0a31 	vldr	s0, [pc, #196]	; 801e790 <__ieee754_atan2f+0x124>
 801e6ce:	2800      	cmp	r0, #0
 801e6d0:	bfb8      	it	lt
 801e6d2:	eef0 7a40 	vmovlt.f32	s15, s0
 801e6d6:	e7dc      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e6d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e6dc:	d110      	bne.n	801e700 <__ieee754_atan2f+0x94>
 801e6de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e6e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801e6e6:	d107      	bne.n	801e6f8 <__ieee754_atan2f+0x8c>
 801e6e8:	2c02      	cmp	r4, #2
 801e6ea:	d846      	bhi.n	801e77a <__ieee754_atan2f+0x10e>
 801e6ec:	4b29      	ldr	r3, [pc, #164]	; (801e794 <__ieee754_atan2f+0x128>)
 801e6ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e6f2:	edd4 7a00 	vldr	s15, [r4]
 801e6f6:	e7cc      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e6f8:	2c02      	cmp	r4, #2
 801e6fa:	d841      	bhi.n	801e780 <__ieee754_atan2f+0x114>
 801e6fc:	4b26      	ldr	r3, [pc, #152]	; (801e798 <__ieee754_atan2f+0x12c>)
 801e6fe:	e7f6      	b.n	801e6ee <__ieee754_atan2f+0x82>
 801e700:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e704:	d0df      	beq.n	801e6c6 <__ieee754_atan2f+0x5a>
 801e706:	1a5b      	subs	r3, r3, r1
 801e708:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801e70c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801e710:	da1a      	bge.n	801e748 <__ieee754_atan2f+0xdc>
 801e712:	2a00      	cmp	r2, #0
 801e714:	da01      	bge.n	801e71a <__ieee754_atan2f+0xae>
 801e716:	313c      	adds	r1, #60	; 0x3c
 801e718:	db19      	blt.n	801e74e <__ieee754_atan2f+0xe2>
 801e71a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801e71e:	f7ff fec1 	bl	801e4a4 <fabsf>
 801e722:	f7ff fdab 	bl	801e27c <atanf>
 801e726:	eef0 7a40 	vmov.f32	s15, s0
 801e72a:	2c01      	cmp	r4, #1
 801e72c:	d012      	beq.n	801e754 <__ieee754_atan2f+0xe8>
 801e72e:	2c02      	cmp	r4, #2
 801e730:	d017      	beq.n	801e762 <__ieee754_atan2f+0xf6>
 801e732:	2c00      	cmp	r4, #0
 801e734:	d0ad      	beq.n	801e692 <__ieee754_atan2f+0x26>
 801e736:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801e79c <__ieee754_atan2f+0x130>
 801e73a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e73e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801e7a0 <__ieee754_atan2f+0x134>
 801e742:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e746:	e7a4      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e748:	eddf 7a10 	vldr	s15, [pc, #64]	; 801e78c <__ieee754_atan2f+0x120>
 801e74c:	e7ed      	b.n	801e72a <__ieee754_atan2f+0xbe>
 801e74e:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e7a4 <__ieee754_atan2f+0x138>
 801e752:	e7ea      	b.n	801e72a <__ieee754_atan2f+0xbe>
 801e754:	ee17 3a90 	vmov	r3, s15
 801e758:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e75c:	ee07 3a90 	vmov	s15, r3
 801e760:	e797      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e762:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801e79c <__ieee754_atan2f+0x130>
 801e766:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e76a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801e7a0 <__ieee754_atan2f+0x134>
 801e76e:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e772:	e78e      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e774:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801e7a0 <__ieee754_atan2f+0x134>
 801e778:	e78b      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e77a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801e7a8 <__ieee754_atan2f+0x13c>
 801e77e:	e788      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e780:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e7a4 <__ieee754_atan2f+0x138>
 801e784:	e785      	b.n	801e692 <__ieee754_atan2f+0x26>
 801e786:	bf00      	nop
 801e788:	c0490fdb 	.word	0xc0490fdb
 801e78c:	3fc90fdb 	.word	0x3fc90fdb
 801e790:	bfc90fdb 	.word	0xbfc90fdb
 801e794:	0802177c 	.word	0x0802177c
 801e798:	08021788 	.word	0x08021788
 801e79c:	33bbbd2e 	.word	0x33bbbd2e
 801e7a0:	40490fdb 	.word	0x40490fdb
 801e7a4:	00000000 	.word	0x00000000
 801e7a8:	3f490fdb 	.word	0x3f490fdb

0801e7ac <__ieee754_powf>:
 801e7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7b0:	ee10 5a90 	vmov	r5, s1
 801e7b4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801e7b8:	ed2d 8b02 	vpush	{d8}
 801e7bc:	eeb0 8a40 	vmov.f32	s16, s0
 801e7c0:	eef0 8a60 	vmov.f32	s17, s1
 801e7c4:	f000 8291 	beq.w	801ecea <__ieee754_powf+0x53e>
 801e7c8:	ee10 8a10 	vmov	r8, s0
 801e7cc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801e7d0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e7d4:	dc06      	bgt.n	801e7e4 <__ieee754_powf+0x38>
 801e7d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801e7da:	dd0a      	ble.n	801e7f2 <__ieee754_powf+0x46>
 801e7dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801e7e0:	f000 8283 	beq.w	801ecea <__ieee754_powf+0x53e>
 801e7e4:	ecbd 8b02 	vpop	{d8}
 801e7e8:	48d8      	ldr	r0, [pc, #864]	; (801eb4c <__ieee754_powf+0x3a0>)
 801e7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e7ee:	f7fb bfa7 	b.w	801a740 <nanf>
 801e7f2:	f1b8 0f00 	cmp.w	r8, #0
 801e7f6:	da1f      	bge.n	801e838 <__ieee754_powf+0x8c>
 801e7f8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801e7fc:	da2e      	bge.n	801e85c <__ieee754_powf+0xb0>
 801e7fe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801e802:	f2c0 827b 	blt.w	801ecfc <__ieee754_powf+0x550>
 801e806:	15fb      	asrs	r3, r7, #23
 801e808:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801e80c:	fa47 f603 	asr.w	r6, r7, r3
 801e810:	fa06 f303 	lsl.w	r3, r6, r3
 801e814:	42bb      	cmp	r3, r7
 801e816:	f040 8271 	bne.w	801ecfc <__ieee754_powf+0x550>
 801e81a:	f006 0601 	and.w	r6, r6, #1
 801e81e:	f1c6 0602 	rsb	r6, r6, #2
 801e822:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801e826:	d120      	bne.n	801e86a <__ieee754_powf+0xbe>
 801e828:	2d00      	cmp	r5, #0
 801e82a:	f280 8264 	bge.w	801ecf6 <__ieee754_powf+0x54a>
 801e82e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e832:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801e836:	e00d      	b.n	801e854 <__ieee754_powf+0xa8>
 801e838:	2600      	movs	r6, #0
 801e83a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801e83e:	d1f0      	bne.n	801e822 <__ieee754_powf+0x76>
 801e840:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801e844:	f000 8251 	beq.w	801ecea <__ieee754_powf+0x53e>
 801e848:	dd0a      	ble.n	801e860 <__ieee754_powf+0xb4>
 801e84a:	2d00      	cmp	r5, #0
 801e84c:	f280 8250 	bge.w	801ecf0 <__ieee754_powf+0x544>
 801e850:	ed9f 0abf 	vldr	s0, [pc, #764]	; 801eb50 <__ieee754_powf+0x3a4>
 801e854:	ecbd 8b02 	vpop	{d8}
 801e858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e85c:	2602      	movs	r6, #2
 801e85e:	e7ec      	b.n	801e83a <__ieee754_powf+0x8e>
 801e860:	2d00      	cmp	r5, #0
 801e862:	daf5      	bge.n	801e850 <__ieee754_powf+0xa4>
 801e864:	eeb1 0a68 	vneg.f32	s0, s17
 801e868:	e7f4      	b.n	801e854 <__ieee754_powf+0xa8>
 801e86a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801e86e:	d102      	bne.n	801e876 <__ieee754_powf+0xca>
 801e870:	ee28 0a08 	vmul.f32	s0, s16, s16
 801e874:	e7ee      	b.n	801e854 <__ieee754_powf+0xa8>
 801e876:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801e87a:	eeb0 0a48 	vmov.f32	s0, s16
 801e87e:	d108      	bne.n	801e892 <__ieee754_powf+0xe6>
 801e880:	f1b8 0f00 	cmp.w	r8, #0
 801e884:	db05      	blt.n	801e892 <__ieee754_powf+0xe6>
 801e886:	ecbd 8b02 	vpop	{d8}
 801e88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e88e:	f000 bb89 	b.w	801efa4 <__ieee754_sqrtf>
 801e892:	f7ff fe07 	bl	801e4a4 <fabsf>
 801e896:	b124      	cbz	r4, 801e8a2 <__ieee754_powf+0xf6>
 801e898:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801e89c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801e8a0:	d117      	bne.n	801e8d2 <__ieee754_powf+0x126>
 801e8a2:	2d00      	cmp	r5, #0
 801e8a4:	bfbc      	itt	lt
 801e8a6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801e8aa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801e8ae:	f1b8 0f00 	cmp.w	r8, #0
 801e8b2:	dacf      	bge.n	801e854 <__ieee754_powf+0xa8>
 801e8b4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801e8b8:	ea54 0306 	orrs.w	r3, r4, r6
 801e8bc:	d104      	bne.n	801e8c8 <__ieee754_powf+0x11c>
 801e8be:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e8c2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801e8c6:	e7c5      	b.n	801e854 <__ieee754_powf+0xa8>
 801e8c8:	2e01      	cmp	r6, #1
 801e8ca:	d1c3      	bne.n	801e854 <__ieee754_powf+0xa8>
 801e8cc:	eeb1 0a40 	vneg.f32	s0, s0
 801e8d0:	e7c0      	b.n	801e854 <__ieee754_powf+0xa8>
 801e8d2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801e8d6:	3801      	subs	r0, #1
 801e8d8:	ea56 0300 	orrs.w	r3, r6, r0
 801e8dc:	d104      	bne.n	801e8e8 <__ieee754_powf+0x13c>
 801e8de:	ee38 8a48 	vsub.f32	s16, s16, s16
 801e8e2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801e8e6:	e7b5      	b.n	801e854 <__ieee754_powf+0xa8>
 801e8e8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801e8ec:	dd6b      	ble.n	801e9c6 <__ieee754_powf+0x21a>
 801e8ee:	4b99      	ldr	r3, [pc, #612]	; (801eb54 <__ieee754_powf+0x3a8>)
 801e8f0:	429c      	cmp	r4, r3
 801e8f2:	dc06      	bgt.n	801e902 <__ieee754_powf+0x156>
 801e8f4:	2d00      	cmp	r5, #0
 801e8f6:	daab      	bge.n	801e850 <__ieee754_powf+0xa4>
 801e8f8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 801eb58 <__ieee754_powf+0x3ac>
 801e8fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 801e900:	e7a8      	b.n	801e854 <__ieee754_powf+0xa8>
 801e902:	4b96      	ldr	r3, [pc, #600]	; (801eb5c <__ieee754_powf+0x3b0>)
 801e904:	429c      	cmp	r4, r3
 801e906:	dd02      	ble.n	801e90e <__ieee754_powf+0x162>
 801e908:	2d00      	cmp	r5, #0
 801e90a:	dcf5      	bgt.n	801e8f8 <__ieee754_powf+0x14c>
 801e90c:	e7a0      	b.n	801e850 <__ieee754_powf+0xa4>
 801e90e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e912:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e916:	eddf 6a92 	vldr	s13, [pc, #584]	; 801eb60 <__ieee754_powf+0x3b4>
 801e91a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801e91e:	eee0 6a67 	vfms.f32	s13, s0, s15
 801e922:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e926:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801e92a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e932:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801eb64 <__ieee754_powf+0x3b8>
 801e936:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801e93a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801eb68 <__ieee754_powf+0x3bc>
 801e93e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e942:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801eb6c <__ieee754_powf+0x3c0>
 801e946:	eef0 6a67 	vmov.f32	s13, s15
 801e94a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801e94e:	ee16 3a90 	vmov	r3, s13
 801e952:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801e956:	f023 030f 	bic.w	r3, r3, #15
 801e95a:	ee00 3a90 	vmov	s1, r3
 801e95e:	eee0 0a47 	vfms.f32	s1, s0, s14
 801e962:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e966:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801e96a:	f025 050f 	bic.w	r5, r5, #15
 801e96e:	ee07 5a10 	vmov	s14, r5
 801e972:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801e976:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801e97a:	ee07 3a90 	vmov	s15, r3
 801e97e:	eee7 0a27 	vfma.f32	s1, s14, s15
 801e982:	3e01      	subs	r6, #1
 801e984:	ea56 0200 	orrs.w	r2, r6, r0
 801e988:	ee07 5a10 	vmov	s14, r5
 801e98c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e990:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801e994:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801e998:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801e99c:	ee17 4a10 	vmov	r4, s14
 801e9a0:	bf08      	it	eq
 801e9a2:	eeb0 8a40 	vmoveq.f32	s16, s0
 801e9a6:	2c00      	cmp	r4, #0
 801e9a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e9ac:	f340 8184 	ble.w	801ecb8 <__ieee754_powf+0x50c>
 801e9b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801e9b4:	f340 80fc 	ble.w	801ebb0 <__ieee754_powf+0x404>
 801e9b8:	eddf 7a67 	vldr	s15, [pc, #412]	; 801eb58 <__ieee754_powf+0x3ac>
 801e9bc:	ee28 0a27 	vmul.f32	s0, s16, s15
 801e9c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e9c4:	e746      	b.n	801e854 <__ieee754_powf+0xa8>
 801e9c6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801e9ca:	bf01      	itttt	eq
 801e9cc:	eddf 7a68 	vldreq	s15, [pc, #416]	; 801eb70 <__ieee754_powf+0x3c4>
 801e9d0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801e9d4:	f06f 0217 	mvneq.w	r2, #23
 801e9d8:	ee17 4a90 	vmoveq	r4, s15
 801e9dc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801e9e0:	bf18      	it	ne
 801e9e2:	2200      	movne	r2, #0
 801e9e4:	3b7f      	subs	r3, #127	; 0x7f
 801e9e6:	4413      	add	r3, r2
 801e9e8:	4a62      	ldr	r2, [pc, #392]	; (801eb74 <__ieee754_powf+0x3c8>)
 801e9ea:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801e9ee:	4294      	cmp	r4, r2
 801e9f0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801e9f4:	dd06      	ble.n	801ea04 <__ieee754_powf+0x258>
 801e9f6:	4a60      	ldr	r2, [pc, #384]	; (801eb78 <__ieee754_powf+0x3cc>)
 801e9f8:	4294      	cmp	r4, r2
 801e9fa:	f340 80a4 	ble.w	801eb46 <__ieee754_powf+0x39a>
 801e9fe:	3301      	adds	r3, #1
 801ea00:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801ea04:	2400      	movs	r4, #0
 801ea06:	4a5d      	ldr	r2, [pc, #372]	; (801eb7c <__ieee754_powf+0x3d0>)
 801ea08:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ea0c:	ee07 1a90 	vmov	s15, r1
 801ea10:	ed92 7a00 	vldr	s14, [r2]
 801ea14:	4a5a      	ldr	r2, [pc, #360]	; (801eb80 <__ieee754_powf+0x3d4>)
 801ea16:	ee37 6a27 	vadd.f32	s12, s14, s15
 801ea1a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ea1e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801ea22:	1049      	asrs	r1, r1, #1
 801ea24:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801ea28:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801ea2c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801ea30:	ee37 5ac7 	vsub.f32	s10, s15, s14
 801ea34:	ee06 1a10 	vmov	s12, r1
 801ea38:	ee65 4a26 	vmul.f32	s9, s10, s13
 801ea3c:	ee36 7a47 	vsub.f32	s14, s12, s14
 801ea40:	ee14 7a90 	vmov	r7, s9
 801ea44:	4017      	ands	r7, r2
 801ea46:	ee05 7a90 	vmov	s11, r7
 801ea4a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801ea4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ea52:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801eb84 <__ieee754_powf+0x3d8>
 801ea56:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801ea5a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801ea5e:	ee25 6a26 	vmul.f32	s12, s10, s13
 801ea62:	eddf 6a49 	vldr	s13, [pc, #292]	; 801eb88 <__ieee754_powf+0x3dc>
 801ea66:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801ea6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 801eb8c <__ieee754_powf+0x3e0>
 801ea6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ea72:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 801eb60 <__ieee754_powf+0x3b4>
 801ea76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ea7a:	eddf 6a45 	vldr	s13, [pc, #276]	; 801eb90 <__ieee754_powf+0x3e4>
 801ea7e:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ea82:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801eb94 <__ieee754_powf+0x3e8>
 801ea86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801ea8a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 801ea8e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801ea92:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ea96:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ea9a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801ea9e:	eef0 7a45 	vmov.f32	s15, s10
 801eaa2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801eaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eaaa:	ee17 1a90 	vmov	r1, s15
 801eaae:	4011      	ands	r1, r2
 801eab0:	ee07 1a90 	vmov	s15, r1
 801eab4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801eab8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801eabc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801eac0:	ee27 7a24 	vmul.f32	s14, s14, s9
 801eac4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eac8:	eeb0 6a47 	vmov.f32	s12, s14
 801eacc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ead0:	ee16 1a10 	vmov	r1, s12
 801ead4:	4011      	ands	r1, r2
 801ead6:	ee06 1a90 	vmov	s13, r1
 801eada:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801eade:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801eb98 <__ieee754_powf+0x3ec>
 801eae2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801eb9c <__ieee754_powf+0x3f0>
 801eae6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801eaea:	ee06 1a10 	vmov	s12, r1
 801eaee:	ee27 7a27 	vmul.f32	s14, s14, s15
 801eaf2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801eba0 <__ieee754_powf+0x3f4>
 801eaf6:	492b      	ldr	r1, [pc, #172]	; (801eba4 <__ieee754_powf+0x3f8>)
 801eaf8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801eafc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801eb00:	edd1 7a00 	vldr	s15, [r1]
 801eb04:	ee37 7a27 	vadd.f32	s14, s14, s15
 801eb08:	ee07 3a90 	vmov	s15, r3
 801eb0c:	4b26      	ldr	r3, [pc, #152]	; (801eba8 <__ieee754_powf+0x3fc>)
 801eb0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801eb12:	eef0 7a47 	vmov.f32	s15, s14
 801eb16:	eee6 7a25 	vfma.f32	s15, s12, s11
 801eb1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eb1e:	edd4 0a00 	vldr	s1, [r4]
 801eb22:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801eb26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eb2a:	ee17 3a90 	vmov	r3, s15
 801eb2e:	4013      	ands	r3, r2
 801eb30:	ee07 3a90 	vmov	s15, r3
 801eb34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801eb38:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801eb3c:	eee6 6a65 	vfms.f32	s13, s12, s11
 801eb40:	ee77 7a66 	vsub.f32	s15, s14, s13
 801eb44:	e70f      	b.n	801e966 <__ieee754_powf+0x1ba>
 801eb46:	2401      	movs	r4, #1
 801eb48:	e75d      	b.n	801ea06 <__ieee754_powf+0x25a>
 801eb4a:	bf00      	nop
 801eb4c:	080216f8 	.word	0x080216f8
 801eb50:	00000000 	.word	0x00000000
 801eb54:	3f7ffff7 	.word	0x3f7ffff7
 801eb58:	7149f2ca 	.word	0x7149f2ca
 801eb5c:	3f800007 	.word	0x3f800007
 801eb60:	3eaaaaab 	.word	0x3eaaaaab
 801eb64:	3fb8aa3b 	.word	0x3fb8aa3b
 801eb68:	36eca570 	.word	0x36eca570
 801eb6c:	3fb8aa00 	.word	0x3fb8aa00
 801eb70:	4b800000 	.word	0x4b800000
 801eb74:	001cc471 	.word	0x001cc471
 801eb78:	005db3d6 	.word	0x005db3d6
 801eb7c:	08021794 	.word	0x08021794
 801eb80:	fffff000 	.word	0xfffff000
 801eb84:	3e6c3255 	.word	0x3e6c3255
 801eb88:	3e53f142 	.word	0x3e53f142
 801eb8c:	3e8ba305 	.word	0x3e8ba305
 801eb90:	3edb6db7 	.word	0x3edb6db7
 801eb94:	3f19999a 	.word	0x3f19999a
 801eb98:	3f76384f 	.word	0x3f76384f
 801eb9c:	3f763800 	.word	0x3f763800
 801eba0:	369dc3a0 	.word	0x369dc3a0
 801eba4:	080217a4 	.word	0x080217a4
 801eba8:	0802179c 	.word	0x0802179c
 801ebac:	3338aa3c 	.word	0x3338aa3c
 801ebb0:	f040 8092 	bne.w	801ecd8 <__ieee754_powf+0x52c>
 801ebb4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801ebac <__ieee754_powf+0x400>
 801ebb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ebbc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801ebc0:	eef4 6ac7 	vcmpe.f32	s13, s14
 801ebc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebc8:	f73f aef6 	bgt.w	801e9b8 <__ieee754_powf+0x20c>
 801ebcc:	15db      	asrs	r3, r3, #23
 801ebce:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801ebd2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801ebd6:	4103      	asrs	r3, r0
 801ebd8:	4423      	add	r3, r4
 801ebda:	4949      	ldr	r1, [pc, #292]	; (801ed00 <__ieee754_powf+0x554>)
 801ebdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ebe0:	3a7f      	subs	r2, #127	; 0x7f
 801ebe2:	4111      	asrs	r1, r2
 801ebe4:	ea23 0101 	bic.w	r1, r3, r1
 801ebe8:	ee07 1a10 	vmov	s14, r1
 801ebec:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801ebf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801ebf4:	f1c2 0217 	rsb	r2, r2, #23
 801ebf8:	4110      	asrs	r0, r2
 801ebfa:	2c00      	cmp	r4, #0
 801ebfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec00:	bfb8      	it	lt
 801ec02:	4240      	neglt	r0, r0
 801ec04:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801ec08:	eddf 6a3e 	vldr	s13, [pc, #248]	; 801ed04 <__ieee754_powf+0x558>
 801ec0c:	ee17 3a10 	vmov	r3, s14
 801ec10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801ec14:	f023 030f 	bic.w	r3, r3, #15
 801ec18:	ee07 3a10 	vmov	s14, r3
 801ec1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ec20:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801ec24:	eddf 7a38 	vldr	s15, [pc, #224]	; 801ed08 <__ieee754_powf+0x55c>
 801ec28:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec2c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801ec30:	eddf 6a36 	vldr	s13, [pc, #216]	; 801ed0c <__ieee754_powf+0x560>
 801ec34:	eeb0 0a67 	vmov.f32	s0, s15
 801ec38:	eea7 0a26 	vfma.f32	s0, s14, s13
 801ec3c:	eeb0 6a40 	vmov.f32	s12, s0
 801ec40:	eea7 6a66 	vfms.f32	s12, s14, s13
 801ec44:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ec48:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ec4c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801ed10 <__ieee754_powf+0x564>
 801ec50:	ed9f 6a30 	vldr	s12, [pc, #192]	; 801ed14 <__ieee754_powf+0x568>
 801ec54:	eea7 6a26 	vfma.f32	s12, s14, s13
 801ec58:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801ed18 <__ieee754_powf+0x56c>
 801ec5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ec60:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801ed1c <__ieee754_powf+0x570>
 801ec64:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ec68:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801ed20 <__ieee754_powf+0x574>
 801ec6c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ec70:	eeb0 6a40 	vmov.f32	s12, s0
 801ec74:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801ec78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ec7c:	eeb0 7a46 	vmov.f32	s14, s12
 801ec80:	ee77 6a66 	vsub.f32	s13, s14, s13
 801ec84:	ee20 6a06 	vmul.f32	s12, s0, s12
 801ec88:	eee0 7a27 	vfma.f32	s15, s0, s15
 801ec8c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801ec90:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ec94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ec98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ec9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801eca0:	ee10 3a10 	vmov	r3, s0
 801eca4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801eca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ecac:	da1a      	bge.n	801ece4 <__ieee754_powf+0x538>
 801ecae:	f000 fd5b 	bl	801f768 <scalbnf>
 801ecb2:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ecb6:	e5cd      	b.n	801e854 <__ieee754_powf+0xa8>
 801ecb8:	4a1a      	ldr	r2, [pc, #104]	; (801ed24 <__ieee754_powf+0x578>)
 801ecba:	4293      	cmp	r3, r2
 801ecbc:	dd02      	ble.n	801ecc4 <__ieee754_powf+0x518>
 801ecbe:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801ed28 <__ieee754_powf+0x57c>
 801ecc2:	e67b      	b.n	801e9bc <__ieee754_powf+0x210>
 801ecc4:	d108      	bne.n	801ecd8 <__ieee754_powf+0x52c>
 801ecc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ecca:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecd2:	f6ff af7b 	blt.w	801ebcc <__ieee754_powf+0x420>
 801ecd6:	e7f2      	b.n	801ecbe <__ieee754_powf+0x512>
 801ecd8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801ecdc:	f73f af76 	bgt.w	801ebcc <__ieee754_powf+0x420>
 801ece0:	2000      	movs	r0, #0
 801ece2:	e78f      	b.n	801ec04 <__ieee754_powf+0x458>
 801ece4:	ee00 3a10 	vmov	s0, r3
 801ece8:	e7e3      	b.n	801ecb2 <__ieee754_powf+0x506>
 801ecea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ecee:	e5b1      	b.n	801e854 <__ieee754_powf+0xa8>
 801ecf0:	eeb0 0a68 	vmov.f32	s0, s17
 801ecf4:	e5ae      	b.n	801e854 <__ieee754_powf+0xa8>
 801ecf6:	eeb0 0a48 	vmov.f32	s0, s16
 801ecfa:	e5ab      	b.n	801e854 <__ieee754_powf+0xa8>
 801ecfc:	2600      	movs	r6, #0
 801ecfe:	e590      	b.n	801e822 <__ieee754_powf+0x76>
 801ed00:	007fffff 	.word	0x007fffff
 801ed04:	3f317218 	.word	0x3f317218
 801ed08:	35bfbe8c 	.word	0x35bfbe8c
 801ed0c:	3f317200 	.word	0x3f317200
 801ed10:	3331bb4c 	.word	0x3331bb4c
 801ed14:	b5ddea0e 	.word	0xb5ddea0e
 801ed18:	388ab355 	.word	0x388ab355
 801ed1c:	bb360b61 	.word	0xbb360b61
 801ed20:	3e2aaaab 	.word	0x3e2aaaab
 801ed24:	43160000 	.word	0x43160000
 801ed28:	0da24260 	.word	0x0da24260

0801ed2c <__ieee754_rem_pio2f>:
 801ed2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed2e:	ee10 6a10 	vmov	r6, s0
 801ed32:	4b8e      	ldr	r3, [pc, #568]	; (801ef6c <__ieee754_rem_pio2f+0x240>)
 801ed34:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801ed38:	429d      	cmp	r5, r3
 801ed3a:	b087      	sub	sp, #28
 801ed3c:	eef0 7a40 	vmov.f32	s15, s0
 801ed40:	4604      	mov	r4, r0
 801ed42:	dc05      	bgt.n	801ed50 <__ieee754_rem_pio2f+0x24>
 801ed44:	2300      	movs	r3, #0
 801ed46:	ed80 0a00 	vstr	s0, [r0]
 801ed4a:	6043      	str	r3, [r0, #4]
 801ed4c:	2000      	movs	r0, #0
 801ed4e:	e01a      	b.n	801ed86 <__ieee754_rem_pio2f+0x5a>
 801ed50:	4b87      	ldr	r3, [pc, #540]	; (801ef70 <__ieee754_rem_pio2f+0x244>)
 801ed52:	429d      	cmp	r5, r3
 801ed54:	dc46      	bgt.n	801ede4 <__ieee754_rem_pio2f+0xb8>
 801ed56:	2e00      	cmp	r6, #0
 801ed58:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801ef74 <__ieee754_rem_pio2f+0x248>
 801ed5c:	4b86      	ldr	r3, [pc, #536]	; (801ef78 <__ieee754_rem_pio2f+0x24c>)
 801ed5e:	f025 050f 	bic.w	r5, r5, #15
 801ed62:	dd1f      	ble.n	801eda4 <__ieee754_rem_pio2f+0x78>
 801ed64:	429d      	cmp	r5, r3
 801ed66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ed6a:	d00e      	beq.n	801ed8a <__ieee754_rem_pio2f+0x5e>
 801ed6c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801ef7c <__ieee754_rem_pio2f+0x250>
 801ed70:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801ed74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ed78:	ed80 0a00 	vstr	s0, [r0]
 801ed7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ed80:	2001      	movs	r0, #1
 801ed82:	edc4 7a01 	vstr	s15, [r4, #4]
 801ed86:	b007      	add	sp, #28
 801ed88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed8a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801ef80 <__ieee754_rem_pio2f+0x254>
 801ed8e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801ef84 <__ieee754_rem_pio2f+0x258>
 801ed92:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ed96:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801ed9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ed9e:	edc0 6a00 	vstr	s13, [r0]
 801eda2:	e7eb      	b.n	801ed7c <__ieee754_rem_pio2f+0x50>
 801eda4:	429d      	cmp	r5, r3
 801eda6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801edaa:	d00e      	beq.n	801edca <__ieee754_rem_pio2f+0x9e>
 801edac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801ef7c <__ieee754_rem_pio2f+0x250>
 801edb0:	ee37 0a87 	vadd.f32	s0, s15, s14
 801edb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801edb8:	ed80 0a00 	vstr	s0, [r0]
 801edbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801edc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801edc4:	edc4 7a01 	vstr	s15, [r4, #4]
 801edc8:	e7dd      	b.n	801ed86 <__ieee754_rem_pio2f+0x5a>
 801edca:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801ef80 <__ieee754_rem_pio2f+0x254>
 801edce:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801ef84 <__ieee754_rem_pio2f+0x258>
 801edd2:	ee77 7a80 	vadd.f32	s15, s15, s0
 801edd6:	ee77 6a87 	vadd.f32	s13, s15, s14
 801edda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801edde:	edc0 6a00 	vstr	s13, [r0]
 801ede2:	e7eb      	b.n	801edbc <__ieee754_rem_pio2f+0x90>
 801ede4:	4b68      	ldr	r3, [pc, #416]	; (801ef88 <__ieee754_rem_pio2f+0x25c>)
 801ede6:	429d      	cmp	r5, r3
 801ede8:	dc72      	bgt.n	801eed0 <__ieee754_rem_pio2f+0x1a4>
 801edea:	f7ff fb5b 	bl	801e4a4 <fabsf>
 801edee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801ef8c <__ieee754_rem_pio2f+0x260>
 801edf2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801edf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 801edfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801edfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ee02:	ee17 0a90 	vmov	r0, s15
 801ee06:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801ef74 <__ieee754_rem_pio2f+0x248>
 801ee0a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ee0e:	281f      	cmp	r0, #31
 801ee10:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801ef7c <__ieee754_rem_pio2f+0x250>
 801ee14:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee18:	eeb1 6a47 	vneg.f32	s12, s14
 801ee1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ee20:	ee16 2a90 	vmov	r2, s13
 801ee24:	dc1c      	bgt.n	801ee60 <__ieee754_rem_pio2f+0x134>
 801ee26:	495a      	ldr	r1, [pc, #360]	; (801ef90 <__ieee754_rem_pio2f+0x264>)
 801ee28:	1e47      	subs	r7, r0, #1
 801ee2a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801ee2e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801ee32:	428b      	cmp	r3, r1
 801ee34:	d014      	beq.n	801ee60 <__ieee754_rem_pio2f+0x134>
 801ee36:	6022      	str	r2, [r4, #0]
 801ee38:	ed94 7a00 	vldr	s14, [r4]
 801ee3c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ee40:	2e00      	cmp	r6, #0
 801ee42:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ee46:	ed84 0a01 	vstr	s0, [r4, #4]
 801ee4a:	da9c      	bge.n	801ed86 <__ieee754_rem_pio2f+0x5a>
 801ee4c:	eeb1 7a47 	vneg.f32	s14, s14
 801ee50:	eeb1 0a40 	vneg.f32	s0, s0
 801ee54:	ed84 7a00 	vstr	s14, [r4]
 801ee58:	ed84 0a01 	vstr	s0, [r4, #4]
 801ee5c:	4240      	negs	r0, r0
 801ee5e:	e792      	b.n	801ed86 <__ieee754_rem_pio2f+0x5a>
 801ee60:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ee64:	15eb      	asrs	r3, r5, #23
 801ee66:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801ee6a:	2d08      	cmp	r5, #8
 801ee6c:	dde3      	ble.n	801ee36 <__ieee754_rem_pio2f+0x10a>
 801ee6e:	eddf 7a44 	vldr	s15, [pc, #272]	; 801ef80 <__ieee754_rem_pio2f+0x254>
 801ee72:	eef0 6a40 	vmov.f32	s13, s0
 801ee76:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ee7a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801ee7e:	eea6 0a27 	vfma.f32	s0, s12, s15
 801ee82:	eddf 7a40 	vldr	s15, [pc, #256]	; 801ef84 <__ieee754_rem_pio2f+0x258>
 801ee86:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801ee8a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801ee8e:	eef0 7a40 	vmov.f32	s15, s0
 801ee92:	ee15 2a90 	vmov	r2, s11
 801ee96:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801ee9a:	1a5b      	subs	r3, r3, r1
 801ee9c:	2b19      	cmp	r3, #25
 801ee9e:	dc04      	bgt.n	801eeaa <__ieee754_rem_pio2f+0x17e>
 801eea0:	edc4 5a00 	vstr	s11, [r4]
 801eea4:	eeb0 0a66 	vmov.f32	s0, s13
 801eea8:	e7c6      	b.n	801ee38 <__ieee754_rem_pio2f+0x10c>
 801eeaa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801ef94 <__ieee754_rem_pio2f+0x268>
 801eeae:	eeb0 0a66 	vmov.f32	s0, s13
 801eeb2:	eea6 0a25 	vfma.f32	s0, s12, s11
 801eeb6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801eeba:	eddf 6a37 	vldr	s13, [pc, #220]	; 801ef98 <__ieee754_rem_pio2f+0x26c>
 801eebe:	eee6 7a25 	vfma.f32	s15, s12, s11
 801eec2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801eec6:	ee30 7a67 	vsub.f32	s14, s0, s15
 801eeca:	ed84 7a00 	vstr	s14, [r4]
 801eece:	e7b3      	b.n	801ee38 <__ieee754_rem_pio2f+0x10c>
 801eed0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801eed4:	db06      	blt.n	801eee4 <__ieee754_rem_pio2f+0x1b8>
 801eed6:	ee70 7a40 	vsub.f32	s15, s0, s0
 801eeda:	edc0 7a01 	vstr	s15, [r0, #4]
 801eede:	edc0 7a00 	vstr	s15, [r0]
 801eee2:	e733      	b.n	801ed4c <__ieee754_rem_pio2f+0x20>
 801eee4:	15ea      	asrs	r2, r5, #23
 801eee6:	3a86      	subs	r2, #134	; 0x86
 801eee8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801eeec:	ee07 3a90 	vmov	s15, r3
 801eef0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801eef4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801ef9c <__ieee754_rem_pio2f+0x270>
 801eef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eefc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ef00:	ed8d 7a03 	vstr	s14, [sp, #12]
 801ef04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ef0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ef14:	ed8d 7a04 	vstr	s14, [sp, #16]
 801ef18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef24:	edcd 7a05 	vstr	s15, [sp, #20]
 801ef28:	d11e      	bne.n	801ef68 <__ieee754_rem_pio2f+0x23c>
 801ef2a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef32:	bf14      	ite	ne
 801ef34:	2302      	movne	r3, #2
 801ef36:	2301      	moveq	r3, #1
 801ef38:	4919      	ldr	r1, [pc, #100]	; (801efa0 <__ieee754_rem_pio2f+0x274>)
 801ef3a:	9101      	str	r1, [sp, #4]
 801ef3c:	2102      	movs	r1, #2
 801ef3e:	9100      	str	r1, [sp, #0]
 801ef40:	a803      	add	r0, sp, #12
 801ef42:	4621      	mov	r1, r4
 801ef44:	f000 f892 	bl	801f06c <__kernel_rem_pio2f>
 801ef48:	2e00      	cmp	r6, #0
 801ef4a:	f6bf af1c 	bge.w	801ed86 <__ieee754_rem_pio2f+0x5a>
 801ef4e:	edd4 7a00 	vldr	s15, [r4]
 801ef52:	eef1 7a67 	vneg.f32	s15, s15
 801ef56:	edc4 7a00 	vstr	s15, [r4]
 801ef5a:	edd4 7a01 	vldr	s15, [r4, #4]
 801ef5e:	eef1 7a67 	vneg.f32	s15, s15
 801ef62:	edc4 7a01 	vstr	s15, [r4, #4]
 801ef66:	e779      	b.n	801ee5c <__ieee754_rem_pio2f+0x130>
 801ef68:	2303      	movs	r3, #3
 801ef6a:	e7e5      	b.n	801ef38 <__ieee754_rem_pio2f+0x20c>
 801ef6c:	3f490fd8 	.word	0x3f490fd8
 801ef70:	4016cbe3 	.word	0x4016cbe3
 801ef74:	3fc90f80 	.word	0x3fc90f80
 801ef78:	3fc90fd0 	.word	0x3fc90fd0
 801ef7c:	37354443 	.word	0x37354443
 801ef80:	37354400 	.word	0x37354400
 801ef84:	2e85a308 	.word	0x2e85a308
 801ef88:	43490f80 	.word	0x43490f80
 801ef8c:	3f22f984 	.word	0x3f22f984
 801ef90:	080217ac 	.word	0x080217ac
 801ef94:	2e85a300 	.word	0x2e85a300
 801ef98:	248d3132 	.word	0x248d3132
 801ef9c:	43800000 	.word	0x43800000
 801efa0:	0802182c 	.word	0x0802182c

0801efa4 <__ieee754_sqrtf>:
 801efa4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801efa8:	4770      	bx	lr
	...

0801efac <__kernel_cosf>:
 801efac:	ee10 3a10 	vmov	r3, s0
 801efb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801efb4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801efb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801efbc:	da05      	bge.n	801efca <__kernel_cosf+0x1e>
 801efbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801efc2:	ee17 2a90 	vmov	r2, s15
 801efc6:	2a00      	cmp	r2, #0
 801efc8:	d03d      	beq.n	801f046 <__kernel_cosf+0x9a>
 801efca:	ee60 5a00 	vmul.f32	s11, s0, s0
 801efce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f04c <__kernel_cosf+0xa0>
 801efd2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801f050 <__kernel_cosf+0xa4>
 801efd6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801f054 <__kernel_cosf+0xa8>
 801efda:	4a1f      	ldr	r2, [pc, #124]	; (801f058 <__kernel_cosf+0xac>)
 801efdc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801efe0:	4293      	cmp	r3, r2
 801efe2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f05c <__kernel_cosf+0xb0>
 801efe6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801efea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801f060 <__kernel_cosf+0xb4>
 801efee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801eff2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801f064 <__kernel_cosf+0xb8>
 801eff6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801effa:	eeb0 7a66 	vmov.f32	s14, s13
 801effe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f002:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f006:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801f00a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801f00e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801f012:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f016:	dc04      	bgt.n	801f022 <__kernel_cosf+0x76>
 801f018:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801f01c:	ee36 0a47 	vsub.f32	s0, s12, s14
 801f020:	4770      	bx	lr
 801f022:	4a11      	ldr	r2, [pc, #68]	; (801f068 <__kernel_cosf+0xbc>)
 801f024:	4293      	cmp	r3, r2
 801f026:	bfda      	itte	le
 801f028:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f02c:	ee06 3a90 	vmovle	s13, r3
 801f030:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801f034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f038:	ee36 0a66 	vsub.f32	s0, s12, s13
 801f03c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f040:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f044:	4770      	bx	lr
 801f046:	eeb0 0a46 	vmov.f32	s0, s12
 801f04a:	4770      	bx	lr
 801f04c:	ad47d74e 	.word	0xad47d74e
 801f050:	310f74f6 	.word	0x310f74f6
 801f054:	3d2aaaab 	.word	0x3d2aaaab
 801f058:	3e999999 	.word	0x3e999999
 801f05c:	b493f27c 	.word	0xb493f27c
 801f060:	37d00d01 	.word	0x37d00d01
 801f064:	bab60b61 	.word	0xbab60b61
 801f068:	3f480000 	.word	0x3f480000

0801f06c <__kernel_rem_pio2f>:
 801f06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f070:	ed2d 8b04 	vpush	{d8-d9}
 801f074:	b0d7      	sub	sp, #348	; 0x15c
 801f076:	4616      	mov	r6, r2
 801f078:	4698      	mov	r8, r3
 801f07a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f07c:	4bbb      	ldr	r3, [pc, #748]	; (801f36c <__kernel_rem_pio2f+0x300>)
 801f07e:	9001      	str	r0, [sp, #4]
 801f080:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801f084:	1d33      	adds	r3, r6, #4
 801f086:	460d      	mov	r5, r1
 801f088:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 801f08c:	db29      	blt.n	801f0e2 <__kernel_rem_pio2f+0x76>
 801f08e:	1ef1      	subs	r1, r6, #3
 801f090:	bf48      	it	mi
 801f092:	1d31      	addmi	r1, r6, #4
 801f094:	10c9      	asrs	r1, r1, #3
 801f096:	1c4c      	adds	r4, r1, #1
 801f098:	00e3      	lsls	r3, r4, #3
 801f09a:	9302      	str	r3, [sp, #8]
 801f09c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f09e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f0a2:	eba1 0009 	sub.w	r0, r1, r9
 801f0a6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801f0aa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801f0ae:	eb07 0c09 	add.w	ip, r7, r9
 801f0b2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801f0b6:	2300      	movs	r3, #0
 801f0b8:	4563      	cmp	r3, ip
 801f0ba:	dd14      	ble.n	801f0e6 <__kernel_rem_pio2f+0x7a>
 801f0bc:	ab1a      	add	r3, sp, #104	; 0x68
 801f0be:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801f0c2:	46cc      	mov	ip, r9
 801f0c4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801f0c8:	f1c8 0b01 	rsb	fp, r8, #1
 801f0cc:	eb0b 020c 	add.w	r2, fp, ip
 801f0d0:	4297      	cmp	r7, r2
 801f0d2:	db27      	blt.n	801f124 <__kernel_rem_pio2f+0xb8>
 801f0d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801f0d8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f0dc:	4618      	mov	r0, r3
 801f0de:	2200      	movs	r2, #0
 801f0e0:	e016      	b.n	801f110 <__kernel_rem_pio2f+0xa4>
 801f0e2:	2100      	movs	r1, #0
 801f0e4:	e7d7      	b.n	801f096 <__kernel_rem_pio2f+0x2a>
 801f0e6:	42d8      	cmn	r0, r3
 801f0e8:	bf5d      	ittte	pl
 801f0ea:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801f0ee:	ee07 2a90 	vmovpl	s15, r2
 801f0f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f0f6:	eef0 7a47 	vmovmi.f32	s15, s14
 801f0fa:	ecea 7a01 	vstmia	sl!, {s15}
 801f0fe:	3301      	adds	r3, #1
 801f100:	e7da      	b.n	801f0b8 <__kernel_rem_pio2f+0x4c>
 801f102:	ecfe 6a01 	vldmia	lr!, {s13}
 801f106:	ed90 7a00 	vldr	s14, [r0]
 801f10a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f10e:	3201      	adds	r2, #1
 801f110:	454a      	cmp	r2, r9
 801f112:	f1a0 0004 	sub.w	r0, r0, #4
 801f116:	ddf4      	ble.n	801f102 <__kernel_rem_pio2f+0x96>
 801f118:	ecea 7a01 	vstmia	sl!, {s15}
 801f11c:	3304      	adds	r3, #4
 801f11e:	f10c 0c01 	add.w	ip, ip, #1
 801f122:	e7d3      	b.n	801f0cc <__kernel_rem_pio2f+0x60>
 801f124:	ab06      	add	r3, sp, #24
 801f126:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801f12a:	9304      	str	r3, [sp, #16]
 801f12c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801f12e:	eddf 8a92 	vldr	s17, [pc, #584]	; 801f378 <__kernel_rem_pio2f+0x30c>
 801f132:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801f374 <__kernel_rem_pio2f+0x308>
 801f136:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f13a:	9303      	str	r3, [sp, #12]
 801f13c:	46ba      	mov	sl, r7
 801f13e:	ab56      	add	r3, sp, #344	; 0x158
 801f140:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801f144:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801f148:	ab06      	add	r3, sp, #24
 801f14a:	4618      	mov	r0, r3
 801f14c:	4652      	mov	r2, sl
 801f14e:	2a00      	cmp	r2, #0
 801f150:	dc51      	bgt.n	801f1f6 <__kernel_rem_pio2f+0x18a>
 801f152:	4620      	mov	r0, r4
 801f154:	9305      	str	r3, [sp, #20]
 801f156:	f000 fb07 	bl	801f768 <scalbnf>
 801f15a:	eeb0 8a40 	vmov.f32	s16, s0
 801f15e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f162:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f166:	f000 fa61 	bl	801f62c <floorf>
 801f16a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f16e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f172:	2c00      	cmp	r4, #0
 801f174:	9b05      	ldr	r3, [sp, #20]
 801f176:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f17a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801f17e:	edcd 7a00 	vstr	s15, [sp]
 801f182:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f186:	dd4b      	ble.n	801f220 <__kernel_rem_pio2f+0x1b4>
 801f188:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f18c:	aa06      	add	r2, sp, #24
 801f18e:	f1c4 0e08 	rsb	lr, r4, #8
 801f192:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f196:	ee17 1a90 	vmov	r1, s15
 801f19a:	fa42 f00e 	asr.w	r0, r2, lr
 801f19e:	4401      	add	r1, r0
 801f1a0:	9100      	str	r1, [sp, #0]
 801f1a2:	fa00 f00e 	lsl.w	r0, r0, lr
 801f1a6:	a906      	add	r1, sp, #24
 801f1a8:	1a12      	subs	r2, r2, r0
 801f1aa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801f1ae:	f1c4 0007 	rsb	r0, r4, #7
 801f1b2:	fa42 fb00 	asr.w	fp, r2, r0
 801f1b6:	f1bb 0f00 	cmp.w	fp, #0
 801f1ba:	dd43      	ble.n	801f244 <__kernel_rem_pio2f+0x1d8>
 801f1bc:	9a00      	ldr	r2, [sp, #0]
 801f1be:	f04f 0e00 	mov.w	lr, #0
 801f1c2:	3201      	adds	r2, #1
 801f1c4:	9200      	str	r2, [sp, #0]
 801f1c6:	4670      	mov	r0, lr
 801f1c8:	45f2      	cmp	sl, lr
 801f1ca:	dc6c      	bgt.n	801f2a6 <__kernel_rem_pio2f+0x23a>
 801f1cc:	2c00      	cmp	r4, #0
 801f1ce:	dd04      	ble.n	801f1da <__kernel_rem_pio2f+0x16e>
 801f1d0:	2c01      	cmp	r4, #1
 801f1d2:	d079      	beq.n	801f2c8 <__kernel_rem_pio2f+0x25c>
 801f1d4:	2c02      	cmp	r4, #2
 801f1d6:	f000 8082 	beq.w	801f2de <__kernel_rem_pio2f+0x272>
 801f1da:	f1bb 0f02 	cmp.w	fp, #2
 801f1de:	d131      	bne.n	801f244 <__kernel_rem_pio2f+0x1d8>
 801f1e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f1e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f1e8:	b360      	cbz	r0, 801f244 <__kernel_rem_pio2f+0x1d8>
 801f1ea:	4620      	mov	r0, r4
 801f1ec:	f000 fabc 	bl	801f768 <scalbnf>
 801f1f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f1f4:	e026      	b.n	801f244 <__kernel_rem_pio2f+0x1d8>
 801f1f6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f1fa:	3a01      	subs	r2, #1
 801f1fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f200:	a942      	add	r1, sp, #264	; 0x108
 801f202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f206:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801f20a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f20e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f212:	eca0 0a01 	vstmia	r0!, {s0}
 801f216:	ed9c 0a00 	vldr	s0, [ip]
 801f21a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f21e:	e796      	b.n	801f14e <__kernel_rem_pio2f+0xe2>
 801f220:	d107      	bne.n	801f232 <__kernel_rem_pio2f+0x1c6>
 801f222:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801f226:	a906      	add	r1, sp, #24
 801f228:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f22c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801f230:	e7c1      	b.n	801f1b6 <__kernel_rem_pio2f+0x14a>
 801f232:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f236:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f23e:	da2f      	bge.n	801f2a0 <__kernel_rem_pio2f+0x234>
 801f240:	f04f 0b00 	mov.w	fp, #0
 801f244:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f24c:	f040 8098 	bne.w	801f380 <__kernel_rem_pio2f+0x314>
 801f250:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801f254:	469c      	mov	ip, r3
 801f256:	2200      	movs	r2, #0
 801f258:	45bc      	cmp	ip, r7
 801f25a:	da48      	bge.n	801f2ee <__kernel_rem_pio2f+0x282>
 801f25c:	2a00      	cmp	r2, #0
 801f25e:	d05f      	beq.n	801f320 <__kernel_rem_pio2f+0x2b4>
 801f260:	aa06      	add	r2, sp, #24
 801f262:	3c08      	subs	r4, #8
 801f264:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f268:	2900      	cmp	r1, #0
 801f26a:	d07d      	beq.n	801f368 <__kernel_rem_pio2f+0x2fc>
 801f26c:	4620      	mov	r0, r4
 801f26e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f272:	9301      	str	r3, [sp, #4]
 801f274:	f000 fa78 	bl	801f768 <scalbnf>
 801f278:	9b01      	ldr	r3, [sp, #4]
 801f27a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801f378 <__kernel_rem_pio2f+0x30c>
 801f27e:	4619      	mov	r1, r3
 801f280:	2900      	cmp	r1, #0
 801f282:	f280 80af 	bge.w	801f3e4 <__kernel_rem_pio2f+0x378>
 801f286:	4618      	mov	r0, r3
 801f288:	2400      	movs	r4, #0
 801f28a:	2800      	cmp	r0, #0
 801f28c:	f2c0 80d0 	blt.w	801f430 <__kernel_rem_pio2f+0x3c4>
 801f290:	a942      	add	r1, sp, #264	; 0x108
 801f292:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801f296:	4a36      	ldr	r2, [pc, #216]	; (801f370 <__kernel_rem_pio2f+0x304>)
 801f298:	eddf 7a38 	vldr	s15, [pc, #224]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f29c:	2100      	movs	r1, #0
 801f29e:	e0bb      	b.n	801f418 <__kernel_rem_pio2f+0x3ac>
 801f2a0:	f04f 0b02 	mov.w	fp, #2
 801f2a4:	e78a      	b.n	801f1bc <__kernel_rem_pio2f+0x150>
 801f2a6:	681a      	ldr	r2, [r3, #0]
 801f2a8:	b948      	cbnz	r0, 801f2be <__kernel_rem_pio2f+0x252>
 801f2aa:	b11a      	cbz	r2, 801f2b4 <__kernel_rem_pio2f+0x248>
 801f2ac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f2b0:	601a      	str	r2, [r3, #0]
 801f2b2:	2201      	movs	r2, #1
 801f2b4:	f10e 0e01 	add.w	lr, lr, #1
 801f2b8:	3304      	adds	r3, #4
 801f2ba:	4610      	mov	r0, r2
 801f2bc:	e784      	b.n	801f1c8 <__kernel_rem_pio2f+0x15c>
 801f2be:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801f2c2:	601a      	str	r2, [r3, #0]
 801f2c4:	4602      	mov	r2, r0
 801f2c6:	e7f5      	b.n	801f2b4 <__kernel_rem_pio2f+0x248>
 801f2c8:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f2cc:	ab06      	add	r3, sp, #24
 801f2ce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f2d6:	aa06      	add	r2, sp, #24
 801f2d8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801f2dc:	e77d      	b.n	801f1da <__kernel_rem_pio2f+0x16e>
 801f2de:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 801f2e2:	ab06      	add	r3, sp, #24
 801f2e4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f2e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f2ec:	e7f3      	b.n	801f2d6 <__kernel_rem_pio2f+0x26a>
 801f2ee:	a906      	add	r1, sp, #24
 801f2f0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801f2f4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f2f8:	4302      	orrs	r2, r0
 801f2fa:	e7ad      	b.n	801f258 <__kernel_rem_pio2f+0x1ec>
 801f2fc:	3001      	adds	r0, #1
 801f2fe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f302:	2a00      	cmp	r2, #0
 801f304:	d0fa      	beq.n	801f2fc <__kernel_rem_pio2f+0x290>
 801f306:	a91a      	add	r1, sp, #104	; 0x68
 801f308:	eb0a 0208 	add.w	r2, sl, r8
 801f30c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801f310:	f10a 0301 	add.w	r3, sl, #1
 801f314:	eb0a 0100 	add.w	r1, sl, r0
 801f318:	4299      	cmp	r1, r3
 801f31a:	da04      	bge.n	801f326 <__kernel_rem_pio2f+0x2ba>
 801f31c:	468a      	mov	sl, r1
 801f31e:	e70e      	b.n	801f13e <__kernel_rem_pio2f+0xd2>
 801f320:	9b04      	ldr	r3, [sp, #16]
 801f322:	2001      	movs	r0, #1
 801f324:	e7eb      	b.n	801f2fe <__kernel_rem_pio2f+0x292>
 801f326:	9803      	ldr	r0, [sp, #12]
 801f328:	f8dd c004 	ldr.w	ip, [sp, #4]
 801f32c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801f330:	9000      	str	r0, [sp, #0]
 801f332:	ee07 0a90 	vmov	s15, r0
 801f336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f33a:	2000      	movs	r0, #0
 801f33c:	ece2 7a01 	vstmia	r2!, {s15}
 801f340:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f344:	4696      	mov	lr, r2
 801f346:	4548      	cmp	r0, r9
 801f348:	dd06      	ble.n	801f358 <__kernel_rem_pio2f+0x2ec>
 801f34a:	a842      	add	r0, sp, #264	; 0x108
 801f34c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f350:	edc0 7a00 	vstr	s15, [r0]
 801f354:	3301      	adds	r3, #1
 801f356:	e7df      	b.n	801f318 <__kernel_rem_pio2f+0x2ac>
 801f358:	ecfc 6a01 	vldmia	ip!, {s13}
 801f35c:	ed3e 7a01 	vldmdb	lr!, {s14}
 801f360:	3001      	adds	r0, #1
 801f362:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f366:	e7ee      	b.n	801f346 <__kernel_rem_pio2f+0x2da>
 801f368:	3b01      	subs	r3, #1
 801f36a:	e779      	b.n	801f260 <__kernel_rem_pio2f+0x1f4>
 801f36c:	08021b70 	.word	0x08021b70
 801f370:	08021b44 	.word	0x08021b44
 801f374:	43800000 	.word	0x43800000
 801f378:	3b800000 	.word	0x3b800000
 801f37c:	00000000 	.word	0x00000000
 801f380:	9b02      	ldr	r3, [sp, #8]
 801f382:	eeb0 0a48 	vmov.f32	s0, s16
 801f386:	1b98      	subs	r0, r3, r6
 801f388:	f000 f9ee 	bl	801f768 <scalbnf>
 801f38c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f374 <__kernel_rem_pio2f+0x308>
 801f390:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f398:	db1b      	blt.n	801f3d2 <__kernel_rem_pio2f+0x366>
 801f39a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f378 <__kernel_rem_pio2f+0x30c>
 801f39e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f3a2:	aa06      	add	r2, sp, #24
 801f3a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f3a8:	a906      	add	r1, sp, #24
 801f3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3ae:	3408      	adds	r4, #8
 801f3b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f3b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f3b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f3bc:	ee10 3a10 	vmov	r3, s0
 801f3c0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f3c4:	ee17 2a90 	vmov	r2, s15
 801f3c8:	f10a 0301 	add.w	r3, sl, #1
 801f3cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f3d0:	e74c      	b.n	801f26c <__kernel_rem_pio2f+0x200>
 801f3d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f3d6:	aa06      	add	r2, sp, #24
 801f3d8:	ee10 3a10 	vmov	r3, s0
 801f3dc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801f3e0:	4653      	mov	r3, sl
 801f3e2:	e743      	b.n	801f26c <__kernel_rem_pio2f+0x200>
 801f3e4:	aa42      	add	r2, sp, #264	; 0x108
 801f3e6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f3ea:	aa06      	add	r2, sp, #24
 801f3ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801f3f0:	9201      	str	r2, [sp, #4]
 801f3f2:	ee07 2a90 	vmov	s15, r2
 801f3f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3fa:	3901      	subs	r1, #1
 801f3fc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f400:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f404:	edc0 7a00 	vstr	s15, [r0]
 801f408:	e73a      	b.n	801f280 <__kernel_rem_pio2f+0x214>
 801f40a:	ecf2 6a01 	vldmia	r2!, {s13}
 801f40e:	ecb6 7a01 	vldmia	r6!, {s14}
 801f412:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f416:	3101      	adds	r1, #1
 801f418:	42b9      	cmp	r1, r7
 801f41a:	dc01      	bgt.n	801f420 <__kernel_rem_pio2f+0x3b4>
 801f41c:	428c      	cmp	r4, r1
 801f41e:	daf4      	bge.n	801f40a <__kernel_rem_pio2f+0x39e>
 801f420:	aa56      	add	r2, sp, #344	; 0x158
 801f422:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801f426:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801f42a:	3801      	subs	r0, #1
 801f42c:	3401      	adds	r4, #1
 801f42e:	e72c      	b.n	801f28a <__kernel_rem_pio2f+0x21e>
 801f430:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f432:	2a02      	cmp	r2, #2
 801f434:	dc0a      	bgt.n	801f44c <__kernel_rem_pio2f+0x3e0>
 801f436:	2a00      	cmp	r2, #0
 801f438:	dc61      	bgt.n	801f4fe <__kernel_rem_pio2f+0x492>
 801f43a:	d03c      	beq.n	801f4b6 <__kernel_rem_pio2f+0x44a>
 801f43c:	9b00      	ldr	r3, [sp, #0]
 801f43e:	f003 0007 	and.w	r0, r3, #7
 801f442:	b057      	add	sp, #348	; 0x15c
 801f444:	ecbd 8b04 	vpop	{d8-d9}
 801f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f44c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801f44e:	2a03      	cmp	r2, #3
 801f450:	d1f4      	bne.n	801f43c <__kernel_rem_pio2f+0x3d0>
 801f452:	aa2e      	add	r2, sp, #184	; 0xb8
 801f454:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f458:	4608      	mov	r0, r1
 801f45a:	461c      	mov	r4, r3
 801f45c:	2c00      	cmp	r4, #0
 801f45e:	f1a0 0004 	sub.w	r0, r0, #4
 801f462:	dc59      	bgt.n	801f518 <__kernel_rem_pio2f+0x4ac>
 801f464:	4618      	mov	r0, r3
 801f466:	2801      	cmp	r0, #1
 801f468:	f1a1 0104 	sub.w	r1, r1, #4
 801f46c:	dc64      	bgt.n	801f538 <__kernel_rem_pio2f+0x4cc>
 801f46e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f472:	2b01      	cmp	r3, #1
 801f474:	dc70      	bgt.n	801f558 <__kernel_rem_pio2f+0x4ec>
 801f476:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801f47a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801f47e:	f1bb 0f00 	cmp.w	fp, #0
 801f482:	d172      	bne.n	801f56a <__kernel_rem_pio2f+0x4fe>
 801f484:	edc5 6a00 	vstr	s13, [r5]
 801f488:	ed85 7a01 	vstr	s14, [r5, #4]
 801f48c:	edc5 7a02 	vstr	s15, [r5, #8]
 801f490:	e7d4      	b.n	801f43c <__kernel_rem_pio2f+0x3d0>
 801f492:	aa2e      	add	r2, sp, #184	; 0xb8
 801f494:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f498:	ed91 7a00 	vldr	s14, [r1]
 801f49c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f4a0:	3b01      	subs	r3, #1
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	daf5      	bge.n	801f492 <__kernel_rem_pio2f+0x426>
 801f4a6:	f1bb 0f00 	cmp.w	fp, #0
 801f4aa:	d001      	beq.n	801f4b0 <__kernel_rem_pio2f+0x444>
 801f4ac:	eef1 7a67 	vneg.f32	s15, s15
 801f4b0:	edc5 7a00 	vstr	s15, [r5]
 801f4b4:	e7c2      	b.n	801f43c <__kernel_rem_pio2f+0x3d0>
 801f4b6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f4ba:	e7f2      	b.n	801f4a2 <__kernel_rem_pio2f+0x436>
 801f4bc:	aa2e      	add	r2, sp, #184	; 0xb8
 801f4be:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801f4c2:	edd0 7a00 	vldr	s15, [r0]
 801f4c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f4ca:	3901      	subs	r1, #1
 801f4cc:	2900      	cmp	r1, #0
 801f4ce:	daf5      	bge.n	801f4bc <__kernel_rem_pio2f+0x450>
 801f4d0:	f1bb 0f00 	cmp.w	fp, #0
 801f4d4:	d017      	beq.n	801f506 <__kernel_rem_pio2f+0x49a>
 801f4d6:	eef1 7a47 	vneg.f32	s15, s14
 801f4da:	edc5 7a00 	vstr	s15, [r5]
 801f4de:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801f4e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f4e6:	a82f      	add	r0, sp, #188	; 0xbc
 801f4e8:	2101      	movs	r1, #1
 801f4ea:	428b      	cmp	r3, r1
 801f4ec:	da0e      	bge.n	801f50c <__kernel_rem_pio2f+0x4a0>
 801f4ee:	f1bb 0f00 	cmp.w	fp, #0
 801f4f2:	d001      	beq.n	801f4f8 <__kernel_rem_pio2f+0x48c>
 801f4f4:	eef1 7a67 	vneg.f32	s15, s15
 801f4f8:	edc5 7a01 	vstr	s15, [r5, #4]
 801f4fc:	e79e      	b.n	801f43c <__kernel_rem_pio2f+0x3d0>
 801f4fe:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801f37c <__kernel_rem_pio2f+0x310>
 801f502:	4619      	mov	r1, r3
 801f504:	e7e2      	b.n	801f4cc <__kernel_rem_pio2f+0x460>
 801f506:	eef0 7a47 	vmov.f32	s15, s14
 801f50a:	e7e6      	b.n	801f4da <__kernel_rem_pio2f+0x46e>
 801f50c:	ecb0 7a01 	vldmia	r0!, {s14}
 801f510:	3101      	adds	r1, #1
 801f512:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f516:	e7e8      	b.n	801f4ea <__kernel_rem_pio2f+0x47e>
 801f518:	edd0 7a00 	vldr	s15, [r0]
 801f51c:	edd0 6a01 	vldr	s13, [r0, #4]
 801f520:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f524:	3c01      	subs	r4, #1
 801f526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f52a:	ed80 7a00 	vstr	s14, [r0]
 801f52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f532:	edc0 7a01 	vstr	s15, [r0, #4]
 801f536:	e791      	b.n	801f45c <__kernel_rem_pio2f+0x3f0>
 801f538:	edd1 7a00 	vldr	s15, [r1]
 801f53c:	edd1 6a01 	vldr	s13, [r1, #4]
 801f540:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f544:	3801      	subs	r0, #1
 801f546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f54a:	ed81 7a00 	vstr	s14, [r1]
 801f54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f552:	edc1 7a01 	vstr	s15, [r1, #4]
 801f556:	e786      	b.n	801f466 <__kernel_rem_pio2f+0x3fa>
 801f558:	aa2e      	add	r2, sp, #184	; 0xb8
 801f55a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801f55e:	ed91 7a00 	vldr	s14, [r1]
 801f562:	3b01      	subs	r3, #1
 801f564:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f568:	e783      	b.n	801f472 <__kernel_rem_pio2f+0x406>
 801f56a:	eef1 6a66 	vneg.f32	s13, s13
 801f56e:	eeb1 7a47 	vneg.f32	s14, s14
 801f572:	edc5 6a00 	vstr	s13, [r5]
 801f576:	ed85 7a01 	vstr	s14, [r5, #4]
 801f57a:	eef1 7a67 	vneg.f32	s15, s15
 801f57e:	e785      	b.n	801f48c <__kernel_rem_pio2f+0x420>

0801f580 <__kernel_sinf>:
 801f580:	ee10 3a10 	vmov	r3, s0
 801f584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f588:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f58c:	da04      	bge.n	801f598 <__kernel_sinf+0x18>
 801f58e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f592:	ee17 3a90 	vmov	r3, s15
 801f596:	b35b      	cbz	r3, 801f5f0 <__kernel_sinf+0x70>
 801f598:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f59c:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f5f4 <__kernel_sinf+0x74>
 801f5a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f5f8 <__kernel_sinf+0x78>
 801f5a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f5a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f5fc <__kernel_sinf+0x7c>
 801f5ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f5b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f600 <__kernel_sinf+0x80>
 801f5b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f5b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f604 <__kernel_sinf+0x84>
 801f5bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f5c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f5c4:	b930      	cbnz	r0, 801f5d4 <__kernel_sinf+0x54>
 801f5c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f608 <__kernel_sinf+0x88>
 801f5ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f5ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f5d2:	4770      	bx	lr
 801f5d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f5d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f5dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f5e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f5e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f60c <__kernel_sinf+0x8c>
 801f5e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f5ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f5f0:	4770      	bx	lr
 801f5f2:	bf00      	nop
 801f5f4:	2f2ec9d3 	.word	0x2f2ec9d3
 801f5f8:	b2d72f34 	.word	0xb2d72f34
 801f5fc:	3638ef1b 	.word	0x3638ef1b
 801f600:	b9500d01 	.word	0xb9500d01
 801f604:	3c088889 	.word	0x3c088889
 801f608:	be2aaaab 	.word	0xbe2aaaab
 801f60c:	3e2aaaab 	.word	0x3e2aaaab

0801f610 <finitef>:
 801f610:	b082      	sub	sp, #8
 801f612:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f616:	9801      	ldr	r0, [sp, #4]
 801f618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f61c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801f620:	bfac      	ite	ge
 801f622:	2000      	movge	r0, #0
 801f624:	2001      	movlt	r0, #1
 801f626:	b002      	add	sp, #8
 801f628:	4770      	bx	lr
	...

0801f62c <floorf>:
 801f62c:	ee10 3a10 	vmov	r3, s0
 801f630:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f634:	3a7f      	subs	r2, #127	; 0x7f
 801f636:	2a16      	cmp	r2, #22
 801f638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f63c:	dc2a      	bgt.n	801f694 <floorf+0x68>
 801f63e:	2a00      	cmp	r2, #0
 801f640:	da11      	bge.n	801f666 <floorf+0x3a>
 801f642:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f6a4 <floorf+0x78>
 801f646:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f64a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f652:	dd05      	ble.n	801f660 <floorf+0x34>
 801f654:	2b00      	cmp	r3, #0
 801f656:	da23      	bge.n	801f6a0 <floorf+0x74>
 801f658:	4a13      	ldr	r2, [pc, #76]	; (801f6a8 <floorf+0x7c>)
 801f65a:	2900      	cmp	r1, #0
 801f65c:	bf18      	it	ne
 801f65e:	4613      	movne	r3, r2
 801f660:	ee00 3a10 	vmov	s0, r3
 801f664:	4770      	bx	lr
 801f666:	4911      	ldr	r1, [pc, #68]	; (801f6ac <floorf+0x80>)
 801f668:	4111      	asrs	r1, r2
 801f66a:	420b      	tst	r3, r1
 801f66c:	d0fa      	beq.n	801f664 <floorf+0x38>
 801f66e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f6a4 <floorf+0x78>
 801f672:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f676:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f67e:	ddef      	ble.n	801f660 <floorf+0x34>
 801f680:	2b00      	cmp	r3, #0
 801f682:	bfbe      	ittt	lt
 801f684:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f688:	fa40 f202 	asrlt.w	r2, r0, r2
 801f68c:	189b      	addlt	r3, r3, r2
 801f68e:	ea23 0301 	bic.w	r3, r3, r1
 801f692:	e7e5      	b.n	801f660 <floorf+0x34>
 801f694:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f698:	d3e4      	bcc.n	801f664 <floorf+0x38>
 801f69a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f69e:	4770      	bx	lr
 801f6a0:	2300      	movs	r3, #0
 801f6a2:	e7dd      	b.n	801f660 <floorf+0x34>
 801f6a4:	7149f2ca 	.word	0x7149f2ca
 801f6a8:	bf800000 	.word	0xbf800000
 801f6ac:	007fffff 	.word	0x007fffff

0801f6b0 <rintf>:
 801f6b0:	ee10 2a10 	vmov	r2, s0
 801f6b4:	b513      	push	{r0, r1, r4, lr}
 801f6b6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f6ba:	397f      	subs	r1, #127	; 0x7f
 801f6bc:	2916      	cmp	r1, #22
 801f6be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801f6c2:	dc47      	bgt.n	801f754 <rintf+0xa4>
 801f6c4:	b32b      	cbz	r3, 801f712 <rintf+0x62>
 801f6c6:	2900      	cmp	r1, #0
 801f6c8:	ee10 3a10 	vmov	r3, s0
 801f6cc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 801f6d0:	da21      	bge.n	801f716 <rintf+0x66>
 801f6d2:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801f6d6:	425b      	negs	r3, r3
 801f6d8:	4921      	ldr	r1, [pc, #132]	; (801f760 <rintf+0xb0>)
 801f6da:	0a5b      	lsrs	r3, r3, #9
 801f6dc:	0d12      	lsrs	r2, r2, #20
 801f6de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f6e2:	0512      	lsls	r2, r2, #20
 801f6e4:	4313      	orrs	r3, r2
 801f6e6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801f6ea:	ee07 3a90 	vmov	s15, r3
 801f6ee:	edd1 6a00 	vldr	s13, [r1]
 801f6f2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801f6f6:	ed8d 7a01 	vstr	s14, [sp, #4]
 801f6fa:	eddd 7a01 	vldr	s15, [sp, #4]
 801f6fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f702:	ee17 3a90 	vmov	r3, s15
 801f706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f70a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801f70e:	ee00 3a10 	vmov	s0, r3
 801f712:	b002      	add	sp, #8
 801f714:	bd10      	pop	{r4, pc}
 801f716:	4a13      	ldr	r2, [pc, #76]	; (801f764 <rintf+0xb4>)
 801f718:	410a      	asrs	r2, r1
 801f71a:	4213      	tst	r3, r2
 801f71c:	d0f9      	beq.n	801f712 <rintf+0x62>
 801f71e:	0854      	lsrs	r4, r2, #1
 801f720:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801f724:	d006      	beq.n	801f734 <rintf+0x84>
 801f726:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f72a:	ea23 0304 	bic.w	r3, r3, r4
 801f72e:	fa42 f101 	asr.w	r1, r2, r1
 801f732:	430b      	orrs	r3, r1
 801f734:	4a0a      	ldr	r2, [pc, #40]	; (801f760 <rintf+0xb0>)
 801f736:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f73a:	ed90 7a00 	vldr	s14, [r0]
 801f73e:	ee07 3a90 	vmov	s15, r3
 801f742:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f746:	edcd 7a01 	vstr	s15, [sp, #4]
 801f74a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f74e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f752:	e7de      	b.n	801f712 <rintf+0x62>
 801f754:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f758:	d3db      	bcc.n	801f712 <rintf+0x62>
 801f75a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f75e:	e7d8      	b.n	801f712 <rintf+0x62>
 801f760:	08021b7c 	.word	0x08021b7c
 801f764:	007fffff 	.word	0x007fffff

0801f768 <scalbnf>:
 801f768:	ee10 3a10 	vmov	r3, s0
 801f76c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f770:	d025      	beq.n	801f7be <scalbnf+0x56>
 801f772:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f776:	d302      	bcc.n	801f77e <scalbnf+0x16>
 801f778:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f77c:	4770      	bx	lr
 801f77e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f782:	d122      	bne.n	801f7ca <scalbnf+0x62>
 801f784:	4b2a      	ldr	r3, [pc, #168]	; (801f830 <scalbnf+0xc8>)
 801f786:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f834 <scalbnf+0xcc>
 801f78a:	4298      	cmp	r0, r3
 801f78c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f790:	db16      	blt.n	801f7c0 <scalbnf+0x58>
 801f792:	ee10 3a10 	vmov	r3, s0
 801f796:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f79a:	3a19      	subs	r2, #25
 801f79c:	4402      	add	r2, r0
 801f79e:	2afe      	cmp	r2, #254	; 0xfe
 801f7a0:	dd15      	ble.n	801f7ce <scalbnf+0x66>
 801f7a2:	ee10 3a10 	vmov	r3, s0
 801f7a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 801f838 <scalbnf+0xd0>
 801f7aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 801f83c <scalbnf+0xd4>
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	eeb0 7a67 	vmov.f32	s14, s15
 801f7b4:	bfb8      	it	lt
 801f7b6:	eef0 7a66 	vmovlt.f32	s15, s13
 801f7ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 801f7be:	4770      	bx	lr
 801f7c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f840 <scalbnf+0xd8>
 801f7c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f7c8:	4770      	bx	lr
 801f7ca:	0dd2      	lsrs	r2, r2, #23
 801f7cc:	e7e6      	b.n	801f79c <scalbnf+0x34>
 801f7ce:	2a00      	cmp	r2, #0
 801f7d0:	dd06      	ble.n	801f7e0 <scalbnf+0x78>
 801f7d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f7d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f7da:	ee00 3a10 	vmov	s0, r3
 801f7de:	4770      	bx	lr
 801f7e0:	f112 0f16 	cmn.w	r2, #22
 801f7e4:	da1a      	bge.n	801f81c <scalbnf+0xb4>
 801f7e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f7ea:	4298      	cmp	r0, r3
 801f7ec:	ee10 3a10 	vmov	r3, s0
 801f7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f7f4:	dd0a      	ble.n	801f80c <scalbnf+0xa4>
 801f7f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801f838 <scalbnf+0xd0>
 801f7fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801f83c <scalbnf+0xd4>
 801f7fe:	eef0 7a40 	vmov.f32	s15, s0
 801f802:	2b00      	cmp	r3, #0
 801f804:	bf18      	it	ne
 801f806:	eeb0 0a47 	vmovne.f32	s0, s14
 801f80a:	e7db      	b.n	801f7c4 <scalbnf+0x5c>
 801f80c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801f840 <scalbnf+0xd8>
 801f810:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801f844 <scalbnf+0xdc>
 801f814:	eef0 7a40 	vmov.f32	s15, s0
 801f818:	2b00      	cmp	r3, #0
 801f81a:	e7f3      	b.n	801f804 <scalbnf+0x9c>
 801f81c:	3219      	adds	r2, #25
 801f81e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f822:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f826:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f848 <scalbnf+0xe0>
 801f82a:	ee07 3a10 	vmov	s14, r3
 801f82e:	e7c4      	b.n	801f7ba <scalbnf+0x52>
 801f830:	ffff3cb0 	.word	0xffff3cb0
 801f834:	4c000000 	.word	0x4c000000
 801f838:	7149f2ca 	.word	0x7149f2ca
 801f83c:	f149f2ca 	.word	0xf149f2ca
 801f840:	0da24260 	.word	0x0da24260
 801f844:	8da24260 	.word	0x8da24260
 801f848:	33000000 	.word	0x33000000

0801f84c <_init>:
 801f84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f84e:	bf00      	nop
 801f850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f852:	bc08      	pop	{r3}
 801f854:	469e      	mov	lr, r3
 801f856:	4770      	bx	lr

0801f858 <_fini>:
 801f858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f85a:	bf00      	nop
 801f85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f85e:	bc08      	pop	{r3}
 801f860:	469e      	mov	lr, r3
 801f862:	4770      	bx	lr
